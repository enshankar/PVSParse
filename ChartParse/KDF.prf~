(KDF
 (u8to_bstring_TCC1 0
  (u8to_bstring_TCC1-1 nil 3851185468 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (u8to_bstring subtype "1" "index")))
 (u8to_bstring_TCC2 0
  (u8to_bstring_TCC2-1 nil 3851185468 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (u32pow2 const-decl "uint32" integertypes nil))
   nil
   (u8to_bstring subtype
    "(# length := 1, seq := (LAMBDA (i: naturalnumbers.below(1)): KDF.x) #)"
    "bytestring16")))
 (u16to_bstring_TCC1 0
  (u16to_bstring_TCC1-1 nil 3851185468 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (u16to_bstring subtype "2" "index")))
 (u16to_bstring_TCC2 0
  (u16to_bstring_TCC2-1 nil 3851185468
   ("" (grind)
    (("" (typepred "ndiv(x!1, 256)") (("" (assert) nil nil)) nil)) nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (u16div const-decl "uint16" integertypes nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil
   (u16to_bstring subtype "integertypes.u16div(KDF.x, 256)" "byte")))
 (u16to_bstring_TCC3 0
  (u16to_bstring_TCC3-1 nil 3851185468 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u16rem const-decl "uint16" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u16to_bstring subtype "integertypes.u16rem(KDF.x, 256)" "byte")))
 (u16to_bstring_TCC4 0
  (u16to_bstring_TCC4-1 nil 3851185468 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (u32pow2 const-decl "uint32" integertypes nil))
   nil
   (u16to_bstring subtype
                  "(# length := 2, seq := (LAMBDA (i: naturalnumbers.below(2)): IF i = 0 THEN integertypes.u16div(KDF.x, 256) ELSE integertypes.u16rem(KDF.x, 256) ENDIF) #)"
                  "bytestring16")))
 (u32to_bstring_TCC1 0
  (u32to_bstring_TCC1-1 nil 3851185468 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (u32to_bstring subtype "4" "index")))
 (u32to_bstring_TCC2 0
  (u32to_bstring_TCC2-1 nil 3851185468 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u32rem const-decl "uint32" integertypes nil)
    (u32rshift const-decl "uint32" integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u32to_bstring subtype
    "integertypes.u32rem(integertypes.u32rshift(KDF.x, 24), 256)"
    "byte")))
 (u32to_bstring_TCC3 0
  (u32to_bstring_TCC3-1 nil 3851185468 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u32rem const-decl "uint32" integertypes nil)
    (u32rshift const-decl "uint32" integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u32to_bstring subtype
    "integertypes.u32rem(integertypes.u32rshift(KDF.x, 16), 256)"
    "byte")))
 (u32to_bstring_TCC4 0
  (u32to_bstring_TCC4-1 nil 3851185468 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u32rem const-decl "uint32" integertypes nil)
    (u32rshift const-decl "uint32" integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u32to_bstring subtype
    "integertypes.u32rem(integertypes.u32rshift(KDF.x, 8), 256)"
    "byte")))
 (u32to_bstring_TCC5 0
  (u32to_bstring_TCC5-1 nil 3851185468 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32rem const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u32to_bstring subtype "integertypes.u32rem(KDF.x, 256)" "byte")))
 (u32to_bstring_TCC6 0
  (u32to_bstring_TCC6-1 nil 3851185468 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (u32pow2 const-decl "uint32" integertypes nil))
   nil
   (u32to_bstring subtype
    "(# length := 4, seq := (LAMBDA (i: naturalnumbers.below(4)): IF i = 0 THEN integertypes.u32rem(integertypes.u32rshift(KDF.x, 24), 256) ELSIF i = 1 THEN integertypes.u32rem(integertypes.u32rshift(KDF.x, 16), 256) ELSIF i = 2 THEN integertypes.u32rem(integertypes.u32rshift(KDF.x, 8), 256) ELSE integertypes.u32rem(KDF.x, 256) ENDIF) #)"
    "bytestring16")))
 (u64to_bstring_TCC1 0
  (u64to_bstring_TCC1-1 nil 3851185468 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (u64to_bstring subtype "8" "index")))
 (u64to_bstring_TCC2 0
  (u64to_bstring_TCC2-1 nil 3851185468 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u64rem const-decl "uint64" integertypes nil)
    (u64rshift const-decl "uint64" integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64to_bstring subtype
    "integertypes.u64rem(integertypes.u64rshift(KDF.x, 56), 256)"
    "byte")))
 (u64to_bstring_TCC3 0
  (u64to_bstring_TCC3-1 nil 3851185468 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u64rem const-decl "uint64" integertypes nil)
    (u64rshift const-decl "uint64" integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64to_bstring subtype
    "integertypes.u64rem(integertypes.u64rshift(KDF.x, 48), 256)"
    "byte")))
 (u64to_bstring_TCC4 0
  (u64to_bstring_TCC4-1 nil 3851185468 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u64rem const-decl "uint64" integertypes nil)
    (u64rshift const-decl "uint64" integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64to_bstring subtype
    "integertypes.u64rem(integertypes.u64rshift(KDF.x, 40), 256)"
    "byte")))
 (u64to_bstring_TCC5 0
  (u64to_bstring_TCC5-1 nil 3851185468 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u64rem const-decl "uint64" integertypes nil)
    (u64rshift const-decl "uint64" integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64to_bstring subtype
    "integertypes.u64rem(integertypes.u64rshift(KDF.x, 32), 256)"
    "byte")))
 (u64to_bstring_TCC6 0
  (u64to_bstring_TCC6-1 nil 3851185468 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u64rem const-decl "uint64" integertypes nil)
    (u64rshift const-decl "uint64" integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64to_bstring subtype
    "integertypes.u64rem(integertypes.u64rshift(KDF.x, 24), 256)"
    "byte")))
 (u64to_bstring_TCC7 0
  (u64to_bstring_TCC7-1 nil 3851185468 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u64rem const-decl "uint64" integertypes nil)
    (u64rshift const-decl "uint64" integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64to_bstring subtype
    "integertypes.u64rem(integertypes.u64rshift(KDF.x, 16), 256)"
    "byte")))
 (u64to_bstring_TCC8 0
  (u64to_bstring_TCC8-1 nil 3851185468 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u64rem const-decl "uint64" integertypes nil)
    (u64rshift const-decl "uint64" integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64to_bstring subtype
    "integertypes.u64rem(integertypes.u64rshift(KDF.x, 8), 256)"
    "byte")))
 (u64to_bstring_TCC9 0
  (u64to_bstring_TCC9-1 nil 3851185468 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u64rem const-decl "uint64" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64to_bstring subtype "integertypes.u64rem(KDF.x, 256)" "byte")))
 (u64to_bstring_TCC10 0
  (u64to_bstring_TCC10-1 nil 3851185468 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (u32pow2 const-decl "uint32" integertypes nil))
   nil
   (u64to_bstring subtype
    "(# length := 8, seq := (LAMBDA (i: naturalnumbers.below(8)): IF i = 0 THEN integertypes.u64rem(integertypes.u64rshift(KDF.x, 56), 256) ELSIF i = 1 THEN integertypes.u64rem(integertypes.u64rshift(KDF.x, 48), 256) ELSIF i = 2 THEN integertypes.u64rem(integertypes.u64rshift(KDF.x, 40), 256) ELSIF i = 3 THEN integertypes.u64rem(integertypes.u64rshift(KDF.x, 32), 256) ELSIF i = 4 THEN integertypes.u64rem(integertypes.u64rshift(KDF.x, 24), 256) ELSIF i = 5 THEN integertypes.u64rem(integertypes.u64rshift(KDF.x, 16), 256) ELSIF i = 6 THEN integertypes.u64rem(integertypes.u64rshift(KDF.x, 8), 256) ELSE integertypes.u64rem(KDF.x, 256) ENDIF) #)"
    "bytestring16")))
 (KDF1_TCC1 0
  (KDF1_TCC1-1 nil 3851185468 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (u32pow2 const-decl "uint32" integertypes nil)
    (bytestring16 type-eq-decl nil KDF nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FCbytes type-eq-decl nil KDF nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil
   (KDF1 subtype "KDF.message"
         "{s2 | reals.<((number_fields.+)(KDF.FC`length, bytestrings.s2`length), exp2.exp2(28))}")))
 (KDF1_TCC2 0
  (KDF1_TCC2-1 nil 3851185468 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (u32pow2 const-decl "uint32" integertypes nil)
    (bytestring16 type-eq-decl nil KDF nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FCbytes type-eq-decl nil KDF nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (KDF1 subtype "KDF.message`length" "uint16")))
 (KDF1_TCC3 0
  (KDF1_TCC3-1 nil 3851185468 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (u32pow2 const-decl "uint32" integertypes nil)
    (bytestring16 type-eq-decl nil KDF nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FCbytes type-eq-decl nil KDF nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (u16div const-decl "uint16" integertypes nil)
    (u16rem const-decl "uint16" integertypes nil)
    (u16to_bstring const-decl "bytestring16" KDF nil)
    (get const-decl "byte" bytestrings nil)
    (++ const-decl "bytestring" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (KDF1 subtype "KDF.u16to_bstring(KDF.message`length)"
         "{s2 | reals.<((number_fields.+)(bytestrings.s2`length, (bytestrings.++(KDF.FC, KDF.message))`length), exp2.exp2(28))}")))
 (KDF1_TCC4 0
  (KDF1_TCC4-1 nil 3851185468 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (u32pow2 const-decl "uint32" integertypes nil)
    (bytestring16 type-eq-decl nil KDF nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FCbytes type-eq-decl nil KDF nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (get const-decl "byte" bytestrings nil)
    (++ const-decl "bytestring" bytestrings nil)
    (u16div const-decl "uint16" integertypes nil)
    (u16rem const-decl "uint16" integertypes nil)
    (u16to_bstring const-decl "bytestring16" KDF nil)
    (exp2 def-decl "posnat" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (KDF1 subtype
         "bytestrings.++(bytestrings.++(KDF.FC, KDF.message), KDF.u16to_bstring(KDF.message`length))"
         "{message: bytestrings.bytestring | reals.<((number_fields.+)(64, message`length), exp2.exp2(28))}")))
 (KDF2_TCC1 0
  (KDF2_TCC1-1 nil 3851185468 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (u32pow2 const-decl "uint32" integertypes nil)
    (bytestring16 type-eq-decl nil KDF nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FCbytes type-eq-decl nil KDF nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (get const-decl "byte" bytestrings nil)
    (++ const-decl "bytestring" bytestrings nil)
    (u16div const-decl "uint16" integertypes nil)
    (u16rem const-decl "uint16" integertypes nil)
    (u16to_bstring const-decl "bytestring16" KDF nil)
    (exp2 def-decl "posnat" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (KDF2 subtype "KDF.message2"
         "{s2 | reals.<((number_fields.+)(bytestrings.s2`length, (bytestrings.++(bytestrings.++(KDF.FC, KDF.message1), KDF.u16to_bstring(KDF.message1`length)))`length), exp2.exp2(28))}")))
 (KDF2_TCC2 0
  (KDF2_TCC2-1 nil 3851185468 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (u32pow2 const-decl "uint32" integertypes nil)
    (bytestring16 type-eq-decl nil KDF nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FCbytes type-eq-decl nil KDF nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (KDF2 subtype "KDF.message2`length" "uint16")))
 (KDF2_TCC3 0
  (KDF2_TCC3-1 nil 3851185468 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (u32pow2 const-decl "uint32" integertypes nil)
    (bytestring16 type-eq-decl nil KDF nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FCbytes type-eq-decl nil KDF nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (u16div const-decl "uint16" integertypes nil)
    (u16rem const-decl "uint16" integertypes nil)
    (u16to_bstring const-decl "bytestring16" KDF nil)
    (get const-decl "byte" bytestrings nil)
    (++ const-decl "bytestring" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (KDF2 subtype "KDF.u16to_bstring(KDF.message2`length)"
         "{s2 | reals.<((number_fields.+)(bytestrings.s2`length, (bytestrings.++(bytestrings.++(bytestrings.++(KDF.FC, KDF.message1), KDF.u16to_bstring(KDF.message1`length)), KDF.message2))`length), exp2.exp2(28))}")))
 (KDF2_TCC4 0
  (KDF2_TCC4-1 nil 3851185468 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (u32pow2 const-decl "uint32" integertypes nil)
    (bytestring16 type-eq-decl nil KDF nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FCbytes type-eq-decl nil KDF nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (get const-decl "byte" bytestrings nil)
    (++ const-decl "bytestring" bytestrings nil)
    (u16div const-decl "uint16" integertypes nil)
    (u16rem const-decl "uint16" integertypes nil)
    (u16to_bstring const-decl "bytestring16" KDF nil)
    (exp2 def-decl "posnat" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (KDF2 subtype
         "bytestrings.++(bytestrings.++(bytestrings.++(bytestrings.++(KDF.FC, KDF.message1), KDF.u16to_bstring(KDF.message1`length)), KDF.message2), KDF.u16to_bstring(KDF.message2`length))"
         "{message: bytestrings.bytestring | reals.<((number_fields.+)(64, message`length), exp2.exp2(28))}")))
 (KDF3_TCC1 0
  (KDF3_TCC1-1 nil 3851185468 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (u32pow2 const-decl "uint32" integertypes nil)
    (bytestring16 type-eq-decl nil KDF nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FCbytes type-eq-decl nil KDF nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (get const-decl "byte" bytestrings nil)
    (++ const-decl "bytestring" bytestrings nil)
    (u16div const-decl "uint16" integertypes nil)
    (u16rem const-decl "uint16" integertypes nil)
    (u16to_bstring const-decl "bytestring16" KDF nil)
    (exp2 def-decl "posnat" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (KDF3 subtype "KDF.message3"
         "{s2 | reals.<((number_fields.+)(bytestrings.s2`length, (bytestrings.++(bytestrings.++(bytestrings.++(bytestrings.++(KDF.FC, KDF.message1), KDF.u16to_bstring(KDF.message1`length)), KDF.message2), KDF.u16to_bstring(KDF.message2`length)))`length), exp2.exp2(28))}")))
 (KDF3_TCC2 0
  (KDF3_TCC2-1 nil 3851185468 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (u32pow2 const-decl "uint32" integertypes nil)
    (bytestring16 type-eq-decl nil KDF nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FCbytes type-eq-decl nil KDF nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (KDF3 subtype "KDF.message3`length" "uint16")))
 (KDF3_TCC3 0
  (KDF3_TCC3-1 nil 3851185468 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (u32pow2 const-decl "uint32" integertypes nil)
    (bytestring16 type-eq-decl nil KDF nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FCbytes type-eq-decl nil KDF nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (u16div const-decl "uint16" integertypes nil)
    (u16rem const-decl "uint16" integertypes nil)
    (u16to_bstring const-decl "bytestring16" KDF nil)
    (get const-decl "byte" bytestrings nil)
    (++ const-decl "bytestring" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (KDF3 subtype "KDF.u16to_bstring(KDF.message3`length)"
         "{s2 | reals.<((number_fields.+)(bytestrings.s2`length, (bytestrings.++(bytestrings.++(bytestrings.++(bytestrings.++(bytestrings.++(KDF.FC, KDF.message1), KDF.u16to_bstring(KDF.message1`length)), KDF.message2), KDF.u16to_bstring(KDF.message2`length)), KDF.message3))`length), exp2.exp2(28))}")))
 (KDF3_TCC4 0
  (KDF3_TCC4-1 nil 3851185468 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (u32pow2 const-decl "uint32" integertypes nil)
    (bytestring16 type-eq-decl nil KDF nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FCbytes type-eq-decl nil KDF nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (get const-decl "byte" bytestrings nil)
    (++ const-decl "bytestring" bytestrings nil)
    (u16div const-decl "uint16" integertypes nil)
    (u16rem const-decl "uint16" integertypes nil)
    (u16to_bstring const-decl "bytestring16" KDF nil)
    (exp2 def-decl "posnat" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (KDF3 subtype
         "bytestrings.++(bytestrings.++(bytestrings.++(bytestrings.++(bytestrings.++(bytestrings.++(KDF.FC, KDF.message1), KDF.u16to_bstring(KDF.message1`length)), KDF.message2), KDF.u16to_bstring(KDF.message2`length)), KDF.message3), KDF.u16to_bstring(KDF.message3`length))"
         "{message: bytestrings.bytestring | reals.<((number_fields.+)(64, message`length), exp2.exp2(28))}")))
 (KAUSF_TCC1 0
  (KAUSF_TCC1-1 nil 3851185468 ("" (grind) nil nil)
   ((exp2 def-decl "posnat" exp2 nil)) nil
   (KAUSF subtype "KDF.IK"
    "{s2 | reals.<((number_fields.+)(KDF.CK`length, bytestrings.s2`length), exp2.exp2(28))}")))
 (KAUSF_TCC2 0
  (KAUSF_TCC2-1 nil 3851185468 ("" (grind) nil nil)
   ((get const-decl "byte" bytestrings nil)
    (++ const-decl "bytestring" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32pow2 const-decl "uint32" integertypes nil))
   nil
   (KAUSF subtype "bytestrings.++(KDF.CK, KDF.IK)" "bytestring16")))
 (KAUSF_TCC3 0
  (KAUSF_TCC3-1 nil 3851185468 ("" (subtype-tcc) nil nil)
   ((unit const-decl "bytestring" bytestrings nil)) nil
   (KAUSF subtype "bytestrings.unit(0x6a)" "FCbytes")))
 (KAUSF_TCC4 0
  (KAUSF_TCC4-1 nil 3851185468 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (lbytes type-eq-decl nil rotate nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (bytestring16 type-eq-decl nil KDF nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (u8xor const-decl "uint8" integer_bv_ops nil)
    (lbytesXOR const-decl "lbytes(l)" rotate nil)
    (u32pow2 const-decl "uint32" integertypes nil))
   nil
   (KAUSF subtype "rotate.lbytesXOR(6)(KDF.SQN, KDF.AK)"
    "bytestring16")))
 (KSEAF_TCC1 0
  (KSEAF_TCC1-1 nil 3851185468 ("" (grind) nil nil)
   ((exp2 def-decl "posnat" exp2 nil)
    (u32pow2 const-decl "uint32" integertypes nil))
   nil (KSEAF subtype "KDF.kausf" "bytestring16")))
 (KSEAF_TCC2 0
  (KSEAF_TCC2-1 nil 3851185468 ("" (subtype-tcc) nil nil)
   ((unit const-decl "bytestring" bytestrings nil)) nil
   (KSEAF subtype "bytestrings.unit(0x6c)" "FCbytes")))
 (KAMF_TCC1 0
  (KAMF_TCC1-1 nil 3851185468 ("" (subtype-tcc) nil nil)
   ((unit const-decl "bytestring" bytestrings nil)) nil
   (KAMF subtype "bytestrings.unit(0x6d)" "FCbytes")))
 (RESstar_TCC1 0
  (RESstar_TCC1-1 nil 3851185468 ("" (grind) nil nil)
   ((exp2 def-decl "posnat" exp2 nil)) nil
   (RESstar subtype "KDF.IK"
    "{s2 | reals.<((number_fields.+)(KDF.CK`length, bytestrings.s2`length), exp2.exp2(28))}")))
 (RESstar_TCC2 0
  (RESstar_TCC2-1 nil 3851185468 ("" (grind) nil nil)
   ((get const-decl "byte" bytestrings nil)
    (++ const-decl "bytestring" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32pow2 const-decl "uint32" integertypes nil))
   nil
   (RESstar subtype "bytestrings.++(KDF.CK, KDF.IK)" "bytestring16")))
 (RESstar_TCC3 0
  (RESstar_TCC3-1 nil 3851185468 ("" (subtype-tcc) nil nil)
   ((unit const-decl "bytestring" bytestrings nil)) nil
   (RESstar subtype "bytestrings.unit(0x6b)" "FCbytes")))
 (RESstar_TCC4 0
  (RESstar_TCC4-1 nil 3851185468 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (lbytes type-eq-decl nil rotate nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (bytestring16 type-eq-decl nil KDF nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (u32pow2 const-decl "uint32" integertypes nil))
   nil (RESstar subtype "KDF.RAND" "bytestring16")))
 (RESstar_TCC5 0
  (RESstar_TCC5-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (RESstar subtype "KDF.RESXRES" "bytestring16")))
 (XRESstar_TCC1 0
  (XRESstar_TCC1-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (XRESstar subtype "16" "naturalnumbers.upto(length(KDF.Rstar))")))
 (XRESstar_TCC2 0
  (XRESstar_TCC2-1 nil 3851185468 ("" (subtype-tcc) nil nil)
   ((get const-decl "byte" bytestrings nil)
    (suffix const-decl "bytestring" bytestrings nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (XRESstar subtype "bytestrings.suffix(KDF.Rstar, 16)"
    "rotate.lbytes(16)")))
 (test_KDF1_TCC1 0
  (test_KDF1_TCC1-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KDF1 subtype "\"key\"" "bstring")))
 (test_KDF1_TCC2 0
  (test_KDF1_TCC2-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KDF1 subtype "bytestrings.mk_bytestring(\"key\")"
              "bytestring16")))
 (test_KDF1_TCC3 0
  (test_KDF1_TCC3-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KDF1 subtype "\"This is a message.\"" "bstring")))
 (test_KDF1_TCC4 0
  (test_KDF1_TCC4-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KDF1 subtype
              "bytestrings.mk_bytestring(\"This is a message.\")"
              "bytestring16")))
 (test_KDF1_TCC5 0
  (test_KDF1_TCC5-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KDF1 subtype
              "KDF.KDF1(bytestrings.mk_bytestring(\"key\"), bytestrings.unit(0x6c), bytestrings.mk_bytestring(\"This is a message.\"))"
              "{X | reals.<(number_fields.*(2, SHA256.X`length), exp2.exp2(28))}")))
 (test_KDF1_TCC6 0
  (test_KDF1_TCC6-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KDF1 subtype
              "SHA256.bytestring2hexstring(KDF.KDF1(bytestrings.mk_bytestring(\"key\"), bytestrings.unit(0x6c), bytestrings.mk_bytestring(\"This is a message.\")))"
              "rotate.lbytes(32)")))
 (test_KDF2_TCC1 0
  (test_KDF2_TCC1-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KDF2 subtype "\"This is another message.\"" "bstring")))
 (test_KDF2_TCC2 0
  (test_KDF2_TCC2-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KDF2 subtype
              "bytestrings.mk_bytestring(\"This is another message.\")"
              "bytestring16")))
 (test_KDF2_TCC3 0
  (test_KDF2_TCC3-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KDF2 subtype
              "KDF.KDF2(bytestrings.mk_bytestring(\"key\"), bytestrings.unit(0x6d), bytestrings.mk_bytestring(\"This is a message.\"), bytestrings.mk_bytestring(\"This is another message.\"))"
              "{X | reals.<(number_fields.*(2, SHA256.X`length), exp2.exp2(28))}")))
 (test_KDF2_TCC4 0
  (test_KDF2_TCC4-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KDF2 subtype
              "SHA256.bytestring2hexstring(KDF.KDF2(bytestrings.mk_bytestring(\"key\"), bytestrings.unit(0x6d), bytestrings.mk_bytestring(\"This is a message.\"), bytestrings.mk_bytestring(\"This is another message.\")))"
              "rotate.lbytes(32)")))
 (test_KDF3_TCC1 0
  (test_KDF3_TCC1-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KDF3 subtype "\"This is the final message.\"" "bstring")))
 (test_KDF3_TCC2 0
  (test_KDF3_TCC2-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KDF3 subtype
              "bytestrings.mk_bytestring(\"This is the final message.\")"
              "bytestring16")))
 (test_KDF3_TCC3 0
  (test_KDF3_TCC3-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KDF3 subtype
              "KDF.KDF3(bytestrings.mk_bytestring(\"key\"), bytestrings.unit(0x6d), bytestrings.mk_bytestring(\"This is a message.\"), bytestrings.mk_bytestring(\"This is another message.\"), bytestrings.mk_bytestring(\"This is the final message.\"))"
              "{X | reals.<(number_fields.*(2, SHA256.X`length), exp2.exp2(28))}")))
 (test_KDF3_TCC4 0
  (test_KDF3_TCC4-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KDF3 subtype
              "SHA256.bytestring2hexstring(KDF.KDF3(bytestrings.mk_bytestring(\"key\"), bytestrings.unit(0x6d), bytestrings.mk_bytestring(\"This is a message.\"), bytestrings.mk_bytestring(\"This is another message.\"), bytestrings.mk_bytestring(\"This is the final message.\")))"
              "rotate.lbytes(32)")))
 (test_KAUSF_TCC1 0
  (test_KAUSF_TCC1-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KAUSF subtype "0xaa" "uint8")))
 (test_KAUSF_TCC2 0
  (test_KAUSF_TCC2-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KAUSF subtype "\"ServerNetwork\"" "bstring")))
 (test_KAUSF_TCC3 0
  (test_KAUSF_TCC3-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KAUSF subtype "bytestrings.mk_bytestring(\"ServerNetwork\")"
    "bytestring16")))
 (test_KAUSF_TCC4 0
  (test_KAUSF_TCC4-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KAUSF subtype
    "KDF.KAUSF(rotate.nbytes(0x33, 16), rotate.nbytes(0xaa, 16), rotate.nbytes(0x5, 6), rotate.nbytes(0x0, 6), bytestrings.mk_bytestring(\"ServerNetwork\"))"
    "{X | reals.<(number_fields.*(2, SHA256.X`length), exp2.exp2(28))}")))
 (test_KAUSF_TCC5 0
  (test_KAUSF_TCC5-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KAUSF subtype
    "SHA256.bytestring2hexstring(KDF.KAUSF(rotate.nbytes(0x33, 16), rotate.nbytes(0xaa, 16), rotate.nbytes(0x5, 6), rotate.nbytes(0x0, 6), bytestrings.mk_bytestring(\"ServerNetwork\")))"
    "rotate.lbytes(32)")))
 (test_KSEAF_TCC1 0
  (test_KSEAF_TCC1-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KSEAF subtype "\"MySecretID\"" "bstring")))
 (test_KSEAF_TCC2 0
  (test_KSEAF_TCC2-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KSEAF subtype "bytestrings.mk_bytestring(\"MySecretID\")"
    "bytestring16")))
 (test_KSEAF_TCC3 0
  (test_KSEAF_TCC3-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KSEAF subtype
    "KDF.KSEAF(KDF.test_KAUSF, bytestrings.mk_bytestring(\"MySecretID\"))"
    "{X | reals.<(number_fields.*(2, SHA256.X`length), exp2.exp2(28))}")))
 (test_KSEAF_TCC4 0
  (test_KSEAF_TCC4-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KSEAF subtype
    "SHA256.bytestring2hexstring(KDF.KSEAF(KDF.test_KAUSF, bytestrings.mk_bytestring(\"MySecretID\")))"
    "rotate.lbytes(32)")))
 (test_KAMF_TCC1 0
  (test_KAMF_TCC1-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KAMF subtype "\"AMF_ID\"" "bstring")))
 (test_KAMF_TCC2 0
  (test_KAMF_TCC2-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KAMF subtype "bytestrings.mk_bytestring(\"AMF_ID\")"
    "bytestring16")))
 (test_KAMF_TCC3 0
  (test_KAMF_TCC3-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KAMF subtype "\"ABBA\"" "bstring")))
 (test_KAMF_TCC4 0
  (test_KAMF_TCC4-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KAMF subtype "bytestrings.mk_bytestring(\"ABBA\")"
    "bytestring16")))
 (test_KAMF_TCC5 0
  (test_KAMF_TCC5-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KAMF subtype
    "KDF.KAMF(KDF.test_KSEAF, bytestrings.mk_bytestring(\"AMF_ID\"), bytestrings.mk_bytestring(\"ABBA\"))"
    "{X | reals.<(number_fields.*(2, SHA256.X`length), exp2.exp2(28))}")))
 (test_KAMF_TCC6 0
  (test_KAMF_TCC6-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil
   (test_KAMF subtype
    "SHA256.bytestring2hexstring(KDF.KAMF(KDF.test_KSEAF, bytestrings.mk_bytestring(\"AMF_ID\"), bytestrings.mk_bytestring(\"ABBA\")))"
    "rotate.lbytes(32)"))))

