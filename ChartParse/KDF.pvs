KDF  % [ parameters ]
		: THEORY

  BEGIN

  IMPORTING  HMAC, hex

  % argstring?(s): RECURSIVE bool =
  %  (LET l = length(s)
  %   IN IF l > 2
  %       THEN LET size = get(s)(l-1) + (64 * get(s)(l-2))
  % 	       IN IF l < size + 4 THEN FALSE
  % 	           ELSE argstring?(prefix(s, size + 2))
  % 		   ENDIF
  %      ELSE l = 2
  %      ENDIF)

   bytestring16: TYPE = {s : bytestring | s`length < u32pow2(16)}

   u8to_bstring(x : uint8): bytestring16 =
   (# length := 1, 
      seq := (LAMBDA (i: below(1)): x) #)

   u16to_bstring(x : uint16): bytestring16 =
   (# length := 2, 
      seq := (LAMBDA (i: below(2)):  %big-endian
       	     	     IF i = 0 THEN u16div(x, 256)
       		     ELSE u16rem(x, 256) ENDIF) #)

   u32to_bstring(x : uint32): bytestring16 =
   (# length := 4, 
      seq := (LAMBDA (i: below(4)):  %big-endian
       	     	     IF i = 0 THEN u32rem(u32rshift(x, 24), 256)
       		     ELSIF i = 1 THEN u32rem(u32rshift(x, 16), 256)
		     ELSIF i = 2 THEN u32rem(u32rshift(x, 8), 256)
		     ELSE u32rem(x, 256)
		     ENDIF) #)

   u64to_bstring(x : uint64): bytestring16 =
   (# length := 8, 
      seq := (LAMBDA (i: below(8)):  %big-endian
       	     	     IF i = 0 THEN u64rem(u64rshift(x, 56), 256)
       		     ELSIF i = 1 THEN u64rem(u64rshift(x, 48), 256)
		     ELSIF i = 2 THEN u64rem(u64rshift(x, 40), 256)
		     ELSIF i = 3 THEN u64rem(u64rshift(x, 32), 256)
		     ELSIF i = 4 THEN u64rem(u64rshift(x, 24), 256)
		     ELSIF i = 5 THEN u64rem(u64rshift(x, 16), 256)
		     ELSIF i = 6 THEN u64rem(u64rshift(x, 8), 256)
		     ELSE u64rem(x, 256)		     
		     ENDIF) #)

   % uto_bstring(x: below(exp2(24))): bytestring16 =
   %   (# length := log2(x) + 1,
   %      seq := (LAMBDA (i: below(16)): nrem(ndiv(x, exp2(i)), pow2(i + 1))) #)

   FCbytes: TYPE = {s: bytestring | s`length = 1 OR s`length = 2}
   

   KDF1(key: bytestring16, FC: FCbytes, message: bytestring16): lbytes(32) = 
    hmac256(64, key, FC ++ message ++ u16to_bstring(message`length))


   KDF2(key: bytestring16, FC: FCbytes, message1, message2: bytestring16): lbytes(32) = 
    hmac256(64, key, FC ++ message1 ++ u16to_bstring(message1`length) ++ message2 ++ u16to_bstring(message2`length))

   KDF3(key: bytestring16, FC: FCbytes, message1, message2, message3: bytestring16): lbytes(32) = 
    hmac256(64, key, FC ++ message1 ++ u16to_bstring(message1`length) ++ message2 ++ u16to_bstring(message2`length) ++ message3 ++ u16to_bstring(message3`length))

   KDF(KEY: bytestring16, S : bytestring16): lbytes(32) =
    hmac256(64, KEY, S)

   % KAUSF(CK, IK: lbytes(16), SQN, AK: lbytes(6), SN: bytestring16): lbytes(32)
   %   = KDF2(CK ++ IK, 0x6A, SN, lbytesXOR(6)(SQN, AK)) 

   % KSEAF(kausf: lbytes(32), SN: bytestring16): lbytes(32)
   %   = KDF1(kausf, 0x6C, SN)

   % KAMF(kseaf: lbytes(32), id: bytestring16, ABBA: bytestring16): lbytes(32)
   %   = KDF2(kseaf, 0x6D, id, ABBA)


   KAUSF(CK, IK: lbytes(16), SQN, AK: lbytes(6), SN: bytestring16): lbytes(32)
    = (LET KEY = CK ++ IK,
           FC = 0x6A,
           P0 = SN,
	   L0 = u16to_bstring(P0`length),
	   P1 = lbytesXOR(6)(SQN, AK),
	   L1 = u16to_bstring(P1`length),
	    S = FC ++ P0 ++ L0 ++ P1 ++ L1
        IN KDF(KEY, S))

   KSEAF(kausf: lbytes(32), SN: bytestring16): lbytes(32)
     = (LET KEY = kausf,
            FC = 0x6C,
            P0 = SN,
	    L0 = u16to_bstring(P0`length),
	     S = FC ++ P0 ++ L0
         IN KDF(KEY, S))  

   KAMF(kseaf: lbytes(32), id: bytestring16, ABBA: bytestring16): lbytes(32)
     = (LET KEY = kseaf,
            FC = 0x6D,
            P0 = id,
	    L0 = u16to_bstring(P0`length),
	    P1 = ABBA,
	    L1 = u16to_bstring(P1`length),
	    S = FC ++ P0 ++ L0 ++ P1 ++ L1
         IN KDF(KEY, S))

   RESstar((CK, IK: lbytes(16)), SN: bytestring16, RAND: lbytes(8), RES: bytestring16): lbytes(32)
     = (LET KEY = CK ++ IK,
            FC = 0x6B,
            P0 = SN,
	    L0 = u16to_bstring(P0`length),
	    P1 = RAND,
	    L1 = u16to_bstring(P1`length),
	    P2 = RES,
	    L2 = u16to_bstring(P2`length),
	    S = FC ++ P0 ++ L0 ++ P1 ++ L1 ++ P2 ++ L2,
	    kdf = KDF(KEY, S)
         IN suffix(kdf, 16))


   XRESstar((CK, IK: lbytes(16)), SN: bytestring16, RAND: lbytes(8), XRES: bytestring16): lbytes(32)
     = (LET KEY = CK ++ IK,
            FC = 0x6B,
            P0 = SN,
	    L0 = u16to_bstring(P0`length),
	    P1 = RAND,
	    L1 = u16to_bstring(P1`length),
	    P2 = XRES,
	    L2 = u16to_bstring(P2`length),
	    S = FC ++ P0 ++ L0 ++ P1 ++ L1 ++ P2 ++ L2,
	    kdf = KDF(KEY, S)
         IN suffix(kdf, 16))

   test_KDF1: lbytes(32) = bytestring2hexstring(KDF1("key", 0x6C, "This is a message."))

   test_KDF2: lbytes(32) = bytestring2hexstring(KDF2("key", 0x6D, "This is a message.", "This is another message."))

   test_KDF3: lbytes(32) = bytestring2hexstring(KDF3("key", 0x6D, "This is a message.", "This is another message.", "This is the final message."))

   test_KAUSF: lbytes(32) = bytestring2hexstring(KAUSF(nbytes(0x33, 16), nbytes(0xAA, 16), nbytes(0x05, 6), nbytes(0x00, 6), "ServerNetwork"))

   test_KSEAF: lbytes(32) = bytestring2hexstring(KSEAF(test_KAUSF, "MySecretID"))

   test_KAMF: lbytes(32) = bytestring2hexstring(KAMF(test_KSEAF, "AMF_ID", "ABBA"))



   

  END KDF
