
%% PVS Version 7.1.63 - International Allegro CL Enterprise Edition 10.1 [64-bit Mac OS X (Intel)] (Dec 23, 2021 0:49)
%% 10.1 [64-bit Mac OS X (Intel)] (Dec 23, 2021 0:49)
$$$PVSHOME/.pvs.lisp
(in-package :pvs)


$$$Rijndael.pvs
Rijndael  : THEORY

  BEGIN

   IMPORTING bytevectors

   A, K, K0, K1, K2, K3: VAR byv[16]

   get(A)(i, j: below(4)): byte
    = A(i + 4 * j)

   IMPORTING hex

   SboxHex: hexstring =  "637c777bf26b6fc53001672bfed7ab76ca82c97dfa5947f0add4a2af9ca472c0b7fd9326363ff7cc34a5e5f171d8311504c723c31896059a071280e2eb27b27509832c1a1b6e5aa0523bd6b329e32f8453d100ed20fcb15b6acbbe394a4c58cfd0efaafb434d338545f9027f503c9fa851a3408f929d38f5bcb6da2110fff3d2cd0c13ec5f974417c4a77e3d645d197360814fdc222a908846eeb814de5e0bdbe0323a0a4906245cc2d3ac629195e479e7c8376d8dd54ea96c56f4ea657aae08ba78252e1ca6b4c6e8dd741f4bbd8b8a703eb5664803f60e613557b986c11d9ee1f8981169d98e949b1e87e9ce5528df8ca1890dbfe6426841992d0fb054bb16"

   Sbox: byv[256] =
     (LET X = hex2bytestring(SboxHex)
      IN X`seq)

    byteSubst(A) : byv[16] =
      (LAMBDA (i:below(16)): Sbox(A(i)))

    shiftRow(A): byv[16]
     = (LAMBDA (k: below(16)):
         LET i = u16rem(k, 4),
             j = u16div(k, 4),
	     ij: below(16) = j + i,
	     l = u16rem(ij, 4)  %left-shift by i. How would Arsenal figure this out from A2.5?
          IN get(A)(i, l))

    T2(b: byte): byte =  %In A2.6, the else case is 2b xor 283, which overflows a byte!
      IF b < 128 THEN 2*b ELSE u8xor(u8plus(b, b), 27) ENDIF 

    T3(b: byte): byte =
      u8xor(T2(b), b)

    mixColumn(A): byv[16]
    = (LAMBDA (k: below(16)):
         LET i = u16rem(k, 4),
             j = u16div(k, 4)
          IN COND i = 0 -> u8xor(u8xor(u8xor(T2(get(A)(0, j)), T3(get(A)(1, j))), get(A)(2, j)), get(A)(3, j)),
	          i = 1 -> u8xor(u8xor(u8xor(get(A)(0, j), T2(get(A)(1, j))), T3(get(A)(2, j))), get(A)(3, j)),
		  i = 2 -> u8xor(u8xor(u8xor(get(A)(0, j), get(A)(1, j)), T2(get(A)(2, j))), T3(get(A)(3, j))),
		  ELSE  -> u8xor(u8xor(u8xor(T3(get(A)(0, j)), get(A)(1, j)), get(A)(2, j)), T2(get(A)(3, j)))
	     ENDCOND)

    roundkeyXOR(A, K): byv[16] %K is the round key
     = byvXOR(A, K)

    roundConst(r: below(11)): RECURSIVE byte
     = (IF r <= 1 THEN r
        ELSE T2(roundConst(r-1))
	ENDIF)
	MEASURE r

    nextRoundKey(K, (rconst: byte)): byv[16] = 
    LET roundConst = T2,
         K0: byv[4] = (LAMBDA (i : below(4)):
	        IF i = 0
	        THEN u8xor(u8xor(get(K)(0, 0), Sbox(get(K)(1, 3))), rconst)%wasteful recomputing of roundConst 
                ELSE u8xor(get(K)(i, 0), Sbox(get(K)(nrem(i + 1, 4), 3)))
                ENDIF),
         K1: byv[4] = (LAMBDA (i : below(4)): u8xor(get(K)(i, 1), K0(i))),
	 K2: byv[4] = (LAMBDA (i : below(4)): u8xor(get(K)(i, 2), K1(i))),
	 K3: byv[4] = (LAMBDA (i : below(4)): u8xor(get(K)(i, 3), K2(i)))
          IN (LAMBDA (i: below(16)):
	         IF i < 4 THEN K0(i)
		 ELSIF i < 8 THEN K1(i - 4)
		 ELSIF i < 12 THEN K2(i - 8)
	         ELSE K3(i - 12)
		      ENDIF)

   KK: VAR ARRAY[below(11) -> byv[16]]

   allKeys(KK, (rconst : byte), (i: below(11))): RECURSIVE ARRAY[below(11) -> byv[16]] =
     (IF i = 10
       THEN KK
       ELSE allKeys(KK WITH [(i + 1):= nextRoundKey(KK(i), rconst)], T2(rconst), i + 1)
       ENDIF)
       MEASURE 10 - i

   Rijndael_step(A, K): byv[16] =
    (LET A1 = byteSubst(A),
        A2 = shiftRow(A1),
        A3 = mixColumn(A2)
     IN roundkeyXOR(A3, K))
		      
   Rijndael_rec(A, KK, (i : below(11))): RECURSIVE byv[16] =
    (IF i >=  10 THEN roundkeyXOR(shiftRow(byteSubst(A)), KK(i))
     ELSIF i = 0 THEN Rijndael_rec(roundkeyXOR(A, KK(i)),
                                   KK,
				   i + 1)
     ELSE LET A4 = Rijndael_step(A, KK(i)) 
	    IN Rijndael_rec(A4, KK, i + 1)
    ENDIF)
    MEASURE 10 - i

   Rijndael(A, K):  byv[16] = Rijndael_rec(A, allKeys((LAMBDA (k: below(11)): K), 1, 0), 0)

   hex16(X: byv[16]): hexstring =
      bytestring2hexstring((# length := 16, seq := X #))

   test0RD: hexstring =
    (LET Input = hex2bytestring("3243f6a8885a308d313198a2e0370734"), 
           Cipher = hex2bytestring("2b7e151628aed2a6abf7158809cf4f3c"), 
	   Output = roundkeyXOR(Input`seq, Cipher`seq),
	   Outputbytestring =  (# length := 16, seq := Output #)
	   IN bytestring2hexstring(Outputbytestring))

   testRijndael1: hexstring
    = (LET Input = hex2bytestring("3243f6a8885a308d313198a2e0370734"), 
           Cipher = hex2bytestring("2b7e151628aed2a6abf7158809cf4f3c"), 
	   Output = Rijndael(Input`seq, Cipher`seq),
	   Outputbytestring =  (# length := 16, seq := Output #)
	   IN bytestring2hexstring(Outputbytestring))
   
  END Rijndael

$$$Rijndael.prf
(Rijndael
 (A_TCC1 0
  (A_TCC1-1 nil 3848802430 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (A subtype "16" "index")))
 (get_TCC1 0
  (get_TCC1-1 nil 3848945954 ("" (subtype-tcc) nil nil)
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (get subtype
        "(number_fields.+)(Rijndael.i, number_fields.*(4, Rijndael.j))"
        "naturalnumbers.below(16)")))
 (SboxHex_TCC1 0
  (SboxHex_TCC1-1 nil 3848945954 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (SboxHex subtype
            "\"637c777bf26b6fc53001672bfed7ab76ca82c97dfa5947f0add4a2af9ca472c0b7fd9326363ff7cc34a5e5f171d8311504c723c31896059a071280e2eb27b27509832c1a1b6e5aa0523bd6b329e32f8453d100ed20fcb15b6acbbe394a4c58cfd0efaafb434d338545f9027f503c9fa851a3408f929d38f5bcb6da2110fff3d2cd0c13ec5f974417c4a77e3d645d197360814fdc222a908846eeb814de5e0bdbe0323a0a4906245cc2d3ac629195e479e7c8376d8dd54ea96c56f4ea657aae08ba78252e1ca6b4c6e8dd741f4bbd8b8a703eb5664803f60e613557b986c11d9ee1f8981169d98e949b1e87e9ce5528df8ca1890dbfe6426841992d0fb054bb16\""
            "bstring")))
 (SboxHex_TCC2 0
  (SboxHex_TCC2-1 nil 3848945954 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (SboxHex subtype
            "bytestrings.mk_bytestring(\"637c777bf26b6fc53001672bfed7ab76ca82c97dfa5947f0add4a2af9ca472c0b7fd9326363ff7cc34a5e5f171d8311504c723c31896059a071280e2eb27b27509832c1a1b6e5aa0523bd6b329e32f8453d100ed20fcb15b6acbbe394a4c58cfd0efaafb434d338545f9027f503c9fa851a3408f929d38f5bcb6da2110fff3d2cd0c13ec5f974417c4a77e3d645d197360814fdc222a908846eeb814de5e0bdbe0323a0a4906245cc2d3ac629195e479e7c8376d8dd54ea96c56f4ea657aae08ba78252e1ca6b4c6e8dd741f4bbd8b8a703eb5664803f60e613557b986c11d9ee1f8981169d98e949b1e87e9ce5528df8ca1890dbfe6426841992d0fb054bb16\")"
            "hexstring")))
 (Sbox_TCC1 0
  (Sbox_TCC1-1 nil 3848945954 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (Sbox subtype "256" "index")))
 (Sbox_TCC2 0
  (Sbox_TCC2-1 nil 3848945954
   ("" (skeep*)
    (("" (replace -1 :hide? t)
      (("" (eval-expr "hex2bytestring(SboxHex)`length")
        (("" (assert)
          (("" (replace -1 :hide? t) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (hexdigit? const-decl "bool" hex nil)
    (get const-decl "byte" bytestrings nil)
    (hexstring type-eq-decl nil hex nil)
    (hex2bytestring const-decl "bytestring" hex nil)
    (SboxHex const-decl "hexstring" Rijndael nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil (Sbox subtype "Rijndael.X`seq" "byv[256]")))
 (byteSubst_TCC1 0
  (byteSubst_TCC1-1 nil 3848976663
   ("" (skeep*) (("" (typepred "A(i)") (("" (grind) nil nil)) nil))
    nil)
   ((byv type-eq-decl nil bytevectors nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (byteSubst subtype "Rijndael.A(Rijndael.i)"
    "naturalnumbers.below(256)")))
 (shiftRow_TCC1 0
  (shiftRow_TCC1-1 nil 3850059712 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (shiftRow subtype "Rijndael.k" "uint16")))
 (shiftRow_TCC2 0
  (shiftRow_TCC2-1 nil 3850059712 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u16rem const-decl "uint16" integertypes nil)
    (u16div const-decl "uint16" integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (shiftRow subtype "(number_fields.+)(Rijndael.j, Rijndael.i)"
    "uint16")))
 (shiftRow_TCC3 0
  (shiftRow_TCC3-1 nil 3850059712 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint16 type-eq-decl nil integertypes nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u16div const-decl "uint16" integertypes nil)
    (u16rem const-decl "uint16" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil (shiftRow subtype "Rijndael.i" "naturalnumbers.below(4)")))
 (shiftRow_TCC4 0
  (shiftRow_TCC4-1 nil 3850059712 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint16 type-eq-decl nil integertypes nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u16div const-decl "uint16" integertypes nil)
    (u16rem const-decl "uint16" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil (shiftRow subtype "Rijndael.l" "naturalnumbers.below(4)")))
 (T2_TCC1 0
  (T2_TCC1-1 nil 3848945954 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (T2 subtype "number_fields.*(2, Rijndael.b)" "byte")))
 (mixColumn_TCC1 0
  (mixColumn_TCC1-1 nil 3848945954
   ("" (grind)
    (("" (typepred "ndiv(k!1, 4)") (("" (assert) nil nil)) nil)) nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint16 type-eq-decl nil integertypes nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (u16rem const-decl "uint16" integertypes nil)
    (u16div const-decl "uint16" integertypes nil))
   nil (mixColumn subtype "Rijndael.j" "naturalnumbers.below(4)")))
 (mixColumn_TCC2 0
  (mixColumn_TCC8-1 nil 3848945954
   ("" (grind)
    (("" (typepred "ndiv(k!1, 4)") (("" (assert) nil nil)) nil)) nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint16 type-eq-decl nil integertypes nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (u16rem const-decl "uint16" integertypes nil)
    (u16div const-decl "uint16" integertypes nil))
   nil (mixColumn subtype "Rijndael.j" "naturalnumbers.below(4)")))
 (mixColumn_TCC3 0
  (mixColumn_TCC14-1 nil 3848945954
   ("" (grind)
    (("" (typepred "ndiv(k!1, 4)") (("" (assert) nil nil)) nil)) nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint16 type-eq-decl nil integertypes nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (u16rem const-decl "uint16" integertypes nil)
    (u16div const-decl "uint16" integertypes nil))
   nil (mixColumn subtype "Rijndael.j" "naturalnumbers.below(4)")))
 (mixColumn_TCC4 0
  (mixColumn_TCC20-1 nil 3848945954
   ("" (grind)
    (("" (typepred "ndiv(k!1, 4)") (("" (assert) nil nil)) nil)) nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint16 type-eq-decl nil integertypes nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (u16rem const-decl "uint16" integertypes nil)
    (u16div const-decl "uint16" integertypes nil))
   nil (mixColumn subtype "Rijndael.j" "naturalnumbers.below(4)")))
 (roundConst_TCC1 0
  (roundConst_TCC1-1 nil 3848945954 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (roundConst subtype "Rijndael.r" "byte")))
 (roundConst_TCC2 0
  (roundConst_TCC2-1 nil 3848945954 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (roundConst subtype "(number_fields.-)(Rijndael.r, 1)"
    "naturalnumbers.below(11)")))
 (roundConst_TCC3 0
  (roundConst_TCC3-1 nil 3848945954 ("" (termination-tcc) nil nil) nil
   nil
   (roundConst termination
    "Rijndael.roundConst((number_fields.-)(Rijndael.r, 1))" "nil")))
 (nextRoundKey_TCC1 0
  (nextRoundKey_TCC1-1 nil 3848945954
   ("" (skeep*)
    (("" (typepred "get(K)(1, 3)") (("" (grind) nil nil)) nil)) nil)
   ((get const-decl "byte" Rijndael nil)
    (byv type-eq-decl nil bytevectors nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (nextRoundKey subtype "Rijndael.get(Rijndael.K)(1, 3)"
    "naturalnumbers.below(256)")))
 (nextRoundKey_TCC2 0
  (nextRoundKey_TCC2-1 nil 3848945954
   ("" (skeep*)
    (("" (typepred "get(K)(nrem(i + 1, 4), 3)") (("" (grind) nil nil))
      nil))
    nil)
   ((nrem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
     modulo_arithmetic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (get const-decl "byte" Rijndael nil)
    (byv type-eq-decl nil bytevectors nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (nextRoundKey subtype
    "Rijndael.get(Rijndael.K)(modulo_arithmetic.nrem((number_fields.+)(Rijndael.i, 1), 4), 3)"
    "naturalnumbers.below(256)")))
 (nextRoundKey_TCC3 0
  (nextRoundKey_TCC8-1 nil 3848945954
   ("" (skeep*) (("" (ground) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (nextRoundKey subtype "(number_fields.-)(Rijndael.i, 4)"
    "naturalnumbers.below(4)")))
 (nextRoundKey_TCC4 0
  (nextRoundKey_TCC10-1 nil 3848945954
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (nextRoundKey subtype "(number_fields.-)(Rijndael.i, 8)"
    "naturalnumbers.below(4)")))
 (nextRoundKey_TCC5 0
  (nextRoundKey_TCC12-1 nil 3848945954
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (nextRoundKey subtype "(number_fields.-)(Rijndael.i, 12)"
    "naturalnumbers.below(4)")))
 (allKeys_TCC1 0
  (allKeys_TCC1-1 nil 3849448550 ("" (subtype-tcc) nil nil) nil nil
   (allKeys subtype "(number_fields.-)(10, Rijndael.i)"
    "naturalnumber")))
 (allKeys_TCC2 0
  (allKeys_TCC2-1 nil 3849448550 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (allKeys subtype "(number_fields.+)(Rijndael.i, 1)"
    "naturalnumbers.below(11)")))
 (allKeys_TCC3 0
  (allKeys_TCC3-1 nil 3849448550 ("" (termination-tcc) nil nil) nil nil
   (allKeys termination
    "Rijndael.allKeys(Rijndael.KK WITH [((number_fields.+)(Rijndael.i, 1)) := Rijndael.nextRoundKey(Rijndael.KK(Rijndael.i), Rijndael.rconst)], Rijndael.T2(Rijndael.rconst), (number_fields.+)(Rijndael.i, 1))"
    "nil")))
 (Rijndael_rec_TCC1 0
  (Rijndael_rec_TCC2-1 nil 3849026960 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (Rijndael_rec subtype "(number_fields.+)(Rijndael.i, 1)"
    "naturalnumbers.below(11)")))
 (Rijndael_rec_TCC2 0
  (Rijndael_rec_TCC3-1 nil 3849026960 ("" (termination-tcc) nil nil)
   nil nil
   (Rijndael_rec termination
    "Rijndael.Rijndael_rec(Rijndael.roundkeyXOR(Rijndael.A, Rijndael.KK(Rijndael.i)), Rijndael.KK, (number_fields.+)(Rijndael.i, 1))"
    "nil")))
 (Rijndael_rec_TCC3 0
  (Rijndael_rec_TCC4-1 nil 3849026960 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (roundkeyXOR const-decl "byv[16]" Rijndael nil)
    (Rijndael_step const-decl "byv[16]" Rijndael nil))
   nil
   (Rijndael_rec subtype "(number_fields.+)(Rijndael.i, 1)"
    "naturalnumbers.below(11)")))
 (Rijndael_rec_TCC4 0
  (Rijndael_rec_TCC5-1 nil 3849026960
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (Rijndael_rec termination
    "Rijndael.Rijndael_rec(Rijndael.A4, Rijndael.KK, (number_fields.+)(Rijndael.i, 1))"
    "nil")))
 (hex16_TCC1 0
  (hex16_TCC1-1 nil 3850231577 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil
   (hex16 subtype "(# length := 16, seq := Rijndael.X #)"
    "{X | reals.<(number_fields.*(2, hex.X`length), exp2.exp2(28))}")))
 (test0RD_TCC1 0
  (test0RD_TCC1-1 nil 3849448550 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (test0RD subtype "\"3243f6a8885a308d313198a2e0370734\"" "bstring")))
 (test0RD_TCC2 0
  (test0RD_TCC2-1 nil 3849448550 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (test0RD subtype
    "bytestrings.mk_bytestring(\"3243f6a8885a308d313198a2e0370734\")"
    "hexstring")))
 (test0RD_TCC3 0
  (test0RD_TCC3-1 nil 3849448550
   ("" (skeep*) (("" (hide -1) (("" (eval-formula) nil nil)) nil)) nil)
   ((bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (test0RD subtype "\"2b7e151628aed2a6abf7158809cf4f3c\"" "bstring")))
 (test0RD_TCC4 0
  (test0RD_TCC4-1 nil 3849448550
   ("" (skeep) (("" (hide -1) (("" (eval-formula) nil nil)) nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (test0RD subtype
    "bytestrings.mk_bytestring(\"2b7e151628aed2a6abf7158809cf4f3c\")"
    "hexstring")))
 (test0RD_TCC5 0
  (test0RD_TCC5-1 nil 3849448550
   ("" (skeep*)
    (("" (replace -1 :hide? t)
      (("" (hide -1)
        (("" (grind)
          (("1" (typepred "ndiv(33, 2)") (("1" (assert) nil nil)) nil)
           ("2" (typepred "ndiv(33, 2)") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (get const-decl "char" gen_strings nil)
    (mk_bytestring const-decl "bytestring" bytestrings nil)
    (max32 const-decl "uint32" integertypes nil)
    (u32div const-decl "uint32" integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32times const-decl "uint32" integertypes nil)
    (u32plus const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (hexvalue const-decl "byte" hex nil)
    (u8lshift const-decl "uint8" integertypes nil)
    (max8 const-decl "uint8" integertypes nil)
    (u8plus const-decl "uint8" integertypes nil)
    (hex2byte const-decl "byte" hex nil)
    (hex2bytestring const-decl "bytestring" hex nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (<= const-decl "bool" reals nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil (test0RD subtype "Rijndael.Input`seq" "byv[16]")))
 (test0RD_TCC6 0
  (test0RD_TCC6-1 nil 3849448550
   ("" (skeep*)
    (("" (hide -1)
      (("" (replace -1 :hide? t)
        (("" (grind)
          (("1" (typepred "ndiv(33, 2)") (("1" (assert) nil nil)) nil)
           ("2" (typepred "ndiv(33, 2)") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (get const-decl "char" gen_strings nil)
    (mk_bytestring const-decl "bytestring" bytestrings nil)
    (max32 const-decl "uint32" integertypes nil)
    (u32div const-decl "uint32" integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32times const-decl "uint32" integertypes nil)
    (u32plus const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (hexvalue const-decl "byte" hex nil)
    (u8lshift const-decl "uint8" integertypes nil)
    (max8 const-decl "uint8" integertypes nil)
    (u8plus const-decl "uint8" integertypes nil)
    (hex2byte const-decl "byte" hex nil)
    (hex2bytestring const-decl "bytestring" hex nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (<= const-decl "bool" reals nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil (test0RD subtype "Rijndael.Cipher`seq" "byv[16]")))
 (test0RD_TCC7 0
  (test0RD_TCC7-1 nil 3849448550
   ("" (skeep)
    (("" (ground)
      (("1" (hide -1 -2 -3) (("1" (grind) nil nil)) nil)
       ("2" (hide -1 -2 -3) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil))
   nil
   (test0RD subtype "Rijndael.Outputbytestring"
    "{X | reals.<(number_fields.*(2, hex.X`length), exp2.exp2(28))}")))
 (testRijndael1_TCC1 0
  (testRijndael1_TCC1-1 nil 3849448550
   ("" (skeep) (("" (hide -1 -2 -3) (("" (grind) nil nil)) nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (testRijndael1 subtype "Rijndael.Outputbytestring"
    "{X | reals.<(number_fields.*(2, hex.X`length), exp2.exp2(28))}"))))


$$$hex.pvs
hex  % [ parameters ]
		: THEORY

  BEGIN

   X, Y, Z: VAR bytestring
   
   digit?(b: byte): bool = (b >= 48 AND b <= 57)
   hexalpha?(b: byte): bool = (b >= 65 AND b <= 70) OR (b >= 97 AND b <= 102)
   hexdigit?(b: byte): bool = digit?(b) OR hexalpha?(b)

   hd, hd1, hd2: VAR (hexdigit?)
   hexvalue(hd): byte =
       (IF hd >= 97 THEN hd - 87 ELSIF hd >= 65 THEN hd - 55 ELSE hd - 48 ENDIF)
   hexstring: TYPE = {X | (FORALL (i: below(X`length)): hexdigit?(get(X, i)))}
   hex2byte(hd1, hd2: (hexdigit?)): byte = u8plus(u8lshift(hexvalue(hd1), 4), hexvalue(hd2))
   hX, hX1, hX2: VAR hexstring
   hex2bytestring(hX): bytestring =
   (LET len = IF hX`length = max32
                 THEN u32div(max32, 2) + 1 %max32 is odd
		 ELSE u32div(hX`length + 1, 2)%safe to add 1 first
		 ENDIF
     IN 
      (# length := len,
         seq := (LAMBDA (i: below(len)):
	          LET twoi = u32times(i, 2)
		   IN 
	          IF u32plus(twoi, 1) = hX`length
		   THEN hex2byte(get(hX, twoi), 48)%pad for odd length
		   ELSE hex2byte(get(hX, twoi), get(hX, twoi + 1))
		   ENDIF) #))

   test_hex2bytestring: bytestring = hex2bytestring("ABCDEF0123456789")

   hex0(b: byte): (hexdigit?) =
     (LET hnum = u8rshift(b, 4)
       IN IF hnum < 10 THEN 48 + hnum
           ELSE u8plus(55, hnum) %65 to 70
	   ENDIF)

   hex1(b: byte): (hexdigit?) =
     (LET hnum = u8rem(b, 16)%last four bits
       IN IF hnum < 10 THEN 48 + hnum
           ELSE u8plus(55,  hnum) %65 to 70
	   ENDIF)
	   
   bytestring2hexstring(X | 2 * X`length < bytestring_bound): hexstring = %X has to be at most half max.
    (LET len = u32times(X`length, 2)
     IN (# length := len,
           seq := (LAMBDA (i:below(len)):
                   LET i2 = u32div(i, 2)
   	            IN IF u32rem(i, 2) = 0
	               THEN hex0(get(X, i2))
	               ELSE hex1(get(X, i2))
	               ENDIF) #))

   test_bytestring2hexstring: hexstring = bytestring2hexstring("ABCDEF0123456789")

   bytes2uint32(X, (i : below(X`length))): uint32
   = (IF i + 3 < X`length
      THEN u32lshift(get(X, i), 24) + u32lshift(get(X, i+1), 16) + u32lshift(get(X, i + 2), 8) + get(X, i+3)
      ELSIF i + 2 < X`length
      THEN u32lshift(get(X, i), 16) + u32lshift(get(X, i + 1), 8) + get(X, i + 2)
      ELSIF i + 1 < X`length
      THEN u32lshift(get(X, i), 8) + get(X, i + 1)
      ELSE get(X, i)
      ENDIF)

   bytes2uint16(X, (i : below(X`length))): uint16
   = (IF i + 1 < X`length
      THEN u16lshift(get(X, i), 8) + get(X, i + 1)
      ELSE get(X, i)
      ENDIF)

   bytes2uint8(X, (i : below(X`length))): uint8
   = get(X, i)

   bytes2uint64(X, (i : below(X`length))): uint64
   = IF i + 3 <= X`length
      THEN LET msw = bytes2uint32(X, i), %most significant word
               lsw = bytes2uint32(X, i + 4)
	    IN exp2(8) * msw + lsw
      ELSE bytes2uint32(X, i)
      ENDIF

   equalUpto(X, Y, (i : uint32 | i <= min(X`length, Y`length))): bool =
    (FORALL (j: below(i)): X`seq(j) = X`seq(j))

   

   bytes2uint32array(X: bytestring): ARRAY[below(u32ceiling(X`length/4)) -> uint32]
   = (LAMBDA (j: below(u32ceiling(X`length/4))): bytes2uint32(X, 4*j))


  END hex

$$$hex.prf
(hex
 (hexvalue_TCC1 0
  (hexvalue_TCC1-1 nil 3845476905 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (hexdigit? const-decl "bool" hex nil)
    (digit? const-decl "bool" hex nil)
    (hexalpha? const-decl "bool" hex nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (hexvalue subtype "(number_fields.-)(hex.hd, 87)" "byte")))
 (hexvalue_TCC2 0
  (hexvalue_TCC2-1 nil 3845476905 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (hexdigit? const-decl "bool" hex nil)
    (digit? const-decl "bool" hex nil)
    (hexalpha? const-decl "bool" hex nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (hexvalue subtype "(number_fields.-)(hex.hd, 55)" "byte")))
 (hexvalue_TCC3 0
  (hexvalue_TCC3-1 nil 3845476905 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (hexdigit? const-decl "bool" hex nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (digit? const-decl "bool" hex nil)
    (hexalpha? const-decl "bool" hex nil))
   nil (hexvalue subtype "(number_fields.-)(hex.hd, 48)" "byte")))
 (hex2byte_TCC1 0
  (hex2byte_TCC1-1 nil 3845476905 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (hexdigit? const-decl "bool" hex nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (hexvalue const-decl "byte" hex nil)
    (hexalpha? const-decl "bool" hex nil)
    (digit? const-decl "bool" hex nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (hex2byte subtype "hex.hexvalue(hex.hd1)" "uint8")))
 (hex2byte_TCC2 0
  (hex2byte_TCC2-1 nil 3845476905 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (hexdigit? const-decl "bool" hex nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (hexvalue const-decl "byte" hex nil)
    (hexalpha? const-decl "bool" hex nil)
    (digit? const-decl "bool" hex nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (hex2byte subtype "hex.hexvalue(hex.hd2)" "uint8")))
 (hex2byte_TCC3 0
  (hex2byte_TCC3-1 nil 3845476905 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (hexdigit? const-decl "bool" hex nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (digit? const-decl "bool" hex nil)
    (hexalpha? const-decl "bool" hex nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (hexvalue const-decl "byte" hex nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u8lshift const-decl "uint8" integertypes nil)
    (max8 const-decl "uint8" integertypes nil)
    (u8plus const-decl "uint8" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (hex2byte subtype
             "integertypes.u8plus(integertypes.u8lshift(hex.hexvalue(hex.hd1), 4), hex.hexvalue(hex.hd2))"
             "byte")))
 (hex2bytestring_TCC1 0
  (hex2bytestring_TCC1-1 nil 3845476905 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (hexdigit? const-decl "bool" hex nil)
    (get const-decl "byte" bytestrings nil)
    (hexstring type-eq-decl nil hex nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max32 const-decl "uint32" integertypes nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil
   (hex2bytestring subtype "(number_fields.+)(hex.hX`length, 1)"
                   "uint32")))
 (hex2bytestring_TCC2 0
  (hex2bytestring_TCC2-1 nil 3845476905
   ("" (skeep)
    (("" (lift-if)
      (("" (ground)
        (("1" (expand "u32div")
          (("1" (typepred "ndiv(max32, 2)") (("1" (grind) nil nil))
            nil))
          nil)
         ("2" (expand "u32div")
          (("2" (typepred "ndiv(1 + hX`length, 2)")
            (("2" (typepred "rem(2)(1 + hX`length)")
              (("2" (hide -2) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (hexdigit? const-decl "bool" hex nil)
    (get const-decl "byte" bytestrings nil)
    (hexstring type-eq-decl nil hex nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (u32div const-decl "uint32" integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (max32 const-decl "uint32" integertypes nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (hex2bytestring subtype "hex.len"
                   "naturalnumbers.below(0x100000000)")))
 (hex2bytestring_TCC3 0
  (hex2bytestring_TCC3-1 nil 3845476905
   ("" (skeep*)
    (("" (use "hex2bytestring_TCC2") (("" (grind) nil nil)) nil)) nil)
   ((hex2bytestring_TCC2 subtype-tcc nil hex nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (hexstring type-eq-decl nil hex nil)
    (get const-decl "byte" bytestrings nil)
    (hexdigit? const-decl "bool" hex nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil (hex2bytestring subtype "hex.i" "uint32")))
 (hex2bytestring_TCC4 0
  (hex2bytestring_TCC4-1 nil 3845476905 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (hexdigit? const-decl "bool" hex nil)
    (get const-decl "byte" bytestrings nil)
    (hexstring type-eq-decl nil hex nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (max32 const-decl "uint32" integertypes nil)
    (u32div const-decl "uint32" integertypes nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (hex2bytestring subtype "2" "uint32")))
 (hex2bytestring_TCC5 0
  (hex2bytestring_TCC5-1 nil 3845476905 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (hexdigit? const-decl "bool" hex nil)
    (get const-decl "byte" bytestrings nil)
    (hexstring type-eq-decl nil hex nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (max32 const-decl "uint32" integertypes nil)
    (u32div const-decl "uint32" integertypes nil)
    (u32times const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   nil (hex2bytestring subtype "1" "uint32")))
 (hex2bytestring_TCC6 0
  (hex2bytestring_TCC6-1 nil 3845476905
   ("" (skeep*)
    (("" (typepred "i")
      (("" (lift-if)
        (("" (ground)
          (("1" (expand "u32div")
            (("1" (typepred "ndiv(max32, 2)")
              (("1" (expand "u32times")
                (("1" (typepred "nrem(2 * i, exp2(32))")
                  (("1" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (typepred "i")
            (("2" (expand "u32div")
              (("2" (typepred "ndiv(1 + hX`length, 2)")
                (("2" (expand "u32times")
                  (("2" (grind)
                    (("2" (typepred "nrem(2 * i, 4294967296)")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (max32 const-decl "uint32" integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nrem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
     modulo_arithmetic nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (u32plus const-decl "uint32" integertypes nil)
    (u32times const-decl "uint32" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (u32div const-decl "uint32" integertypes nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (hexdigit? const-decl "bool" hex nil)
    (get const-decl "byte" bytestrings nil)
    (hexstring type-eq-decl nil hex nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (hex2bytestring subtype "hex.twoi"
                   "naturalnumbers.below(length(hex.hX))")))
 (hex2bytestring_TCC7 0
  (hex2bytestring_TCC7-1 nil 3845476905 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (hexstring type-eq-decl nil hex nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nrem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
     modulo_arithmetic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (max32 const-decl "uint32" integertypes nil)
    (u32div const-decl "uint32" integertypes nil)
    (u32times const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (digit? const-decl "bool" hex nil)
    (hexalpha? const-decl "bool" hex nil)
    (hexdigit? const-decl "bool" hex nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   nil
   (hex2bytestring subtype "bytestrings.get(hex.hX, hex.twoi)"
                   "(hex.hexdigit?)")))
 (hex2bytestring_TCC8 0
  (hex2bytestring_TCC8-1 nil 3845476905
   ("" (skeep*)
    (("" (lift-if)
      (("" (typepred "i")
        (("" (ground)
          (("1" (expand "u32div")
            (("1" (typepred "ndiv(1 + hX`length, 2)")
              (("1" (typepred "nrem(2 * i, exp2(32))")
                (("1" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (typepred! "u32times(i, 2)")
            (("2" (case "u32times(i, 2) >= 0")
              (("1" (typepred "twoi")
                (("1" (case "NOT twoi >= 0")
                  (("1" (assert) nil nil)
                   ("2" (expand "u32times")
                    (("2" (expand "u32div")
                      (("2" (typepred "ndiv(1 + hX`length, 2)")
                        (("2" (assert)
                          (("2" (grind)
                            (("2" (case "2 * i < hX`length")
                              (("1"
                                (assert)
                                (("1"
                                  (typepred "nrem(2 * i, 4294967296)")
                                  (("1"
                                    (grind)
                                    (("1"
                                      (typepred "hX`length")
                                      (("1"
                                        (grind)
                                        (("1"
                                          (case "q!1 > 0")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case "q!1 < 0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "4294967296 * q!1 <= -4294967296")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case "2*i >= 0")
                                                      (("1"
                                                        (assert
                                                         :flush?
                                                         t)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (assert
                                                       :flush?
                                                       t)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (assert :flush? t)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<= const-decl "bool" reals nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (hexstring type-eq-decl nil hex nil)
    (get const-decl "byte" bytestrings nil)
    (hexdigit? const-decl "bool" hex nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (max32 const-decl "uint32" integertypes nil)
    (u32times const-decl "uint32" integertypes nil)
    (u32plus const-decl "uint32" integertypes nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nrem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
     modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (u32div const-decl "uint32" integertypes nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (uint32 type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (hex2bytestring subtype "hex.twoi"
                   "naturalnumbers.below(length(hex.hX))")))
 (hex2bytestring_TCC9 0
  (hex2bytestring_TCC9-1 nil 3845476905 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (hexstring type-eq-decl nil hex nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nrem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
     modulo_arithmetic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (max32 const-decl "uint32" integertypes nil)
    (u32div const-decl "uint32" integertypes nil)
    (u32times const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (digit? const-decl "bool" hex nil)
    (hexalpha? const-decl "bool" hex nil)
    (hexdigit? const-decl "bool" hex nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   nil
   (hex2bytestring subtype "bytestrings.get(hex.hX, hex.twoi)"
                   "(hex.hexdigit?)")))
 (hex2bytestring_TCC10 0
  (hex2bytestring_TCC10-1 nil 3845476905
   ("" (skeep*)
    (("" (lift-if)
      (("" (ground)
        (("1" (expand "u32div")
          (("1" (typepred "ndiv(max32, 2)")
            (("1" (expand u32times)
              (("1" (typepred "nrem(2 * i, exp2(32))")
                (("1" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (typepred "i")
          (("2" (expand "u32div")
            (("2" (typepred "ndiv(1 + hX`length, 2)")
              (("2" (replace -4 :dir RL :hide? t)
                (("2" (expand "u32times")
                  (("2" (typepred "nrem(2 * i, exp2(32))")
                    (("2" (skeep)
                      (("2" (replace -6 :dir RL :hide? t)
                        (("2" (typepred "rem(2)(1 + hX`length)")
                          (("2" (hide -2)
                            (("2"
                              (name-replace "rm"
                               "rem(2)(1 + hX`length)")
                              (("2"
                                (case "q = 0")
                                (("1" (grind) nil nil)
                                 ("2"
                                  (case "2 * i < 4294967295")
                                  (("1" (grind :flush? t) nil nil)
                                   ("2" (grind :flush? t) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((hexstring type-eq-decl nil hex nil)
    (get const-decl "byte" bytestrings nil)
    (hexdigit? const-decl "bool" hex nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (u32div const-decl "uint32" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (u32times const-decl "uint32" integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (u32plus const-decl "uint32" integertypes nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nrem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
     modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (max32 const-decl "uint32" integertypes nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (hex2bytestring subtype "(number_fields.+)(hex.twoi, 1)"
                   "naturalnumbers.below(length(hex.hX))")))
 (hex2bytestring_TCC11 0
  (hex2bytestring_TCC11-1 nil 3845476905 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (hexstring type-eq-decl nil hex nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nrem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
     modulo_arithmetic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (max32 const-decl "uint32" integertypes nil)
    (u32div const-decl "uint32" integertypes nil)
    (u32times const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (digit? const-decl "bool" hex nil)
    (hexalpha? const-decl "bool" hex nil)
    (hexdigit? const-decl "bool" hex nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   nil
   (hex2bytestring subtype
                   "bytestrings.get(hex.hX, (number_fields.+)(hex.twoi, 1))"
                   "(hex.hexdigit?)")))
 (test_hex2bytestring_TCC1 0
  (test_hex2bytestring_TCC1-1 nil 3845476905
   ("" (ground)
    (("1" (grind) nil nil)
     ("2" (expand "get")
      (("2" (assert)
        (("2" (rewrite "list2finseq")
          (("2" (assert)
            (("2"
              (lemma "every_nth" :subst
               ("l"
                "(: 'A', 'B', 'C', 'D', 'E', 'F', '0', '1', '2', '3', '4',
                       '5', '6', '7', '8', '9' :)"))
              (("2" (inst - "LAMBDA (c: character): code(c) < 256")
                (("2" (ground)
                  (("1" (grind) nil nil)
                   ("2" (hide 1 3) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((get const-decl "char" gen_strings nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (char adt-constructor-decl "[below[0x110000] -> (char?)]"
          character_adt nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (every_nth formula-decl nil list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (nil application-judgement "above(n)" exp2 nil)
    (PRED type-eq-decl nil defined_types nil)
    (code adt-accessor-decl "[character -> below[0x110000]]"
          character_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (test_hex2bytestring subtype "\"ABCDEF0123456789\"" "bstring")))
 (test_hex2bytestring_TCC2 0
  (test_hex2bytestring_TCC2-1 nil 3845476905
   (""
    (lemma "every_nth" :subst
     ("l" "(: 'A', 'B', 'C', 'D', 'E', 'F', '0', '1', '2', '3', '4',
                     '5', '6', '7', '8', '9' :)"))
    (("" (expand "get")
      (("" (expand "mk_bytestring")
        (("" (expand "get")
          ((""
            (inst -
             "LAMBDA (x: char): code(x) < 256 AND hexdigit?(code(x))")
            (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((get const-decl "byte" bytestrings nil)
    (get const-decl "char" gen_strings nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (bstring type-eq-decl nil bytestrings nil)
    (below type-eq-decl nil naturalnumbers nil)
    (string type-eq-decl nil strings nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (every adt-def-decl "boolean" list_adt nil)
    (hexalpha? const-decl "bool" hex nil)
    (digit? const-decl "bool" hex nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (PRED type-eq-decl nil defined_types nil)
    (char type-eq-decl nil strings nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (code adt-accessor-decl "[character -> below[0x110000]]"
          character_adt nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (hexdigit? const-decl "bool" hex nil)
    (mk_bytestring const-decl "bytestring" bytestrings nil)
    (every_nth formula-decl nil list_props nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char adt-constructor-decl "[below[0x110000] -> (char?)]"
          character_adt nil)
    (character type-decl nil character_adt nil))
   nil
   (test_hex2bytestring subtype
    "bytestrings.mk_bytestring(\"ABCDEF0123456789\")" "hexstring")))
 (hex0_TCC1 0
  (hex0_TCC1-1 nil 3845476905 ("" (grind) nil nil)
   ((exp2 def-decl "posnat" exp2 nil)) nil
   (hex0 subtype "hex.b" "uint8")))
 (hex0_TCC2 0
  (hex0_TCC2-1 nil 3845476905 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u8rshift const-decl "uint8" integertypes nil)
    (digit? const-decl "bool" hex nil)
    (hexalpha? const-decl "bool" hex nil)
    (hexdigit? const-decl "bool" hex nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (hex0 subtype "(number_fields.+)(48, hex.hnum)" "(hex.hexdigit?)")))
 (hex0_TCC3 0
  (hex0_TCC3-1 nil 3845476905
   ("" (grind)
    (("1" (typepred "ndiv(b!1, 16)")
      (("1" (typepred "rem(16)(b!1)") (("1" (grind) nil nil)) nil))
      nil)
     ("2" (typepred "ndiv(b!1, 16)")
      (("2" (typepred "rem(16)(b!1)") (("2" (grind) nil nil)) nil))
      nil)
     ("3" (typepred "ndiv(b!1, 16)")
      (("3" (typepred "rem(16)(b!1)") (("3" (grind) nil nil)) nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (<= const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint8 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (hexdigit? const-decl "bool" hex nil)
    (hexalpha? const-decl "bool" hex nil)
    (digit? const-decl "bool" hex nil)
    (u8plus const-decl "uint8" integertypes nil)
    (max8 const-decl "uint8" integertypes nil)
    (u8rshift const-decl "uint8" integertypes nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil
   (hex0 subtype "integertypes.u8plus(55, hex.hnum)"
    "(hex.hexdigit?)")))
 (hex1_TCC1 0
  (hex1_TCC1-1 nil 3845476905 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (u8rem const-decl "uint8" integertypes nil)
    (digit? const-decl "bool" hex nil)
    (hexalpha? const-decl "bool" hex nil)
    (hexdigit? const-decl "bool" hex nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (hex1 subtype "(number_fields.+)(48, hex.hnum)" "(hex.hexdigit?)")))
 (hex1_TCC2 0
  (hex1_TCC2-1 nil 3845476905 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (u8plus const-decl "uint8" integertypes nil)
    (u8rem const-decl "uint8" integertypes nil)
    (max8 const-decl "uint8" integertypes nil)
    (digit? const-decl "bool" hex nil)
    (hexalpha? const-decl "bool" hex nil)
    (hexdigit? const-decl "bool" hex nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (hex1 subtype "integertypes.u8plus(55, hex.hnum)"
    "(hex.hexdigit?)")))
 (bytestring2hexstring_TCC1 0
  (bytestring2hexstring_TCC1-1 nil 3845476905 ("" (grind) nil nil)
   ((exp2 def-decl "posnat" exp2 nil)) nil
   (bytestring2hexstring subtype "hex.X`length" "uint32")))
 (bytestring2hexstring_TCC2 0
  (bytestring2hexstring_TCC2-1 nil 3845476905
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (bytestring2hexstring subtype "2" "uint32")))
 (bytestring2hexstring_TCC3 0
  (bytestring2hexstring_TCC3-1 nil 3845476905 ("" (grind) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32times const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   nil
   (bytestring2hexstring subtype "hex.len"
    "naturalnumbers.below(0x100000000)")))
 (bytestring2hexstring_TCC4 0
  (bytestring2hexstring_TCC4-1 nil 3845476905
   ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (u32times const-decl "uint32" integertypes nil))
   nil (bytestring2hexstring subtype "hex.i" "uint32")))
 (bytestring2hexstring_TCC5 0
  (bytestring2hexstring_TCC5-1 nil 3845476905
   ("" (skeep*)
    (("" (grind)
      (("" (typepred "X")
        (("" (typepred "nrem(2 * X`length, 4294967296)")
          (("" (grind)
            (("" (typepred "i")
              (("" (grind)
                (("" (case "q!1 = 0")
                  (("1" (typepred "ndiv(i, 2)")
                    (("1" (assert) nil nil)) nil)
                   ("2" (assert)
                    (("2" (assert :flush? t)
                      (("2" (case "q!1 > 0")
                        (("1" (assert)
                          (("1" (assert :flush? t) nil nil)) nil)
                         ("2" (assert :flush? t) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((u32rem const-decl "uint32" integertypes nil)
    (u32div const-decl "uint32" integertypes nil)
    (u32times const-decl "uint32" integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nrem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
     modulo_arithmetic nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (uint32 type-eq-decl nil integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (below type-eq-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (bytestring2hexstring subtype "hex.i2"
    "naturalnumbers.below(length(hex.X))")))
 (bytestring2hexstring_TCC6 0
  (bytestring2hexstring_TCC6-1 nil 3845476905
   ("" (skeep)
    (("" (typepred "i")
      (("" (grind)
        (("" (typepred "ndiv(i, 2)")
          (("" (grind)
            (("" (typepred "X")
              (("" (typepred "nrem(2 * X`length, 4294967296)")
                (("" (grind)
                  (("" (case "q!1 > 0")
                    (("1" (assert) nil nil)
                     ("2" (case "q!1 < 0")
                      (("1" (assert) (("1" (assert :flush? t) nil nil))
                        nil)
                       ("2" (assert :flush? t) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nrem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
     modulo_arithmetic nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (u32times const-decl "uint32" integertypes nil)
    (u32div const-decl "uint32" integertypes nil)
    (u32rem const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (bytestring2hexstring subtype "hex.i2"
    "naturalnumbers.below(length(hex.X))")))
 (bytestring2hexstring_TCC7 0
  (bytestring2hexstring_TCC7-1 nil 3845476905
   ("" (subtype-tcc) nil nil)
   ((u32times const-decl "uint32" integertypes nil)
    (u32div const-decl "uint32" integertypes nil)
    (u32rem const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u8rshift const-decl "uint8" integertypes nil)
    (u8rem const-decl "uint8" integertypes nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (bytestring2hexstring subtype
    "(# length := hex.len, seq := (LAMBDA (i: naturalnumbers.below(hex.len)): LET i2 = integertypes.u32div(i, 2) IN IF integertypes.u32rem(i, 2) = 0 THEN hex.hex0(bytestrings.get(hex.X, hex.i2)) ELSE hex.hex1(bytestrings.get(hex.X, hex.i2)) ENDIF) #)"
    "hexstring")))
 (test_bytestring2hexstring_TCC1 0
  (test_bytestring2hexstring_TCC1-1 nil 3845476905 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (get const-decl "char" gen_strings nil)
    (mk_bytestring const-decl "bytestring" bytestrings nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (test_bytestring2hexstring subtype
    "bytestrings.mk_bytestring(\"ABCDEF0123456789\")"
    "{X | reals.<(number_fields.*(2, hex.X`length), 0x100000000)}")))
 (bytes2uint32_TCC1 0
  (bytes2uint32_TCC1-1 nil 3845476905 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil
   (bytes2uint32 subtype "bytestrings.get(hex.X, hex.i)" "uint32")))
 (bytes2uint32_TCC2 0
  (bytes2uint32_TCC2-1 nil 3845476905 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (bytes2uint32 subtype "(number_fields.+)(hex.i, 1)"
                 "naturalnumbers.below(length(hex.X))")))
 (bytes2uint32_TCC3 0
  (bytes2uint32_TCC3-1 nil 3845476905 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil
   (bytes2uint32 subtype
                 "bytestrings.get(hex.X, (number_fields.+)(hex.i, 1))"
                 "uint32")))
 (bytes2uint32_TCC4 0
  (bytes2uint32_TCC4-1 nil 3845476905 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (bytes2uint32 subtype "(number_fields.+)(hex.i, 2)"
                 "naturalnumbers.below(length(hex.X))")))
 (bytes2uint32_TCC5 0
  (bytes2uint32_TCC5-1 nil 3845476905 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil
   (bytes2uint32 subtype
                 "bytestrings.get(hex.X, (number_fields.+)(hex.i, 2))"
                 "uint32")))
 (bytes2uint32_TCC6 0
  (bytes2uint32_TCC6-1 nil 3845476905
   ("" (skeep*)
    (("" (use "u32lshift_bound")
      (("" (use "u32lshift_bound" :subst ("ux32" "get(X, i + 1)"))
        (("" (use "u32lshift_bound" :subst ("ux32" "get(X, i + 2)"))
          (("" (assert)
            (("" (typepred "get(X, 3 + i)")
              (("" (assert) (("" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((u32lshift_bound judgement-tcc nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (u32lshift_bound application-judgement
     "upto(exp2(8 + n) - exp2(n))" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (bytes2uint32 subtype
                 "(number_fields.+)((number_fields.+)((number_fields.+)(integertypes.u32lshift(bytestrings.get(hex.X, hex.i), 24), integertypes.u32lshift(bytestrings.get(hex.X, (number_fields.+)(hex.i, 1)), 16)), integertypes.u32lshift(bytestrings.get(hex.X, (number_fields.+)(hex.i, 2)), 8)), bytestrings.get(hex.X, (number_fields.+)(hex.i, 3)))"
                 "uint32")))
 (bytes2uint32_TCC7 0
  (bytes2uint32_TCC7-1 nil 3845476905 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil
   (bytes2uint32 subtype "bytestrings.get(hex.X, hex.i)" "uint32")))
 (bytes2uint32_TCC8 0
  (bytes2uint32_TCC8-1 nil 3845476905 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (bytes2uint32 subtype "(number_fields.+)(hex.i, 1)"
                 "naturalnumbers.below(length(hex.X))")))
 (bytes2uint32_TCC9 0
  (bytes2uint32_TCC9-1 nil 3845476905 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil
   (bytes2uint32 subtype
                 "bytestrings.get(hex.X, (number_fields.+)(hex.i, 1))"
                 "uint32")))
 (bytes2uint32_TCC10 0
  (bytes2uint32_TCC10-1 nil 3845476905
   ("" (skeep*)
    (("" (use "u32lshift_bound")
      (("" (use "u32lshift_bound" :subst ("ux32" "get(X, i + 1)"))
        (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((u32lshift_bound judgement-tcc nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (u32lshift_bound application-judgement
     "upto(exp2(8 + n) - exp2(n))" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (bytes2uint32 subtype
                 "(number_fields.+)((number_fields.+)(integertypes.u32lshift(bytestrings.get(hex.X, hex.i), 16), integertypes.u32lshift(bytestrings.get(hex.X, (number_fields.+)(hex.i, 1)), 8)), bytestrings.get(hex.X, (number_fields.+)(hex.i, 2)))"
                 "uint32")))
 (bytes2uint32_TCC11 0
  (bytes2uint32_TCC11-1 nil 3845476905 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil
   (bytes2uint32 subtype "bytestrings.get(hex.X, hex.i)" "uint32")))
 (bytes2uint32_TCC12 0
  (bytes2uint32_TCC12-1 nil 3845476905
   ("" (skeep*)
    (("" (use "u32lshift_bound") (("" (grind) nil nil)) nil)) nil)
   ((u32lshift_bound judgement-tcc nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (bytes2uint32 subtype
                 "(number_fields.+)(integertypes.u32lshift(bytestrings.get(hex.X, hex.i), 8), bytestrings.get(hex.X, (number_fields.+)(hex.i, 1)))"
                 "uint32")))
 (bytes2uint32_TCC13 0
  (bytes2uint32_TCC13-1 nil 3845476905 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil
   (bytes2uint32 subtype "bytestrings.get(hex.X, hex.i)" "uint32")))
 (bytes2uint16_TCC1 0
  (bytes2uint16_TCC1-1 nil 3845476905 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil
   (bytes2uint16 subtype "bytestrings.get(hex.X, hex.i)" "uint16")))
 (bytes2uint16_TCC2 0
  (bytes2uint16_TCC2-1 nil 3845476905
   ("" (use "u16lshift_bound")
    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint16 type-eq-decl nil integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (u16lshift_bound application-judgement
     "upto(exp2(8 + n) - exp2(n))" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (u16lshift_bound judgement-tcc nil integertypes nil))
   nil
   (bytes2uint16 subtype
                 "(number_fields.+)(integertypes.u16lshift(bytestrings.get(hex.X, hex.i), 8), bytestrings.get(hex.X, (number_fields.+)(hex.i, 1)))"
                 "uint16")))
 (bytes2uint16_TCC3 0
  (bytes2uint16_TCC3-1 nil 3845476905 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil
   (bytes2uint16 subtype "bytestrings.get(hex.X, hex.i)" "uint16")))
 (bytes2uint8_TCC1 0
  (bytes2uint8_TCC1-1 nil 3845476905 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (bytes2uint8 subtype "bytestrings.get(hex.X, hex.i)" "uint8")))
 (equalUpto_TCC1 0
  (equalUpto_TCC1-1 nil 3845476905 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (< const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (equalUpto subtype "hex.j" "naturalnumbers.below(hex.X`length)")))
 (bytes2uint32array_TCC1 0
  (bytes2uint32array_TCC1-1 nil 3845476905 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (max32 const-decl "uint32" integertypes nil))
   nil
   (bytes2uint32array subtype "number_fields./(hex.X`length, 4)"
    "{x | booleans.AND(reals.<=(0, integertypes.x), reals.<=(integertypes.x, integertypes.max32))}")))
 (bytes2uint32array_TCC2 0
  (bytes2uint32array_TCC2-1 nil 3845476905 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (max32 const-decl "uint32" integertypes nil)
    (u32ceiling const-decl "uint32" integertypes nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (bytes2uint32array subtype "number_fields.*(4, hex.j)"
    "naturalnumbers.below(hex.X`length)"))))


$$$bytevectors.pvs
bytevectors[n : index] 	: THEORY

  BEGIN

   %Vectors go from 0...n-1, and so right rotate by i moves 0->i, 1->i+1, .., n-1 -> n + i - 1.
   %left rotation moves 0 to n - i mod n.
   %To rotate by i, we first rotate i mod 8 bytes, and then nrem(i, 8) bits. 

   byv: TYPE = ARRAY[below(n) -> byte]
   X, Y, Z: VAR byv

   byvand(X, Y): byv = (LAMBDA (i: below(n)): u8and(X(i), Y(i)))
   byvor(X, Y): byv =  (LAMBDA (i: below(n)): u8or(X(i), Y(i)))
   byvxor(X, Y): byv =  (LAMBDA (i: below(n)): u8xor(X(i), Y(i)))
   byvnot(X): byv =  (LAMBDA (i: below(n)): u8not(X(i)))

   byvleftrot(X, (i: upto(n))): byv
     = (LAMBDA (j: below(n)): X(nrem(u32plus(i, j), n)))

   nextindex(i: below(n)): below(n) =
     (LET j = u32plus(i, 1)
        IN IF j = n then 0 ELSE j ENDIF)

   precindex(i: below(n)): below(n) =
      (IF i = 0 then u32minus(n, 1) ELSE u32minus(i, 1) ENDIF)

   byvrightrot(X, (i: upto(n))): byv
     = (LAMBDA (j: below(n)): X(nrem(u32plus(i, u32minus(n, j)), n)))


   byvbitleftrot(X, (i : upto(8))): byv =
      (LAMBDA (j : below(n)): u8plus(u8lshift(X(nextindex(j)), u8minus(8, i)),
                                     u8rshift(X(j), i)))

   byvbitrightrot(X, (i : upto(8))): byv =
      (LAMBDA (j : below(n)): u8plus(u8lshift(X(j),  i),
                                     u8rshift(X(precindex(j)), u8minus(8, i))))

   byvleftrotate(X, (i: below(8 * n))): byv =
     byvbitrightrot(byvrightrot(X, ndiv(i, 8)), nrem(i, 8))

   byvrightrotate(X, (i: below(8 * n))): byv =
     byvbitleftrot(byvleftrot(X, ndiv(i, 8)), nrem(i, 8))

   byvXOR(X, Y): byv = (LAMBDA (j: below(n)): u8xor(X(j), Y(j)))

   byv2bytestring(X): bytestring = (# length := n, seq := X #)

   CONVERSION+ byv2bytestring


  END bytevectors

byvconcat[m, n: index]: THEORY
BEGIN
  IMPORTING bytevectors
  ++(X: byv[m], Y: byv[n]): byv[m+n] =
   (LAMBDA (j: below(m + n)): IF j < m THEN X(j) ELSE Y(j - m) ENDIF)

END byvconcat

test_bytevectors: THEORY
BEGIN
  IMPORTING bytevectors

     IMPORTING hex

   test1(i: index): hexstring =
    (LET str = hex2bytestring("ABCDEF0123456789")
      IN bytestring2hexstring(str WITH [`seq :=  byvrightrotate(str`seq, i)]))




END test_bytevectors

$$$bytevectors.prf
(bytevectors
 (byvleftrot_TCC1 0
  (byvleftrot_TCC1-1 nil 3848326571
   ("" (typepred n) (("" (grind) nil nil)) nil)
   ((posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (n formal-const-decl "index" bytevectors nil))
   nil (byvleftrot subtype "bytevectors.i" "uint32")))
 (byvleftrot_TCC2 0
  (byvleftrot_TCC2-1 nil 3848326571
   ("" (typepred n) (("" (grind) nil nil)) nil)
   ((posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (n formal-const-decl "index" bytevectors nil))
   nil (byvleftrot subtype "bytevectors.j" "uint32")))
 (byvleftrot_TCC3 0
  (byvleftrot_TCC1-1 nil 3848272197
   ("" (skeep*) (("" (typepred "n") (("" (grind) nil nil)) nil)) nil)
   ((n formal-const-decl "index" bytevectors nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil (byvleftrot subtype "bytevectors.n" "posnat")))
 (nextindex_TCC1 0
  (nextindex_TCC1-1 nil 3848116047 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (n formal-const-decl "index" bytevectors nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (nextindex subtype "1" "uint32")))
 (nextindex_TCC2 0
  (nextindex_TCC2-1 nil 3848116047 ("" (subtype-tcc) nil nil)
   ((max32 const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (nextindex subtype "0" "naturalnumbers.below(bytevectors.n)")))
 (nextindex_TCC3 0
  (nextindex_TCC3-1 nil 3848116047
   ("" (skeep)
    (("" (typepred "j")
      (("" (typepred "i")
        (("" (typepred "n") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((uint32 type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (u32plus const-decl "uint32" integertypes nil)
    (max32 const-decl "uint32" integertypes nil)
    (< const-decl "bool" reals nil)
    (index type-eq-decl nil integertypes nil)
    (n formal-const-decl "index" bytevectors nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (nextindex subtype "bytevectors.j"
    "naturalnumbers.below(bytevectors.n)")))
 (precindex_TCC1 0
  (precindex_TCC1-1 nil 3848116047
   ("" (skeep) (("" (typepred "n") (("" (grind) nil nil)) nil)) nil)
   ((n formal-const-decl "index" bytevectors nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil))
   nil (precindex subtype "bytevectors.n" "uint32")))
 (precindex_TCC2 0
  (precindex_TCC2-1 nil 3848116047 ("" (subtype-tcc) nil nil)
   ((u32minus const-decl "uint32" integertypes nil)) nil
   (precindex subtype "integertypes.u32minus(bytevectors.n, 1)"
    "naturalnumbers.below(bytevectors.n)")))
 (precindex_TCC3 0
  (precindex_TCC3-1 nil 3848116047 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (n formal-const-decl "index" bytevectors nil)
    (below type-eq-decl nil naturalnumbers nil)
    (u32minus const-decl "uint32" integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (precindex subtype "integertypes.u32minus(bytevectors.i, 1)"
    "naturalnumbers.below(bytevectors.n)")))
 (byvrightrot_TCC1 0
  (byvrightrot_TCC3-1 nil 3848116047
   ("" (typepred n) (("" (grind) nil nil)) nil)
   ((posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (n formal-const-decl "index" bytevectors nil))
   nil (byvrightrot subtype "bytevectors.n" "uint32")))
 (byvbitleftrot_TCC1 0
  (byvbitleftrot_TCC2-1 nil 3848116047
   ("" (typepred n) (("" (grind) nil nil)) nil)
   ((posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (n formal-const-decl "index" bytevectors nil))
   nil (byvbitleftrot subtype "bytevectors.i" "uint8")))
 (byvbitleftrot_TCC2 0
  (byvbitleftrot_TCC3-1 nil 3848326571 ("" (subtype-tcc) nil nil)
   ((u8minus const-decl "uint8" integertypes nil)) nil
   (byvbitleftrot subtype "integertypes.u8minus(8, bytevectors.i)"
    "naturalnumbers.upto(8)")))
 (byvleftrotate_TCC1 0
  (byvleftrotate_TCC1-1 nil 3848326571
   ("" (skeep*)
    (("" (typepred "ndiv(i, 8)") (("" (assert) nil nil)) nil)) nil)
   ((ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (n formal-const-decl "index" bytevectors nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (byvleftrotate subtype "modulo_arithmetic.ndiv(bytevectors.i, 8)"
    "naturalnumbers.upto(bytevectors.n)")))
 (byvleftrotate_TCC2 0
  (byvleftrotate_TCC2-1 nil 3848326571 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (n formal-const-decl "index" bytevectors nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   nil
   (byvleftrotate subtype "modulo_arithmetic.nrem(bytevectors.i, 8)"
    "naturalnumbers.upto(8)")))
 (byv2bytestring_TCC1 0
  (byv2bytestring_TCC1-1 nil 3849969158
   ("" (typepred n) (("" (grind) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (n formal-const-decl "index" bytevectors nil))
   nil
   (byv2bytestring subtype "bytevectors.n"
    "naturalnumbers.below(0x100000000)"))))
(byvconcat
 (doubleplus_TCC1 0
  (doubleplus_TCC1-1 nil 3849969158 ("" (subtype-tcc) nil nil) nil nil
   (doubleplus subtype "(number_fields.+)(byvconcat.m, byvconcat.n)"
    "index")))
 (doubleplus_TCC2 0
  (doubleplus_TCC2-1 nil 3849969158 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (m formal-const-decl "index" byvconcat nil)
    (n formal-const-decl "index" byvconcat nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (doubleplus subtype "(number_fields.-)(byvconcat.j, byvconcat.m)"
    "naturalnumbers.below(byvconcat.n)"))))
(test_bytevectors
 (test1_TCC1 0
  (test1_TCC1-1 nil 3848326571 ("" (subtype-tcc) nil nil) nil nil
   (test1 subtype "\"ABCDEF0123456789\"" "bstring")))
 (test1_TCC2 0
  (test1_TCC2-1 nil 3848326571 ("" (subtype-tcc) nil nil) nil nil
   (test1 subtype "bytestrings.mk_bytestring(\"ABCDEF0123456789\")"
    "hexstring")))
 (test1_TCC3 0
  (test1_TCC3-1 nil 3848326571 ("" (subtype-tcc) nil nil) nil nil
   (test1 subtype "test_bytevectors.i"
    "naturalnumbers.below(number_fields.*(8, test_bytevectors.str`length))")))
 (test1_TCC4 0
  (test1_TCC4-1 nil 3848326571 ("" (subtype-tcc) nil nil) nil nil
   (test1 subtype "test_bytevectors.str`length" "index")))
 (test1_TCC5 0
  (test1_TCC5-1 nil 3848326571 ("" (subtype-tcc) nil nil) nil nil
   (test1 subtype
    "test_bytevectors.str WITH [`seq := bytevectors[test_bytevectors.str`length].byvrightrotate(test_bytevectors.str`seq, test_bytevectors.i)]"
    "{X | reals.<(number_fields.*(2, hex.X`length), 0x100000000)}"))))


$$$rotate.pvs
rotate		: THEORY

  BEGIN

  x8, y8, z8: VAR uint8
  x16, y16, z16: VAR uint16
  x32, y32, z32: VAR uint32
  x64, y64, z64: VAR uint64  

   u8rightrotate(x8, (i : upto(8))): uint8
    = u8plus(u8lshift(x8, 8 - i), u8rshift(x8, i))

   test_u8rightrotate_0: uint8 = u8rightrotate(255, 5)
   test_u8rightrotate_1: uint8 = u8rightrotate(0x00, 3)
   test_u8rightrotate_2: uint8 = u8rightrotate(0xF0, 7)
   test_u8rightrotate_3: uint8 = u8rightrotate(0x0F, 2)   
   test_u8rightrotate_4: uint8 = u8rightrotate(255, 8)
   test_u8rightrotate_5: uint8 = u8rightrotate(255, 0)      

   u16rightrotate(x16, (i : upto(16))): uint16
    = u16plus(u16lshift(x16, 16 - i), u16rshift(x16, i))

   test_u16rightrotate_0: uint16 = u16rightrotate(0xFFFF, 15)
   test_u16rightrotate_1: uint16 = u16rightrotate(0xF0F0, 13)
   test_u16rightrotate_2: uint16 = u16rightrotate(0x00F0, 4)
   test_u16rightrotate_3: uint16 = u16rightrotate(0x0F0F, 9)
   test_u16rightrotate_4: uint16 = u16rightrotate(0x0F0F, 16)
   test_u16rightrotate_5: uint16 = u16rightrotate(0x0F0F, 0)      


   u32rightrotate(x32, (i : upto(32))): uint32
    = u32plus(u32lshift(x32, 32 - i), u32rshift(x32, i))

   test_u32rightrotate_0: uint32 = u32rightrotate(0xFFFFFFFF, 31)
   test_u32rightrotate_1: uint32 = u32rightrotate(0xF0F0F0F0, 23)
   test_u32rightrotate_2: uint32 = u32rightrotate(0x00F000F0, 14)
   test_u32rightrotate_3: uint32 = u32rightrotate(0x0F0F0F0F, 9)
   test_u32rightrotate_4: uint32 = u32rightrotate(0x0F0F0F0F, 32)
   test_u32rightrotate_5: uint32 = u32rightrotate(0x0F0F0F0F, 0)   

   u64rightrotate(x64, (i : upto(64))): uint64
    = u64plus(u64lshift(x64, 64 - i), u64rshift(x64, i))

   test_u64rightrotate_0: uint64 = u64rightrotate(0x00FFFFFFFFFFFFFF, 63)
   test_u64rightrotate_1: uint64 = u64rightrotate(0x0FF0F0F0F0F0F0F0, 43)
   test_u64rightrotate_2: uint64 = u64rightrotate(0x00F000F0F0F0F0F0, 24)
   test_u64rightrotate_3: uint64 = u64rightrotate(0x0F0F0F0FF0F0F0F0, 9)
   test_u64rightrotate_4: uint64 = u64rightrotate(0x0F0F0F0FF0F0F0F0, 64)
   test_u64rightrotate_5: uint64 = u64rightrotate(0x0F0F0F0FF0F0F0F0, 0)

   u8leftrotate(x8, (i : upto(8))): uint8
    = u8plus(u8lshift(x8, i), u8rshift(x8, 8 - i))

   test_u8leftrotate_0: uint8 = u8leftrotate(255, 5)
   test_u8leftrotate_1: uint8 = u8leftrotate(0x00, 3)
   test_u8leftrotate_2: uint8 = u8leftrotate(0xF0, 7)
   test_u8leftrotate_3: uint8 = u8leftrotate(0x0F, 2)   
   test_u8leftrotate_4: uint8 = u8leftrotate(255, 8)
   test_u8leftrotate_5: uint8 = u8leftrotate(255, 0)      

   u16leftrotate(x16, (i : upto(16))): uint16
    = u16plus(u16lshift(x16, i), u16rshift(x16, 16 - i))

   test_u16leftrotate_0: uint16 = u16leftrotate(0xFFFF, 15)
   test_u16leftrotate_1: uint16 = u16leftrotate(0xF0F0, 13)
   test_u16leftrotate_2: uint16 = u16leftrotate(0x00F0, 4)
   test_u16leftrotate_3: uint16 = u16leftrotate(0x0F0F, 9)
   test_u16leftrotate_4: uint16 = u16leftrotate(0x0F0F, 16)
   test_u16leftrotate_5: uint16 = u16leftrotate(0x0F0F, 0)      


   u32leftrotate(x32, (i : upto(32))): uint32
    = u32plus(u32lshift(x32, i), u32rshift(x32, 32 - i))

   test_u32leftrotate_0: uint32 = u32leftrotate(0xFFFFFFFF, 31)
   test_u32leftrotate_1: uint32 = u32leftrotate(0xF0F0F0F0, 23)
   test_u32leftrotate_2: uint32 = u32leftrotate(0x00F000F0, 14)
   test_u32leftrotate_3: uint32 = u32leftrotate(0x0F0F0F0F, 9)
   test_u32leftrotate_4: uint32 = u32leftrotate(0x0F0F0F0F, 32)
   test_u32leftrotate_5: uint32 = u32leftrotate(0x0F0F0F0F, 0)   

   u64leftrotate(x64, (i : upto(64))): uint64
    = u64plus(u64lshift(x64, i), u64rshift(x64, 64 - i))

   test_u64leftrotate_0: uint64 = u64leftrotate(0x00FFFFFFFFFFFFFF, 63)
   test_u64leftrotate_1: uint64 = u64leftrotate(0x0FF0F0F0F0F0F0F0, 43)
   test_u64leftrotate_2: uint64 = u64leftrotate(0x00F000F0F0F0F0F0, 24)
   test_u64leftrotate_3: uint64 = u64leftrotate(0x0F0F0F0FF0F0F0F0, 9)
   test_u64leftrotate_4: uint64 = u64leftrotate(0x0F0F0F0FF0F0F0F0, 64)
   test_u64leftrotate_5: uint64 = u64leftrotate(0x0F0F0F0FF0F0F0F0, 0)


  lbytes(n: uint8): TYPE = {X : bytestring | X`length = n}


  padright(blocksize: uint8)(X: bytestring | length(X) < blocksize): lbytes(blocksize)
  = (# length := blocksize,
       seq := (LAMBDA (i:below(blocksize)): IF i < length(X) THEN X`seq(i) ELSE 0 ENDIF) #)

  lbytesXOR(l:uint8)(X, Y :lbytes(l)): lbytes(l)
   = (# length := l,
        seq := (LAMBDA (i: below(l)): u8xor(X`seq(i), Y`seq(i))) #)

   nbytes(byte: uint8, l: uint8): lbytes(l)
    = (# length := l,
         seq := (LAMBDA (i:below(l)): byte) #)

   u8tobytestring(x8: uint8): lbytes(1)
    = (# length := 1, seq := (LAMBDA (i: below(1)): x8) #)

   test_u8tobytestring_0: bytestring= u8tobytestring(255);
   test_u8tobytestring_1: bytestring= u8tobytestring(0x0F);
   test_u8tobytestring_2: bytestring= u8tobytestring(0xF0);
   test_u8tobytestring_3: bytestring= u8tobytestring(0x00);
   
   

   u16tobytestring(x16: uint16): lbytes(2)
    = (# length := 2, seq := (LAMBDA (i: below(2)):
                      IF i = 0 THEN u16rem(u16rshift(x16, 8), 0x100)
		        ELSE u16rem(x16, 0x100) ENDIF) #)

   test_u16tobytestring_0: lbytes(2) = u16tobytestring(0xFFFF);
   test_u16tobytestring_1: lbytes(2) = u16tobytestring(0x0F0F);
   test_u16tobytestring_2: lbytes(2) = u16tobytestring(0xF00F);
   test_u16tobytestring_3: lbytes(2) = u16tobytestring(0x00FF);

   u32tobytestring(x32: uint32): lbytes(4)
    = (# length := 4, seq := (LAMBDA (i: below(4)):
                      IF i = 0 THEN u32rem(u32rshift(x32, 24), 0x100)
		        ELSIF i = 1 THEN u32rem(u32rshift(x32, 16), 0x100)
			ELSIF i = 2 THEN u32rem(u32rshift(x32, 8), 0x100)
			ELSE u32rem(x32, 0x100)
			ENDIF) #)

   test_u32tobytestring_0: lbytes(4) = u32tobytestring(0xFFFFFFFF);
   test_u32tobytestring_1: lbytes(4) = u32tobytestring(0x0F0F0F0F);
   test_u32tobytestring_2: lbytes(4) = u32tobytestring(0xF00FF00F);
   test_u32tobytestring_3: lbytes(4) = u32tobytestring(0x00FF00FF);

   u64tobytestring(x64: uint64): lbytes(8)
    = (# length := 8, seq := (LAMBDA (i: below(8)):
                      IF i = 0 THEN u64rem(u64rshift(x64, 56), 0x100)
		        ELSIF i = 1 THEN u64rem(u64rshift(x64, 48), 0x100)
			ELSIF i = 2 THEN u64rem(u64rshift(x64, 40), 0x100)
			ELSIF i = 3 THEN  u64rem(u64rshift(x64, 32), 0x100)
			ELSIF i = 4 THEN  u64rem(u64rshift(x64, 24), 0x100)	
			ELSIF i = 5 THEN  u64rem(u64rshift(x64, 16), 0x100)				
			ELSIF i = 6 THEN  u64rem(u64rshift(x64, 8), 0x100)	   
			ELSE u64rem(x64, 0x100)
			ENDIF) #)

   test_u64tobytestring_0: lbytes(8) = u64tobytestring(u64plus(u64lshift(0xFFFFFFFF, 32), 0xFFFFFFFF));
   test_u64tobytestring_1: lbytes(8) = u64tobytestring(0x0F0F0F0F0F0);
   test_u64tobytestring_2: lbytes(8) = u64tobytestring(0xF00FF00FF00);
   test_u64tobytestring_3: lbytes(8) = u64tobytestring(0x00FF00FF00F);



  END rotate

$$$rotate.prf
(rotate
 (u8rightrotate_TCC1 0
  (u8rightrotate_TCC1-1 nil 3828381349 ("" (subtype-tcc) nil nil) nil
   nil
   (u8rightrotate subtype "(number_fields.-)(8, rotate.i)"
    "naturalnumbers.upto(8)")))
 (test_u8rightrotate_0_TCC1 0
  (test_u8rightrotate_0_TCC1-1 nil 3833902925 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (test_u8rightrotate_0 subtype "255" "uint8")))
 (test_u8rightrotate_2_TCC1 0
  (test_u8rightrotate_2_TCC1-1 nil 3833902925 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (test_u8rightrotate_2 subtype "0xf0" "uint8")))
 (u16rightrotate_TCC1 0
  (u16rightrotate_TCC1-1 nil 3828381349 ("" (subtype-tcc) nil nil) nil
   nil
   (u16rightrotate subtype "(number_fields.-)(16, rotate.i)"
    "naturalnumbers.upto(16)")))
 (test_u16rightrotate_0_TCC1 0
  (test_u16rightrotate_0_TCC1-1 nil 3833902925 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (test_u16rightrotate_0 subtype "0xffff" "uint16")))
 (test_u16rightrotate_1_TCC1 0
  (test_u16rightrotate_1_TCC1-1 nil 3833902925 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (test_u16rightrotate_1 subtype "0xf0f0" "uint16")))
 (u32rightrotate_TCC1 0
  (u32rightrotate_TCC1-1 nil 3828381349 ("" (subtype-tcc) nil nil) nil
   nil
   (u32rightrotate subtype "(number_fields.-)(32, rotate.i)"
    "naturalnumbers.upto(32)")))
 (test_u32rightrotate_0_TCC1 0
  (test_u32rightrotate_0_TCC1-1 nil 3833902925 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (test_u32rightrotate_0 subtype "0xffffffff" "uint32")))
 (test_u32rightrotate_1_TCC1 0
  (test_u32rightrotate_1_TCC1-1 nil 3833902925 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (test_u32rightrotate_1 subtype "0xf0f0f0f0" "uint32")))
 (u64rightrotate_TCC1 0
  (u64rightrotate_TCC1-1 nil 3828381349 ("" (subtype-tcc) nil nil) nil
   nil
   (u64rightrotate subtype "(number_fields.-)(64, rotate.i)"
    "naturalnumbers.upto(64)")))
 (padright_TCC1 0
  (padright_TCC1-1 nil 3842821585 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil))
   nil
   (padright subtype "rotate.blocksize"
    "naturalnumbers.below(0x100000000)")))
 (lbytesXOR_TCC1 0
  (lbytesXOR_TCC1-1 nil 3842821585 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (lbytes type-eq-decl nil rotate nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (lbytesXOR subtype "rotate.l" "naturalnumbers.below(0x100000000)")))
 (lbytesXOR_TCC2 0
  (lbytesXOR_TCC2-1 nil 3842821585 ("" (subtype-tcc) nil nil) nil nil
   (lbytesXOR subtype "rotate.i"
    "naturalnumbers.below(rotate.X`length)")))
 (lbytesXOR_TCC3 0
  (lbytesXOR_TCC3-1 nil 3842821585 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint8 type-eq-decl nil integertypes nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (lbytes type-eq-decl nil rotate nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (lbytesXOR subtype "rotate.X`seq(rotate.i)" "uint8")))
 (lbytesXOR_TCC4 0
  (lbytesXOR_TCC4-1 nil 3842821585 ("" (subtype-tcc) nil nil) nil nil
   (lbytesXOR subtype "rotate.i"
    "naturalnumbers.below(rotate.Y`length)")))
 (lbytesXOR_TCC5 0
  (lbytesXOR_TCC5-1 nil 3842821585 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint8 type-eq-decl nil integertypes nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (lbytes type-eq-decl nil rotate nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (lbytesXOR subtype "rotate.Y`seq(rotate.i)" "uint8")))
 (lbytesXOR_TCC6 0
  (lbytesXOR_TCC6-1 nil 3842821585
   ("" (skeep*)
    (("" (typepred "u8xor(X`seq(i), Y`seq(i))") (("" (grind) nil nil))
      nil))
    nil)
   ((lbytes type-eq-decl nil rotate nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (below type-eq-decl nil naturalnumbers nil)
    (u8xor const-decl "uint8" integer_bv_ops nil)
    (uint8 type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (/= const-decl "boolean" notequal nil)
    (XOR const-decl "bool" xor_def nil)
    (XOR const-decl "bvec[N]" bv_bitwise nil)
    (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (lbytesXOR subtype
    "integer_bv_ops.u8xor(rotate.X`seq(rotate.i), rotate.Y`seq(rotate.i))"
    "byte")))
 (nbytes_TCC1 0
  (nbytes_TCC1-1 nil 3842821585 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil))
   nil
   (nbytes subtype "rotate.l" "naturalnumbers.below(0x100000000)")))
 (nbytes_TCC2 0
  (nbytes_TCC2-1 nil 3842821585 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil))
   nil (nbytes subtype "rotate.byte" "byte")))
 (u8tobytestring_TCC1 0
  (u8tobytestring_TCC1-1 nil 3827347997
   ("" (skeep*) (("" (typepred "x8") (("" (grind) nil nil)) nil)) nil)
   ((uint8 type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil (u8tobytestring subtype "rotate.x8" "byte")))
 (u16tobytestring_TCC1 0
  (u16tobytestring_TCC2-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint16 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u16rem const-decl "uint16" integertypes nil)
    (u16rshift const-decl "uint16" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u16tobytestring subtype
    "integertypes.u16rem(integertypes.u16rshift(rotate.x16, 8), 0x100)"
    "byte")))
 (u16tobytestring_TCC2 0
  (u16tobytestring_TCC1-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint16 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (u16rem const-decl "uint16" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u16tobytestring subtype "integertypes.u16rem(rotate.x16, 0x100)"
    "byte")))
 (test_u16tobytestring_2_TCC1 0
  (test_u16tobytestring_2_TCC1-1 nil 3833902925 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (test_u16tobytestring_2 subtype "0xf00f" "uint16")))
 (u32tobytestring_TCC1 0
  (u32tobytestring_TCC2-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u32rem const-decl "uint32" integertypes nil)
    (u32rshift const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u32tobytestring subtype
    "integertypes.u32rem(integertypes.u32rshift(rotate.x32, 24), 0x100)"
    "byte")))
 (u32tobytestring_TCC2 0
  (u32tobytestring_TCC3-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u32rem const-decl "uint32" integertypes nil)
    (u32rshift const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u32tobytestring subtype
    "integertypes.u32rem(integertypes.u32rshift(rotate.x32, 16), 0x100)"
    "byte")))
 (u32tobytestring_TCC3 0
  (u32tobytestring_TCC4-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u32rem const-decl "uint32" integertypes nil)
    (u32rshift const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u32tobytestring subtype
    "integertypes.u32rem(integertypes.u32rshift(rotate.x32, 8), 0x100)"
    "byte")))
 (u32tobytestring_TCC4 0
  (u32tobytestring_TCC1-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (u32rem const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u32tobytestring subtype "integertypes.u32rem(rotate.x32, 0x100)"
    "byte")))
 (test_u32tobytestring_2_TCC1 0
  (test_u32tobytestring_2_TCC1-1 nil 3833902925 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (test_u32tobytestring_2 subtype "0xf00ff00f" "uint32")))
 (u64tobytestring_TCC1 0
  (u64tobytestring_TCC2-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u64rem const-decl "uint64" integertypes nil)
    (u64rshift const-decl "uint64" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64tobytestring subtype
    "integertypes.u64rem(integertypes.u64rshift(rotate.x64, 56), 0x100)"
    "byte")))
 (u64tobytestring_TCC2 0
  (u64tobytestring_TCC3-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u64rem const-decl "uint64" integertypes nil)
    (u64rshift const-decl "uint64" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64tobytestring subtype
    "integertypes.u64rem(integertypes.u64rshift(rotate.x64, 48), 0x100)"
    "byte")))
 (u64tobytestring_TCC3 0
  (u64tobytestring_TCC4-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u64rem const-decl "uint64" integertypes nil)
    (u64rshift const-decl "uint64" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64tobytestring subtype
    "integertypes.u64rem(integertypes.u64rshift(rotate.x64, 40), 0x100)"
    "byte")))
 (u64tobytestring_TCC4 0
  (u64tobytestring_TCC5-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u64rem const-decl "uint64" integertypes nil)
    (u64rshift const-decl "uint64" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64tobytestring subtype
    "integertypes.u64rem(integertypes.u64rshift(rotate.x64, 32), 0x100)"
    "byte")))
 (u64tobytestring_TCC5 0
  (u64tobytestring_TCC6-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u64rem const-decl "uint64" integertypes nil)
    (u64rshift const-decl "uint64" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64tobytestring subtype
    "integertypes.u64rem(integertypes.u64rshift(rotate.x64, 24), 0x100)"
    "byte")))
 (u64tobytestring_TCC6 0
  (u64tobytestring_TCC7-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u64rem const-decl "uint64" integertypes nil)
    (u64rshift const-decl "uint64" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64tobytestring subtype
    "integertypes.u64rem(integertypes.u64rshift(rotate.x64, 16), 0x100)"
    "byte")))
 (u64tobytestring_TCC7 0
  (u64tobytestring_TCC8-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u64rem const-decl "uint64" integertypes nil)
    (u64rshift const-decl "uint64" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64tobytestring subtype
    "integertypes.u64rem(integertypes.u64rshift(rotate.x64, 8), 0x100)"
    "byte")))
 (u64tobytestring_TCC8 0
  (u64tobytestring_TCC1-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (u64rem const-decl "uint64" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64tobytestring subtype "integertypes.u64rem(rotate.x64, 0x100)"
    "byte"))))


$$$Milenage.pvs
Milenage	: THEORY

  BEGIN

    IMPORTING rotate, bytevectors, byvconcat

    nbyv(x: uint8, n: index): byv[n] = (LAMBDA (j: below(n)): x)

    c1: byv[16] = nbyv(0, 16)
    c2: byv[16] = c1 WITH [(15) := 1]
    c3: byv[16] = c1 WITH [(15) := 2]
    c4: byv[16] = c1 WITH [(15) := 4]
    c5: byv[16] = c1 WITH [(15) := 8]

    r1: uint8 = 64
    r2: uint8 = 0
    r3: uint8 = 32
    r4: uint8 = 64
    r5: uint8 = 96

    E: VAR [byv[16], byv[16] -> byv[16]]

    byvto(n: index, X: byv[n], to: upto(n)): byv[to] = (LAMBDA (i: below(to)): X(i))
    byvfrom(n: index, X: byv[n], frm: upto(n)): byv[n - frm] = (LAMBDA (i: below(n - frm)): X(i + frm))

    OUT1(E)(K, TEMP, IN1, OPC: byv[16]): byv[16]
     = LET X = byvXOR(IN1, OPC), 
           Y = byvrightrotate(X, r1),
	   Z1 = byvXOR(TEMP, Y),
	   Z = byvXOR(Z1, c1),
	   U = E(Z, K)
	 IN byvXOR(U, OPC)

    OUT2(E)(K, X, OPC: byv[16]): byv[16]
     = LET %X = byvXOR(TEMP, OPC), 
           Y = byvrightrotate(X, r2),
	   Z = byvXOR(Y, c2),
	   U = E(Z, K)
	 IN byvXOR(U, OPC)

    OUT3(E)(K, X, OPC: byv[16]): byv[16]
     = LET %X = byvXOR(TEMP, OPC),
           Y = byvrightrotate(X, r3),
	   Z = byvXOR(Y, c3),
	   U = E(Z, K)
	 IN byvXOR(U, OPC)

    OUT4(E)(K, X, OPC: byv[16]): byv[16]
     = LET %X = byvXOR(TEMP, OPC),
           Y = byvrightrotate(X, r4),
	   Z = byvXOR(Y, c4),
	   U = E(Z, K)
	 IN byvXOR(U, OPC)

    OUT5(E)(K, X, OPC: byv[16]): byv[16]
     = LET %X = byvXOR(TEMP, OPC),
           Y = byvrightrotate(X, r5),
	   Z = byvXOR(Y, c5),
	   U = E(Z, K)
	 IN byvXOR(U, OPC)

    SQN : VAR byv[6]

    testSQN: byv[6] = (LAMBDA (i:below(6)): 63)
    AMF: VAR byv[2]
    testAMF: byv[2] = (LAMBDA (i:below(2)): 27)

    IN1(SQN, AMF): byv[16] =
     SQN ++ AMF ++ SQN ++ AMF

    OPC(E)(K, OP: byv[16]): byv[16] =
      byvXOR(OP, E(OP, K))
      
    TEMP(E)(K, RAND, OPC: byv[16]): byv[16]
     = E(byvXOR(RAND, OPC), K)

    Output : TYPE = [# f1, f1star, f2 : byv[8],
                       f3, f4: byv[16],
		       f5, f5star: byv[6] #]

    testK: byv[16] = nbyv(173, 16)
    testRAND: byv[16] = nbyv(82, 16)
    testOP: byv[16] = nbyv(99, 16)

    allfun(E)(SQN, AMF, (K, RAND, OP: byv[16])): Output
     = LET in1 = IN1(SQN, AMF),
            opc = OPC(E)(K, OP), 
            temp = TEMP(E)(K, RAND, opc),
	    X = byvXOR(temp, opc), 
	    out1 = OUT1(E)(K, temp, in1, opc),
	    out2 = OUT2(E)(K, X, opc), 
	    out3 = OUT3(E)(K, X, opc),
	    out4 = OUT4(E)(K, X, opc),
	    out5 = OUT2(E)(K, X, opc),
	    f1 = byvto(16, out1, 8),
	    f1star = byvfrom(16, out1, 8),
	    f2 = byvfrom(16, out2, 8),
	    f3 = out3,
	    f4 = out4,
	    f5 = byvto(16, out2, 6),
	    f5star = byvto(16, out5, 6)
	  IN (# f1 := f1,
	        f1star := f1star,
		f2 := f2,
		f3 := f3,
		f4 := f4,
		f5 := f5,
		f5star := f5star #)


    % mkf1(E)(SQN, AMF, (K, RAND, OP: byv[16])): byv[8]
    %  =  LET IN1 = mkIN1(SQN, AMF),
    %         OPC = mkOPC(E)(K, OP), 
    %         TEMP = mkTEMP(E)(K, RAND, OPC),
    % 	    OUT1 = mkOUT1(E)(K, TEMP, IN1, OPC)
    % 	  IN (LAMBDA (j: below(8)): OUT1(j))

    % mkf1star(E)(SQN, AMF, (K, RAND, OP: byv[16])): byv[8]
    %  =  LET IN1 = mkIN1(SQN, AMF),
    %         OPC = mkOPC(E)(K, OP), 
    %         TEMP = mkTEMP(E)(K, RAND, OPC),
    % 	    OUT1 = mkOUT1(E)(K, TEMP, IN1, OPC)
    % 	  IN (LAMBDA (j: below(8)):  OUT1(j + 8))

    % mkf2(E)(K, RAND, OP: byv[16]): byv[8]
    %   = LET TEMP = mkTEMP(E)(K, RAND, OP),
    %         OPC = mkOPC(E)(K, OP),
    % 	    OUT2 = mkOUT2(E)(K, TEMP, OPC)
    % 	  IN (LAMBDA (j: below(8)): OUT2(j + 8))

    % mkf3(E)(K, RAND, OP: byv[16]): byv[16]
    %   = LET TEMP = mkTEMP(E)(K, RAND, OP),
    %         OPC = mkOPC(E)(K, OP)
    % 	 IN mkOUT3(E)(K, TEMP, OPC)

    % mkf4(E)(K, RAND, OP: byv[16]): byv[16]
    %   = LET TEMP = mkTEMP(E)(K, RAND, OP),
    %         OPC = mkOPC(E)(K, OP)
    % 	 IN mkOUT4(E)(K, TEMP, OPC)

    % mkf5(E)(K, RAND, OP: byv[16]): byv[8]
    %   = LET TEMP = mkTEMP(E)(K, RAND, OP),
    %         OPC = mkOPC(E)(K, OP),
    % 	    OUT2 = mkOUT2(E)(K, TEMP, OPC)
    % 	  IN (LAMBDA (j: below(8)): OUT2(j))

    % mkf5star(E)(K, RAND, OP: byv[16]): byv[8]
    %   = LET TEMP = mkTEMP(E)(K, RAND, OP),
    %         OPC = mkOPC(E)(K, OP),
    % 	    OUT5 = mkOUT5(E)(K, TEMP, OPC)
    % 	  IN (LAMBDA (j: below(8)): OUT5(j))

  END Milenage

testMilenage: THEORY
BEGIN
  IMPORTING Milenage, Rijndael

  testAllFun: hexstring =
    (LET output = allfun(Rijndael)(testSQN, testAMF, testK, testRAND, testOP),
         f1 = output`f1,
	 f1star = output`f1star,
	 f2 = output`f2,
	 f3 = output`f3,
	 f4 = output`f4,
	 f5 = output`f5,
	 f5star = output`f5star, 
         outputbytestring:bytestring = "f1: " ++ f1 ++ "f1star: " ++ f1star ++ "f2: " ++ f2 ++ "f3: " ++ f3 ++ "f4: " ++ f4 ++ "f5: " ++ f5 ++ "f5star: " ++ f5star
	 IN
	  bytestring2hexstring(outputbytestring))

END testMilenage

$$$Milenage.prf
(Milenage
 (c1_TCC1 0
  (c1_TCC1-1 nil 3848419886 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (c1 subtype "16" "index")))
 (byvto_TCC1 0
  (byvto_TCC1-1 nil 3849360635 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)) nil
   (byvto subtype "Milenage.to" "index")))
 (byvto_TCC2 0
  (byvto_TCC2-1 nil 3849360635 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)) nil
   (byvto subtype "Milenage.i" "naturalnumbers.below(Milenage.n)")))
 (byvfrom_TCC1 0
  (byvfrom_TCC1-1 nil 3849360635 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)) nil
   (byvfrom subtype "(number_fields.-)(Milenage.n, Milenage.frm)"
    "index")))
 (byvfrom_TCC2 0
  (byvfrom_TCC2-1 nil 3849360635 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)) nil
   (byvfrom subtype "(number_fields.+)(Milenage.i, Milenage.frm)"
    "naturalnumbers.below(Milenage.n)")))
 (OUT1_TCC1 0
  (OUT1_TCC1-1 nil 3849360635 ("" (subtype-tcc) nil nil)
   ((r1 const-decl "uint8" Milenage nil)) nil
   (OUT1 subtype "Milenage.r1"
    "naturalnumbers.below(number_fields.*(8, 16))")))
 (OUT2_TCC1 0
  (OUT2_TCC1-1 nil 3849360635 ("" (subtype-tcc) nil nil)
   ((r2 const-decl "uint8" Milenage nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (OUT2 subtype "Milenage.r2"
    "naturalnumbers.below(number_fields.*(8, 16))")))
 (OUT3_TCC1 0
  (OUT3_TCC1-1 nil 3849360635 ("" (subtype-tcc) nil nil)
   ((r3 const-decl "uint8" Milenage nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (OUT3 subtype "Milenage.r3"
    "naturalnumbers.below(number_fields.*(8, 16))")))
 (OUT4_TCC1 0
  (OUT4_TCC1-1 nil 3849360635 ("" (subtype-tcc) nil nil)
   ((r4 const-decl "uint8" Milenage nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (OUT4 subtype "Milenage.r4"
    "naturalnumbers.below(number_fields.*(8, 16))")))
 (OUT5_TCC1 0
  (OUT5_TCC1-1 nil 3849360635 ("" (subtype-tcc) nil nil)
   ((r5 const-decl "uint8" Milenage nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (OUT5 subtype "Milenage.r5"
    "naturalnumbers.below(number_fields.*(8, 16))")))
 (SQN_TCC1 0
  (SQN_TCC1-1 nil 3848419886 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (SQN subtype "6" "index")))
 (AMF_TCC1 0
  (AMF_TCC1-1 nil 3848419886 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (AMF subtype "2" "index")))
 (IN1_TCC1 0
  (IN1_TCC1-1 nil 3849360635 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (IN1 subtype "8" "index")))
 (IN1_TCC2 0
  (IN1_TCC2-1 nil 3849360635 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (IN1 subtype "14" "index")))
 (testK_TCC1 0
  (testK_TCC1-1 nil 3849360635 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (testK subtype "173" "uint8"))))

