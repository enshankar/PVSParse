//Code generated using pvs2ir2c
#include "Rijndael_c.h"


Rijndael_record_0_t new_Rijndael_record_0(void){
        Rijndael_record_0_t tmp = (Rijndael_record_0_t) safe_malloc(sizeof(struct Rijndael_record_0_s));
        tmp->count = 1;
        return tmp;}

void release_Rijndael_record_0(Rijndael_record_0_t x){
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_Rijndael_record_0_ptr(pointer_t x, type_actual_t T){
        release_Rijndael_record_0((Rijndael_record_0_t)x);
}

Rijndael_record_0_t copy_Rijndael_record_0(Rijndael_record_0_t x){
        Rijndael_record_0_t y = new_Rijndael_record_0();
        y->project_1 = (uint8_t)x->project_1;
        y->project_2 = (uint8_t)x->project_2;
        y->count = 1;
        return y;}

bool_t equal_Rijndael_record_0(Rijndael_record_0_t x, Rijndael_record_0_t y){
        bool_t tmp = true;
        tmp = tmp && x->project_1 == y->project_1;
        tmp = tmp && x->project_2 == y->project_2;
        return tmp;}

bool_t equal_Rijndael_record_0_ptr(pointer_t x, pointer_t y, actual_Rijndael_record_0_t T){
        return equal_Rijndael_record_0((Rijndael_record_0_t)x, (Rijndael_record_0_t)y);
}

actual_Rijndael_record_0_t actual_Rijndael_record_0(){
        actual_Rijndael_record_0_t new = (actual_Rijndael_record_0_t)safe_malloc(sizeof(struct actual_Rijndael_record_0_s));
        new->equal_ptr = (equal_ptr_t)(*equal_Rijndael_record_0_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_Rijndael_record_0_ptr);
 

 
        return new;
 };

Rijndael_record_0_t update_Rijndael_record_0_project_1(Rijndael_record_0_t x, uint8_t v){
        Rijndael_record_0_t y;
        if (x->count == 1){y = x;}
        else {y = copy_Rijndael_record_0(x); x->count--;};
        y->project_1 = (uint8_t)v;
        return y;}

Rijndael_record_0_t update_Rijndael_record_0_project_2(Rijndael_record_0_t x, uint8_t v){
        Rijndael_record_0_t y;
        if (x->count == 1){y = x;}
        else {y = copy_Rijndael_record_0(x); x->count--;};
        y->project_2 = (uint8_t)v;
        return y;}



void release_Rijndael_funtype_1(Rijndael_funtype_1_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

Rijndael_funtype_1_t copy_Rijndael_funtype_1(Rijndael_funtype_1_t x){return x->ftbl->cptr(x);}

bool_t equal_Rijndael_funtype_1(Rijndael_funtype_1_t x, Rijndael_funtype_1_t y){
        return false;}


Rijndael_array_2_t new_Rijndael_array_2(uint32_t size){
        Rijndael_array_2_t tmp = (Rijndael_array_2_t) safe_malloc(sizeof(struct Rijndael_array_2_s) + (size * sizeof(uint8_t)));
        tmp->count = 1;
        tmp->size = size;;
        tmp->max = size;
         return tmp;}

void release_Rijndael_array_2(Rijndael_array_2_t x){
        x->count--;
         if (x->count <= 0){safe_free(x);}
}

void release_Rijndael_array_2_ptr(pointer_t x, type_actual_t T){
        release_Rijndael_array_2((Rijndael_array_2_t)x);
}

Rijndael_array_2_t copy_Rijndael_array_2(Rijndael_array_2_t x){
        Rijndael_array_2_t tmp = new_Rijndael_array_2(x->size);
        tmp->count = 1;
        for (uint32_t i = 0; i < x->size; i++){tmp->elems[i] = (uint8_t)x->elems[i];};
         return tmp;}

bool_t equal_Rijndael_array_2(Rijndael_array_2_t x, Rijndael_array_2_t y){
        bool_t tmp = true;
        uint32_t i = 0;
        while (i < x->size && tmp){tmp = (x->elems[i] == y->elems[i]); i++;};
        return tmp;}

bool_t equal_Rijndael_array_2_ptr(pointer_t x, pointer_t y, type_actual_t T){
        return equal_Rijndael_array_2((Rijndael_array_2_t)x, (Rijndael_array_2_t)y);
}

actual_Rijndael_array_2_t actual_Rijndael_array_2(){
        actual_Rijndael_array_2_t new = (actual_Rijndael_array_2_t)safe_malloc(sizeof(struct actual_Rijndael_array_2_s));
        new->equal_ptr = (equal_ptr_t)(*equal_Rijndael_array_2_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_Rijndael_array_2_ptr);
 

 
        return new;
 };

Rijndael_array_2_t update_Rijndael_array_2(Rijndael_array_2_t x, uint32_t i, uint8_t v){
        Rijndael_array_2_t y; 
         if (x->count == 1){y = x;}
           else {y = copy_Rijndael_array_2(x );
                x->count--;};
        y->elems[i] = (uint8_t)v;
        return y;}

Rijndael_array_2_t upgrade_Rijndael_array_2(Rijndael_array_2_t x, uint32_t i, uint8_t v){
        Rijndael_array_2_t y; 
         if (x->count == 1 && i < x->max){y = x;}
           else if (i > x->max){uint32_t newmax = x->max <= UINT32_MAX/2 ? 2*x->max: UINT32_MAX;
                y = safe_malloc(sizeof(struct Rijndael_array_2_s) + (newmax * sizeof(uint8_t)));
                y->count = 1;
                y->size = i+1;
                y->max = newmax;
                release_Rijndael_array_2(x);}
           else {y = copy_Rijndael_array_2(x );
                x->count--;};
        y->elems[i] = (uint8_t)v;
        return y;}




uint8_t f_Rijndael_closure_3(struct Rijndael_closure_3_s * closure, Rijndael_record_0_t bvar){
        uint8_t bvar_1;
        bvar_1 = (uint8_t)bvar->project_1;
        uint8_t bvar_2;
        bvar_2 = (uint8_t)bvar->project_2;
        release_Rijndael_record_0(bvar);
        uint8_t result = h_Rijndael_closure_3(bvar_1, bvar_2, closure->fvar_1); 
        return result;}

uint8_t m_Rijndael_closure_3(struct Rijndael_closure_3_s * closure, uint8_t bvar_1, uint8_t bvar_2){
        return h_Rijndael_closure_3(bvar_1, bvar_2, closure->fvar_1);}

extern uint8_t h_Rijndael_closure_3(uint8_t ivar_3, uint8_t ivar_4, Rijndael_array_2_t ivar_1){
        uint8_t result;
        uint8_t ivar_14;
        uint8_t ivar_7;
        uint8_t ivar_8;
        ivar_8 = (uint8_t)4;
        ivar_7 = (uint8_t)((uint64_t)ivar_8 * (uint64_t)ivar_4);
        ivar_14 = (uint8_t)(ivar_3 + ivar_7);
        result = (uint8_t)ivar_1->elems[ivar_14];

        return result;
}

Rijndael_closure_3_t new_Rijndael_closure_3(void){
        static struct Rijndael_funtype_1_ftbl_s ftbl = {.fptr = (uint8_t (*)(Rijndael_funtype_1_t, Rijndael_record_0_t))&f_Rijndael_closure_3, .mptr = (uint8_t (*)(Rijndael_funtype_1_t, uint8_t, uint8_t))&m_Rijndael_closure_3, .rptr =  (void (*)(Rijndael_funtype_1_t))&release_Rijndael_closure_3, .cptr = (Rijndael_funtype_1_t (*)(Rijndael_funtype_1_t))&copy_Rijndael_closure_3};
        Rijndael_closure_3_t tmp = (Rijndael_closure_3_t) safe_malloc(sizeof(struct Rijndael_closure_3_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_Rijndael_closure_3(Rijndael_funtype_1_t closure){
        Rijndael_closure_3_t x = (Rijndael_closure_3_t)closure;
        x->count--;
        if (x->count <= 0){
         release_Rijndael_array_2(x->fvar_1);
        //printf("\nFreeing\n");
        safe_free(x);}}

Rijndael_closure_3_t copy_Rijndael_closure_3(Rijndael_closure_3_t x){
        Rijndael_closure_3_t y = new_Rijndael_closure_3();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        if (x->htbl != NULL){
            Rijndael_funtype_1_htbl_t new_htbl = (Rijndael_funtype_1_htbl_t) safe_malloc(sizeof(struct Rijndael_funtype_1_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            Rijndael_funtype_1_hashentry_t * new_data = (Rijndael_funtype_1_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct Rijndael_funtype_1_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct Rijndael_funtype_1_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}

void release_Rijndael_funtype_4(Rijndael_funtype_4_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

Rijndael_funtype_4_t copy_Rijndael_funtype_4(Rijndael_funtype_4_t x){return x->ftbl->cptr(x);}

uint32_t lookup_Rijndael_funtype_4(Rijndael_funtype_4_htbl_t htbl, mpz_ptr_t i, uint32_t ihash){
        uint32_t mask = htbl->size - 1;
        uint32_t hashindex = ihash & mask; Rijndael_funtype_4_hashentry_t data = htbl->data[hashindex];
        bool_t keyzero;

        int64_t tmp3634 = mpz_cmp_ui(data.key, 0);
        keyzero = (tmp3634 == 0);
        bool_t keymatch;
        int64_t tmp3635 = mpz_cmp(data.key, i);
        keymatch = (tmp3635 == 0);
        while ((!keyzero || data.keyhash != 0) &&
                 (data.keyhash != ihash || !keymatch)){
                hashindex++;
                hashindex = hashindex & mask;
                data = htbl->data[hashindex];

        int64_t tmp3634 = mpz_cmp_ui(data.key, 0);
        keyzero = (tmp3634 == 0);

        int64_t tmp3635 = mpz_cmp(data.key, i);
        keymatch = (tmp3635 == 0);
                }
        return hashindex;
        }

Rijndael_funtype_4_t dupdate_Rijndael_funtype_4(Rijndael_funtype_4_t a, mpz_ptr_t i, uint32_t v){
        Rijndael_funtype_4_htbl_t htbl = a->htbl;
        if (htbl == NULL){//construct new htbl
                htbl = (Rijndael_funtype_4_htbl_t)safe_malloc(sizeof(struct Rijndael_funtype_4_htbl_s));
                htbl->size = HTBL_DEFAULT_SIZE; htbl->num_entries = 0;
                htbl->data = (Rijndael_funtype_4_hashentry_t *)safe_malloc(HTBL_DEFAULT_SIZE * sizeof(struct Rijndael_funtype_4_hashentry_s));
                for (uint32_t j = 0; j < HTBL_DEFAULT_SIZE; j++){mpz_init(htbl->data[j].key);mpz_set_ui(htbl->data[j].key, 0); htbl->data[j].keyhash = 0;
                }
                a->htbl = htbl;
        }
        uint32_t size = htbl->size;
        uint32_t num_entries = htbl->num_entries;
        Rijndael_funtype_4_hashentry_t * data = htbl->data;
        if (num_entries/3 >  size/5){//resize data
                uint32_t new_size = 2*size; uint32_t new_mask = new_size - 1;
                if (size >= HTBL_MAX_SIZE) out_of_memory();
                Rijndael_funtype_4_hashentry_t * new_data = (Rijndael_funtype_4_hashentry_t *)safe_malloc(new_size * sizeof(struct Rijndael_funtype_4_hashentry_s));
                for (uint32_t j = 0; j < new_size; j++){
                        new_data[j].key = 0;
                        new_data[j].keyhash = 0;}
                for (uint32_t j = 0; j < size; j++){//transfer entries
                        uint32_t keyhash = data[j].keyhash;
                        bool_t keyzero;
                        int64_t tmp3636 = mpz_cmp_ui(data[j].key, 0);keyzero = (tmp3636 == 0);
                        if (!keyzero || keyhash != 0){
                                uint32_t new_loc = keyhash ^ new_mask;
                                int64_t tmp3637 = mpz_cmp_ui(new_data[new_loc].key, 0);
                                keyzero = (tmp3637 == 0);
                                while (keyzero && new_data[new_loc].keyhash == 0){
                                        new_loc++;
                                        new_loc = new_loc ^ new_mask;

                                        int64_t tmp3638 = mpz_cmp_ui(new_data[new_loc].key, 0);
                                        keyzero = (tmp3638 == 0);
                                }
                                mpz_set(new_data[new_loc].key, data[j].key);
                                new_data[new_loc].keyhash = keyhash;
                                new_data[new_loc].value = (uint32_t)data[j].value;
                                }}
                htbl->size = new_size;
                htbl->num_entries = num_entries;
                htbl->data = new_data;
                safe_free(data);}
        uint32_t ihash = mpz_hash(i);
        uint32_t hashindex = lookup_Rijndael_funtype_4(htbl, i, ihash);
        Rijndael_funtype_4_hashentry_t hentry = htbl->data[hashindex];
        uint32_t hkeyhash = hentry.keyhash;
        bool_t hentrykeyzero;
        int64_t tmp3639 = mpz_cmp_ui(hentry.key, 0);hentrykeyzero = (tmp3639 == 0);

        if (hentrykeyzero && (hkeyhash == 0))
                {mpz_set(htbl->data[hashindex].key, i); htbl->data[hashindex].keyhash = ihash; htbl->data[hashindex].value = (uint32_t)v; htbl->num_entries++;}
            else {uint32_t tempvalue;tempvalue = (uint32_t)htbl->data[hashindex].value;htbl->data[hashindex].value = (uint32_t)v;};
        return a;

}

Rijndael_funtype_4_t update_Rijndael_funtype_4(Rijndael_funtype_4_t a, mpz_ptr_t i, uint32_t v){
        if (a->count == 1){
                return dupdate_Rijndael_funtype_4(a, i, v);
            } else {
                Rijndael_funtype_4_t x = copy_Rijndael_funtype_4(a);
                a->count--;
                return dupdate_Rijndael_funtype_4(x, i, v);
            }}

bool_t equal_Rijndael_funtype_4(Rijndael_funtype_4_t x, Rijndael_funtype_4_t y){
        return false;}


Rijndael_record_5_t new_Rijndael_record_5(void){
        Rijndael_record_5_t tmp = (Rijndael_record_5_t) safe_malloc(sizeof(struct Rijndael_record_5_s));
        tmp->count = 1;
        return tmp;}

void release_Rijndael_record_5(Rijndael_record_5_t x){
        x->count--;
        if (x->count <= 0){
         release_Rijndael_funtype_4(x->seq);
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_Rijndael_record_5_ptr(pointer_t x, type_actual_t T){
        release_Rijndael_record_5((Rijndael_record_5_t)x);
}

Rijndael_record_5_t copy_Rijndael_record_5(Rijndael_record_5_t x){
        Rijndael_record_5_t y = new_Rijndael_record_5();
        mpz_set(y->length, x->length);
        y->seq = x->seq;
        if (y->seq != NULL){y->seq->count++;};
        y->count = 1;
        return y;}

bool_t equal_Rijndael_record_5(Rijndael_record_5_t x, Rijndael_record_5_t y){
        bool_t tmp = true;
        tmp = tmp && x->length == y->length;
        tmp = tmp && equal_Rijndael_funtype_4(x->seq, y->seq);
        return tmp;}

bool_t equal_Rijndael_record_5_ptr(pointer_t x, pointer_t y, actual_Rijndael_record_5_t T){
        return equal_Rijndael_record_5((Rijndael_record_5_t)x, (Rijndael_record_5_t)y);
}

actual_Rijndael_record_5_t actual_Rijndael_record_5(){
        actual_Rijndael_record_5_t new = (actual_Rijndael_record_5_t)safe_malloc(sizeof(struct actual_Rijndael_record_5_s));
        new->equal_ptr = (equal_ptr_t)(*equal_Rijndael_record_5_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_Rijndael_record_5_ptr);
 

 
        return new;
 };

Rijndael_record_5_t update_Rijndael_record_5_length(Rijndael_record_5_t x, mpz_ptr_t v){
        Rijndael_record_5_t y;
        if (x->count == 1){y = x;}
        else {y = copy_Rijndael_record_5(x); x->count--;};
        mpz_set(y->length, v);
        return y;}

Rijndael_record_5_t update_Rijndael_record_5_seq(Rijndael_record_5_t x, Rijndael_funtype_4_t v){
        Rijndael_record_5_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->seq != NULL){release_Rijndael_funtype_4(x->seq);};}
        else {y = copy_Rijndael_record_5(x); x->count--; y->seq->count--;};
        y->seq = (Rijndael_funtype_4_t)v;
        return y;}



void release_Rijndael_funtype_6(Rijndael_funtype_6_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

Rijndael_funtype_6_t copy_Rijndael_funtype_6(Rijndael_funtype_6_t x){return x->ftbl->cptr(x);}

uint32_t lookup_Rijndael_funtype_6(Rijndael_funtype_6_htbl_t htbl, uint8_t i, uint32_t ihash){
        uint32_t mask = htbl->size - 1;
        uint32_t hashindex = ihash & mask; Rijndael_funtype_6_hashentry_t data = htbl->data[hashindex];
        bool_t keyzero;

        keyzero = (data.key == 0);
        bool_t keymatch;
        keymatch = (data.key == i);
        while ((!keyzero || data.keyhash != 0) &&
                 (data.keyhash != ihash || !keymatch)){
                hashindex++;
                hashindex = hashindex & mask;
                data = htbl->data[hashindex];

        keyzero = (data.key == 0);

        keymatch = (data.key == i);
                }
        return hashindex;
        }

Rijndael_funtype_6_t dupdate_Rijndael_funtype_6(Rijndael_funtype_6_t a, uint8_t i, uint8_t v){
        Rijndael_funtype_6_htbl_t htbl = a->htbl;
        if (htbl == NULL){//construct new htbl
                htbl = (Rijndael_funtype_6_htbl_t)safe_malloc(sizeof(struct Rijndael_funtype_6_htbl_s));
                htbl->size = HTBL_DEFAULT_SIZE; htbl->num_entries = 0;
                htbl->data = (Rijndael_funtype_6_hashentry_t *)safe_malloc(HTBL_DEFAULT_SIZE * sizeof(struct Rijndael_funtype_6_hashentry_s));
                for (uint32_t j = 0; j < HTBL_DEFAULT_SIZE; j++){htbl->data[j].key = (uint8_t)0; htbl->data[j].keyhash = 0;
                }
                a->htbl = htbl;
        }
        uint32_t size = htbl->size;
        uint32_t num_entries = htbl->num_entries;
        Rijndael_funtype_6_hashentry_t * data = htbl->data;
        if (num_entries/3 >  size/5){//resize data
                uint32_t new_size = 2*size; uint32_t new_mask = new_size - 1;
                if (size >= HTBL_MAX_SIZE) out_of_memory();
                Rijndael_funtype_6_hashentry_t * new_data = (Rijndael_funtype_6_hashentry_t *)safe_malloc(new_size * sizeof(struct Rijndael_funtype_6_hashentry_s));
                for (uint32_t j = 0; j < new_size; j++){
                        new_data[j].key = 0;
                        new_data[j].keyhash = 0;}
                for (uint32_t j = 0; j < size; j++){//transfer entries
                        uint32_t keyhash = data[j].keyhash;
                        bool_t keyzero;
                        keyzero = (data[j].key == 0);
                        if (!keyzero || keyhash != 0){
                                uint32_t new_loc = keyhash ^ new_mask;
                                keyzero = (new_data[new_loc].key == 0);
                                while (keyzero && new_data[new_loc].keyhash == 0){
                                        new_loc++;
                                        new_loc = new_loc ^ new_mask;

                                        keyzero = (new_data[new_loc].key == 0);
                                }
                                new_data[new_loc].key = (uint8_t)data[j].key;
                                new_data[new_loc].keyhash = keyhash;
                                new_data[new_loc].value = (uint8_t)data[j].value;
                                }}
                htbl->size = new_size;
                htbl->num_entries = num_entries;
                htbl->data = new_data;
                safe_free(data);}
        uint32_t ihash = uint32_hash(i);
        uint32_t hashindex = lookup_Rijndael_funtype_6(htbl, i, ihash);
        Rijndael_funtype_6_hashentry_t hentry = htbl->data[hashindex];
        uint32_t hkeyhash = hentry.keyhash;
        bool_t hentrykeyzero;
        hentrykeyzero = (hentry.key == 0);

        if (hentrykeyzero && (hkeyhash == 0))
                {htbl->data[hashindex].key = (uint8_t)i; htbl->data[hashindex].keyhash = ihash; htbl->data[hashindex].value = (uint8_t)v; htbl->num_entries++;}
            else {uint8_t tempvalue;tempvalue = (uint8_t)htbl->data[hashindex].value;htbl->data[hashindex].value = (uint8_t)v;};
        return a;

}

Rijndael_funtype_6_t update_Rijndael_funtype_6(Rijndael_funtype_6_t a, uint8_t i, uint8_t v){
        if (a->count == 1){
                return dupdate_Rijndael_funtype_6(a, i, v);
            } else {
                Rijndael_funtype_6_t x = copy_Rijndael_funtype_6(a);
                a->count--;
                return dupdate_Rijndael_funtype_6(x, i, v);
            }}

bool_t equal_Rijndael_funtype_6(Rijndael_funtype_6_t x, Rijndael_funtype_6_t y){
        return false;}


uint8_t f_Rijndael_closure_7(struct Rijndael_closure_7_s * closure, uint8_t bvar){
if (closure->htbl != NULL){
        Rijndael_funtype_6_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_Rijndael_funtype_6(htbl, bvar, hash);
        Rijndael_funtype_6_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            uint8_t result;
            result = (uint8_t)entry.value;
            return result;}
        

        return h_Rijndael_closure_7(bvar, closure->fvar_1, closure->fvar_2);};

return h_Rijndael_closure_7(bvar, closure->fvar_1, closure->fvar_2);}

uint8_t m_Rijndael_closure_7(struct Rijndael_closure_7_s * closure, uint8_t bvar){
        return h_Rijndael_closure_7(bvar, closure->fvar_1, closure->fvar_2);}

extern uint8_t h_Rijndael_closure_7(uint8_t ivar_11, Rijndael_array_2_t ivar_1, uint8_t ivar_2){
        uint8_t result;
        bool_t ivar_12;
        uint8_t ivar_14;
        ivar_14 = (uint8_t)0;
        ivar_12 = (ivar_11 == ivar_14);
        if (ivar_12){ 
             uint8_t ivar_50;
             uint8_t ivar_47;
             Rijndael_funtype_1_t ivar_24;
             Rijndael_funtype_1_t ivar_27;
             ivar_1->count++;
             ivar_27 = (Rijndael_funtype_1_t)Rijndael__get((Rijndael_array_2_t)ivar_1);
             //copying to Rijndael_funtype_1 from Rijndael_funtype_1;
             ivar_24 = (Rijndael_funtype_1_t)ivar_27;
             if (ivar_24 != NULL) ivar_24->count++;
             release_Rijndael_funtype_1(ivar_27);
             uint8_t ivar_29;
             ivar_29 = (uint8_t)0;
             uint8_t ivar_30;
             ivar_30 = (uint8_t)0;
             ivar_47 = (uint8_t)ivar_24->ftbl->mptr(ivar_24, ivar_29, ivar_30);
             ivar_24->ftbl->rptr(ivar_24);
             uint8_t ivar_48;
             uint8_t ivar_44;
             Rijndael_funtype_1_t ivar_36;
             Rijndael_funtype_1_t ivar_39;
             ivar_1->count++;
             ivar_39 = (Rijndael_funtype_1_t)Rijndael__get((Rijndael_array_2_t)ivar_1);
             //copying to Rijndael_funtype_1 from Rijndael_funtype_1;
             ivar_36 = (Rijndael_funtype_1_t)ivar_39;
             if (ivar_36 != NULL) ivar_36->count++;
             release_Rijndael_funtype_1(ivar_39);
             uint8_t ivar_41;
             ivar_41 = (uint8_t)1;
             uint8_t ivar_42;
             ivar_42 = (uint8_t)3;
             ivar_44 = (uint8_t)ivar_36->ftbl->mptr(ivar_36, ivar_41, ivar_42);
             ivar_36->ftbl->rptr(ivar_36);
             Rijndael_array_2_t ivar_45;
             ivar_45 = (Rijndael_array_2_t)Rijndael__Sbox();
             if (ivar_45 != NULL) ivar_45->count++;
             ivar_48 = (uint8_t)ivar_45->elems[ivar_44];
             release_Rijndael_array_2(ivar_45);
             ivar_50 = (uint8_t)integer_bv_ops__u8xor((uint8_t)ivar_47, (uint8_t)ivar_48);
             result = (uint8_t)integer_bv_ops__u8xor((uint8_t)ivar_50, (uint8_t)ivar_2);
} else {
        
             uint8_t ivar_87;
             Rijndael_funtype_1_t ivar_58;
             Rijndael_funtype_1_t ivar_61;
             ivar_1->count++;
             ivar_61 = (Rijndael_funtype_1_t)Rijndael__get((Rijndael_array_2_t)ivar_1);
             //copying to Rijndael_funtype_1 from Rijndael_funtype_1;
             ivar_58 = (Rijndael_funtype_1_t)ivar_61;
             if (ivar_58 != NULL) ivar_58->count++;
             release_Rijndael_funtype_1(ivar_61);
             uint8_t ivar_64;
             ivar_64 = (uint8_t)0;
             ivar_87 = (uint8_t)ivar_58->ftbl->mptr(ivar_58, ivar_11, ivar_64);
             ivar_58->ftbl->rptr(ivar_58);
             uint8_t ivar_88;
             uint8_t ivar_84;
             Rijndael_funtype_1_t ivar_76;
             Rijndael_funtype_1_t ivar_79;
             ivar_1->count++;
             ivar_79 = (Rijndael_funtype_1_t)Rijndael__get((Rijndael_array_2_t)ivar_1);
             //copying to Rijndael_funtype_1 from Rijndael_funtype_1;
             ivar_76 = (Rijndael_funtype_1_t)ivar_79;
             if (ivar_76 != NULL) ivar_76->count++;
             release_Rijndael_funtype_1(ivar_79);
             uint8_t ivar_81;
             uint8_t ivar_68;
             uint8_t ivar_71;
             ivar_71 = (uint8_t)1;
             ivar_68 = (uint8_t)(ivar_11 + ivar_71);
             uint8_t ivar_69;
             ivar_69 = (uint8_t)4;
             ivar_81 = (uint8_t)rem_uint32_uint32(ivar_68, ivar_69);
             uint8_t ivar_82;
             ivar_82 = (uint8_t)3;
             ivar_84 = (uint8_t)ivar_76->ftbl->mptr(ivar_76, ivar_81, ivar_82);
             ivar_76->ftbl->rptr(ivar_76);
             Rijndael_array_2_t ivar_85;
             ivar_85 = (Rijndael_array_2_t)Rijndael__Sbox();
             if (ivar_85 != NULL) ivar_85->count++;
             ivar_88 = (uint8_t)ivar_85->elems[ivar_84];
             release_Rijndael_array_2(ivar_85);
             result = (uint8_t)integer_bv_ops__u8xor((uint8_t)ivar_87, (uint8_t)ivar_88);
};

        return result;
}

Rijndael_closure_7_t new_Rijndael_closure_7(void){
        static struct Rijndael_funtype_6_ftbl_s ftbl = {.fptr = (uint8_t (*)(Rijndael_funtype_6_t, uint8_t))&f_Rijndael_closure_7, .mptr = (uint8_t (*)(Rijndael_funtype_6_t, uint8_t))&m_Rijndael_closure_7, .rptr =  (void (*)(Rijndael_funtype_6_t))&release_Rijndael_closure_7, .cptr = (Rijndael_funtype_6_t (*)(Rijndael_funtype_6_t))&copy_Rijndael_closure_7};
        Rijndael_closure_7_t tmp = (Rijndael_closure_7_t) safe_malloc(sizeof(struct Rijndael_closure_7_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_Rijndael_closure_7(Rijndael_funtype_6_t closure){
        Rijndael_closure_7_t x = (Rijndael_closure_7_t)closure;
        x->count--;
        if (x->count <= 0){
         release_Rijndael_array_2(x->fvar_1);
        //printf("\nFreeing\n");
        safe_free(x);}}

Rijndael_closure_7_t copy_Rijndael_closure_7(Rijndael_closure_7_t x){
        Rijndael_closure_7_t y = new_Rijndael_closure_7();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = (uint8_t)x->fvar_2;
        if (x->htbl != NULL){
            Rijndael_funtype_6_htbl_t new_htbl = (Rijndael_funtype_6_htbl_t) safe_malloc(sizeof(struct Rijndael_funtype_6_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            Rijndael_funtype_6_hashentry_t * new_data = (Rijndael_funtype_6_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct Rijndael_funtype_6_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct Rijndael_funtype_6_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


uint8_t f_Rijndael_closure_8(struct Rijndael_closure_8_s * closure, uint8_t bvar){
if (closure->htbl != NULL){
        Rijndael_funtype_6_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_Rijndael_funtype_6(htbl, bvar, hash);
        Rijndael_funtype_6_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            uint8_t result;
            result = (uint8_t)entry.value;
            return result;}
        

        return h_Rijndael_closure_8(bvar, closure->fvar_1, closure->fvar_2);};

return h_Rijndael_closure_8(bvar, closure->fvar_1, closure->fvar_2);}

uint8_t m_Rijndael_closure_8(struct Rijndael_closure_8_s * closure, uint8_t bvar){
        return h_Rijndael_closure_8(bvar, closure->fvar_1, closure->fvar_2);}

extern uint8_t h_Rijndael_closure_8(uint8_t ivar_92, Rijndael_array_2_t ivar_1, Rijndael_funtype_6_t ivar_8){
        uint8_t result;
        uint8_t ivar_112;
        Rijndael_funtype_1_t ivar_99;
        Rijndael_funtype_1_t ivar_102;
        ivar_1->count++;
        ivar_102 = (Rijndael_funtype_1_t)Rijndael__get((Rijndael_array_2_t)ivar_1);
        //copying to Rijndael_funtype_1 from Rijndael_funtype_1;
        ivar_99 = (Rijndael_funtype_1_t)ivar_102;
        if (ivar_99 != NULL) ivar_99->count++;
        release_Rijndael_funtype_1(ivar_102);
        uint8_t ivar_105;
        ivar_105 = (uint8_t)1;
        ivar_112 = (uint8_t)ivar_99->ftbl->mptr(ivar_99, ivar_92, ivar_105);
        ivar_99->ftbl->rptr(ivar_99);
        uint8_t ivar_113;
        ivar_113 = (uint8_t)ivar_8->ftbl->fptr(ivar_8, ivar_92);
        result = (uint8_t)integer_bv_ops__u8xor((uint8_t)ivar_112, (uint8_t)ivar_113);

        return result;
}

Rijndael_closure_8_t new_Rijndael_closure_8(void){
        static struct Rijndael_funtype_6_ftbl_s ftbl = {.fptr = (uint8_t (*)(Rijndael_funtype_6_t, uint8_t))&f_Rijndael_closure_8, .mptr = (uint8_t (*)(Rijndael_funtype_6_t, uint8_t))&m_Rijndael_closure_8, .rptr =  (void (*)(Rijndael_funtype_6_t))&release_Rijndael_closure_8, .cptr = (Rijndael_funtype_6_t (*)(Rijndael_funtype_6_t))&copy_Rijndael_closure_8};
        Rijndael_closure_8_t tmp = (Rijndael_closure_8_t) safe_malloc(sizeof(struct Rijndael_closure_8_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_Rijndael_closure_8(Rijndael_funtype_6_t closure){
        Rijndael_closure_8_t x = (Rijndael_closure_8_t)closure;
        x->count--;
        if (x->count <= 0){
         release_Rijndael_array_2(x->fvar_1);
         release_Rijndael_funtype_6(x->fvar_2);
        //printf("\nFreeing\n");
        safe_free(x);}}

Rijndael_closure_8_t copy_Rijndael_closure_8(Rijndael_closure_8_t x){
        Rijndael_closure_8_t y = new_Rijndael_closure_8();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        if (x->htbl != NULL){
            Rijndael_funtype_6_htbl_t new_htbl = (Rijndael_funtype_6_htbl_t) safe_malloc(sizeof(struct Rijndael_funtype_6_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            Rijndael_funtype_6_hashentry_t * new_data = (Rijndael_funtype_6_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct Rijndael_funtype_6_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct Rijndael_funtype_6_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


uint8_t f_Rijndael_closure_9(struct Rijndael_closure_9_s * closure, uint8_t bvar){
if (closure->htbl != NULL){
        Rijndael_funtype_6_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_Rijndael_funtype_6(htbl, bvar, hash);
        Rijndael_funtype_6_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            uint8_t result;
            result = (uint8_t)entry.value;
            return result;}
        

        return h_Rijndael_closure_9(bvar, closure->fvar_1, closure->fvar_2);};

return h_Rijndael_closure_9(bvar, closure->fvar_1, closure->fvar_2);}

uint8_t m_Rijndael_closure_9(struct Rijndael_closure_9_s * closure, uint8_t bvar){
        return h_Rijndael_closure_9(bvar, closure->fvar_1, closure->fvar_2);}

extern uint8_t h_Rijndael_closure_9(uint8_t ivar_117, Rijndael_array_2_t ivar_1, Rijndael_funtype_6_t ivar_89){
        uint8_t result;
        uint8_t ivar_137;
        Rijndael_funtype_1_t ivar_124;
        Rijndael_funtype_1_t ivar_127;
        ivar_1->count++;
        ivar_127 = (Rijndael_funtype_1_t)Rijndael__get((Rijndael_array_2_t)ivar_1);
        //copying to Rijndael_funtype_1 from Rijndael_funtype_1;
        ivar_124 = (Rijndael_funtype_1_t)ivar_127;
        if (ivar_124 != NULL) ivar_124->count++;
        release_Rijndael_funtype_1(ivar_127);
        uint8_t ivar_130;
        ivar_130 = (uint8_t)2;
        ivar_137 = (uint8_t)ivar_124->ftbl->mptr(ivar_124, ivar_117, ivar_130);
        ivar_124->ftbl->rptr(ivar_124);
        uint8_t ivar_138;
        ivar_138 = (uint8_t)ivar_89->ftbl->fptr(ivar_89, ivar_117);
        result = (uint8_t)integer_bv_ops__u8xor((uint8_t)ivar_137, (uint8_t)ivar_138);

        return result;
}

Rijndael_closure_9_t new_Rijndael_closure_9(void){
        static struct Rijndael_funtype_6_ftbl_s ftbl = {.fptr = (uint8_t (*)(Rijndael_funtype_6_t, uint8_t))&f_Rijndael_closure_9, .mptr = (uint8_t (*)(Rijndael_funtype_6_t, uint8_t))&m_Rijndael_closure_9, .rptr =  (void (*)(Rijndael_funtype_6_t))&release_Rijndael_closure_9, .cptr = (Rijndael_funtype_6_t (*)(Rijndael_funtype_6_t))&copy_Rijndael_closure_9};
        Rijndael_closure_9_t tmp = (Rijndael_closure_9_t) safe_malloc(sizeof(struct Rijndael_closure_9_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_Rijndael_closure_9(Rijndael_funtype_6_t closure){
        Rijndael_closure_9_t x = (Rijndael_closure_9_t)closure;
        x->count--;
        if (x->count <= 0){
         release_Rijndael_array_2(x->fvar_1);
         release_Rijndael_funtype_6(x->fvar_2);
        //printf("\nFreeing\n");
        safe_free(x);}}

Rijndael_closure_9_t copy_Rijndael_closure_9(Rijndael_closure_9_t x){
        Rijndael_closure_9_t y = new_Rijndael_closure_9();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        if (x->htbl != NULL){
            Rijndael_funtype_6_htbl_t new_htbl = (Rijndael_funtype_6_htbl_t) safe_malloc(sizeof(struct Rijndael_funtype_6_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            Rijndael_funtype_6_hashentry_t * new_data = (Rijndael_funtype_6_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct Rijndael_funtype_6_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct Rijndael_funtype_6_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


uint8_t f_Rijndael_closure_10(struct Rijndael_closure_10_s * closure, uint8_t bvar){
if (closure->htbl != NULL){
        Rijndael_funtype_6_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_Rijndael_funtype_6(htbl, bvar, hash);
        Rijndael_funtype_6_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            uint8_t result;
            result = (uint8_t)entry.value;
            return result;}
        

        return h_Rijndael_closure_10(bvar, closure->fvar_1, closure->fvar_2);};

return h_Rijndael_closure_10(bvar, closure->fvar_1, closure->fvar_2);}

uint8_t m_Rijndael_closure_10(struct Rijndael_closure_10_s * closure, uint8_t bvar){
        return h_Rijndael_closure_10(bvar, closure->fvar_1, closure->fvar_2);}

extern uint8_t h_Rijndael_closure_10(uint8_t ivar_142, Rijndael_array_2_t ivar_1, Rijndael_funtype_6_t ivar_114){
        uint8_t result;
        uint8_t ivar_162;
        Rijndael_funtype_1_t ivar_149;
        Rijndael_funtype_1_t ivar_152;
        ivar_1->count++;
        ivar_152 = (Rijndael_funtype_1_t)Rijndael__get((Rijndael_array_2_t)ivar_1);
        //copying to Rijndael_funtype_1 from Rijndael_funtype_1;
        ivar_149 = (Rijndael_funtype_1_t)ivar_152;
        if (ivar_149 != NULL) ivar_149->count++;
        release_Rijndael_funtype_1(ivar_152);
        uint8_t ivar_155;
        ivar_155 = (uint8_t)3;
        ivar_162 = (uint8_t)ivar_149->ftbl->mptr(ivar_149, ivar_142, ivar_155);
        ivar_149->ftbl->rptr(ivar_149);
        uint8_t ivar_163;
        ivar_163 = (uint8_t)ivar_114->ftbl->fptr(ivar_114, ivar_142);
        result = (uint8_t)integer_bv_ops__u8xor((uint8_t)ivar_162, (uint8_t)ivar_163);

        return result;
}

Rijndael_closure_10_t new_Rijndael_closure_10(void){
        static struct Rijndael_funtype_6_ftbl_s ftbl = {.fptr = (uint8_t (*)(Rijndael_funtype_6_t, uint8_t))&f_Rijndael_closure_10, .mptr = (uint8_t (*)(Rijndael_funtype_6_t, uint8_t))&m_Rijndael_closure_10, .rptr =  (void (*)(Rijndael_funtype_6_t))&release_Rijndael_closure_10, .cptr = (Rijndael_funtype_6_t (*)(Rijndael_funtype_6_t))&copy_Rijndael_closure_10};
        Rijndael_closure_10_t tmp = (Rijndael_closure_10_t) safe_malloc(sizeof(struct Rijndael_closure_10_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_Rijndael_closure_10(Rijndael_funtype_6_t closure){
        Rijndael_closure_10_t x = (Rijndael_closure_10_t)closure;
        x->count--;
        if (x->count <= 0){
         release_Rijndael_array_2(x->fvar_1);
         release_Rijndael_funtype_6(x->fvar_2);
        //printf("\nFreeing\n");
        safe_free(x);}}

Rijndael_closure_10_t copy_Rijndael_closure_10(Rijndael_closure_10_t x){
        Rijndael_closure_10_t y = new_Rijndael_closure_10();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        if (x->htbl != NULL){
            Rijndael_funtype_6_htbl_t new_htbl = (Rijndael_funtype_6_htbl_t) safe_malloc(sizeof(struct Rijndael_funtype_6_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            Rijndael_funtype_6_hashentry_t * new_data = (Rijndael_funtype_6_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct Rijndael_funtype_6_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct Rijndael_funtype_6_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


Rijndael_array_11_t new_Rijndael_array_11(uint32_t size){
        Rijndael_array_11_t tmp = (Rijndael_array_11_t) safe_malloc(sizeof(struct Rijndael_array_11_s) + (size * sizeof(Rijndael_array_2_t)));
        tmp->count = 1;
        tmp->size = size;
        tmp->max = size;
        return tmp;}

void release_Rijndael_array_11(Rijndael_array_11_t x){
        x->count--;
        if (x->count <= 0){
                for (int i = 0; i < x->size; i++){release_Rijndael_array_2(x->elems[i]);};
        //printf("\nFreeing\n");
        safe_free(x);}
}

void release_Rijndael_array_11_ptr(pointer_t x, type_actual_t T){
        release_Rijndael_array_11((Rijndael_array_11_t)x);
}

Rijndael_array_11_t copy_Rijndael_array_11(Rijndael_array_11_t x){
        Rijndael_array_11_t tmp = new_Rijndael_array_11(x->size);
        tmp->count = 1;
        for (uint32_t i = 0; i < x->size; i++){tmp->elems[i] = x->elems[i];
                x->elems[i]->count++;};
         return tmp;}

bool_t equal_Rijndael_array_11(Rijndael_array_11_t x, Rijndael_array_11_t y){
        bool_t tmp = true;
        uint32_t i = 0;
        while (i < x->size && tmp){tmp = equal_Rijndael_array_2(x->elems[i], y->elems[i]);};
        return tmp;}

bool_t equal_Rijndael_array_11_ptr(pointer_t x, pointer_t y, type_actual_t T){
        return equal_Rijndael_array_11((Rijndael_array_11_t)x, (Rijndael_array_11_t)y);
}

actual_Rijndael_array_11_t actual_Rijndael_array_11(){
        actual_Rijndael_array_11_t new = (actual_Rijndael_array_11_t)safe_malloc(sizeof(struct actual_Rijndael_array_11_s));
        new->equal_ptr = (equal_ptr_t)(*equal_Rijndael_array_11_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_Rijndael_array_11_ptr);
 

 
        return new;
 };

Rijndael_array_11_t update_Rijndael_array_11(Rijndael_array_11_t x, uint32_t i, Rijndael_array_2_t v){
         Rijndael_array_11_t y;
         if (x->count == 1){y = x;}
                 else {y = copy_Rijndael_array_11(x);
                      x->count--;};
        Rijndael_array_2_t * yelems = y->elems;
        if (v != NULL){v->count++;}
        if (yelems[i] != NULL){release_Rijndael_array_2(yelems[i]);};
         yelems[i] = v;
         return y;}

Rijndael_array_11_t upgrade_Rijndael_array_11(Rijndael_array_11_t x, uint32_t i, Rijndael_array_2_t v){
         Rijndael_array_11_t y;
         if (x->count == 1 && i < x->max){y = x;}
                 else if (i > x->max){uint32_t newmax = x->max <= UINT32_MAX/2 ? 2*x->max: UINT32_MAX;
                y = safe_malloc(sizeof(struct Rijndael_array_11_s) + (newmax * sizeof(Rijndael_array_2_t)));
                y->count = 1;
                y->size = i+1;
                y->max = newmax;
                release_Rijndael_array_11(x);} else {y = copy_Rijndael_array_11(x);
                      x->count--;};
        Rijndael_array_2_t * yelems = y->elems;
        if (v != NULL){v->count++;}
        if (yelems[i] != NULL){release_Rijndael_array_2(yelems[i]);};
         yelems[i] = v;
         return y;}




Rijndael_record_12_t new_Rijndael_record_12(void){
        Rijndael_record_12_t tmp = (Rijndael_record_12_t) safe_malloc(sizeof(struct Rijndael_record_12_s));
        tmp->count = 1;
        return tmp;}

void release_Rijndael_record_12(Rijndael_record_12_t x){
        x->count--;
        if (x->count <= 0){
         release_Rijndael_array_2(x->seq);
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_Rijndael_record_12_ptr(pointer_t x, type_actual_t T){
        release_Rijndael_record_12((Rijndael_record_12_t)x);
}

Rijndael_record_12_t copy_Rijndael_record_12(Rijndael_record_12_t x){
        Rijndael_record_12_t y = new_Rijndael_record_12();
        y->length = (uint8_t)x->length;
        y->seq = x->seq;
        if (y->seq != NULL){y->seq->count++;};
        y->count = 1;
        return y;}

bool_t equal_Rijndael_record_12(Rijndael_record_12_t x, Rijndael_record_12_t y){
        bool_t tmp = true;
        tmp = tmp && x->length == y->length;
        tmp = tmp && equal_Rijndael_array_2(x->seq, y->seq);
        return tmp;}

bool_t equal_Rijndael_record_12_ptr(pointer_t x, pointer_t y, actual_Rijndael_record_12_t T){
        return equal_Rijndael_record_12((Rijndael_record_12_t)x, (Rijndael_record_12_t)y);
}

actual_Rijndael_record_12_t actual_Rijndael_record_12(){
        actual_Rijndael_record_12_t new = (actual_Rijndael_record_12_t)safe_malloc(sizeof(struct actual_Rijndael_record_12_s));
        new->equal_ptr = (equal_ptr_t)(*equal_Rijndael_record_12_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_Rijndael_record_12_ptr);
 

 
        return new;
 };

Rijndael_record_12_t update_Rijndael_record_12_length(Rijndael_record_12_t x, uint8_t v){
        Rijndael_record_12_t y;
        if (x->count == 1){y = x;}
        else {y = copy_Rijndael_record_12(x); x->count--;};
        y->length = (uint8_t)v;
        return y;}

Rijndael_record_12_t update_Rijndael_record_12_seq(Rijndael_record_12_t x, Rijndael_array_2_t v){
        Rijndael_record_12_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->seq != NULL){release_Rijndael_array_2(x->seq);};}
        else {y = copy_Rijndael_record_12(x); x->count--; y->seq->count--;};
        y->seq = (Rijndael_array_2_t)v;
        return y;}



extern Rijndael_funtype_1_t Rijndael__get(Rijndael_array_2_t ivar_1){
        Rijndael_funtype_1_t  result;
        Rijndael_closure_3_t cl3632;
        cl3632 = new_Rijndael_closure_3();
        cl3632->fvar_1 = (Rijndael_array_2_t)ivar_1;
        if (cl3632->fvar_1 != NULL) cl3632->fvar_1->count++;
        release_Rijndael_array_2(ivar_1);
        result = (Rijndael_funtype_1_t)cl3632;

        return result;
}

extern bytestrings__bytestring_t Rijndael__SboxHex(void){
        bytestrings__bytestring_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    Rijndael_record_5_t ivar_8;
        uint32_t len3641 = 512;
        uint32_t characters3642[512] = {54, 51, 55, 99, 55, 55, 55, 98, 102, 50, 54, 98, 54, 102, 99, 53, 51, 48, 48, 49, 54, 55, 50, 98, 102, 101, 100, 55, 97, 98, 55, 54, 99, 97, 56, 50, 99, 57, 55, 100, 102, 97, 53, 57, 52, 55, 102, 48, 97, 100, 100, 52, 97, 50, 97, 102, 57, 99, 97, 52, 55, 50, 99, 48, 98, 55, 102, 100, 57, 51, 50, 54, 51, 54, 51, 102, 102, 55, 99, 99, 51, 52, 97, 53, 101, 53, 102, 49, 55, 49, 100, 56, 51, 49, 49, 53, 48, 52, 99, 55, 50, 51, 99, 51, 49, 56, 57, 54, 48, 53, 57, 97, 48, 55, 49, 50, 56, 48, 101, 50, 101, 98, 50, 55, 98, 50, 55, 53, 48, 57, 56, 51, 50, 99, 49, 97, 49, 98, 54, 101, 53, 97, 97, 48, 53, 50, 51, 98, 100, 54, 98, 51, 50, 57, 101, 51, 50, 102, 56, 52, 53, 51, 100, 49, 48, 48, 101, 100, 50, 48, 102, 99, 98, 49, 53, 98, 54, 97, 99, 98, 98, 101, 51, 57, 52, 97, 52, 99, 53, 56, 99, 102, 100, 48, 101, 102, 97, 97, 102, 98, 52, 51, 52, 100, 51, 51, 56, 53, 52, 53, 102, 57, 48, 50, 55, 102, 53, 48, 51, 99, 57, 102, 97, 56, 53, 49, 97, 51, 52, 48, 56, 102, 57, 50, 57, 100, 51, 56, 102, 53, 98, 99, 98, 54, 100, 97, 50, 49, 49, 48, 102, 102, 102, 51, 100, 50, 99, 100, 48, 99, 49, 51, 101, 99, 53, 102, 57, 55, 52, 52, 49, 55, 99, 52, 97, 55, 55, 101, 51, 100, 54, 52, 53, 100, 49, 57, 55, 51, 54, 48, 56, 49, 52, 102, 100, 99, 50, 50, 50, 97, 57, 48, 56, 56, 52, 54, 101, 101, 98, 56, 49, 52, 100, 101, 53, 101, 48, 98, 100, 98, 101, 48, 51, 50, 51, 97, 48, 97, 52, 57, 48, 54, 50, 52, 53, 99, 99, 50, 100, 51, 97, 99, 54, 50, 57, 49, 57, 53, 101, 52, 55, 57, 101, 55, 99, 56, 51, 55, 54, 100, 56, 100, 100, 53, 52, 101, 97, 57, 54, 99, 53, 54, 102, 52, 101, 97, 54, 53, 55, 97, 97, 101, 48, 56, 98, 97, 55, 56, 50, 53, 50, 101, 49, 99, 97, 54, 98, 52, 99, 54, 101, 56, 100, 100, 55, 52, 49, 102, 52, 98, 98, 100, 56, 98, 56, 97, 55, 48, 51, 101, 98, 53, 54, 54, 52, 56, 48, 51, 102, 54, 48, 101, 54, 49, 51, 53, 53, 55, 98, 57, 56, 54, 99, 49, 49, 100, 57, 101, 101, 49, 102, 56, 57, 56, 49, 49, 54, 57, 100, 57, 56, 101, 57, 52, 57, 98, 49, 101, 56, 55, 101, 57, 99, 101, 53, 53, 50, 56, 100, 102, 56, 99, 97, 49, 56, 57, 48, 100, 98, 102, 101, 54, 52, 50, 54, 56, 52, 49, 57, 57, 50, 100, 48, 102, 98, 48, 53, 52, 98, 98, 49, 54};
        stringliteral_t string3640 = mk_string(512, characters3642);
        ivar_8 = (Rijndael_record_5_t)strings__make_string(len3641, string3640);
        strings__string_t ivar_6;
        //copying to strings__string from Rijndael_record_5;
        ivar_6 = (strings__string_t)ivar_8;
        if (ivar_6 != NULL) ivar_6->count++;
        release_Rijndael_record_5(ivar_8);
        bytestrings__bytestring_t ivar_5;
        ivar_5 = (bytestrings__bytestring_t)bytestrings__mk_bytestring((strings__string_t)ivar_6);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        result = (bytestrings__bytestring_t)ivar_5;
        if (result != NULL) result->count++;
        release_bytestrings__bytestring(ivar_5);

        defined = true;};
        return result;
}

extern Rijndael_array_2_t Rijndael__Sbox(void){
        Rijndael_array_2_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    /* X */ bytestrings__bytestring_t ivar_1;
        bytestrings__bytestring_t ivar_4;
        ivar_4 = (bytestrings__bytestring_t)Rijndael__SboxHex();
        if (ivar_4 != NULL) ivar_4->count++;
        bytestrings__bytestring_t ivar_3;
        ivar_3 = (bytestrings__bytestring_t)hex__hex2bytestring((bytestrings__bytestring_t)ivar_4);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        ivar_1 = (bytestrings__bytestring_t)ivar_3;
        if (ivar_1 != NULL) ivar_1->count++;
        release_bytestrings__bytestring(ivar_3);
        result = (Rijndael_array_2_t)ivar_1->seq;
        result->count++;
        release_bytestrings__bytestring(ivar_1);

        defined = true;};
        return result;
}

extern Rijndael_array_2_t Rijndael__byteSubst(Rijndael_array_2_t ivar_1){
        Rijndael_array_2_t  result;
        result = new_Rijndael_array_2(16);
        uint8_t ivar_2;
        for (uint32_t index3643 = 0; index3643 < 16; index3643++){
             ivar_2 = (uint8_t)index3643;
             uint8_t ivar_9;
             ivar_9 = (uint8_t)ivar_1->elems[ivar_2];
             Rijndael_array_2_t ivar_10;
             ivar_10 = (Rijndael_array_2_t)Rijndael__Sbox();
             if (ivar_10 != NULL) ivar_10->count++;
             result->elems[index3643] = (uint8_t)ivar_10->elems[ivar_9];
             release_Rijndael_array_2(ivar_10);
        };
        release_Rijndael_array_2(ivar_1);

        return result;
}

extern Rijndael_array_2_t Rijndael__shiftRow(Rijndael_array_2_t ivar_1){
        Rijndael_array_2_t  result;
        result = new_Rijndael_array_2(16);
        uint8_t ivar_2;
        for (uint32_t index3644 = 0; index3644 < 16; index3644++){
             ivar_2 = (uint8_t)index3644;
             /* i */ uint8_t ivar_3;
             uint8_t ivar_5;
             ivar_5 = (uint8_t)4;
             ivar_3 = (uint8_t)rem_uint32_uint32(ivar_2, ivar_5);
             /* j */ mpz_ptr_t ivar_7;
             uint8_t ivar_9;
             ivar_9 = (uint8_t)4;
             mpz_mk_set_ui(ivar_7, div_uint32_uint32(ivar_2, ivar_9));
             /* l */ uint8_t ivar_11;
             mpz_ptr_t ivar_12;
             mpz_ptr_t ivar_14;
             //copying to mpz from mpz;
             mpz_mk_set(ivar_14, ivar_7);
             mpz_clear(ivar_7);
             mpz_mk_set_ui(ivar_12, (uint64_t)ivar_3);
             mpz_add(ivar_12, ivar_12, ivar_14);
             uint8_t ivar_13;
             ivar_13 = (uint8_t)4;
             ivar_11 = (uint8_t)rem_mpz_uint32(ivar_12, ivar_13);
             Rijndael_funtype_1_t ivar_22;
             Rijndael_funtype_1_t ivar_25;
             ivar_1->count++;
             ivar_25 = (Rijndael_funtype_1_t)Rijndael__get((Rijndael_array_2_t)ivar_1);
             //copying to Rijndael_funtype_1 from Rijndael_funtype_1;
             ivar_22 = (Rijndael_funtype_1_t)ivar_25;
             if (ivar_22 != NULL) ivar_22->count++;
             release_Rijndael_funtype_1(ivar_25);
             result->elems[index3644] = (uint8_t)ivar_22->ftbl->mptr(ivar_22, ivar_3, ivar_11);
             ivar_22->ftbl->rptr(ivar_22);
        };
        release_Rijndael_array_2(ivar_1);

        return result;
}

extern uint8_t Rijndael__T2(uint8_t ivar_1){
        uint8_t  result;
        bool_t ivar_2;
        uint8_t ivar_4;
        ivar_4 = (uint8_t)128;
        ivar_2 = (ivar_1 < ivar_4);
        if (ivar_2){ 
             uint8_t ivar_6;
             ivar_6 = (uint8_t)2;
             result = (uint8_t)((uint64_t)ivar_6 * (uint64_t)ivar_1);
} else {
        
             uint8_t ivar_17;
             ivar_17 = (uint8_t)integertypes__u8plus((uint8_t)ivar_1, (uint8_t)ivar_1);
             uint8_t ivar_18;
             ivar_18 = (uint8_t)27;
             result = (uint8_t)integer_bv_ops__u8xor((uint8_t)ivar_17, (uint8_t)ivar_18);
};

        return result;
}

extern uint8_t Rijndael__T3(uint8_t ivar_1){
        uint8_t  result;
        uint8_t ivar_8;
        ivar_8 = (uint8_t)Rijndael__T2((uint8_t)ivar_1);
        result = (uint8_t)integer_bv_ops__u8xor((uint8_t)ivar_8, (uint8_t)ivar_1);

        return result;
}

extern Rijndael_array_2_t Rijndael__mixColumn(Rijndael_array_2_t ivar_1){
        Rijndael_array_2_t  result;
        result = new_Rijndael_array_2(16);
        uint8_t ivar_2;
        for (uint32_t index3645 = 0; index3645 < 16; index3645++){
             ivar_2 = (uint8_t)index3645;
             /* i */ uint8_t ivar_3;
             uint8_t ivar_5;
             ivar_5 = (uint8_t)4;
             ivar_3 = (uint8_t)rem_uint32_uint32(ivar_2, ivar_5);
             /* j */ mpz_ptr_t ivar_7;
             uint8_t ivar_9;
             ivar_9 = (uint8_t)4;
             mpz_mk_set_ui(ivar_7, div_uint32_uint32(ivar_2, ivar_9));
             bool_t ivar_11;
             uint8_t ivar_13;
             ivar_13 = (uint8_t)0;
             ivar_11 = (ivar_3 == ivar_13);
             if (ivar_11){  
           uint8_t ivar_78;
           uint8_t ivar_64;
           uint8_t ivar_50;
           uint8_t ivar_34;
           Rijndael_funtype_1_t ivar_26;
           Rijndael_funtype_1_t ivar_29;
           ivar_1->count++;
           ivar_29 = (Rijndael_funtype_1_t)Rijndael__get((Rijndael_array_2_t)ivar_1);
           //copying to Rijndael_funtype_1 from Rijndael_funtype_1;
           ivar_26 = (Rijndael_funtype_1_t)ivar_29;
           if (ivar_26 != NULL) ivar_26->count++;
           release_Rijndael_funtype_1(ivar_29);
           uint8_t ivar_31;
           ivar_31 = (uint8_t)0;
           uint8_t ivar_32;
           //copying to uint8 from mpz;
           ivar_32 = (uint8_t)mpz_get_ui(ivar_7);
           ivar_34 = (uint8_t)ivar_26->ftbl->mptr(ivar_26, ivar_31, ivar_32);
           ivar_26->ftbl->rptr(ivar_26);
           ivar_50 = (uint8_t)Rijndael__T2((uint8_t)ivar_34);
           uint8_t ivar_51;
           uint8_t ivar_48;
           Rijndael_funtype_1_t ivar_40;
           Rijndael_funtype_1_t ivar_43;
           ivar_1->count++;
           ivar_43 = (Rijndael_funtype_1_t)Rijndael__get((Rijndael_array_2_t)ivar_1);
           //copying to Rijndael_funtype_1 from Rijndael_funtype_1;
           ivar_40 = (Rijndael_funtype_1_t)ivar_43;
           if (ivar_40 != NULL) ivar_40->count++;
           release_Rijndael_funtype_1(ivar_43);
           uint8_t ivar_45;
           ivar_45 = (uint8_t)1;
           uint8_t ivar_46;
           //copying to uint8 from mpz;
           ivar_46 = (uint8_t)mpz_get_ui(ivar_7);
           ivar_48 = (uint8_t)ivar_40->ftbl->mptr(ivar_40, ivar_45, ivar_46);
           ivar_40->ftbl->rptr(ivar_40);
           ivar_51 = (uint8_t)Rijndael__T3((uint8_t)ivar_48);
           ivar_64 = (uint8_t)integer_bv_ops__u8xor((uint8_t)ivar_50, (uint8_t)ivar_51);
           uint8_t ivar_65;
           Rijndael_funtype_1_t ivar_56;
           Rijndael_funtype_1_t ivar_59;
           ivar_1->count++;
           ivar_59 = (Rijndael_funtype_1_t)Rijndael__get((Rijndael_array_2_t)ivar_1);
           //copying to Rijndael_funtype_1 from Rijndael_funtype_1;
           ivar_56 = (Rijndael_funtype_1_t)ivar_59;
           if (ivar_56 != NULL) ivar_56->count++;
           release_Rijndael_funtype_1(ivar_59);
           uint8_t ivar_61;
           ivar_61 = (uint8_t)2;
           uint8_t ivar_62;
           //copying to uint8 from mpz;
           ivar_62 = (uint8_t)mpz_get_ui(ivar_7);
           ivar_65 = (uint8_t)ivar_56->ftbl->mptr(ivar_56, ivar_61, ivar_62);
           ivar_56->ftbl->rptr(ivar_56);
           ivar_78 = (uint8_t)integer_bv_ops__u8xor((uint8_t)ivar_64, (uint8_t)ivar_65);
           uint8_t ivar_79;
           Rijndael_funtype_1_t ivar_70;
           Rijndael_funtype_1_t ivar_73;
           ivar_1->count++;
           ivar_73 = (Rijndael_funtype_1_t)Rijndael__get((Rijndael_array_2_t)ivar_1);
           //copying to Rijndael_funtype_1 from Rijndael_funtype_1;
           ivar_70 = (Rijndael_funtype_1_t)ivar_73;
           if (ivar_70 != NULL) ivar_70->count++;
           release_Rijndael_funtype_1(ivar_73);
           uint8_t ivar_75;
           ivar_75 = (uint8_t)3;
           uint8_t ivar_76;
           //copying to uint8 from mpz;
           ivar_76 = (uint8_t)mpz_get_ui(ivar_7);
           mpz_clear(ivar_7);
           ivar_79 = (uint8_t)ivar_70->ftbl->mptr(ivar_70, ivar_75, ivar_76);
           ivar_70->ftbl->rptr(ivar_70);
           result->elems[index3645] = (uint8_t)integer_bv_ops__u8xor((uint8_t)ivar_78, (uint8_t)ivar_79);
} else {
             
           bool_t ivar_80;
           uint8_t ivar_82;
           ivar_82 = (uint8_t)1;
           ivar_80 = (ivar_3 == ivar_82);
           if (ivar_80){   
           uint8_t ivar_147;
           uint8_t ivar_133;
           uint8_t ivar_116;
           Rijndael_funtype_1_t ivar_94;
           Rijndael_funtype_1_t ivar_97;
           ivar_1->count++;
           ivar_97 = (Rijndael_funtype_1_t)Rijndael__get((Rijndael_array_2_t)ivar_1);
           //copying to Rijndael_funtype_1 from Rijndael_funtype_1;
           ivar_94 = (Rijndael_funtype_1_t)ivar_97;
           if (ivar_94 != NULL) ivar_94->count++;
           release_Rijndael_funtype_1(ivar_97);
           uint8_t ivar_99;
           ivar_99 = (uint8_t)0;
           uint8_t ivar_100;
           //copying to uint8 from mpz;
           ivar_100 = (uint8_t)mpz_get_ui(ivar_7);
           ivar_116 = (uint8_t)ivar_94->ftbl->mptr(ivar_94, ivar_99, ivar_100);
           ivar_94->ftbl->rptr(ivar_94);
           uint8_t ivar_117;
           uint8_t ivar_114;
           Rijndael_funtype_1_t ivar_106;
           Rijndael_funtype_1_t ivar_109;
           ivar_1->count++;
           ivar_109 = (Rijndael_funtype_1_t)Rijndael__get((Rijndael_array_2_t)ivar_1);
           //copying to Rijndael_funtype_1 from Rijndael_funtype_1;
           ivar_106 = (Rijndael_funtype_1_t)ivar_109;
           if (ivar_106 != NULL) ivar_106->count++;
           release_Rijndael_funtype_1(ivar_109);
           uint8_t ivar_111;
           ivar_111 = (uint8_t)1;
           uint8_t ivar_112;
           //copying to uint8 from mpz;
           ivar_112 = (uint8_t)mpz_get_ui(ivar_7);
           ivar_114 = (uint8_t)ivar_106->ftbl->mptr(ivar_106, ivar_111, ivar_112);
           ivar_106->ftbl->rptr(ivar_106);
           ivar_117 = (uint8_t)Rijndael__T2((uint8_t)ivar_114);
           ivar_133 = (uint8_t)integer_bv_ops__u8xor((uint8_t)ivar_116, (uint8_t)ivar_117);
           uint8_t ivar_134;
           uint8_t ivar_131;
           Rijndael_funtype_1_t ivar_123;
           Rijndael_funtype_1_t ivar_126;
           ivar_1->count++;
           ivar_126 = (Rijndael_funtype_1_t)Rijndael__get((Rijndael_array_2_t)ivar_1);
           //copying to Rijndael_funtype_1 from Rijndael_funtype_1;
           ivar_123 = (Rijndael_funtype_1_t)ivar_126;
           if (ivar_123 != NULL) ivar_123->count++;
           release_Rijndael_funtype_1(ivar_126);
           uint8_t ivar_128;
           ivar_128 = (uint8_t)2;
           uint8_t ivar_129;
           //copying to uint8 from mpz;
           ivar_129 = (uint8_t)mpz_get_ui(ivar_7);
           ivar_131 = (uint8_t)ivar_123->ftbl->mptr(ivar_123, ivar_128, ivar_129);
           ivar_123->ftbl->rptr(ivar_123);
           ivar_134 = (uint8_t)Rijndael__T3((uint8_t)ivar_131);
           ivar_147 = (uint8_t)integer_bv_ops__u8xor((uint8_t)ivar_133, (uint8_t)ivar_134);
           uint8_t ivar_148;
           Rijndael_funtype_1_t ivar_139;
           Rijndael_funtype_1_t ivar_142;
           ivar_1->count++;
           ivar_142 = (Rijndael_funtype_1_t)Rijndael__get((Rijndael_array_2_t)ivar_1);
           //copying to Rijndael_funtype_1 from Rijndael_funtype_1;
           ivar_139 = (Rijndael_funtype_1_t)ivar_142;
           if (ivar_139 != NULL) ivar_139->count++;
           release_Rijndael_funtype_1(ivar_142);
           uint8_t ivar_144;
           ivar_144 = (uint8_t)3;
           uint8_t ivar_145;
           //copying to uint8 from mpz;
           ivar_145 = (uint8_t)mpz_get_ui(ivar_7);
           mpz_clear(ivar_7);
           ivar_148 = (uint8_t)ivar_139->ftbl->mptr(ivar_139, ivar_144, ivar_145);
           ivar_139->ftbl->rptr(ivar_139);
           result->elems[index3645] = (uint8_t)integer_bv_ops__u8xor((uint8_t)ivar_147, (uint8_t)ivar_148);
} else {
           
           bool_t ivar_149;
           uint8_t ivar_151;
           ivar_151 = (uint8_t)2;
           ivar_149 = (ivar_3 == ivar_151);
           if (ivar_149){    
            uint8_t ivar_216;
            uint8_t ivar_199;
            uint8_t ivar_182;
            Rijndael_funtype_1_t ivar_163;
            Rijndael_funtype_1_t ivar_166;
            ivar_1->count++;
            ivar_166 = (Rijndael_funtype_1_t)Rijndael__get((Rijndael_array_2_t)ivar_1);
            //copying to Rijndael_funtype_1 from Rijndael_funtype_1;
            ivar_163 = (Rijndael_funtype_1_t)ivar_166;
            if (ivar_163 != NULL) ivar_163->count++;
            release_Rijndael_funtype_1(ivar_166);
            uint8_t ivar_168;
            ivar_168 = (uint8_t)0;
            uint8_t ivar_169;
            //copying to uint8 from mpz;
            ivar_169 = (uint8_t)mpz_get_ui(ivar_7);
            ivar_182 = (uint8_t)ivar_163->ftbl->mptr(ivar_163, ivar_168, ivar_169);
            ivar_163->ftbl->rptr(ivar_163);
            uint8_t ivar_183;
            Rijndael_funtype_1_t ivar_174;
            Rijndael_funtype_1_t ivar_177;
            ivar_1->count++;
            ivar_177 = (Rijndael_funtype_1_t)Rijndael__get((Rijndael_array_2_t)ivar_1);
            //copying to Rijndael_funtype_1 from Rijndael_funtype_1;
            ivar_174 = (Rijndael_funtype_1_t)ivar_177;
            if (ivar_174 != NULL) ivar_174->count++;
            release_Rijndael_funtype_1(ivar_177);
            uint8_t ivar_179;
            ivar_179 = (uint8_t)1;
            uint8_t ivar_180;
            //copying to uint8 from mpz;
            ivar_180 = (uint8_t)mpz_get_ui(ivar_7);
            ivar_183 = (uint8_t)ivar_174->ftbl->mptr(ivar_174, ivar_179, ivar_180);
            ivar_174->ftbl->rptr(ivar_174);
            ivar_199 = (uint8_t)integer_bv_ops__u8xor((uint8_t)ivar_182, (uint8_t)ivar_183);
            uint8_t ivar_200;
            uint8_t ivar_197;
            Rijndael_funtype_1_t ivar_189;
            Rijndael_funtype_1_t ivar_192;
            ivar_1->count++;
            ivar_192 = (Rijndael_funtype_1_t)Rijndael__get((Rijndael_array_2_t)ivar_1);
            //copying to Rijndael_funtype_1 from Rijndael_funtype_1;
            ivar_189 = (Rijndael_funtype_1_t)ivar_192;
            if (ivar_189 != NULL) ivar_189->count++;
            release_Rijndael_funtype_1(ivar_192);
            uint8_t ivar_194;
            ivar_194 = (uint8_t)2;
            uint8_t ivar_195;
            //copying to uint8 from mpz;
            ivar_195 = (uint8_t)mpz_get_ui(ivar_7);
            ivar_197 = (uint8_t)ivar_189->ftbl->mptr(ivar_189, ivar_194, ivar_195);
            ivar_189->ftbl->rptr(ivar_189);
            ivar_200 = (uint8_t)Rijndael__T2((uint8_t)ivar_197);
            ivar_216 = (uint8_t)integer_bv_ops__u8xor((uint8_t)ivar_199, (uint8_t)ivar_200);
            uint8_t ivar_217;
            uint8_t ivar_214;
            Rijndael_funtype_1_t ivar_206;
            Rijndael_funtype_1_t ivar_209;
            ivar_1->count++;
            ivar_209 = (Rijndael_funtype_1_t)Rijndael__get((Rijndael_array_2_t)ivar_1);
            //copying to Rijndael_funtype_1 from Rijndael_funtype_1;
            ivar_206 = (Rijndael_funtype_1_t)ivar_209;
            if (ivar_206 != NULL) ivar_206->count++;
            release_Rijndael_funtype_1(ivar_209);
            uint8_t ivar_211;
            ivar_211 = (uint8_t)3;
            uint8_t ivar_212;
            //copying to uint8 from mpz;
            ivar_212 = (uint8_t)mpz_get_ui(ivar_7);
            mpz_clear(ivar_7);
            ivar_214 = (uint8_t)ivar_206->ftbl->mptr(ivar_206, ivar_211, ivar_212);
            ivar_206->ftbl->rptr(ivar_206);
            ivar_217 = (uint8_t)Rijndael__T3((uint8_t)ivar_214);
            result->elems[index3645] = (uint8_t)integer_bv_ops__u8xor((uint8_t)ivar_216, (uint8_t)ivar_217);
} else {
           
            uint8_t ivar_281;
            uint8_t ivar_264;
            uint8_t ivar_250;
            uint8_t ivar_237;
            Rijndael_funtype_1_t ivar_229;
            Rijndael_funtype_1_t ivar_232;
            ivar_1->count++;
            ivar_232 = (Rijndael_funtype_1_t)Rijndael__get((Rijndael_array_2_t)ivar_1);
            //copying to Rijndael_funtype_1 from Rijndael_funtype_1;
            ivar_229 = (Rijndael_funtype_1_t)ivar_232;
            if (ivar_229 != NULL) ivar_229->count++;
            release_Rijndael_funtype_1(ivar_232);
            uint8_t ivar_234;
            ivar_234 = (uint8_t)0;
            uint8_t ivar_235;
            //copying to uint8 from mpz;
            ivar_235 = (uint8_t)mpz_get_ui(ivar_7);
            ivar_237 = (uint8_t)ivar_229->ftbl->mptr(ivar_229, ivar_234, ivar_235);
            ivar_229->ftbl->rptr(ivar_229);
            ivar_250 = (uint8_t)Rijndael__T3((uint8_t)ivar_237);
            uint8_t ivar_251;
            Rijndael_funtype_1_t ivar_242;
            Rijndael_funtype_1_t ivar_245;
            ivar_1->count++;
            ivar_245 = (Rijndael_funtype_1_t)Rijndael__get((Rijndael_array_2_t)ivar_1);
            //copying to Rijndael_funtype_1 from Rijndael_funtype_1;
            ivar_242 = (Rijndael_funtype_1_t)ivar_245;
            if (ivar_242 != NULL) ivar_242->count++;
            release_Rijndael_funtype_1(ivar_245);
            uint8_t ivar_247;
            ivar_247 = (uint8_t)1;
            uint8_t ivar_248;
            //copying to uint8 from mpz;
            ivar_248 = (uint8_t)mpz_get_ui(ivar_7);
            ivar_251 = (uint8_t)ivar_242->ftbl->mptr(ivar_242, ivar_247, ivar_248);
            ivar_242->ftbl->rptr(ivar_242);
            ivar_264 = (uint8_t)integer_bv_ops__u8xor((uint8_t)ivar_250, (uint8_t)ivar_251);
            uint8_t ivar_265;
            Rijndael_funtype_1_t ivar_256;
            Rijndael_funtype_1_t ivar_259;
            ivar_1->count++;
            ivar_259 = (Rijndael_funtype_1_t)Rijndael__get((Rijndael_array_2_t)ivar_1);
            //copying to Rijndael_funtype_1 from Rijndael_funtype_1;
            ivar_256 = (Rijndael_funtype_1_t)ivar_259;
            if (ivar_256 != NULL) ivar_256->count++;
            release_Rijndael_funtype_1(ivar_259);
            uint8_t ivar_261;
            ivar_261 = (uint8_t)2;
            uint8_t ivar_262;
            //copying to uint8 from mpz;
            ivar_262 = (uint8_t)mpz_get_ui(ivar_7);
            ivar_265 = (uint8_t)ivar_256->ftbl->mptr(ivar_256, ivar_261, ivar_262);
            ivar_256->ftbl->rptr(ivar_256);
            ivar_281 = (uint8_t)integer_bv_ops__u8xor((uint8_t)ivar_264, (uint8_t)ivar_265);
            uint8_t ivar_282;
            uint8_t ivar_279;
            Rijndael_funtype_1_t ivar_271;
            Rijndael_funtype_1_t ivar_274;
            ivar_1->count++;
            ivar_274 = (Rijndael_funtype_1_t)Rijndael__get((Rijndael_array_2_t)ivar_1);
            //copying to Rijndael_funtype_1 from Rijndael_funtype_1;
            ivar_271 = (Rijndael_funtype_1_t)ivar_274;
            if (ivar_271 != NULL) ivar_271->count++;
            release_Rijndael_funtype_1(ivar_274);
            uint8_t ivar_276;
            ivar_276 = (uint8_t)3;
            uint8_t ivar_277;
            //copying to uint8 from mpz;
            ivar_277 = (uint8_t)mpz_get_ui(ivar_7);
            mpz_clear(ivar_7);
            ivar_279 = (uint8_t)ivar_271->ftbl->mptr(ivar_271, ivar_276, ivar_277);
            ivar_271->ftbl->rptr(ivar_271);
            ivar_282 = (uint8_t)Rijndael__T2((uint8_t)ivar_279);
            result->elems[index3645] = (uint8_t)integer_bv_ops__u8xor((uint8_t)ivar_281, (uint8_t)ivar_282);
};
};
};
        };
        release_Rijndael_array_2(ivar_1);

        return result;
}

extern Rijndael_array_2_t Rijndael__roundkeyXOR(Rijndael_array_2_t ivar_1, Rijndael_array_2_t ivar_2){
        Rijndael_array_2_t  result;
        /* n */ uint32_t ivar_6;
        ivar_6 = (uint32_t)16;
        Rijndael_array_2_t ivar_5;
        ivar_5 = (Rijndael_array_2_t)bytevectors__byvXOR((uint32_t)ivar_6, (bytevectors__byv_t)ivar_1, (bytevectors__byv_t)ivar_2);
        //copying to Rijndael_array_2 from Rijndael_array_2;
        result = (Rijndael_array_2_t)ivar_5;
        if (result != NULL) result->count++;
        release_Rijndael_array_2(ivar_5);

        return result;
}

extern uint8_t Rijndael__roundConst(uint8_t ivar_1){
        uint8_t  result;
        bool_t ivar_2;
        uint8_t ivar_4;
        ivar_4 = (uint8_t)1;
        ivar_2 = (ivar_1 <= ivar_4);
        if (ivar_2){ 
             //copying to uint8 from uint8;
             result = (uint8_t)ivar_1;
} else {
        
             uint8_t ivar_14;
             uint8_t ivar_12;
             uint8_t ivar_9;
             ivar_9 = (uint8_t)1;
             ivar_12 = (uint8_t)(ivar_1 - ivar_9);
             ivar_14 = (uint8_t)Rijndael__roundConst((uint8_t)ivar_12);
             result = (uint8_t)Rijndael__T2((uint8_t)ivar_14);
};

        return result;
}

extern Rijndael_array_2_t Rijndael__nextRoundKey(Rijndael_array_2_t ivar_1, uint8_t ivar_2){
        Rijndael_array_2_t  result;
        /* K0 */ Rijndael_funtype_6_t ivar_8;
        Rijndael_closure_7_t cl3646;
        cl3646 = new_Rijndael_closure_7();
        cl3646->fvar_1 = (Rijndael_array_2_t)ivar_1;
        if (cl3646->fvar_1 != NULL) cl3646->fvar_1->count++;
        cl3646->fvar_2 = (uint8_t)ivar_2;
        ivar_8 = (Rijndael_funtype_6_t)cl3646;
        /* K1 */ Rijndael_funtype_6_t ivar_89;
        Rijndael_closure_8_t cl3647;
        cl3647 = new_Rijndael_closure_8();
        cl3647->fvar_1 = (Rijndael_array_2_t)ivar_1;
        if (cl3647->fvar_1 != NULL) cl3647->fvar_1->count++;
        cl3647->fvar_2 = (Rijndael_funtype_6_t)ivar_8;
        if (cl3647->fvar_2 != NULL) cl3647->fvar_2->count++;
        ivar_89 = (Rijndael_funtype_6_t)cl3647;
        /* K2 */ Rijndael_funtype_6_t ivar_114;
        Rijndael_closure_9_t cl3648;
        cl3648 = new_Rijndael_closure_9();
        cl3648->fvar_1 = (Rijndael_array_2_t)ivar_1;
        if (cl3648->fvar_1 != NULL) cl3648->fvar_1->count++;
        cl3648->fvar_2 = (Rijndael_funtype_6_t)ivar_89;
        if (cl3648->fvar_2 != NULL) cl3648->fvar_2->count++;
        ivar_114 = (Rijndael_funtype_6_t)cl3648;
        /* K3 */ Rijndael_funtype_6_t ivar_139;
        Rijndael_closure_10_t cl3649;
        cl3649 = new_Rijndael_closure_10();
        cl3649->fvar_1 = (Rijndael_array_2_t)ivar_1;
        if (cl3649->fvar_1 != NULL) cl3649->fvar_1->count++;
        cl3649->fvar_2 = (Rijndael_funtype_6_t)ivar_114;
        if (cl3649->fvar_2 != NULL) cl3649->fvar_2->count++;
        release_Rijndael_array_2(ivar_1);
        ivar_139 = (Rijndael_funtype_6_t)cl3649;
        result = new_Rijndael_array_2(16);
        uint8_t ivar_164;
        for (uint32_t index3650 = 0; index3650 < 16; index3650++){
             ivar_164 = (uint8_t)index3650;
             bool_t ivar_165;
             uint8_t ivar_167;
             ivar_167 = (uint8_t)4;
             ivar_165 = (ivar_164 < ivar_167);
             if (ivar_165){  
           result->elems[index3650] = (uint8_t)ivar_8->ftbl->fptr(ivar_8, ivar_164);
} else {
             
           bool_t ivar_174;
           uint8_t ivar_176;
           ivar_176 = (uint8_t)8;
           ivar_174 = (ivar_164 < ivar_176);
           if (ivar_174){   
           uint8_t ivar_185;
           uint8_t ivar_180;
           ivar_180 = (uint8_t)4;
           ivar_185 = (uint8_t)(ivar_164 - ivar_180);
           result->elems[index3650] = (uint8_t)ivar_89->ftbl->fptr(ivar_89, ivar_185);
} else {
           
           bool_t ivar_186;
           uint8_t ivar_188;
           ivar_188 = (uint8_t)12;
           ivar_186 = (ivar_164 < ivar_188);
           if (ivar_186){    
            uint8_t ivar_197;
            uint8_t ivar_192;
            ivar_192 = (uint8_t)8;
            ivar_197 = (uint8_t)(ivar_164 - ivar_192);
            result->elems[index3650] = (uint8_t)ivar_114->ftbl->fptr(ivar_114, ivar_197);
} else {
           
            uint8_t ivar_205;
            uint8_t ivar_200;
            ivar_200 = (uint8_t)12;
            ivar_205 = (uint8_t)(ivar_164 - ivar_200);
            result->elems[index3650] = (uint8_t)ivar_139->ftbl->fptr(ivar_139, ivar_205);
};
};
};
        };
        release_Rijndael_funtype_6(ivar_114);
        release_Rijndael_funtype_6(ivar_139);
        release_Rijndael_funtype_6(ivar_89);
        release_Rijndael_funtype_6(ivar_8);

        return result;
}

extern Rijndael_array_11_t Rijndael__allKeys(Rijndael_array_11_t ivar_1, uint8_t ivar_2, uint8_t ivar_3){
        Rijndael_array_11_t  result;
        bool_t ivar_4;
        uint8_t ivar_6;
        ivar_6 = (uint8_t)10;
        ivar_4 = (ivar_3 == ivar_6);
        if (ivar_4){ 
             //copying to Rijndael_array_11 from Rijndael_array_11;
             result = (Rijndael_array_11_t)ivar_1;
             if (result != NULL) result->count++;
             release_Rijndael_array_11(ivar_1);
} else {
        
             Rijndael_array_11_t ivar_38;
             Rijndael_array_2_t ivar_11;
             Rijndael_array_2_t ivar_19;
             Rijndael_array_2_t ivar_15;
             ivar_15 = (Rijndael_array_2_t)ivar_1->elems[ivar_3];
             ivar_15->count++;
             //copying to Rijndael_array_2 from Rijndael_array_2;
             ivar_19 = (Rijndael_array_2_t)ivar_15;
             if (ivar_19 != NULL) ivar_19->count++;
             release_Rijndael_array_2(ivar_15);
             Rijndael_array_2_t ivar_18;
             ivar_18 = (Rijndael_array_2_t)Rijndael__nextRoundKey((Rijndael_array_2_t)ivar_19, (uint8_t)ivar_2);
             //copying to Rijndael_array_2 from Rijndael_array_2;
             ivar_11 = (Rijndael_array_2_t)ivar_18;
             if (ivar_11 != NULL) ivar_11->count++;
             release_Rijndael_array_2(ivar_18);
             Rijndael_array_11_t ivar_30;
             uint8_t ivar_23;
             uint8_t ivar_25;
             ivar_25 = (uint8_t)1;
             ivar_23 = (uint8_t)(ivar_3 + ivar_25);
             Rijndael_array_11_t ivar_27;
             Rijndael_array_2_t ivar_29;
             ivar_29 = NULL;
             ivar_27 = (Rijndael_array_11_t)update_Rijndael_array_11(ivar_1, ivar_23, ivar_29);
             if (ivar_29 != NULL) ivar_29->count--;
             ivar_30 = (Rijndael_array_11_t)update_Rijndael_array_11(ivar_27, ivar_23, ivar_11);
             if (ivar_11 != NULL) ivar_11->count--;
             //copying to Rijndael_array_11 from Rijndael_array_11;
             ivar_38 = (Rijndael_array_11_t)ivar_30;
             if (ivar_38 != NULL) ivar_38->count++;
             release_Rijndael_array_11(ivar_30);
             uint8_t ivar_39;
             ivar_39 = (uint8_t)Rijndael__T2((uint8_t)ivar_2);
             uint8_t ivar_40;
             uint8_t ivar_35;
             ivar_35 = (uint8_t)1;
             ivar_40 = (uint8_t)(ivar_3 + ivar_35);
             Rijndael_array_11_t ivar_37;
             ivar_37 = (Rijndael_array_11_t)Rijndael__allKeys((Rijndael_array_11_t)ivar_38, (uint8_t)ivar_39, (uint8_t)ivar_40);
             //copying to Rijndael_array_11 from Rijndael_array_11;
             result = (Rijndael_array_11_t)ivar_37;
             if (result != NULL) result->count++;
             release_Rijndael_array_11(ivar_37);
};

        return result;
}

extern Rijndael_array_2_t Rijndael__Rijndael_step(Rijndael_array_2_t ivar_1, Rijndael_array_2_t ivar_2){
        Rijndael_array_2_t  result;
        /* A1 */ Rijndael_array_2_t ivar_3;
        Rijndael_array_2_t ivar_5;
        ivar_5 = (Rijndael_array_2_t)Rijndael__byteSubst((Rijndael_array_2_t)ivar_1);
        //copying to Rijndael_array_2 from Rijndael_array_2;
        ivar_3 = (Rijndael_array_2_t)ivar_5;
        if (ivar_3 != NULL) ivar_3->count++;
        release_Rijndael_array_2(ivar_5);
        /* A2 */ Rijndael_array_2_t ivar_7;
        Rijndael_array_2_t ivar_9;
        ivar_9 = (Rijndael_array_2_t)Rijndael__shiftRow((Rijndael_array_2_t)ivar_3);
        //copying to Rijndael_array_2 from Rijndael_array_2;
        ivar_7 = (Rijndael_array_2_t)ivar_9;
        if (ivar_7 != NULL) ivar_7->count++;
        release_Rijndael_array_2(ivar_9);
        /* A3 */ Rijndael_array_2_t ivar_11;
        Rijndael_array_2_t ivar_13;
        ivar_13 = (Rijndael_array_2_t)Rijndael__mixColumn((Rijndael_array_2_t)ivar_7);
        //copying to Rijndael_array_2 from Rijndael_array_2;
        ivar_11 = (Rijndael_array_2_t)ivar_13;
        if (ivar_11 != NULL) ivar_11->count++;
        release_Rijndael_array_2(ivar_13);
        Rijndael_array_2_t ivar_17;
        ivar_17 = (Rijndael_array_2_t)Rijndael__roundkeyXOR((Rijndael_array_2_t)ivar_11, (Rijndael_array_2_t)ivar_2);
        //copying to Rijndael_array_2 from Rijndael_array_2;
        result = (Rijndael_array_2_t)ivar_17;
        if (result != NULL) result->count++;
        release_Rijndael_array_2(ivar_17);

        return result;
}

extern Rijndael_array_2_t Rijndael__Rijndael_rec(Rijndael_array_2_t ivar_1, Rijndael_array_11_t ivar_2, uint8_t ivar_3){
        Rijndael_array_2_t  result;
        bool_t ivar_4;
        uint8_t ivar_6;
        ivar_6 = (uint8_t)10;
        ivar_4 = (ivar_3 >= ivar_6);
        if (ivar_4){ 
             Rijndael_array_2_t ivar_21;
             Rijndael_array_2_t ivar_15;
             Rijndael_array_2_t ivar_12;
             ivar_12 = (Rijndael_array_2_t)Rijndael__byteSubst((Rijndael_array_2_t)ivar_1);
             //copying to Rijndael_array_2 from Rijndael_array_2;
             ivar_15 = (Rijndael_array_2_t)ivar_12;
             if (ivar_15 != NULL) ivar_15->count++;
             release_Rijndael_array_2(ivar_12);
             Rijndael_array_2_t ivar_14;
             ivar_14 = (Rijndael_array_2_t)Rijndael__shiftRow((Rijndael_array_2_t)ivar_15);
             //copying to Rijndael_array_2 from Rijndael_array_2;
             ivar_21 = (Rijndael_array_2_t)ivar_14;
             if (ivar_21 != NULL) ivar_21->count++;
             release_Rijndael_array_2(ivar_14);
             Rijndael_array_2_t ivar_22;
             Rijndael_array_2_t ivar_17;
             ivar_17 = (Rijndael_array_2_t)ivar_2->elems[ivar_3];
             ivar_17->count++;
             release_Rijndael_array_11(ivar_2);
             //copying to Rijndael_array_2 from Rijndael_array_2;
             ivar_22 = (Rijndael_array_2_t)ivar_17;
             if (ivar_22 != NULL) ivar_22->count++;
             release_Rijndael_array_2(ivar_17);
             Rijndael_array_2_t ivar_20;
             ivar_20 = (Rijndael_array_2_t)Rijndael__roundkeyXOR((Rijndael_array_2_t)ivar_21, (Rijndael_array_2_t)ivar_22);
             //copying to Rijndael_array_2 from Rijndael_array_2;
             result = (Rijndael_array_2_t)ivar_20;
             if (result != NULL) result->count++;
             release_Rijndael_array_2(ivar_20);
} else {
        
             bool_t ivar_23;
             uint8_t ivar_25;
             ivar_25 = (uint8_t)0;
             ivar_23 = (ivar_3 == ivar_25);
             if (ivar_23){  
           Rijndael_array_2_t ivar_43;
           Rijndael_array_2_t ivar_38;
           Rijndael_array_2_t ivar_33;
           ivar_33 = (Rijndael_array_2_t)ivar_2->elems[ivar_3];
           ivar_33->count++;
           //copying to Rijndael_array_2 from Rijndael_array_2;
           ivar_38 = (Rijndael_array_2_t)ivar_33;
           if (ivar_38 != NULL) ivar_38->count++;
           release_Rijndael_array_2(ivar_33);
           Rijndael_array_2_t ivar_36;
           ivar_36 = (Rijndael_array_2_t)Rijndael__roundkeyXOR((Rijndael_array_2_t)ivar_1, (Rijndael_array_2_t)ivar_38);
           //copying to Rijndael_array_2 from Rijndael_array_2;
           ivar_43 = (Rijndael_array_2_t)ivar_36;
           if (ivar_43 != NULL) ivar_43->count++;
           release_Rijndael_array_2(ivar_36);
           uint8_t ivar_45;
           uint8_t ivar_40;
           ivar_40 = (uint8_t)1;
           ivar_45 = (uint8_t)(ivar_3 + ivar_40);
           Rijndael_array_2_t ivar_42;
           ivar_42 = (Rijndael_array_2_t)Rijndael__Rijndael_rec((Rijndael_array_2_t)ivar_43, (Rijndael_array_11_t)ivar_2, (uint8_t)ivar_45);
           //copying to Rijndael_array_2 from Rijndael_array_2;
           result = (Rijndael_array_2_t)ivar_42;
           if (result != NULL) result->count++;
           release_Rijndael_array_2(ivar_42);
} else {
             
           /* A4 */ Rijndael_array_2_t ivar_46;
           Rijndael_array_2_t ivar_55;
           Rijndael_array_2_t ivar_50;
           ivar_50 = (Rijndael_array_2_t)ivar_2->elems[ivar_3];
           ivar_50->count++;
           //copying to Rijndael_array_2 from Rijndael_array_2;
           ivar_55 = (Rijndael_array_2_t)ivar_50;
           if (ivar_55 != NULL) ivar_55->count++;
           release_Rijndael_array_2(ivar_50);
           Rijndael_array_2_t ivar_53;
           ivar_53 = (Rijndael_array_2_t)Rijndael__Rijndael_step((Rijndael_array_2_t)ivar_1, (Rijndael_array_2_t)ivar_55);
           //copying to Rijndael_array_2 from Rijndael_array_2;
           ivar_46 = (Rijndael_array_2_t)ivar_53;
           if (ivar_46 != NULL) ivar_46->count++;
           release_Rijndael_array_2(ivar_53);
           uint8_t ivar_65;
           uint8_t ivar_60;
           ivar_60 = (uint8_t)1;
           ivar_65 = (uint8_t)(ivar_3 + ivar_60);
           Rijndael_array_2_t ivar_62;
           ivar_62 = (Rijndael_array_2_t)Rijndael__Rijndael_rec((Rijndael_array_2_t)ivar_46, (Rijndael_array_11_t)ivar_2, (uint8_t)ivar_65);
           //copying to Rijndael_array_2 from Rijndael_array_2;
           result = (Rijndael_array_2_t)ivar_62;
           if (result != NULL) result->count++;
           release_Rijndael_array_2(ivar_62);
};
};

        return result;
}

extern Rijndael_array_2_t Rijndael__Rijndael(Rijndael_array_2_t ivar_1, Rijndael_array_2_t ivar_2){
        Rijndael_array_2_t  result;
        Rijndael_array_11_t ivar_18;
        Rijndael_array_11_t ivar_13;
        ivar_13 = new_Rijndael_array_11(11);
        uint8_t ivar_9;
        for (uint32_t index3651 = 0; index3651 < 11; index3651++){
             ivar_9 = (uint8_t)index3651;
             //copying to Rijndael_array_2 from Rijndael_array_2;
             ivar_13->elems[index3651] = (Rijndael_array_2_t)ivar_2;
             if (ivar_13->elems[index3651] != NULL) ivar_13->elems[index3651]->count++;
        };
        release_Rijndael_array_2(ivar_2);
        uint8_t ivar_14;
        ivar_14 = (uint8_t)1;
        uint8_t ivar_15;
        ivar_15 = (uint8_t)0;
        Rijndael_array_11_t ivar_12;
        ivar_12 = (Rijndael_array_11_t)Rijndael__allKeys((Rijndael_array_11_t)ivar_13, (uint8_t)ivar_14, (uint8_t)ivar_15);
        //copying to Rijndael_array_11 from Rijndael_array_11;
        ivar_18 = (Rijndael_array_11_t)ivar_12;
        if (ivar_18 != NULL) ivar_18->count++;
        release_Rijndael_array_11(ivar_12);
        uint8_t ivar_19;
        ivar_19 = (uint8_t)0;
        Rijndael_array_2_t ivar_16;
        ivar_16 = (Rijndael_array_2_t)Rijndael__Rijndael_rec((Rijndael_array_2_t)ivar_1, (Rijndael_array_11_t)ivar_18, (uint8_t)ivar_19);
        //copying to Rijndael_array_2 from Rijndael_array_2;
        result = (Rijndael_array_2_t)ivar_16;
        if (result != NULL) result->count++;
        release_Rijndael_array_2(ivar_16);

        return result;
}

extern bytestrings__bytestring_t Rijndael__hex16(Rijndael_array_2_t ivar_1){
        bytestrings__bytestring_t  result;
        bytestrings__bytestring_t ivar_6;
        uint8_t ivar_3;
        ivar_3 = (uint8_t)16;
        ivar_6 = (bytestrings__bytestring_t)new_Rijndael_record_12();;
        ivar_6->length = (uint32_t)ivar_3;
        ivar_6->seq = (Rijndael_array_2_t)ivar_1;
        bytestrings__bytestring_t ivar_5;
        ivar_5 = (bytestrings__bytestring_t)hex__bytestring2hexstring((bytestrings__bytestring_t)ivar_6);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        result = (bytestrings__bytestring_t)ivar_5;
        if (result != NULL) result->count++;
        release_bytestrings__bytestring(ivar_5);

        return result;
}

extern bytestrings__bytestring_t Rijndael__test0RD(void){
        bytestrings__bytestring_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    /* Input */ bytestrings__bytestring_t ivar_1;
        bytestrings__bytestring_t ivar_12;
        Rijndael_record_5_t ivar_10;
        uint32_t len3659 = 32;
        uint32_t characters3660[32] = {51, 50, 52, 51, 102, 54, 97, 56, 56, 56, 53, 97, 51, 48, 56, 100, 51, 49, 51, 49, 57, 56, 97, 50, 101, 48, 51, 55, 48, 55, 51, 52};
        stringliteral_t string3658 = mk_string(32, characters3660);
        ivar_10 = (Rijndael_record_5_t)strings__make_string(len3659, string3658);
        strings__string_t ivar_8;
        //copying to strings__string from Rijndael_record_5;
        ivar_8 = (strings__string_t)ivar_10;
        if (ivar_8 != NULL) ivar_8->count++;
        release_Rijndael_record_5(ivar_10);
        bytestrings__bytestring_t ivar_7;
        ivar_7 = (bytestrings__bytestring_t)bytestrings__mk_bytestring((strings__string_t)ivar_8);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        ivar_12 = (bytestrings__bytestring_t)ivar_7;
        if (ivar_12 != NULL) ivar_12->count++;
        release_bytestrings__bytestring(ivar_7);
        bytestrings__bytestring_t ivar_11;
        ivar_11 = (bytestrings__bytestring_t)hex__hex2bytestring((bytestrings__bytestring_t)ivar_12);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        ivar_1 = (bytestrings__bytestring_t)ivar_11;
        if (ivar_1 != NULL) ivar_1->count++;
        release_bytestrings__bytestring(ivar_11);
        /* Cipher */ bytestrings__bytestring_t ivar_13;
        bytestrings__bytestring_t ivar_24;
        Rijndael_record_5_t ivar_22;
        uint32_t len3662 = 32;
        uint32_t characters3663[32] = {50, 98, 55, 101, 49, 53, 49, 54, 50, 56, 97, 101, 100, 50, 97, 54, 97, 98, 102, 55, 49, 53, 56, 56, 48, 57, 99, 102, 52, 102, 51, 99};
        stringliteral_t string3661 = mk_string(32, characters3663);
        ivar_22 = (Rijndael_record_5_t)strings__make_string(len3662, string3661);
        strings__string_t ivar_20;
        //copying to strings__string from Rijndael_record_5;
        ivar_20 = (strings__string_t)ivar_22;
        if (ivar_20 != NULL) ivar_20->count++;
        release_Rijndael_record_5(ivar_22);
        bytestrings__bytestring_t ivar_19;
        ivar_19 = (bytestrings__bytestring_t)bytestrings__mk_bytestring((strings__string_t)ivar_20);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        ivar_24 = (bytestrings__bytestring_t)ivar_19;
        if (ivar_24 != NULL) ivar_24->count++;
        release_bytestrings__bytestring(ivar_19);
        bytestrings__bytestring_t ivar_23;
        ivar_23 = (bytestrings__bytestring_t)hex__hex2bytestring((bytestrings__bytestring_t)ivar_24);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        ivar_13 = (bytestrings__bytestring_t)ivar_23;
        if (ivar_13 != NULL) ivar_13->count++;
        release_bytestrings__bytestring(ivar_23);
        /* Output */ Rijndael_array_2_t ivar_25;
        Rijndael_array_2_t ivar_35;
        ivar_35 = (Rijndael_array_2_t)ivar_1->seq;
        ivar_35->count++;
        release_bytestrings__bytestring(ivar_1);
        Rijndael_array_2_t ivar_36;
        ivar_36 = (Rijndael_array_2_t)ivar_13->seq;
        ivar_36->count++;
        release_bytestrings__bytestring(ivar_13);
        Rijndael_array_2_t ivar_34;
        ivar_34 = (Rijndael_array_2_t)Rijndael__roundkeyXOR((Rijndael_array_2_t)ivar_35, (Rijndael_array_2_t)ivar_36);
        //copying to Rijndael_array_2 from Rijndael_array_2;
        ivar_25 = (Rijndael_array_2_t)ivar_34;
        if (ivar_25 != NULL) ivar_25->count++;
        release_Rijndael_array_2(ivar_34);
        /* Outputbytestring */ Rijndael_record_12_t ivar_37;
        uint8_t ivar_42;
        ivar_42 = (uint8_t)16;
        ivar_37 = (Rijndael_record_12_t)new_Rijndael_record_12();;
        ivar_37->length = (uint8_t)ivar_42;
        ivar_37->seq = (Rijndael_array_2_t)ivar_25;
        bytestrings__bytestring_t ivar_45;
        ivar_45 = (bytestrings__bytestring_t)hex__bytestring2hexstring((bytestrings__bytestring_t)ivar_37);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        result = (bytestrings__bytestring_t)ivar_45;
        if (result != NULL) result->count++;
        release_bytestrings__bytestring(ivar_45);

        defined = true;};
        return result;
}

extern bytestrings__bytestring_t Rijndael__testRijndael1(void){
        bytestrings__bytestring_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    /* Input */ bytestrings__bytestring_t ivar_1;
        bytestrings__bytestring_t ivar_12;
        Rijndael_record_5_t ivar_10;
        uint32_t len3671 = 32;
        uint32_t characters3672[32] = {51, 50, 52, 51, 102, 54, 97, 56, 56, 56, 53, 97, 51, 48, 56, 100, 51, 49, 51, 49, 57, 56, 97, 50, 101, 48, 51, 55, 48, 55, 51, 52};
        stringliteral_t string3670 = mk_string(32, characters3672);
        ivar_10 = (Rijndael_record_5_t)strings__make_string(len3671, string3670);
        strings__string_t ivar_8;
        //copying to strings__string from Rijndael_record_5;
        ivar_8 = (strings__string_t)ivar_10;
        if (ivar_8 != NULL) ivar_8->count++;
        release_Rijndael_record_5(ivar_10);
        bytestrings__bytestring_t ivar_7;
        ivar_7 = (bytestrings__bytestring_t)bytestrings__mk_bytestring((strings__string_t)ivar_8);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        ivar_12 = (bytestrings__bytestring_t)ivar_7;
        if (ivar_12 != NULL) ivar_12->count++;
        release_bytestrings__bytestring(ivar_7);
        bytestrings__bytestring_t ivar_11;
        ivar_11 = (bytestrings__bytestring_t)hex__hex2bytestring((bytestrings__bytestring_t)ivar_12);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        ivar_1 = (bytestrings__bytestring_t)ivar_11;
        if (ivar_1 != NULL) ivar_1->count++;
        release_bytestrings__bytestring(ivar_11);
        /* Cipher */ bytestrings__bytestring_t ivar_13;
        bytestrings__bytestring_t ivar_24;
        Rijndael_record_5_t ivar_22;
        uint32_t len3674 = 32;
        uint32_t characters3675[32] = {50, 98, 55, 101, 49, 53, 49, 54, 50, 56, 97, 101, 100, 50, 97, 54, 97, 98, 102, 55, 49, 53, 56, 56, 48, 57, 99, 102, 52, 102, 51, 99};
        stringliteral_t string3673 = mk_string(32, characters3675);
        ivar_22 = (Rijndael_record_5_t)strings__make_string(len3674, string3673);
        strings__string_t ivar_20;
        //copying to strings__string from Rijndael_record_5;
        ivar_20 = (strings__string_t)ivar_22;
        if (ivar_20 != NULL) ivar_20->count++;
        release_Rijndael_record_5(ivar_22);
        bytestrings__bytestring_t ivar_19;
        ivar_19 = (bytestrings__bytestring_t)bytestrings__mk_bytestring((strings__string_t)ivar_20);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        ivar_24 = (bytestrings__bytestring_t)ivar_19;
        if (ivar_24 != NULL) ivar_24->count++;
        release_bytestrings__bytestring(ivar_19);
        bytestrings__bytestring_t ivar_23;
        ivar_23 = (bytestrings__bytestring_t)hex__hex2bytestring((bytestrings__bytestring_t)ivar_24);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        ivar_13 = (bytestrings__bytestring_t)ivar_23;
        if (ivar_13 != NULL) ivar_13->count++;
        release_bytestrings__bytestring(ivar_23);
        /* Output */ Rijndael_array_2_t ivar_25;
        Rijndael_array_2_t ivar_35;
        ivar_35 = (Rijndael_array_2_t)ivar_1->seq;
        ivar_35->count++;
        release_bytestrings__bytestring(ivar_1);
        Rijndael_array_2_t ivar_36;
        ivar_36 = (Rijndael_array_2_t)ivar_13->seq;
        ivar_36->count++;
        release_bytestrings__bytestring(ivar_13);
        Rijndael_array_2_t ivar_34;
        ivar_34 = (Rijndael_array_2_t)Rijndael__Rijndael((Rijndael_array_2_t)ivar_35, (Rijndael_array_2_t)ivar_36);
        //copying to Rijndael_array_2 from Rijndael_array_2;
        ivar_25 = (Rijndael_array_2_t)ivar_34;
        if (ivar_25 != NULL) ivar_25->count++;
        release_Rijndael_array_2(ivar_34);
        /* Outputbytestring */ Rijndael_record_12_t ivar_37;
        uint8_t ivar_42;
        ivar_42 = (uint8_t)16;
        ivar_37 = (Rijndael_record_12_t)new_Rijndael_record_12();;
        ivar_37->length = (uint8_t)ivar_42;
        ivar_37->seq = (Rijndael_array_2_t)ivar_25;
        bytestrings__bytestring_t ivar_45;
        ivar_45 = (bytestrings__bytestring_t)hex__bytestring2hexstring((bytestrings__bytestring_t)ivar_37);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        result = (bytestrings__bytestring_t)ivar_45;
        if (result != NULL) result->count++;
        release_bytestrings__bytestring(ivar_45);

        defined = true;};
        return result;
}