
%% PVS Version 7.1.26 - International Allegro CL Enterprise Edition 10.1 [64-bit Mac OS X (Intel)] (Mar 3, 2021 23:12)
%% 10.1 [64-bit Mac OS X (Intel)] (Mar 3, 2021 23:12)
$$$PVSHOME/.pvs.lisp
(in-package :pvs)


$$$rotate.pvs
rotate		: THEORY

  BEGIN

  x8, y8, z8: VAR uint8
  x16, y16, z16: VAR uint16
  x32, y32, z32: VAR uint32
  x64, y64, z64: VAR uint64  

   u8rightrotate(x8, (i : upto(8))): uint8
    = u8plus(u8lshift(x8, 8 - i), u8rshift(x8, i))

   u16rightrotate(x16, (i : upto(16))): uint16
    = u16plus(u16lshift(x16, 16 - i), u16rshift(x16, i))

   u32rightrotate(x32, (i : upto(32))): uint32
    = u32plus(u32lshift(x32, 32 - i), u32rshift(x32, i))

   u64rightrotate(x64, (i : upto(64))): uint64
    = u64plus(u64lshift(x64, 64 - i), u64rshift(x64, i))


   u8tobytestring(x8: uint8): bytestring
    = (# length := 1, seq := (LAMBDA (i: below(1)): x8) #)

   u16tobytestring(x16: uint16): bytestring
    = (# length := 2, seq := (LAMBDA (i: below(2)):
                      IF i = 0 THEN u16rem(x16, 0x100)
		        ELSE u16rem(u16rightrotate(x16, 8), 0x100) ENDIF) #)


   u32tobytestring(x32: uint32): bytestring
    = (# length := 4, seq := (LAMBDA (i: below(4)):
                      IF i = 0 THEN u32rem(x32, 0x100)
		        ELSIF i = 1 THEN u32rem(u32rightrotate(x32, 8), 0x100)
			ELSIF i = 2 THEN u32rem(u32rightrotate(x32, 16), 0x100)
			ELSE u32rem(u32rightrotate(x32, 24), 0x100)
			ENDIF) #)

   u64tobytestring(x64: uint64): bytestring
    = (# length := 4, seq := (LAMBDA (i: below(4)):
                      IF i = 0 THEN u64rem(x64, 0x100)
		        ELSIF i = 1 THEN u64rem(u64rightrotate(x64, 8), 0x100)
			ELSIF i = 2 THEN u64rem(u64rightrotate(x64, 16), 0x100)
			ELSIF i = 3 THEN  u64rem(u64rightrotate(x64, 24), 0x100)
			ELSIF i = 4 THEN  u64rem(u64rightrotate(x64, 32), 0x100)	
			ELSIF i = 5 THEN  u64rem(u64rightrotate(x64, 40), 0x100)				
			ELSIF i = 6 THEN  u64rem(u64rightrotate(x64, 48), 0x100)	   
			ELSE u64rem(u64rightrotate(x64, 56), 0x100)
			ENDIF) #)


  END rotate

$$$rotate.prf
(rotate
 (u16xor_TCC1 0
  (u16xor_TCC1-1 nil 3825170640 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)) nil
   (u16xor subtype "rotate.x16"
    "naturalnumbers.below(exp2.exp2(16))")))
 (u16xor_TCC2 0
  (u16xor_TCC2-1 nil 3825170640
   ("" (skeep*)
    ((""
      (typepred
       "bv2nat[16]((XOR[16](nat2bv[16](x16), nat2bv[16](y16))))")
      (("" (grind :exclude ("bv2nat" "nat2bv")) nil nil)) nil))
    nil)
   ((uint16 type-eq-decl nil integertypes nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (XOR const-decl "bvec[N]" bv_bitwise nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (u16xor subtype
    "bv_nat[16].bv2nat((bv_bitwise[16].XOR(bv_nat[16].nat2bv(rotate.x16), bv_nat[16].nat2bv(rotate.y16))))"
    "uint16")))
 (u32xor_TCC1 0
  (u32xor_TCC1-1 nil 3825170640 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)) nil
   (u32xor subtype "rotate.x32"
    "naturalnumbers.below(exp2.exp2(32))")))
 (u32xor_TCC2 0
  (u32xor_TCC2-1 nil 3825170640
   ("" (skeep*)
    ((""
      (typepred
       "bv2nat[32]((XOR[32](nat2bv[32](x32), nat2bv[32](y32))))")
      (("" (grind :exclude ("bv2nat" "nat2bv")) nil nil)) nil))
    nil)
   ((uint32 type-eq-decl nil integertypes nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (XOR const-decl "bvec[N]" bv_bitwise nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (u32xor subtype
    "bv_nat[32].bv2nat((bv_bitwise[32].XOR(bv_nat[32].nat2bv(rotate.x32), bv_nat[32].nat2bv(rotate.y32))))"
    "uint32")))
 (u64xor_TCC1 0
  (u64xor_TCC1-1 nil 3825170640 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)) nil
   (u64xor subtype "rotate.x64"
    "naturalnumbers.below(exp2.exp2(64))")))
 (u64xor_TCC2 0
  (u64xor_TCC2-1 nil 3825170640
   ("" (skeep*)
    ((""
      (typepred
       "bv2nat[64]((XOR[64](nat2bv[64](x64), nat2bv[64](y64))))")
      (("" (grind :defs nil) nil nil)) nil))
    nil)
   ((uint64 type-eq-decl nil integertypes nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (XOR const-decl "bvec[N]" bv_bitwise nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (u64xor subtype
    "bv_nat[64].bv2nat((bv_bitwise[64].XOR(bv_nat[64].nat2bv(rotate.x64), bv_nat[64].nat2bv(rotate.y64))))"
    "uint64")))
 (u16and_TCC1 0
  (u16and_TCC1-1 nil 3827347997
   ("" (skeep*)
    ((""
      (typepred
       "bv2nat[16]((AND[16](nat2bv[16](x16), nat2bv[16](y16))))")
      (("" (ground) nil nil)) nil))
    nil)
   ((uint16 type-eq-decl nil integertypes nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "bvec[N]" bv_bitwise nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (u16and subtype
    "bv_nat[16].bv2nat((bv_bitwise[16].AND(bv_nat[16].nat2bv(rotate.x16), bv_nat[16].nat2bv(rotate.y16))))"
    "uint16")))
 (u32and_TCC1 0
  (u32and_TCC1-1 nil 3827347997
   ("" (skeep*)
    ((""
      (typepred
       "bv2nat[32]((AND[32](nat2bv[32](x32), nat2bv[32](y32))))")
      (("" (ground) nil nil)) nil))
    nil)
   ((uint32 type-eq-decl nil integertypes nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "bvec[N]" bv_bitwise nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (u32and subtype
    "bv_nat[32].bv2nat((bv_bitwise[32].AND(bv_nat[32].nat2bv(rotate.x32), bv_nat[32].nat2bv(rotate.y32))))"
    "uint32")))
 (u64and_TCC1 0
  (u64and_TCC1-1 nil 3827347997
   ("" (skeep*)
    ((""
      (typepred
       "bv2nat[64]((AND[64](nat2bv[64](x64), nat2bv[64](y64))))")
      (("" (ground) nil nil)) nil))
    nil)
   ((uint64 type-eq-decl nil integertypes nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "bvec[N]" bv_bitwise nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (u64and subtype
    "bv_nat[64].bv2nat((bv_bitwise[64].AND(bv_nat[64].nat2bv(rotate.x64), bv_nat[64].nat2bv(rotate.y64))))"
    "uint64")))
 (u16not_TCC1 0
  (u16not_TCC1-1 nil 3827347997
   ("" (skeep*)
    (("" (typepred "bv2nat[16](NOT nat2bv[16](x16))")
      (("" (ground) nil nil)) nil))
    nil)
   ((uint16 type-eq-decl nil integertypes nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "bvec[N]" bv_bitwise nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (u16not subtype
    "bv_nat[16].bv2nat((bv_bitwise[16].NOT)(bv_nat[16].nat2bv(rotate.x16)))"
    "uint16")))
 (u32not_TCC1 0
  (u32not_TCC1-1 nil 3827347997
   ("" (skeep*)
    (("" (typepred "bv2nat[32](NOT (nat2bv[32](x32)))")
      (("" (ground) nil nil)) nil))
    nil)
   ((uint32 type-eq-decl nil integertypes nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "bvec[N]" bv_bitwise nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (u32not subtype
    "bv_nat[32].bv2nat((bv_bitwise[32].NOT)((bv_nat[32].nat2bv(rotate.x32))))"
    "uint32")))
 (u64not_TCC1 0
  (u64not_TCC1-1 nil 3827347997
   ("" (skeep*)
    (("" (typepred "bv2nat[64](NOT (nat2bv[64](x64)))")
      (("" (ground) nil nil)) nil))
    nil)
   ((uint64 type-eq-decl nil integertypes nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "bvec[N]" bv_bitwise nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (u64not subtype
    "bv_nat[64].bv2nat((bv_bitwise[64].NOT)((bv_nat[64].nat2bv(rotate.x64))))"
    "uint64")))
 (u8tobytestring_TCC1 0
  (u8tobytestring_TCC1-1 nil 3827347997
   ("" (skeep*) (("" (typepred "x8") (("" (grind) nil nil)) nil)) nil)
   ((uint8 type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil (u8tobytestring subtype "rotate.x8" "byte")))
 (u16tobytestring_TCC1 0
  (u16tobytestring_TCC1-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint16 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (u16rem const-decl "uint16" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u16tobytestring subtype "integertypes.u16rem(rotate.x16, 0x100)"
    "byte")))
 (u16tobytestring_TCC2 0
  (u16tobytestring_TCC2-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint16 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (u16rshift const-decl "uint16" integertypes nil)
    (max16 const-decl "uint16" integertypes nil)
    (u16rightrotate const-decl "uint16" rotate nil)
    (u16rem const-decl "uint16" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u16tobytestring subtype
    "integertypes.u16rem(rotate.u16rightrotate(rotate.x16, 8), 0x100)"
    "byte")))
 (u32tobytestring_TCC1 0
  (u32tobytestring_TCC1-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (u32rem const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u32tobytestring subtype "integertypes.u32rem(rotate.x32, 0x100)"
    "byte")))
 (u32tobytestring_TCC2 0
  (u32tobytestring_TCC2-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (u32rshift const-decl "uint32" integertypes nil)
    (max32 const-decl "uint32" integertypes nil)
    (u32rightrotate const-decl "uint32" rotate nil)
    (u32rem const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u32tobytestring subtype
    "integertypes.u32rem(rotate.u32rightrotate(rotate.x32, 8), 0x100)"
    "byte")))
 (u32tobytestring_TCC3 0
  (u32tobytestring_TCC3-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (u32rshift const-decl "uint32" integertypes nil)
    (max32 const-decl "uint32" integertypes nil)
    (u32rightrotate const-decl "uint32" rotate nil)
    (u32rem const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u32tobytestring subtype
    "integertypes.u32rem(rotate.u32rightrotate(rotate.x32, 16), 0x100)"
    "byte")))
 (u32tobytestring_TCC4 0
  (u32tobytestring_TCC4-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (u32rshift const-decl "uint32" integertypes nil)
    (max32 const-decl "uint32" integertypes nil)
    (u32rightrotate const-decl "uint32" rotate nil)
    (u32rem const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u32tobytestring subtype
    "integertypes.u32rem(rotate.u32rightrotate(rotate.x32, 24), 0x100)"
    "byte")))
 (u64tobytestring_TCC1 0
  (u64tobytestring_TCC1-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (u64rem const-decl "uint64" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64tobytestring subtype "integertypes.u64rem(rotate.x64, 0x100)"
    "byte")))
 (u64tobytestring_TCC2 0
  (u64tobytestring_TCC2-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (u64lshift const-decl "uint64" integertypes nil)
    (u64rshift const-decl "uint64" integertypes nil)
    (max64 const-decl "uint64" integertypes nil)
    (u64rightrotate const-decl "uint64" rotate nil)
    (u64rem const-decl "uint64" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64tobytestring subtype
    "integertypes.u64rem(rotate.u64rightrotate(rotate.x64, 8), 0x100)"
    "byte")))
 (u64tobytestring_TCC3 0
  (u64tobytestring_TCC3-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (u64lshift const-decl "uint64" integertypes nil)
    (u64rshift const-decl "uint64" integertypes nil)
    (max64 const-decl "uint64" integertypes nil)
    (u64rightrotate const-decl "uint64" rotate nil)
    (u64rem const-decl "uint64" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64tobytestring subtype
    "integertypes.u64rem(rotate.u64rightrotate(rotate.x64, 16), 0x100)"
    "byte")))
 (u64tobytestring_TCC4 0
  (u64tobytestring_TCC4-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (u64lshift const-decl "uint64" integertypes nil)
    (u64rshift const-decl "uint64" integertypes nil)
    (max64 const-decl "uint64" integertypes nil)
    (u64rightrotate const-decl "uint64" rotate nil)
    (u64rem const-decl "uint64" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64tobytestring subtype
    "integertypes.u64rem(rotate.u64rightrotate(rotate.x64, 24), 0x100)"
    "byte")))
 (u64tobytestring_TCC5 0
  (u64tobytestring_TCC5-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((u64lshift const-decl "uint64" integertypes nil)
    (u64rshift const-decl "uint64" integertypes nil)
    (max64 const-decl "uint64" integertypes nil)
    (u64rightrotate const-decl "uint64" rotate nil)
    (u64rem const-decl "uint64" integertypes nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (u64tobytestring subtype
    "integertypes.u64rem(rotate.u64rightrotate(rotate.x64, 32), 0x100)"
    "byte")))
 (u64tobytestring_TCC6 0
  (u64tobytestring_TCC6-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((u64lshift const-decl "uint64" integertypes nil)
    (u64rshift const-decl "uint64" integertypes nil)
    (max64 const-decl "uint64" integertypes nil)
    (u64rightrotate const-decl "uint64" rotate nil)
    (u64rem const-decl "uint64" integertypes nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (u64tobytestring subtype
    "integertypes.u64rem(rotate.u64rightrotate(rotate.x64, 40), 0x100)"
    "byte")))
 (u64tobytestring_TCC7 0
  (u64tobytestring_TCC7-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((u64lshift const-decl "uint64" integertypes nil)
    (u64rshift const-decl "uint64" integertypes nil)
    (max64 const-decl "uint64" integertypes nil)
    (u64rightrotate const-decl "uint64" rotate nil)
    (u64rem const-decl "uint64" integertypes nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (u64tobytestring subtype
    "integertypes.u64rem(rotate.u64rightrotate(rotate.x64, 48), 0x100)"
    "byte")))
 (u64tobytestring_TCC8 0
  (u64tobytestring_TCC8-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (u64lshift const-decl "uint64" integertypes nil)
    (u64rshift const-decl "uint64" integertypes nil)
    (max64 const-decl "uint64" integertypes nil)
    (u64rightrotate const-decl "uint64" rotate nil)
    (u64rem const-decl "uint64" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64tobytestring subtype
    "integertypes.u64rem(rotate.u64rightrotate(rotate.x64, 56), 0x100)"
    "byte"))))


$$$bytes.pvs
bytes  % [ parameters ]
		: THEORY

  BEGIN

  b, b1, b2: VAR byte
  B, B1, B2: VAR bytestring
  l, n: VAR index

  lbytes(l): TYPE = {B | length(B) = l}

  nbytes(b, n): RECURSIVE lbytes(n) =
  (IF n = 0 THEN null
   ELSE singleton(b) ++ nbytes(b, n-1)
   ENDIF)
   MEASURE n

   padright(n)(B | length(B) + n <= maxindex): lbytes(length(B) + n)
    = B ++ nbytes(0, n);

   XOR(B1, B2): RECURSIVE bytestring
    = IF length(B1) > 0
       THEN IF length(B2) > 0
             THEN singleton(bv2nat[8](nat2bv(get(B1, 0)) XOR nat2bv(get(B1, 0)))) ++  (suffix(B1, 1) XOR suffix(B2, 1))
	     ELSE B1
	     ENDIF
       ELSE B2
       ENDIF
       MEASURE length(B1)

  END bytes

$$$SHA256.pvs
SHA256  % [ parameters ]
		: THEORY

  BEGIN
   IMPORTING bytes, rotate

   % h0 := 0x6a09e667
% h1 := 0xbb67ae85
% h2 := 0x3c6ef372
% h3 := 0xa54ff53a
% h4 := 0x510e527f
% h5 := 0x9b05688c
% h6 := 0x1f83d9ab
% h7 := 0x5be0cd19

  h0 : uint32 = 0x6a09e667
  h1: uint32 = 0xbb67ae85
  h2 : uint32 = 0x3c6ef372
  h3 : uint32 = 0xa54ff53a
  h4 :uint32 = 0x510e527f
  h5 :uint32 = 0x9b05688c
  h6 :uint32 = 0x1f83d9ab
  h7 :uint32 = 0x5be0cd19

  h(i: below(8)): uint32 =
   COND
    i = 0 -> h0,
    i = 1 -> h1,
    i = 2 -> h2,
    i = 3 -> h3,
    i = 4 -> h4,
    i = 5 -> h5,
    i = 6 -> h6,
    ELSE  -> h7
    ENDCOND
    

  k(i : uint8): uint32 =
   COND
    i = 0 -> 0x428a2f98,
    i = 1 -> 0x71374491,
    i = 2 -> 0xb5c0fbcf,
    i = 3 -> 0xe9b5dba5,
    i = 4 -> 0x3956c25b,
    i = 5 -> 0x59f111f1,
    i = 6 -> 0x923f82a4,
    i = 7 -> 0xab1c5ed5,
    i = 8 -> 0xd807aa98,
    i = 9 -> 0x12835b01,
    i = 10 -> 0x243185be,
    i = 11 -> 0x550c7dc3,
    i = 12 -> 0x72be5d74,
    i = 13 -> 0x80deb1fe,
    i = 14 -> 0x9bdc06a7,
    i = 15 -> 0xc19bf174,
    i = 16 -> 0xe49b69c1,
    i = 17 -> 0xefbe4786,
    i = 18 -> 0x0fc19dc6,
    i = 19 -> 0x240ca1cc,
    i = 20 -> 0x2de92c6f,
    i = 21 -> 0x4a7484aa,
    i = 22 -> 0x5cb0a9dc,
    i = 23 -> 0x76f988da,
    i = 24 -> 0x983e5152,
    i = 25 -> 0xa831c66d,
    i = 26 -> 0xb00327c8,
    i = 27 -> 0xbf597fc7,
    i = 28 -> 0xc6e00bf3,
    i = 29 -> 0xd5a79147,
    i = 30 -> 0x06ca6351,
    i = 31 -> 0x14292967,
    i = 32 -> 0x27b70a85,
    i = 33 -> 0x2e1b2138,
    i = 34 -> 0x4d2c6dfc,
    i = 35 -> 0x53380d13,
    i = 36 -> 0x650a7354,
    i = 37 -> 0x766a0abb,
    i = 38 -> 0x81c2c92e,
    i = 39 -> 0x92722c85,
    i = 40 -> 0xa2bfe8a1,
    i = 41 -> 0xa81a664b,
    i = 42 -> 0xc24b8b70,
    i = 43 -> 0xc76c51a3,
    i = 44 -> 0xd192e819,
    i = 45 -> 0xd6990624,
    i = 46 -> 0xf40e3585,
    i = 47 -> 0x106aa070,
    i = 48 -> 0x19a4c116,
    i = 49 -> 0x1e376c08,
    i = 50 -> 0x2748774c,
    i = 51 -> 0x34b0bcb5,
    i = 52 -> 0x391c0cb3,
    i = 53 -> 0x4ed8aa4a,
    i = 54 -> 0x5b9cca4f,
    i = 55 -> 0x682e6ff3,
    i = 56 -> 0x748f82ee,
    i = 57 -> 0x78a5636f,
    i = 58 -> 0x84c87814,
    i = 59 -> 0x8cc70208,
    i = 60 -> 0x90befffa,
    i = 61 -> 0xa4506ceb,
    i = 62 -> 0xbef9a3f7,
    ELSE -> 0xc67178f2
   ENDCOND

   X, Y, Z: VAR bytestring

   bytes2uint32(X, (i : below(X`length))): uint32
   = (IF i + 3 < X`length
      THEN u32lshift(get(X, i), 24) + u32lshift(get(X, i+1), 16) + u32lshift(get(X, i + 2), 8) + get(X, i+3)
      ELSIF i + 2 < X`length
      THEN u32lshift(get(X, i), 16) + u32lshift(get(X, i + 1), 8) + get(X, i + 2)
      ELSIF i + 1 < X`length
      THEN u32lshift(get(X, i), 8) + get(X, i + 1)
      ELSE get(X, i)
      ENDIF)

   equalUpto(X, Y, (i : uint32 | i <= min(X`length, Y`length))): bool =
    (FORALL (j: below(i)): X(j) = X(j))

   bytes2uint32array(X: bytestring): ARRAY[below(ceiling(X`length/4)) -> uint32]
   = (LAMBDA (j: below(ceiling(X`length/4))): bytes2uint32(X, 4*j))

    appendOne(X): {Y | Y`length = X`length + 1 AND equalUpto(X, Y, X`length) AND Y`seq(X`length) = 0X80}
    = X WITH [`length := X`length + 1, `seq(X`length) |-> 0x80]

   padMessage(X: bytestring): {Y: bytestring | (EXISTS (i: below(u32rshift(bytestring_bound, 9))): Y`length = u32lshift(i, 9))
                                      AND equalUpto(X, Y, X`length) AND (FORALL (i:below(Y`length)):  i >= X`length IMPLIES Y`seq(i) = 0X00)  }
   = (LET l = X`length,
          m = nrem(X`length, 512),
	  n = X`length + 512 - m
	IN IF m = 0 THEN X
	     ELSE (# length := n,
	             seq := (LAMBDA (i : below(n)): IF i < m THEN X`seq(i) ELSE 0x00 ENDIF)
		     #)
		     ENDIF)

%512 bits/64 bytes per block rendered as an array of 16 32-bit words
    extractBlocks(X)(i: below(ceiling((X`length + 9)/64))): ARRAY[below(16) -> uint32] = %no need to pad the message
     (LAMBDA (j: below(16)):
       LET cursor = 64*i + 4*j
        IN 
         (IF cursor + 3 < X`length
           THEN bytes2uint32(X, cursor)
           ELSIF cursor + 2 < X`length
	   THEN u32plus(u32lshift(bytes2uint32(X, cursor), 8), 0x80)
	   ELSIF cursor + 1 < X`length
	   THEN u32plus(u32lshift(bytes2uint32(X, cursor), 16), 0x8000)
	   ELSIF cursor < X`length
	   THEN u32plus(u32lshift(bytes2uint32(X, cursor), 24), 0x800000)
	   ELSIF cursor = X`length
	   THEN 0x80000000
	   ELSIF j = 14 THEN u64rshift(X`length, 32)
	   ELSIF j = 15 THEN u64rshift(u64lshift(X`length, 32), 32)
	   ELSE 0x00000000
       ENDIF))

     w0(inblock: ARRAY[below(16) -> uint32]): ARRAY[below(64) -> uint32]
     =
       (LAMBDA (i: below(64)):
         IF i < 16 THEN inblock(i)
	  ELSE 0x00000000
	  ENDIF)
	  
    print32(s: string, x: uint32): uint32 = 
        (LET d = printstr(s),
	     e = printstr(format(" ~a ", x))
	     IN x)

     extendW(v: ARRAY[below(64) -> uint32], i: subrange(16,64)): RECURSIVE ARRAY[below(64)->uint32]
     = IF i = 64 THEN v
        ELSE LET s0 = u32xor(u32xor(u32rightrotate(v(i - 15), 7), u32rightrotate(v(i-15), 18)),
	                     u32rshift(v(i-15), 3)),
	         s1 = u32xor(u32xor(u32rightrotate(v(i-2), 17), u32rightrotate(v(i-2), 19)),
		             u32rshift(v(i-2), 10)),
                 vi = print32(format(" v[~a] = ", i), u32plus(u32plus(v(i-16), s0), u32plus(v(i-7), s1)))
 		 IN extendW(v WITH [(i) := vi], i + 1)
	       ENDIF
       MEASURE 64 - i


     sha256rec(v: ARRAY[below(64) -> uint32], 
               g: ARRAY[below(8) -> uint32],
	       i : upto(64)) :
	    RECURSIVE ARRAY[below(8) -> uint32]
     = (IF i = 64 THEN g
          ELSE (LET S1 = print32("S1", u32xor(u32xor(print32("rr6: ", u32rightrotate(g(4), 6)), print32("rr11: ", u32rightrotate(g(4), 11))),
	                         print32("rr25: ",  u32rightrotate(g(4), 25)))),
                    ch = print32("ch", u32xor(u32and(g(4), g(5)), u32and(u32not(g(4)), g(6)))),
		    temp1 = print32("temp1", u32plus(g(7), u32plus(S1, u32plus(ch, u32plus(k(i), v(i)))))),
		    S0 = print32("S0", u32xor(u32xor(u32rightrotate(g(0), 2), u32rightrotate(g(0), 13)),
		                u32rightrotate(g(0), 22))),
		    maj = print32("maj", u32xor(u32xor(u32and(g(0), g(1)), u32and(g(0), g(2))), u32and(g(1), g(2)))),
		    temp2 = print32("temp2", u32plus(S0, maj))
		    IN sha256rec(v, g WITH [(7) := print32(" g7 = ~a ", g(6)),
		                            (6) := print32(" g6 = ~a ",  g(5)),
					    (5) := print32(" g5 = ~a ", g(4)),
					    (4) := print32(" g4 = ~a ", u32plus(g(3), temp1)),
					    (3) := print32(" g3 = ~a ", g(2)),
					    (2) := print32(" g2 = ~a ", g(1)),
					    (1) := print32(" g1 = ~a ", g(0)),
					    (0) := print32(" g0 = ~a", u32plus(temp1, temp2))], i+1))
	    ENDIF)
	    MEASURE 64 - i

sha256(v: ARRAY[below(64) -> uint32], 
       h: ARRAY[below(8) -> uint32]): ARRAY[below(8) -> uint32]
       =
       sha256rec(v, h, 0)

digest(h: ARRAY[below(8) -> uint32]): bytestring
 = u32tobytestring(h(0)) ++ u32tobytestring(h(1)) ++ u32tobytestring(h(2)) ++ u32tobytestring(h(3)) ++
   u32tobytestring(h(4)) ++ u32tobytestring(h(5)) ++ u32tobytestring(h(6)) ++ u32tobytestring(h(7))

H, G: VAR ARRAY[below(8) -> uint32]

printW(w: ARRAY[below(16) -> uint32], (i:upto(16))): RECURSIVE ARRAY[below(16) -> uint32]
 = (IF i = 16 THEN w
     ELSE (LET d =  print32("w(i) = ", w(i)) IN printW(w, i + 1))
     ENDIF)
     MEASURE 16 - i
 
printV(v: ARRAY[below(64) -> uint32], (i:upto(64))): RECURSIVE ARRAY[below(64) -> uint32]
 = (IF i = 64 THEN v
     ELSE (LET d =  print32("v(i) = ", v(i)) IN printV(v, i + 1))
     ENDIF)
     MEASURE 64 - i
 
     
sha256message_rec(X, (i : upto(ceiling((X`length + 9)/64))), H): RECURSIVE ARRAY[below(8) -> uint32]
  = IF i =  ceiling((X`length + 9)/64)
      THEN H
      ELSE LET w = printW(extractBlocks(X)(i), 0),
               v = printV(extendW(w, 16), 0),
               G = sha256(v, H),
	       H = H WITH [(0) := u32plus(H(0),G(0)), (1) := u32plus(H(1), G(1)), (2) := u32plus(H(2), G(2)), (3) := u32plus(H(3), G(3)),
	                   (4) := u32plus(H(4), G(4)), (5) := u32plus(H(5), G(5)), (6) := u32plus(H(6), G(6)), (7) := u32plus(H(7), G(7))]
	     IN sha256message_rec(X, i+1, H)
	     ENDIF
     MEASURE ceiling((X`length + 9)/64) - i
               
sha256message(X) : bytestring = digest(sha256message_rec(X, 0, h))

  END SHA256

$$$SHA256.prf
(SHA256
 (h1_TCC1 0
  (h1_TCC1-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (h1 subtype "0xbb67ae85" "uint32")))
 (h2_TCC1 0
  (h2_TCC1-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (h2 subtype "0x3c6ef372" "uint32")))
 (h3_TCC1 0
  (h3_TCC1-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (h3 subtype "0xa54ff53a" "uint32")))
 (h4_TCC1 0
  (h4_TCC1-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (h4 subtype "0x510e527f" "uint32")))
 (h5_TCC1 0
  (h5_TCC1-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (h5 subtype "0x9b05688c" "uint32")))
 (h6_TCC1 0
  (h6_TCC1-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (h6 subtype "0x1f83d9ab" "uint32")))
 (h7_TCC1 0
  (h7_TCC1-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (h7 subtype "0x5be0cd19" "uint32")))
 (k_TCC1 0
  (k_TCC1-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x428a2f98" "uint32")))
 (k_TCC2 0
  (k_TCC2-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x71374491" "uint32")))
 (k_TCC3 0
  (k_TCC3-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0xb5c0fbcf" "uint32")))
 (k_TCC4 0
  (k_TCC4-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0xe9b5dba5" "uint32")))
 (k_TCC5 0
  (k_TCC5-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x3956c25b" "uint32")))
 (k_TCC6 0
  (k_TCC6-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x59f111f1" "uint32")))
 (k_TCC7 0
  (k_TCC7-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x923f82a4" "uint32")))
 (k_TCC8 0
  (k_TCC8-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0xab1c5ed5" "uint32")))
 (k_TCC9 0
  (k_TCC9-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0xd807aa98" "uint32")))
 (k_TCC10 0
  (k_TCC10-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x12835b01" "uint32")))
 (k_TCC11 0
  (k_TCC11-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x243185be" "uint32")))
 (k_TCC12 0
  (k_TCC12-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x550c7dc3" "uint32")))
 (k_TCC13 0
  (k_TCC13-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x72be5d74" "uint32")))
 (k_TCC14 0
  (k_TCC14-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x80deb1fe" "uint32")))
 (k_TCC15 0
  (k_TCC15-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x9bdc06a7" "uint32")))
 (k_TCC16 0
  (k_TCC16-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0xc19bf174" "uint32")))
 (k_TCC17 0
  (k_TCC17-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0xe49b69c1" "uint32")))
 (k_TCC18 0
  (k_TCC18-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0xefbe4786" "uint32")))
 (k_TCC19 0
  (k_TCC19-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0xfc19dc6" "uint32")))
 (k_TCC20 0
  (k_TCC20-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x240ca1cc" "uint32")))
 (k_TCC21 0
  (k_TCC21-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x2de92c6f" "uint32")))
 (k_TCC22 0
  (k_TCC22-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x4a7484aa" "uint32")))
 (k_TCC23 0
  (k_TCC23-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x5cb0a9dc" "uint32")))
 (k_TCC24 0
  (k_TCC24-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x76f988da" "uint32")))
 (k_TCC25 0
  (k_TCC25-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x983e5152" "uint32")))
 (k_TCC26 0
  (k_TCC26-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0xa831c66d" "uint32")))
 (k_TCC27 0
  (k_TCC27-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0xb00327c8" "uint32")))
 (k_TCC28 0
  (k_TCC28-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0xbf597fc7" "uint32")))
 (k_TCC29 0
  (k_TCC29-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0xc6e00bf3" "uint32")))
 (k_TCC30 0
  (k_TCC30-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0xd5a79147" "uint32")))
 (k_TCC31 0
  (k_TCC31-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x6ca6351" "uint32")))
 (k_TCC32 0
  (k_TCC32-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x14292967" "uint32")))
 (k_TCC33 0
  (k_TCC33-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x27b70a85" "uint32")))
 (k_TCC34 0
  (k_TCC34-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x2e1b2138" "uint32")))
 (k_TCC35 0
  (k_TCC35-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x4d2c6dfc" "uint32")))
 (k_TCC36 0
  (k_TCC36-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x53380d13" "uint32")))
 (k_TCC37 0
  (k_TCC37-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x650a7354" "uint32")))
 (k_TCC38 0
  (k_TCC38-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x766a0abb" "uint32")))
 (k_TCC39 0
  (k_TCC39-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x81c2c92e" "uint32")))
 (k_TCC40 0
  (k_TCC40-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x92722c85" "uint32")))
 (k_TCC41 0
  (k_TCC41-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0xa2bfe8a1" "uint32")))
 (k_TCC42 0
  (k_TCC42-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0xa81a664b" "uint32")))
 (k_TCC43 0
  (k_TCC43-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0xc24b8b70" "uint32")))
 (k_TCC44 0
  (k_TCC44-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0xc76c51a3" "uint32")))
 (k_TCC45 0
  (k_TCC45-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0xd192e819" "uint32")))
 (k_TCC46 0
  (k_TCC46-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0xd6990624" "uint32")))
 (k_TCC47 0
  (k_TCC47-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0xf40e3585" "uint32")))
 (k_TCC48 0
  (k_TCC48-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x106aa070" "uint32")))
 (k_TCC49 0
  (k_TCC49-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x19a4c116" "uint32")))
 (k_TCC50 0
  (k_TCC50-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x1e376c08" "uint32")))
 (k_TCC51 0
  (k_TCC51-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x2748774c" "uint32")))
 (k_TCC52 0
  (k_TCC52-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x34b0bcb5" "uint32")))
 (k_TCC53 0
  (k_TCC53-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x391c0cb3" "uint32")))
 (k_TCC54 0
  (k_TCC54-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x4ed8aa4a" "uint32")))
 (k_TCC55 0
  (k_TCC55-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x5b9cca4f" "uint32")))
 (k_TCC56 0
  (k_TCC56-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x682e6ff3" "uint32")))
 (k_TCC57 0
  (k_TCC57-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x748f82ee" "uint32")))
 (k_TCC58 0
  (k_TCC58-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x78a5636f" "uint32")))
 (k_TCC59 0
  (k_TCC59-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x84c87814" "uint32")))
 (k_TCC60 0
  (k_TCC60-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x8cc70208" "uint32")))
 (k_TCC61 0
  (k_TCC61-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0x90befffa" "uint32")))
 (k_TCC62 0
  (k_TCC62-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0xa4506ceb" "uint32")))
 (k_TCC63 0
  (k_TCC63-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0xbef9a3f7" "uint32")))
 (k_TCC64 0
  (k_TCC64-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (k subtype "0xc67178f2" "uint32")))
 (bytes2uint32_TCC1 0
  (bytes2uint32_TCC1-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil
   nil
   (bytes2uint32 subtype "bytestrings.get(SHA256.X, SHA256.i)"
    "uint32")))
 (bytes2uint32_TCC2 0
  (bytes2uint32_TCC2-1 nil 3827348879 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (bytes2uint32 subtype "(number_fields.+)(SHA256.i, 1)"
    "naturalnumbers.below(length(SHA256.X))")))
 (bytes2uint32_TCC3 0
  (bytes2uint32_TCC3-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil
   nil
   (bytes2uint32 subtype
    "bytestrings.get(SHA256.X, (number_fields.+)(SHA256.i, 1))"
    "uint32")))
 (bytes2uint32_TCC4 0
  (bytes2uint32_TCC4-1 nil 3827348879 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (bytes2uint32 subtype "(number_fields.+)(SHA256.i, 2)"
    "naturalnumbers.below(length(SHA256.X))")))
 (bytes2uint32_TCC5 0
  (bytes2uint32_TCC5-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil
   nil
   (bytes2uint32 subtype
    "bytestrings.get(SHA256.X, (number_fields.+)(SHA256.i, 2))"
    "uint32")))
 (bytes2uint32_TCC6 0
  (bytes2uint32_TCC6-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil
   nil
   (bytes2uint32 subtype
    "(number_fields.+)((number_fields.+)((number_fields.+)(integertypes.u32lshift(bytestrings.get(SHA256.X, SHA256.i), 24), integertypes.u32lshift(bytestrings.get(SHA256.X, (number_fields.+)(SHA256.i, 1)), 16)), integertypes.u32lshift(bytestrings.get(SHA256.X, (number_fields.+)(SHA256.i, 2)), 8)), bytestrings.get(SHA256.X, (number_fields.+)(SHA256.i, 3)))"
    "uint32")))
 (bytes2uint32_TCC7 0
  (bytes2uint32_TCC7-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil
   nil
   (bytes2uint32 subtype "bytestrings.get(SHA256.X, SHA256.i)"
    "uint32")))
 (bytes2uint32_TCC8 0
  (bytes2uint32_TCC8-1 nil 3827348879 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (bytes2uint32 subtype "(number_fields.+)(SHA256.i, 1)"
    "naturalnumbers.below(length(SHA256.X))")))
 (bytes2uint32_TCC9 0
  (bytes2uint32_TCC9-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil
   nil
   (bytes2uint32 subtype
    "bytestrings.get(SHA256.X, (number_fields.+)(SHA256.i, 1))"
    "uint32")))
 (bytes2uint32_TCC10 0
  (bytes2uint32_TCC10-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil
   nil
   (bytes2uint32 subtype
    "(number_fields.+)((number_fields.+)(integertypes.u32lshift(bytestrings.get(SHA256.X, SHA256.i), 16), integertypes.u32lshift(bytestrings.get(SHA256.X, (number_fields.+)(SHA256.i, 1)), 8)), bytestrings.get(SHA256.X, (number_fields.+)(SHA256.i, 2)))"
    "uint32")))
 (bytes2uint32_TCC11 0
  (bytes2uint32_TCC11-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil
   nil
   (bytes2uint32 subtype "bytestrings.get(SHA256.X, SHA256.i)"
    "uint32")))
 (bytes2uint32_TCC12 0
  (bytes2uint32_TCC12-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil
   nil
   (bytes2uint32 subtype
    "(number_fields.+)(integertypes.u32lshift(bytestrings.get(SHA256.X, SHA256.i), 8), bytestrings.get(SHA256.X, (number_fields.+)(SHA256.i, 1)))"
    "uint32")))
 (bytes2uint32_TCC13 0
  (bytes2uint32_TCC13-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil
   nil
   (bytes2uint32 subtype "bytestrings.get(SHA256.X, SHA256.i)"
    "uint32")))
 (equalUpto_TCC1 0
  (equalUpto_TCC1-1 nil 3827348879 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (< const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (equalUpto subtype "SHA256.j" "below[length(X)]")))
 (bytes2uint32array_TCC1 0
  (bytes2uint32array_TCC1-1 nil 3827348879 ("" (subtype-tcc) nil nil)
   ((nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (bytes2uint32array subtype "number_fields.*(4, SHA256.j)"
    "naturalnumbers.below(SHA256.X`length)")))
 (padMessage_TCC1 0
  (padMessage_TCC1-1 nil 3827348879 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (u32rshift const-decl "uint32" integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (padMessage subtype "SHA256.i" "uint32")))
 (padMessage_TCC2 0
  (padMessage_TCC2-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (padMessage subtype "SHA256.X`length"
    "{i: integertypes.uint32 | reals.<=(i, real_defs.min(SHA256.X`length, SHA256.Y`length))}")))
 (padMessage_TCC3 0
  (padMessage_TCC3-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (padMessage subtype "SHA256.X"
    "{Y: bytestrings.bytestring | booleans.AND(EXISTS (i: naturalnumbers.below(integertypes.u32rshift(0x100000000, 9))): Y`length = integertypes.u32lshift(i, 9), booleans.AND(SHA256.equalUpto(SHA256.X, Y, SHA256.X`length), FORALL (i: naturalnumbers.below(Y`length)): booleans.IMPLIES(reals.>=(i, SHA256.X`length), Y`seq(i) = 0x0)))}")))
 (padMessage_TCC4 0
  (padMessage_TCC4-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (padMessage subtype "SHA256.n"
    "naturalnumbers.below(0x100000000)")))
 (padMessage_TCC5 0
  (padMessage_TCC5-1 nil 3827348879 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (padMessage subtype "SHA256.i"
    "naturalnumbers.below(SHA256.X`length)")))
 (padMessage_TCC6 0
  (padMessage_TCC6-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (padMessage subtype
    "(# length := SHA256.n, seq := (LAMBDA (i: naturalnumbers.below(SHA256.n)): IF reals.<(i, SHA256.m) THEN SHA256.X`seq(i) ELSE 0x0 ENDIF) #)"
    "{Y: bytestrings.bytestring | booleans.AND(EXISTS (i: naturalnumbers.below(integertypes.u32rshift(0x100000000, 9))): Y`length = integertypes.u32lshift(i, 9), booleans.AND(SHA256.equalUpto(SHA256.X, Y, SHA256.X`length), FORALL (i: naturalnumbers.below(Y`length)): booleans.IMPLIES(reals.>=(i, SHA256.X`length), Y`seq(i) = 0x0)))}")))
 (appendOne_TCC1 0
  (appendOne_TCC1-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (appendOne subtype "SHA256.X`length"
    "{i: integertypes.uint32 | reals.<=(i, real_defs.min(SHA256.X`length, SHA256.Y`length))}")))
 (appendOne_TCC2 0
  (appendOne_TCC2-1 nil 3827348879 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (equalUpto const-decl "bool" SHA256 nil))
   nil
   (appendOne subtype "SHA256.X`length"
    "naturalnumbers.below(SHA256.Y`length)")))
 (appendOne_TCC3 0
  (appendOne_TCC3-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (appendOne subtype "SHA256.X`length"
    "naturalnumbers.below(SHA256.X`length)")))
 (appendOne_TCC4 0
  (appendOne_TCC4-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (appendOne subtype "SHA256.X WITH [`seq(SHA256.X`length) |-> 0x80]"
    "{Y | booleans.AND(SHA256.Y`length = (number_fields.+)(1, SHA256.X`length), booleans.AND(SHA256.equalUpto(SHA256.X, SHA256.Y, SHA256.X`length), SHA256.Y`seq(SHA256.X`length) = 0x80))}")))
 (extractBlocks_TCC1 0
  (extractBlocks_TCC1-1 nil 3827348879 ("" (subtype-tcc) nil nil)
   ((nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (extractBlocks subtype "0x0" "uint32")))
 (w0_TCC1 0
  (w0_TCC1-1 nil 3827348879 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (w0 subtype "0x0" "uint32")))
 (extendW_TCC1 0
  (extendW_TCC1-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (extendW subtype "(number_fields.-)(64, SHA256.i)"
    "naturalnumber")))
 (extendW_TCC2 0
  (extendW_TCC2-1 nil 3827348879 ("" (subtype-tcc) nil nil)
   ((u32lshift const-decl "uint32" integertypes nil)
    (u32rshift const-decl "uint32" integertypes nil)
    (max32 const-decl "uint32" integertypes nil)
    (u32rightrotate const-decl "uint32" rotate nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (u32xor const-decl "uint32" rotate nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (extendW subtype "(number_fields.-)(SHA256.i, 2)"
    "naturalnumbers.below(64)")))
 (extendW_TCC3 0
  (extendW_TCC3-1 nil 3827348879 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (u32rshift const-decl "uint32" integertypes nil)
    (max32 const-decl "uint32" integertypes nil)
    (u32rightrotate const-decl "uint32" rotate nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (u32xor const-decl "uint32" rotate nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil (extendW subtype "SHA256.i" "naturalnumbers.below(64)")))
 (extendW_TCC4 0
  (extendW_TCC4-1 nil 3827348879 ("" (subtype-tcc) nil nil)
   ((u32lshift const-decl "uint32" integertypes nil)
    (u32rshift const-decl "uint32" integertypes nil)
    (max32 const-decl "uint32" integertypes nil)
    (u32rightrotate const-decl "uint32" rotate nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (u32xor const-decl "uint32" rotate nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (extendW subtype "(number_fields.-)(SHA256.i, 16)"
    "naturalnumbers.below(64)")))
 (extendW_TCC5 0
  (extendW_TCC5-1 nil 3827348879 ("" (subtype-tcc) nil nil)
   ((u32lshift const-decl "uint32" integertypes nil)
    (u32rshift const-decl "uint32" integertypes nil)
    (max32 const-decl "uint32" integertypes nil)
    (u32rightrotate const-decl "uint32" rotate nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (u32xor const-decl "uint32" rotate nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (extendW subtype "(number_fields.-)(SHA256.i, 7)"
    "naturalnumbers.below(64)")))
 (extendW_TCC6 0
  (extendW_TCC6-1 nil 3827348879 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (u32rshift const-decl "uint32" integertypes nil)
    (max32 const-decl "uint32" integertypes nil)
    (u32rightrotate const-decl "uint32" rotate nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (u32xor const-decl "uint32" rotate nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (extendW subtype "(number_fields.+)(SHA256.i, 1)"
    "integers.subrange(16, 64)")))
 (extendW_TCC7 0
  (extendW_TCC7-1 nil 3827348879
   ("" (skeep*) (("" (hide -) (("" (assert) nil nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (extendW termination
    "SHA256.extendW(SHA256.w WITH [(SHA256.i) := integertypes.u32plus(integertypes.u32plus(SHA256.w((number_fields.-)(SHA256.i, 16)), SHA256.s0), integertypes.u32plus(SHA256.w((number_fields.-)(SHA256.i, 7)), SHA256.s1))], (number_fields.+)(SHA256.i, 1))"
    "nil")))
 (extendW_TCC8 0
  (extendW_TCC8-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (extendW subtype "(number_fields.-)(SHA256.i, 15)"
    "naturalnumbers.below(64)")))
 (sha256rec_TCC1 0
  (sha256rec_TCC1-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (sha256rec subtype "(number_fields.-)(64, SHA256.i)"
    "naturalnumber")))
 (sha256rec_TCC2 0
  (sha256rec_TCC2-1 nil 3827348879
   ("" (subtype-tcc) (("" (hide -) (("" (grind) nil nil)) nil)) nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (uint32 type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (u32not const-decl "uint32" rotate nil)
    (u32and const-decl "uint32" rotate nil)
    (u32xor const-decl "uint32" rotate nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (u32rightrotate const-decl "uint32" rotate nil)
    (max32 const-decl "uint32" integertypes nil)
    (u32rshift const-decl "uint32" integertypes nil)
    (u32lshift const-decl "uint32" integertypes nil))
   nil (sha256rec subtype "SHA256.i" "uint8")))
 (sha256rec_TCC3 0
  (sha256rec_TCC3-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (sha256rec subtype "SHA256.i" "naturalnumbers.below(64)")))
 (sha256rec_TCC4 0
  (sha256rec_TCC4-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (sha256rec subtype "(number_fields.+)(SHA256.i, 1)"
    "naturalnumbers.upto(64)")))
 (sha256rec_TCC5 0
  (sha256rec_TCC5-1 nil 3827348879 ("" (termination-tcc) nil nil) nil
   nil
   (sha256rec termination
    "SHA256.sha256rec(SHA256.w, SHA256.g WITH [(7) := SHA256.g(6), (6) := SHA256.g(5), (5) := SHA256.g(4), (4) := integertypes.u32plus(SHA256.g(3), SHA256.temp1), (3) := SHA256.g(2), (2) := SHA256.g(1), (1) := SHA256.g(0), (0) := integertypes.u32plus(SHA256.temp1, SHA256.temp2)], (number_fields.+)(SHA256.i, 1))"
    "nil")))
 (digest_TCC1 0
  (digest_TCC1-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (digest subtype "rotate.u32tobytestring(SHA256.h(1))"
    "{s2 | reals.<((number_fields.+)(bytestrings.s2`length, rotate.u32tobytestring(SHA256.h(0))`length), 0x100000000)}")))
 (digest_TCC2 0
  (digest_TCC2-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (digest subtype "rotate.u32tobytestring(SHA256.h(2))"
    "{s2 | reals.<((number_fields.+)(bytestrings.s2`length, (bytestrings.++(rotate.u32tobytestring(SHA256.h(0)), rotate.u32tobytestring(SHA256.h(1))))`length), 0x100000000)}")))
 (digest_TCC3 0
  (digest_TCC3-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (digest subtype "rotate.u32tobytestring(SHA256.h(3))"
    "{s2 | reals.<((number_fields.+)(bytestrings.s2`length, (bytestrings.++(bytestrings.++(rotate.u32tobytestring(SHA256.h(0)), rotate.u32tobytestring(SHA256.h(1))), rotate.u32tobytestring(SHA256.h(2))))`length), 0x100000000)}")))
 (digest_TCC4 0
  (digest_TCC4-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (digest subtype "rotate.u32tobytestring(SHA256.h(4))"
    "{s2 | reals.<((number_fields.+)(bytestrings.s2`length, (bytestrings.++(bytestrings.++(bytestrings.++(rotate.u32tobytestring(SHA256.h(0)), rotate.u32tobytestring(SHA256.h(1))), rotate.u32tobytestring(SHA256.h(2))), rotate.u32tobytestring(SHA256.h(3))))`length), 0x100000000)}")))
 (digest_TCC5 0
  (digest_TCC5-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (digest subtype "rotate.u32tobytestring(SHA256.h(5))"
    "{s2 | reals.<((number_fields.+)(bytestrings.s2`length, (bytestrings.++(bytestrings.++(bytestrings.++(bytestrings.++(rotate.u32tobytestring(SHA256.h(0)), rotate.u32tobytestring(SHA256.h(1))), rotate.u32tobytestring(SHA256.h(2))), rotate.u32tobytestring(SHA256.h(3))), rotate.u32tobytestring(SHA256.h(4))))`length), 0x100000000)}")))
 (digest_TCC6 0
  (digest_TCC6-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (digest subtype "rotate.u32tobytestring(SHA256.h(6))"
    "{s2 | reals.<((number_fields.+)(bytestrings.s2`length, (bytestrings.++(bytestrings.++(bytestrings.++(bytestrings.++(bytestrings.++(rotate.u32tobytestring(SHA256.h(0)), rotate.u32tobytestring(SHA256.h(1))), rotate.u32tobytestring(SHA256.h(2))), rotate.u32tobytestring(SHA256.h(3))), rotate.u32tobytestring(SHA256.h(4))), rotate.u32tobytestring(SHA256.h(5))))`length), 0x100000000)}")))
 (digest_TCC7 0
  (digest_TCC7-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil
   (digest subtype "rotate.u32tobytestring(SHA256.h(7))"
    "{s2 | reals.<((number_fields.+)(bytestrings.s2`length, (bytestrings.++(bytestrings.++(bytestrings.++(bytestrings.++(bytestrings.++(bytestrings.++(rotate.u32tobytestring(SHA256.h(0)), rotate.u32tobytestring(SHA256.h(1))), rotate.u32tobytestring(SHA256.h(2))), rotate.u32tobytestring(SHA256.h(3))), rotate.u32tobytestring(SHA256.h(4))), rotate.u32tobytestring(SHA256.h(5))), rotate.u32tobytestring(SHA256.h(6))))`length), 0x100000000)}"))))

