//Code generated using pvs2ir
#ifndef _SHA256_h 
#define _SHA256_h

#include <stdio.h>

#include <stdlib.h>

#include <inttypes.h>

#include <stdbool.h>

#include <stdarg.h>

#include <string.h>

#include <math.h>

#include <gmp.h>

#include "pvslib.h"

#include "bytestrings_c.h"

#include "gen_strings_c.h"

#include "strings_c.h"

#include "ordinals_c.h"

#include "ordstruct_adt_c.h"

#include "integer_bv_ops_c.h"

#include "bv_c.h"

#include "bit_c.h"

#include "integertypes_c.h"

#include "exp2_c.h"

#include "euclidean_division_c.h"

#include "real_defs_c.h"

#include "rotate_c.h"

//cc -O3 -Wall -o SHA256 -I /Users/e21660/shankar/pvs.git/src/groundeval/ /Users/e21660/shankar/pvs.git/src/groundeval/pvslib.c  -I /Users/e21660/shankar/pvs.git/lib /Users/e21660/shankar/pvs.git/lib/bytestrings_c.c /Users/e21660/shankar/pvs.git/lib/gen_strings_c.c /Users/e21660/shankar/pvs.git/lib/strings_c.c /Users/e21660/shankar/pvs.git/lib/ordinals_c.c /Users/e21660/shankar/pvs.git/lib/ordstruct_adt_c.c /Users/e21660/shankar/pvs.git/lib/integer_bv_ops_c.c /Users/e21660/shankar/pvs.git/lib/bv_c.c /Users/e21660/shankar/pvs.git/lib/bit_c.c /Users/e21660/shankar/pvs.git/lib/integertypes_c.c /Users/e21660/shankar/pvs.git/lib/exp2_c.c /Users/e21660/shankar/pvs.git/lib/euclidean_division_c.c /Users/e21660/shankar/pvs.git/lib/real_defs_c.c SHA256_c.c rotate_c.c -lgmp 

struct SHA256_funtype_0_s;
        typedef struct SHA256_funtype_0_s * SHA256_funtype_0_t;

struct SHA256_funtype_0_ftbl_s {uint32_t (* fptr)(struct SHA256_funtype_0_s *, mpz_ptr_t);
        uint32_t (* mptr)(struct SHA256_funtype_0_s *, mpz_ptr_t);
        void (* rptr)(struct SHA256_funtype_0_s *);
        struct SHA256_funtype_0_s * (* cptr)(struct SHA256_funtype_0_s *);};
typedef struct SHA256_funtype_0_ftbl_s * SHA256_funtype_0_ftbl_t;

struct SHA256_funtype_0_hashentry_s {uint32_t keyhash; mpz_ptr_t key; uint32_t value;}; 
typedef struct SHA256_funtype_0_hashentry_s SHA256_funtype_0_hashentry_t;

struct SHA256_funtype_0_htbl_s {uint32_t size; uint32_t num_entries; SHA256_funtype_0_hashentry_t * data;}; 
typedef struct SHA256_funtype_0_htbl_s * SHA256_funtype_0_htbl_t;

struct SHA256_funtype_0_s {uint32_t count;
        SHA256_funtype_0_ftbl_t ftbl;
        SHA256_funtype_0_htbl_t htbl;};
typedef struct SHA256_funtype_0_s * SHA256_funtype_0_t;

extern void release_SHA256_funtype_0(SHA256_funtype_0_t x);

extern SHA256_funtype_0_t copy_SHA256_funtype_0(SHA256_funtype_0_t x);

uint32_t lookup_SHA256_funtype_0(SHA256_funtype_0_htbl_t htbl, mpz_ptr_t i, uint32_t ihash);

SHA256_funtype_0_t dupdate_SHA256_funtype_0(SHA256_funtype_0_t a, mpz_ptr_t i, uint32_t v);

extern SHA256_funtype_0_t update_SHA256_funtype_0(SHA256_funtype_0_t a, mpz_ptr_t i, uint32_t v);

extern SHA256_funtype_0_t equal_SHA256_funtype_0(SHA256_funtype_0_t x, SHA256_funtype_0_t y);




struct SHA256_closure_1_s;
        typedef struct SHA256_closure_1_s * SHA256_closure_1_t;

struct SHA256_closure_1_s {uint32_t count;
         SHA256_funtype_0_ftbl_t ftbl;
         SHA256_funtype_0_htbl_t htbl;
        bytestrings__bytestring_t fvar_1;};

uint32_t f_SHA256_closure_1(struct SHA256_closure_1_s * closure, mpz_ptr_t bvar);

uint32_t m_SHA256_closure_1(struct SHA256_closure_1_s * closure, mpz_ptr_t bvar);

extern uint32_t h_SHA256_closure_1(mpz_ptr_t ivar_8, bytestrings__bytestring_t ivar_1);

extern SHA256_closure_1_t new_SHA256_closure_1(void);

extern void release_SHA256_closure_1(SHA256_funtype_0_t closure);

extern SHA256_closure_1_t copy_SHA256_closure_1(SHA256_closure_1_t x);



struct SHA256_array_2_s { uint32_t count;
        uint32_t size;
         uint32_t max;
         uint8_t elems[]; };
typedef struct SHA256_array_2_s * SHA256_array_2_t;

extern SHA256_array_2_t new_SHA256_array_2(uint32_t size);

extern void release_SHA256_array_2(SHA256_array_2_t x);

extern SHA256_array_2_t copy_SHA256_array_2(SHA256_array_2_t x);

extern bool_t equal_SHA256_array_2(SHA256_array_2_t x, SHA256_array_2_t y);
typedef struct actual_SHA256_array_2_s {equal_ptr_t equal_ptr; release_ptr_t release_ptr;} * actual_SHA256_array_2_t;

void release_SHA256_array_2_ptr(pointer_t x, type_actual_t SHA256_array_2);
extern bool_t equal_SHA256_array_2_ptr(pointer_t x, pointer_t y, type_actual_t T);

actual_SHA256_array_2_t actual_SHA256_array_2(void);

extern SHA256_array_2_t update_SHA256_array_2(SHA256_array_2_t x, uint32_t i, uint8_t v);

extern SHA256_array_2_t upgrade_SHA256_array_2(SHA256_array_2_t x, uint32_t i, uint8_t v);



struct SHA256_record_3_s {
        uint32_t count; 
        uint32_t length;
        SHA256_array_2_t seq;};
typedef struct SHA256_record_3_s * SHA256_record_3_t;

extern SHA256_record_3_t new_SHA256_record_3(void);

extern void release_SHA256_record_3(SHA256_record_3_t x);

extern SHA256_record_3_t copy_SHA256_record_3(SHA256_record_3_t x);

extern bool_t equal_SHA256_record_3(SHA256_record_3_t x, SHA256_record_3_t y);
typedef struct actual_SHA256_record_3_s {equal_ptr_t equal_ptr; release_ptr_t release_ptr;} * actual_SHA256_record_3_t;

void release_SHA256_record_3_ptr(pointer_t x, type_actual_t SHA256_record_3);
extern bool_t equal_SHA256_record_3_ptr(pointer_t x, pointer_t y, actual_SHA256_record_3_t T);

actual_SHA256_record_3_t actual_SHA256_record_3(void);

extern SHA256_record_3_t update_SHA256_record_3_length(SHA256_record_3_t x, uint32_t v);

extern SHA256_record_3_t update_SHA256_record_3_seq(SHA256_record_3_t x, SHA256_array_2_t v);



struct SHA256_array_4_s { uint32_t count;
        uint32_t size;
         uint32_t max;
         uint32_t elems[]; };
typedef struct SHA256_array_4_s * SHA256_array_4_t;

extern SHA256_array_4_t new_SHA256_array_4(uint32_t size);

extern void release_SHA256_array_4(SHA256_array_4_t x);

extern SHA256_array_4_t copy_SHA256_array_4(SHA256_array_4_t x);

extern bool_t equal_SHA256_array_4(SHA256_array_4_t x, SHA256_array_4_t y);
typedef struct actual_SHA256_array_4_s {equal_ptr_t equal_ptr; release_ptr_t release_ptr;} * actual_SHA256_array_4_t;

void release_SHA256_array_4_ptr(pointer_t x, type_actual_t SHA256_array_4);
extern bool_t equal_SHA256_array_4_ptr(pointer_t x, pointer_t y, type_actual_t T);

actual_SHA256_array_4_t actual_SHA256_array_4(void);

extern SHA256_array_4_t update_SHA256_array_4(SHA256_array_4_t x, uint32_t i, uint32_t v);

extern SHA256_array_4_t upgrade_SHA256_array_4(SHA256_array_4_t x, uint32_t i, uint32_t v);



struct SHA256_funtype_5_s;
        typedef struct SHA256_funtype_5_s * SHA256_funtype_5_t;

struct SHA256_funtype_5_ftbl_s {SHA256_array_4_t (* fptr)(struct SHA256_funtype_5_s *, mpz_ptr_t);
        SHA256_array_4_t (* mptr)(struct SHA256_funtype_5_s *, mpz_ptr_t);
        void (* rptr)(struct SHA256_funtype_5_s *);
        struct SHA256_funtype_5_s * (* cptr)(struct SHA256_funtype_5_s *);};
typedef struct SHA256_funtype_5_ftbl_s * SHA256_funtype_5_ftbl_t;

struct SHA256_funtype_5_hashentry_s {uint32_t keyhash; mpz_ptr_t key; SHA256_array_4_t value;}; 
typedef struct SHA256_funtype_5_hashentry_s SHA256_funtype_5_hashentry_t;

struct SHA256_funtype_5_htbl_s {uint32_t size; uint32_t num_entries; SHA256_funtype_5_hashentry_t * data;}; 
typedef struct SHA256_funtype_5_htbl_s * SHA256_funtype_5_htbl_t;

struct SHA256_funtype_5_s {uint32_t count;
        SHA256_funtype_5_ftbl_t ftbl;
        SHA256_funtype_5_htbl_t htbl;};
typedef struct SHA256_funtype_5_s * SHA256_funtype_5_t;

extern void release_SHA256_funtype_5(SHA256_funtype_5_t x);

extern SHA256_funtype_5_t copy_SHA256_funtype_5(SHA256_funtype_5_t x);

uint32_t lookup_SHA256_funtype_5(SHA256_funtype_5_htbl_t htbl, mpz_ptr_t i, uint32_t ihash);

SHA256_funtype_5_t dupdate_SHA256_funtype_5(SHA256_funtype_5_t a, mpz_ptr_t i, SHA256_array_4_t v);

extern SHA256_funtype_5_t update_SHA256_funtype_5(SHA256_funtype_5_t a, mpz_ptr_t i, SHA256_array_4_t v);

extern SHA256_funtype_5_t equal_SHA256_funtype_5(SHA256_funtype_5_t x, SHA256_funtype_5_t y);




struct SHA256_closure_6_s;
        typedef struct SHA256_closure_6_s * SHA256_closure_6_t;

struct SHA256_closure_6_s {uint32_t count;
         SHA256_funtype_5_ftbl_t ftbl;
         SHA256_funtype_5_htbl_t htbl;
        SHA256_record_3_t fvar_1;};

SHA256_array_4_t f_SHA256_closure_6(struct SHA256_closure_6_s * closure, mpz_ptr_t bvar);

SHA256_array_4_t m_SHA256_closure_6(struct SHA256_closure_6_s * closure, mpz_ptr_t bvar);

extern SHA256_array_4_t h_SHA256_closure_6(mpz_ptr_t ivar_12, SHA256_record_3_t ivar_1);

extern SHA256_closure_6_t new_SHA256_closure_6(void);

extern void release_SHA256_closure_6(SHA256_funtype_5_t closure);

extern SHA256_closure_6_t copy_SHA256_closure_6(SHA256_closure_6_t x);



extern uint32_t SHA256__h0(void);

extern uint32_t SHA256__h1(void);

extern uint32_t SHA256__h2(void);

extern uint32_t SHA256__h3(void);

extern uint32_t SHA256__h4(void);

extern uint32_t SHA256__h5(void);

extern uint32_t SHA256__h6(void);

extern uint32_t SHA256__h7(void);

extern uint32_t SHA256__h(uint8_t ivar_1);

extern uint32_t SHA256__k(uint8_t ivar_1);

extern uint32_t SHA256__bytes2uint32(bytestrings__bytestring_t ivar_1, uint32_t ivar_2);

extern bool_t SHA256__equalUpto(bytestrings__bytestring_t ivar_1, bytestrings__bytestring_t ivar_2, uint32_t ivar_3);

extern SHA256_funtype_0_t SHA256__bytes2uint32array(bytestrings__bytestring_t ivar_1);

extern bytestrings__bytestring_t SHA256__padMessage(bytestrings__bytestring_t ivar_1);

extern SHA256_funtype_5_t SHA256__extractBlocks(SHA256_record_3_t ivar_1);

extern SHA256_array_4_t SHA256__w0(SHA256_array_4_t ivar_1);

extern SHA256_array_4_t SHA256__extendW(SHA256_array_4_t ivar_1, uint8_t ivar_2);

extern SHA256_array_4_t SHA256__sha256rec(SHA256_array_4_t ivar_1, SHA256_array_4_t ivar_2, uint8_t ivar_3);

extern SHA256_array_4_t SHA256__sha256(SHA256_array_4_t ivar_1, SHA256_array_4_t ivar_2);

extern SHA256_record_3_t SHA256__digest(SHA256_array_4_t ivar_1);

extern SHA256_array_4_t SHA256__updateHash(SHA256_array_4_t ivar_1, SHA256_array_4_t ivar_2);

extern SHA256_array_4_t SHA256__sha256message_rec(SHA256_record_3_t ivar_1, mpz_ptr_t ivar_2, SHA256_array_4_t ivar_12);

extern SHA256_record_3_t SHA256__sha256message(SHA256_record_3_t ivar_1);
#endif