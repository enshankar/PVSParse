(arrayCount
 (count_TCC1 0
  (count_TCC1-1 nil 3798315575
   ("" (skeep)
    (("" (expand "is_finite")
      (("" (inst + "len" "id")
        (("" (typepred "id")
          (("" (expand "bijective?") (("" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (arr type-eq-decl nil arrayCount nil)
    (T formal-type-decl nil arrayCount nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (count subtype
          "{i: naturalnumbers.below(arrayCount.len) | arrayCount.P(arrayCount.A(i))}"
     "finite_set[below(len)]")))
 (count_TCC2 0
  (count_TCC2-1 nil 3798315575
   ("" (skeep)
    (("" (typepred "card[below(len)]({i: below(len) | P(A(i))})")
      (("1" (replace -1 :hide? t)
        (("1" (rewrite "Card_injection")
          (("1" (inst + "id")
            (("1" (typepred "id")
              (("1" (expand "bijective?") (("1" (ground) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "count_TCC1") nil nil))
      nil))
    nil)
   ((arr type-eq-decl nil arrayCount nil)
    (T formal-type-decl nil arrayCount nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Card_injection formula-decl nil finite_sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil nat_types nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (count_TCC1 subtype-tcc nil arrayCount nil))
   nil
   (count subtype
          "finite_sets[naturalnumbers.below(arrayCount.len)].card({i: naturalnumbers.below(arrayCount.len) | arrayCount.P(arrayCount.A(i))})"
     "naturalnumbers.upto(arrayCount.len)")))
 (count_update0 0
  (count_update0-1 nil 3804561128
   ("" (skeep)
    (("" (expand "count")
      ((""
        (case "{i_1: below(len) | P(A WITH [(i) := u](i_1))} = add(i, {i: below(len) | P(A(i))})")
        (("1" (replace -1 :hide? t)
          (("1" (rewrite "card_add")
            (("1" (grind) nil nil)
             ("2"
              (rewrite "finite_subset" :subst
               ("A" "{i: below(len) | TRUE}"))
              (("1" (grind) nil nil)
               ("2" (hide-all-but 1)
                (("2" (expand "is_finite")
                  (("2" (inst + "len" "LAMBDA (i: below(len)): i")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 3) (("2" (grind-with-ext) nil nil)) nil))
        nil))
      nil))
    nil)
   ((add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (arr type-eq-decl nil arrayCount nil)
    (T formal-type-decl nil arrayCount nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_add formula-decl nil finite_sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (below type-eq-decl nil nat_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_subset formula-decl nil finite_sets nil)
    (TRUE const-decl "bool" booleans nil)
    (count const-decl "upto(len)" arrayCount nil))
   shostak))
 (count_update 0
  (count_update-1 nil 3798315577
   ("" (skeep)
    (("" (expand "count")
      ((""
        (case "{i_1: below(len) | P(A WITH [(i) := u](i_1))} = add(i, {i: below(len) | P(A(i))})")
        (("1" (replace -1 :hide? t)
          (("1" (rewrite "card_add")
            (("1" (grind) nil nil)
             ("2"
              (rewrite "finite_subset" :subst
               ("A" "{i: below(len) | TRUE}"))
              (("1" (grind) nil nil)
               ("2" (hide-all-but 1)
                (("2" (expand "is_finite")
                  (("2" (inst + "len" "LAMBDA (i: below(len)): i")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 3) (("2" (grind-with-ext) nil nil)) nil))
        nil))
      nil))
    nil)
   ((count const-decl "upto(len)" arrayCount nil)
    (TRUE const-decl "bool" booleans nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (card_add formula-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-type-decl nil arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil))
   shostak))
 (count_update00 0
  (count_update00-1 nil 3806985200
   ("" (skeep)
    (("" (lift-if)
      (("" (ground)
        (("1" (expand count)
          (("1"
            (case-replace
             "{i_1: below(len) | P(A WITH [(i) := u](i_1))} = {i: below(len) | P(A(i))}")
            (("1" (hide 2) (("1" (grind-with-ext) nil nil)) nil)) nil))
          nil)
         ("2" (expand count)
          (("2"
            (case-replace
             "{i_1: below(len) | P(A WITH [(i) := u](i_1))} = remove(i, {i: below(len) | P(A(i))})")
            (("1" (rewrite card_remove)
              (("1" (use count_TCC1) nil nil)) nil)
             ("2" (grind-with-ext) nil nil))
            nil))
          nil)
         ("3" (expand count)
          (("3"
            (case-replace
             "{i_1: below(len) | P(A WITH [(i) := u](i_1))} = add(i, {i: below(len) | P(A(i))})")
            (("1" (rewrite card_add) (("1" (use count_TCC1) nil nil))
              nil)
             ("2" (grind-with-ext) nil nil))
            nil))
          nil)
         ("4" (expand count)
          (("4"
            (case-replace
             "{i_1: below(len) | P(A WITH [(i) := u](i_1))} = {i: below(len) | P(A(i))}")
            (("4" (grind-with-ext) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((card_add formula-decl nil finite_sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (card_remove formula-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (T formal-type-decl nil arrayCount nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (count_update1 0
  (count_update1-1 nil 3799389970
   ("" (skeep)
    (("" (expand "count")
      ((""
        (case "{i_1: below(len) | P(A WITH [(i) := u](i_1))} = add(i, {i: below(len) | P(A(i))})")
        (("1" (replace -1 :hide? t)
          (("1" (rewrite "card_add")
            (("1" (grind) nil nil)
             ("2"
              (rewrite "finite_subset" :subst
               ("A" "{i: below(len) | TRUE}"))
              (("1" (grind) nil nil)
               ("2" (hide-all-but 1)
                (("2" (expand "is_finite")
                  (("2" (inst + "len" "LAMBDA (i: below(len)): i")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 3) (("2" (grind-with-ext) nil nil)) nil))
        nil))
      nil))
    nil)
   ((count const-decl "upto(len)" arrayCount nil)
    (TRUE const-decl "bool" booleans nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (card_add formula-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-type-decl nil arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil))
   shostak))
 (count_update2 0
  (count_update2-1 nil 3799389749
   ("" (skeep)
    (("" (expand "count")
      ((""
        (case "{i_1: below(len) | P(A WITH [(i) := u](i_1))} = remove(i, {i: below(len) | P(A(i))})")
        (("1" (replace -1 :hide? t)
          (("1" (rewrite "card_remove")
            (("1" (grind) nil nil)
             ("2"
              (rewrite "finite_subset" :subst
               ("A" "{i: below(len) | TRUE}"))
              (("1" (grind) nil nil)
               ("2" (hide-all-but 1)
                (("2" (expand "is_finite")
                  (("2" (inst + "len" "LAMBDA (i: below(len)): i")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 3) (("2" (grind-with-ext) nil nil)) nil))
        nil))
      nil))
    nil)
   ((count const-decl "upto(len)" arrayCount nil)
    (/= const-decl "boolean" notequal nil)
    (TRUE const-decl "bool" booleans nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-type-decl nil arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil))
   shostak))
 (count_update3 0
  (count_update3-1 nil 3799420828
   ("" (skeep)
    (("" (expand "count")
      ((""
        (case "{i_1: below(len) | P(A WITH [(i) := u](i_1))} = remove(i, {i: below(len) | P(A(i))})")
        (("1" (replace -1 :hide? t)
          (("1" (rewrite "card_remove")
            (("1" (grind) nil nil)
             ("2"
              (rewrite "finite_subset" :subst
               ("A" "{i: below(len) | TRUE}"))
              (("1" (grind) nil nil)
               ("2" (hide-all-but 1)
                (("2" (expand "is_finite")
                  (("2" (inst + "len" "LAMBDA (i: below(len)): i")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 3) (("2" (grind-with-ext) nil nil)) nil))
        nil))
      nil))
    nil)
   ((count const-decl "upto(len)" arrayCount nil)
    (/= const-decl "boolean" notequal nil)
    (TRUE const-decl "bool" booleans nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-type-decl nil arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil))
   shostak)))

