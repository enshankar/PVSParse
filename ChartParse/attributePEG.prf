(attributePEG
 (subtype_TCC1 0
  (subtype_TCC1-1 nil 3804536638 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (subtype_ subtype "attributePEG.x" "uint32")))
 (subtype_TCC2 0
  (subtype_TCC2-1 nil 3804564519 ("" (grind) nil nil) nil nil
   (subtype_ subtype "attributePEG.x" "uint8")))
 (fine_push_entry?_TCC1 0
  (fine_push_entry?_TCC1-1 nil 3807728459 ("" (subtype-tcc) nil nil)
   nil nil
   (fine_push_entry? subtype "attributePEG.x" "(attributePEG.push?)")))
 (successor_TCC1 0
  (successor_TCC1-1 nil 3804904050 ("" (subtype-tcc) nil nil) nil nil
   (successor subtype "attributePEG.entry1" "(attributePEG.push?)")))
 (successor_TCC2 0
  (successor_TCC2-1 nil 3804904050 ("" (subtype-tcc) nil nil) nil nil
   (successor subtype "attributePEG.entry2" "(attributePEG.push?)")))
 (successor_TCC3 0
  (successor_TCC1-1 nil 3804547853 ("" (subtype-tcc) nil nil) nil nil
   (successor subtype "attributePEG.nt1" "non_terminal")))
 (successor_TCC4 0
  (successor_TCC1-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil
   (successor subtype "attributePEG.p1"
    "naturalnumbers.upto(attributePEG.len)")))
 (successor_TCC5 0
  (successor_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil
   (successor subtype "attributePEG.p1"
    "naturalnumbers.upto(attributePEG.len)")))
 (sigma_restrict_TCC1 0
  (sigma_restrict_TCC1-1 nil 3806355895 ("" (subtype-tcc) nil nil) nil
   nil (sigma_restrict subtype "0" "T_low[upto(j)]")))
 (sigma_restrict_TCC2 0
  (sigma_restrict_TCC2-1 nil 3806355895 ("" (subtype-tcc) nil nil) nil
   nil (sigma_restrict subtype "attributePEG.j" "T_high[upto(j)]")))
 (sigma_restrict_TCC3 0
  (sigma_restrict_TCC3-1 nil 3806355895 ("" (subtype-tcc) nil nil) nil
   nil
   (sigma_restrict subtype "attributePEG.i"
    "naturalnumbers.upto(attributePEG.len)")))
 (sigma_restrict_TCC4 0
  (sigma_restrict_TCC4-1 nil 3806355895 ("" (assuming-tcc) nil nil) nil
   nil
   (sigma_restrict assuming
    "reals@sigma[naturalnumbers.upto(attributePEG.j)].sigma"
    "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))
 (sigma_restrict_TCC5 0
  (sigma_restrict_TCC5-1 nil 3806360457 ("" (subtype-tcc) nil nil) nil
   nil (sigma_restrict subtype "0" "T_low[upto(k)]")))
 (sigma_restrict_TCC6 0
  (sigma_restrict_TCC5-1 nil 3806358823 ("" (subtype-tcc) nil nil) nil
   nil (sigma_restrict subtype "attributePEG.j" "T_high[upto(k)]")))
 (sigma_restrict_TCC7 0
  (sigma_restrict_TCC7-1 nil 3806360457 ("" (subtype-tcc) nil nil) nil
   nil
   (sigma_restrict subtype "attributePEG.i"
    "naturalnumbers.upto(attributePEG.len)")))
 (sigma_restrict_TCC8 0
  (sigma_restrict_TCC8-1 nil 3806360457 ("" (assuming-tcc) nil nil) nil
   nil
   (sigma_restrict assuming
    "reals@sigma[naturalnumbers.upto(attributePEG.k)].sigma"
    "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))
 (sigma_restrict 0
  (sigma_restrict-1 nil 3806355895
   ("" (skolem + ("len" "A" "_" "_"))
    (("" (induct j)
      (("1" (grind) nil nil)
       ("2" (skeep*)
        (("2" (expand "sigma" +)
          (("2" (inst-cp - k)
            (("2" (inst - "jt + 1")
              (("1" (ground) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("3" (hide 2) (("3" (grind) nil nil)) nil)
       ("4" (hide 2) (("4" (grind) nil nil)) nil))
      nil))
    nil)
   ((T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (arr type-eq-decl nil arrayCount nil)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   shostak))
 (sigma_restrict_len_TCC1 0
  (sigma_restrict_len_TCC1-1 nil 3806360811 ("" (subtype-tcc) nil nil)
   nil nil (sigma_restrict_len subtype "0" "T_low[upto(j)]")))
 (sigma_restrict_len_TCC2 0
  (sigma_restrict_len_TCC2-1 nil 3806360811 ("" (subtype-tcc) nil nil)
   nil nil
   (sigma_restrict_len subtype "attributePEG.j" "T_high[upto(j)]")))
 (sigma_restrict_len_TCC3 0
  (sigma_restrict_len_TCC3-1 nil 3806360811 ("" (subtype-tcc) nil nil)
   nil nil
   (sigma_restrict_len subtype "attributePEG.i"
    "naturalnumbers.upto(attributePEG.len)")))
 (sigma_restrict_len_TCC4 0
  (sigma_restrict_len_TCC4-1 nil 3806360811 ("" (assuming-tcc) nil nil)
   nil nil
   (sigma_restrict_len assuming
    "reals@sigma[naturalnumbers.upto(attributePEG.j)].sigma"
    "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))
 (sigma_restrict_len_TCC5 0
  (sigma_restrict_len_TCC5-1 nil 3806936723 ("" (subtype-tcc) nil nil)
   nil nil (sigma_restrict_len subtype "0" "T_low[upto(len)]")))
 (sigma_restrict_len_TCC6 0
  (sigma_restrict_len_TCC6-1 nil 3806936723 ("" (subtype-tcc) nil nil)
   nil nil
   (sigma_restrict_len subtype "attributePEG.j" "T_high[upto(len)]")))
 (sigma_restrict_len_TCC7 0
  (sigma_restrict_len_TCC7-1 nil 3806936723 ("" (assuming-tcc) nil nil)
   nil nil
   (sigma_restrict_len assuming
    "reals@sigma[naturalnumbers.upto(attributePEG.len)].sigma"
    "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))
 (sigma_restrict_len 0
  (sigma_restrict_len-1 nil 3806360812
   ("" (skeep*)
    (("" (lemma "sigma_restrict")
      (("" (inst - len A j len) (("" (ground) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (sigma_nat_TCC1 0
  (sigma_nat_TCC1-1 nil 3804912405 ("" (subtype-tcc) nil nil) nil nil
   (sigma_nat subtype "0" "T_low[upto(len)]")))
 (sigma_nat_TCC2 0
  (sigma_nat_TCC2-1 nil 3804912405 ("" (subtype-tcc) nil nil) nil nil
   (sigma_nat subtype "attributePEG.i" "T_high[upto(len)]")))
 (sigma_nat 0
  (sigma_nat-1 nil 3804912406
   ("" (skolem + ("len" _ _)) (("" (induct-and-simplify i) nil nil))
    nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (sigma def-decl "real" sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals))
   shostak))
 (sigma_pos_TCC1 0
  (sigma_pos_TCC1-1 nil 3804912405 ("" (subtype-tcc) nil nil) nil nil
   (sigma_pos subtype "attributePEG.j" "T_high[upto(len)]")))
 (sigma_pos 0
  (sigma_pos-1 nil 3804912491
   ("" (skolem + ("len" _ _ _)) (("" (induct-and-simplify j) nil nil))
    nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (sigma def-decl "real" sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals))
   shostak))
 (sigma_dec_TCC1 0
  (sigma_dec_TCC1-1 nil 3804994284 ("" (subtype-tcc) nil nil) nil nil
   (sigma_dec subtype "attributePEG.j" "T_high[upto(len)]")))
 (sigma_dec 0
  (sigma_dec-1 nil 3804993479
   ("" (skolem + ("len" _ _ _))
    (("" (induct "j")
      (("1" (grind) nil nil)
       ("2" (skeep*)
        (("2" (expand sigma +) (("2" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (sigma_nat application-judgement "nat" sigma reals))
   shostak))
 (sigma_inc_TCC1 0
  (sigma_inc_TCC1-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil
   (sigma_inc subtype "attributePEG.j" "T_high[upto(len)]")))
 (sigma_inc_TCC2 0
  (sigma_inc_TCC2-1 nil 3805854734 ("" (subtype-tcc) nil nil) nil nil
   (sigma_inc subtype "attributePEG.j" "T_high[upto(len)]")))
 (sigma_inc 0
  (sigma_inc-1 nil 3804994355
   ("" (skolem + ("len" _ _ _))
    (("" (induct "j") (("1" (grind) nil nil) ("2" (grind) nil nil))
      nil))
    nil)
   ((T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (sigma_nat application-judgement "nat" sigma reals))
   shostak))
 (scafcount_TCC1 0
  (scafcount_TCC4-1 nil 3806632141
   ("" (skolem + (len A P "_"))
    ((""
      (case "FORALL ((j: upto(len))):
        sigma[upto(len)]
            (0, j,
             LAMBDA (i: upto(len)): count[ent](num_non_terminals)(P)(A(i)))
         <= (j + 1) * num_non_terminals")
      (("1" (skeep)
        (("1" (inst?)
          (("1" (case "(j + 1) * num_non_terminals <= exp2(64) - 1")
            (("1" (assert) nil nil)
             ("2" (hide -1 2)
              (("2"
                (use le_times_le_pos :subst
                     (nnx "j + 1" y "exp2(32)" nnz num_non_terminals w
                      "exp2(8)"))
                (("2" (ground)
                  (("1" (rewrite exp2_sum :dir RL)
                    (("1" (grind) nil nil)) nil)
                   ("2" (assert)
                    (("2" (typepred "num_non_terminals")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (induct-and-simplify j :exclude count) nil nil)) nil))
      nil))
    nil)
   ((count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (sigma def-decl "real" sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (scafcount subtype
    "sigma[naturalnumbers.upto(attributePEG.len)].sigma(0, attributePEG.j, LAMBDA (i: naturalnumbers.upto(attributePEG.len)): arrayCount[attributePEG.ent].count(attributePEG.num_non_terminals)(attributePEG.P)(attributePEG.A(i)))"
    "uint64")))
 (sigma_max 0
  (sigma_max-1 nil 3806353166
   ("" (induct j)
    (("1" (skeep)
      (("1" (expand scafcount)
        (("1" (expand "sigma" +)
          (("1" (expand "sigma" +)
            (("1" (typepred "count(num_non_terminals)(push?)(A(0))")
              (("1" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep*)
      (("2" (expand scafcount)
        (("2" (expand "sigma" +)
          (("2" (inst - len A P) (("2" (ground) nil nil)) nil)) nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil))
    nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (sigma def-decl "real" sigma reals)
    (arr type-eq-decl nil arrayCount nil)
    (count const-decl "upto(len)" arrayCount nil))
   shostak))
 (scafcount_max 0
  (scafcount_max-1 nil 3807566158
   ("" (skeep*)
    (("" (use sigma_max)
      (("" (use "le_times_le_pos" :subst (y "exp2(32)" w "exp2(8)"))
        (("" (ground)
          (("1" (rewrite exp2_sum :dir RL) (("1" (assert) nil nil))
            nil)
           ("2" (assert)
            (("2" (typepred num_non_terminals) (("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil))
   shostak))
 (scafcount0_TCC1 0
  (scafcount0_TCC1-1 nil 3806988426 ("" (subtype-tcc) nil nil) nil nil
   (scafcount0 subtype "0" "naturalnumbers.upto(attributePEG.len)")))
 (scafcount0 0
  (scafcount0-1 nil 3806988426
   ("" (grind :rewrites count_update00) nil nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil))
   shostak))
 (scafcount_step_TCC1 0
  (scafcount_step_TCC1-1 nil 3806977775 ("" (subtype-tcc) nil nil) nil
   nil
   (scafcount_step subtype "(number_fields.+)(attributePEG.j, 1)"
    "naturalnumbers.upto(attributePEG.len)")))
 (scafcount_step_TCC2 0
  (scafcount_step_TCC2-1 nil 3806977775 ("" (subtype-tcc) nil nil) nil
   nil
   (scafcount_step subtype "attributePEG.j"
    "naturalnumbers.upto(attributePEG.len)")))
 (scafcount_step 0
  (scafcount_step-1 nil 3806977775
   ("" (skolem + (len "_" "_" "_"))
    (("" (induct "j")
      (("1" (grind) nil nil)
       ("2" (skeep*)
        (("2" (expand "scafcount" +)
          (("2" (inst?) (("2" (inst?) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((arr type-eq-decl nil arrayCount nil)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma def-decl "real" sigma reals)
    (sigma_nat application-judgement "nat" sigma reals))
   shostak))
 (scafcount_update 0
  (scafcount_update-1 nil 3806936723
   ("" (skolem + (len "_" "_" "_" "_" "_" "_"))
    (("" (induct j)
      (("1" (skeep*)
        (("1" (rewrite scafcount0)
          (("1" (lift-if :updates? nil)
            (("1" (ground)
              (("1" (grind) nil nil)
               ("2" (case "i  = 0")
                (("1" (assert)
                  (("1" (rewrite count_update00)
                    (("1" (grind) nil nil)) nil))
                  nil)
                 ("2" (assert) nil nil))
                nil)
               ("3" (case "i  = 0")
                (("1" (assert)
                  (("1" (rewrite count_update00)
                    (("1" (grind) nil nil)) nil))
                  nil)
                 ("2" (case "i  = 0")
                  (("1" (propax) nil nil) ("2" (assert) nil nil)) nil))
                nil)
               ("4" (case "i  = 0")
                (("1" (assert)
                  (("1" (rewrite count_update00)
                    (("1" (grind) nil nil)) nil))
                  nil)
                 ("2" (case "i  = 0")
                  (("1" (propax) nil nil) ("2" (grind) nil nil)) nil))
                nil)
               ("5" (case "i  = 0")
                (("1" (assert)
                  (("1" (rewrite count_update00)
                    (("1" (grind) nil nil)) nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep*)
        (("2" (rewrite scafcount_step)
          (("2" (rewrite -2)
            (("2" (hide -2)
              (("2" (case "i = 1 + jt")
                (("1" (assert)
                  (("1" (rewrite count_update00)
                    (("1"
                      (grind :rewrites scafcount_step :exclude count)
                      nil nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (grind :rewrites scafcount_step :exclude count)
                    nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (count_update00 formula-decl nil arrayCount nil)
    (arr type-eq-decl nil arrayCount nil))
   shostak))
 (pushcount_TCC1 0
  (pushcount_TCC1-1 nil 3806632141 ("" (subtype-tcc) nil nil) nil nil
   (pushcount subtype "attributePEG.len"
    "naturalnumbers.upto(attributePEG.len)")))
 (good_stack?_TCC1 0
  (good_stack?_TCC1-1 nil 3804904050 ("" (subtype-tcc) nil nil) nil nil
   (good_stack? subtype "attributePEG.stack" "(attributePEG.push?)")))
 (good_stack?_TCC2 0
  (good_stack?_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil
   (good_stack? subtype "attributePEG.entry" "(attributePEG.push?)")))
 (good_stack?_TCC3 0
  (good_stack?_TCC3-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil
   (good_stack? subtype "(number_fields.-)(attributePEG.depth, 1)"
    "uint64")))
 (good_stack?_TCC4 0
  (good_stack?_TCC4-1 nil 3804455654 ("" (termination-tcc) nil nil) nil
   nil
   (good_stack? termination
    "attributePEG.good_stack?(attributePEG.len, attributePEG.G, (number_fields.-)(attributePEG.depth, 1), attributePEG.A)"
    "nil")))
 (good_stack?_TCC5 0
  (good_stack?_TCC5-1 nil 3804547853 ("" (subtype-tcc) nil nil) nil nil
   (good_stack? subtype "attributePEG.nt(attributePEG.stack)"
    "non_terminal")))
 (good_stack?_TCC6 0
  (good_stack?_TCC5-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil
   (good_stack? subtype "attributePEG.pos(attributePEG.stack)"
    "naturalnumbers.upto(attributePEG.len)")))
 (mem_stack?_TCC1 0
  (mem_stack?_TCC1-1 nil 3813030508 ("" (subtype-tcc) nil nil) nil nil
   (mem_stack? subtype "attributePEG.entry" "(attributePEG.push?)")))
 (mem_stack?_TCC2 0
  (mem_stack?_TCC1-1 nil 3804455654
   ("" (skeep* :preds? t)
    (("" (expand "good_stack?") (("" (ground) nil nil)) nil)) nil)
   nil nil
   (mem_stack? subtype "(number_fields.-)(attributePEG.depth, 1)"
    "uint64")))
 (mem_stack?_TCC3 0
  (mem_stack?_TCC2-1 nil 3804455654 ("" (termination-tcc) nil nil) nil
   nil
   (mem_stack? termination
    "attributePEG.mem_stack?(attributePEG.len, attributePEG.G, (number_fields.-)(attributePEG.depth, 1), attributePEG.A)"
    "nil")))
 (mem_stack?_TCC4 0
  (mem_stack?_TCC3-1 nil 3804455654 ("" (grind) nil nil) nil nil
   (mem_stack? subtype
    "attributePEG.A(attributePEG.pos(attributePEG.stack))(attributePEG.nt(attributePEG.stack))"
    "(attributePEG.good_stack?(attributePEG.len, attributePEG.G, (number_fields.-)(attributePEG.depth, 1), attributePEG.A))")))
 (mem_stack_push_TCC1 0
  (mem_stack_push_TCC2-1 nil 3807675826 ("" (subtype-tcc) nil nil) nil
   nil
   (mem_stack_push subtype "attributePEG.entry"
    "(attributePEG.push?)")))
 (mem_stack_push_TCC2 0
  (mem_stack_push_TCC1-1 nil 3807675826 ("" (subtype-tcc) nil nil) nil
   nil
   (mem_stack_push subtype "(attributePEG.pos(attributePEG.entry))"
    "naturalnumbers.upto(attributePEG.len)")))
 (mem_stack_push_TCC3 0
  (mem_stack_push_TCC3-1 nil 3807675826 ("" (subtype-tcc) nil nil) nil
   nil
   (mem_stack_push subtype "attributePEG.nt(attributePEG.entry)"
    "non_terminal")))
 (mem_stack_push 0
  (mem_stack_push-1 nil 3807675827
   ("" (induct depth)
    (("1" (lazy-grind :defs nil) nil nil)
     ("2" (skeep*)
      (("2" (expand mem_stack?)
        (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil))
      nil)
     ("3" (skeep*)
      (("3" (expand mem_stack? -4)
        (("3" (ground)
          (("1" (typepred stack) (("1" (grind) nil nil)) nil)
           ("2" (inst?)
            (("2" (inst?)
              (("1" (ground) nil nil)
               ("2" (typepred entry) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep*)
        (("4" (typepred entry) (("4" (grind) nil nil)) nil)) nil))
      nil)
     ("5" (hide 2)
      (("5" (skeep*)
        (("5" (typepred entry) (("5" (grind) nil nil)) nil)) nil))
      nil)
     ("6" (hide 2)
      (("6" (skeep*)
        (("6" (typepred entry) (("6" (grind) nil nil)) nil)) nil))
      nil)
     ("7" (hide 2)
      (("7" (skeep*)
        (("7" (typepred entry) (("7" (grind) nil nil)) nil)) nil))
      nil)
     ("8" (hide 2)
      (("8" (skeep*)
        (("8" (typepred entry) (("8" (grind) nil nil)) nil)) nil))
      nil)
     ("9" (hide 2) (("9" (grind) nil nil)) nil))
    nil)
   nil shostak))
 (good_mem_stack_TCC1 0
  (good_mem_stack_TCC1-1 nil 3807728459 ("" (subtype-tcc) nil nil) nil
   nil
   (good_mem_stack subtype "(attributePEG.pos(attributePEG.entry))"
    "naturalnumbers.upto(attributePEG.len)")))
 (good_mem_stack_TCC2 0
  (good_mem_stack_TCC2-1 nil 3807728459 ("" (subtype-tcc) nil nil) nil
   nil
   (good_mem_stack subtype "attributePEG.nt(attributePEG.entry)"
    "non_terminal")))
 (good_mem_stack 0
  (good_mem_stack-1 nil 3804823624
   ("" (induct "depth")
    (("1" (grind)
      (("1" (expand "good_stack?") (("1" (propax) nil nil)) nil)
       ("2" (grind)
        (("2" (expand "good_stack?") (("2" (propax) nil nil)) nil))
        nil)
       ("3" (expand "good_stack?") (("3" (propax) nil nil)) nil)
       ("4" (expand good_stack?) (("4" (propax) nil nil)) nil)
       ("5" (expand good_stack?) (("5" (propax) nil nil)) nil)
       ("6" (expand good_stack?) (("6" (propax) nil nil)) nil))
      nil)
     ("2" (skeep*)
      (("2" (expand "mem_stack?" +)
        (("2" (ground)
          (("1" (typepred stack) (("1" (grind :if-match nil) nil nil))
            nil)
           ("2" (expand "good_stack?" :fnum (-3 4))
            (("2" (ground)
              (("1" (hide -3 4)
                (("1" (grind)
                  (("1" (typepred entry)
                    (("1" (grind)
                      (("1" (typepred stack)
                        (("1" (grind)
                          (("1" (extensionality "(push?)")
                            (("1" (inst?) (("1" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (extensionality "(push?)")
                    (("2" (inst?) (("2" (ground) nil nil)) nil)) nil)
                   ("3" (extensionality "(push?)")
                    (("3" (inst?) (("3" (ground) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (hide -3 2 5)
                (("2" (lift-if)
                  (("2" (ground)
                    (("2" (lift-if)
                      (("2" (ground)
                        (("2" (extensionality "(push?)")
                          (("2" (inst?) (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (inst?)
                (("3" (ground)
                  (("1" (hide 2)
                    (("1" (lift-if)
                      (("1" (typepred entry)
                        (("1" (grind)
                          (("1" (extensionality "(push?)")
                            (("1" (inst?) (("1" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lift-if)
                    (("2" (ground)
                      (("2" (ground)
                        (("2" (extensionality "(push?)")
                          (("2" (inst?) (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (hide -3 4)
                (("4" (hide -1)
                  (("4" (lift-if)
                    (("4" (ground)
                      (("4" (ground)
                        (("4" (extensionality "(push?)")
                          (("4" (inst?) (("4" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("5" (hide -3 5)
                (("5" (case "pos(stack) = pos(entry)")
                  (("1" (case "nt(stack) = nt(entry)")
                    (("1" (extensionality "(push?)")
                      (("1" (assert)
                        (("1" (inst?) (("1" (ground) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (typepred u) (("2" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil)
               ("6" (inst? :polarity? t)
                (("6" (ground)
                  (("1" (hide 2)
                    (("1" (lift-if)
                      (("1" (ground)
                        (("1" (ground)
                          (("1" (extensionality "(push?)")
                            (("1" (inst?) (("1" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lift-if)
                    (("2" (ground)
                      (("2" (ground)
                        (("2" (extensionality "(push?)")
                          (("2" (inst?) (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil)
     ("4" (hide 2) (("4" (grind) nil nil)) nil)
     ("5" (hide 2) (("5" (grind) nil nil)) nil)
     ("6" (hide 2) (("6" (grind) nil nil)) nil)
     ("7" (hide 2) (("7" (grind) nil nil)) nil)
     ("8" (hide 2) (("8" (grind) nil nil)) nil)
     ("9" (hide 2) (("9" (grind) nil nil)) nil)
     ("10" (hide 2) (("10" (grind) nil nil)) nil)
     ("11" (hide 2) (("11" (grind) nil nil)) nil))
    nil)
   nil shostak))
 (mem_mem_stack_TCC1 0
  (mem_mem_stack_TCC1-1 nil 3804967699
   ("" (skeep*)
    (("" (lemma good_mem_stack)
      (("" (inst?) (("" (ground) nil nil)) nil)) nil))
    nil)
   nil nil
   (mem_mem_stack subtype "attributePEG.stack"
    "(attributePEG.good_stack?(attributePEG.len, attributePEG.G, attributePEG.depth, attributePEG.A WITH [(attributePEG.pos(attributePEG.entry))(attributePEG.nt(attributePEG.entry)) := attributePEG.u]))")))
 (mem_mem_stack 0
  (mem_mem_stack-2 "" 3807748697
   ("" (induct depth)
    (("1" (skeep*)
      (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)
     ("2" (skeep*)
      (("2" (expand mem_stack? +)
        (("2" (lift-if)
          (("2" (ground)
            (("2" (case "v = stack")
              (("1" (assert) nil nil)
               ("2" (assert)
                (("2" (inst?)
                  (("2" (ground)
                    (("1" (lift-if -)
                      (("1" (ground)
                        (("1" (lift-if -)
                          (("1" (ground)
                            (("1" (extensionality "(push?)")
                              (("1"
                                (forward-chain -)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand good_stack? -)
                      (("2" (ground)
                        (("1" (case "pos(stack) = pos(entry)")
                          (("1" (case "nt(stack) = nt(entry)")
                            (("1" (assert)
                              (("1"
                                (extensionality "(push?)")
                                (("1"
                                  (inst - stack entry)
                                  (("1" (ground) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (case "pos(stack) = pos(entry)")
                          (("1" (case "nt(stack) = nt(entry)")
                            (("1" (assert)
                              (("1"
                                (extensionality "(push?)")
                                (("1"
                                  (inst - stack entry)
                                  (("1" (ground) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("3" (case "pos(stack) = pos(entry)")
                      (("1" (case "nt(stack) = nt(entry)")
                        (("1" (extensionality "(push?)")
                          (("1" (inst - stack entry)
                            (("1" (ground) nil nil)) nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil)
     ("4" (hide 2) (("4" (grind) nil nil)) nil)
     ("5" (hide 2) (("5" (grind) nil nil)) nil)
     ("6" (hide 2)
      (("6" (skeep*)
        (("6" (use good_mem_stack) (("6" (ground) nil nil)) nil)) nil))
      nil)
     ("7" (hide 2)
      (("7" (skeep*)
        (("7" (typepred entry) (("7" (grind) nil nil)) nil)) nil))
      nil)
     ("8" (hide 2) (("8" (grind) nil nil)) nil)
     ("9" (hide 2) (("9" (grind) nil nil)) nil)
     ("10" (hide 2) (("10" (grind) nil nil)) nil)
     ("11" (hide 2) (("11" (grind) nil nil)) nil)
     ("12" (hide 2) (("12" (grind) nil nil)) nil))
    nil)
   nil shostak)
  (mem_mem_stack-1 nil 3804967700
   ("" (induct depth)
    (("1" (skeep*) (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)
     ("2" (skeep*)
      (("2" (expand good_stack?) (("2" (grind) nil nil)) nil)) nil)
     ("3" (skeep*)
      (("3" (expand mem_stack? +)
        (("3" (lift-if)
          (("3" (ground)
            (("3" (case "v = stack")
              (("1" (assert) nil nil)
               ("2" (assert)
                (("2" (inst?)
                  (("2" (ground)
                    (("1" (lift-if -)
                      (("1" (ground)
                        (("1" (lift-if -)
                          (("1" (ground)
                            (("1" (extensionality "(push?)")
                              (("1"
                                (forward-chain -)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand good_stack? -)
                      (("2" (ground)
                        (("1" (grind) nil nil)
                         ("2" (lift-if 1)
                          (("2" (ground)
                            (("2" (ground)
                              (("2"
                                (extensionality "(push?)")
                                (("2"
                                  (forward-chain -)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (lift-if -)
                      (("3" (ground)
                        (("3" (lift-if -)
                          (("3" (ground)
                            (("3" (extensionality "(push?)")
                              (("3"
                                (forward-chain -)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (grind) nil nil)) nil)
     ("5" (hide 2) (("5" (grind) nil nil)) nil)
     ("6" (hide 2)
      (("6" (skeep*)
        (("6" (lemma good_mem_stack)
          (("6" (inst?) (("6" (ground) nil nil)) nil)) nil))
        nil))
      nil)
     ("7" (hide 2) (("7" (grind) nil nil)) nil)
     ("8" (hide 2) (("8" (grind) nil nil)) nil)
     ("9" (hide 2) (("9" (grind) nil nil)) nil)
     ("10" (hide 2) (("10" (grind) nil nil)) nil)
     ("11" (hide 2) (("11" (grind) nil nil)) nil)
     ("12" (hide 2) (("12" (grind) nil nil)) nil))
    nil)
   nil shostak))
 (good_mem_stack_push_TCC1 0
  (good_mem_stack_push_TCC2-1 nil 3807665403 ("" (subtype-tcc) nil nil)
   nil nil
   (good_mem_stack_push subtype
    "attributePEG.push(attributePEG.pos, attributePEG.n, attributePEG.inh)"
    "(attributePEG.good_push_entry?(attributePEG.len))")))
 (good_mem_stack_push_TCC2 0
  (good_mem_stack_push_TCC3-1 nil 3807665403
   ("" (skeep*)
    (("" (use exp2_lt :subst (n 41 m 64)) (("" (grind) nil nil)) nil))
    nil)
   nil nil
   (good_mem_stack_push subtype
    "(number_fields.+)(attributePEG.depth, 1)" "uint64")))
 (good_mem_stack_push_TCC3 0
  (good_mem_stack_push_TCC4-1 nil 3807665403 ("" (subtype-tcc) nil nil)
   nil nil
   (good_mem_stack_push subtype "attributePEG.stack"
    "(attributePEG.nice_entry?(attributePEG.len, attributePEG.pos))")))
 (good_mem_stack_push 0
  (good_mem_stack_push-2 "" 3807671734
   ("" (skeep*)
    (("" (expand good_stack? +)
      (("" (ground)
        (("1" (grind) nil nil)
         ("2"
          (use good_mem_stack :subst (len len entry "push(pos!1, n)"))
          (("1" (ground)
            (("1" (grind) nil nil)
             ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil)
             ("3" (grind) nil nil))
            nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (good_mem_stack_push-1 nil 3807665405
   ("" (skeep*)
    (("" (expand good_stack? +)
      (("" (ground)
        (("1" (postpone) nil nil) ("2" (postpone) nil nil)
         ("3" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (fine_stack?_TCC1 0
  (fine_stack?_TCC1-1 nil 3807728459 ("" (subtype-tcc) nil nil) nil nil
   (fine_stack? subtype "attributePEG.stack"
    "(attributePEG.fine_push_entry?(attributePEG.len))")))
 (fine_stack?_TCC2 0
  (fine_stack?_TCC1-1 nil 3804908888
   ("" (skeep*) (("" (typepred stack) (("" (grind) nil nil)) nil)) nil)
   nil nil
   (fine_stack? subtype "attributePEG.rest"
    "(attributePEG.good_stack?(attributePEG.len, attributePEG.G, (number_fields.-)(attributePEG.depth, 1), attributePEG.A))")))
 (fine_stack?_TCC3 0
  (fine_stack?_TCC2-1 nil 3804908888
   ("" (skeep*)
    (("" (ground) (("" (typepred stack) (("" (grind) nil nil)) nil))
      nil))
    nil)
   nil nil
   (fine_stack? subtype "(number_fields.-)(attributePEG.depth, 1)"
    "uint64")))
 (fine_stack?_TCC4 0
  (fine_stack?_TCC3-1 nil 3804908888
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred "stack") (("1" (grind) nil nil)) nil)
       ("2" (typepred "stack") (("2" (grind) nil nil)) nil))
      nil))
    nil)
   nil nil
   (fine_stack? subtype
    "attributePEG.A(attributePEG.pos(attributePEG.stack))(attributePEG.nt(attributePEG.stack))"
    "(attributePEG.good_stack?(attributePEG.len, attributePEG.G, (number_fields.-)(attributePEG.depth, 1), attributePEG.A))")))
 (fine_stack?_TCC5 0
  (fine_stack?_TCC4-1 nil 3804908888 ("" (termination-tcc) nil nil) nil
   nil
   (fine_stack? termination
    "attributePEG.fine_stack?(attributePEG.len, attributePEG.G, (number_fields.-)(attributePEG.depth, 1), attributePEG.A)"
    "nil")))
 (fine_mem_stack_TCC1 0
  (fine_mem_stack_TCC1-1 nil 3804969900
   ("" (skeep*)
    (("" (rewrite good_mem_stack) (("" (grind) nil nil)) nil)) nil)
   nil nil
   (fine_mem_stack subtype "attributePEG.stack"
    "(attributePEG.good_stack?(attributePEG.len, attributePEG.G, attributePEG.depth, attributePEG.A WITH [(attributePEG.pos(attributePEG.entry))(attributePEG.nt(attributePEG.entry)) := attributePEG.u]))")))
 (fine_mem_stack 0
  (fine_mem_stack-1 nil 3804969200
   ("" (induct "depth")
    (("1" (skeep*)
      (("1" (expand fine_stack?)
        (("1" (expand good_stack? -) (("1" (ground) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep*)
      (("2" (expand fine_stack? +)
        (("2" (expand good_stack? -3)
          (("2" (ground)
            (("1" (rewrite mem_mem_stack)
              (("1" (expand mem_stack? 2)
                (("1" (ground)
                  (("1" (lift-if +)
                    (("1" (ground)
                      (("1" (lift-if +)
                        (("1" (ground)
                          (("1" (extensionality "(push?)")
                            (("1" (forward-chain -)
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (inst?)
                            (("2" (ground)
                              (("2"
                                (replace -1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -5 4)
                (("2" (lift-if +)
                  (("2" (ground)
                    (("2" (ground)
                      (("2" (expand mem_stack? +)
                        (("2" (ground)
                          (("2" (extensionality "(push?)")
                            (("2" (forward-chain -)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide -5 4) (("3" (grind) nil nil)) nil)
               ("4" (hide -6 3)
                (("4" (grind)
                  (("4" (extensionality "(push?)")
                    (("4" (inst?) (("4" (ground) nil nil)) nil)) nil))
                  nil))
                nil)
               ("5" (hide -5 4)
                (("5" (grind)
                  (("1" (extensionality "(push?)")
                    (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)
                   ("2" (extensionality "(push?)")
                    (("2" (inst?) (("2" (ground) nil nil)) nil)) nil)
                   ("3" (extensionality "(push?)")
                    (("3" (inst?) (("3" (ground) nil nil)) nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite mem_mem_stack)
              (("1" (expand mem_stack? 2)
                (("1" (ground)
                  (("1" (lift-if +)
                    (("1" (ground)
                      (("1" (lift-if +)
                        (("1" (ground)
                          (("1" (extensionality "(push?)")
                            (("1" (forward-chain -)
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (inst?)
                            (("2" (ground)
                              (("2"
                                (replace -1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -5 4)
                (("2" (hide -1)
                  (("2" (grind)
                    (("2" (extensionality "(push?)")
                      (("2" (inst?) (("2" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide -5 4)
                (("3" (hide -1) (("3" (grind) nil nil)) nil)) nil)
               ("4" (hide -6 3)
                (("4" (hide -2)
                  (("4" (grind)
                    (("4" (extensionality "(push?)")
                      (("4" (inst?) (("4" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("5" (hide -5 4)
                (("5" (hide -1)
                  (("5" (grind)
                    (("1" (hide -5 4)
                      (("1" (hide -1)
                        (("1" (grind)
                          (("1" (extensionality "(push?)")
                            (("1" (inst?) (("1" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (extensionality "(push?)")
                      (("2" (inst?) (("2" (ground) nil nil)) nil)) nil)
                     ("3" (extensionality "(push?)")
                      (("3" (inst?) (("3" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil)
     ("4" (hide 2) (("4" (grind) nil nil)) nil)
     ("5" (hide 2) (("5" (grind) nil nil)) nil)
     ("6" (hide 2)
      (("6" (skeep*)
        (("6" (use good_mem_stack) (("6" (ground) nil nil)) nil)) nil))
      nil)
     ("7" (grind) nil nil) ("8" (hide 2) (("8" (grind) nil nil)) nil)
     ("9" (hide 2) (("9" (grind) nil nil)) nil)
     ("10" (hide 2) (("10" (grind) nil nil)) nil)
     ("11" (hide 2) (("11" (grind) nil nil)) nil)
     ("12" (hide 2) (("12" (grind) nil nil)) nil))
    nil)
   nil shostak))
 (loop_ready?_TCC1 0
  (loop_ready?_TCC1-1 nil 3804455654
   ("" (skeep* :preds? t)
    (("" (typepred "A(i)(n1)") (("" (grind) nil nil)) nil)) nil)
   nil nil
   (loop_ready? subtype
    "(number_fields.+)(attributePEG.i, attributePEG.span(attributePEG.A(attributePEG.i)(attributePEG.n1)))"
    "naturalnumbers.upto(attributePEG.len)")))
 (good_fail?_TCC1 0
  (good_fail?_TCC1-1 nil 3804455654 ("" (grind) nil nil) nil nil
   (good_fail? subtype "attributePEG.i"
    "naturalnumbers.below(attributePEG.len)")))
 (good_fail?_TCC2 0
  (good_fail?_TCC2-1 nil 3804455654 ("" (grind) nil nil) nil nil
   (good_fail? subtype "attributePEG.i"
    "naturalnumbers.below(attributePEG.len)")))
 (good_fail?_TCC3 0
  (good_fail?_TCC3-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil
   (good_fail? subtype
    "attributePEG.A(attributePEG.i)(attributePEG.n1)"
    "{x: attributePEG.ent | booleans.OR(attributePEG.fail?(x), attributePEG.good?(x))}")))
 (good_fail?_TCC4 0
  (good_fail?_TCC3-1 nil 3804455654
   ("" (grind)
    (("" (typepred "A!1(i!1)(n1!1)") (("" (grind) nil nil)) nil)) nil)
   nil nil
   (good_fail? subtype
    "(number_fields.+)(attributePEG.i, attributePEG.span(attributePEG.A(attributePEG.i)(attributePEG.n1)))"
    "naturalnumbers.upto(attributePEG.len)")))
 (good_fail?_TCC5 0
  (good_fail?_TCC5-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil
   (good_fail? subtype
    "attributePEG.A(attributePEG.i)(attributePEG.n1)"
    "{x: attributePEG.ent | booleans.OR(attributePEG.fail?(x), attributePEG.good?(x))}")))
 (good_fail?_TCC6 0
  (good_fail?_TCC6-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil
   (good_fail? subtype
    "attributePEG.A((number_fields.+)(attributePEG.i, attributePEG.span(attributePEG.A(attributePEG.i)(attributePEG.n1))))(attributePEG.n2)"
    "{x: attributePEG.ent | booleans.OR(attributePEG.fail?(x), attributePEG.good?(x))}")))
 (good_fail?_TCC7 0
  (good_fail?_TCC7-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil
   (good_fail? subtype
    "attributePEG.A(attributePEG.i)(attributePEG.n1)"
    "{x: attributePEG.ent | booleans.OR(attributePEG.fail?(x), attributePEG.good?(x))}")))
 (good_fail?_TCC8 0
  (good_fail?_TCC8-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil
   (good_fail? subtype
    "attributePEG.A(attributePEG.i)(attributePEG.n2)"
    "{x: attributePEG.ent | booleans.OR(attributePEG.fail?(x), attributePEG.good?(x))}")))
 (good_fail?_TCC9 0
  (good_fail?_TCC9-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil
   (good_fail? subtype
    "attributePEG.A(attributePEG.i)(attributePEG.n1)"
    "{x: attributePEG.ent | booleans.OR(attributePEG.fail?(x), attributePEG.good?(x))}")))
 (good_fail?_TCC10 0
  (good_fail?_TCC10-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil
   (good_fail? subtype
    "attributePEG.A(attributePEG.i)(attributePEG.n1)"
    "{x: attributePEG.ent | booleans.OR(attributePEG.fail?(x), attributePEG.good?(x))}")))
 (good_loop?_TCC1 0
  (good_loop?_TCC1-1 nil 3804455654
   ("" (skeep* :preds? t)
    (("" (typepred "A(i)(n1)") (("" (grind) nil nil)) nil)) nil)
   nil nil
   (good_loop? subtype
    "(number_fields.+)(attributePEG.i, attributePEG.span(attributePEG.A(attributePEG.i)(attributePEG.n1)))"
    "naturalnumbers.upto(attributePEG.len)")))
 (good_good?_TCC1 0
  (good_good?_TCC1-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil
   (good_good? subtype
    "(number_fields.-)(attributePEG.len, attributePEG.i)" "nat")))
 (good_good?_TCC2 0
  (good_good?_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil
   (good_good? subtype "attributePEG.i"
    "naturalnumbers.below(attributePEG.len)")))
 (good_good?_TCC3 0
  (good_good?_TCC3-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil
   (good_good? subtype "attributePEG.i"
    "naturalnumbers.below(attributePEG.len)")))
 (good_good?_TCC4 0
  (good_good?_TCC4-1 nil 3804455654
   ("" (skeep* :preds? t)
    (("" (typepred "A(i)(n1)") (("" (grind) nil nil)) nil)) nil)
   nil nil
   (good_good? subtype
    "(number_fields.+)(attributePEG.i, attributePEG.span(attributePEG.A(attributePEG.i)(attributePEG.n1)))"
    "naturalnumbers.upto(attributePEG.len)")))
 (good_good?_TCC5 0
  (good_good?_TCC5-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil
   (good_good? subtype
    "attributePEG.A(attributePEG.i)(attributePEG.n1)"
    "{x: attributePEG.ent | booleans.OR(attributePEG.fail?(x), attributePEG.good?(x))}")))
 (good_good?_TCC6 0
  (good_good?_TCC6-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil
   (good_good? subtype
    "attributePEG.A((number_fields.+)(attributePEG.i, attributePEG.span(attributePEG.A(attributePEG.i)(attributePEG.n1))))(attributePEG.n2)"
    "{x: attributePEG.ent | booleans.OR(attributePEG.fail?(x), attributePEG.good?(x))}")))
 (good_good?_TCC7 0
  (good_good?_TCC7-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil
   (good_good? subtype
    "attributePEG.A(attributePEG.i)(attributePEG.n1)"
    "{x: attributePEG.ent | booleans.OR(attributePEG.fail?(x), attributePEG.good?(x))}")))
 (good_good?_TCC8 0
  (good_good?_TCC8-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil
   (good_good? subtype
    "attributePEG.A(attributePEG.i)(attributePEG.n1)"
    "{x: attributePEG.ent | booleans.OR(attributePEG.fail?(x), attributePEG.good?(x))}")))
 (good_good?_TCC9 0
  (good_good?_TCC9-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil
   (good_good? subtype
    "attributePEG.A(attributePEG.i)(attributePEG.n2)"
    "{x: attributePEG.ent | booleans.OR(attributePEG.fail?(x), attributePEG.good?(x))}")))
 (good_good?_TCC10 0
  (good_good?_TCC10-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil
   (good_good? subtype
    "attributePEG.A(attributePEG.i)(attributePEG.n1)"
    "{x: attributePEG.ent | booleans.OR(attributePEG.fail?(x), attributePEG.good?(x))}")))
 (good_good?_TCC11 0
  (good_good?_TCC11-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil
   (good_good? subtype
    "attributePEG.A(attributePEG.i)(attributePEG.n1)"
    "{x: attributePEG.ent | booleans.OR(attributePEG.fail?(x), attributePEG.good?(x))}")))
 (good_tscaffold?_TCC1 0
  (good_tscaffold?_TCC1-1 nil 3806632141 ("" (subtype-tcc) nil nil) nil
   nil
   (good_tscaffold? subtype
    "attributePEG.A(attributePEG.i)(attributePEG.n)"
    "{x: attributePEG.ent | booleans.OR(attributePEG.fail?(x), attributePEG.good?(x))}")))
 (good_good_tscaffold 0
  (good_good_tscaffold-2 "updated with depth bound" 3806872130
   ("" (skeep*)
    (("" (expand "good_tscaffold?")
      (("" (skeep*)
        (("" (inst - i n)
          (("" (expand good_entry?)
            (("" (lift-if + :updates? nil)
              (("" (ground)
                (("1" (case "i = pos!1" "n = nt!1")
                  (("1" (assert) (("1" (grind) nil nil)) nil)
                   ("2" (assert)
                    (("2" (expand "good_fail?")
                      (("2" (lift-if)
                        (("2" (ground)
                          (("1" (grind) nil nil)
                           ("2" (hide -11)
                            (("2" (grind :exclude gfcount) nil nil))
                            nil)
                           ("3" (hide -11)
                            (("3" (grind :exclude gfcount) nil nil))
                            nil)
                           ("4" (hide -10)
                            (("4" (grind :exclude gfcount) nil nil))
                            nil)
                           ("5" (hide -10)
                            (("5" (grind :exclude gfcount) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide -6)
                    (("3" (grind :exclude gfcount) nil nil)) nil))
                  nil)
                 ("2" (hide -5)
                  (("2" (expand "gfcount" +)
                    (("2" (rewrite "scafcount_update")
                      (("2" (hide -6)
                        (("2" (reveal -3)
                          (("2"
                            (lazy-grind :if-match all :exclude
                             scafcount)
                            nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (inst? -)
                  (("3" (grind :exclude gfcount) nil nil)) nil)
                 ("4" (hide -7)
                  (("4" (reveal -2)
                    (("4" (lazy-grind :if-match all :exclude scafcount)
                      nil nil))
                    nil))
                  nil)
                 ("5" (typepred u)
                  (("5" (hide -5 -7)
                    (("5" (typepred "A(i)(n)")
                      (("5" (grind :exclude gfcount) nil nil)) nil))
                    nil))
                  nil)
                 ("6" (hide -6)
                  (("6" (hide -2)
                    (("6" (lift-if)
                      (("6" (ground)
                        (("1" (grind) nil nil) ("2" (grind) nil nil)
                         ("3" (lift-if)
                          (("3" (ground)
                            (("1" (expand good_good?)
                              (("1"
                                (lift-if)
                                (("1"
                                  (ground)
                                  (("1"
                                    (ground)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (grind :exclude max)
                                      nil
                                      nil))
                                    nil)
                                   ("2" (grind :exclude max) nil nil)
                                   ("3" (grind :exclude max) nil nil)
                                   ("4" (grind :exclude max) nil nil)
                                   ("5" (grind :exclude max) nil nil)
                                   ("6" (grind) nil nil)
                                   ("7" (grind) nil nil)
                                   ("8" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind :exclude (max gfcount)) nil
                              nil))
                            nil))
                          nil)
                         ("4" (grind :exclude max) nil nil)
                         ("5" (grind :exclude max) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (hide -5 -7)
                  (("7" (typepred "A(i)(n)")
                    (("7" (expand "gfcount" +)
                      (("7" (rewrite scafcount_update)
                        (("7" (reveal -3)
                          (("7"
                            (lazy-grind :if-match all :exclude
                             scafcount)
                            nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("8" (hide -4 -6)
                  (("8" (reveal -3)
                    (("8" (lazy-grind :if-match all :exclude scafcount)
                      nil nil))
                    nil))
                  nil)
                 ("9" (hide -5) (("9" (grind :exclude max) nil nil))
                  nil)
                 ("10" (hide -6)
                  (("10" (expand gfcount)
                    (("10" (reveal -2)
                      (("10" (hide -5)
                        (("10" (rewrite "scafcount_update")
                          (("10" (lift-if)
                            (("10" (ground)
                              (("10"
                                (lift-if)
                                (("10"
                                  (ground)
                                  (("10"
                                    (expand fine_entry?)
                                    (("10"
                                      (expand "good_fail?")
                                      (("10"
                                        (lift-if)
                                        (("10"
                                          (ground)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (grind
                                               :exclude
                                               scafcount)
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (inst? :copy? t)
                                            (("2"
                                              (inst
                                               -
                                               "span(A(pos!1)(e1(G(nt!1)))) + pos!1"
                                               "e2(G(nt!1))")
                                              (("2"
                                                (grind
                                                 :exclude
                                                 scafcount)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (inst? :copy? t)
                                            (("3"
                                              (inst
                                               -
                                               "pos!1"
                                               "e2(G(nt!1))")
                                              (("3"
                                                (grind
                                                 :exclude
                                                 scafcount)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (inst?)
                                            (("4"
                                              (grind
                                               :exclude
                                               scafcount)
                                              nil
                                              nil))
                                            nil)
                                           ("5"
                                            (inst?)
                                            (("5" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("11" (inst?)
                  (("11" (grind :exclude (max gfcount)) nil nil)) nil)
                 ("12" (hide -4 -6)
                  (("12" (expand gfcount)
                    (("12" (rewrite scafcount_update)
                      (("12" (reveal -3)
                        (("12"
                          (lazy-grind :if-match all :exclude
                           (max scafcount))
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("13" (typepred "A(i)(n)")
                  (("13" (typepred "u")
                    (("13" (hide -5 -7)
                      (("13" (grind :exclude (max gfcount)) nil nil))
                      nil))
                    nil))
                  nil)
                 ("14" (hide -5)
                  (("14" (typepred "A(i)(n)")
                    (("14" (typepred "u")
                      (("14" (grind :exclude (max gfcount)) nil nil))
                      nil))
                    nil))
                  nil)
                 ("15" (hide -6)
                  (("15" (reveal -2)
                    (("15" (expand gfcount)
                      (("15" (rewrite scafcount_update)
                        (("15" (lift-if)
                          (("15" (ground)
                            (("1" (lift-if)
                              (("1"
                                (ground)
                                (("1"
                                  (hide -15)
                                  (("1"
                                    (grind :exclude (max scafcount))
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lift-if)
                              (("2"
                                (ground)
                                (("2"
                                  (hide -15)
                                  (("2"
                                    (grind :exclude (max scafcount))
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (lift-if)
                              (("3"
                                (ground)
                                (("3"
                                  (hide -16)
                                  (("3"
                                    (grind :exclude (max scafcount))
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (lift-if)
                              (("4"
                                (ground)
                                (("4"
                                  (expand fine_entry?)
                                  (("4"
                                    (ground)
                                    (("4"
                                      (expand "good_good?")
                                      (("4"
                                        (lift-if)
                                        (("4"
                                          (ground)
                                          (("1"
                                            (inst? :copy? t)
                                            (("1"
                                              (inst
                                               -
                                               "span(A(pos!1)(e1(G(nt!1)))) + pos!1"
                                               "e2(G(nt!1))")
                                              (("1"
                                                (grind
                                                 :exclude
                                                 scafcount)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst?)
                                            (("2"
                                              (grind
                                               :exclude
                                               scafcount)
                                              nil
                                              nil))
                                            nil)
                                           ("3"
                                            (inst? :copy? t)
                                            (("3"
                                              (inst
                                               -
                                               "pos!1"
                                               "e2(G(nt!1))")
                                              (("3"
                                                (grind
                                                 :exclude
                                                 scafcount)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (inst?)
                                            (("4"
                                              (grind
                                               :exclude
                                               scafcount)
                                              nil
                                              nil))
                                            nil)
                                           ("5"
                                            (inst?)
                                            (("5"
                                              (grind
                                               :exclude
                                               scafcount)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("16" (expand "gfcount" +)
                  (("16" (rewrite scafcount_update)
                    (("16" (hide -5)
                      (("16" (reveal -2)
                        (("16"
                          (lazy-grind :if-match all :exclude
                           (max scafcount))
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma def-decl "real" sigma reals))
   shostak)
  (good_good_tscaffold-1 nil 3804994419
   ("" (skeep*)
    (("" (expand "good_tscaffold?")
      (("" (skeep*)
        (("" (inst - i n)
          (("" (expand good_entry?)
            (("" (lift-if + :updates? nil)
              (("" (ground)
                (("1" (case "i = pos(entry)" "n = nt(entry)")
                  (("1" (assert) (("1" (grind) nil nil)) nil)
                   ("2" (assert)
                    (("2" (hide -7 -8) (("2" (grind) nil nil)) nil))
                    nil)
                   ("3" (hide -6 -7) (("3" (grind) nil nil)) nil))
                  nil)
                 ("2" (case "i = pos(entry)" "n = nt(entry)")
                  (("1" (assert) (("1" (grind) nil nil)) nil)
                   ("2" (assert)
                    (("2" (forward-chain -) (("2" (grind) nil nil))
                      nil))
                    nil)
                   ("3" (assert)
                    (("3" (forward-chain -) (("3" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("3" (grind) nil nil) ("4" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (state_TCC1 0
  (state_TCC1-1 nil 3804904050 ("" (grind) nil nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma def-decl "real" sigma reals))
   nil (state subtype "attributePEG.stack" "(attributePEG.push?)")))
 (state_TCC2 0
  (state_TCC1-1 nil 3804730988 ("" (subtype-tcc) nil nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (count const-decl "upto(len)" arrayCount nil))
   nil
   (state subtype "attributePEG.pos(attributePEG.stack)"
    "naturalnumbers.upto(attributePEG.len)")))
 (state_TCC3 0
  (state_TCC2-1 nil 3804730988 ("" (subtype-tcc) nil nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (count const-decl "upto(len)" arrayCount nil))
   nil
   (state subtype "attributePEG.nt(attributePEG.stack)"
    "non_terminal")))
 (step_TCC1 0
  (step_TCC66-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil (step subtype "attributePEG.stack" "(attributePEG.push?)")))
 (step_TCC2 0
  (step_TCC1-1 nil 3804547853 ("" (subtype-tcc) nil nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (count const-decl "upto(len)" arrayCount nil))
   nil (step subtype "attributePEG.cur" "non_terminal")))
 (step_TCC3 0
  (step_TCC10-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (count const-decl "upto(len)" arrayCount nil))
   nil
   (step subtype "attributePEG.pos"
         "naturalnumbers.upto(attributePEG.len)")))
 (step_TCC4 0
  (step_TCC3-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "0" "uint64")))
 (step_TCC5 0
  (step_TCC91-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "0" "uint32")))
 (step_TCC6 0
  (step_TCC4-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (count const-decl "upto(len)" arrayCount nil))
   nil
   (step subtype
         "attributePEG.good(0, 0, attributePEG.inh, attributePEG.syn(attributePEG.inh))"
         "(attributePEG.nice_entry?(attributePEG.len, attributePEG.pos))")))
 (step_TCC7 0
  (step_TCC5-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (skeep*)
                (("3" (typepred lflag)
                  (("3" (ground)
                    (("1" (inst?) nil nil)
                     ("2" (hide 2) (("2" (grind) nil nil)) nil)
                     ("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype
         "attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good(0, 0, attributePEG.inh, attributePEG.syn(attributePEG.inh))]"
         "(attributePEG.fine_scaffold?(attributePEG.len, attributePEG.G, attributePEG.s)(attributePEG.start, attributePEG.rootnt))")))
 (step_TCC8 0
  (step_TCC1-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3" (use sigma_dec)
                  (("3" (ground)
                    (("1" (lift-if)
                      (("1" (ground)
                        (("1" (typepred pos (stack))
                          (("1" (grind) nil nil)) nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                               count(num_non_terminals)(push?)
                                    (St`scaf WITH [(pos!1)(cur) := good(0, 0, inh!1, syn!1(inh!1))](i))) = ((LAMBDA (i: upto(len)):
                               count(num_non_terminals)(push?)(St`scaf(i)))
                              WITH [(pos!1)
                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                          1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                          push?(St`scaf(x!1) WITH [(cur) := good(0, 0, inh!1, syn!1(inh!1))](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("3" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand count)
                                  (("2"
                                    (lemma
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("2"
                                      (inst?)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand nonempty?)
                                          (("1"
                                            (expand empty?)
                                            (("1"
                                              (inst - cur)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite count_TCC1)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -1 3)
                            (("3" (expand count)
                              (("3"
                                (lemma
                                 "nonempty_card[below(num_non_terminals)]")
                                (("3"
                                  (inst?)
                                  (("1" (grind) nil nil)
                                   ("2" (rewrite count_TCC1) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (lemma
                         "nonempty_card[below(num_non_terminals)]")
                        (("2" (inst?)
                          (("1" (grind) nil nil)
                           ("2" (rewrite count_TCC1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" attributePEG nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" attributePEG nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil attributePEG nil)
    (good_push_entry? const-decl "bool" attributePEG nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil attributePEG nil)
    (num_non_terminals const-decl "byte" attributePEG nil)
    (non_terminal type-eq-decl nil attributePEG nil)
    (peg type-decl nil attributePEG nil)
    (lang_spec type-eq-decl nil attributePEG nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" attributePEG nil)
    (scaffold type-eq-decl nil attributePEG nil)
    (good_stack? def-decl "bool" attributePEG nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil attributePEG nil)
    (fine_scaffold? const-decl "bool" attributePEG nil)
    (good_depth? const-decl "bool" attributePEG nil)
    (fine_stack? def-decl "bool" attributePEG nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" attributePEG nil)
    (loop_ready? const-decl "bool" attributePEG nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" attributePEG nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (state type-eq-decl nil attributePEG nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (sigma_nat application-judgement "nat" sigma reals)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pushcount const-decl "uint64" attributePEG nil)
    (scafcount const-decl "uint64" attributePEG nil)
    (sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_dec formula-decl nil attributePEG nil)
    (arr type-eq-decl nil arrayCount nil)
    (good adt-constructor-decl
     "[[uint64, uint32, inherited, synthesized] -> (good?)]"
     attributePEG nil)
    (good? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (synthesized formal-type-decl nil attributePEG nil)
    (inherited formal-type-decl nil attributePEG nil)
    (G skolem-const-decl "lang_spec" attributePEG nil)
    (s skolem-const-decl "strings(len)" attributePEG nil)
    (start skolem-const-decl "upto(len)" attributePEG nil)
    (rootnt skolem-const-decl "non_terminal" attributePEG nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     attributePEG nil)
    (len skolem-const-decl "uint32" attributePEG nil)
    (pos!1 skolem-const-decl "uint32" attributePEG nil)
    (inh!1 skolem-const-decl "inherited" attributePEG nil)
    (syn!1 skolem-const-decl "[inherited -> synthesized]" attributePEG
     nil)
    (good_good_entry? const-decl "bool" attributePEG nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (x!1 skolem-const-decl "upto(len)" attributePEG nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "(number_fields.-)(attributePEG.depth, 1)"
         "(attributePEG.good_depth?(attributePEG.len, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good(0, 0, attributePEG.inh, attributePEG.syn(attributePEG.inh))]))")))
 (step_TCC9 0
  (step_TCC2-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2"
          (inst - G "depth - 1" len scaf stack rest
           "good(0, 0, inh!1, syn!1(inh!1))")
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2"
                    (inst - G "depth - 1" len scaf stack rest
                     "good(0, 0, inh!1, syn!1(inh!1))")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (state type-eq-decl nil attributePEG nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" attributePEG nil)
    (loop_ready? const-decl "bool" attributePEG nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" attributePEG nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" attributePEG nil)
    (good_depth? const-decl "bool" attributePEG nil)
    (fine_scaffold? const-decl "bool" attributePEG nil)
    (strings type-eq-decl nil attributePEG nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" attributePEG nil)
    (scaffold type-eq-decl nil attributePEG nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil attributePEG nil)
    (peg type-decl nil attributePEG nil)
    (non_terminal type-eq-decl nil attributePEG nil)
    (num_non_terminals const-decl "byte" attributePEG nil)
    (byte type-eq-decl nil attributePEG nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" attributePEG nil)
    (empty? const-decl "bool" attributePEG nil)
    (good_good_entry? const-decl "bool" attributePEG nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil attributePEG nil)
    (nice_entry? const-decl "bool" attributePEG nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" attributePEG
     nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     attributePEG nil)
    (rootnt skolem-const-decl "non_terminal" attributePEG nil)
    (start skolem-const-decl "upto(len)" attributePEG nil)
    (s skolem-const-decl "strings(len)" attributePEG nil)
    (G skolem-const-decl "lang_spec" attributePEG nil)
    (len skolem-const-decl "uint32" attributePEG nil)
    (syn!1 skolem-const-decl "[inherited -> synthesized]" attributePEG
     nil)
    (inh!1 skolem-const-decl "inherited" attributePEG nil)
    (good adt-constructor-decl
     "[[uint64, uint32, inherited, synthesized] -> (good?)]"
     attributePEG nil)
    (good? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (synthesized formal-type-decl nil attributePEG nil)
    (inherited formal-type-decl nil attributePEG nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     attributePEG nil)
    (push_or_pending? const-decl "bool" attributePEG nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" attributePEG nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" attributePEG nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (good_mem_stack formula-decl nil attributePEG nil)
    (fine_mem_stack formula-decl nil attributePEG nil)
    (mem_stack? def-decl "bool" attributePEG nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "attributePEG.rest"
         "(attributePEG.fine_stack?(attributePEG.len, attributePEG.G, (number_fields.-)(attributePEG.depth, 1), attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good(0, 0, attributePEG.inh, attributePEG.syn(attributePEG.inh))]))")))
 (step_TCC10 0
  (step_TCC83-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" attributePEG nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil attributePEG nil)
    (push? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" attributePEG nil)
    (uint32 type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil attributePEG nil)
    (num_non_terminals const-decl "byte" attributePEG nil)
    (non_terminal type-eq-decl nil attributePEG nil)
    (peg type-decl nil attributePEG nil)
    (lang_spec type-eq-decl nil attributePEG nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil attributePEG nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" attributePEG nil)
    (scaffold type-eq-decl nil attributePEG nil)
    (fine_scaffold? const-decl "bool" attributePEG nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" attributePEG nil)
    (good_push_entry? const-decl "bool" attributePEG nil)
    (good_stack? def-decl "bool" attributePEG nil)
    (fine_stack? def-decl "bool" attributePEG nil)
    (loop_ready? const-decl "bool" attributePEG nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" attributePEG nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (state type-eq-decl nil attributePEG nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "attributePEG.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(attributePEG.nt(attributePEG.rest) = attributePEG.num_non_terminals, attributePEG.loop_ready?(attributePEG.len, attributePEG.G, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good(0, 0, attributePEG.inh, attributePEG.syn(attributePEG.inh))], attributePEG.pos(attributePEG.rest), attributePEG.nt(attributePEG.rest))) ELSE FORALL (i: naturalnumbers.upto(attributePEG.len)), n: (booleans.NOT)(attributePEG.loop?(attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good(0, 0, attributePEG.inh, attributePEG.syn(attributePEG.inh))](i)(attributePEG.n))) ENDIF}")))
 (step_TCC11 0
  (step_TCC100-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "0" "uint64")))
 (step_TCC12 0
  (step_TCC8-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "attributePEG.fail(0)"
         "(attributePEG.nice_entry?(attributePEG.len, attributePEG.pos))")))
 (step_TCC13 0
  (step_TCC9-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" attributePEG nil)
    (scaffold type-eq-decl nil attributePEG nil)
    (nice_entry? const-decl "bool" attributePEG nil)
    (ent type-decl nil attributePEG nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil attributePEG nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil attributePEG nil)
    (peg type-decl nil attributePEG nil)
    (non_terminal type-eq-decl nil attributePEG nil)
    (num_non_terminals const-decl "byte" attributePEG nil)
    (byte type-eq-decl nil attributePEG nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" attributePEG nil)
    (good_root? const-decl "bool" attributePEG nil)
    (good_good_entry? const-decl "bool" attributePEG nil)
    (good_good? const-decl "bool" attributePEG nil)
    (good_fail? const-decl "bool" attributePEG nil)
    (successor const-decl "bool" attributePEG nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (good_tscaffold? const-decl "bool" attributePEG nil)
    (gfcount const-decl "uint64" attributePEG nil)
    (scafcount const-decl "uint64" attributePEG nil)
    (sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" attributePEG nil)
    (good_entry? const-decl "bool" attributePEG nil)
    (push_or_pending? const-decl "bool" attributePEG nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_nat application-judgement "nat" sigma reals)
    (fine_entry? const-decl "bool" attributePEG nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (len skolem-const-decl "uint32" attributePEG nil)
    (pos!1 skolem-const-decl "uint32" attributePEG nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" attributePEG nil)
    (good_depth? const-decl "bool" attributePEG nil)
    (good_push_entry? const-decl "bool" attributePEG nil)
    (good_stack? def-decl "bool" attributePEG nil)
    (fine_stack? def-decl "bool" attributePEG nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" attributePEG nil)
    (loop_ready? const-decl "bool" attributePEG nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" attributePEG nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (state type-eq-decl nil attributePEG nil)
    (good_good_tscaffold formula-decl nil attributePEG nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype
         "attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail(0)]"
         "(attributePEG.fine_scaffold?(attributePEG.len, attributePEG.G, attributePEG.s)(attributePEG.start, attributePEG.rootnt))")))
 (step_TCC14 0
  (step_TCC6-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3" (use sigma_dec)
                  (("3" (ground)
                    (("1" (lift-if)
                      (("1" (ground)
                        (("1" (typepred pos (stack))
                          (("1" (grind) nil nil)) nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                       count(num_non_terminals)(push?)
                                            (St`scaf WITH [(pos!1)(cur) := fail(0)](i))) = ((LAMBDA (i: upto(len)):
                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                      WITH [(pos!1)
                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                  1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                        push?(St`scaf(x!1) WITH [(cur) := fail(0)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("3" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand count)
                                  (("2"
                                    (lemma
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("2"
                                      (inst?)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand nonempty?)
                                          (("1"
                                            (expand empty?)
                                            (("1"
                                              (inst - cur)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite count_TCC1)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -1 3)
                            (("3" (expand count)
                              (("3"
                                (lemma
                                 "nonempty_card[below(num_non_terminals)]")
                                (("3"
                                  (inst?)
                                  (("1" (grind) nil nil)
                                   ("2" (rewrite count_TCC1) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (lemma
                         "nonempty_card[below(num_non_terminals)]")
                        (("2" (inst?)
                          (("1" (grind) nil nil)
                           ("2" (rewrite count_TCC1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" attributePEG nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" attributePEG nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil attributePEG nil)
    (good_push_entry? const-decl "bool" attributePEG nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil attributePEG nil)
    (num_non_terminals const-decl "byte" attributePEG nil)
    (non_terminal type-eq-decl nil attributePEG nil)
    (peg type-decl nil attributePEG nil)
    (lang_spec type-eq-decl nil attributePEG nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" attributePEG nil)
    (scaffold type-eq-decl nil attributePEG nil)
    (good_stack? def-decl "bool" attributePEG nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil attributePEG nil)
    (fine_scaffold? const-decl "bool" attributePEG nil)
    (good_depth? const-decl "bool" attributePEG nil)
    (fine_stack? def-decl "bool" attributePEG nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" attributePEG nil)
    (loop_ready? const-decl "bool" attributePEG nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" attributePEG nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (state type-eq-decl nil attributePEG nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (sigma_nat application-judgement "nat" sigma reals)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pushcount const-decl "uint64" attributePEG nil)
    (scafcount const-decl "uint64" attributePEG nil)
    (sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_dec formula-decl nil attributePEG nil)
    (arr type-eq-decl nil arrayCount nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" attributePEG nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     attributePEG nil)
    (rootnt skolem-const-decl "non_terminal" attributePEG nil)
    (start skolem-const-decl "upto(len)" attributePEG nil)
    (s skolem-const-decl "strings(len)" attributePEG nil)
    (G skolem-const-decl "lang_spec" attributePEG nil)
    (pos!1 skolem-const-decl "uint32" attributePEG nil)
    (len skolem-const-decl "uint32" attributePEG nil)
    (good_good_entry? const-decl "bool" attributePEG nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (x!1 skolem-const-decl "upto(len)" attributePEG nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "(number_fields.-)(attributePEG.depth, 1)"
         "(attributePEG.good_depth?(attributePEG.len, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail(0)]))")))
 (step_TCC15 0
  (step_TCC7-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2" (inst - G "depth - 1" len scaf stack rest "fail(0)")
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)
           ("3" (typepred stack)
            (("3" (expand fine_stack? -)
              (("3" (ground)
                (("1" (grind) nil nil)
                 ("2" (lemma fine_mem_stack)
                  (("2" (ground)
                    (("2" (expand good_stack? -)
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2"
                    (inst - G "depth - 1" len scaf stack rest
                     "fail(0)")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (state type-eq-decl nil attributePEG nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" attributePEG nil)
    (loop_ready? const-decl "bool" attributePEG nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" attributePEG nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" attributePEG nil)
    (good_depth? const-decl "bool" attributePEG nil)
    (fine_scaffold? const-decl "bool" attributePEG nil)
    (strings type-eq-decl nil attributePEG nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" attributePEG nil)
    (scaffold type-eq-decl nil attributePEG nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil attributePEG nil)
    (peg type-decl nil attributePEG nil)
    (non_terminal type-eq-decl nil attributePEG nil)
    (num_non_terminals const-decl "byte" attributePEG nil)
    (byte type-eq-decl nil attributePEG nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" attributePEG nil)
    (empty? const-decl "bool" attributePEG nil)
    (good_good_entry? const-decl "bool" attributePEG nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil attributePEG nil)
    (nice_entry? const-decl "bool" attributePEG nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" attributePEG
     nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     attributePEG nil)
    (rootnt skolem-const-decl "non_terminal" attributePEG nil)
    (start skolem-const-decl "upto(len)" attributePEG nil)
    (s skolem-const-decl "strings(len)" attributePEG nil)
    (G skolem-const-decl "lang_spec" attributePEG nil)
    (len skolem-const-decl "uint32" attributePEG nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" attributePEG nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     attributePEG nil)
    (push_or_pending? const-decl "bool" attributePEG nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" attributePEG nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" attributePEG nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (fine_mem_stack formula-decl nil attributePEG nil)
    (good_mem_stack formula-decl nil attributePEG nil)
    (mem_stack? def-decl "bool" attributePEG nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "attributePEG.rest"
         "(attributePEG.fine_stack?(attributePEG.len, attributePEG.G, (number_fields.-)(attributePEG.depth, 1), attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail(0)]))")))
 (step_TCC16 0
  (step_TCC84-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" attributePEG nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil attributePEG nil)
    (push? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" attributePEG nil)
    (uint32 type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil attributePEG nil)
    (num_non_terminals const-decl "byte" attributePEG nil)
    (non_terminal type-eq-decl nil attributePEG nil)
    (peg type-decl nil attributePEG nil)
    (lang_spec type-eq-decl nil attributePEG nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil attributePEG nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" attributePEG nil)
    (scaffold type-eq-decl nil attributePEG nil)
    (fine_scaffold? const-decl "bool" attributePEG nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" attributePEG nil)
    (good_push_entry? const-decl "bool" attributePEG nil)
    (good_stack? def-decl "bool" attributePEG nil)
    (fine_stack? def-decl "bool" attributePEG nil)
    (loop_ready? const-decl "bool" attributePEG nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" attributePEG nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (state type-eq-decl nil attributePEG nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "attributePEG.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(attributePEG.nt(attributePEG.rest) = attributePEG.num_non_terminals, attributePEG.loop_ready?(attributePEG.len, attributePEG.G, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail(0)], attributePEG.pos(attributePEG.rest), attributePEG.nt(attributePEG.rest))) ELSE FORALL (i: naturalnumbers.upto(attributePEG.len)), n: (booleans.NOT)(attributePEG.loop?(attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail(0)](i)(attributePEG.n))) ENDIF}")))
 (step_TCC17 0
  (step_TCC16-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (count const-decl "upto(len)" arrayCount nil))
   nil
   (step subtype "attributePEG.pos"
         "naturalnumbers.below(attributePEG.len)")))
 (step_TCC18 0
  (step_TCC24-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "0" "uint64")))
 (step_TCC19 0
  (step_TCC25-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "0" "uint64")))
 (step_TCC20 0
  (step_TCC11-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil (step subtype "1" "uint32")))
 (step_TCC21 0
  (step_TCC14-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil attributePEG nil)
    (non_terminal type-eq-decl nil attributePEG nil)
    (peg type-decl nil attributePEG nil)
    (lang_spec type-eq-decl nil attributePEG nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil attributePEG nil)
    (ent type-decl nil attributePEG nil)
    (scaffold type-eq-decl nil attributePEG nil)
    (fine_scaffold? const-decl "bool" attributePEG nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" attributePEG nil)
    (good_depth? const-decl "bool" attributePEG nil)
    (fine_stack? def-decl "bool" attributePEG nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" attributePEG nil)
    (loop_ready? const-decl "bool" attributePEG nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" attributePEG nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (state type-eq-decl nil attributePEG nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (good_good? const-decl "bool" attributePEG nil)
    (good_entry? const-decl "bool" attributePEG nil)
    (pushcount const-decl "uint64" attributePEG nil)
    (good_tscaffold? const-decl "bool" attributePEG nil)
    (gfcount const-decl "uint64" attributePEG nil)
    (scafcount const-decl "uint64" attributePEG nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" attributePEG nil)
    (good_root? const-decl "bool" attributePEG nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sigma_nat application-judgement "nat" sigma reals)
    (num_non_terminals const-decl "byte" attributePEG nil)
    (empty? const-decl "bool" attributePEG nil)
    (good_good_entry? const-decl "bool" attributePEG nil)
    (good_push_entry? const-decl "bool" attributePEG nil)
    (nice_entry? const-decl "bool" attributePEG nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "attributePEG.v"
         "(attributePEG.nice_entry?(attributePEG.len, attributePEG.pos))")))
 (step_TCC22 0
  (step_TCC15-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide -12)
                  (("2" (typepred stack) (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" attributePEG nil)
    (scaffold type-eq-decl nil attributePEG nil)
    (nice_entry? const-decl "bool" attributePEG nil)
    (ent type-decl nil attributePEG nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil attributePEG nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil attributePEG nil)
    (peg type-decl nil attributePEG nil)
    (non_terminal type-eq-decl nil attributePEG nil)
    (num_non_terminals const-decl "byte" attributePEG nil)
    (byte type-eq-decl nil attributePEG nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" attributePEG nil)
    (good_root? const-decl "bool" attributePEG nil)
    (good_good_entry? const-decl "bool" attributePEG nil)
    (good_good? const-decl "bool" attributePEG nil)
    (good_fail? const-decl "bool" attributePEG nil)
    (successor const-decl "bool" attributePEG nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (good_tscaffold? const-decl "bool" attributePEG nil)
    (gfcount const-decl "uint64" attributePEG nil)
    (scafcount const-decl "uint64" attributePEG nil)
    (sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" attributePEG nil)
    (good_entry? const-decl "bool" attributePEG nil)
    (push_or_pending? const-decl "bool" attributePEG nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_nat application-judgement "nat" sigma reals)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (mem_stack? def-decl "bool" attributePEG nil)
    (fine_entry? const-decl "bool" attributePEG nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (len skolem-const-decl "uint32" attributePEG nil)
    (pos!1 skolem-const-decl "uint32" attributePEG nil)
    (v skolem-const-decl "ent" attributePEG nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" attributePEG nil)
    (good_push_entry? const-decl "bool" attributePEG nil)
    (good_stack? def-decl "bool" attributePEG nil)
    (fine_stack? def-decl "bool" attributePEG nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" attributePEG nil)
    (loop_ready? const-decl "bool" attributePEG nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" attributePEG nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (state type-eq-decl nil attributePEG nil)
    (good_good_tscaffold formula-decl nil attributePEG nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype
         "attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.v]"
         "(attributePEG.fine_scaffold?(attributePEG.len, attributePEG.G, attributePEG.s)(attributePEG.start, attributePEG.rootnt))")))
 (step_TCC23 0
  (step_TCC12-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3" (use sigma_dec)
                  (("3" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (grind) nil nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                               count(num_non_terminals)(push?)
                                                    (St`scaf WITH [(pos!1)(cur) := v](i))) = ((LAMBDA (i: upto(len)):
                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                              WITH [(pos!1)
                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                          1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                                      push?(St`scaf(x!1) WITH [(cur) := v](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if +)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("3" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand count)
                                  (("2"
                                    (lemma
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("2"
                                      (inst?)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand nonempty?)
                                          (("1"
                                            (expand empty?)
                                            (("1"
                                              (inst - cur)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite count_TCC1)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -1 3)
                            (("3" (expand count)
                              (("3"
                                (lemma
                                 "nonempty_card[below(num_non_terminals)]")
                                (("3"
                                  (inst?)
                                  (("1" (grind) nil nil)
                                   ("2" (rewrite count_TCC1) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (lemma
                         "nonempty_card[below(num_non_terminals)]")
                        (("2" (inst?)
                          (("1" (grind) nil nil)
                           ("2" (rewrite count_TCC1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (count_TCC1 subtype-tcc nil arrayCount nil))
   nil
   (step subtype "(number_fields.-)(attributePEG.depth, 1)"
         "(attributePEG.good_depth?(attributePEG.len, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.v]))")))
 (step_TCC24 0
  (step_TCC13-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2" (inst - G "depth - 1" len scaf stack rest v)
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (typepred "stack") (("2" (grind) nil nil)) nil)) nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2" (inst - G "depth - 1" len scaf stack rest "v")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.rest"
         "(attributePEG.fine_stack?(attributePEG.len, attributePEG.G, (number_fields.-)(attributePEG.depth, 1), attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.v]))")))
 (step_TCC25 0
  (step_TCC89-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" attributePEG nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil attributePEG nil)
    (push? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" attributePEG nil)
    (uint32 type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil attributePEG nil)
    (num_non_terminals const-decl "byte" attributePEG nil)
    (non_terminal type-eq-decl nil attributePEG nil)
    (peg type-decl nil attributePEG nil)
    (lang_spec type-eq-decl nil attributePEG nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil attributePEG nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" attributePEG nil)
    (scaffold type-eq-decl nil attributePEG nil)
    (fine_scaffold? const-decl "bool" attributePEG nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" attributePEG nil)
    (good_push_entry? const-decl "bool" attributePEG nil)
    (good_stack? def-decl "bool" attributePEG nil)
    (fine_stack? def-decl "bool" attributePEG nil)
    (loop_ready? const-decl "bool" attributePEG nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" attributePEG nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (state type-eq-decl nil attributePEG nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "attributePEG.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(attributePEG.nt(attributePEG.rest) = attributePEG.num_non_terminals, attributePEG.loop_ready?(attributePEG.len, attributePEG.G, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.v], attributePEG.pos(attributePEG.rest), attributePEG.nt(attributePEG.rest))) ELSE FORALL (i: naturalnumbers.upto(attributePEG.len)), n: (booleans.NOT)(attributePEG.loop?(attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.v](i)(attributePEG.n))) ENDIF}")))
 (step_TCC26 0
  (step_TCC44-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil attributePEG nil)
    (non_terminal type-eq-decl nil attributePEG nil)
    (peg type-decl nil attributePEG nil)
    (lang_spec type-eq-decl nil attributePEG nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil attributePEG nil)
    (ent type-decl nil attributePEG nil)
    (nice_entry? const-decl "bool" attributePEG nil)
    (scaffold type-eq-decl nil attributePEG nil)
    (fine_scaffold? const-decl "bool" attributePEG nil)
    (good_push_entry? const-decl "bool" attributePEG nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" attributePEG nil)
    (good_depth? const-decl "bool" attributePEG nil)
    (fine_stack? def-decl "bool" attributePEG nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" attributePEG nil)
    (loop_ready? const-decl "bool" attributePEG nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" attributePEG nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (state type-eq-decl nil attributePEG nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sigma_nat application-judgement "nat" sigma reals)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" attributePEG nil)
    (good_root? const-decl "bool" attributePEG nil)
    (good_or_fail? const-decl "bool" attributePEG nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" attributePEG nil)
    (gfcount const-decl "uint64" attributePEG nil)
    (good_tscaffold? const-decl "bool" attributePEG nil)
    (pushcount const-decl "uint64" attributePEG nil)
    (num_non_terminals const-decl "byte" attributePEG nil)
    (empty? const-decl "bool" attributePEG nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "attributePEG.pos"
         "naturalnumbers.below(attributePEG.len)")))
 (step_TCC27 0
  (step_TCC33-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "0" "uint64")))
 (step_TCC28 0
  (step_TCC34-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "0" "uint64")))
 (step_TCC29 0
  (step_TCC17-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil attributePEG nil)
    (non_terminal type-eq-decl nil attributePEG nil)
    (peg type-decl nil attributePEG nil)
    (lang_spec type-eq-decl nil attributePEG nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil attributePEG nil)
    (ent type-decl nil attributePEG nil)
    (nice_entry? const-decl "bool" attributePEG nil)
    (scaffold type-eq-decl nil attributePEG nil)
    (fine_scaffold? const-decl "bool" attributePEG nil)
    (good_push_entry? const-decl "bool" attributePEG nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" attributePEG nil)
    (good_depth? const-decl "bool" attributePEG nil)
    (fine_stack? def-decl "bool" attributePEG nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" attributePEG nil)
    (loop_ready? const-decl "bool" attributePEG nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" attributePEG nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (state type-eq-decl nil attributePEG nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (good_good_entry? const-decl "bool" attributePEG nil)
    (good_root? const-decl "bool" attributePEG nil)
    (good_or_fail? const-decl "bool" attributePEG nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" attributePEG nil)
    (gfcount const-decl "uint64" attributePEG nil)
    (good_tscaffold? const-decl "bool" attributePEG nil)
    (pushcount const-decl "uint64" attributePEG nil)
    (sigma_nat application-judgement "nat" sigma reals)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (num_non_terminals const-decl "byte" attributePEG nil)
    (empty? const-decl "bool" attributePEG nil)
    (/= const-decl "boolean" notequal nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (step subtype "1" "uint32")))
 (step_TCC30 0
  (step_TCC20-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil attributePEG nil)
    (non_terminal type-eq-decl nil attributePEG nil)
    (peg type-decl nil attributePEG nil)
    (lang_spec type-eq-decl nil attributePEG nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil attributePEG nil)
    (ent type-decl nil attributePEG nil)
    (scaffold type-eq-decl nil attributePEG nil)
    (fine_scaffold? const-decl "bool" attributePEG nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" attributePEG nil)
    (good_depth? const-decl "bool" attributePEG nil)
    (fine_stack? def-decl "bool" attributePEG nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" attributePEG nil)
    (loop_ready? const-decl "bool" attributePEG nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" attributePEG nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (state type-eq-decl nil attributePEG nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (good_good? const-decl "bool" attributePEG nil)
    (good_entry? const-decl "bool" attributePEG nil)
    (pushcount const-decl "uint64" attributePEG nil)
    (good_tscaffold? const-decl "bool" attributePEG nil)
    (gfcount const-decl "uint64" attributePEG nil)
    (scafcount const-decl "uint64" attributePEG nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" attributePEG nil)
    (good_root? const-decl "bool" attributePEG nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sigma_nat application-judgement "nat" sigma reals)
    (num_non_terminals const-decl "byte" attributePEG nil)
    (empty? const-decl "bool" attributePEG nil)
    (/= const-decl "boolean" notequal nil)
    (good_good_entry? const-decl "bool" attributePEG nil)
    (good_push_entry? const-decl "bool" attributePEG nil)
    (nice_entry? const-decl "bool" attributePEG nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "attributePEG.v"
         "(attributePEG.nice_entry?(attributePEG.len, attributePEG.pos))")))
 (step_TCC31 0
  (step_TCC21-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype
         "attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.v]"
         "(attributePEG.fine_scaffold?(attributePEG.len, attributePEG.G, attributePEG.s)(attributePEG.start, attributePEG.rootnt))")))
 (step_TCC32 0
  (step_TCC18-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3" (use sigma_dec)
                  (("3" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (grind) nil nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                                               count(num_non_terminals)(push?)
                                                                    (St`scaf WITH [(pos!1)(cur) := v](i))) = ((LAMBDA (i: upto(len)):
                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                              WITH [(pos!1)
                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                          1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                                                                  push?(St`scaf(x!1) WITH [(cur) := v](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if +)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("3" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand count)
                                  (("2"
                                    (lemma
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("2"
                                      (inst?)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand nonempty?)
                                          (("1"
                                            (expand empty?)
                                            (("1"
                                              (inst - cur)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite count_TCC1)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -1 3)
                            (("3" (expand count)
                              (("3"
                                (lemma
                                 "nonempty_card[below(num_non_terminals)]")
                                (("3"
                                  (inst?)
                                  (("1" (grind) nil nil)
                                   ("2" (rewrite count_TCC1) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (lemma
                         "nonempty_card[below(num_non_terminals)]")
                        (("2" (inst?)
                          (("1" (grind) nil nil)
                           ("2" (rewrite count_TCC1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" attributePEG nil)
    (/= const-decl "boolean" notequal nil)
    (empty? const-decl "bool" attributePEG nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil attributePEG nil)
    (good_push_entry? const-decl "bool" attributePEG nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil attributePEG nil)
    (num_non_terminals const-decl "byte" attributePEG nil)
    (non_terminal type-eq-decl nil attributePEG nil)
    (peg type-decl nil attributePEG nil)
    (lang_spec type-eq-decl nil attributePEG nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" attributePEG nil)
    (scaffold type-eq-decl nil attributePEG nil)
    (good_stack? def-decl "bool" attributePEG nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil attributePEG nil)
    (fine_scaffold? const-decl "bool" attributePEG nil)
    (good_depth? const-decl "bool" attributePEG nil)
    (fine_stack? def-decl "bool" attributePEG nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" attributePEG nil)
    (loop_ready? const-decl "bool" attributePEG nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" attributePEG nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (state type-eq-decl nil attributePEG nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (sigma_nat application-judgement "nat" sigma reals)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pushcount const-decl "uint64" attributePEG nil)
    (scafcount const-decl "uint64" attributePEG nil)
    (sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_dec formula-decl nil attributePEG nil)
    (arr type-eq-decl nil arrayCount nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     attributePEG nil)
    (rootnt skolem-const-decl "non_terminal" attributePEG nil)
    (start skolem-const-decl "upto(len)" attributePEG nil)
    (s skolem-const-decl "strings(len)" attributePEG nil)
    (G skolem-const-decl "lang_spec" attributePEG nil)
    (v skolem-const-decl "ent" attributePEG nil)
    (pos!1 skolem-const-decl "uint32" attributePEG nil)
    (len skolem-const-decl "uint32" attributePEG nil)
    (good_good_entry? const-decl "bool" attributePEG nil)
    (member const-decl "bool" sets nil)
    (x!1 skolem-const-decl "upto(len)" attributePEG nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "(number_fields.-)(attributePEG.depth, 1)"
         "(attributePEG.good_depth?(attributePEG.len, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.v]))")))
 (step_TCC33 0
  (step_TCC19-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2" (inst - G "depth - 1" len scaf stack rest v)
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (typepred "stack") (("2" (grind) nil nil)) nil)) nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2" (inst - G "depth - 1" len scaf stack rest "v")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (state type-eq-decl nil attributePEG nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" attributePEG nil)
    (loop_ready? const-decl "bool" attributePEG nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" attributePEG nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" attributePEG nil)
    (good_depth? const-decl "bool" attributePEG nil)
    (fine_scaffold? const-decl "bool" attributePEG nil)
    (strings type-eq-decl nil attributePEG nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" attributePEG nil)
    (scaffold type-eq-decl nil attributePEG nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil attributePEG nil)
    (peg type-decl nil attributePEG nil)
    (non_terminal type-eq-decl nil attributePEG nil)
    (num_non_terminals const-decl "byte" attributePEG nil)
    (byte type-eq-decl nil attributePEG nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" attributePEG nil)
    (/= const-decl "boolean" notequal nil)
    (empty? const-decl "bool" attributePEG nil)
    (good_good_entry? const-decl "bool" attributePEG nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil attributePEG nil)
    (nice_entry? const-decl "bool" attributePEG nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" attributePEG
     nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     attributePEG nil)
    (rootnt skolem-const-decl "non_terminal" attributePEG nil)
    (start skolem-const-decl "upto(len)" attributePEG nil)
    (s skolem-const-decl "strings(len)" attributePEG nil)
    (G skolem-const-decl "lang_spec" attributePEG nil)
    (len skolem-const-decl "uint32" attributePEG nil)
    (v skolem-const-decl "ent" attributePEG nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     attributePEG nil)
    (push_or_pending? const-decl "bool" attributePEG nil)
    (successor const-decl "bool" attributePEG nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" attributePEG nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (good_mem_stack formula-decl nil attributePEG nil)
    (fine_mem_stack formula-decl nil attributePEG nil)
    (mem_stack? def-decl "bool" attributePEG nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "attributePEG.rest"
         "(attributePEG.fine_stack?(attributePEG.len, attributePEG.G, (number_fields.-)(attributePEG.depth, 1), attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.v]))")))
 (step_TCC34 0
  (step_TCC90-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" attributePEG nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil attributePEG nil)
    (push? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" attributePEG nil)
    (uint32 type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil attributePEG nil)
    (num_non_terminals const-decl "byte" attributePEG nil)
    (non_terminal type-eq-decl nil attributePEG nil)
    (peg type-decl nil attributePEG nil)
    (lang_spec type-eq-decl nil attributePEG nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil attributePEG nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" attributePEG nil)
    (scaffold type-eq-decl nil attributePEG nil)
    (fine_scaffold? const-decl "bool" attributePEG nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" attributePEG nil)
    (good_push_entry? const-decl "bool" attributePEG nil)
    (good_stack? def-decl "bool" attributePEG nil)
    (fine_stack? def-decl "bool" attributePEG nil)
    (loop_ready? const-decl "bool" attributePEG nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" attributePEG nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (state type-eq-decl nil attributePEG nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "attributePEG.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(attributePEG.nt(attributePEG.rest) = attributePEG.num_non_terminals, attributePEG.loop_ready?(attributePEG.len, attributePEG.G, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.v], attributePEG.pos(attributePEG.rest), attributePEG.nt(attributePEG.rest))) ELSE FORALL (i: naturalnumbers.upto(attributePEG.len)), n: (booleans.NOT)(attributePEG.loop?(attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.v](i)(attributePEG.n))) ENDIF}")))
 (step_TCC35 0
  (step_TCC42-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - pos!1 n1)
              (("" (ground)
                (("1" (expand gfcount)
                  (("1" (use "sigma_max")
                    (("1" (ground)
                      (("1"
                        (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                        (("1" (assert)
                          (("1"
                            (name-replace lnn
                             "len * num_non_terminals + num_non_terminals")
                            (("1" (assert)
                              (("1"
                                (case-replace
                                 "dep(scaf(pos!1)(n1)) = d1")
                                (("1" (assert) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (case "len * num_non_terminals <= exp2(46)")
                            (("1" (assert) (("1" (grind) nil nil)) nil)
                             ("2"
                              (use "lt_times_lt_pos1" :subst
                                   (px
                                    len
                                    nnz
                                    num_non_terminals
                                    y
                                    "exp2(32)"
                                    w
                                    "exp2(8)"))
                              (("1"
                                (hide-all-but (-1 1))
                                (("1"
                                  (grind)
                                  (("1"
                                    (typepred len)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" attributePEG nil)
    (scaffold type-eq-decl nil attributePEG nil)
    (nice_entry? const-decl "bool" attributePEG nil)
    (ent type-decl nil attributePEG nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil attributePEG nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil attributePEG nil)
    (peg type-decl nil attributePEG nil)
    (non_terminal type-eq-decl nil attributePEG nil)
    (num_non_terminals const-decl "byte" attributePEG nil)
    (byte type-eq-decl nil attributePEG nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (gfcount const-decl "uint64" attributePEG nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (empty? const-decl "bool" attributePEG nil)
    (good_entry? const-decl "bool" attributePEG nil)
    (good_fail? const-decl "bool" attributePEG nil)
    (good_root? const-decl "bool" attributePEG nil)
    (scafcount const-decl "uint64" attributePEG nil)
    (sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (sigma_nat application-judgement "nat" sigma reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (good? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (uint64 type-eq-decl nil integertypes nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" attributePEG nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (good_or_fail? const-decl "bool" attributePEG nil)
    (sigma_max formula-decl nil attributePEG nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (good_tscaffold? const-decl "bool" attributePEG nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "(number_fields.+)(attributePEG.d1, 1)" "uint64")))
 (step_TCC36 0
  (step_TCC43-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil
   (step subtype
         "attributePEG.fail((number_fields.+)(attributePEG.d1, 1))"
         "(attributePEG.nice_entry?(attributePEG.len, attributePEG.pos))")))
 (step_TCC37 0
  (step_TCC55-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" attributePEG nil)
    (scaffold type-eq-decl nil attributePEG nil)
    (nice_entry? const-decl "bool" attributePEG nil)
    (ent type-decl nil attributePEG nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil attributePEG nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil attributePEG nil)
    (peg type-decl nil attributePEG nil)
    (non_terminal type-eq-decl nil attributePEG nil)
    (num_non_terminals const-decl "byte" attributePEG nil)
    (byte type-eq-decl nil attributePEG nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (empty? const-decl "bool" attributePEG nil)
    (good_root? const-decl "bool" attributePEG nil)
    (good_good_entry? const-decl "bool" attributePEG nil)
    (good_good? const-decl "bool" attributePEG nil)
    (loop_or_push? const-decl "bool" attributePEG nil)
    (good_fail? const-decl "bool" attributePEG nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (successor const-decl "bool" attributePEG nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (good_tscaffold? const-decl "bool" attributePEG nil)
    (gfcount const-decl "uint64" attributePEG nil)
    (scafcount const-decl "uint64" attributePEG nil)
    (sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" attributePEG nil)
    (good_entry? const-decl "bool" attributePEG nil)
    (push_or_pending? const-decl "bool" attributePEG nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_nat application-judgement "nat" sigma reals)
    (fine_entry? const-decl "bool" attributePEG nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (len skolem-const-decl "uint32" attributePEG nil)
    (pos!1 skolem-const-decl "uint32" attributePEG nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" attributePEG nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (d1 skolem-const-decl "uint64" attributePEG nil)
    (good_depth? const-decl "bool" attributePEG nil)
    (good_push_entry? const-decl "bool" attributePEG nil)
    (good_stack? def-decl "bool" attributePEG nil)
    (fine_stack? def-decl "bool" attributePEG nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" attributePEG nil)
    (loop_ready? const-decl "bool" attributePEG nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" attributePEG nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (state type-eq-decl nil attributePEG nil)
    (good_good_tscaffold formula-decl nil attributePEG nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype
         "attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail((number_fields.+)(attributePEG.d1, 1))]"
         "(attributePEG.fine_scaffold?(attributePEG.len, attributePEG.G, attributePEG.s)(attributePEG.start, attributePEG.rootnt))")))
 (step_TCC38 0
  (step_TCC22-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3" (use sigma_dec)
                  (("3" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (grind) nil nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                                                       count(num_non_terminals)(push?)
                                                                            (St`scaf WITH [(pos!1)(cur) := fail(1 + d1)](i))) = ((LAMBDA (i: upto(len)):
                                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                                      WITH [(pos!1)
                                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                  1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                                                                                push?(St`scaf(x!1) WITH [(cur) := fail(1 + d1)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if +)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil)
                                             ("3"
                                              (skeep*)
                                              (("3"
                                                (use step_TCC35)
                                                (("3"
                                                  (ground)
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (inst?)
                                                          (("3"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide -6 2)
                                          (("3" (grind) nil nil))
                                          nil)
                                         ("4"
                                          (hide 2)
                                          (("4"
                                            (skeep*)
                                            (("4"
                                              (use step_TCC35)
                                              (("4"
                                                (ground)
                                                (("4"
                                                  (inst?)
                                                  (("4"
                                                    (inst?)
                                                    (("4"
                                                      (inst?)
                                                      (("4"
                                                        (inst?)
                                                        (("4"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand count +)
                                  (("2"
                                    (use
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (expand nonempty?)
                                        (("1"
                                          (expand empty?)
                                          (("1"
                                            (inst - "nt(stack)")
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (typepred "nt(stack)")
                                                (("2"
                                                  (expand
                                                   "good_push_entry?")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "count_TCC1")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (hide 2)
                                (("4"
                                  (use step_TCC35)
                                  (("4"
                                    (ground)
                                    (("4"
                                      (inst?)
                                      (("4"
                                        (inst?)
                                        (("4"
                                          (inst?)
                                          (("4"
                                            (inst?)
                                            (("4" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -1)
                            (("3" (expand count)
                              (("3"
                                (use
                                 "nonempty_card[below(num_non_terminals)]")
                                (("1"
                                  (ground)
                                  (("1"
                                    (hide -5 5)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2" (rewrite "count_TCC1") nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide -1 3) (("4" (grind) nil nil))
                            nil)
                           ("5" (use step_TCC35)
                            (("5" (ground)
                              (("5"
                                (inst?)
                                (("5"
                                  (inst?)
                                  (("5"
                                    (inst?)
                                    (("5"
                                      (inst?)
                                      (("5" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (use "nonempty_card[below(num_non_terminals)]")
                        (("1" (grind) nil nil)
                         ("2" (rewrite count_TCC1) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" attributePEG nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" attributePEG nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil attributePEG nil)
    (good_push_entry? const-decl "bool" attributePEG nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil attributePEG nil)
    (num_non_terminals const-decl "byte" attributePEG nil)
    (non_terminal type-eq-decl nil attributePEG nil)
    (peg type-decl nil attributePEG nil)
    (lang_spec type-eq-decl nil attributePEG nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" attributePEG nil)
    (scaffold type-eq-decl nil attributePEG nil)
    (good_stack? def-decl "bool" attributePEG nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil attributePEG nil)
    (fine_scaffold? const-decl "bool" attributePEG nil)
    (good_depth? const-decl "bool" attributePEG nil)
    (fine_stack? def-decl "bool" attributePEG nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" attributePEG nil)
    (loop_ready? const-decl "bool" attributePEG nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" attributePEG nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (state type-eq-decl nil attributePEG nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (sigma_nat application-judgement "nat" sigma reals)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pushcount const-decl "uint64" attributePEG nil)
    (scafcount const-decl "uint64" attributePEG nil)
    (sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_dec formula-decl nil attributePEG nil)
    (arr type-eq-decl nil arrayCount nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" attributePEG nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" attributePEG nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     attributePEG nil)
    (rootnt skolem-const-decl "non_terminal" attributePEG nil)
    (start skolem-const-decl "upto(len)" attributePEG nil)
    (s skolem-const-decl "strings(len)" attributePEG nil)
    (G skolem-const-decl "lang_spec" attributePEG nil)
    (pos!1 skolem-const-decl "uint32" attributePEG nil)
    (len skolem-const-decl "uint32" attributePEG nil)
    (d1 skolem-const-decl "uint64" attributePEG nil)
    (inherited formal-type-decl nil attributePEG nil)
    (synthesized formal-type-decl nil attributePEG nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (step_TCC35 subtype-tcc nil attributePEG nil)
    (good_good_entry? const-decl "bool" attributePEG nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (x!1 skolem-const-decl "upto(len)" attributePEG nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     attributePEG nil)
    (nonempty? const-decl "bool" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "(number_fields.-)(attributePEG.depth, 1)"
         "(attributePEG.good_depth?(attributePEG.len, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail((number_fields.+)(attributePEG.d1, 1))]))")))
 (step_TCC39 0
  (step_TCC23-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2" (inst - G "depth - 1" len scaf stack rest "fail(1 + d1)")
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (expand nice_entry?) (("2" (propax) nil nil)) nil))
            nil)
           ("3" (typepred "stack") (("3" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2"
                    (inst - G "depth - 1" len scaf stack rest
                     "fail(1 + d1)")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.rest"
         "(attributePEG.fine_stack?(attributePEG.len, attributePEG.G, (number_fields.-)(attributePEG.depth, 1), attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail((number_fields.+)(attributePEG.d1, 1))]))")))
 (step_TCC40 0
  (step_TCC95-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(attributePEG.nt(attributePEG.rest) = attributePEG.num_non_terminals, attributePEG.loop_ready?(attributePEG.len, attributePEG.G, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail((number_fields.+)(1, attributePEG.d1))], attributePEG.pos(attributePEG.rest), attributePEG.nt(attributePEG.rest))) ELSE FORALL (i: naturalnumbers.upto(attributePEG.len)), n: (booleans.NOT)(attributePEG.loop?(attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail((number_fields.+)(1, attributePEG.d1))](i)(attributePEG.n))) ENDIF}")))
 (step_TCC41 0
  (step_TCC30-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "St`scaf(pos!1)(n1)") (("" (grind) nil nil)) nil))
    nil)
   nil nil
   (step subtype "(number_fields.+)(attributePEG.pos, attributePEG.sp)"
         "naturalnumbers.upto(attributePEG.len)")))
 (step_TCC42 0
  (step_TCC75-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst-cp - pos!1 n1)
              (("" (inst - pos!1+sp n2)
                (("" (ground)
                  (("1" (expand gfcount)
                    (("1" (use "sigma_max")
                      (("1" (ground)
                        (("1"
                          (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                          (("1" (assert)
                            (("1"
                              (name-replace lnn
                               "len * num_non_terminals + num_non_terminals")
                              (("1"
                                (assert)
                                (("1"
                                  (case-replace
                                   "dep(scaf(pos!1 + sp)(n2)) = d2")
                                  (("1"
                                    (case-replace
                                     "dep(scaf(pos!1)(n1)) = d1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand max)
                                        (("1"
                                          (lift-if)
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (case "len * num_non_terminals <= exp2(46)")
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (use
                                 "lt_times_lt_pos1"
                                 :subst
                                 (px
                                  len
                                  nnz
                                  num_non_terminals
                                  y
                                  "exp2(32)"
                                  w
                                  "exp2(8)"))
                                (("1"
                                  (hide-all-but (-1 1))
                                  (("1"
                                    (grind)
                                    (("1"
                                      (typepred len)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil) ("3" (grind) nil nil)
                   ("4" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype
         "(number_fields.+)(1, real_defs.max(attributePEG.d1, attributePEG.d2))"
         "uint64")))
 (step_TCC43 0
  (step_TCC56-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (expand nice_entry?) (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype
         "attributePEG.fail((number_fields.+)(1, real_defs.max(attributePEG.d1, attributePEG.d2)))"
         "(attributePEG.nice_entry?(attributePEG.len, attributePEG.pos))")))
 (step_TCC44 0
  (step_TCC63-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype
         "attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail((number_fields.+)(1, real_defs.max(attributePEG.d1, attributePEG.d2)))]"
         "(attributePEG.fine_scaffold?(attributePEG.len, attributePEG.G, attributePEG.s)(attributePEG.start, attributePEG.rootnt))")))
 (step_TCC45 0
  (step_TCC31-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (rewrite scafcount_update)
                (("1" (grind :exclude scafcount) nil nil)
                 ("2" (hide 2) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil))
   nil
   (step subtype "(number_fields.-)(attributePEG.depth, 1)"
         "(attributePEG.good_depth?(attributePEG.len, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail((number_fields.+)(1, real_defs.max(attributePEG.d1, attributePEG.d2)))]))")))
 (step_TCC46 0
  (step_TCC32-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2"
          (inst - G "depth - 1" len scaf stack rest
           "fail(1 + max(d1, d2))")
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (expand nice_entry?) (("2" (propax) nil nil)) nil))
            nil)
           ("3" (typepred "stack") (("3" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2"
                    (inst - G "depth - 1" len scaf stack rest
                     "fail(1 + max(d1, d2))")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.rest"
         "(attributePEG.fine_stack?(attributePEG.len, attributePEG.G, (number_fields.-)(attributePEG.depth, 1), attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail((number_fields.+)(1, real_defs.max(attributePEG.d1, attributePEG.d2)))]))")))
 (step_TCC47 0
  (step_TCC117-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(attributePEG.nt(attributePEG.rest) = attributePEG.num_non_terminals, attributePEG.loop_ready?(attributePEG.len, attributePEG.G, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail((number_fields.+)(1, real_defs.max(attributePEG.d1, attributePEG.d2)))], attributePEG.pos(attributePEG.rest), attributePEG.nt(attributePEG.rest))) ELSE FORALL (i: naturalnumbers.upto(attributePEG.len)), n: (booleans.NOT)(attributePEG.loop?(attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail((number_fields.+)(1, real_defs.max(attributePEG.d1, attributePEG.d2)))](i)(attributePEG.n))) ENDIF}")))
 (step_TCC48 0
  (step_TCC64-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst-cp - pos!1 n1)
              (("" (inst - pos!1+sp n2)
                (("" (ground)
                  (("1" (expand gfcount)
                    (("1" (use "sigma_max")
                      (("1" (ground)
                        (("1"
                          (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                          (("1" (assert)
                            (("1"
                              (name-replace lnn
                               "len * num_non_terminals + num_non_terminals")
                              (("1"
                                (assert)
                                (("1"
                                  (case-replace
                                   "dep(scaf(pos!1 + sp)(n2)) = d2")
                                  (("1"
                                    (case-replace
                                     "dep(scaf(pos!1)(n1)) = d1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand max)
                                        (("1"
                                          (lift-if)
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (case "len * num_non_terminals <= exp2(46)")
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (use
                                 "lt_times_lt_pos1"
                                 :subst
                                 (px
                                  len
                                  nnz
                                  num_non_terminals
                                  y
                                  "exp2(32)"
                                  w
                                  "exp2(8)"))
                                (("1"
                                  (hide-all-but (-1 1))
                                  (("1"
                                    (grind)
                                    (("1"
                                      (typepred len)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil) ("3" (grind) nil nil)
                   ("4" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype
         "(number_fields.+)(1, real_defs.max(attributePEG.d1, attributePEG.d2))"
         "uint64")))
 (step_TCC49 0
  (step_TCC41-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "St`scaf(pos!1)(n1)")
      (("" (typepred "St`scaf(pos!1 + sp)(n2)")
        (("" (typepred len) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   nil nil
   (step subtype "(number_fields.+)(attributePEG.sp, attributePEG.sp2)"
         "uint32")))
 (step_TCC50 0
  (step_TCC76-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "St`scaf(pos!1)(n1)")
      (("" (typepred "St`scaf(pos!1 + sp)(n2)") (("" (grind) nil nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype
         "attributePEG.good((number_fields.+)(1, real_defs.max(attributePEG.d1, attributePEG.d2)), (number_fields.+)(attributePEG.sp, attributePEG.sp2), attributePEG.inh, attributePEG.csyn(attributePEG.inh, attributePEG.syn1, attributePEG.syn2))"
         "(attributePEG.nice_entry?(attributePEG.len, attributePEG.pos))")))
 (step_TCC51 0
  (step_TCC83-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?)
                    (("2" (ground)
                      (("1" (typepred "St`scaf(pos!1 + sp)(n2)")
                        (("1" (grind) nil nil)) nil)
                       ("2" (expand good_good?)
                        (("2" (grind :exclude (max gfcount)) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (typepred lflag)
                  (("3" (skeep*)
                    (("3" (ground)
                      (("1" (inst?) nil nil) ("2" (grind) nil nil)
                       ("3" (inst?) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "St`scaf(pos!1 + sp)(n2)")
                (("2" (typepred "St`scaf(pos!1)(n1)")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype
         "attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good((number_fields.+)(1, real_defs.max(attributePEG.d1, attributePEG.d2)), (number_fields.+)(attributePEG.sp, attributePEG.sp2), attributePEG.inh, attributePEG.csyn(attributePEG.inh, attributePEG.syn1, attributePEG.syn2))]"
         "(attributePEG.fine_scaffold?(attributePEG.len, attributePEG.G, attributePEG.s)(attributePEG.start, attributePEG.rootnt))")))
 (step_TCC52 0
  (step_TCC39-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3" (use sigma_dec)
                  (("3" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (grind) nil nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                                                       count(num_non_terminals)(push?)
                                                                            (St`scaf WITH [(pos!1)(cur) := good(1 + max(d1, d2), sp2 + sp)](i))) = ((LAMBDA (i: upto(len)):
                                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                                      WITH [(pos!1)
                                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                  1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                                                                                push?(St`scaf(x!1) WITH [(cur) := good(1 + max(d1, d2), sp2 + sp)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if +)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (typepred
                                                 "St`scaf(pos!1)(n1)")
                                                (("2"
                                                  (typepred
                                                   "St`scaf(pos!1 + sp)(n2)")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skeep*)
                                              (("3"
                                                (use step_TCC49)
                                                (("3"
                                                  (ground)
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (hide -6 2)
                                              (("4"
                                                (typepred
                                                 "St`scaf(pos!1)(n1)")
                                                (("4"
                                                  (typepred
                                                   "St`scaf(pos!1 + sp)(n2)")
                                                  (("4"
                                                    (skeep*)
                                                    (("4"
                                                      (use step_TCC48)
                                                      (("4"
                                                        (ground)
                                                        (("4"
                                                          (inst?)
                                                          (("4"
                                                            (inst?)
                                                            (("4"
                                                              (inst?)
                                                              (("4"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skeep*)
                                          (("3"
                                            (typepred
                                             "St`scaf(pos!1)(n1)")
                                            (("3"
                                              (typepred
                                               "St`scaf(pos!1 + sp)(n2)")
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (skeep*)
                                          (("4"
                                            (use step_TCC49)
                                            (("4"
                                              (ground)
                                              (("4"
                                                (inst?)
                                                (("4"
                                                  (inst?)
                                                  (("4"
                                                    (inst?)
                                                    (("4"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("5"
                                          (skeep*)
                                          (("5"
                                            (use step_TCC48)
                                            (("5"
                                              (ground)
                                              (("5"
                                                (inst?)
                                                (("5"
                                                  (inst?)
                                                  (("5"
                                                    (inst?)
                                                    (("5"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand count)
                                (("2"
                                  (use
                                   "nonempty_card[below(num_non_terminals)]")
                                  (("1" (grind) nil nil)
                                   ("2" (rewrite count_TCC1) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3"
                                  (typepred "St`scaf(pos!1)(n1)")
                                  (("3"
                                    (typepred
                                     "St`scaf(pos!1 + sp)(n2)")
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (hide 2)
                                (("4"
                                  (use step_TCC49)
                                  (("4"
                                    (ground)
                                    (("4"
                                      (inst?)
                                      (("4"
                                        (inst?)
                                        (("4"
                                          (inst?)
                                          (("4" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("5"
                                (hide 2)
                                (("5"
                                  (use step_TCC48)
                                  (("5"
                                    (ground)
                                    (("5"
                                      (inst?)
                                      (("5"
                                        (inst?)
                                        (("5"
                                          (inst?)
                                          (("5" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -1 3)
                            (("3" (expand count)
                              (("3"
                                (use
                                 "nonempty_card[below(num_non_terminals)]")
                                (("1" (grind) nil nil)
                                 ("2" (rewrite count_TCC1) nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide -1 3)
                            (("4" (typepred "St`scaf(pos!1)(n1)")
                              (("4"
                                (typepred "St`scaf(pos!1 + sp)(n2)")
                                (("4" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("5" (hide -1 3)
                            (("5" (use step_TCC49)
                              (("5"
                                (ground)
                                (("5"
                                  (inst?)
                                  (("5"
                                    (inst?)
                                    (("5"
                                      (inst?)
                                      (("5" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("6" (hide -1 3)
                            (("6" (use step_TCC48)
                              (("6"
                                (ground)
                                (("6"
                                  (inst?)
                                  (("6"
                                    (inst?)
                                    (("6"
                                      (inst?)
                                      (("6" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (expand count)
                        (("2"
                          (use "nonempty_card[below(num_non_terminals)]")
                          (("1" (grind) nil nil)
                           ("2" (rewrite count_TCC1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (count_TCC1 subtype-tcc nil arrayCount nil))
   nil
   (step subtype "(number_fields.-)(attributePEG.depth, 1)"
         "(attributePEG.good_depth?(attributePEG.len, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good((number_fields.+)(1, real_defs.max(attributePEG.d1, attributePEG.d2)), (number_fields.+)(attributePEG.sp, attributePEG.sp2), attributePEG.inh, attributePEG.csyn(attributePEG.inh, attributePEG.syn1, attributePEG.syn2))]))")))
 (step_TCC53 0
  (step_TCC40-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2"
          (inst - G "depth - 1" len scaf stack rest
           "good(1 + max(d1, d2), sp2 + sp)")
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (typepred "stack")
              (("2" (typepred "St`scaf(pos!1)(n1)")
                (("2" (typepred "St`scaf(pos!1 + sp)(n2)")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (use step_TCC52)
            (("3" (ground)
              (("3" (inst?)
                (("3" (inst?)
                  (("3" (inst?) (("3" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2"
                    (inst - G "depth - 1" len scaf stack rest
                     "good(1 + max(d1, d2), sp2 + sp)")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (typepred "St`scaf(pos!1)(n1)")
                      (("2" (typepred "St`scaf(pos!1 + sp)(n2)")
                        (("2" (grind) nil nil)) nil))
                      nil)
                     ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.rest"
         "(attributePEG.fine_stack?(attributePEG.len, attributePEG.G, (number_fields.-)(attributePEG.depth, 1), attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good((number_fields.+)(1, real_defs.max(attributePEG.d1, attributePEG.d2)), (number_fields.+)(attributePEG.sp, attributePEG.sp2), attributePEG.inh, attributePEG.csyn(attributePEG.inh, attributePEG.syn1, attributePEG.syn2))]))")))
 (step_TCC54 0
  (step_TCC81-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(attributePEG.nt(attributePEG.rest) = attributePEG.num_non_terminals, attributePEG.loop_ready?(attributePEG.len, attributePEG.G, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good((number_fields.+)(1, real_defs.max(attributePEG.d1, attributePEG.d2)), (number_fields.+)(attributePEG.sp2, attributePEG.sp), attributePEG.inh, attributePEG.csyn(attributePEG.inh, attributePEG.syn1, attributePEG.syn2))], attributePEG.pos(attributePEG.rest), attributePEG.nt(attributePEG.rest))) ELSE FORALL (i: naturalnumbers.upto(attributePEG.len)), n: (booleans.NOT)(attributePEG.loop?(attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good((number_fields.+)(1, real_defs.max(attributePEG.d1, attributePEG.d2)), (number_fields.+)(attributePEG.sp2, attributePEG.sp), attributePEG.inh, attributePEG.csyn(attributePEG.inh, attributePEG.syn1, attributePEG.syn2))](i)(attributePEG.n))) ENDIF}")))
 (step_TCC55 0
  (step_TCC45-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (count const-decl "upto(len)" arrayCount nil))
   nil
   (step subtype "attributePEG.St`stack"
         "(attributePEG.nice_entry?(attributePEG.len, (number_fields.+)(attributePEG.pos, attributePEG.sp)))")))
 (step_TCC56 0
  (step_TCC46-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?)
                    (("2" (typepred "St`scaf(pos!1 + sp)(n2)")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3)
                          (("1" (ground)
                            (("1" (grind) nil nil)
                             ("2" (hide -5) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (hide -1) (("2" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (hide -2)
                (("2" (typepred stack) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma def-decl "real" sigma reals))
   nil
   (step subtype
         "attributePEG.St`scaf WITH [((number_fields.+)(attributePEG.pos, attributePEG.sp))(attributePEG.n2) := attributePEG.St`stack]"
         "(attributePEG.fine_scaffold?(attributePEG.len, attributePEG.G, attributePEG.s)(attributePEG.start, attributePEG.rootnt))")))
 (step_TCC57 0
  (step_TCC49-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred depth)
        (("1" (expand good_depth?)
          (("1" (expand pushcount)
            (("1" (use scafcount_max)
              (("1" (assert)
                (("1" (use exp2_lt :subst (n 41 m 64))
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "good_depth?")
        (("2" (expand pushcount)
          (("2" (rewrite scafcount_update)
            (("1" (lift-if)
              (("1" (ground)
                (("1" (typepred "St`scaf(pos!1)(n1)")
                  (("1" (grind) nil nil)) nil)
                 ("2" (typepred depth)
                  (("2" (grind :exclude (max scafcount)) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil))
   nil
   (step subtype "(number_fields.+)(attributePEG.St`depth, 1)"
         "(attributePEG.good_depth?(attributePEG.len, attributePEG.St`scaf WITH [((number_fields.+)(attributePEG.pos, attributePEG.sp))(attributePEG.n2) := attributePEG.St`stack]))")))
 (step_TCC58 0
  (step_TCC50-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "St`scaf(pos!1)(n1)")
      (("" (typepred "St`scaf(pos!1 + sp)(n2)")
        (("" (typepred len) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   nil nil
   (step subtype "(number_fields.+)(attributePEG.pos, attributePEG.sp)"
         "uint32")))
 (step_TCC59 0
  (step_TCC65-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2" (expand good_stack? +)
          (("2" (ground)
            (("1" (hide -1) (("1" (grind) nil nil)) nil)
             ("2"
              (inst - G "depth" len scaf "push(pos!1 + sp, n2)" "stack"
               stack)
              (("1" (ground)
                (("1" (hide 2)
                  (("1" (typepred "St`scaf(pos!1)(n1)")
                    (("1" (grind) nil nil)) nil))
                  nil)
                 ("2" (use mem_stack_push) (("2" (ground) nil nil))
                  nil)
                 ("3" (hide 2) (("3" (grind) nil nil)) nil))
                nil)
               ("2" (hide 2)
                (("2" (typepred stack) (("2" (grind) nil nil)) nil))
                nil)
               ("3" (hide 2)
                (("3" (typepred "St`scaf(pos!1)(n1)")
                  (("3" (grind) nil nil)) nil))
                nil)
               ("4" (typepred "St`scaf(pos!1)(n1)")
                (("4" (typepred len) (("4" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand fine_stack? +)
        (("3" (ground)
          (("1" (lemma mem_mem_stack)
            (("1" (inst - G depth len scaf _ _ _ _)
              (("1"
                (inst - "push(pos!1 + sp, n2)" "push(pos!1 + sp, n2)"
                 stack stack)
                (("1" (ground)
                  (("1" (use mem_stack_push) (("1" (ground) nil nil))
                    nil)
                   ("2" (typepred "St`scaf(pos!1)(n1)")
                    (("2" (grind) nil nil)) nil)
                   ("3" (typepred "St`scaf(pos!1)(n1)")
                    (("3" (grind) nil nil)) nil)
                   ("4" (use mem_stack_push) (("4" (ground) nil nil))
                    nil)
                   ("5" (typepred "St`scaf(pos!1)(n1)")
                    (("5" (grind) nil nil)) nil))
                  nil)
                 ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                 ("3" (typepred "St`scaf(pos!1)(n1)")
                  (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2"
            (use fine_mem_stack :subst
                 (len len entry "push(pos!1 + sp, n2)"))
            (("1" (ground)
              (("1" (hide 2)
                (("1" (typepred "St`scaf(pos!1)(n1)")
                  (("1" (grind) nil nil)) nil))
                nil)
               ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil)
               ("3" (grind) nil nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred "St`scaf(pos!1)(n1)")
              (("3" (grind) nil nil)) nil)
             ("4" (typepred "St`scaf(pos!1)(n1)")
              (("4" (typepred len) (("4" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype
         "attributePEG.push((number_fields.+)(attributePEG.pos, attributePEG.sp), attributePEG.n2, attributePEG.rin(attributePEG.inh, attributePEG.syn1))"
         "(attributePEG.fine_stack?(attributePEG.len, attributePEG.G, (number_fields.+)(attributePEG.St`depth, 1), attributePEG.St`scaf WITH [((number_fields.+)(attributePEG.pos, attributePEG.sp))(attributePEG.n2) := attributePEG.St`stack]))")))
 (step_TCC60 0
  (step_TCC82-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1)
            (("2" (skeep*)
              (("2" (lift-if)
                (("2" (ground)
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (typepred stack) (("1" (grind) nil nil))
                        nil)
                       ("2" (inst?) nil nil))
                      nil))
                    nil)
                   ("2" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(attributePEG.n2 = attributePEG.num_non_terminals, attributePEG.loop_ready?(attributePEG.len, attributePEG.G, attributePEG.St`scaf WITH [((number_fields.+)(attributePEG.pos, attributePEG.sp))(attributePEG.n2) := attributePEG.St`stack], (number_fields.+)(attributePEG.pos, attributePEG.sp), attributePEG.n2)) ELSE FORALL (i: naturalnumbers.upto(attributePEG.len)), n: (booleans.NOT)(attributePEG.loop?(attributePEG.St`scaf WITH [((number_fields.+)(attributePEG.pos, attributePEG.sp))(attributePEG.n2) := attributePEG.St`stack](i)(attributePEG.n))) ENDIF}")))
 (step_TCC61 0
  (step_TCC28-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "attributePEG.loop"
         "(attributePEG.nice_entry?(attributePEG.len, attributePEG.pos))")))
 (step_TCC62 0
  (step_TCC29-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?)
                    (("2" (typepred "St`scaf(pos!1 + sp)(n2)")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3)
                          (("1" (ground) (("1" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (hide -5) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) (("2" (hide 2) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype
         "attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop]"
         "(attributePEG.fine_scaffold?(attributePEG.len, attributePEG.G, attributePEG.s)(attributePEG.start, attributePEG.rootnt))")))
 (step_TCC63 0
  (step_TCC26-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3" (use sigma_dec)
                  (("3" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (typepred "St`scaf(pos!1)(n1)")
                          (("1" (grind :exclude sigma) nil nil)) nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)
                                                                                    (St`scaf WITH [(pos!1)(cur) := loop](i))) = ((LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                                              WITH [(pos!1)
                                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                          1])")
                          (("1" (hide -1)
                            (("1" (replace -1 :hide? t)
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality :hide? t)
                              (("1"
                                (expand count)
                                (("1"
                                  (case "pos!1 = x!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case-replace
                                       "{i: below(num_non_terminals) |
                                                                                                                              push?(St`scaf(x!1) WITH [(cur) := loop](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                      (("1"
                                        (rewrite card_remove)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (lift-if +)
                                            (("1"
                                              (ground)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1 2)
                                          (("2"
                                            (rewrite "count_TCC1")
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (apply-extensionality)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (hide -3 -4 -6)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (expand count)
                                (("2"
                                  (use
                                   "nonempty_card[below(num_non_terminals)]")
                                  (("1" (grind) nil nil)
                                   ("2" (rewrite count_TCC1) nil nil))
                                  nil))
                                nil)
                               ("3" (grind) nil nil))
                              nil))
                            nil)
                           ("3" (expand count)
                            (("3"
                              (use "nonempty_card[below(num_non_terminals)]")
                              (("1" (grind) nil nil)
                               ("2" (rewrite count_TCC1) nil nil))
                              nil))
                            nil)
                           ("4" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (use "nonempty_card[below(num_non_terminals)]")
                        (("1" (grind) nil nil)
                         ("2" (rewrite count_TCC1) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (count_TCC1 subtype-tcc nil arrayCount nil))
   nil
   (step subtype "(number_fields.-)(attributePEG.depth, 1)"
         "(attributePEG.good_depth?(attributePEG.len, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop]))")))
 (step_TCC64 0
  (step_TCC27-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred "St`scaf(pos!1)(n1)")
        (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
       ("2" (lemma good_mem_stack)
        (("2"
          (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
           loop)
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred "St`stack")
              (("3" (expand "fine_stack?")
                (("3" (ground)
                  (("1" (grind :exclude mem_stack) nil nil)
                   ("2" (hide -1)
                    (("2" (replace -8)
                      (("2" (replace -9)
                        (("2" (replace -5)
                          (("2"
                            (case-replace
                             "push(pos(St`stack), nt(St`stack)) = St`stack")
                            (("1"
                              (case-replace
                               "St`scaf(pos(St`stack))(nt(St`stack)) = rest")
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (apply-extensionality 1) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (grind) nil nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil)
           ("4" (typepred stack) (("4" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (lemma fine_mem_stack)
        (("3"
          (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
           loop)
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
             ("2" (hide 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)
             ("3" (hide 2)
              (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
             ("4" (typepred stack)
              (("4" (hide 1)
                (("4" (expand "fine_stack?")
                  (("4" (ground)
                    (("1" (typepred stack) (("1" (grind) nil nil)) nil)
                     ("2"
                      (case-replace
                       "St`scaf(pos(stack))(nt(stack)) = rest")
                      (("1"
                        (case-replace "push(pos!1, cur) = St`stack")
                        (("1" (assert) nil nil)
                         ("2" (apply-extensionality 1)
                          (("2" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (typepred stack) (("5" (grind) nil nil)) nil))
            nil)
           ("2" (grind) nil nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil)
           ("4" (typepred stack) (("4" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.rest"
         "(attributePEG.fine_stack?(attributePEG.len, attributePEG.G, (number_fields.-)(attributePEG.depth, 1), attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop]))")))
 (step_TCC65 0
  (step_TCC103-1 nil 3804706560
   ("" (skeep*)
    (("" (typepred stack) (("" (grind :exclude mem_stack?) nil nil))
      nil))
    nil)
   nil nil
   (step subtype "booleans.TRUE"
         "{b: booleans.bool | IF b THEN booleans.OR(attributePEG.nt(attributePEG.rest) = attributePEG.num_non_terminals, attributePEG.loop_ready?(attributePEG.len, attributePEG.G, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop], attributePEG.pos(attributePEG.rest), attributePEG.nt(attributePEG.rest))) ELSE FORALL (i: naturalnumbers.upto(attributePEG.len)), n: (booleans.NOT)(attributePEG.loop?(attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop](i)(attributePEG.n))) ENDIF}")))
 (step_TCC66 0
  (step_TCC95-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (count const-decl "upto(len)" arrayCount nil))
   nil
   (step subtype "attributePEG.stack"
         "(attributePEG.nice_entry?(attributePEG.len, attributePEG.pos))")))
 (step_TCC67 0
  (step_TCC77-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype
         "attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.n1) := attributePEG.stack]"
         "(attributePEG.fine_scaffold?(attributePEG.len, attributePEG.G, attributePEG.s)(attributePEG.start, attributePEG.rootnt))")))
 (step_TCC68 0
  (step_TCC78-1 nil 3804455654
   ("" (skeep*)
    (("" (split)
      (("1" (typepred stack)
        (("1" (typepred depth)
          (("1" (expand good_depth?)
            (("1" (expand pushcount)
              (("1" (use scafcount_max)
                (("1" (assert)
                  (("1" (use exp2_lt :subst (n 41 m 64))
                    (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "good_depth?")
        (("2" (expand pushcount)
          (("2" (rewrite scafcount_update)
            (("1" (lift-if)
              (("1" (ground)
                (("1" (typepred stack) (("1" (grind) nil nil)) nil)
                 ("2" (typepred depth)
                  (("2" (grind :exclude scafcount) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((count const-decl "upto(len)" arrayCount nil)
    (sigma def-decl "real" sigma reals)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype "(number_fields.+)(attributePEG.depth, 1)"
         "(attributePEG.good_depth?(attributePEG.len, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.n1) := attributePEG.stack]))")))
 (step_TCC69 0
  (step_TCC94-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (expand "good_stack?" +)
          (("2" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma good_mem_stack)
              (("2"
                (inst - G "depth" len scaf "push(pos!1, n1)" "stack"
                 stack)
                (("1" (ground)
                  (("1" (grind) nil nil)
                   ("2" (use mem_stack_push) (("2" (ground) nil nil))
                    nil)
                   ("3" (grind) nil nil))
                  nil)
                 ("2" (grind) nil nil) ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand fine_stack? +)
        (("3" (ground)
          (("1" (lemma mem_mem_stack)
            (("1" (inst - G depth len scaf _ _ _ _)
              (("1"
                (inst - "push(pos!1, n1)" "push(pos!1, n1)" stack
                 stack)
                (("1" (ground)
                  (("1" (hide -2)
                    (("1" (use mem_stack_push) (("1" (ground) nil nil))
                      nil))
                    nil)
                   ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                   ("3" (typepred stack) (("3" (grind) nil nil)) nil)
                   ("4" (use mem_stack_push) (("4" (ground) nil nil))
                    nil)
                   ("5" (typepred stack) (("5" (grind) nil nil)) nil))
                  nil)
                 ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2"
            (use fine_mem_stack :subst
                 (len len entry "push(pos!1, n1)" u stack stack stack))
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil)
               ("3" (grind) nil nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (grind)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype
         "attributePEG.push(attributePEG.pos, attributePEG.n1, attributePEG.lin(attributePEG.inh))"
         "(attributePEG.fine_stack?(attributePEG.len, attributePEG.G, (number_fields.+)(attributePEG.depth, 1), attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.n1) := attributePEG.stack]))")))
 (step_TCC70 0
  (step_TCC104-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1)
            (("2" (skeep*)
              (("2" (lift-if)
                (("2" (ground)
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (typepred stack) (("1" (grind) nil nil))
                        nil)
                       ("2" (inst?) nil nil))
                      nil))
                    nil)
                   ("2" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(attributePEG.n1 = attributePEG.num_non_terminals, attributePEG.loop_ready?(attributePEG.len, attributePEG.G, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.n1) := attributePEG.stack], attributePEG.pos, attributePEG.n1)) ELSE FORALL (i: naturalnumbers.upto(attributePEG.len)), n: (booleans.NOT)(attributePEG.loop?(attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.n1) := attributePEG.stack](i)(attributePEG.n))) ENDIF}")))
 (step_TCC71 0
  (step_TCC37-1 nil 3804455654 ("" (grind) nil nil) nil nil
   (step subtype "attributePEG.loop"
         "(attributePEG.nice_entry?(attributePEG.len, attributePEG.pos))")))
 (step_TCC72 0
  (step_TCC38-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype
         "attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop]"
         "(attributePEG.fine_scaffold?(attributePEG.len, attributePEG.G, attributePEG.s)(attributePEG.start, attributePEG.rootnt))")))
 (step_TCC73 0
  (step_TCC35-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred stack)
      (("" (typepred depth)
        (("" (expand good_depth?)
          (("" (expand pushcount)
            (("" (use scafcount_max)
              (("" (assert)
                (("" (use exp2_lt :subst (n 41 m 64))
                  (("" (ground)
                    (("1" (grind) nil nil)
                     ("2" (rewrite scafcount_update)
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (typepred stack)
                            (("1" (grind) nil nil)) nil)
                           ("2" (typepred depth)
                            (("2" (grind :exclude scafcount) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred stack) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype "(number_fields.-)(attributePEG.depth, 1)"
         "(attributePEG.good_depth?(attributePEG.len, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop]))")))
 (step_TCC74 0
  (step_TCC36-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             loop)
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil)
             ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u loop stack rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (grind) nil nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.rest"
         "(attributePEG.fine_stack?(attributePEG.len, attributePEG.G, (number_fields.-)(attributePEG.depth, 1), attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop]))")))
 (step_TCC75 0
  (step_TCC98-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred stack)
      (("" (expand good_stack?)
        (("" (ground)
          (("1" (grind) nil nil)
           ("2" (grind :exclude (good_stack? fine_stack? mem_stack?))
            nil nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "booleans.TRUE"
         "{b: booleans.bool | IF b THEN booleans.OR(attributePEG.nt(attributePEG.rest) = attributePEG.num_non_terminals, attributePEG.loop_ready?(attributePEG.len, attributePEG.G, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop], attributePEG.pos(attributePEG.rest), attributePEG.nt(attributePEG.rest))) ELSE FORALL (i: naturalnumbers.upto(attributePEG.len)), n: (booleans.NOT)(attributePEG.loop?(attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop](i)(attributePEG.n))) ENDIF}")))
 (step_TCC76 0
  (step_TCC84-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst-cp - pos!1 n1)
              (("" (inst - pos!1 n2)
                (("" (ground)
                  (("1" (expand gfcount)
                    (("1" (use "sigma_max")
                      (("1" (ground)
                        (("1"
                          (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                          (("1" (assert)
                            (("1"
                              (name-replace lnn
                               "len * num_non_terminals + num_non_terminals")
                              (("1"
                                (assert)
                                (("1"
                                  (case-replace
                                   "dep(scaf(pos!1)(n2)) = d2")
                                  (("1"
                                    (case-replace
                                     "dep(scaf(pos!1)(n1)) = d1")
                                    (("1"
                                      (assert)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (case "len * num_non_terminals <= exp2(46)")
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (use
                                 "lt_times_lt_pos1"
                                 :subst
                                 (px
                                  len
                                  nnz
                                  num_non_terminals
                                  y
                                  "exp2(32)"
                                  w
                                  "exp2(8)"))
                                (("1"
                                  (hide-all-but (-1 1))
                                  (("1"
                                    (grind)
                                    (("1"
                                      (typepred len)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil) ("3" (grind) nil nil)
                   ("4" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma def-decl "real" sigma reals))
   nil
   (step subtype
         "(number_fields.+)(real_defs.max(attributePEG.d1, attributePEG.d2), 1)"
         "uint64")))
 (step_TCC77 0
  (step_TCC92-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil
   (step subtype
         "attributePEG.fail((number_fields.+)(real_defs.max(attributePEG.d1, attributePEG.d2), 1))"
         "(attributePEG.nice_entry?(attributePEG.len, attributePEG.pos))")))
 (step_TCC78 0
  (step_TCC93-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype
         "attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail((number_fields.+)(real_defs.max(attributePEG.d1, attributePEG.d2), 1))]"
         "(attributePEG.fine_scaffold?(attributePEG.len, attributePEG.G, attributePEG.s)(attributePEG.start, attributePEG.rootnt))")))
 (step_TCC79 0
  (step_TCC53-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3" (use sigma_dec)
                  (("3" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (grind) nil nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)
                                                                                    (St`scaf WITH [(pos!1)(cur) := fail(1 + max(d1, d2))](i))) = ((LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                                              WITH [(pos!1)
                                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                          1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                                                                                              push?(St`scaf(x!1) WITH [(cur) := fail(1 + max(d1, d2))](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if +)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (typepred
                                                 "St`scaf(pos!1)(n1)")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skeep*)
                                              (("3"
                                                (use step_TCC76)
                                                (("3"
                                                  (ground)
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide -6 2)
                                          (("3"
                                            (typepred
                                             "St`scaf(pos!1)(n1)")
                                            (("3"
                                              (typepred
                                               "St`scaf(pos!1)(n2)")
                                              (("3"
                                                (skeep*)
                                                (("3"
                                                  (use step_TCC77)
                                                  (("3"
                                                    (ground)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (inst?)
                                                          (("3"
                                                            (ground)
                                                            (("3"
                                                              (typepred
                                                               "St`scaf(pos!1)(n1)")
                                                              (("3"
                                                                (typepred
                                                                 "St`scaf(pos!1)(n2)")
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (skeep*)
                                          (("4"
                                            (use step_TCC76)
                                            (("4"
                                              (ground)
                                              (("4"
                                                (inst?)
                                                (("4"
                                                  (inst?)
                                                  (("4"
                                                    (inst?)
                                                    (("4"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand count)
                                (("2"
                                  (use
                                   "nonempty_card[below(num_non_terminals)]")
                                  (("1" (grind) nil nil)
                                   ("2" (rewrite count_TCC1) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3"
                                  (typepred "St`scaf(pos!1)(n1)")
                                  (("3"
                                    (typepred "St`scaf(pos!1)(n2)")
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (hide 2)
                                (("4"
                                  (use step_TCC76)
                                  (("4"
                                    (ground)
                                    (("4"
                                      (inst?)
                                      (("4"
                                        (inst?)
                                        (("4"
                                          (inst?)
                                          (("4" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand count)
                            (("3"
                              (use "nonempty_card[below(num_non_terminals)]")
                              (("1" (grind) nil nil)
                               ("2" (rewrite count_TCC1) nil nil))
                              nil))
                            nil)
                           ("4" (use step_TCC77)
                            (("4" (ground)
                              (("4"
                                (inst?)
                                (("4"
                                  (inst?)
                                  (("4"
                                    (inst?)
                                    (("4" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("5" (hide -1 3)
                            (("5" (use step_TCC76)
                              (("5"
                                (ground)
                                (("5"
                                  (inst?)
                                  (("5"
                                    (inst?)
                                    (("5"
                                      (inst?)
                                      (("5" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (use "nonempty_card[below(num_non_terminals)]")
                        (("1" (grind) nil nil)
                         ("2" (rewrite count_TCC1) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (count_TCC1 subtype-tcc nil arrayCount nil))
   nil
   (step subtype "(number_fields.-)(attributePEG.depth, 1)"
         "(attributePEG.good_depth?(attributePEG.len, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail((number_fields.+)(real_defs.max(attributePEG.d1, attributePEG.d2), 1))]))")))
 (step_TCC80 0
  (step_TCC54-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2"
          (inst - G "depth - 1" len scaf stack rest
           "fail(1 + max(d1, d2))")
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (typepred "stack")
              (("2" (typepred "St`scaf(pos!1)(n1)")
                (("2" (typepred "St`scaf(pos!1)(n2)")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2"
                    (inst - G "depth - 1" len scaf stack rest
                     "fail(1 + max(d1, d2))")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (typepred "St`scaf(pos!1)(n1)")
                      (("2" (typepred "St`scaf(pos!1)(n2)")
                        (("2" (grind) nil nil)) nil))
                      nil)
                     ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.rest"
         "(attributePEG.fine_stack?(attributePEG.len, attributePEG.G, (number_fields.-)(attributePEG.depth, 1), attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail((number_fields.+)(real_defs.max(attributePEG.d1, attributePEG.d2), 1))]))")))
 (step_TCC81 0
  (step_TCC96-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(attributePEG.nt(attributePEG.rest) = attributePEG.num_non_terminals, attributePEG.loop_ready?(attributePEG.len, attributePEG.G, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail((number_fields.+)(1, real_defs.max(attributePEG.d1, attributePEG.d2)))], attributePEG.pos(attributePEG.rest), attributePEG.nt(attributePEG.rest))) ELSE FORALL (i: naturalnumbers.upto(attributePEG.len)), n: (booleans.NOT)(attributePEG.loop?(attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail((number_fields.+)(1, real_defs.max(attributePEG.d1, attributePEG.d2)))](i)(attributePEG.n))) ENDIF}")))
 (step_TCC82 0
  (step_TCC101-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst-cp - pos!1 n1)
              (("" (inst - pos!1 n2)
                (("" (ground)
                  (("1" (expand gfcount)
                    (("1" (use "sigma_max")
                      (("1" (ground)
                        (("1"
                          (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                          (("1" (assert)
                            (("1"
                              (name-replace lnn
                               "len * num_non_terminals + num_non_terminals")
                              (("1"
                                (assert)
                                (("1"
                                  (case-replace
                                   "dep(scaf(pos!1)(n2)) = d2")
                                  (("1"
                                    (case-replace
                                     "dep(scaf(pos!1)(n1)) = d1")
                                    (("1"
                                      (assert)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (case "len * num_non_terminals <= exp2(46)")
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (use
                                 "lt_times_lt_pos1"
                                 :subst
                                 (px
                                  len
                                  nnz
                                  num_non_terminals
                                  y
                                  "exp2(32)"
                                  w
                                  "exp2(8)"))
                                (("1"
                                  (hide-all-but (-1 1))
                                  (("1"
                                    (grind)
                                    (("1"
                                      (typepred len)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil) ("3" (grind) nil nil)
                   ("4" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma def-decl "real" sigma reals))
   nil
   (step subtype
         "(number_fields.+)(real_defs.max(attributePEG.d1, attributePEG.d2), 1)"
         "uint64")))
 (step_TCC83 0
  (step_TCC102-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "St`scaf(pos!1)(n1)")
      (("" (typepred "St`scaf(pos!1)(n2)") (("" (grind) nil nil)) nil))
      nil))
    nil)
   nil nil
   (step subtype
         "attributePEG.good((number_fields.+)(real_defs.max(attributePEG.d1, attributePEG.d2), 1), attributePEG.sp, attributePEG.inh, attributePEG.csyn(attributePEG.inh, attributePEG.syn2))"
         "(attributePEG.nice_entry?(attributePEG.len, attributePEG.pos))")))
 (step_TCC84 0
  (step_TCC84-1 nil 3808434333
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (typepred "scaf(pos!1)(n1)")
                  (("2" (typepred "scaf(pos!1)(n2)")
                    (("2" (hide 2) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack)
                (("2" (typepred "scaf(pos!1)(n1)")
                  (("2" (typepred "scaf(pos!1)(n2)")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype
         "attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good((number_fields.+)(real_defs.max(attributePEG.d1, attributePEG.d2), 1), attributePEG.sp, attributePEG.inh, attributePEG.csyn(attributePEG.inh, attributePEG.syn2))]"
         "(attributePEG.fine_scaffold?(attributePEG.len, attributePEG.G, attributePEG.s)(attributePEG.start, attributePEG.rootnt))")))
 (step_TCC85 0
  (step_TCC57-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3" (use sigma_dec)
                  (("3" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (grind) nil nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)
                                                                                            (St`scaf WITH [(pos!1)(cur) := good(1 + max(d1, d2), sp)](i))) = ((LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                                                      WITH [(pos!1)
                                                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                                  1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                                                                                                            push?(St`scaf(x!1) WITH [(cur) := good(1 + max(d1, d2), sp)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if +)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (typepred
                                                 "St`scaf(pos!1)(n1)")
                                                (("2"
                                                  (typepred
                                                   "scaf(pos!1)(n2)")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skeep*)
                                              (("3"
                                                (use step_TCC82)
                                                (("3"
                                                  (ground)
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide -6 2)
                                          (("3"
                                            (typepred
                                             "St`scaf(pos!1)(n1)")
                                            (("3"
                                              (typepred
                                               "St`scaf(pos!1)(n2)")
                                              (("3"
                                                (skeep*)
                                                (("3"
                                                  (use step_TCC83)
                                                  (("3"
                                                    (ground)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (inst?)
                                                          (("3"
                                                            (ground)
                                                            (("3"
                                                              (typepred
                                                               "St`scaf(pos!1)(n1)")
                                                              (("3"
                                                                (typepred
                                                                 "St`scaf(pos!1)(n2)")
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (skeep*)
                                          (("4"
                                            (use step_TCC82)
                                            (("4"
                                              (ground)
                                              (("4"
                                                (inst?)
                                                (("4"
                                                  (inst?)
                                                  (("4"
                                                    (inst?)
                                                    (("4"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand count)
                                (("2"
                                  (use
                                   "nonempty_card[below(num_non_terminals)]")
                                  (("1" (grind) nil nil)
                                   ("2" (rewrite count_TCC1) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3"
                                  (typepred "St`scaf(pos!1)(n1)")
                                  (("3"
                                    (typepred "St`scaf(pos!1)(n2)")
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (hide 2)
                                (("4"
                                  (use step_TCC82)
                                  (("4"
                                    (ground)
                                    (("4"
                                      (inst?)
                                      (("4"
                                        (inst?)
                                        (("4"
                                          (inst?)
                                          (("4" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand count)
                            (("3"
                              (use "nonempty_card[below(num_non_terminals)]")
                              (("1" (grind) nil nil)
                               ("2" (rewrite count_TCC1) nil nil))
                              nil))
                            nil)
                           ("4" (use step_TCC83)
                            (("4" (ground)
                              (("4"
                                (inst?)
                                (("4"
                                  (inst?)
                                  (("4"
                                    (inst?)
                                    (("4" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("5" (hide -1 3)
                            (("5" (use step_TCC82)
                              (("5"
                                (ground)
                                (("5"
                                  (inst?)
                                  (("5"
                                    (inst?)
                                    (("5"
                                      (inst?)
                                      (("5" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (use "nonempty_card[below(num_non_terminals)]")
                        (("1" (grind) nil nil)
                         ("2" (rewrite count_TCC1) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (count_TCC1 subtype-tcc nil arrayCount nil))
   nil
   (step subtype "(number_fields.-)(attributePEG.depth, 1)"
         "(attributePEG.good_depth?(attributePEG.len, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good((number_fields.+)(real_defs.max(attributePEG.d1, attributePEG.d2), 1), attributePEG.sp, attributePEG.inh, attributePEG.csyn(attributePEG.inh, attributePEG.syn2))]))")))
 (step_TCC86 0
  (step_TCC58-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2"
          (inst - G "depth - 1" len scaf stack rest
           "good(1 + max(d1, d2), sp)")
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (typepred "stack")
              (("2" (typepred "St`scaf(pos!1)(n1)")
                (("2" (typepred "St`scaf(pos!1)(n2)")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (use step_TCC85)
            (("3" (ground)
              (("3" (inst?)
                (("3" (inst?)
                  (("3" (inst?) (("3" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2"
                    (inst - G "depth - 1" len scaf stack rest
                     "good(1 + max(d1, d2), sp)")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (typepred "St`scaf(pos!1)(n1)")
                      (("2" (typepred "St`scaf(pos!1)(n2)")
                        (("2" (grind) nil nil)) nil))
                      nil)
                     ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.rest"
         "(attributePEG.fine_stack?(attributePEG.len, attributePEG.G, (number_fields.-)(attributePEG.depth, 1), attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good((number_fields.+)(real_defs.max(attributePEG.d1, attributePEG.d2), 1), attributePEG.sp, attributePEG.inh, attributePEG.csyn(attributePEG.inh, attributePEG.syn2))]))")))
 (step_TCC87 0
  (step_TCC99-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(attributePEG.nt(attributePEG.rest) = attributePEG.num_non_terminals, attributePEG.loop_ready?(attributePEG.len, attributePEG.G, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good((number_fields.+)(1, real_defs.max(attributePEG.d1, attributePEG.d2)), attributePEG.sp, attributePEG.inh, attributePEG.csyn(attributePEG.inh, attributePEG.syn2))], attributePEG.pos(attributePEG.rest), attributePEG.nt(attributePEG.rest))) ELSE FORALL (i: naturalnumbers.upto(attributePEG.len)), n: (booleans.NOT)(attributePEG.loop?(attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good((number_fields.+)(1, real_defs.max(attributePEG.d1, attributePEG.d2)), attributePEG.sp, attributePEG.inh, attributePEG.csyn(attributePEG.inh, attributePEG.syn2))](i)(attributePEG.n))) ENDIF}")))
 (step_TCC88 0
  (step_TCC91-1 nil 3804706560 ("" (subtype-tcc) nil nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (count const-decl "upto(len)" arrayCount nil))
   nil
   (step subtype "attributePEG.stack"
         "(attributePEG.nice_entry?(attributePEG.len, attributePEG.pos))")))
 (step_TCC89 0
  (step_TCC111-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype
         "attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.n2) := attributePEG.stack]"
         "(attributePEG.fine_scaffold?(attributePEG.len, attributePEG.G, attributePEG.s)(attributePEG.start, attributePEG.rootnt))")))
 (step_TCC90 0
  (step_TCC112-1 nil 3804455654
   ("" (skeep*)
    (("" (split)
      (("1" (typepred stack)
        (("1" (typepred depth)
          (("1" (expand good_depth?)
            (("1" (expand pushcount)
              (("1" (use scafcount_max)
                (("1" (assert)
                  (("1" (use exp2_lt :subst (n 41 m 64))
                    (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "good_depth?")
        (("2" (expand pushcount)
          (("2" (rewrite scafcount_update)
            (("1" (lift-if)
              (("1" (ground)
                (("1" (typepred stack) (("1" (grind) nil nil)) nil)
                 ("2" (typepred depth)
                  (("2" (grind :exclude scafcount) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((count const-decl "upto(len)" arrayCount nil)
    (sigma def-decl "real" sigma reals)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype "(number_fields.+)(attributePEG.depth, 1)"
         "(attributePEG.good_depth?(attributePEG.len, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.n2) := attributePEG.stack]))")))
 (step_TCC91 0
  (step_TCC78-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (expand "good_stack?" +)
          (("2" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma good_mem_stack)
              (("2"
                (inst - G "depth" len scaf "push(pos!1, n2)" "stack"
                 stack)
                (("1" (ground)
                  (("1" (grind) nil nil)
                   ("2" (use mem_stack_push) (("2" (ground) nil nil))
                    nil)
                   ("3" (grind) nil nil))
                  nil)
                 ("2" (grind) nil nil) ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand fine_stack? +)
        (("3" (ground)
          (("1" (lemma mem_mem_stack)
            (("1" (inst - G depth len scaf _ _ _ _)
              (("1"
                (inst - "push(pos!1, n2)" "push(pos!1, n2)" stack
                 stack)
                (("1" (ground)
                  (("1" (hide -2)
                    (("1" (use mem_stack_push) (("1" (ground) nil nil))
                      nil))
                    nil)
                   ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                   ("3" (typepred stack) (("3" (grind) nil nil)) nil)
                   ("4" (use mem_stack_push) (("4" (ground) nil nil))
                    nil)
                   ("5" (typepred stack) (("5" (grind) nil nil)) nil))
                  nil)
                 ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2"
            (use fine_mem_stack :subst
                 (len len entry "push(pos!1, n2)" u stack stack stack))
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil)
               ("3" (grind) nil nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (grind)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype
         "attributePEG.push(attributePEG.pos, attributePEG.n2, attributePEG.cin(attributePEG.inh))"
         "(attributePEG.fine_stack?(attributePEG.len, attributePEG.G, (number_fields.+)(attributePEG.depth, 1), attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.n2) := attributePEG.stack]))")))
 (step_TCC92 0
  (step_TCC119-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1)
            (("2" (skeep*)
              (("2" (lift-if)
                (("2" (ground)
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (typepred stack) (("1" (grind) nil nil))
                        nil)
                       ("2" (inst?) nil nil))
                      nil))
                    nil)
                   ("2" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(attributePEG.n2 = attributePEG.num_non_terminals, attributePEG.loop_ready?(attributePEG.len, attributePEG.G, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.n2) := attributePEG.stack], attributePEG.pos, attributePEG.n2)) ELSE FORALL (i: naturalnumbers.upto(attributePEG.len)), n: (booleans.NOT)(attributePEG.loop?(attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.n2) := attributePEG.stack](i)(attributePEG.n))) ENDIF}")))
 (step_TCC93 0
  (step_TCC59-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "attributePEG.loop"
         "(attributePEG.nice_entry?(attributePEG.len, attributePEG.pos))")))
 (step_TCC94 0
  (step_TCC60-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype
         "attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop]"
         "(attributePEG.fine_scaffold?(attributePEG.len, attributePEG.G, attributePEG.s)(attributePEG.start, attributePEG.rootnt))")))
 (step_TCC95 0
  (step_TCC69-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred stack)
      (("" (typepred depth)
        (("" (expand good_depth?)
          (("" (expand pushcount)
            (("" (use scafcount_max)
              (("" (assert)
                (("" (use exp2_lt :subst (n 41 m 64))
                  (("" (ground)
                    (("1" (grind) nil nil)
                     ("2" (rewrite scafcount_update)
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (typepred stack)
                            (("1" (grind) nil nil)) nil)
                           ("2" (typepred depth)
                            (("2" (grind :exclude scafcount) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred stack) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype "(number_fields.-)(attributePEG.depth, 1)"
         "(attributePEG.good_depth?(attributePEG.len, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop]))")))
 (step_TCC96 0
  (step_TCC70-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             loop)
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil)
             ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u loop stack rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (grind) nil nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.rest"
         "(attributePEG.fine_stack?(attributePEG.len, attributePEG.G, (number_fields.-)(attributePEG.depth, 1), attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop]))")))
 (step_TCC97 0
  (step_TCC118-1 nil 3804706560
   ("" (skeep*)
    (("" (typepred stack)
      (("" (expand good_stack?)
        (("" (ground)
          (("1" (grind) nil nil)
           ("2" (grind :exclude (good_stack? fine_stack? mem_stack?))
            nil nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "booleans.TRUE"
         "{b: booleans.bool | IF b THEN booleans.OR(attributePEG.nt(attributePEG.rest) = attributePEG.num_non_terminals, attributePEG.loop_ready?(attributePEG.len, attributePEG.G, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop], attributePEG.pos(attributePEG.rest), attributePEG.nt(attributePEG.rest))) ELSE FORALL (i: naturalnumbers.upto(attributePEG.len)), n: (booleans.NOT)(attributePEG.loop?(attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop](i)(attributePEG.n))) ENDIF}")))
 (step_TCC98 0
  (step_TCC109-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - pos!1 n1)
              (("" (ground)
                (("1" (expand gfcount)
                  (("1" (use "sigma_max")
                    (("1" (ground)
                      (("1"
                        (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                        (("1" (assert)
                          (("1"
                            (name-replace lnn
                             "len * num_non_terminals + num_non_terminals")
                            (("1" (assert)
                              (("1"
                                (case-replace
                                 "dep(scaf(pos!1)(n1)) = d1")
                                (("1" (assert) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (case "len * num_non_terminals <= exp2(46)")
                            (("1" (assert) (("1" (grind) nil nil)) nil)
                             ("2"
                              (use "lt_times_lt_pos1" :subst
                                   (px
                                    len
                                    nnz
                                    num_non_terminals
                                    y
                                    "exp2(32)"
                                    w
                                    "exp2(8)"))
                              (("1"
                                (hide-all-but (-1 1))
                                (("1"
                                  (grind)
                                  (("1"
                                    (typepred len)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype "(number_fields.+)(attributePEG.d1, 1)" "uint64")))
 (step_TCC99 0
  (step_TCC110-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "St`scaf(pos!1)(n1)") (("" (grind) nil nil)) nil))
    nil)
   nil nil
   (step subtype
         "attributePEG.good((number_fields.+)(attributePEG.d1, 1), attributePEG.sp, attributePEG.inh, attributePEG.csyn(attributePEG.inh, attributePEG.syn1))"
         "(attributePEG.nice_entry?(attributePEG.len, attributePEG.pos))")))
 (step_TCC100 0
  (step_TCC99-1 nil 3804991042
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?)
                    (("2" (ground)
                      (("1" (typepred "St`scaf(pos!1)(n1)")
                        (("1" (grind) nil nil)) nil)
                       ("2" (expand good_good?)
                        (("2" (grind :exclude (max gfcount)) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (typepred lflag)
                  (("3" (skeep*)
                    (("3" (ground)
                      (("1" (inst?) nil nil) ("2" (grind) nil nil)
                       ("3" (inst?) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "St`scaf(pos!1)(n1)")
                (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype
         "attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good((number_fields.+)(attributePEG.d1, 1), attributePEG.sp, attributePEG.inh, attributePEG.csyn(attributePEG.inh, attributePEG.syn1))]"
         "(attributePEG.fine_scaffold?(attributePEG.len, attributePEG.G, attributePEG.s)(attributePEG.start, attributePEG.rootnt))")))
 (step_TCC101 0
  (step_TCC61-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred stack)
      (("" (typepred depth)
        (("" (expand good_depth?)
          (("" (expand pushcount)
            (("" (use scafcount_max)
              (("" (assert)
                (("" (use exp2_lt :subst (n 41 m 64))
                  (("" (ground)
                    (("1" (grind) nil nil)
                     ("2" (rewrite scafcount_update)
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (typepred stack)
                            (("1" (grind) nil nil)) nil)
                           ("2" (typepred depth)
                            (("2" (grind :exclude scafcount) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "scaf(pos!1)(n1)")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype "(number_fields.-)(attributePEG.depth, 1)"
         "(attributePEG.good_depth?(attributePEG.len, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good((number_fields.+)(attributePEG.d1, 1), attributePEG.sp, attributePEG.inh, attributePEG.csyn(attributePEG.inh, attributePEG.syn1))]))")))
 (step_TCC102 0
  (step_TCC62-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             "good(1 + d1, sp)")
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (typepred "St`scaf(pos(St`stack))(n1)")
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil))
              nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u " good(1 + d1, sp)"
              stack rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (typepred "St`scaf(pos(St`stack))(n1)")
          (("1" (grind) nil nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.rest"
         "(attributePEG.fine_stack?(attributePEG.len, attributePEG.G, (number_fields.-)(attributePEG.depth, 1), attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good((number_fields.+)(attributePEG.d1, 1), attributePEG.sp, attributePEG.inh, attributePEG.csyn(attributePEG.inh, attributePEG.syn1))]))")))
 (step_TCC103 0
  (step_TCC116-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(attributePEG.nt(attributePEG.rest) = attributePEG.num_non_terminals, attributePEG.loop_ready?(attributePEG.len, attributePEG.G, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good((number_fields.+)(1, attributePEG.d1), attributePEG.sp, attributePEG.inh, attributePEG.csyn(attributePEG.inh, attributePEG.syn1))], attributePEG.pos(attributePEG.rest), attributePEG.nt(attributePEG.rest))) ELSE FORALL (i: naturalnumbers.upto(attributePEG.len)), n: (booleans.NOT)(attributePEG.loop?(attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good((number_fields.+)(1, attributePEG.d1), attributePEG.sp, attributePEG.inh, attributePEG.csyn(attributePEG.inh, attributePEG.syn1))](i)(attributePEG.n))) ENDIF}")))
 (step_TCC104 0
  (step_TCC112-1 nil 3804706560 ("" (subtype-tcc) nil nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (count const-decl "upto(len)" arrayCount nil))
   nil
   (step subtype "attributePEG.stack"
         "(attributePEG.nice_entry?(attributePEG.len, attributePEG.pos))")))
 (step_TCC105 0
  (step_TCC92-1 nil 3804706560
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype
         "attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.n1) := attributePEG.stack]"
         "(attributePEG.fine_scaffold?(attributePEG.len, attributePEG.G, attributePEG.s)(attributePEG.start, attributePEG.rootnt))")))
 (step_TCC106 0
  (step_TCC93-1 nil 3804706560
   ("" (skeep*)
    (("" (split)
      (("1" (typepred stack)
        (("1" (typepred depth)
          (("1" (expand good_depth?)
            (("1" (expand pushcount)
              (("1" (use scafcount_max)
                (("1" (assert)
                  (("1" (use exp2_lt :subst (n 41 m 64))
                    (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "good_depth?")
        (("2" (expand pushcount)
          (("2" (rewrite scafcount_update)
            (("1" (lift-if)
              (("1" (ground)
                (("1" (typepred stack) (("1" (grind) nil nil)) nil)
                 ("2" (typepred depth)
                  (("2" (grind :exclude scafcount) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((count const-decl "upto(len)" arrayCount nil)
    (sigma def-decl "real" sigma reals)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype "(number_fields.+)(attributePEG.depth, 1)"
         "(attributePEG.good_depth?(attributePEG.len, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.n1) := attributePEG.stack]))")))
 (step_TCC107 0
  (step_TCC94-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (expand "good_stack?" +)
          (("2" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma good_mem_stack)
              (("2"
                (inst - G "depth" len scaf "push(pos!1, n1)" "stack"
                 stack)
                (("1" (ground)
                  (("1" (grind) nil nil)
                   ("2" (use mem_stack_push) (("2" (ground) nil nil))
                    nil)
                   ("3" (grind) nil nil))
                  nil)
                 ("2" (grind) nil nil) ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand fine_stack? +)
        (("3" (ground)
          (("1" (lemma mem_mem_stack)
            (("1" (inst - G depth len scaf _ _ _ _)
              (("1"
                (inst - "push(pos!1, n1)" "push(pos!1, n1)" stack
                 stack)
                (("1" (ground)
                  (("1" (hide -2)
                    (("1" (use mem_stack_push) (("1" (ground) nil nil))
                      nil))
                    nil)
                   ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                   ("3" (typepred stack) (("3" (grind) nil nil)) nil)
                   ("4" (use mem_stack_push) (("4" (ground) nil nil))
                    nil)
                   ("5" (typepred stack) (("5" (grind) nil nil)) nil))
                  nil)
                 ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2"
            (use fine_mem_stack :subst
                 (len len entry "push(pos!1, n1)" u stack stack stack))
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil)
               ("3" (grind) nil nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (grind)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype
         "attributePEG.push(attributePEG.pos, attributePEG.n1, attributePEG.cin(attributePEG.inh))"
         "(attributePEG.fine_stack?(attributePEG.len, attributePEG.G, (number_fields.+)(attributePEG.depth, 1), attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.n1) := attributePEG.stack]))")))
 (step_TCC108 0
  (step_TCC125-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1)
            (("2" (skeep*)
              (("2" (lift-if)
                (("2" (ground)
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (typepred stack) (("1" (grind) nil nil))
                        nil)
                       ("2" (inst?) nil nil))
                      nil))
                    nil)
                   ("2" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(attributePEG.n1 = attributePEG.num_non_terminals, attributePEG.loop_ready?(attributePEG.len, attributePEG.G, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.n1) := attributePEG.stack], attributePEG.pos, attributePEG.n1)) ELSE FORALL (i: naturalnumbers.upto(attributePEG.len)), n: (booleans.NOT)(attributePEG.loop?(attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.n1) := attributePEG.stack](i)(attributePEG.n))) ENDIF}")))
 (step_TCC109 0
  (step_TCC71-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "attributePEG.loop"
         "(attributePEG.nice_entry?(attributePEG.len, attributePEG.pos))")))
 (step_TCC110 0
  (step_TCC72-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype
         "attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop]"
         "(attributePEG.fine_scaffold?(attributePEG.len, attributePEG.G, attributePEG.s)(attributePEG.start, attributePEG.rootnt))")))
 (step_TCC111 0
  (step_TCC85-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred stack)
      (("" (typepred depth)
        (("" (expand good_depth?)
          (("" (expand pushcount)
            (("" (use scafcount_max)
              (("" (assert)
                (("" (use exp2_lt :subst (n 41 m 64))
                  (("" (ground)
                    (("1" (grind) nil nil)
                     ("2" (rewrite scafcount_update)
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (typepred stack)
                            (("1" (grind) nil nil)) nil)
                           ("2" (typepred depth)
                            (("2" (grind :exclude scafcount) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred stack) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype "(number_fields.-)(attributePEG.depth, 1)"
         "(attributePEG.good_depth?(attributePEG.len, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop]))")))
 (step_TCC112 0
  (step_TCC86-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             loop)
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil)
             ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u loop stack rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (grind) nil nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.rest"
         "(attributePEG.fine_stack?(attributePEG.len, attributePEG.G, (number_fields.-)(attributePEG.depth, 1), attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop]))")))
 (step_TCC113 0
  (step_TCC126-1 nil 3804706560
   ("" (skeep*)
    (("" (typepred stack)
      (("" (expand good_stack?)
        (("" (ground)
          (("1" (grind) nil nil)
           ("2" (grind :exclude (good_stack? fine_stack? mem_stack?))
            nil nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "booleans.TRUE"
         "{b: booleans.bool | IF b THEN booleans.OR(attributePEG.nt(attributePEG.rest) = attributePEG.num_non_terminals, attributePEG.loop_ready?(attributePEG.len, attributePEG.G, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop], attributePEG.pos(attributePEG.rest), attributePEG.nt(attributePEG.rest))) ELSE FORALL (i: naturalnumbers.upto(attributePEG.len)), n: (booleans.NOT)(attributePEG.loop?(attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop](i)(attributePEG.n))) ENDIF}")))
 (step_TCC114 0
  (step_TCC113-1 nil 3804991042
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - pos!1 n1)
              (("" (ground)
                (("1" (expand gfcount)
                  (("1" (use "sigma_max")
                    (("1" (ground)
                      (("1"
                        (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                        (("1" (assert)
                          (("1"
                            (name-replace lnn
                             "len * num_non_terminals + num_non_terminals")
                            (("1" (assert)
                              (("1"
                                (case-replace
                                 "dep(scaf(pos!1)(n1)) = d1")
                                (("1" (assert) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (case "len * num_non_terminals <= exp2(46)")
                            (("1" (assert) (("1" (grind) nil nil)) nil)
                             ("2"
                              (use "lt_times_lt_pos1" :subst
                                   (px
                                    len
                                    nnz
                                    num_non_terminals
                                    y
                                    "exp2(32)"
                                    w
                                    "exp2(8)"))
                              (("1"
                                (hide-all-but (-1 1))
                                (("1"
                                  (grind)
                                  (("1"
                                    (typepred len)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype "(number_fields.+)(attributePEG.d1, 1)" "uint64")))
 (step_TCC115 0
  (step_TCC114-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil
   (step subtype
         "attributePEG.fail((number_fields.+)(attributePEG.d1, 1))"
         "(attributePEG.nice_entry?(attributePEG.len, attributePEG.pos))")))
 (step_TCC116 0
  (step_TCC115-1 nil 3804991042
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype
         "attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail((number_fields.+)(attributePEG.d1, 1))]"
         "(attributePEG.fine_scaffold?(attributePEG.len, attributePEG.G, attributePEG.s)(attributePEG.start, attributePEG.rootnt))")))
 (step_TCC117 0
  (step_TCC73-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3" (use sigma_dec)
                  (("3" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (grind) nil nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)
                                                                                    (St`scaf WITH [(pos!1)(cur) := fail(1 + d1)](i))) = ((LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                                              WITH [(pos!1)
                                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                          1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                                                                                              push?(St`scaf(x!1) WITH [(cur) := fail(1 + d1)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if +)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil)
                                             ("3"
                                              (skeep*)
                                              (("3"
                                                (use step_TCC114)
                                                (("3"
                                                  (ground)
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide -6 2)
                                          (("3" (grind) nil nil))
                                          nil)
                                         ("4"
                                          (hide 2)
                                          (("4"
                                            (skeep*)
                                            (("4"
                                              (use step_TCC114)
                                              (("4"
                                                (ground)
                                                (("4"
                                                  (inst?)
                                                  (("4"
                                                    (inst?)
                                                    (("4"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand count +)
                                  (("2"
                                    (use
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (expand nonempty?)
                                        (("1"
                                          (expand empty?)
                                          (("1"
                                            (inst - "nt(stack)")
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (typepred "nt(stack)")
                                                (("2"
                                                  (expand
                                                   "good_push_entry?")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "count_TCC1")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (hide 2)
                                (("4"
                                  (use step_TCC114)
                                  (("4"
                                    (ground)
                                    (("4"
                                      (inst?)
                                      (("4"
                                        (inst?)
                                        (("4" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -1)
                            (("3" (expand count)
                              (("3"
                                (use
                                 "nonempty_card[below(num_non_terminals)]")
                                (("1"
                                  (ground)
                                  (("1"
                                    (hide -5 5)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2" (rewrite "count_TCC1") nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide -1 3) (("4" (grind) nil nil))
                            nil)
                           ("5" (use step_TCC114)
                            (("5" (ground)
                              (("5"
                                (inst?)
                                (("5"
                                  (inst?)
                                  (("5" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (use "nonempty_card[below(num_non_terminals)]")
                        (("1" (grind) nil nil)
                         ("2" (rewrite count_TCC1) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (count_TCC1 subtype-tcc nil arrayCount nil))
   nil
   (step subtype "(number_fields.-)(attributePEG.depth, 1)"
         "(attributePEG.good_depth?(attributePEG.len, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail((number_fields.+)(attributePEG.d1, 1))]))")))
 (step_TCC118 0
  (step_TCC74-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             "fail(1 + d1)")
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (typepred "St`scaf(pos(St`stack))(n1)")
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil))
              nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u "fail(1 + d1)" stack
              rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (typepred "St`scaf(pos(St`stack))(n1)")
          (("1" (grind) nil nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.rest"
         "(attributePEG.fine_stack?(attributePEG.len, attributePEG.G, (number_fields.-)(attributePEG.depth, 1), attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail((number_fields.+)(attributePEG.d1, 1))]))")))
 (step_TCC119 0
  (step_TCC127-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(attributePEG.nt(attributePEG.rest) = attributePEG.num_non_terminals, attributePEG.loop_ready?(attributePEG.len, attributePEG.G, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail((number_fields.+)(1, attributePEG.d1))], attributePEG.pos(attributePEG.rest), attributePEG.nt(attributePEG.rest))) ELSE FORALL (i: naturalnumbers.upto(attributePEG.len)), n: (booleans.NOT)(attributePEG.loop?(attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail((number_fields.+)(1, attributePEG.d1))](i)(attributePEG.n))) ENDIF}")))
 (step_TCC120 0
  (step_TCC119-1 nil 3804991042
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - pos!1 n1)
              (("" (ground)
                (("1" (expand gfcount)
                  (("1" (use "sigma_max")
                    (("1" (ground)
                      (("1"
                        (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                        (("1" (assert)
                          (("1"
                            (name-replace lnn
                             "len * num_non_terminals + num_non_terminals")
                            (("1" (assert)
                              (("1"
                                (case-replace
                                 "dep(scaf(pos!1)(n1)) = d1")
                                (("1" (assert) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (case "len * num_non_terminals <= exp2(46)")
                            (("1" (assert) (("1" (grind) nil nil)) nil)
                             ("2"
                              (use "lt_times_lt_pos1" :subst
                                   (px
                                    len
                                    nnz
                                    num_non_terminals
                                    y
                                    "exp2(32)"
                                    w
                                    "exp2(8)"))
                              (("1"
                                (hide-all-but (-1 1))
                                (("1"
                                  (grind)
                                  (("1"
                                    (typepred len)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype "(number_fields.+)(attributePEG.d1, 1)" "uint64")))
 (step_TCC121 0
  (step_TCC120-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "0" "uint32")))
 (step_TCC122 0
  (step_TCC121-1 nil 3804991042 ("" (subtype-tcc) nil nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (count const-decl "upto(len)" arrayCount nil))
   nil
   (step subtype
         "attributePEG.good((number_fields.+)(attributePEG.d1, 1), 0, attributePEG.inh, attributePEG.none)"
         "(attributePEG.nice_entry?(attributePEG.len, attributePEG.pos))")))
 (step_TCC123 0
  (step_TCC122-1 nil 3804991042
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?)
                    (("2" (ground)
                      (("1" (typepred "St`scaf(pos!1)(n1)")
                        (("1" (grind) nil nil)) nil)
                       ("2" (expand good_good?)
                        (("2" (grind :exclude (max gfcount)) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (typepred lflag)
                  (("3" (skeep*)
                    (("3" (ground)
                      (("1" (inst?) nil nil) ("2" (grind) nil nil)
                       ("3" (inst?) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "St`scaf(pos!1)(n1)")
                (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype
         "attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good((number_fields.+)(attributePEG.d1, 1), 0, attributePEG.inh, attributePEG.none)]"
         "(attributePEG.fine_scaffold?(attributePEG.len, attributePEG.G, attributePEG.s)(attributePEG.start, attributePEG.rootnt))")))
 (step_TCC124 0
  (step_TCC107-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred stack)
      (("" (typepred depth)
        (("" (expand good_depth?)
          (("" (expand pushcount)
            (("" (use scafcount_max)
              (("" (assert)
                (("" (use exp2_lt :subst (n 41 m 64))
                  (("" (ground)
                    (("1" (grind) nil nil)
                     ("2" (rewrite scafcount_update)
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (typepred stack)
                            (("1" (grind) nil nil)) nil)
                           ("2" (typepred depth)
                            (("2" (grind :exclude scafcount) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "scaf(pos!1)(n1)")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype "(number_fields.-)(attributePEG.depth, 1)"
         "(attributePEG.good_depth?(attributePEG.len, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good((number_fields.+)(attributePEG.d1, 1), 0, attributePEG.inh, attributePEG.none)]))")))
 (step_TCC125 0
  (step_TCC108-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             "good(1 + d1, 0)")
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (typepred "St`scaf(pos(St`stack))(n1)")
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil))
              nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u " good(1 + d1, 0)"
              stack rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (typepred "St`scaf(pos(St`stack))(n1)")
          (("1" (grind) nil nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.rest"
         "(attributePEG.fine_stack?(attributePEG.len, attributePEG.G, (number_fields.-)(attributePEG.depth, 1), attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good((number_fields.+)(attributePEG.d1, 1), 0, attributePEG.inh, attributePEG.none)]))")))
 (step_TCC126 0
  (step_TCC128-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(attributePEG.nt(attributePEG.rest) = attributePEG.num_non_terminals, attributePEG.loop_ready?(attributePEG.len, attributePEG.G, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good((number_fields.+)(1, attributePEG.d1), 0, attributePEG.inh, attributePEG.none)], attributePEG.pos(attributePEG.rest), attributePEG.nt(attributePEG.rest))) ELSE FORALL (i: naturalnumbers.upto(attributePEG.len)), n: (booleans.NOT)(attributePEG.loop?(attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good((number_fields.+)(1, attributePEG.d1), 0, attributePEG.inh, attributePEG.none)](i)(attributePEG.n))) ENDIF}")))
 (step_TCC127 0
  (step_TCC133-1 nil 3804706560 ("" (subtype-tcc) nil nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (count const-decl "upto(len)" arrayCount nil))
   nil
   (step subtype "attributePEG.stack"
         "(attributePEG.nice_entry?(attributePEG.len, attributePEG.pos))")))
 (step_TCC128 0
  (step_TCC113-1 nil 3804706560
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype
         "attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.n1) := attributePEG.stack]"
         "(attributePEG.fine_scaffold?(attributePEG.len, attributePEG.G, attributePEG.s)(attributePEG.start, attributePEG.rootnt))")))
 (step_TCC129 0
  (step_TCC114-1 nil 3804706560
   ("" (skeep*)
    (("" (split)
      (("1" (typepred stack)
        (("1" (typepred depth)
          (("1" (expand good_depth?)
            (("1" (expand pushcount)
              (("1" (use scafcount_max)
                (("1" (assert)
                  (("1" (use exp2_lt :subst (n 41 m 64))
                    (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "good_depth?")
        (("2" (expand pushcount)
          (("2" (rewrite scafcount_update)
            (("1" (lift-if)
              (("1" (ground)
                (("1" (typepred stack) (("1" (grind) nil nil)) nil)
                 ("2" (typepred depth)
                  (("2" (grind :exclude scafcount) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((count const-decl "upto(len)" arrayCount nil)
    (sigma def-decl "real" sigma reals)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype "(number_fields.+)(attributePEG.depth, 1)"
         "(attributePEG.good_depth?(attributePEG.len, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.n1) := attributePEG.stack]))")))
 (step_TCC130 0
  (step_TCC115-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (expand "good_stack?" +)
          (("2" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma good_mem_stack)
              (("2"
                (inst - G "depth" len scaf "push(pos!1, n1)" "stack"
                 stack)
                (("1" (ground)
                  (("1" (grind) nil nil)
                   ("2" (use mem_stack_push) (("2" (ground) nil nil))
                    nil)
                   ("3" (grind) nil nil))
                  nil)
                 ("2" (grind) nil nil) ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand fine_stack? +)
        (("3" (ground)
          (("1" (lemma mem_mem_stack)
            (("1" (inst - G depth len scaf _ _ _ _)
              (("1"
                (inst - "push(pos!1, n1)" "push(pos!1, n1)" stack
                 stack)
                (("1" (ground)
                  (("1" (hide -2)
                    (("1" (use mem_stack_push) (("1" (ground) nil nil))
                      nil))
                    nil)
                   ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                   ("3" (typepred stack) (("3" (grind) nil nil)) nil)
                   ("4" (use mem_stack_push) (("4" (ground) nil nil))
                    nil)
                   ("5" (typepred stack) (("5" (grind) nil nil)) nil))
                  nil)
                 ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2"
            (use fine_mem_stack :subst
                 (len len entry "push(pos!1, n1)" u stack stack stack))
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil)
               ("3" (grind) nil nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (grind)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype
         "attributePEG.push(attributePEG.pos, attributePEG.n1, attributePEG.ckin(attributePEG.inh))"
         "(attributePEG.fine_stack?(attributePEG.len, attributePEG.G, (number_fields.+)(attributePEG.depth, 1), attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.n1) := attributePEG.stack]))")))
 (step_TCC131 0
  (step_TCC137-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1)
            (("2" (skeep*)
              (("2" (lift-if)
                (("2" (ground)
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (typepred stack) (("1" (grind) nil nil))
                        nil)
                       ("2" (inst?) nil nil))
                      nil))
                    nil)
                   ("2" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(attributePEG.n1 = attributePEG.num_non_terminals, attributePEG.loop_ready?(attributePEG.len, attributePEG.G, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.n1) := attributePEG.stack], attributePEG.pos, attributePEG.n1)) ELSE FORALL (i: naturalnumbers.upto(attributePEG.len)), n: (booleans.NOT)(attributePEG.loop?(attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.n1) := attributePEG.stack](i)(attributePEG.n))) ENDIF}")))
 (step_TCC132 0
  (step_TCC87-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "attributePEG.loop"
         "(attributePEG.nice_entry?(attributePEG.len, attributePEG.pos))")))
 (step_TCC133 0
  (step_TCC88-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype
         "attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop]"
         "(attributePEG.fine_scaffold?(attributePEG.len, attributePEG.G, attributePEG.s)(attributePEG.start, attributePEG.rootnt))")))
 (step_TCC134 0
  (step_TCC103-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred stack)
      (("" (typepred depth)
        (("" (expand good_depth?)
          (("" (expand pushcount)
            (("" (use scafcount_max)
              (("" (assert)
                (("" (use exp2_lt :subst (n 41 m 64))
                  (("" (ground)
                    (("1" (grind) nil nil)
                     ("2" (rewrite scafcount_update)
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (typepred stack)
                            (("1" (grind) nil nil)) nil)
                           ("2" (typepred depth)
                            (("2" (grind :exclude scafcount) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred stack) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype "(number_fields.-)(attributePEG.depth, 1)"
         "(attributePEG.good_depth?(attributePEG.len, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop]))")))
 (step_TCC135 0
  (step_TCC104-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             loop)
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil)
             ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u loop stack rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (grind) nil nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.rest"
         "(attributePEG.fine_stack?(attributePEG.len, attributePEG.G, (number_fields.-)(attributePEG.depth, 1), attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop]))")))
 (step_TCC136 0
  (step_TCC138-1 nil 3804706560
   ("" (skeep*)
    (("" (typepred stack)
      (("" (expand good_stack?)
        (("" (ground)
          (("1" (grind) nil nil)
           ("2" (grind :exclude (good_stack? fine_stack? mem_stack?))
            nil nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "booleans.TRUE"
         "{b: booleans.bool | IF b THEN booleans.OR(attributePEG.nt(attributePEG.rest) = attributePEG.num_non_terminals, attributePEG.loop_ready?(attributePEG.len, attributePEG.G, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop], attributePEG.pos(attributePEG.rest), attributePEG.nt(attributePEG.rest))) ELSE FORALL (i: naturalnumbers.upto(attributePEG.len)), n: (booleans.NOT)(attributePEG.loop?(attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop](i)(attributePEG.n))) ENDIF}")))
 (step_TCC137 0
  (step_TCC136-1 nil 3804991042
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - pos!1 n1)
              (("" (ground)
                (("1" (expand gfcount)
                  (("1" (use "sigma_max")
                    (("1" (ground)
                      (("1"
                        (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                        (("1" (assert)
                          (("1"
                            (name-replace lnn
                             "len * num_non_terminals + num_non_terminals")
                            (("1" (assert)
                              (("1"
                                (case-replace
                                 "dep(scaf(pos!1)(n1)) = d1")
                                (("1" (assert) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (case "len * num_non_terminals <= exp2(46)")
                            (("1" (assert) (("1" (grind) nil nil)) nil)
                             ("2"
                              (use "lt_times_lt_pos1" :subst
                                   (px
                                    len
                                    nnz
                                    num_non_terminals
                                    y
                                    "exp2(32)"
                                    w
                                    "exp2(8)"))
                              (("1"
                                (hide-all-but (-1 1))
                                (("1"
                                  (grind)
                                  (("1"
                                    (typepred len)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype "(number_fields.+)(attributePEG.d1, 1)" "uint64")))
 (step_TCC138 0
  (step_TCC137-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "0" "uint32")))
 (step_TCC139 0
  (step_TCC138-1 nil 3804991042 ("" (subtype-tcc) nil nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (count const-decl "upto(len)" arrayCount nil))
   nil
   (step subtype
         "attributePEG.good((number_fields.+)(attributePEG.d1, 1), 0, attributePEG.inh, attributePEG.none)"
         "(attributePEG.nice_entry?(attributePEG.len, attributePEG.pos))")))
 (step_TCC140 0
  (step_TCC139-1 nil 3804991042
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?)
                    (("2" (ground)
                      (("1" (typepred "St`scaf(pos!1)(n1)")
                        (("1" (grind) nil nil)) nil)
                       ("2" (expand good_good?)
                        (("2" (grind :exclude (max gfcount)) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (typepred lflag)
                  (("3" (skeep*)
                    (("3" (ground)
                      (("1" (inst?) nil nil) ("2" (grind) nil nil)
                       ("3" (inst?) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (expand nice_entry?)
                (("2" (expand good_good_entry?)
                  (("2" (typepred stack) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype
         "attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good((number_fields.+)(attributePEG.d1, 1), 0, attributePEG.inh, attributePEG.none)]"
         "(attributePEG.fine_scaffold?(attributePEG.len, attributePEG.G, attributePEG.s)(attributePEG.start, attributePEG.rootnt))")))
 (step_TCC141 0
  (step_TCC110-1 nil 3804706560
   ("" (skeep*)
    (("" (typepred stack)
      (("" (typepred depth)
        (("" (expand good_depth?)
          (("" (expand pushcount)
            (("" (use scafcount_max)
              (("" (assert)
                (("" (use exp2_lt :subst (n 41 m 64))
                  (("" (ground)
                    (("1" (grind) nil nil)
                     ("2" (rewrite scafcount_update)
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (typepred stack)
                            (("1" (grind) nil nil)) nil)
                           ("2" (typepred depth)
                            (("2" (grind :exclude scafcount) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "scaf(pos!1)(n1)")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype "(number_fields.-)(attributePEG.depth, 1)"
         "(attributePEG.good_depth?(attributePEG.len, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good((number_fields.+)(attributePEG.d1, 1), 0, attributePEG.inh, attributePEG.none)]))")))
 (step_TCC142 0
  (step_TCC111-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             "good(1 + d1, 0)")
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (typepred "St`scaf(pos(St`stack))(n1)")
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil))
              nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u " good(1 + d1, 0)"
              stack rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (typepred "St`scaf(pos(St`stack))(n1)")
          (("1" (grind)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.rest"
         "(attributePEG.fine_stack?(attributePEG.len, attributePEG.G, (number_fields.-)(attributePEG.depth, 1), attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good((number_fields.+)(attributePEG.d1, 1), 0, attributePEG.inh, attributePEG.none)]))")))
 (step_TCC143 0
  (step_TCC139-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(attributePEG.nt(attributePEG.rest) = attributePEG.num_non_terminals, attributePEG.loop_ready?(attributePEG.len, attributePEG.G, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good((number_fields.+)(1, attributePEG.d1), 0, attributePEG.inh, attributePEG.none)], attributePEG.pos(attributePEG.rest), attributePEG.nt(attributePEG.rest))) ELSE FORALL (i: naturalnumbers.upto(attributePEG.len)), n: (booleans.NOT)(attributePEG.loop?(attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.good((number_fields.+)(1, attributePEG.d1), 0, attributePEG.inh, attributePEG.none)](i)(attributePEG.n))) ENDIF}")))
 (step_TCC144 0
  (step_TCC143-1 nil 3804991042
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - pos!1 n1)
              (("" (ground)
                (("1" (expand gfcount)
                  (("1" (use "sigma_max")
                    (("1" (ground)
                      (("1"
                        (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                        (("1" (assert)
                          (("1"
                            (name-replace lnn
                             "len * num_non_terminals + num_non_terminals")
                            (("1" (assert)
                              (("1"
                                (case-replace
                                 "dep(scaf(pos!1)(n1)) = d1")
                                (("1" (assert) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (case "len * num_non_terminals <= exp2(46)")
                            (("1" (assert) (("1" (grind) nil nil)) nil)
                             ("2"
                              (use "lt_times_lt_pos1" :subst
                                   (px
                                    len
                                    nnz
                                    num_non_terminals
                                    y
                                    "exp2(32)"
                                    w
                                    "exp2(8)"))
                              (("1"
                                (hide-all-but (-1 1))
                                (("1"
                                  (grind)
                                  (("1"
                                    (typepred len)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype "(number_fields.+)(attributePEG.d1, 1)" "uint64")))
 (step_TCC145 0
  (step_TCC144-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil
   (step subtype
         "attributePEG.fail((number_fields.+)(attributePEG.d1, 1))"
         "(attributePEG.nice_entry?(attributePEG.len, attributePEG.pos))")))
 (step_TCC146 0
  (step_TCC145-1 nil 3804991042
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype
         "attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail((number_fields.+)(attributePEG.d1, 1))]"
         "(attributePEG.fine_scaffold?(attributePEG.len, attributePEG.G, attributePEG.s)(attributePEG.start, attributePEG.rootnt))")))
 (step_TCC147 0
  (step_TCC123-1 nil 3804706560
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3" (use sigma_dec)
                  (("3" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (grind) nil nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)
                                                                                            (St`scaf WITH [(pos!1)(cur) := fail(1 + d1)](i))) = ((LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                                                      WITH [(pos!1)
                                                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                                  1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                                                                                                            push?(St`scaf(x!1) WITH [(cur) := fail(1 + d1)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if +)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil)
                                             ("3"
                                              (skeep*)
                                              (("3"
                                                (use step_TCC144)
                                                (("3"
                                                  (ground)
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide -6 2)
                                          (("3" (grind) nil nil))
                                          nil)
                                         ("4"
                                          (hide 2)
                                          (("4"
                                            (skeep*)
                                            (("4"
                                              (use step_TCC144)
                                              (("4"
                                                (ground)
                                                (("4"
                                                  (inst?)
                                                  (("4"
                                                    (inst?)
                                                    (("4"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand count +)
                                  (("2"
                                    (use
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (expand nonempty?)
                                        (("1"
                                          (expand empty?)
                                          (("1"
                                            (inst - "nt(stack)")
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (typepred "nt(stack)")
                                                (("2"
                                                  (expand
                                                   "good_push_entry?")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "count_TCC1")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (hide 2)
                                (("4"
                                  (use step_TCC144)
                                  (("4"
                                    (ground)
                                    (("4"
                                      (inst?)
                                      (("4"
                                        (inst?)
                                        (("4" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -1)
                            (("3" (expand count)
                              (("3"
                                (use
                                 "nonempty_card[below(num_non_terminals)]")
                                (("1"
                                  (ground)
                                  (("1"
                                    (hide -5 5)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2" (rewrite "count_TCC1") nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide -1 3) (("4" (grind) nil nil))
                            nil)
                           ("5" (use step_TCC144)
                            (("5" (ground)
                              (("5"
                                (inst?)
                                (("5"
                                  (inst?)
                                  (("5" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (use "nonempty_card[below(num_non_terminals)]")
                        (("1" (grind) nil nil)
                         ("2" (rewrite count_TCC1) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (count_TCC1 subtype-tcc nil arrayCount nil))
   nil
   (step subtype "(number_fields.-)(attributePEG.depth, 1)"
         "(attributePEG.good_depth?(attributePEG.len, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail((number_fields.+)(attributePEG.d1, 1))]))")))
 (step_TCC148 0
  (step_TCC124-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             "fail(1 + d1)")
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (typepred "St`scaf(pos(St`stack))(n1)")
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil))
              nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u "fail(1 + d1)" stack
              rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (typepred "St`scaf(pos(St`stack))(n1)")
          (("1" (grind) nil nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.rest"
         "(attributePEG.fine_stack?(attributePEG.len, attributePEG.G, (number_fields.-)(attributePEG.depth, 1), attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail((number_fields.+)(attributePEG.d1, 1))]))")))
 (step_TCC149 0
  (step_TCC140-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(attributePEG.nt(attributePEG.rest) = attributePEG.num_non_terminals, attributePEG.loop_ready?(attributePEG.len, attributePEG.G, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail((number_fields.+)(1, attributePEG.d1))], attributePEG.pos(attributePEG.rest), attributePEG.nt(attributePEG.rest))) ELSE FORALL (i: naturalnumbers.upto(attributePEG.len)), n: (booleans.NOT)(attributePEG.loop?(attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.fail((number_fields.+)(1, attributePEG.d1))](i)(attributePEG.n))) ENDIF}")))
 (step_TCC150 0
  (step_TCC134-1 nil 3804904050 ("" (subtype-tcc) nil nil)
   ((sigma_nat application-judgement "nat" sigma reals)
    (count const-decl "upto(len)" arrayCount nil))
   nil
   (step subtype "attributePEG.stack"
         "(attributePEG.nice_entry?(attributePEG.len, attributePEG.pos))")))
 (step_TCC151 0
  (step_TCC134-1 nil 3804706560
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype
         "attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.n1) := attributePEG.stack]"
         "(attributePEG.fine_scaffold?(attributePEG.len, attributePEG.G, attributePEG.s)(attributePEG.start, attributePEG.rootnt))")))
 (step_TCC152 0
  (step_TCC135-1 nil 3804706560
   ("" (skeep*)
    (("" (split)
      (("1" (typepred stack)
        (("1" (typepred depth)
          (("1" (expand good_depth?)
            (("1" (expand pushcount)
              (("1" (use scafcount_max)
                (("1" (assert)
                  (("1" (use exp2_lt :subst (n 41 m 64))
                    (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "good_depth?")
        (("2" (expand pushcount)
          (("2" (rewrite scafcount_update)
            (("1" (lift-if)
              (("1" (ground)
                (("1" (typepred stack) (("1" (grind) nil nil)) nil)
                 ("2" (typepred depth)
                  (("2" (grind :exclude scafcount) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((count const-decl "upto(len)" arrayCount nil)
    (sigma def-decl "real" sigma reals)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype "(number_fields.+)(attributePEG.depth, 1)"
         "(attributePEG.good_depth?(attributePEG.len, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.n1) := attributePEG.stack]))")))
 (step_TCC153 0
  (step_TCC136-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (expand "good_stack?" +)
          (("2" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma good_mem_stack)
              (("2"
                (inst - G "depth" len scaf "push(pos!1, n1)" "stack"
                 stack)
                (("1" (ground)
                  (("1" (grind) nil nil)
                   ("2" (use mem_stack_push) (("2" (ground) nil nil))
                    nil)
                   ("3" (grind) nil nil))
                  nil)
                 ("2" (grind) nil nil) ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand fine_stack? +)
        (("3" (ground)
          (("1" (lemma mem_mem_stack)
            (("1" (inst - G depth len scaf _ _ _ _)
              (("1"
                (inst - "push(pos!1, n1)" "push(pos!1, n1)" stack
                 stack)
                (("1" (ground)
                  (("1" (hide -2)
                    (("1" (use mem_stack_push) (("1" (ground) nil nil))
                      nil))
                    nil)
                   ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                   ("3" (typepred stack) (("3" (grind) nil nil)) nil)
                   ("4" (use mem_stack_push) (("4" (ground) nil nil))
                    nil)
                   ("5" (typepred stack) (("5" (grind) nil nil)) nil))
                  nil)
                 ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2"
            (use fine_mem_stack :subst
                 (len len entry "push(pos!1, n1)" u stack stack stack))
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil)
               ("3" (grind) nil nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (grind)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype
         "attributePEG.push(attributePEG.pos, attributePEG.n1, attributePEG.nin(attributePEG.inh))"
         "(attributePEG.fine_stack?(attributePEG.len, attributePEG.G, (number_fields.+)(attributePEG.depth, 1), attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.n1) := attributePEG.stack]))")))
 (step_TCC154 0
  (step_TCC137-1 nil 3804730988
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1)
            (("2" (skeep*)
              (("2" (lift-if)
                (("2" (ground)
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (typepred stack) (("1" (grind) nil nil))
                        nil)
                       ("2" (inst?) nil nil))
                      nil))
                    nil)
                   ("2" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(attributePEG.n1 = attributePEG.num_non_terminals, attributePEG.loop_ready?(attributePEG.len, attributePEG.G, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.n1) := attributePEG.stack], attributePEG.pos, attributePEG.n1)) ELSE FORALL (i: naturalnumbers.upto(attributePEG.len)), n: (booleans.NOT)(attributePEG.loop?(attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.n1) := attributePEG.stack](i)(attributePEG.n))) ENDIF}")))
 (step_TCC155 0
  (step_TCC105-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "attributePEG.loop"
         "(attributePEG.nice_entry?(attributePEG.len, attributePEG.pos))")))
 (step_TCC156 0
  (step_TCC106-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype
         "attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop]"
         "(attributePEG.fine_scaffold?(attributePEG.len, attributePEG.G, attributePEG.s)(attributePEG.start, attributePEG.rootnt))")))
 (step_TCC157 0
  (step_TCC131-1 nil 3804706560
   ("" (skeep*)
    (("" (typepred stack)
      (("" (typepred depth)
        (("" (expand good_depth?)
          (("" (expand pushcount)
            (("" (use scafcount_max)
              (("" (assert)
                (("" (use exp2_lt :subst (n 41 m 64))
                  (("" (ground)
                    (("1" (grind) nil nil)
                     ("2" (rewrite scafcount_update)
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (typepred stack)
                            (("1" (grind) nil nil)) nil)
                           ("2" (typepred depth)
                            (("2" (grind :exclude scafcount) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred stack) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (step subtype "(number_fields.-)(attributePEG.depth, 1)"
         "(attributePEG.good_depth?(attributePEG.len, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop]))")))
 (step_TCC158 0
  (step_TCC132-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             loop)
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil)
             ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u loop stack rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (grind) nil nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "attributePEG.rest"
         "(attributePEG.fine_stack?(attributePEG.len, attributePEG.G, (number_fields.-)(attributePEG.depth, 1), attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop]))")))
 (step_TCC159 0
  (step_TCC142-1 nil 3804730988
   ("" (skeep*)
    (("" (typepred stack)
      (("" (expand good_stack?)
        (("" (ground)
          (("1" (grind) nil nil)
           ("2" (grind :exclude (good_stack? fine_stack? mem_stack?))
            nil nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "booleans.TRUE"
         "{b: booleans.bool | IF b THEN booleans.OR(attributePEG.nt(attributePEG.rest) = attributePEG.num_non_terminals, attributePEG.loop_ready?(attributePEG.len, attributePEG.G, attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop], attributePEG.pos(attributePEG.rest), attributePEG.nt(attributePEG.rest))) ELSE FORALL (i: naturalnumbers.upto(attributePEG.len)), n: (booleans.NOT)(attributePEG.loop?(attributePEG.St`scaf WITH [(attributePEG.pos)(attributePEG.cur) := attributePEG.loop](i)(attributePEG.n))) ENDIF}")))
 (size_TCC1 0
  (size_TCC1-1 nil 3808434333 ("" (subtype-tcc) nil nil) nil nil
   (size subtype "attributePEG.len"
         "naturalnumbers.upto(attributePEG.len)")))
 (size_TCC2 0
  (size_TCC2-1 nil 3808434333
   ("" (skeep*)
    (("" (typepred "St`depth")
      (("" (expand good_depth?)
        (("" (expand pushcount)
          (("" (use sigma_max) (("" (grind :exclude exp2) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((count const-decl "upto(len)" arrayCount nil)
    (sigma def-decl "real" sigma reals)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (size subtype
         "(number_fields.-)((number_fields.*(((number_fields.+)(attributePEG.len, 1)), attributePEG.num_non_terminals)), attributePEG.St`depth)"
         "nat")))
 (endstate_TCC1 0
  (endstate_TCC1-1 nil 3804455654
   ("" (skeep*) (("" (typepred "st`stack") (("" (grind) nil nil)) nil))
    nil)
   nil nil
   (endstate subtype "attributePEG.st`stack" "(attributePEG.push?)")))
 (parse_TCC1 0
  (parse_TCC2-1 nil 3804455654
   ("" (use well_founded_le) (("" (grind :exclude <) nil nil)) nil) nil
   nil
   (parse well-founded
          "restrict[[ordstruct_adt.ordstruct, ordstruct_adt.ordstruct], [ordinal, ordinal], booleans.bool].restrict(ordinals.<)"
          "nil")))
 (parse_TCC2 0
  (parse_TCC3-1 nil 3804455654
   ("" (skeep*) (("" (typepred "St`stack") (("" (grind) nil nil)) nil))
    nil)
   nil nil
   (parse subtype "attributePEG.St"
          "attributePEG.endstate(attributePEG.len, attributePEG.G, attributePEG.s, attributePEG.start, attributePEG.root)")))
 (parse_TCC3 0
  (parse_TCC4-1 nil 3804455654
   ("" (skeep*)
    (("" (expand restrict)
      (("" (expand size)
        (("" (rewrite lex2_lt)
          (("1" (flatten)
            (("1" (hide 3)
              (("1" (typepred "St`stack")
                (("1" (apply (then (expand step) (lift-if) (ground)))
                  (("1" (hide 1) (("1" (grind) nil nil)) nil)
                   ("2" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil)
                   ("3" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil)
                   ("4" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("5" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil)
                   ("6" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil)
                   ("7" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("8" (grind :defs nil)
                    (("8" (rewrite scafcount_update)
                      (("1" (grind :defs nil)
                        (("1" (grind) nil nil) ("2" (grind) nil nil)
                         ("3" (grind) nil nil))
                        nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil))
                      nil))
                    nil)
                   ("9" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil)
                   ("10" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("11" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("12" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (expand nice_entry?)
                        (("2" (expand "good_good_entry?")
                          (("2"
                            (typepred
                             "step(len, G, s, start, root)(St)`scaf")
                            (("2" (expand step)
                              (("2"
                                (expand fine_scaffold?)
                                (("2"
                                  (ground)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (expand good_tscaffold?)
                                      (("2"
                                        (inst
                                         -
                                         "pos(St`stack)"
                                         "nt(St`stack)")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("13" (reveal 1)
                    (("13" (hide 2)
                      (("13" (ground)
                        (("1" (expand step)
                          (("1" (rewrite scafcount_update)
                            (("1" (grind :defs nil)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (expand step) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("14" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("15" (reveal 1)
                    (("15" (hide 2)
                      (("15" (ground)
                        (("1" (expand step)
                          (("1" (rewrite scafcount_update)
                            (("1" (grind :defs nil)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (expand step) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("16" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("17" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("18" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (hide 2)
                      (("2"
                        (typepred
                         "step(len, G, s, start, root)(St)`scaf")
                        (("2" (expand fine_scaffold?)
                          (("2" (ground)
                            (("2" (hide -1)
                              (("2"
                                (expand good_tscaffold?)
                                (("2"
                                  (inst
                                   -
                                   "pos(St`stack)"
                                   "nt(St`stack)")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("19" (reveal 1)
                    (("19" (hide 2)
                      (("19" (ground)
                        (("1" (expand step)
                          (("1" (rewrite scafcount_update)
                            (("1" (grind :defs nil)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (expand step) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("20" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("21" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2"
                      (typepred
                       "step(len, G, s, start, root)(St)`scaf")
                      (("2" (expand fine_scaffold?)
                        (("2" (ground)
                          (("2" (hide -1)
                            (("2" (expand good_tscaffold?)
                              (("2"
                                (inst - "pos(St`stack)" "nt(St`stack)")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("22" (reveal 1)
                    (("22" (hide 2)
                      (("22" (expand step)
                        (("22" (rewrite scafcount_update)
                          (("1" (grind :defs nil)
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("23" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("24" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("25" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("26" (reveal 1)
                    (("26" (hide 2)
                      (("26" (expand step)
                        (("26" (rewrite scafcount_update)
                          (("1" (grind :defs nil)
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("27" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("28" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("29" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("30" (reveal 1)
                    (("30" (hide 2)
                      (("30" (expand step)
                        (("30" (rewrite scafcount_update)
                          (("1" (grind :defs nil)
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("31" (grind :defs nil)
                    (("31" (rewrite scafcount_update)
                      (("1" (grind :defs nil)
                        (("1" (grind) nil nil) ("2" (grind) nil nil)
                         ("3" (grind) nil nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "St`depth")
            (("2" (expand good_depth?)
              (("2" (expand pushcount)
                (("2" (use sigma_max) (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (typepred "step(len, G, s, start, root)(St)`depth")
            (("3" (expand good_depth?)
              (("3" (expand pushcount)
                (("3" (use sigma_max) (("3" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((count const-decl "upto(len)" arrayCount nil)
    (sigma def-decl "real" sigma reals)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (parse termination
          "attributePEG.parse(attributePEG.len, attributePEG.G, attributePEG.s, attributePEG.start, attributePEG.root)(attributePEG.step(attributePEG.len, attributePEG.G, attributePEG.s, attributePEG.start, attributePEG.root)(attributePEG.St))"
          "nil")))
 (doparse_TCC1 0
  (doparse_TCC3-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil
   (doparse subtype "attributePEG.pend"
    "[non_terminal -> (attributePEG.nice_entry?(attributePEG.len, attributePEG.i))]")))
 (doparse_TCC2 0
  (doparse_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil
   (doparse subtype "0" "naturalnumbers.upto(attributePEG.len)")))
 (doparse_TCC3 0
  (doparse_TCC3-1 nil 3808434333 ("" (subtype-tcc) nil nil) nil nil
   (doparse subtype "0" "uint32")))
 (doparse_TCC4 0
  (doparse_TCC4-1 nil 3804547853 ("" (grind) nil nil) nil nil
   (doparse subtype "attributePEG.num_non_terminals" "uint8")))
 (doparse_TCC5 0
  (doparse_TCC4-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil
   (doparse subtype
    "attributePEG.push(0, attributePEG.num_non_terminals, attributePEG.inh)"
    "(attributePEG.nice_entry?(attributePEG.len, 0))")))
 (doparse_TCC6 0
  (doparse_TCC5-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((count const-decl "upto(len)" arrayCount nil)) nil
   (doparse subtype
    "(LAMBDA (i: naturalnumbers.upto(attributePEG.len)): attributePEG.pend) WITH [(0)(attributePEG.n) := attributePEG.push(0, attributePEG.num_non_terminals, attributePEG.inh)]"
    "(attributePEG.fine_scaffold?(attributePEG.len, attributePEG.G, attributePEG.s)(0, attributePEG.n))")))
 (doparse_TCC7 0
  (doparse_TCC1-1 nil 3804455654
   ("" (skeep*)
    (("" (grind :exclude good_depth?)
      (("" (expand good_depth?)
        (("" (expand pushcount)
          (("" (rewrite scafcount_update)
            (("" (use "empty_card[below(255)]")
              (("1" (ground)
                (("1" (replace -2 :hide? t)
                  (("1" (rewrite "reals@sigma[upto(len)].sigma_zero")
                    nil nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (inst + 255 "id[below(255)]")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_zero formula-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (count const-decl "upto(len)" arrayCount nil)
    (sigma_nat application-judgement "nat" sigma reals))
   nil
   (doparse subtype "1"
    "(attributePEG.good_depth?(attributePEG.len, (LAMBDA (i: naturalnumbers.upto(attributePEG.len)): attributePEG.pend) WITH [(0)(attributePEG.n) := attributePEG.push(0, attributePEG.num_non_terminals, attributePEG.inh)]))")))
 (doparse_TCC8 0
  (doparse_TCC6-1 nil 3804534082 ("" (grind) nil nil) nil nil
   (doparse subtype
    "attributePEG.push(0, attributePEG.n, attributePEG.inh)"
    "(attributePEG.fine_stack?(attributePEG.len, attributePEG.G, 1, (LAMBDA (i: naturalnumbers.upto(attributePEG.len)): attributePEG.pend) WITH [(0)(attributePEG.n) := attributePEG.push(0, attributePEG.num_non_terminals, attributePEG.inh)]))")))
 (doparse_TCC9 0
  (doparse_TCC8-1 nil 3804730988 ("" (subtype-tcc) nil nil) nil nil
   (doparse subtype "booleans.FALSE"
    "{b: booleans.bool | IF b THEN booleans.OR(attributePEG.n = attributePEG.num_non_terminals, attributePEG.loop_ready?(attributePEG.len, attributePEG.G, (LAMBDA (i: naturalnumbers.upto(attributePEG.len)): attributePEG.pend) WITH [(0)(attributePEG.n) := attributePEG.push(0, attributePEG.num_non_terminals, attributePEG.inh)], 0, attributePEG.n)) ELSE FORALL (i_1: naturalnumbers.upto(attributePEG.len)), (n_1: attributePEG.non_terminal): (booleans.NOT)(attributePEG.loop?((LAMBDA (i: naturalnumbers.upto(attributePEG.len)): attributePEG.pend) WITH [(0)(attributePEG.n) := attributePEG.push(0, attributePEG.num_non_terminals, attributePEG.inh)](i_1)(n_1))) ENDIF}"))))

