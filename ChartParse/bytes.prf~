(bytes
 (nbytes_TCC1 0
  (nbytes_TCC1-1 nil 3831687502 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (null const-decl "bytestring" bytestrings nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (nbytes subtype "bytestrings.null" "bytes.lbytes(bytes.n)")))
 (nbytes_TCC2 0
  (nbytes_TCC2-1 nil 3831687502 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (nbytes subtype "(number_fields.-)(bytes.n, 1)" "index")))
 (nbytes_TCC3 0
  (nbytes_TCC3-1 nil 3831687502 ("" (termination-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)) nil
   (nbytes termination
    "bytes.nbytes(bytes.b, (number_fields.-)(bytes.n, 1))" "nil")))
 (nbytes_TCC4 0
  (nbytes_TCC4-1 nil 3831687502
   ("" (skeep*)
    (("" (typepred "v(b, n - 1)")
      (("1" (typepred "n") (("1" (grind) nil nil)) nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((lbytes type-eq-decl nil bytes nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (below type-eq-decl nil naturalnumbers nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (unit const-decl "bytestring" bytestrings nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (nbytes subtype
    "bytes.nbytes(bytes.b, (number_fields.-)(bytes.n, 1))"
    "{s2 | reals.<((number_fields.+)(bytestrings.s2`length, bytestrings.unit(bytes.b)`length), 0x100000000)}")))
 (nbytes_TCC5 0
  (nbytes_TCC5-1 nil 3831687502 ("" (subtype-tcc) nil nil)
   ((get const-decl "byte" bytestrings nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (unit const-decl "bytestring" bytestrings nil)
    (++ const-decl "bytestring" bytestrings nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (nbytes subtype
    "bytestrings.++(bytestrings.unit(bytes.b), bytes.nbytes(bytes.b, (number_fields.-)(bytes.n, 1)))"
    "bytes.lbytes(bytes.n)")))
 (padright_TCC1 0
  (padright_TCC1-1 nil 3831687502 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)) nil
   (padright subtype "(number_fields.+)(length(bytes.B), bytes.n)"
    "index")))
 (padright_TCC2 0
  (padright_TCC2-1 nil 3831687502
   ("" (skeep*) (("" (typepred "B") (("" (grind) nil nil)) nil)) nil)
   ((index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (padright subtype "bytes.nbytes(0, bytes.n)"
    "{s2 | reals.<((number_fields.+)(bytes.B`length, bytestrings.s2`length), 0x100000000)}")))
 (padright_TCC3 0
  (padright_TCC3-1 nil 3831687502
   ("" (skeep*)
    (("" (rewrite "length_concat")
      (("" (typepred "nbytes(0, n)") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((length_concat formula-decl nil bytestrings nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (lbytes type-eq-decl nil bytes nil)
    (nbytes def-decl "lbytes(n)" bytes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (padright subtype
    "bytestrings.++(bytes.B, bytes.nbytes(0, bytes.n))"
    "bytes.lbytes((number_fields.+)(bytes.n, length(bytes.B)))")))
 (XOR_TCC1 0
  (XOR_TCC1-1 nil 3831687502 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (XOR subtype "0" "naturalnumbers.below(length(bytes.B1))")))
 (XOR_TCC2 0
  (XOR_TCC2-1 nil 3831687502 ("" (skeep) (("" (grind) nil nil)) nil)
   ((get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (XOR subtype "bytestrings.get(bytes.B1, 0)"
    "naturalnumbers.below(exp2.exp2(8))")))
 (XOR_TCC3 0
  (XOR_TCC3-1 nil 3831687502 ("" (grind) nil nil)
   ((get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (XOR const-decl "bool" xor_def nil)
    (XOR const-decl "bvec[N]" bv_bitwise nil)
    (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil))
   nil
   (XOR subtype
    "bv_nat[8].bv2nat(bv_bitwise[8].XOR(bv_nat[8].nat2bv(bytestrings.get(bytes.B1, 0)), bv_nat[8].nat2bv(bytestrings.get(bytes.B1, 0))))"
    "byte")))
 (XOR_TCC4 0
  (XOR_TCC4-1 nil 3831687502 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (XOR subtype "1" "naturalnumbers.upto(length(bytes.B1))")))
 (XOR_TCC5 0
  (XOR_TCC5-1 nil 3831687502 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (XOR subtype "1" "naturalnumbers.upto(length(bytes.B2))")))
 (XOR_TCC6 0
  (XOR_TCC6-1 nil 3831687502 ("" (termination-tcc) nil nil)
   ((get const-decl "byte" bytestrings nil)
    (suffix const-decl "bytestring" bytestrings nil))
   nil
   (XOR termination
    "(bytes.XOR(bytestrings.suffix(bytes.B1, 1), bytestrings.suffix(bytes.B2, 1)))"
    "nil")))
 (XOR_TCC7 0
  (XOR_TCC7-1 nil 3831687502
   ("" (skeep*)
    (("" (typepred "v(suffix(B1, 1), suffix(B2, 1))")
      (("" (rewrite "length_suffix")
        (("" (rewrite "length_suffix") (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((suffix const-decl "bytestring" bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (unit const-decl "bytestring" bytestrings nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (b2n const-decl "nbit" bit nil) (^ const-decl "bit" bv nil)
    (XOR const-decl "bvec[N]" bv_bitwise nil)
    (XOR const-decl "bool" xor_def nil)
    (exp2 def-decl "posnat" exp2 nil)
    (get const-decl "byte" bytestrings nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_suffix formula-decl nil bytestrings nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (XOR subtype
    "(bytes.XOR(bytestrings.suffix(bytes.B1, 1), bytestrings.suffix(bytes.B2, 1)))"
    "{s2 | reals.<((number_fields.+)(bytestrings.s2`length, bytestrings.unit(bv_nat[8].bv2nat(bv_bitwise[8].XOR(bv_nat[8].nat2bv(bytestrings.get(bytes.B1, 0)), bv_nat[8].nat2bv(bytestrings.get(bytes.B1, 0)))))`length), 0x100000000)}")))
 (XOR_TCC8 0
  (XOR_TCC8-1 nil 3831690137
   ("" (skeep*)
    (("" (typepred "v(suffix(B1, 1), suffix(B2, 1))")
      (("" (rewrite "length_suffix")
        (("" (rewrite "length_suffix") (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((suffix const-decl "bytestring" bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (++ const-decl "bytestring" bytestrings nil)
    (unit const-decl "bytestring" bytestrings nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (b2n const-decl "nbit" bit nil) (^ const-decl "bit" bv nil)
    (XOR const-decl "bvec[N]" bv_bitwise nil)
    (XOR const-decl "bool" xor_def nil)
    (exp2 def-decl "posnat" exp2 nil)
    (get const-decl "byte" bytestrings nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_suffix formula-decl nil bytestrings nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (XOR subtype
    "bytestrings.++(bytestrings.unit(bv_nat[8].bv2nat(bv_bitwise[8].XOR(bv_nat[8].nat2bv(bytestrings.get(bytes.B1, 0)), bv_nat[8].nat2bv(bytestrings.get(bytes.B1, 0))))), (bytes.XOR(bytestrings.suffix(bytes.B1, 1), bytestrings.suffix(bytes.B2, 1))))"
    "{B | bytes.B`length = real_defs.max(bytes.B1`length, bytes.B2`length)}")))
 (XOR_TCC9 0
  (XOR_TCC9-1 nil 3831690137 ("" (subtype-tcc) nil nil)
   ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (XOR subtype "bytes.B1"
    "{B | bytes.B`length = real_defs.max(bytes.B1`length, bytes.B2`length)}")))
 (XOR_TCC10 0
  (XOR_TCC10-1 nil 3831690137 ("" (subtype-tcc) nil nil) nil nil
   (XOR subtype "bytes.B2"
    "{B | bytes.B`length = real_defs.max(bytes.B1`length, bytes.B2`length)}"))))

