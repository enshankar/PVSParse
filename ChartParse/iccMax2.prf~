(iccMax2
 (ChannelVecOp_TCC1 0
  (ChannelVecOp_TCC2-1 nil 3850179737 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (ChannelVecOp subtype
    "(number_fields.+)((number_fields.+)(iccMax2.inMax, iccMax2.T), 1)"
    "uint64")))
 (ChannelVecOp_TCC2 0
  (ChannelVecOp_TCC1-1 nil 3850179737 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (ChannelVecOp subtype
    "(number_fields.+)((number_fields.+)(iccMax2.inMin, iccMax2.T), 1)"
    "naturalnumbers.upto((number_fields.+)((number_fields.+)(1, iccMax2.T), iccMax2.inMax))")))
 (ChannelVecOp_TCC3 0
  (ChannelVecOp_TCC3-1 nil 3850322914 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (ChannelVecOp subtype
    "iccMax2.value((number_fields.+)((number_fields.+)(iccMax2.inMax, iccMax2.T), 1), (number_fields.+)((number_fields.+)(iccMax2.inMin, iccMax2.T), 1))"
    "iccMax2.goodresult(iccMax2.stackLimit)")))
 (ChannelVecOp_TCC4 0
  (ChannelVecOp_TCC4-1 nil 3850322914 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Overflow const-decl "uint8" iccMax2 nil))
   nil
   (ChannelVecOp subtype
    "iccMax2.error(iccMax2.Overflow, iccMax2.cur, 21)"
    "iccMax2.goodresult(iccMax2.stackLimit)")))
 (ChannelVecOp_TCC5 0
  (ChannelVecOp_TCC5-1 nil 3850322914 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (Underflow const-decl "uint8" iccMax2 nil))
   nil
   (ChannelVecOp subtype
    "iccMax2.error(iccMax2.Underflow, iccMax2.cur, 22)"
    "iccMax2.goodresult(iccMax2.stackLimit)")))
 (ChannelVecOp_TCC6 0
  (ChannelVecOp_TCC4-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (ChannelVecOp subtype
    "(number_fields.-)((number_fields.-)(iccMax2.inMax, iccMax2.T), 1)"
    "uint64")))
 (ChannelVecOp_TCC7 0
  (ChannelVecOp_TCC3-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (ChannelVecOp subtype
    "(number_fields.-)((number_fields.-)(iccMax2.inMin, iccMax2.T), 1)"
    "naturalnumbers.upto((number_fields.-)((number_fields.-)(iccMax2.inMax, 1), iccMax2.T))")))
 (ChannelVecOp_TCC8 0
  (ChannelVecOp_TCC8-1 nil 3850322914 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (ChannelVecOp subtype
    "iccMax2.value((number_fields.-)((number_fields.-)(iccMax2.inMax, iccMax2.T), 1), (number_fields.-)((number_fields.-)(iccMax2.inMin, iccMax2.T), 1))"
    "iccMax2.goodresult(iccMax2.stackLimit)")))
 (ChannelVecOp_TCC9 0
  (ChannelVecOp_TCC9-1 nil 3850322914 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (Underflow const-decl "uint8" iccMax2 nil))
   nil
   (ChannelVecOp subtype
    "iccMax2.error(iccMax2.Underflow, iccMax2.cur, 23)"
    "iccMax2.goodresult(iccMax2.stackLimit)")))
 (ChannelVecOp_TCC10 0
  (ChannelVecOp_TCC5-1 nil 3850179737 ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (ChannelVecOp disjointness
    "(COND (booleans.OR(iccMax2.tag = 0x696e2020, iccMax2.tag = 0x74676574)) -> IF reals.<((number_fields.+)((number_fields.+)(iccMax2.inMax, iccMax2.T), 1), iccMax2.stackLimit) THEN iccMax2.value((number_fields.+)((number_fields.+)(iccMax2.inMax, iccMax2.T), 1), (number_fields.+)((number_fields.+)(iccMax2.inMin, iccMax2.T), 1)) ELSE iccMax2.error(iccMax2.Overflow, iccMax2.cur, 21) ENDIF, (booleans.OR(iccMax2.tag = 0x6f757420, iccMax2.tag = 0x74707574)) -> IF reals.<(iccMax2.inMin, (number_fields.+)(iccMax2.T, 1)) THEN iccMax2.error(iccMax2.Underflow, iccMax2.cur, 22) ELSE iccMax2.value((number_fields.-)((number_fields.-)(iccMax2.inMax, iccMax2.T), 1), (number_fields.-)((number_fields.-)(iccMax2.inMin, iccMax2.T), 1)) ENDIF, iccMax2.tag = 0x74736176 -> IF reals.<(iccMax2.inMin, (number_fields.+)(iccMax2.T, 1)) THEN iccMax2.error(iccMax2.Underflow, iccMax2.cur, 23) ELSE iccMax2.value(iccMax2.inMax, iccMax2.inMin) ENDIF ENDCOND)"
    "nil")))
 (ChannelVecOp_TCC11 0
  (ChannelVecOp_TCC6-1 nil 3850179737 ("" (cond-coverage-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (ChannelVecOp coverage
    "(COND (booleans.OR(iccMax2.tag = 0x696e2020, iccMax2.tag = 0x74676574)) -> IF reals.<((number_fields.+)((number_fields.+)(iccMax2.inMax, iccMax2.T), 1), iccMax2.stackLimit) THEN iccMax2.value((number_fields.+)((number_fields.+)(iccMax2.inMax, iccMax2.T), 1), (number_fields.+)((number_fields.+)(iccMax2.inMin, iccMax2.T), 1)) ELSE iccMax2.error(iccMax2.Overflow, iccMax2.cur, 21) ENDIF, (booleans.OR(iccMax2.tag = 0x6f757420, iccMax2.tag = 0x74707574)) -> IF reals.<(iccMax2.inMin, (number_fields.+)(iccMax2.T, 1)) THEN iccMax2.error(iccMax2.Underflow, iccMax2.cur, 22) ELSE iccMax2.value((number_fields.-)((number_fields.-)(iccMax2.inMax, iccMax2.T), 1), (number_fields.-)((number_fields.-)(iccMax2.inMin, iccMax2.T), 1)) ENDIF, iccMax2.tag = 0x74736176 -> IF reals.<(iccMax2.inMin, (number_fields.+)(iccMax2.T, 1)) THEN iccMax2.error(iccMax2.Underflow, iccMax2.cur, 23) ELSE iccMax2.value(iccMax2.inMax, iccMax2.inMin) ENDIF ENDCOND)"
    "nil")))
 (stackOut_TCC1 0
  (stackOut_TCC1-1 nil 3850179737
   ("" (grind) (("" (yices2 :nonlinear? t) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (uint16 type-eq-decl nil integertypes nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (plus_i32_u32 application-judgement "int64" integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (times_u16_u16 application-judgement "uint32" integertypes nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil
   (stackOut subtype
    "number_fields.*(((number_fields.+)(iccMax2.T, 1)), ((number_fields.+)(iccMax2.S, 1)))"
    "uint64")))
 (stackOut_TCC2 0
  (stackOut_TCC2-1 nil 3850179737 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (stackOut subtype "(number_fields.+)(iccMax2.S, 1)" "uint64")))
 (stackOut_TCC3 0
  (stackOut_TCC3-1 nil 3850179737 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (stackOut subtype "(number_fields.+)(iccMax2.S, 1)" "uint64")))
 (stackOut_TCC4 0
  (stackOut_TCC4-1 nil 3850179737 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (uint16 type-eq-decl nil integertypes nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (stackOut subtype
    "(number_fields.+)((number_fields.+)((number_fields.+)(iccMax2.S, 1), iccMax2.T), 1)"
    "uint64")))
 (stackOut_TCC5 0
  (stackOut_TCC5-1 nil 3850179737 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (stackOut subtype "(number_fields.+)(iccMax2.S, 1)" "uint64")))
 (stackOut_TCC6 0
  (stackOut_TCC6-1 nil 3850179737 ("" (cond-coverage-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (stackOut coverage
    "(COND iccMax2.tag = 0x636f7079 -> number_fields.*(((number_fields.+)(iccMax2.T, 1)), ((number_fields.+)(iccMax2.S, 1))), iccMax2.tag = 0x726f746c -> (number_fields.+)(iccMax2.S, 1), iccMax2.tag = 0x726f7472 -> (number_fields.+)(iccMax2.S, 1), iccMax2.tag = 0x706f7364 -> (number_fields.+)((number_fields.+)((number_fields.+)(iccMax2.S, 1), iccMax2.T), 1), iccMax2.tag = 0x666c6970 -> (number_fields.+)(iccMax2.S, 1), iccMax2.tag = 0x706f7020 -> 0 ENDCOND)"
    "nil")))
 (matrixIn_TCC1 0
  (matrixIn_TCC1-1 nil 3850179737
   ("" (grind) (("" (yices2 :nonlinear? t) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (times_u16_u16 application-judgement "uint32" integertypes nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil
   (matrixIn subtype
    "(number_fields.+)((number_fields.+)(number_fields.*(((number_fields.+)(iccMax2.S, 1)), ((number_fields.+)(iccMax2.T, 1))), iccMax2.S), 1)"
    "uint64")))
 (matrixIn_TCC2 0
  (matrixIn_TCC2-1 nil 3850179737
   ("" (grind) (("" (yices2 :nonlinear? t) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (plus_i32_u32 application-judgement "int64" integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (times_u16_u16 application-judgement "uint32" integertypes nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil
   (matrixIn subtype
    "number_fields.*(((number_fields.+)(iccMax2.S, 1)), ((number_fields.+)(iccMax2.T, 1)))"
    "uint64")))
 (matrixOut_TCC1 0
  (matrixOut_TCC1-1 nil 3850179737 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (matrixOut subtype "(number_fields.+)(iccMax2.T, 1)" "uint64")))
 (FuncVecIn_TCC1 0
  (FuncVecIn_TCC1-1 nil 3850179737 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (FuncVecIn subtype "(number_fields.+)(iccMax2.S, 2)" "uint32")))
 (FuncVecIn_TCC2 0
  (FuncVecIn_TCC2-1 nil 3850179737 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (FuncVecIn subtype
    "number_fields.*(3, ((number_fields.+)(iccMax2.S, 1)))" "uint32")))
 (FuncVecIn_TCC3 0
  (FuncVecIn_TCC3-1 nil 3850179737 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (FuncVecIn subtype "(number_fields.+)(iccMax2.S, 1)" "uint32")))
 (FuncVecIn_TCC4 0
  (FuncVecIn_TCC4-1 nil 3850179737 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (FuncVecIn subtype
    "number_fields.*(2, ((number_fields.+)(iccMax2.S, 1)))" "uint32")))
 (FuncVecOut_TCC1 0
  (FuncVecOut_TCC1-1 nil 3850179737 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (FuncVecOut subtype "(number_fields.+)(iccMax2.S, 1)" "uint32")))
 (FuncVecOut_TCC2 0
  (FuncVecOut_TCC2-1 nil 3850179737 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (FuncVecOut subtype "((number_fields.+)(iccMax2.S, 1))" "uint32")))
 (parseOperation_TCC1 0
  (parseOperation_TCC1-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)) nil
   (parseOperation subtype
    "(number_fields.-)(iccMax2.endpos, iccMax2.startpos)"
    "naturalnumber")))
 (parseOperation_TCC2 0
  (parseOperation_TCC8-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)) nil
   (parseOperation subtype
    "iccMax2.value(iccMax2.inMax, iccMax2.inMin)"
    "iccMax2.goodresult(iccMax2.stackLimit)")))
 (parseOperation_TCC3 0
  (parseOperation_TCC2-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (parseOperation subtype "iccMax2.startpos" "index")))
 (parseOperation_TCC4 0
  (parseOperation_TCC4-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((UnexpectedEOF const-decl "uint8" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
    "iccMax2.error(iccMax2.UnexpectedEOF, iccMax2.startpos, 0)"
    "iccMax2.goodresult(iccMax2.stackLimit)")))
 (parseOperation_TCC5 0
  (parseOperation_TCC3-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype "iccMax2.cur"
    "naturalnumbers.below(iccMax2.s`length)")))
 (parseOperation_TCC6 0
  (parseOperation_TCC9-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (parseOperation subtype "iccMax2.cur" "index")))
 (parseOperation_TCC7 0
  (parseOperation_TCC7-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (Overflow const-decl "uint8" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
    "iccMax2.error(iccMax2.Overflow, iccMax2.cur, 11)"
    "iccMax2.goodresult(iccMax2.stackLimit)")))
 (parseOperation_TCC8 0
  (parseOperation_TCC4-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.startpos, 8)"
    "naturalnumbers.upto(iccMax2.endpos)")))
 (parseOperation_TCC9 0
  (parseOperation_TCC6-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.inMax, 1)"
    "{inMax: integertypes.uint64 | reals.<=(inMax, iccMax2.stackLimit)}")))
 (parseOperation_TCC10 0
  (parseOperation_TCC5-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.inMin, 1)"
    "{inMin: integertypes.uint64 | reals.<=(inMin, (number_fields.+)(1, iccMax2.inMax))}")))
 (parseOperation_TCC11 0
  (parseOperation_TCC7-1 nil 3850179737 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation termination
    "iccMax2.parseOperation(iccMax2.stackLimit, iccMax2.s, iccMax2.endpos, (number_fields.+)(iccMax2.startpos, 8), (number_fields.+)(iccMax2.inMax, 1), (number_fields.+)(iccMax2.inMin, 1))"
    "nil")))
 (parseOperation_TCC12 0
  (parseOperation_TCC22-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (parseOperation subtype "iccMax2.cur" "index")))
 (parseOperation_TCC13 0
  (parseOperation_TCC10-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype "iccMax2.inMax"
    "{inMax: integertypes.uint64 | reals.<=(inMax, iccMax2.stackLimit)}")))
 (parseOperation_TCC14 0
  (parseOperation_TCC72-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype "iccMax2.inMin"
    "{inMin: integertypes.uint64 | reals.<=(inMin, iccMax2.inMax)}")))
 (parseOperation_TCC15 0
  (parseOperation_TCC11-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.cur, 4)"
    "naturalnumbers.below(iccMax2.s`length)")))
 (parseOperation_TCC16 0
  (parseOperation_TCC12-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.cur, 6)"
    "naturalnumbers.below(iccMax2.s`length)")))
 (parseOperation_TCC17 0
  (parseOperation_TCC13-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (goodresult type-eq-decl nil iccMax2 nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2 nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2 nil)
    (result type-decl nil iccMax2 nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.startpos, 8)"
    "naturalnumbers.upto(iccMax2.endpos)")))
 (parseOperation_TCC18 0
  (parseOperation_TCC14-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (goodresult type-eq-decl nil iccMax2 nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2 nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2 nil)
    (result type-decl nil iccMax2 nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "iccMax2.M"
    "{inMax: integertypes.uint64 | reals.<=(inMax, iccMax2.stackLimit)}")))
 (parseOperation_TCC19 0
  (parseOperation_TCC17-1 nil 3850308699 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype "iccMax2.m"
    "{inMin: integertypes.uint64 | reals.<=(inMin, iccMax2.M)}")))
 (parseOperation_TCC20 0
  (parseOperation_TCC15-1 nil 3850179737 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (Overflow const-decl "uint8" iccMax2 nil)
    (Underflow const-decl "uint8" iccMax2 nil)
    (ChannelVecOp const-decl "goodresult(stackLimit)" iccMax2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation termination
    "iccMax2.parseOperation(iccMax2.stackLimit, iccMax2.s, iccMax2.endpos, (number_fields.+)(iccMax2.startpos, 8), iccMax2.M, iccMax2.m)"
    "nil")))
 (parseOperation_TCC21 0
  (parseOperation_TCC23-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (parseOperation subtype "iccMax2.cur" "index")))
 (parseOperation_TCC22 0
  (parseOperation_TCC22-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (Overflow const-decl "uint8" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
    "iccMax2.error(iccMax2.Overflow, iccMax2.cur, 31)"
    "iccMax2.goodresult(iccMax2.stackLimit)")))
 (parseOperation_TCC23 0
  (parseOperation_TCC16-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.startpos, 8)"
    "naturalnumbers.upto(iccMax2.endpos)")))
 (parseOperation_TCC24 0
  (parseOperation_TCC18-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.inMax, 2)"
    "{inMax: integertypes.uint64 | reals.<=(inMax, iccMax2.stackLimit)}")))
 (parseOperation_TCC25 0
  (parseOperation_TCC17-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.inMin, 2)"
    "{inMin: integertypes.uint64 | reals.<=(inMin, (number_fields.+)(2, iccMax2.inMax))}")))
 (parseOperation_TCC26 0
  (parseOperation_TCC19-1 nil 3850179737 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation termination
    "iccMax2.parseOperation(iccMax2.stackLimit, iccMax2.s, iccMax2.endpos, (number_fields.+)(iccMax2.startpos, 8), (number_fields.+)(iccMax2.inMax, 2), (number_fields.+)(iccMax2.inMin, 2))"
    "nil")))
 (parseOperation_TCC27 0
  (parseOperation_TCC20-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.cur, 4)"
    "naturalnumbers.below(iccMax2.s`length)")))
 (parseOperation_TCC28 0
  (parseOperation_TCC21-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.cur, 6)"
    "naturalnumbers.below(iccMax2.s`length)")))
 (parseOperation_TCC29 0
  (parseOperation_TCC30-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (parseOperation subtype "iccMax2.cur" "index")))
 (parseOperation_TCC30 0
  (parseOperation_TCC30-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (Underflow const-decl "uint8" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
    "iccMax2.error(iccMax2.Underflow, iccMax2.cur, 41)"
    "iccMax2.goodresult(iccMax2.stackLimit)")))
 (parseOperation_TCC31 0
  (parseOperation_TCC31-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil (parseOperation subtype "iccMax2.cur" "index")))
 (parseOperation_TCC32 0
  (parseOperation_TCC32-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (Overflow const-decl "uint8" iccMax2 nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
    "iccMax2.error(iccMax2.Overflow, iccMax2.cur, 42)"
    "iccMax2.goodresult(iccMax2.stackLimit)")))
 (parseOperation_TCC33 0
  (parseOperation_TCC24-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.startpos, 8)"
    "naturalnumbers.upto(iccMax2.endpos)")))
 (parseOperation_TCC34 0
  (parseOperation_TCC26-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (parseOperation subtype
    "(number_fields.+)((number_fields.-)(iccMax2.inMax, iccMax2.S), iccMax2.T)"
    "{inMax: integertypes.uint64 | reals.<=(inMax, iccMax2.stackLimit)}")))
 (parseOperation_TCC35 0
  (parseOperation_TCC25-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (parseOperation subtype
    "(number_fields.+)((number_fields.-)(iccMax2.inMin, iccMax2.S), iccMax2.T)"
    "{inMin: integertypes.uint64 | reals.<=(inMin, (number_fields.-)((number_fields.+)(iccMax2.T, iccMax2.inMax), iccMax2.S))}")))
 (parseOperation_TCC36 0
  (parseOperation_TCC27-1 nil 3850179737 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation termination
    "iccMax2.parseOperation(iccMax2.stackLimit, iccMax2.s, iccMax2.endpos, (number_fields.+)(iccMax2.startpos, 8), (number_fields.+)((number_fields.-)(iccMax2.inMax, iccMax2.S), iccMax2.T), (number_fields.+)((number_fields.-)(iccMax2.inMin, iccMax2.S), iccMax2.T))"
    "nil")))
 (parseOperation_TCC37 0
  (parseOperation_TCC28-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.cur, 4)"
    "naturalnumbers.below(iccMax2.s`length)")))
 (parseOperation_TCC38 0
  (parseOperation_TCC29-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.cur, 6)"
    "naturalnumbers.below(iccMax2.s`length)")))
 (parseOperation_TCC39 0
  (parseOperation_TCC32-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (parseOperation subtype "iccMax2.cur" "index")))
 (parseOperation_TCC40 0
  (parseOperation_TCC40-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (Underflow const-decl "uint8" iccMax2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
    "iccMax2.error(iccMax2.Underflow, iccMax2.cur, 51)"
    "iccMax2.goodresult(iccMax2.stackLimit)")))
 (parseOperation_TCC41 0
  (parseOperation_TCC39-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (parseOperation subtype "iccMax2.cur" "index")))
 (parseOperation_TCC42 0
  (parseOperation_TCC42-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (Overflow const-decl "uint8" iccMax2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
    "iccMax2.error(iccMax2.Overflow, iccMax2.cur, 52)"
    "iccMax2.goodresult(iccMax2.stackLimit)")))
 (parseOperation_TCC43 0
  (parseOperation_TCC46-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (/= const-decl "boolean" notequal nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (parseOperation subtype "iccMax2.cur" "index")))
 (parseOperation_TCC44 0
  (parseOperation_TCC44-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (/= const-decl "boolean" notequal nil)
    (nonZero const-decl "uint8" iccMax2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
    "iccMax2.error(iccMax2.nonZero, iccMax2.cur, 53)"
    "iccMax2.goodresult(iccMax2.stackLimit)")))
 (parseOperation_TCC45 0
  (parseOperation_TCC33-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (/= const-decl "boolean" notequal nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.startpos, 8)"
    "naturalnumbers.upto(iccMax2.endpos)")))
 (parseOperation_TCC46 0
  (parseOperation_TCC35-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (/= const-decl "boolean" notequal nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (parseOperation subtype
    "(number_fields.+)((number_fields.-)((number_fields.-)(iccMax2.inMax, iccMax2.S), 1), iccMax2.stackout)"
    "{inMax: integertypes.uint64 | reals.<=(inMax, iccMax2.stackLimit)}")))
 (parseOperation_TCC47 0
  (parseOperation_TCC34-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (/= const-decl "boolean" notequal nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (parseOperation subtype
    "(number_fields.+)((number_fields.-)((number_fields.-)(iccMax2.inMin, iccMax2.S), 1), iccMax2.stackout)"
    "{inMin: integertypes.uint64 | reals.<=(inMin, (number_fields.-)((number_fields.-)((number_fields.+)(iccMax2.inMax, iccMax2.stackout), 1), iccMax2.S))}")))
 (parseOperation_TCC48 0
  (parseOperation_TCC36-1 nil 3850179737 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (stackOut const-decl "uint64" iccMax2 nil)
    (/= const-decl "boolean" notequal nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (times_u16_u16 application-judgement "uint32" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation termination
    "iccMax2.parseOperation(iccMax2.stackLimit, iccMax2.s, iccMax2.endpos, (number_fields.+)(iccMax2.startpos, 8), (number_fields.+)((number_fields.-)((number_fields.-)(iccMax2.inMax, iccMax2.S), 1), iccMax2.stackout), (number_fields.+)((number_fields.-)((number_fields.-)(iccMax2.inMin, iccMax2.S), 1), iccMax2.stackout))"
    "nil")))
 (parseOperation_TCC49 0
  (parseOperation_TCC37-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.cur, 4)"
    "naturalnumbers.below(iccMax2.s`length)")))
 (parseOperation_TCC50 0
  (parseOperation_TCC38-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.cur, 6)"
    "naturalnumbers.below(iccMax2.s`length)")))
 (parseOperation_TCC51 0
  (parseOperation_TCC47-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (parseOperation subtype "iccMax2.cur" "index")))
 (parseOperation_TCC52 0
  (parseOperation_TCC52-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (Underflow const-decl "uint8" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
    "iccMax2.error(iccMax2.Underflow, iccMax2.cur, 61)"
    "iccMax2.goodresult(iccMax2.stackLimit)")))
 (parseOperation_TCC53 0
  (parseOperation_TCC40-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.startpos, 8)"
    "naturalnumbers.upto(iccMax2.endpos)")))
 (parseOperation_TCC54 0
  (parseOperation_TCC42-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (matrixIn const-decl "uint64" iccMax2 nil)
    (matrixOut const-decl "uint64" iccMax2 nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (plus_i16_u16 application-judgement "int32" integertypes nil)
    (times_u8_u8 application-judgement "uint16" integertypes nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (parseOperation subtype
    "(number_fields.+)((number_fields.-)(iccMax2.inMax, iccMax2.stackin), iccMax2.stackout)"
    "{inMax: integertypes.uint64 | reals.<=(inMax, iccMax2.stackLimit)}")))
 (parseOperation_TCC55 0
  (parseOperation_TCC41-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (matrixIn const-decl "uint64" iccMax2 nil)
    (matrixOut const-decl "uint64" iccMax2 nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (plus_i16_u16 application-judgement "int32" integertypes nil)
    (times_u8_u8 application-judgement "uint16" integertypes nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (parseOperation subtype
    "(number_fields.+)((number_fields.-)(iccMax2.inMin, iccMax2.stackin), iccMax2.stackout)"
    "{inMin: integertypes.uint64 | reals.<=(inMin, (number_fields.-)((number_fields.+)(iccMax2.inMax, iccMax2.stackout), iccMax2.stackin))}")))
 (parseOperation_TCC56 0
  (parseOperation_TCC43-1 nil 3850179737 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (matrixIn const-decl "uint64" iccMax2 nil)
    (matrixOut const-decl "uint64" iccMax2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (times_u16_u16 application-judgement "uint32" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation termination
    "iccMax2.parseOperation(iccMax2.stackLimit, iccMax2.s, iccMax2.endpos, (number_fields.+)(iccMax2.startpos, 8), (number_fields.+)((number_fields.-)(iccMax2.inMax, iccMax2.stackin), iccMax2.stackout), (number_fields.+)((number_fields.-)(iccMax2.inMin, iccMax2.stackin), iccMax2.stackout))"
    "nil")))
 (parseOperation_TCC57 0
  (parseOperation_TCC44-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.cur, 4)"
    "naturalnumbers.below(iccMax2.s`length)")))
 (parseOperation_TCC58 0
  (parseOperation_TCC45-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.cur, 6)"
    "naturalnumbers.below(iccMax2.s`length)")))
 (parseOperation_TCC59 0
  (parseOperation_TCC54-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (/= const-decl "boolean" notequal nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (parseOperation subtype "iccMax2.cur" "index")))
 (parseOperation_TCC60 0
  (parseOperation_TCC60-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (/= const-decl "boolean" notequal nil)
    (nonZero const-decl "uint8" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
    "iccMax2.error(iccMax2.nonZero, iccMax2.cur, 71)"
    "iccMax2.goodresult(iccMax2.stackLimit)")))
 (parseOperation_TCC61 0
  (parseOperation_TCC74-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (/= const-decl "boolean" notequal nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (parseOperation subtype "iccMax2.cur" "index")))
 (parseOperation_TCC62 0
  (parseOperation_TCC62-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (/= const-decl "boolean" notequal nil)
    (Underflow const-decl "uint8" iccMax2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
    "iccMax2.error(iccMax2.Underflow, iccMax2.cur, 72)"
    "iccMax2.goodresult(iccMax2.stackLimit)")))
 (parseOperation_TCC63 0
  (parseOperation_TCC48-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (/= const-decl "boolean" notequal nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.startpos, 8)"
    "naturalnumbers.upto(iccMax2.endpos)")))
 (parseOperation_TCC64 0
  (parseOperation_TCC50-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (/= const-decl "boolean" notequal nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype
    "(number_fields.-)(iccMax2.inMax, iccMax2.S)"
    "{inMax: integertypes.uint64 | reals.<=(inMax, iccMax2.stackLimit)}")))
 (parseOperation_TCC65 0
  (parseOperation_TCC49-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (/= const-decl "boolean" notequal nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype
    "(number_fields.-)(iccMax2.inMin, iccMax2.S)"
    "{inMin: integertypes.uint64 | reals.<=(inMin, (number_fields.-)(iccMax2.inMax, iccMax2.S))}")))
 (parseOperation_TCC66 0
  (parseOperation_TCC51-1 nil 3850179737 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (/= const-decl "boolean" notequal nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation termination
    "iccMax2.parseOperation(iccMax2.stackLimit, iccMax2.s, iccMax2.endpos, (number_fields.+)(iccMax2.startpos, 8), (number_fields.-)(iccMax2.inMax, iccMax2.S), (number_fields.-)(iccMax2.inMin, iccMax2.S))"
    "nil")))
 (parseOperation_TCC67 0
  (parseOperation_TCC52-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.cur, 4)"
    "naturalnumbers.below(iccMax2.s`length)")))
 (parseOperation_TCC68 0
  (parseOperation_TCC53-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.cur, 6)"
    "naturalnumbers.below(iccMax2.s`length)")))
 (parseOperation_TCC69 0
  (parseOperation_TCC75-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (parseOperation subtype "iccMax2.cur" "index")))
 (parseOperation_TCC70 0
  (parseOperation_TCC70-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (Underflow const-decl "uint8" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
    "iccMax2.error(iccMax2.Underflow, iccMax2.cur, 81)"
    "iccMax2.goodresult(iccMax2.stackLimit)")))
 (parseOperation_TCC71 0
  (parseOperation_TCC84-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (minus_u32_u32 application-judgement "int64" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil (parseOperation subtype "iccMax2.cur" "index")))
 (parseOperation_TCC72 0
  (parseOperation_TCC72-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (Overflow const-decl "uint8" iccMax2 nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
    "iccMax2.error(iccMax2.Overflow, iccMax2.cur, 82)"
    "iccMax2.goodresult(iccMax2.stackLimit)")))
 (parseOperation_TCC73 0
  (parseOperation_TCC55-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (minus_u32_u32 application-judgement "int64" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.startpos, 8)"
    "naturalnumbers.upto(iccMax2.endpos)")))
 (parseOperation_TCC74 0
  (parseOperation_TCC57-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (minus_u32_u32 application-judgement "int64" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (parseOperation subtype
    "(number_fields.+)((number_fields.-)(iccMax2.inMax, iccMax2.stackin), iccMax2.stackout)"
    "{inMax: integertypes.uint64 | reals.<=(inMax, iccMax2.stackLimit)}")))
 (parseOperation_TCC75 0
  (parseOperation_TCC56-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (minus_u32_u32 application-judgement "int64" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (parseOperation subtype
    "(number_fields.+)((number_fields.-)(iccMax2.inMin, iccMax2.stackin), iccMax2.stackout)"
    "{inMin: integertypes.uint64 | reals.<=(inMin, (number_fields.-)((number_fields.+)(iccMax2.inMax, iccMax2.stackout), iccMax2.stackin))}")))
 (parseOperation_TCC76 0
  (parseOperation_TCC58-1 nil 3850179737 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (readU16 const-decl "uint16" iccMax2 nil)
    (FuncVecIn const-decl "uint32" iccMax2 nil)
    (FuncVecOut const-decl "uint32" iccMax2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation termination
    "iccMax2.parseOperation(iccMax2.stackLimit, iccMax2.s, iccMax2.endpos, (number_fields.+)(iccMax2.startpos, 8), (number_fields.+)((number_fields.-)(iccMax2.inMax, iccMax2.stackin), iccMax2.stackout), (number_fields.+)((number_fields.-)(iccMax2.inMin, iccMax2.stackin), iccMax2.stackout))"
    "nil")))
 (parseOperation_TCC77 0
  (parseOperation_TCC59-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.cur, 4)"
    "naturalnumbers.below(iccMax2.s`length)")))
 (parseOperation_TCC78 0
  (parseOperation_TCC60-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.cur, 8)"
    "naturalnumbers.below(iccMax2.s`length)")))
 (parseOperation_TCC79 0
  (parseOperation_TCC61-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.cur, 12)"
    "naturalnumbers.below(iccMax2.s`length)")))
 (parseOperation_TCC80 0
  (parseOperation_TCC62-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parseOperation subtype
    "(number_fields.+)((number_fields.+)(iccMax2.startpos, 16), number_fields.*(8, iccMax2.T))"
    "naturalnumbers.upto(iccMax2.s`length)")))
 (parseOperation_TCC81 0
  (parseOperation_TCC63-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.startpos, 16)"
    "naturalnumbers.upto((number_fields.+)((number_fields.+)(16, number_fields.*(8, iccMax2.T)), iccMax2.startpos))")))
 (parseOperation_TCC82 0
  (parseOperation_TCC64-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parseOperation subtype "iccMax2.inMax"
    "{inMax: integertypes.uint64 | reals.<=(inMax, iccMax2.stackLimit)}")))
 (parseOperation_TCC83 0
  (parseOperation_TCC68-1 nil 3850308699 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parseOperation subtype "iccMax2.inMin"
    "{inMin: integertypes.uint64 | reals.<=(inMin, iccMax2.inMax)}")))
 (parseOperation_TCC84 0
  (parseOperation_TCC65-1 nil 3850179737 ("" (termination-tcc) nil nil)
   ((upto nonempty-type-eq-decl nil naturalnumbers nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (below type-eq-decl nil naturalnumbers nil)
    (index type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (uint32 type-eq-decl nil integertypes nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parseOperation termination
    "iccMax2.parseOperation(iccMax2.stackLimit, iccMax2.s, (number_fields.+)((number_fields.+)(iccMax2.startpos, 16), number_fields.*(8, iccMax2.T)), (number_fields.+)(iccMax2.startpos, 16), iccMax2.inMax, iccMax2.inMin)"
    "nil")))
 (parseOperation_TCC85 0
  (parseOperation_TCC66-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (goodresult type-eq-decl nil iccMax2 nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2 nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2 nil)
    (result type-decl nil iccMax2 nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parseOperation subtype
    "(number_fields.+)((number_fields.+)(iccMax2.startpos, 16), number_fields.*(8, ((number_fields.+)(iccMax2.T, iccMax2.U))))"
    "naturalnumbers.upto(iccMax2.s`length)")))
 (parseOperation_TCC86 0
  (parseOperation_TCC67-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
    "(number_fields.+)(iccMax2.startpos, number_fields.*(8, ((number_fields.+)(iccMax2.T, 2))))"
    "naturalnumbers.upto((number_fields.+)((number_fields.+)((number_fields.+)(16, number_fields.*(8, iccMax2.T)), number_fields.*(8, iccMax2.U)), iccMax2.startpos))")))
 (parseOperation_TCC87 0
  (parseOperation_TCC68-1 nil 3850179737 ("" (termination-tcc) nil nil)
   ((upto nonempty-type-eq-decl nil naturalnumbers nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (below type-eq-decl nil naturalnumbers nil)
    (index type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (goodresult type-eq-decl nil iccMax2 nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2 nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2 nil)
    (result type-decl nil iccMax2 nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parseOperation termination
    "iccMax2.parseOperation(iccMax2.stackLimit, iccMax2.s, (number_fields.+)((number_fields.+)(iccMax2.startpos, 16), number_fields.*(8, ((number_fields.+)(iccMax2.T, iccMax2.U)))), (number_fields.+)(iccMax2.startpos, number_fields.*(8, ((number_fields.+)(iccMax2.T, 2)))), iccMax2.inMax, iccMax2.inMin)"
    "nil")))
 (parseOperation_TCC88 0
  (parseOperation_TCC69-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (goodresult type-eq-decl nil iccMax2 nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2 nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2 nil)
    (result type-decl nil iccMax2 nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parseOperation subtype
    "(number_fields.+)(iccMax2.startpos, number_fields.*(8, ((number_fields.+)((number_fields.+)(iccMax2.T, iccMax2.U), 2))))"
    "naturalnumbers.upto(iccMax2.endpos)")))
 (parseOperation_TCC89 0
  (parseOperation_TCC70-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (goodresult type-eq-decl nil iccMax2 nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2 nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2 nil)
    (result type-decl nil iccMax2 nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (parseOperation subtype "iccMax2.Tval" "(iccMax2.value?)")))
 (parseOperation_TCC90 0
  (parseOperation_TCC71-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (goodresult type-eq-decl nil iccMax2 nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2 nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2 nil)
    (result type-decl nil iccMax2 nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (parseOperation subtype "iccMax2.Eval" "(iccMax2.value?)")))
 (parseOperation_TCC91 0
  (parseOperation_TCC76-1 nil 3850308699 ("" (grind) nil nil)
   ((upto nonempty-type-eq-decl nil naturalnumbers nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (below type-eq-decl nil naturalnumbers nil)
    (index type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (goodresult type-eq-decl nil iccMax2 nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2 nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2 nil)
    (result type-decl nil iccMax2 nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (uint32 type-eq-decl nil integertypes nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (u64max const-decl "uint64" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parseOperation subtype
    "integertypes.u64max(iccMax2.vmax(iccMax2.Tval), iccMax2.vmax(iccMax2.Eval))"
    "{inMax: integertypes.uint64 | reals.<=(inMax, iccMax2.stackLimit)}")))
 (parseOperation_TCC92 0
  (parseOperation_TCC89-1 nil 3850308699 ("" (grind) nil nil)
   ((upto nonempty-type-eq-decl nil naturalnumbers nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (below type-eq-decl nil naturalnumbers nil)
    (index type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (goodresult type-eq-decl nil iccMax2 nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2 nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2 nil)
    (result type-decl nil iccMax2 nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (uint32 type-eq-decl nil integertypes nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (parseOperation subtype "iccMax2.vmin(iccMax2.Tval)" "uint64")))
 (parseOperation_TCC93 0
  (parseOperation_TCC93-1 nil 3850324866 ("" (grind) nil nil)
   ((upto nonempty-type-eq-decl nil naturalnumbers nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (below type-eq-decl nil naturalnumbers nil)
    (index type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (goodresult type-eq-decl nil iccMax2 nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2 nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2 nil)
    (result type-decl nil iccMax2 nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (uint32 type-eq-decl nil integertypes nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (parseOperation subtype "iccMax2.vmin(iccMax2.Eval)" "uint64")))
 (parseOperation_TCC94 0
  (parseOperation_TCC77-1 nil 3850308699 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (goodresult type-eq-decl nil iccMax2 nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2 nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2 nil)
    (result type-decl nil iccMax2 nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (u64min const-decl "uint64" integertypes nil)
    (u64max const-decl "uint64" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parseOperation subtype
    "integertypes.u64min(iccMax2.vmin(iccMax2.Tval), iccMax2.vmin(iccMax2.Eval))"
    "{inMin: integertypes.uint64 | reals.<=(inMin, integertypes.u64max(iccMax2.vmax(iccMax2.Tval), iccMax2.vmax(iccMax2.Eval)))}")))
 (parseOperation_TCC95 0
  (parseOperation_TCC73-1 nil 3850179737 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation termination
    "iccMax2.parseOperation(iccMax2.stackLimit, iccMax2.s, iccMax2.endpos, (number_fields.+)(iccMax2.startpos, number_fields.*(8, ((number_fields.+)((number_fields.+)(iccMax2.T, iccMax2.U), 2)))), integertypes.u64max(iccMax2.vmax(iccMax2.Tval), iccMax2.vmax(iccMax2.Eval)), integertypes.u64min(iccMax2.vmin(iccMax2.Tval), iccMax2.vmin(iccMax2.Eval)))"
    "nil")))
 (parseOperation_TCC96 0
  (parseOperation_TCC85-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (goodresult type-eq-decl nil iccMax2 nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2 nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2 nil)
    (result type-decl nil iccMax2 nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (parseOperation subtype "iccMax2.cur" "index")))
 (parseOperation_TCC97 0
  (parseOperation_TCC97-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (Overflow const-decl "uint8" iccMax2 nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
    "iccMax2.error(iccMax2.Overflow, iccMax2.cur, 92)"
    "iccMax2.goodresult(iccMax2.stackLimit)")))
 (parseOperation_TCC98 0
  (parseOperation_TCC92-1 nil 3850308699 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (parseOperation subtype "iccMax2.cur" "index")))
 (parseOperation_TCC99 0
  (parseOperation_TCC99-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (Overflow const-decl "uint8" iccMax2 nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
    "iccMax2.error(iccMax2.Overflow, iccMax2.cur, 93)"
    "iccMax2.goodresult(iccMax2.stackLimit)")))
 (parseOperation_TCC100 0
  (parseOperation_TCC76-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parseOperation subtype
    "(number_fields.+)((number_fields.+)(iccMax2.startpos, 8), number_fields.*(8, iccMax2.T))"
    "naturalnumbers.upto(iccMax2.s`length)")))
 (parseOperation_TCC101 0
  (parseOperation_TCC77-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2.startpos, 8)"
    "naturalnumbers.upto((number_fields.+)((number_fields.+)(8, number_fields.*(8, iccMax2.T)), iccMax2.startpos))")))
 (parseOperation_TCC102 0
  (parseOperation_TCC78-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parseOperation subtype "iccMax2.inMax"
    "{inMax: integertypes.uint64 | reals.<=(inMax, iccMax2.stackLimit)}")))
 (parseOperation_TCC103 0
  (parseOperation_TCC84-1 nil 3850308699 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parseOperation subtype "iccMax2.inMin"
    "{inMin: integertypes.uint64 | reals.<=(inMin, iccMax2.inMax)}")))
 (parseOperation_TCC104 0
  (parseOperation_TCC79-1 nil 3850179737 ("" (termination-tcc) nil nil)
   ((upto nonempty-type-eq-decl nil naturalnumbers nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (below type-eq-decl nil naturalnumbers nil)
    (index type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parseOperation termination
    "iccMax2.parseOperation(iccMax2.stackLimit, iccMax2.s, (number_fields.+)((number_fields.+)(iccMax2.startpos, 8), number_fields.*(8, iccMax2.T)), (number_fields.+)(iccMax2.startpos, 8), iccMax2.inMax, iccMax2.inMin)"
    "nil")))
 (parseOperation_TCC105 0
  (parseOperation_TCC80-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (result type-decl nil iccMax2 nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2 nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2 nil)
    (goodresult type-eq-decl nil iccMax2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parseOperation subtype
    "(number_fields.+)(iccMax2.startpos, number_fields.*(8, ((number_fields.+)(iccMax2.T, 1))))"
    "naturalnumbers.upto(iccMax2.endpos)")))
 (parseOperation_TCC106 0
  (parseOperation_TCC81-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (result type-decl nil iccMax2 nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2 nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2 nil)
    (goodresult type-eq-decl nil iccMax2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (parseOperation subtype "iccMax2.Tval" "(iccMax2.value?)")))
 (parseOperation_TCC107 0
  (parseOperation_TCC82-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (result type-decl nil iccMax2 nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2 nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2 nil)
    (goodresult type-eq-decl nil iccMax2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parseOperation subtype "iccMax2.vmax(iccMax2.Tval)"
    "{inMax: integertypes.uint64 | reals.<=(inMax, iccMax2.stackLimit)}")))
 (parseOperation_TCC108 0
  (parseOperation_TCC108-1 nil 3850324866 ("" (grind) nil nil)
   ((upto nonempty-type-eq-decl nil naturalnumbers nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (below type-eq-decl nil naturalnumbers nil)
    (index type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (result type-decl nil iccMax2 nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2 nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2 nil)
    (goodresult type-eq-decl nil iccMax2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parseOperation subtype "iccMax2.vmin(iccMax2.Tval)"
    "{inMin: integertypes.uint64 | reals.<=(inMin, iccMax2.vmax(iccMax2.Tval))}")))
 (parseOperation_TCC109 0
  (parseOperation_TCC83-1 nil 3850179737 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation termination
    "iccMax2.parseOperation(iccMax2.stackLimit, iccMax2.s, iccMax2.endpos, (number_fields.+)(iccMax2.startpos, number_fields.*(8, ((number_fields.+)(iccMax2.T, 1)))), iccMax2.vmax(iccMax2.Tval), iccMax2.vmin(iccMax2.Tval))"
    "nil")))
 (parseOperation_TCC110 0
  (parseOperation_TCC110-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (parseOperation subtype "iccMax2.cur" "index")))
 (parseOperation_TCC111 0
  (parseOperation_TCC111-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (elseTag const-decl "uint32" iccMax2 nil)
    (Underflow const-decl "uint8" iccMax2 nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
    "iccMax2.error(iccMax2.Underflow, iccMax2.cur, 94)"
    "iccMax2.goodresult(iccMax2.stackLimit)")))
 (parseOperation_TCC112 0
  (parseOperation_TCC112-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (parseOperation subtype "iccMax2.cur" "index")))
 (parseOperation_TCC113 0
  (parseOperation_TCC113-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (DefaultError const-decl "uint8" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
    "iccMax2.error(iccMax2.DefaultError, iccMax2.cur, 100)"
    "iccMax2.goodresult(iccMax2.stackLimit)")))
 (parseOperation_TCC114 0
  (parseOperation_TCC86-1 nil 3850179737
   ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (uint32 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (print64 const-decl "uint64" iccMax2 nil)
    (dataTag const-decl "uint32" iccMax2 nil)
    (channelVecOp? const-decl "bool" iccMax2 nil)
    (envTag const-decl "uint32" iccMax2 nil)
    (subElemTag? const-decl "bool" iccMax2 nil)
    (stackOpTag? const-decl "bool" iccMax2 nil)
    (matrixOpTag? const-decl "bool" iccMax2 nil)
    (seqFuncOp? const-decl "bool" iccMax2 nil)
    (FuncVecOp? const-decl "bool" iccMax2 nil)
    (ifTag const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation disjointness
    "(COND iccMax2.tag = iccMax2.dataTag -> IF reals.>=(iccMax2.inMax, iccMax2.stackLimit) THEN iccMax2.error(iccMax2.Overflow, iccMax2.cur, 11) ELSE iccMax2.parseOperation(iccMax2.stackLimit, iccMax2.s, iccMax2.endpos, (number_fields.+)(iccMax2.startpos, 8), (number_fields.+)(iccMax2.inMax, 1), (number_fields.+)(iccMax2.inMin, 1)) ENDIF, iccMax2.channelVecOp?(iccMax2.tag) -> LET res = iccMax2.ChannelVecOp(iccMax2.tag, iccMax2.stackLimit, iccMax2.cur, iccMax2.inMax, iccMax2.inMin, iccMax2.readU16(iccMax2.s, (number_fields.+)(iccMax2.cur, 4)), iccMax2.readU16(iccMax2.s, (number_fields.+)(iccMax2.cur, 6))) IN CASES iccMax2.res OF error(code, loc, occ): iccMax2.res, value(M, m): iccMax2.parseOperation(iccMax2.stackLimit, iccMax2.s, iccMax2.endpos, (number_fields.+)(iccMax2.startpos, 8), M, m) ENDCASES, iccMax2.tag = iccMax2.envTag -> IF reals.>((number_fields.+)(iccMax2.inMax, 2), iccMax2.stackLimit) THEN iccMax2.error(iccMax2.Overflow, iccMax2.cur, 31) ELSE iccMax2.parseOperation(iccMax2.stackLimit, iccMax2.s, iccMax2.endpos, (number_fields.+)(iccMax2.startpos, 8), (number_fields.+)(iccMax2.inMax, 2), (number_fields.+)(iccMax2.inMin, 2)) ENDIF, iccMax2.subElemTag?(iccMax2.tag) -> LET S = iccMax2.readU16(iccMax2.s, (number_fields.+)(iccMax2.cur, 4)), T = iccMax2.readU16(iccMax2.s, (number_fields.+)(iccMax2.cur, 6)) IN IF reals.>(iccMax2.S, iccMax2.inMin) THEN iccMax2.error(iccMax2.Underflow, iccMax2.cur, 41) ELSIF reals.>((number_fields.+)((number_fields.-)(iccMax2.inMax, iccMax2.S), iccMax2.T), iccMax2.stackLimit) THEN iccMax2.error(iccMax2.Overflow, iccMax2.cur, 42) ELSE iccMax2.parseOperation(iccMax2.stackLimit, iccMax2.s, iccMax2.endpos, (number_fields.+)(iccMax2.startpos, 8), (number_fields.+)((number_fields.-)(iccMax2.inMax, iccMax2.S), iccMax2.T), (number_fields.+)((number_fields.-)(iccMax2.inMin, iccMax2.S), iccMax2.T)) ENDIF, iccMax2.stackOpTag?(iccMax2.tag) -> LET S = iccMax2.readU16(iccMax2.s, (number_fields.+)(iccMax2.cur, 4)), T = iccMax2.readU16(iccMax2.s, (number_fields.+)(iccMax2.cur, 6)), stackout = iccMax2.stackOut(iccMax2.tag, iccMax2.S, iccMax2.T) IN IF reals.>((number_fields.+)(iccMax2.S, 1), iccMax2.inMin) THEN iccMax2.error(iccMax2.Underflow, iccMax2.cur, 51) ELSIF reals.>((number_fields.+)((number_fields.-)((number_fields.-)(iccMax2.inMax, iccMax2.S), 1), iccMax2.stackout), iccMax2.stackLimit) THEN iccMax2.error(iccMax2.Overflow, iccMax2.cur, 52) ELSIF booleans.AND((booleans.OR(iccMax2.tag = 0x666c6970, iccMax2.tag = 0x706f7020)), iccMax2.T /= 0) THEN iccMax2.error(iccMax2.nonZero, iccMax2.cur, 53) ELSE iccMax2.parseOperation(iccMax2.stackLimit, iccMax2.s, iccMax2.endpos, (number_fields.+)(iccMax2.startpos, 8), (number_fields.+)((number_fields.-)((number_fields.-)(iccMax2.inMax, iccMax2.S), 1), iccMax2.stackout), (number_fields.+)((number_fields.-)((number_fields.-)(iccMax2.inMin, iccMax2.S), 1), iccMax2.stackout)) ENDIF, iccMax2.matrixOpTag?(iccMax2.tag) -> LET S = iccMax2.readU16(iccMax2.s, (number_fields.+)(iccMax2.cur, 4)), T = iccMax2.readU16(iccMax2.s, (number_fields.+)(iccMax2.cur, 6)), stackin = iccMax2.matrixIn(iccMax2.tag, iccMax2.S, iccMax2.T), stackout = iccMax2.matrixOut(iccMax2.tag, iccMax2.S, iccMax2.T) IN IF reals.>(iccMax2.stackin, iccMax2.inMin) THEN iccMax2.error(iccMax2.Underflow, iccMax2.cur, 61) ELSE iccMax2.parseOperation(iccMax2.stackLimit, iccMax2.s, iccMax2.endpos, (number_fields.+)(iccMax2.startpos, 8), (number_fields.+)((number_fields.-)(iccMax2.inMax, iccMax2.stackin), iccMax2.stackout), (number_fields.+)((number_fields.-)(iccMax2.inMin, iccMax2.stackin), iccMax2.stackout)) ENDIF, iccMax2.seqFuncOp?(iccMax2.tag) -> LET S = iccMax2.readU16(iccMax2.s, (number_fields.+)(iccMax2.cur, 4)), T = iccMax2.readU16(iccMax2.s, (number_fields.+)(iccMax2.cur, 6)) IN IF iccMax2.T /= 0 THEN iccMax2.error(iccMax2.nonZero, iccMax2.cur, 71) ELSIF reals.>((number_fields.+)(iccMax2.S, 1), iccMax2.inMin) THEN iccMax2.error(iccMax2.Underflow, iccMax2.cur, 72) ELSE iccMax2.parseOperation(iccMax2.stackLimit, iccMax2.s, iccMax2.endpos, (number_fields.+)(iccMax2.startpos, 8), (number_fields.-)(iccMax2.inMax, iccMax2.S), (number_fields.-)(iccMax2.inMin, iccMax2.S)) ENDIF, iccMax2.FuncVecOp?(iccMax2.tag) -> LET S = iccMax2.readU16(iccMax2.s, (number_fields.+)(iccMax2.cur, 4)), T = iccMax2.readU16(iccMax2.s, (number_fields.+)(iccMax2.cur, 6)), stackin = iccMax2.FuncVecIn(iccMax2.tag, iccMax2.S), stackout = iccMax2.FuncVecOut(iccMax2.tag, iccMax2.S) IN IF reals.>(iccMax2.stackin, iccMax2.inMin) THEN iccMax2.error(iccMax2.Underflow, iccMax2.cur, 81) ELSIF reals.>=((number_fields.+)((number_fields.-)(iccMax2.inMax, iccMax2.stackin), iccMax2.stackout), iccMax2.stackLimit) THEN iccMax2.error(iccMax2.Overflow, iccMax2.cur, 82) ELSE iccMax2.parseOperation(iccMax2.stackLimit, iccMax2.s, iccMax2.endpos, (number_fields.+)(iccMax2.startpos, 8), (number_fields.+)((number_fields.-)(iccMax2.inMax, iccMax2.stackin), iccMax2.stackout), (number_fields.+)((number_fields.-)(iccMax2.inMin, iccMax2.stackin), iccMax2.stackout)) ENDIF, iccMax2.tag = iccMax2.ifTag -> LET T = iccMax2.readU32(iccMax2.s, (number_fields.+)(iccMax2.cur, 4)) IN IF booleans.AND(reals.<=((number_fields.+)(iccMax2.startpos, 16), iccMax2.endpos), iccMax2.readU32(iccMax2.s, (number_fields.+)(iccMax2.cur, 8)) = iccMax2.elseTag) THEN (LET U = iccMax2.readU32(iccMax2.s, (number_fields.+)(iccMax2.cur, 12)) IN IF reals.<=((number_fields.+)((number_fields.+)(iccMax2.startpos, 16), number_fields.*(8, iccMax2.T)), iccMax2.endpos) THEN (LET Tval = iccMax2.parseOperation(iccMax2.stackLimit, iccMax2.s, (number_fields.+)((number_fields.+)(iccMax2.startpos, 16), number_fields.*(8, iccMax2.T)), (number_fields.+)(iccMax2.startpos, 16), iccMax2.inMax, iccMax2.inMin) IN IF iccMax2.error?(iccMax2.Tval) THEN iccMax2.Tval ELSIF reals.<=((number_fields.+)((number_fields.+)(iccMax2.startpos, 16), number_fields.*(8, ((number_fields.+)(iccMax2.T, iccMax2.U)))), iccMax2.endpos) THEN (LET Eval = iccMax2.parseOperation(iccMax2.stackLimit, iccMax2.s, (number_fields.+)((number_fields.+)(iccMax2.startpos, 16), number_fields.*(8, ((number_fields.+)(iccMax2.T, iccMax2.U)))), (number_fields.+)(iccMax2.startpos, number_fields.*(8, ((number_fields.+)(iccMax2.T, 2)))), iccMax2.inMax, iccMax2.inMin) IN IF iccMax2.error?(iccMax2.Eval) THEN iccMax2.Eval ELSE iccMax2.parseOperation(iccMax2.stackLimit, iccMax2.s, iccMax2.endpos, (number_fields.+)(iccMax2.startpos, number_fields.*(8, ((number_fields.+)((number_fields.+)(iccMax2.T, iccMax2.U), 2)))), integertypes.u64max(iccMax2.vmax(iccMax2.Tval), iccMax2.vmax(iccMax2.Eval)), integertypes.u64min(iccMax2.vmin(iccMax2.Tval), iccMax2.vmin(iccMax2.Eval))) ENDIF) ELSE iccMax2.error(iccMax2.Overflow, iccMax2.cur, 92) ENDIF) ELSE iccMax2.error(iccMax2.Overflow, iccMax2.cur, 93) ENDIF) ELSIF reals.<=((number_fields.+)((number_fields.+)(iccMax2.startpos, 8), number_fields.*(8, iccMax2.T)), iccMax2.endpos) THEN (LET Tval = iccMax2.parseOperation(iccMax2.stackLimit, iccMax2.s, (number_fields.+)((number_fields.+)(iccMax2.startpos, 8), number_fields.*(8, iccMax2.T)), (number_fields.+)(iccMax2.startpos, 8), iccMax2.inMax, iccMax2.inMin) IN IF iccMax2.error?(iccMax2.Tval) THEN iccMax2.Tval ELSE iccMax2.parseOperation(iccMax2.stackLimit, iccMax2.s, iccMax2.endpos, (number_fields.+)(iccMax2.startpos, number_fields.*(8, ((number_fields.+)(iccMax2.T, 1)))), iccMax2.vmax(iccMax2.Tval), iccMax2.vmin(iccMax2.Tval)) ENDIF) ELSE iccMax2.error(iccMax2.Underflow, iccMax2.cur, 94) ENDIF, ELSE -> iccMax2.error(iccMax2.DefaultError, iccMax2.cur, 100) ENDCOND)"
    "nil")))
 (parseOperation_TCC115 0
  (parseOperation_TCC87-1 nil 3850179737
   ("" (grind)
    (("" (typepred "s!1`length") (("" (grind) nil nil)) nil)) nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (parseOperation subtype "iccMax2.startpos" "uint32")))
 (parsefunc_TCC1 0
  (parsefunc_TCC1-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (parsefunc subtype "iccMax2.startpos" "index")))
 (parsefunc_TCC2 0
  (parsefunc_TCC2-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((UnexpectedEOF const-decl "uint8" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parsefunc subtype
    "iccMax2.error(iccMax2.UnexpectedEOF, iccMax2.startpos, 0)"
    "iccMax2.goodresult(iccMax2.stackLimit)")))
 (parsefunc_TCC3 0
  (parsefunc_TCC2-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parsefunc subtype "iccMax2.cur"
    "naturalnumbers.below(iccMax2.s`length)")))
 (parsefunc_TCC4 0
  (parsefunc_TCC3-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (uint32 type-eq-decl nil integertypes nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parsefunc subtype "(number_fields.+)(iccMax2.cur, 4)"
    "naturalnumbers.below(iccMax2.s`length)")))
 (parsefunc_TCC5 0
  (parsefunc_TCC4-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (uint32 type-eq-decl nil integertypes nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parsefunc subtype "(number_fields.+)(iccMax2.cur, 8)"
    "naturalnumbers.below(iccMax2.s`length)")))
 (parsefunc_TCC6 0
  (parsefunc_TCC5-1 nil 3850179737 ("" (subtype-tcc) nil nil) nil nil
   (parsefunc subtype
    "(number_fields.+)((number_fields.+)(iccMax2.startpos, 12), (number_fields.*(8, iccMax2.N)))"
    "uint32")))
 (parsefunc_TCC7 0
  (parsefunc_TCC6-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (uint32 type-eq-decl nil integertypes nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parsefunc subtype
    "(number_fields.+)((number_fields.+)(iccMax2.startpos, 12), number_fields.*(8, iccMax2.N))"
    "naturalnumbers.upto(iccMax2.s`length)")))
 (parsefunc_TCC8 0
  (parsefunc_TCC7-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (readU32 const-decl "uint32" iccMax2 nil))
   nil
   (parsefunc subtype "(number_fields.+)(iccMax2.startpos, 12)"
    "naturalnumbers.upto((number_fields.+)((number_fields.+)(12, number_fields.*(8, iccMax2.N)), iccMax2.startpos))")))
 (parsefunc_TCC9 0
  (parsefunc_TCC8-1 nil 3850308699 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (readU32 const-decl "uint32" iccMax2 nil))
   nil
   (parsefunc subtype "0"
    "{inMax: integertypes.uint64 | reals.<=(inMax, iccMax2.stackLimit)}")))
 (parsefunc_TCC10 0
  (parsefunc_TCC8-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (uint32 type-eq-decl nil integertypes nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (parsefunc subtype "iccMax2.startpos" "index")))
 (parsefunc_TCC11 0
  (parsefunc_TCC11-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (UnexpectedEOF const-decl "uint8" iccMax2 nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (readU32 const-decl "uint32" iccMax2 nil))
   nil
   (parsefunc subtype
    "iccMax2.error(iccMax2.UnexpectedEOF, iccMax2.startpos, 0)"
    "iccMax2.goodresult(iccMax2.stackLimit)")))
 (parsefunc_TCC12 0
  (parsefunc_TCC9-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (uint32 type-eq-decl nil integertypes nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (parsefunc subtype "iccMax2.startpos" "index")))
 (parsefunc_TCC13 0
  (parsefunc_TCC13-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nonZero const-decl "uint8" iccMax2 nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (readU32 const-decl "uint32" iccMax2 nil))
   nil
   (parsefunc subtype
    "iccMax2.error(iccMax2.nonZero, iccMax2.startpos, 0)"
    "iccMax2.goodresult(iccMax2.stackLimit)")))
 (parsefunc_TCC14 0
  (parsefunc_TCC10-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (uint32 type-eq-decl nil integertypes nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (readU32 const-decl "uint32" iccMax2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (parsefunc subtype "iccMax2.startpos" "index")))
 (parsefunc_TCC15 0
  (parsefunc_TCC15-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (badTag const-decl "uint8" iccMax2 nil)
    (print32 const-decl "uint32" iccMax2 nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (readU32 const-decl "uint32" iccMax2 nil))
   nil
   (parsefunc subtype
    "iccMax2.error(iccMax2.badTag, iccMax2.startpos, 0)"
    "iccMax2.goodresult(iccMax2.stackLimit)")))
 (iccteststring1_TCC1 0
  (iccteststring1_TCC1-1 nil 3850179737 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (iccteststring1 subtype
    "\"66756e630000000000000026696e20200000000264617461400cc00067616d61000200007473617600000002646174610000000064617461000000006461746100000000657120200002000073756d2000010000646174614040000065712020000000006966202000000007646174613f800000646174614000000073756d2000020000646174613f80000074707574000700007069202000000000706f7020000000007467657400000002646174613f13a08e646174613e3e030d646174613e40bec76d756c200002000073756d20000100007467657400000002646174613e983d5c646174613f209ad1646174613d9a307f6d756c200002000073756d20000100007467657400000002646174613cdd7459646174613d90c50f646174613f7dc8a16d756c200002000073756d20000100006f75742000000002\""
    "bstring")))
 (iccteststring1_TCC2 0
  (iccteststring1_TCC2-1 nil 3850179737 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (iccteststring1 subtype
    "bytestrings.mk_bytestring(\"66756e630000000000000026696e20200000000264617461400cc00067616d61000200007473617600000002646174610000000064617461000000006461746100000000657120200002000073756d2000010000646174614040000065712020000000006966202000000007646174613f800000646174614000000073756d2000020000646174613f80000074707574000700007069202000000000706f7020000000007467657400000002646174613f13a08e646174613e3e030d646174613e40bec76d756c200002000073756d20000100007467657400000002646174613e983d5c646174613f209ad1646174613d9a307f6d756c200002000073756d20000100007467657400000002646174613cdd7459646174613d90c50f646174613f7dc8a16d756c200002000073756d20000100006f75742000000002\")"
    "hexstring")))
 (iccteststring2_TCC1 0
  (iccteststring2_TCC1-1 nil 3850179737 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (iccteststring2 subtype
    "\"66756e630000000000000006696e202000000002646174613f800000646174613f800000646174613f80000061646420000200006f75742000000002\""
    "bstring")))
 (iccteststring2_TCC2 0
  (iccteststring2_TCC2-1 nil 3850179737 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (iccteststring2 subtype
    "bytestrings.mk_bytestring(\"66756e630000000000000006696e202000000002646174613f800000646174613f800000646174613f80000061646420000200006f75742000000002\")"
    "hexstring")))
 (iccteststring3_TCC1 0
  (iccteststring3_TCC1-1 nil 3850179737 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (iccteststring3 subtype
    "\"66756e630000000000000026696e2020000000027473617600000002646174610000000064617461000000006461746100000000657120200002000073756d2000010000646174614040000065712020000000006966202000000007646174613f800000646174614000000073756d2000020000646174613f80000074707574000700007069202000000000706f7020000000007467657400000002646174614002a96964617461bf10a47f64617461beb080736d756c200002000073756d2000010000696e20200000000264617461bf78201d646174613ff01fc9646174613d2a3ad26d756c200002000073756d2000010000696e202000000002646174613c5c337264617461bdf266ba646174613f81f1176d756c200002000073756d2000010000646174613ee8cf5967616d61000200006f75742000000002\""
    "bstring")))
 (iccteststring3_TCC2 0
  (iccteststring3_TCC2-1 nil 3850179737 ("" (subtype-tcc) nil nil) nil
   nil
   (iccteststring3 subtype
    "bytestrings.mk_bytestring(\"66756e630000000000000026696e2020000000027473617600000002646174610000000064617461000000006461746100000000657120200002000073756d2000010000646174614040000065712020000000006966202000000007646174613f800000646174614000000073756d2000020000646174613f80000074707574000700007069202000000000706f7020000000007467657400000002646174614002a96964617461bf10a47f64617461beb080736d756c200002000073756d2000010000696e20200000000264617461bf78201d646174613ff01fc9646174613d2a3ad26d756c200002000073756d2000010000696e202000000002646174613c5c337264617461bdf266ba646174613f81f1176d756c200002000073756d2000010000646174613ee8cf5967616d61000200006f75742000000002\")"
    "hexstring")))
 (test1_TCC1 0
  (test1_TCC1-1 nil 3850179737 ("" (subtype-tcc) nil nil) nil nil
   (test1 subtype "iccMax2.iccteststring1`length"
    "naturalnumbers.upto(modulo_arithmetic.ndiv(iccMax2.iccteststring1`length, 8))")))
 (test1_TCC2 0
  (test1_TCC2-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "upto(n)" modulo_arithmetic nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (get const-decl "char" gen_strings nil)
    (mk_bytestring const-decl "bytestring" bytestrings nil)
    (max32 const-decl "uint32" integertypes nil)
    (u32div const-decl "uint32" integertypes nil)
    (u32times const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u8lshift const-decl "uint8" integertypes nil)
    (hexvalue const-decl "byte" hex nil)
    (max8 const-decl "uint8" integertypes nil)
    (hex2byte const-decl "byte" hex nil)
    (hex2bytestring const-decl "bytestring" hex nil)
    (iccteststring1 const-decl "bytestring" iccMax2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (test1 subtype "0"
    "naturalnumbers.upto(iccMax2.iccteststring1`length)")))
 (test2_TCC1 0
  (test2_TCC1-1 nil 3850179737 ("" (subtype-tcc) nil nil) nil nil
   (test2 subtype "iccMax2.iccteststring2`length"
    "naturalnumbers.upto(modulo_arithmetic.ndiv(iccMax2.iccteststring2`length, 8))")))
 (test2_TCC2 0
  (test2_TCC2-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "upto(n)" modulo_arithmetic nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (get const-decl "char" gen_strings nil)
    (mk_bytestring const-decl "bytestring" bytestrings nil)
    (max32 const-decl "uint32" integertypes nil)
    (u32div const-decl "uint32" integertypes nil)
    (u32times const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u8lshift const-decl "uint8" integertypes nil)
    (hexvalue const-decl "byte" hex nil)
    (max8 const-decl "uint8" integertypes nil)
    (hex2byte const-decl "byte" hex nil)
    (hex2bytestring const-decl "bytestring" hex nil)
    (iccteststring2 const-decl "bytestring" iccMax2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (test2 subtype "0"
    "naturalnumbers.upto(iccMax2.iccteststring2`length)")))
 (test3_TCC1 0
  (test3_TCC1-1 nil 3850179737 ("" (subtype-tcc) nil nil) nil nil
   (test3 subtype "iccMax2.iccteststring3`length"
    "naturalnumbers.upto(modulo_arithmetic.ndiv(iccMax2.iccteststring3`length, 8))")))
 (test3_TCC2 0
  (test3_TCC2-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "upto(n)" modulo_arithmetic nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (get const-decl "char" gen_strings nil)
    (mk_bytestring const-decl "bytestring" bytestrings nil)
    (max32 const-decl "uint32" integertypes nil)
    (u32div const-decl "uint32" integertypes nil)
    (u32times const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u8lshift const-decl "uint8" integertypes nil)
    (hexvalue const-decl "byte" hex nil)
    (max8 const-decl "uint8" integertypes nil)
    (hex2byte const-decl "byte" hex nil)
    (hex2bytestring const-decl "bytestring" hex nil)
    (iccteststring3 const-decl "bytestring" iccMax2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (test3 subtype "0"
    "naturalnumbers.upto(iccMax2.iccteststring3`length)")))
 (test4_TCC1 0
  (test4_TCC1-1 nil 3850179737 ("" (subtype-tcc) nil nil) nil nil
   (test4 subtype "iccMax2.iccteststring4`length"
    "naturalnumbers.upto(modulo_arithmetic.ndiv(iccMax2.iccteststring4`length, 8))")))
 (test4_TCC2 0
  (test4_TCC2-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "upto(n)" modulo_arithmetic nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (get const-decl "char" gen_strings nil)
    (mk_bytestring const-decl "bytestring" bytestrings nil)
    (max32 const-decl "uint32" integertypes nil)
    (u32div const-decl "uint32" integertypes nil)
    (u32times const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u8lshift const-decl "uint8" integertypes nil)
    (hexvalue const-decl "byte" hex nil)
    (max8 const-decl "uint8" integertypes nil)
    (hex2byte const-decl "byte" hex nil)
    (hex2bytestring const-decl "bytestring" hex nil)
    (iccteststring4 const-decl "bytestring" iccMax2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (test4 subtype "0"
    "naturalnumbers.upto(iccMax2.iccteststring4`length)"))))

