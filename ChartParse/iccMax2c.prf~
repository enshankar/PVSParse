(iccMax2c
 (ChannelVecOp_TCC1 0
  (ChannelVecOp_TCC2-1 nil 3850179737 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (ChannelVecOp subtype
                 "(number_fields.+)((number_fields.+)(iccMax2c.inMax, iccMax2c.T), 1)"
                 "uint64")))
 (ChannelVecOp_TCC2 0
  (ChannelVecOp_TCC1-1 nil 3850179737 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (ChannelVecOp subtype
                 "(number_fields.+)((number_fields.+)(iccMax2c.inMin, iccMax2c.T), 1)"
                 "uint64")))
 (ChannelVecOp_TCC3 0
  (ChannelVecOp_TCC3-1 nil 3850322914 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (ChannelVecOp subtype
                 "iccMax2c.value((number_fields.+)((number_fields.+)(iccMax2c.inMax, iccMax2c.T), 1), (number_fields.+)((number_fields.+)(iccMax2c.inMin, iccMax2c.T), 1))"
                 "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (ChannelVecOp_TCC4 0
  (ChannelVecOp_TCC4-1 nil 3850322914 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Overflow const-decl "uint8" iccMax2c nil))
   nil
   (ChannelVecOp subtype
                 "iccMax2c.error(iccMax2c.Overflow, iccMax2c.cur, 21)"
                 "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (ChannelVecOp_TCC5 0
  (ChannelVecOp_TCC5-1 nil 3850322914 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (Underflow const-decl "uint8" iccMax2c nil))
   nil
   (ChannelVecOp subtype
                 "iccMax2c.error(iccMax2c.Underflow, iccMax2c.cur, 22)"
                 "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (ChannelVecOp_TCC6 0
  (ChannelVecOp_TCC4-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (ChannelVecOp subtype
                 "(number_fields.-)((number_fields.-)(iccMax2c.inMax, iccMax2c.T), 1)"
                 "uint64")))
 (ChannelVecOp_TCC7 0
  (ChannelVecOp_TCC3-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (ChannelVecOp subtype
                 "(number_fields.-)((number_fields.-)(iccMax2c.inMin, iccMax2c.T), 1)"
                 "uint64")))
 (ChannelVecOp_TCC8 0
  (ChannelVecOp_TCC8-1 nil 3850322914 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (ChannelVecOp subtype
                 "iccMax2c.value((number_fields.-)((number_fields.-)(iccMax2c.inMax, iccMax2c.T), 1), (number_fields.-)((number_fields.-)(iccMax2c.inMin, iccMax2c.T), 1))"
                 "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (ChannelVecOp_TCC9 0
  (ChannelVecOp_TCC9-1 nil 3850322914 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (Underflow const-decl "uint8" iccMax2c nil))
   nil
   (ChannelVecOp subtype
                 "iccMax2c.error(iccMax2c.Underflow, iccMax2c.cur, 23)"
                 "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (ChannelVecOp_TCC10 0
  (ChannelVecOp_TCC5-1 nil 3850179737 ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (uint64 type-eq-decl nil integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (ChannelVecOp disjointness
                 "(COND (booleans.OR(iccMax2c.tag = 0x696e2020, iccMax2c.tag = 0x74676574)) -> IF reals.<((number_fields.+)((number_fields.+)(iccMax2c.inMax, iccMax2c.T), 1), iccMax2c.stackLimit) THEN iccMax2c.value((number_fields.+)((number_fields.+)(iccMax2c.inMax, iccMax2c.T), 1), (number_fields.+)((number_fields.+)(iccMax2c.inMin, iccMax2c.T), 1)) ELSE iccMax2c.error(iccMax2c.Overflow, iccMax2c.cur, 21) ENDIF, (booleans.OR(iccMax2c.tag = 0x6f757420, iccMax2c.tag = 0x74707574)) -> IF reals.<(iccMax2c.inMin, (number_fields.+)(iccMax2c.T, 1)) THEN iccMax2c.error(iccMax2c.Underflow, iccMax2c.cur, 22) ELSE iccMax2c.value((number_fields.-)((number_fields.-)(iccMax2c.inMax, iccMax2c.T), 1), (number_fields.-)((number_fields.-)(iccMax2c.inMin, iccMax2c.T), 1)) ENDIF, iccMax2c.tag = 0x74736176 -> IF reals.<(iccMax2c.inMin, (number_fields.+)(iccMax2c.T, 1)) THEN iccMax2c.error(iccMax2c.Underflow, iccMax2c.cur, 23) ELSE iccMax2c.value(iccMax2c.inMax, iccMax2c.inMin) ENDIF ENDCOND)"
                 "nil")))
 (ChannelVecOp_TCC11 0
  (ChannelVecOp_TCC6-1 nil 3850179737 ("" (cond-coverage-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (uint64 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (ChannelVecOp coverage
                 "(COND (booleans.OR(iccMax2c.tag = 0x696e2020, iccMax2c.tag = 0x74676574)) -> IF reals.<((number_fields.+)((number_fields.+)(iccMax2c.inMax, iccMax2c.T), 1), iccMax2c.stackLimit) THEN iccMax2c.value((number_fields.+)((number_fields.+)(iccMax2c.inMax, iccMax2c.T), 1), (number_fields.+)((number_fields.+)(iccMax2c.inMin, iccMax2c.T), 1)) ELSE iccMax2c.error(iccMax2c.Overflow, iccMax2c.cur, 21) ENDIF, (booleans.OR(iccMax2c.tag = 0x6f757420, iccMax2c.tag = 0x74707574)) -> IF reals.<(iccMax2c.inMin, (number_fields.+)(iccMax2c.T, 1)) THEN iccMax2c.error(iccMax2c.Underflow, iccMax2c.cur, 22) ELSE iccMax2c.value((number_fields.-)((number_fields.-)(iccMax2c.inMax, iccMax2c.T), 1), (number_fields.-)((number_fields.-)(iccMax2c.inMin, iccMax2c.T), 1)) ENDIF, iccMax2c.tag = 0x74736176 -> IF reals.<(iccMax2c.inMin, (number_fields.+)(iccMax2c.T, 1)) THEN iccMax2c.error(iccMax2c.Underflow, iccMax2c.cur, 23) ELSE iccMax2c.value(iccMax2c.inMax, iccMax2c.inMin) ENDIF ENDCOND)"
                 "nil")))
 (stackOut_TCC1 0
  (stackOut_TCC1-1 nil 3850179737
   ("" (grind) (("" (yices2 :nonlinear? t) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (uint16 type-eq-decl nil integertypes nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (plus_i32_u32 application-judgement "int64" integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (times_u16_u16 application-judgement "uint32" integertypes nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil
   (stackOut subtype
             "number_fields.*(((number_fields.+)(iccMax2c.T, 1)), ((number_fields.+)(iccMax2c.S, 1)))"
             "uint64")))
 (stackOut_TCC2 0
  (stackOut_TCC2-1 nil 3850179737 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (stackOut subtype "(number_fields.+)(iccMax2c.S, 1)" "uint64")))
 (stackOut_TCC3 0
  (stackOut_TCC3-1 nil 3850179737 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (stackOut subtype "(number_fields.+)(iccMax2c.S, 1)" "uint64")))
 (stackOut_TCC4 0
  (stackOut_TCC4-1 nil 3850179737 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (uint16 type-eq-decl nil integertypes nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (stackOut subtype
             "(number_fields.+)((number_fields.+)((number_fields.+)(iccMax2c.S, 1), iccMax2c.T), 1)"
             "uint64")))
 (stackOut_TCC5 0
  (stackOut_TCC5-1 nil 3850179737 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (stackOut subtype "(number_fields.+)(iccMax2c.S, 1)" "uint64")))
 (stackOut_TCC6 0
  (stackOut_TCC6-1 nil 3850179737 ("" (cond-coverage-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (stackOut coverage
             "(COND iccMax2c.tag = 0x636f7079 -> number_fields.*(((number_fields.+)(iccMax2c.T, 1)), ((number_fields.+)(iccMax2c.S, 1))), iccMax2c.tag = 0x726f746c -> (number_fields.+)(iccMax2c.S, 1), iccMax2c.tag = 0x726f7472 -> (number_fields.+)(iccMax2c.S, 1), iccMax2c.tag = 0x706f7364 -> (number_fields.+)((number_fields.+)((number_fields.+)(iccMax2c.S, 1), iccMax2c.T), 1), iccMax2c.tag = 0x666c6970 -> (number_fields.+)(iccMax2c.S, 1), iccMax2c.tag = 0x706f7020 -> 0 ENDCOND)"
             "nil")))
 (matrixIn_TCC1 0
  (matrixIn_TCC1-1 nil 3850179737
   ("" (grind) (("" (yices2 :nonlinear? t) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (times_u16_u16 application-judgement "uint32" integertypes nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil
   (matrixIn subtype
             "(number_fields.+)((number_fields.+)(number_fields.*(((number_fields.+)(iccMax2c.S, 1)), ((number_fields.+)(iccMax2c.T, 1))), iccMax2c.S), 1)"
             "uint64")))
 (matrixIn_TCC2 0
  (matrixIn_TCC2-1 nil 3850179737
   ("" (grind) (("" (yices2 :nonlinear? t) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (plus_i32_u32 application-judgement "int64" integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (times_u16_u16 application-judgement "uint32" integertypes nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil
   (matrixIn subtype
             "number_fields.*(((number_fields.+)(iccMax2c.S, 1)), ((number_fields.+)(iccMax2c.T, 1)))"
             "uint64")))
 (matrixOut_TCC1 0
  (matrixOut_TCC1-1 nil 3850179737 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (matrixOut subtype "(number_fields.+)(iccMax2c.T, 1)" "uint64")))
 (FuncVecIn_TCC1 0
  (FuncVecIn_TCC1-1 nil 3850179737 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (FuncVecIn subtype "(number_fields.+)(iccMax2c.S, 2)" "uint32")))
 (FuncVecIn_TCC2 0
  (FuncVecIn_TCC2-1 nil 3850179737 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (FuncVecIn subtype
              "number_fields.*(3, ((number_fields.+)(iccMax2c.S, 1)))"
              "uint32")))
 (FuncVecIn_TCC3 0
  (FuncVecIn_TCC3-1 nil 3850179737 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (FuncVecIn subtype "(number_fields.+)(iccMax2c.S, 1)" "uint32")))
 (FuncVecIn_TCC4 0
  (FuncVecIn_TCC4-1 nil 3850179737 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (FuncVecIn subtype
              "number_fields.*(2, ((number_fields.+)(iccMax2c.S, 1)))"
              "uint32")))
 (FuncVecOut_TCC1 0
  (FuncVecOut_TCC1-1 nil 3850179737 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (FuncVecOut subtype "(number_fields.+)(iccMax2c.S, 1)" "uint32")))
 (FuncVecOut_TCC2 0
  (FuncVecOut_TCC2-1 nil 3850179737 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (FuncVecOut subtype "((number_fields.+)(iccMax2c.S, 1))" "uint32")))
 (parseOperation_TCC1 0
  (parseOperation_TCC1-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "(number_fields.-)(iccMax2c.w`endpos, iccMax2c.w`startpos)"
                   "naturalnumber")))
 (parseOperation_TCC2 0
  (parseOperation_TCC3-1 nil 3853112539 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (parseOperation subtype "startpos(iccMax2c.w)" "uint32")))
 (parseOperation_TCC3 0
  (parseOperation_TCC4-1 nil 3853112539 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "iccMax2c.value(iccMax2c.print64(\"inMax = \", iccMax2c.inMax), iccMax2c.print64(\"inMin = \", iccMax2c.inMin))"
                   "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (parseOperation_TCC4 0
  (parseOperation_TCC8-1 nil 3850179737
   ("" (grind)
    (("" (typepred "s!1`length") (("" (grind) nil nil)) nil)) nil)
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (UnexpectedEOF const-decl "uint8" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "iccMax2c.error(iccMax2c.UnexpectedEOF, iccMax2c.s`length, 0)"
                   "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (parseOperation_TCC5 0
  (parseOperation_TCC2-1 nil 3850179737
   ("" (skeep*)
    (("" (typepred "endpos(w)")
      (("" (typepred "s`length") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (window type-eq-decl nil iccMax2c nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (below type-eq-decl nil naturalnumbers nil)
    (index type-eq-decl nil integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (parseOperation subtype "iccMax2c.startpos" "index")))
 (parseOperation_TCC6 0
  (parseOperation_TCC4-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (UnexpectedEOF const-decl "uint8" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "iccMax2c.error(iccMax2c.UnexpectedEOF, iccMax2c.startpos, 0)"
                   "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (parseOperation_TCC7 0
  (parseOperation_TCC3-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype "iccMax2c.cur"
                   "naturalnumbers.below(iccMax2c.s`length)")))
 (parseOperation_TCC8 0
  (parseOperation_TCC4-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(startpos(iccMax2c.w), 8)"
                   "naturalnumbers.upto(iccMax2c.w`endpos)")))
 (parseOperation_TCC9 0
  (parseOperation_TCC9-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (parseOperation subtype "iccMax2c.cur" "index")))
 (parseOperation_TCC10 0
  (parseOperation_TCC7-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (Overflow const-decl "uint8" iccMax2c nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "iccMax2c.error(iccMax2c.Overflow, iccMax2c.cur, 11)"
                   "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (parseOperation_TCC11 0
  (parseOperation_TCC6-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2c.inMax, 1)"
                   "{inMax: integertypes.uint64 | reals.<=(inMax, iccMax2c.stackLimit)}")))
 (parseOperation_TCC12 0
  (parseOperation_TCC5-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2c.inMin, 1)"
                   "{inMin: integertypes.uint64 | reals.<=(inMin, (number_fields.+)(1, iccMax2c.inMax))}")))
 (parseOperation_TCC13 0
  (parseOperation_TCC7-1 nil 3850179737 ("" (termination-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   nil
   (parseOperation termination
                   "iccMax2c.parseOperation(iccMax2c.stackLimit, iccMax2c.s, iccMax2c.subelemsig, (number_fields.+)(iccMax2c.inMax, 1), (number_fields.+)(iccMax2c.inMin, 1), iccMax2c.newWindow)"
                   "nil")))
 (parseOperation_TCC14 0
  (parseOperation_TCC22-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (parseOperation subtype "iccMax2c.cur" "index")))
 (parseOperation_TCC15 0
  (parseOperation_TCC15-1 nil 3853112539 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "iccMax2c.inMax"
                   "{inMax: integertypes.uint64 | reals.<=(inMax, iccMax2c.stackLimit)}")))
 (parseOperation_TCC16 0
  (parseOperation_TCC72-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "iccMax2c.inMin"
                   "{inMin: integertypes.uint64 | reals.<=(inMin, iccMax2c.inMax)}")))
 (parseOperation_TCC17 0
  (parseOperation_TCC11-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2c.cur, 4)"
                   "naturalnumbers.below(iccMax2c.s`length)")))
 (parseOperation_TCC18 0
  (parseOperation_TCC12-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2c.cur, 6)"
                   "naturalnumbers.below(iccMax2c.s`length)")))
 (parseOperation_TCC19 0
  (parseOperation_TCC14-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (goodresult type-eq-decl nil iccMax2c nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2c nil)
    (vmin adt-accessor-decl "[(value?) -> uint64]" iccMax2c nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2c nil)
    (result type-decl nil iccMax2c nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "iccMax2c.M"
                   "{inMax: integertypes.uint64 | reals.<=(inMax, iccMax2c.stackLimit)}")))
 (parseOperation_TCC20 0
  (parseOperation_TCC17-1 nil 3850308699 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (goodresult type-eq-decl nil iccMax2c nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2c nil)
    (vmin adt-accessor-decl "[(value?) -> uint64]" iccMax2c nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2c nil)
    (result type-decl nil iccMax2c nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "iccMax2c.m"
                   "{inMin: integertypes.uint64 | reals.<=(inMin, iccMax2c.M)}")))
 (parseOperation_TCC21 0
  (parseOperation_TCC15-1 nil 3850179737 ("" (termination-tcc) nil nil)
   ((uint32 type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (goodresult type-eq-decl nil iccMax2c nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2c nil)
    (vmin adt-accessor-decl "[(value?) -> uint64]" iccMax2c nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2c nil)
    (result type-decl nil iccMax2c nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (Overflow const-decl "uint8" iccMax2c nil)
    (Underflow const-decl "uint8" iccMax2c nil)
    (ChannelVecOp const-decl "goodresult(stackLimit)" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (parseOperation termination
                   "iccMax2c.parseOperation(iccMax2c.stackLimit, iccMax2c.s, iccMax2c.subelemsig, iccMax2c.M, iccMax2c.m, iccMax2c.newWindow)"
                   "nil")))
 (parseOperation_TCC22 0
  (parseOperation_TCC23-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (parseOperation subtype "iccMax2c.cur" "index")))
 (parseOperation_TCC23 0
  (parseOperation_TCC22-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (Overflow const-decl "uint8" iccMax2c nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "iccMax2c.error(iccMax2c.Overflow, iccMax2c.cur, 31)"
                   "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (parseOperation_TCC24 0
  (parseOperation_TCC18-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2c.inMax, 2)"
                   "{inMax: integertypes.uint64 | reals.<=(inMax, iccMax2c.stackLimit)}")))
 (parseOperation_TCC25 0
  (parseOperation_TCC17-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2c.inMin, 2)"
                   "{inMin: integertypes.uint64 | reals.<=(inMin, (number_fields.+)(2, iccMax2c.inMax))}")))
 (parseOperation_TCC26 0
  (parseOperation_TCC19-1 nil 3850179737 ("" (termination-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   nil
   (parseOperation termination
                   "iccMax2c.parseOperation(iccMax2c.stackLimit, iccMax2c.s, iccMax2c.subelemsig, (number_fields.+)(iccMax2c.inMax, 2), (number_fields.+)(iccMax2c.inMin, 2), iccMax2c.newWindow)"
                   "nil")))
 (parseOperation_TCC27 0
  (parseOperation_TCC20-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2c.cur, 4)"
                   "naturalnumbers.below(iccMax2c.s`length)")))
 (parseOperation_TCC28 0
  (parseOperation_TCC30-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (parseOperation subtype "iccMax2c.cur" "index")))
 (parseOperation_TCC29 0
  (parseOperation_TCC13-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (Undefined const-decl "uint8" iccMax2c nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "iccMax2c.error(iccMax2c.Undefined, iccMax2c.cur, 41)"
                   "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (parseOperation_TCC30 0
  (parseOperation_TCC16-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (parseOperation subtype "iccMax2c.sig" "(iccMax2c.inout?)")))
 (parseOperation_TCC31 0
  (parseOperation_TCC31-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (parseOperation subtype "iccMax2c.cur" "index")))
 (parseOperation_TCC32 0
  (parseOperation_TCC30-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (Underflow const-decl "uint8" iccMax2c nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "iccMax2c.error(iccMax2c.Underflow, iccMax2c.cur, 42)"
                   "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (parseOperation_TCC33 0
  (parseOperation_TCC32-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (parseOperation subtype "iccMax2c.cur" "index")))
 (parseOperation_TCC34 0
  (parseOperation_TCC32-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (Overflow const-decl "uint8" iccMax2c nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "iccMax2c.error(iccMax2c.Overflow, iccMax2c.cur, 43)"
                   "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (parseOperation_TCC35 0
  (parseOperation_TCC24-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype
                   "(number_fields.-)(iccMax2c.inMax, iccMax2c.input)"
                   "uint64")))
 (parseOperation_TCC36 0
  (parseOperation_TCC39-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (parseOperation subtype "iccMax2c.cur" "index")))
 (parseOperation_TCC37 0
  (parseOperation_TCC26-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (Overflow const-decl "uint8" iccMax2c nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "iccMax2c.error(iccMax2c.Overflow, iccMax2c.cur, 44)"
                   "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (parseOperation_TCC38 0
  (parseOperation_TCC25-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype
                   "(number_fields.+)(iccMax2c.maxInputleft, iccMax2c.output)"
                   "naturalnumbers.upto(iccMax2c.stackLimit)")))
 (parseOperation_TCC39 0
  (parseOperation_TCC33-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype
                   "(number_fields.-)(iccMax2c.inMin, iccMax2c.input)"
                   "naturalnumbers.upto(iccMax2c.maxInputleft)")))
 (parseOperation_TCC40 0
  (parseOperation_TCC40-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype
                   "(number_fields.+)(iccMax2c.minInputleft, iccMax2c.output)"
                   "naturalnumbers.upto(iccMax2c.newInMax)")))
 (parseOperation_TCC41 0
  (parseOperation_TCC48-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype "iccMax2c.newInMax"
                   "{inMax: integertypes.uint64 | reals.<=(inMax, iccMax2c.stackLimit)}")))
 (parseOperation_TCC42 0
  (parseOperation_TCC53-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype "iccMax2c.newInMin"
                   "{inMin: integertypes.uint64 | reals.<=(inMin, iccMax2c.newInMax)}")))
 (parseOperation_TCC43 0
  (parseOperation_TCC27-1 nil 3850179737 ("" (termination-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   nil
   (parseOperation termination
                   "iccMax2c.parseOperation(iccMax2c.stackLimit, iccMax2c.s, iccMax2c.subelemsig, iccMax2c.newInMax, iccMax2c.newInMin, iccMax2c.newWindow)"
                   "nil")))
 (parseOperation_TCC44 0
  (parseOperation_TCC28-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2c.cur, 4)"
                   "naturalnumbers.below(iccMax2c.s`length)")))
 (parseOperation_TCC45 0
  (parseOperation_TCC21-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2c.cur, 6)"
                   "naturalnumbers.below(iccMax2c.s`length)")))
 (parseOperation_TCC46 0
  (parseOperation_TCC46-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (parseOperation subtype "iccMax2c.cur" "index")))
 (parseOperation_TCC47 0
  (parseOperation_TCC40-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (Underflow const-decl "uint8" iccMax2c nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "iccMax2c.error(iccMax2c.Underflow, iccMax2c.cur, 51)"
                   "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (parseOperation_TCC48 0
  (parseOperation_TCC47-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (parseOperation subtype "iccMax2c.cur" "index")))
 (parseOperation_TCC49 0
  (parseOperation_TCC42-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (Overflow const-decl "uint8" iccMax2c nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "iccMax2c.error(iccMax2c.Overflow, iccMax2c.cur, 52)"
                   "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (parseOperation_TCC50 0
  (parseOperation_TCC54-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (/= const-decl "boolean" notequal nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (parseOperation subtype "iccMax2c.cur" "index")))
 (parseOperation_TCC51 0
  (parseOperation_TCC44-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (/= const-decl "boolean" notequal nil)
    (nonZero const-decl "uint8" iccMax2c nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "iccMax2c.error(iccMax2c.nonZero, iccMax2c.cur, 53)"
                   "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (parseOperation_TCC52 0
  (parseOperation_TCC35-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (/= const-decl "boolean" notequal nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (parseOperation subtype
                   "(number_fields.+)((number_fields.-)((number_fields.-)(iccMax2c.inMax, iccMax2c.S), 1), iccMax2c.stackout)"
                   "{inMax: integertypes.uint64 | reals.<=(inMax, iccMax2c.stackLimit)}")))
 (parseOperation_TCC53 0
  (parseOperation_TCC34-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (/= const-decl "boolean" notequal nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (parseOperation subtype
                   "(number_fields.+)((number_fields.-)((number_fields.-)(iccMax2c.inMin, iccMax2c.S), 1), iccMax2c.stackout)"
                   "{inMin: integertypes.uint64 | reals.<=(inMin, (number_fields.-)((number_fields.-)((number_fields.+)(iccMax2c.inMax, iccMax2c.stackout), 1), iccMax2c.S))}")))
 (parseOperation_TCC54 0
  (parseOperation_TCC36-1 nil 3850179737 ("" (termination-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (uint16 type-eq-decl nil integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (plus_i32_u32 application-judgement "int64" integertypes nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (stackOut const-decl "uint64" iccMax2c nil)
    (/= const-decl "boolean" notequal nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (times_u16_u16 application-judgement "uint32" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (parseOperation termination
                   "iccMax2c.parseOperation(iccMax2c.stackLimit, iccMax2c.s, iccMax2c.subelemsig, (number_fields.+)((number_fields.-)((number_fields.-)(iccMax2c.inMax, iccMax2c.S), 1), iccMax2c.stackout), (number_fields.+)((number_fields.-)((number_fields.-)(iccMax2c.inMin, iccMax2c.S), 1), iccMax2c.stackout), iccMax2c.newWindow)"
                   "nil")))
 (parseOperation_TCC55 0
  (parseOperation_TCC37-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2c.cur, 4)"
                   "naturalnumbers.below(iccMax2c.s`length)")))
 (parseOperation_TCC56 0
  (parseOperation_TCC29-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2c.cur, 6)"
                   "naturalnumbers.below(iccMax2c.s`length)")))
 (parseOperation_TCC57 0
  (parseOperation_TCC74-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (parseOperation subtype "iccMax2c.cur" "index")))
 (parseOperation_TCC58 0
  (parseOperation_TCC52-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (Underflow const-decl "uint8" iccMax2c nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "iccMax2c.error(iccMax2c.Underflow, iccMax2c.cur, 61)"
                   "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (parseOperation_TCC59 0
  (parseOperation_TCC42-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (matrixIn const-decl "uint64" iccMax2c nil)
    (matrixOut const-decl "uint64" iccMax2c nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (plus_i16_u16 application-judgement "int32" integertypes nil)
    (times_u8_u8 application-judgement "uint16" integertypes nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (parseOperation subtype
                   "(number_fields.+)((number_fields.-)(iccMax2c.inMax, iccMax2c.stackin), iccMax2c.stackout)"
                   "{inMax: integertypes.uint64 | reals.<=(inMax, iccMax2c.stackLimit)}")))
 (parseOperation_TCC60 0
  (parseOperation_TCC41-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (matrixIn const-decl "uint64" iccMax2c nil)
    (matrixOut const-decl "uint64" iccMax2c nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (plus_i16_u16 application-judgement "int32" integertypes nil)
    (times_u8_u8 application-judgement "uint16" integertypes nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (parseOperation subtype
                   "(number_fields.+)((number_fields.-)(iccMax2c.inMin, iccMax2c.stackin), iccMax2c.stackout)"
                   "{inMin: integertypes.uint64 | reals.<=(inMin, (number_fields.-)((number_fields.+)(iccMax2c.inMax, iccMax2c.stackout), iccMax2c.stackin))}")))
 (parseOperation_TCC61 0
  (parseOperation_TCC43-1 nil 3850179737 ("" (termination-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (uint16 type-eq-decl nil integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (plus_i32_u32 application-judgement "int64" integertypes nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (matrixIn const-decl "uint64" iccMax2c nil)
    (matrixOut const-decl "uint64" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (times_u16_u16 application-judgement "uint32" integertypes nil))
   nil
   (parseOperation termination
                   "iccMax2c.parseOperation(iccMax2c.stackLimit, iccMax2c.s, iccMax2c.subelemsig, (number_fields.+)((number_fields.-)(iccMax2c.inMax, iccMax2c.stackin), iccMax2c.stackout), (number_fields.+)((number_fields.-)(iccMax2c.inMin, iccMax2c.stackin), iccMax2c.stackout), iccMax2c.newWindow)"
                   "nil")))
 (parseOperation_TCC62 0
  (parseOperation_TCC44-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2c.cur, 4)"
                   "naturalnumbers.below(iccMax2c.s`length)")))
 (parseOperation_TCC63 0
  (parseOperation_TCC38-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2c.cur, 6)"
                   "naturalnumbers.below(iccMax2c.s`length)")))
 (parseOperation_TCC64 0
  (parseOperation_TCC75-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (/= const-decl "boolean" notequal nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (parseOperation subtype "iccMax2c.cur" "index")))
 (parseOperation_TCC65 0
  (parseOperation_TCC60-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (/= const-decl "boolean" notequal nil)
    (nonZero const-decl "uint8" iccMax2c nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "iccMax2c.error(iccMax2c.nonZero, iccMax2c.cur, 71)"
                   "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (parseOperation_TCC66 0
  (parseOperation_TCC84-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (/= const-decl "boolean" notequal nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (parseOperation subtype "iccMax2c.cur" "index")))
 (parseOperation_TCC67 0
  (parseOperation_TCC62-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (/= const-decl "boolean" notequal nil)
    (Underflow const-decl "uint8" iccMax2c nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "iccMax2c.error(iccMax2c.Underflow, iccMax2c.cur, 72)"
                   "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (parseOperation_TCC68 0
  (parseOperation_TCC50-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (/= const-decl "boolean" notequal nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype
                   "(number_fields.-)(iccMax2c.inMax, iccMax2c.S)"
                   "{inMax: integertypes.uint64 | reals.<=(inMax, iccMax2c.stackLimit)}")))
 (parseOperation_TCC69 0
  (parseOperation_TCC49-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (/= const-decl "boolean" notequal nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype
                   "(number_fields.-)(iccMax2c.inMin, iccMax2c.S)"
                   "{inMin: integertypes.uint64 | reals.<=(inMin, (number_fields.-)(iccMax2c.inMax, iccMax2c.S))}")))
 (parseOperation_TCC70 0
  (parseOperation_TCC51-1 nil 3850179737 ("" (termination-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (uint16 type-eq-decl nil integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (/= const-decl "boolean" notequal nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   nil
   (parseOperation termination
                   "iccMax2c.parseOperation(iccMax2c.stackLimit, iccMax2c.s, iccMax2c.subelemsig, (number_fields.-)(iccMax2c.inMax, iccMax2c.S), (number_fields.-)(iccMax2c.inMin, iccMax2c.S), iccMax2c.newWindow)"
                   "nil")))
 (parseOperation_TCC71 0
  (parseOperation_TCC52-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2c.cur, 4)"
                   "naturalnumbers.below(iccMax2c.s`length)")))
 (parseOperation_TCC72 0
  (parseOperation_TCC45-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2c.cur, 6)"
                   "naturalnumbers.below(iccMax2c.s`length)")))
 (parseOperation_TCC73 0
  (parseOperation_TCC85-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (parseOperation subtype "iccMax2c.cur" "index")))
 (parseOperation_TCC74 0
  (parseOperation_TCC70-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (Underflow const-decl "uint8" iccMax2c nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "iccMax2c.error(iccMax2c.Underflow, iccMax2c.cur, 81)"
                   "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (parseOperation_TCC75 0
  (parseOperation_TCC92-1 nil 3850308699 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (minus_u32_u32 application-judgement "int64" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil (parseOperation subtype "iccMax2c.cur" "index")))
 (parseOperation_TCC76 0
  (parseOperation_TCC72-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (Overflow const-decl "uint8" iccMax2c nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "iccMax2c.error(iccMax2c.Overflow, iccMax2c.cur, 82)"
                   "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (parseOperation_TCC77 0
  (parseOperation_TCC57-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (minus_u32_u32 application-judgement "int64" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (parseOperation subtype
                   "(number_fields.+)((number_fields.-)(iccMax2c.inMax, iccMax2c.stackin), iccMax2c.stackout)"
                   "{inMax: integertypes.uint64 | reals.<=(inMax, iccMax2c.stackLimit)}")))
 (parseOperation_TCC78 0
  (parseOperation_TCC56-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (minus_u32_u32 application-judgement "int64" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (parseOperation subtype
                   "(number_fields.+)((number_fields.-)(iccMax2c.inMin, iccMax2c.stackin), iccMax2c.stackout)"
                   "{inMin: integertypes.uint64 | reals.<=(inMin, (number_fields.-)((number_fields.+)(iccMax2c.inMax, iccMax2c.stackout), iccMax2c.stackin))}")))
 (parseOperation_TCC79 0
  (parseOperation_TCC58-1 nil 3850179737 ("" (termination-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (uint16 type-eq-decl nil integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (FuncVecIn const-decl "uint32" iccMax2c nil)
    (FuncVecOut const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (parseOperation termination
                   "iccMax2c.parseOperation(iccMax2c.stackLimit, iccMax2c.s, iccMax2c.subelemsig, (number_fields.+)((number_fields.-)(iccMax2c.inMax, iccMax2c.stackin), iccMax2c.stackout), (number_fields.+)((number_fields.-)(iccMax2c.inMin, iccMax2c.stackin), iccMax2c.stackout), iccMax2c.newWindow)"
                   "nil")))
 (parseOperation_TCC80 0
  (parseOperation_TCC59-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2c.cur, 4)"
                   "naturalnumbers.below(iccMax2c.s`length)")))
 (parseOperation_TCC81 0
  (parseOperation_TCC60-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2c.cur, 8)"
                   "naturalnumbers.below(iccMax2c.s`length)")))
 (parseOperation_TCC82 0
  (parseOperation_TCC61-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (elseTag const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2c.cur, 12)"
                   "naturalnumbers.below(iccMax2c.s`length)")))
 (parseOperation_TCC83 0
  (parseOperation_TCC55-1 nil 3850179737
   ("" (skeep*) (("" (typepred "endpos") (("" (ground) nil nil)) nil))
    nil)
   ((uint32 type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_u32_u32 application-judgement "int64" integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "(number_fields.-)((number_fields.-)(iccMax2c.endpos, iccMax2c.startpos), 16)"
                   "uint32")))
 (parseOperation_TCC84 0
  (parseOperation_TCC62-1 nil 3850179737
   ("" (skeep*)
    (("" (expand "u32div")
      (("" (typepred "ndiv(-16 - startpos + endpos, 8)")
        (("" (typepred "endpos(w)") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (u32div const-decl "uint32" integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (window type-eq-decl nil iccMax2c nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_u32_u32 application-judgement "int64" integertypes nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (elseTag const-decl "uint32" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (printstr const-decl "void" stdio nil)
    (skip const-decl "void" stdlang nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "(number_fields.+)((number_fields.+)(iccMax2c.startpos, 16), number_fields.*(8, iccMax2c.T))"
                   "uint32")))
 (parseOperation_TCC85 0
  (parseOperation_TCC63-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (elseTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2c.startpos, 16)"
                   "naturalnumbers.upto((number_fields.+)((number_fields.+)(16, number_fields.*(8, iccMax2c.T)), iccMax2c.startpos))")))
 (parseOperation_TCC86 0
  (parseOperation_TCC86-1 nil 3853112539 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (elseTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parseOperation subtype "iccMax2c.inMax"
                   "{inMax: integertypes.uint64 | reals.<=(inMax, iccMax2c.stackLimit)}")))
 (parseOperation_TCC87 0
  (parseOperation_TCC68-1 nil 3850308699 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (elseTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parseOperation subtype "iccMax2c.inMin"
                   "{inMin: integertypes.uint64 | reals.<=(inMin, iccMax2c.inMax)}")))
 (parseOperation_TCC88 0
  (parseOperation_TCC65-1 nil 3850179737
   ("" (skeep*)
    (("" (expand "u32div")
      (("" (typepred "ndiv(-16 - startpos + endpos, 8)")
        (("" (hide -5 -6 -7 -8 -9) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (u32div const-decl "uint32" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_u32_u32 application-judgement "int64" integertypes nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (elseTag const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (printstr const-decl "void" stdio nil)
    (skip const-decl "void" stdlang nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation termination
                   "iccMax2c.parseOperation(iccMax2c.stackLimit, iccMax2c.s, iccMax2c.subelemsig, iccMax2c.inMax, iccMax2c.inMin, iccMax2c.Twindow)"
                   "nil")))
 (parseOperation_TCC89 0
  (parseOperation_TCC66-1 nil 3850179737
   ("" (skeep*)
    (("" (expand "u32div")
      (("" (typepred "ndiv(-16 - startpos + endpos, 8)")
        (("" (hide-all-but (-1 -2 -3 -14 -17 1 2 3 13))
          (("" (grind)
            (("" (typepred "endpos(w)") (("" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (u32div const-decl "uint32" integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (window type-eq-decl nil iccMax2c nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "(number_fields.+)((number_fields.+)(iccMax2c.startpos, 16), number_fields.*(8, ((number_fields.+)(iccMax2c.T, iccMax2c.U))))"
                   "uint32")))
 (parseOperation_TCC90 0
  (parseOperation_TCC67-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (elseTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "(number_fields.+)(iccMax2c.startpos, number_fields.*(8, ((number_fields.+)(iccMax2c.T, 2))))"
                   "naturalnumbers.upto((number_fields.+)((number_fields.+)((number_fields.+)(16, number_fields.*(8, iccMax2c.T)), number_fields.*(8, iccMax2c.U)), iccMax2c.startpos))")))
 (parseOperation_TCC91 0
  (parseOperation_TCC68-1 nil 3850179737
   ("" (skeep*)
    (("" (expand "u32div")
      (("" (typepred "ndiv(-16 - startpos + endpos, 8)")
        (("" (hide-all-but (-1 -2 -3 -14 -17 -18 1 2 3 13))
          (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (u32div const-decl "uint32" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (printstr const-decl "void" stdio nil)
    (skip const-decl "void" stdlang nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation termination
                   "iccMax2c.parseOperation(iccMax2c.stackLimit, iccMax2c.s, iccMax2c.subelemsig, iccMax2c.inMax, iccMax2c.inMin, iccMax2c.w1)"
                   "nil")))
 (parseOperation_TCC92 0
  (parseOperation_TCC69-1 nil 3850179737
   ("" (skeep*)
    (("" (expand "u32div")
      (("" (typepred "ndiv(-16 - startpos + endpos, 8)")
        (("" (hide-all-but (-1 -2 -3 -11 -14 -17 1 2 3 14))
          (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (u32div const-decl "uint32" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_u32_u32 application-judgement "int64" integertypes nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (printstr const-decl "void" stdio nil)
    (skip const-decl "void" stdlang nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "(number_fields.+)(iccMax2c.startpos, number_fields.*(8, ((number_fields.+)((number_fields.+)(iccMax2c.T, iccMax2c.U), 2))))"
                   "naturalnumbers.upto(iccMax2c.w`endpos)")))
 (parseOperation_TCC93 0
  (parseOperation_TCC70-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (goodresult type-eq-decl nil iccMax2c nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2c nil)
    (vmin adt-accessor-decl "[(value?) -> uint64]" iccMax2c nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2c nil)
    (result type-decl nil iccMax2c nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u8_u8 application-judgement "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (elseTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (parseOperation subtype "iccMax2c.Tval" "(iccMax2c.value?)")))
 (parseOperation_TCC94 0
  (parseOperation_TCC71-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (goodresult type-eq-decl nil iccMax2c nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2c nil)
    (vmin adt-accessor-decl "[(value?) -> uint64]" iccMax2c nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2c nil)
    (result type-decl nil iccMax2c nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u8_u8 application-judgement "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (elseTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (parseOperation subtype "iccMax2c.Eval" "(iccMax2c.value?)")))
 (parseOperation_TCC95 0
  (parseOperation_TCC76-1 nil 3850308699 ("" (grind) nil nil)
   ((uint32 type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (goodresult type-eq-decl nil iccMax2c nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2c nil)
    (vmin adt-accessor-decl "[(value?) -> uint64]" iccMax2c nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2c nil)
    (result type-decl nil iccMax2c nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (elseTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (u64max const-decl "uint64" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parseOperation subtype
                   "integertypes.u64max(iccMax2c.vmax(iccMax2c.Tval), iccMax2c.vmax(iccMax2c.Eval))"
                   "{inMax: integertypes.uint64 | reals.<=(inMax, iccMax2c.stackLimit)}")))
 (parseOperation_TCC96 0
  (parseOperation_TCC77-1 nil 3850308699 ("" (subtype-tcc) nil nil)
   ((uint32 type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (goodresult type-eq-decl nil iccMax2c nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2c nil)
    (vmin adt-accessor-decl "[(value?) -> uint64]" iccMax2c nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2c nil)
    (result type-decl nil iccMax2c nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u8_u8 application-judgement "uint16" integertypes nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (elseTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (u64min const-decl "uint64" integertypes nil)
    (u64max const-decl "uint64" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parseOperation subtype
                   "integertypes.u64min(iccMax2c.vmin(iccMax2c.Tval), iccMax2c.vmin(iccMax2c.Eval))"
                   "{inMin: integertypes.uint64 | reals.<=(inMin, integertypes.u64max(iccMax2c.vmax(iccMax2c.Tval), iccMax2c.vmax(iccMax2c.Eval)))}")))
 (parseOperation_TCC97 0
  (parseOperation_TCC73-1 nil 3850179737 ("" (termination-tcc) nil nil)
   ((uint32 type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (goodresult type-eq-decl nil iccMax2c nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2c nil)
    (vmin adt-accessor-decl "[(value?) -> uint64]" iccMax2c nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2c nil)
    (result type-decl nil iccMax2c nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (elseTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parseOperation termination
                   "iccMax2c.parseOperation(iccMax2c.stackLimit, iccMax2c.s, iccMax2c.subelemsig, integertypes.u64max(iccMax2c.vmax(iccMax2c.Tval), iccMax2c.vmax(iccMax2c.Eval)), integertypes.u64min(iccMax2c.vmin(iccMax2c.Tval), iccMax2c.vmin(iccMax2c.Eval)), iccMax2c.w2)"
                   "nil")))
 (parseOperation_TCC98 0
  (parseOperation_TCC110-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (goodresult type-eq-decl nil iccMax2c nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2c nil)
    (vmin adt-accessor-decl "[(value?) -> uint64]" iccMax2c nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2c nil)
    (result type-decl nil iccMax2c nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u8_u8 application-judgement "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (elseTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (parseOperation subtype "iccMax2c.cur" "index")))
 (parseOperation_TCC99 0
  (parseOperation_TCC97-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (elseTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (Overflow const-decl "uint8" iccMax2c nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "iccMax2c.error(iccMax2c.Overflow, iccMax2c.cur, 92)"
                   "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (parseOperation_TCC100 0
  (parseOperation_TCC112-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (elseTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (parseOperation subtype "iccMax2c.cur" "index")))
 (parseOperation_TCC101 0
  (parseOperation_TCC99-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (elseTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (Overflow const-decl "uint8" iccMax2c nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "iccMax2c.error(iccMax2c.Overflow, iccMax2c.cur, 93)"
                   "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (parseOperation_TCC102 0
  (parseOperation_TCC98-1 nil 3851003979
   ("" (skeep*)
    (("" (typepred "endpos(w)") (("" (grind) nil nil)) nil)) nil)
   ((exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (window type-eq-decl nil iccMax2c nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (elseTag const-decl "uint32" iccMax2c nil)
    (minus_u32_u32 application-judgement "int64" integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "(number_fields.-)((number_fields.-)(iccMax2c.endpos, iccMax2c.startpos), 8)"
                   "uint32")))
 (parseOperation_TCC103 0
  (parseOperation_TCC76-1 nil 3850179737
   ("" (skeep*)
    (("" (expand "u32div")
      (("" (typepred "ndiv(-8 - startpos + endpos, 8)")
        (("" (assert)
          (("" (typepred! "rem(8)(-8 - startpos + endpos)" :all? t)
            (("" (hide -1 -2 -3 -4)
              (("" (assert)
                (("" (hide -3 -7 -8 -9 -10 -11 -12)
                  (("" (typepred "endpos(w)") (("" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (u32div const-decl "uint32" integertypes nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "(number_fields.+)((number_fields.+)(iccMax2c.startpos, 8), number_fields.*(8, iccMax2c.T))"
                   "uint32")))
 (parseOperation_TCC104 0
  (parseOperation_TCC77-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (elseTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype "(number_fields.+)(iccMax2c.startpos, 8)"
                   "naturalnumbers.upto((number_fields.+)((number_fields.+)(8, number_fields.*(8, iccMax2c.T)), iccMax2c.startpos))")))
 (parseOperation_TCC105 0
  (parseOperation_TCC105-1 nil 3853112539 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (elseTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parseOperation subtype "iccMax2c.inMax"
                   "{inMax: integertypes.uint64 | reals.<=(inMax, iccMax2c.stackLimit)}")))
 (parseOperation_TCC106 0
  (parseOperation_TCC84-1 nil 3850308699 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (elseTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parseOperation subtype "iccMax2c.inMin"
                   "{inMin: integertypes.uint64 | reals.<=(inMin, iccMax2c.inMax)}")))
 (parseOperation_TCC107 0
  (parseOperation_TCC79-1 nil 3850179737
   ("" (skeep*)
    (("" (expand "u32div")
      (("" (typepred "ndiv(-8 - startpos + endpos, 8)")
        (("" (hide-all-but (-1 -2 -3 -11 -12 1 2 3 13))
          (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (u32div const-decl "uint32" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (printstr const-decl "void" stdio nil)
    (skip const-decl "void" stdlang nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation termination
                   "iccMax2c.parseOperation(iccMax2c.stackLimit, iccMax2c.s, iccMax2c.subelemsig, iccMax2c.inMax, iccMax2c.inMin, iccMax2c.Twindow)"
                   "nil")))
 (parseOperation_TCC108 0
  (parseOperation_TCC80-1 nil 3850179737
   ("" (skeep*)
    (("" (expand "u32div")
      (("" (typepred "ndiv(-8 - startpos + endpos, 8)")
        (("" (hide-all-but (-1 -2 -3 -11 1 2 3 14))
          (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (u32div const-decl "uint32" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (printstr const-decl "void" stdio nil)
    (skip const-decl "void" stdlang nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "(number_fields.+)(iccMax2c.startpos, number_fields.*(8, ((number_fields.+)(iccMax2c.T, 1))))"
                   "naturalnumbers.upto(iccMax2c.w`endpos)")))
 (parseOperation_TCC109 0
  (parseOperation_TCC81-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (result type-decl nil iccMax2c nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2c nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (vmin adt-accessor-decl "[(value?) -> uint64]" iccMax2c nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2c nil)
    (goodresult type-eq-decl nil iccMax2c nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (elseTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (parseOperation subtype "iccMax2c.Tval" "(iccMax2c.value?)")))
 (parseOperation_TCC110 0
  (parseOperation_TCC82-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (result type-decl nil iccMax2c nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2c nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (vmin adt-accessor-decl "[(value?) -> uint64]" iccMax2c nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2c nil)
    (goodresult type-eq-decl nil iccMax2c nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (elseTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parseOperation subtype "iccMax2c.vmax(iccMax2c.Tval)"
                   "{inMax: integertypes.uint64 | reals.<=(inMax, iccMax2c.stackLimit)}")))
 (parseOperation_TCC111 0
  (parseOperation_TCC108-1 nil 3850324866 ("" (grind) nil nil)
   ((uint32 type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (result type-decl nil iccMax2c nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2c nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (vmin adt-accessor-decl "[(value?) -> uint64]" iccMax2c nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2c nil)
    (goodresult type-eq-decl nil iccMax2c nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (elseTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parseOperation subtype "iccMax2c.vmin(iccMax2c.Tval)"
                   "{inMin: integertypes.uint64 | reals.<=(inMin, iccMax2c.vmax(iccMax2c.Tval))}")))
 (parseOperation_TCC112 0
  (parseOperation_TCC83-1 nil 3850179737 ("" (termination-tcc) nil nil)
   ((uint32 type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (result type-decl nil iccMax2c nil)
    (value? adt-recognizer-decl "[result -> boolean]" iccMax2c nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (vmin adt-accessor-decl "[(value?) -> uint64]" iccMax2c nil)
    (vmax adt-accessor-decl "[(value?) -> uint64]" iccMax2c nil)
    (goodresult type-eq-decl nil iccMax2c nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (elseTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parseOperation termination
                   "iccMax2c.parseOperation(iccMax2c.stackLimit, iccMax2c.s, iccMax2c.subelemsig, iccMax2c.vmax(iccMax2c.Tval), iccMax2c.vmin(iccMax2c.Tval), iccMax2c.w1)"
                   "nil")))
 (parseOperation_TCC113 0
  (parseOperation_TCC108-1 nil 3851003979 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (elseTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (parseOperation subtype "iccMax2c.cur" "index")))
 (parseOperation_TCC114 0
  (parseOperation_TCC111-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (elseTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (Underflow const-decl "uint8" iccMax2c nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "iccMax2c.error(iccMax2c.Underflow, iccMax2c.cur, 94)"
                   "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (parseOperation_TCC115 0
  (parseOperation_TCC110-1 nil 3851003979 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (parseOperation subtype "iccMax2c.cur" "index")))
 (parseOperation_TCC116 0
  (parseOperation_TCC113-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (DefaultError const-decl "uint8" iccMax2c nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parseOperation subtype
                   "iccMax2c.error(iccMax2c.DefaultError, iccMax2c.cur, 100)"
                   "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (parseOperation_TCC117 0
  (parseOperation_TCC86-1 nil 3850179737
   ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (print64 const-decl "uint64" iccMax2c nil)
    (dataTag const-decl "uint32" iccMax2c nil)
    (channelVecOp? const-decl "bool" iccMax2c nil)
    (envTag const-decl "uint32" iccMax2c nil)
    (subElemTag? const-decl "bool" iccMax2c nil)
    (stackOpTag? const-decl "bool" iccMax2c nil)
    (matrixOpTag? const-decl "bool" iccMax2c nil)
    (seqFuncOp? const-decl "bool" iccMax2c nil)
    (FuncVecOp? const-decl "bool" iccMax2c nil)
    (ifTag const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parseOperation disjointness
                   "(COND iccMax2c.tag = iccMax2c.dataTag -> IF reals.>=(iccMax2c.inMax, iccMax2c.stackLimit) THEN iccMax2c.error(iccMax2c.Overflow, iccMax2c.cur, 11) ELSE iccMax2c.parseOperation(iccMax2c.stackLimit, iccMax2c.s, iccMax2c.subelemsig, (number_fields.+)(iccMax2c.inMax, 1), (number_fields.+)(iccMax2c.inMin, 1), iccMax2c.newWindow) ENDIF, iccMax2c.channelVecOp?(iccMax2c.tag) -> LET res = iccMax2c.ChannelVecOp(iccMax2c.tag, iccMax2c.stackLimit, iccMax2c.cur, iccMax2c.inMax, iccMax2c.inMin, iccMax2c.readU16(iccMax2c.s, (number_fields.+)(iccMax2c.cur, 4)), iccMax2c.readU16(iccMax2c.s, (number_fields.+)(iccMax2c.cur, 6))) IN CASES iccMax2c.res OF error(code, loc, occ): iccMax2c.res, value(M, m): iccMax2c.parseOperation(iccMax2c.stackLimit, iccMax2c.s, iccMax2c.subelemsig, M, m, iccMax2c.newWindow) ENDCASES, iccMax2c.tag = iccMax2c.envTag -> IF reals.>((number_fields.+)(iccMax2c.inMax, 2), iccMax2c.stackLimit) THEN iccMax2c.error(iccMax2c.Overflow, iccMax2c.cur, 31) ELSE iccMax2c.parseOperation(iccMax2c.stackLimit, iccMax2c.s, iccMax2c.subelemsig, (number_fields.+)(iccMax2c.inMax, 2), (number_fields.+)(iccMax2c.inMin, 2), iccMax2c.newWindow) ENDIF, iccMax2c.subElemTag?(iccMax2c.tag) -> LET S = iccMax2c.readU32(iccMax2c.s, (number_fields.+)(iccMax2c.cur, 4)), sig = iccMax2c.subelemsig(iccMax2c.S) IN IF iccMax2c.undefined?(iccMax2c.sig) THEN iccMax2c.error(iccMax2c.Undefined, iccMax2c.cur, 41) ELSE (LET input = iccMax2c.input(iccMax2c.sig), output = iccMax2c.output(iccMax2c.sig) IN IF reals.>(iccMax2c.input, iccMax2c.inMin) THEN iccMax2c.error(iccMax2c.Underflow, iccMax2c.cur, 42) ELSIF reals.<((number_fields.-)(iccMax2c.stackLimit, iccMax2c.inMax), iccMax2c.input) THEN iccMax2c.error(iccMax2c.Overflow, iccMax2c.cur, 43) ELSE LET maxInputleft: integertypes.uint64 = (number_fields.-)(iccMax2c.inMax, iccMax2c.input) IN IF reals.>(iccMax2c.output, (number_fields.-)(iccMax2c.stackLimit, maxInputleft)) THEN iccMax2c.error(iccMax2c.Overflow, iccMax2c.cur, 44) ELSE LET newInMax: naturalnumbers.upto(iccMax2c.stackLimit) = (number_fields.+)(maxInputleft, iccMax2c.output), minInputleft: naturalnumbers.upto(maxInputleft) = (number_fields.-)(iccMax2c.inMin, iccMax2c.input), newInMin: naturalnumbers.upto(newInMax) = (number_fields.+)(minInputleft, iccMax2c.output) IN iccMax2c.parseOperation(iccMax2c.stackLimit, iccMax2c.s, iccMax2c.subelemsig, newInMax, newInMin, iccMax2c.newWindow) ENDIF ENDIF) ENDIF, iccMax2c.stackOpTag?(iccMax2c.tag) -> LET S = iccMax2c.readU16(iccMax2c.s, (number_fields.+)(iccMax2c.cur, 4)), T = iccMax2c.readU16(iccMax2c.s, (number_fields.+)(iccMax2c.cur, 6)), stackout = iccMax2c.stackOut(iccMax2c.tag, iccMax2c.S, iccMax2c.T) IN IF reals.>((number_fields.+)(iccMax2c.S, 1), iccMax2c.inMin) THEN iccMax2c.error(iccMax2c.Underflow, iccMax2c.cur, 51) ELSIF reals.>((number_fields.+)((number_fields.-)((number_fields.-)(iccMax2c.inMax, iccMax2c.S), 1), iccMax2c.stackout), iccMax2c.stackLimit) THEN iccMax2c.error(iccMax2c.Overflow, iccMax2c.cur, 52) ELSIF booleans.AND((booleans.OR(iccMax2c.tag = 0x666c6970, iccMax2c.tag = 0x706f7020)), iccMax2c.T /= 0) THEN iccMax2c.error(iccMax2c.nonZero, iccMax2c.cur, 53) ELSE iccMax2c.parseOperation(iccMax2c.stackLimit, iccMax2c.s, iccMax2c.subelemsig, (number_fields.+)((number_fields.-)((number_fields.-)(iccMax2c.inMax, iccMax2c.S), 1), iccMax2c.stackout), (number_fields.+)((number_fields.-)((number_fields.-)(iccMax2c.inMin, iccMax2c.S), 1), iccMax2c.stackout), iccMax2c.newWindow) ENDIF, iccMax2c.matrixOpTag?(iccMax2c.tag) -> LET S = iccMax2c.readU16(iccMax2c.s, (number_fields.+)(iccMax2c.cur, 4)), T = iccMax2c.readU16(iccMax2c.s, (number_fields.+)(iccMax2c.cur, 6)), stackin = iccMax2c.matrixIn(iccMax2c.tag, iccMax2c.S, iccMax2c.T), stackout = iccMax2c.matrixOut(iccMax2c.tag, iccMax2c.S, iccMax2c.T) IN IF reals.>(iccMax2c.stackin, iccMax2c.inMin) THEN iccMax2c.error(iccMax2c.Underflow, iccMax2c.cur, 61) ELSE iccMax2c.parseOperation(iccMax2c.stackLimit, iccMax2c.s, iccMax2c.subelemsig, (number_fields.+)((number_fields.-)(iccMax2c.inMax, iccMax2c.stackin), iccMax2c.stackout), (number_fields.+)((number_fields.-)(iccMax2c.inMin, iccMax2c.stackin), iccMax2c.stackout), iccMax2c.newWindow) ENDIF, iccMax2c.seqFuncOp?(iccMax2c.tag) -> LET S = iccMax2c.readU16(iccMax2c.s, (number_fields.+)(iccMax2c.cur, 4)), T = iccMax2c.readU16(iccMax2c.s, (number_fields.+)(iccMax2c.cur, 6)) IN IF iccMax2c.T /= 0 THEN iccMax2c.error(iccMax2c.nonZero, iccMax2c.cur, 71) ELSIF reals.>((number_fields.+)(iccMax2c.S, 1), iccMax2c.inMin) THEN iccMax2c.error(iccMax2c.Underflow, iccMax2c.cur, 72) ELSE iccMax2c.parseOperation(iccMax2c.stackLimit, iccMax2c.s, iccMax2c.subelemsig, (number_fields.-)(iccMax2c.inMax, iccMax2c.S), (number_fields.-)(iccMax2c.inMin, iccMax2c.S), iccMax2c.newWindow) ENDIF, iccMax2c.FuncVecOp?(iccMax2c.tag) -> LET S = iccMax2c.readU16(iccMax2c.s, (number_fields.+)(iccMax2c.cur, 4)), T = iccMax2c.readU16(iccMax2c.s, (number_fields.+)(iccMax2c.cur, 6)), stackin = iccMax2c.FuncVecIn(iccMax2c.tag, iccMax2c.S), stackout = iccMax2c.FuncVecOut(iccMax2c.tag, iccMax2c.S) IN IF reals.>(iccMax2c.stackin, iccMax2c.inMin) THEN iccMax2c.error(iccMax2c.Underflow, iccMax2c.cur, 81) ELSIF reals.>=((number_fields.+)((number_fields.-)(iccMax2c.inMax, iccMax2c.stackin), iccMax2c.stackout), iccMax2c.stackLimit) THEN iccMax2c.error(iccMax2c.Overflow, iccMax2c.cur, 82) ELSE iccMax2c.parseOperation(iccMax2c.stackLimit, iccMax2c.s, iccMax2c.subelemsig, (number_fields.+)((number_fields.-)(iccMax2c.inMax, iccMax2c.stackin), iccMax2c.stackout), (number_fields.+)((number_fields.-)(iccMax2c.inMin, iccMax2c.stackin), iccMax2c.stackout), iccMax2c.newWindow) ENDIF, iccMax2c.tag = iccMax2c.ifTag -> LET T = iccMax2c.readU32(iccMax2c.s, (number_fields.+)(iccMax2c.cur, 4)) IN IF booleans.AND(reals.<=(16, (number_fields.-)(iccMax2c.endpos, iccMax2c.startpos)), iccMax2c.readU32(iccMax2c.s, (number_fields.+)(iccMax2c.cur, 8)) = iccMax2c.elseTag) THEN (LET U = iccMax2c.readU32(iccMax2c.s, (number_fields.+)(iccMax2c.cur, 12)) IN IF reals.<=(iccMax2c.T, integertypes.u32div((number_fields.-)((number_fields.-)(iccMax2c.endpos, iccMax2c.startpos), 16), 8)) THEN (LET Twindow = iccMax2c.w WITH [`endpos := (number_fields.+)((number_fields.+)(iccMax2c.startpos, 16), number_fields.*(8, iccMax2c.T)), `startpos := (number_fields.+)(iccMax2c.startpos, 16)], Tval = iccMax2c.parseOperation(iccMax2c.stackLimit, iccMax2c.s, iccMax2c.subelemsig, iccMax2c.inMax, iccMax2c.inMin, iccMax2c.Twindow) IN IF iccMax2c.error?(iccMax2c.Tval) THEN iccMax2c.Tval ELSIF reals.<=(((number_fields.+)(iccMax2c.T, iccMax2c.U)), integertypes.u32div((number_fields.-)((number_fields.-)(iccMax2c.endpos, iccMax2c.startpos), 16), 8)) THEN (LET w1 = iccMax2c.w WITH [`endpos := (number_fields.+)((number_fields.+)(iccMax2c.startpos, 16), number_fields.*(8, ((number_fields.+)(iccMax2c.T, iccMax2c.U)))), `startpos := (number_fields.+)(iccMax2c.startpos, number_fields.*(8, ((number_fields.+)(iccMax2c.T, 2))))], Eval = iccMax2c.parseOperation(iccMax2c.stackLimit, iccMax2c.s, iccMax2c.subelemsig, iccMax2c.inMax, iccMax2c.inMin, iccMax2c.w1) IN IF iccMax2c.error?(iccMax2c.Eval) THEN iccMax2c.Eval ELSE LET w2 = iccMax2c.w WITH [`startpos := (number_fields.+)(iccMax2c.startpos, number_fields.*(8, ((number_fields.+)((number_fields.+)(iccMax2c.T, iccMax2c.U), 2))))] IN iccMax2c.parseOperation(iccMax2c.stackLimit, iccMax2c.s, iccMax2c.subelemsig, integertypes.u64max(iccMax2c.vmax(iccMax2c.Tval), iccMax2c.vmax(iccMax2c.Eval)), integertypes.u64min(iccMax2c.vmin(iccMax2c.Tval), iccMax2c.vmin(iccMax2c.Eval)), iccMax2c.w2) ENDIF) ELSE iccMax2c.error(iccMax2c.Overflow, iccMax2c.cur, 92) ENDIF) ELSE iccMax2c.error(iccMax2c.Overflow, iccMax2c.cur, 93) ENDIF) ELSIF reals.<=(iccMax2c.T, integertypes.u32div((number_fields.-)((number_fields.-)(iccMax2c.endpos, iccMax2c.startpos), 8), 8)) THEN (LET Twindow = iccMax2c.w WITH [`endpos := (number_fields.+)((number_fields.+)(iccMax2c.startpos, 8), number_fields.*(8, iccMax2c.T)), `startpos := (number_fields.+)(iccMax2c.startpos, 8)], Tval = iccMax2c.parseOperation(iccMax2c.stackLimit, iccMax2c.s, iccMax2c.subelemsig, iccMax2c.inMax, iccMax2c.inMin, iccMax2c.Twindow) IN IF iccMax2c.error?(iccMax2c.Tval) THEN iccMax2c.Tval ELSE LET w1 = iccMax2c.w WITH [`startpos := (number_fields.+)(iccMax2c.startpos, number_fields.*(8, ((number_fields.+)(iccMax2c.T, 1))))] IN iccMax2c.parseOperation(iccMax2c.stackLimit, iccMax2c.s, iccMax2c.subelemsig, iccMax2c.vmax(iccMax2c.Tval), iccMax2c.vmin(iccMax2c.Tval), iccMax2c.w1) ENDIF) ELSE iccMax2c.error(iccMax2c.Underflow, iccMax2c.cur, 94) ENDIF, ELSE -> iccMax2c.error(iccMax2c.DefaultError, iccMax2c.cur, 100) ENDCOND)"
                   "nil")))
 (parsefunc_TCC1 0
  (parsefunc_TCC1-1 nil 3853127464 ("" (subtype-tcc) nil nil)
   ((UnexpectedEOF const-decl "uint8" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parsefunc subtype
              "iccMax2c.error(iccMax2c.UnexpectedEOF, iccMax2c.s`length, 0)"
              "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (parsefunc_TCC2 0
  (parsefunc_TCC1-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (window type-eq-decl nil iccMax2c nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (parsefunc subtype "iccMax2c.startpos" "index")))
 (parsefunc_TCC3 0
  (parsefunc_TCC2-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((UnexpectedEOF const-decl "uint8" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parsefunc subtype
              "iccMax2c.error(iccMax2c.UnexpectedEOF, iccMax2c.startpos, 0)"
              "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (parsefunc_TCC4 0
  (parsefunc_TCC8-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (window type-eq-decl nil iccMax2c nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (parsefunc subtype "iccMax2c.startpos" "index")))
 (parsefunc_TCC5 0
  (parsefunc_TCC11-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((UnexpectedEOF const-decl "uint8" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parsefunc subtype
              "iccMax2c.error(iccMax2c.UnexpectedEOF, iccMax2c.startpos, 0)"
              "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (parsefunc_TCC6 0
  (parsefunc_TCC2-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (window type-eq-decl nil iccMax2c nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parsefunc subtype "iccMax2c.cur"
              "naturalnumbers.below(iccMax2c.s`length)")))
 (parsefunc_TCC7 0
  (parsefunc_TCC3-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (window type-eq-decl nil iccMax2c nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parsefunc subtype "(number_fields.+)(iccMax2c.cur, 4)"
              "naturalnumbers.below(iccMax2c.s`length)")))
 (parsefunc_TCC8 0
  (parsefunc_TCC4-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (window type-eq-decl nil iccMax2c nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parsefunc subtype "(number_fields.+)(iccMax2c.cur, 8)"
              "naturalnumbers.below(iccMax2c.s`length)")))
 (parsefunc_TCC9 0
  (parsefunc_TCC7-1 nil 3850179737
   ("" (skeep*)
    (("" (typepred "endpos")
      (("" (typepred "s`length") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((uint32 type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parsefunc subtype "(number_fields.+)(iccMax2c.startpos, 12)"
              "uint32")))
 (parsefunc_TCC10 0
  (parsefunc_TCC6-1 nil 3850179737
   ("" (skeep*)
    (("" (typepred "endpos")
      (("" (typepred "s`length") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((uint32 type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_u32_u32 application-judgement "int64" integertypes nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parsefunc subtype "(number_fields.-)(iccMax2c.endpos, iccMax2c.B)"
              "uint32")))
 (parsefunc_TCC11 0
  (parsefunc_TCC9-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (window type-eq-decl nil iccMax2c nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (u32div const-decl "uint32" integertypes nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil (parsefunc subtype "iccMax2c.startpos" "index")))
 (parsefunc_TCC12 0
  (parsefunc_TCC11-1 nil 3851003979 ("" (subtype-tcc) nil nil)
   ((readU32 const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (UnexpectedEOF const-decl "uint8" iccMax2c nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parsefunc subtype
              "iccMax2c.error(iccMax2c.UnexpectedEOF, iccMax2c.startpos, 0)"
              "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (parsefunc_TCC13 0
  (parsefunc_TCC8-1 nil 3850308699 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u32div const-decl "uint32" integertypes nil)
    (readU32 const-decl "uint32" iccMax2c nil))
   nil
   (parsefunc subtype "0"
              "{inMax: integertypes.uint64 | reals.<=(inMax, iccMax2c.stackLimit)}")))
 (parsefunc_TCC14 0
  (parsefunc_TCC13-1 nil 3851003979 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (window type-eq-decl nil iccMax2c nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32div const-decl "uint32" integertypes nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil (parsefunc subtype "iccMax2c.E" "uint32")))
 (parsefunc_TCC15 0
  (parsefunc_TCC14-1 nil 3851003979 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (window type-eq-decl nil iccMax2c nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32div const-decl "uint32" integertypes nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (parsefunc subtype "iccMax2c.B" "naturalnumbers.upto(iccMax2c.E)")))
 (parsefunc_TCC16 0
  (parsefunc_TCC10-1 nil 3850179737 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (window type-eq-decl nil iccMax2c nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32div const-decl "uint32" integertypes nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil (parsefunc subtype "iccMax2c.startpos" "index")))
 (parsefunc_TCC17 0
  (parsefunc_TCC16-1 nil 3851003979 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (UnexpectedEOF const-decl "uint8" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (readU32 const-decl "uint32" iccMax2c nil))
   nil
   (parsefunc subtype
              "iccMax2c.error(iccMax2c.UnexpectedEOF, iccMax2c.startpos, 0)"
              "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (parsefunc_TCC18 0
  (parsefunc_TCC17-1 nil 3851003979 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (window type-eq-decl nil iccMax2c nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32div const-decl "uint32" integertypes nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil (parsefunc subtype "iccMax2c.startpos" "index")))
 (parsefunc_TCC19 0
  (parsefunc_TCC13-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonZero const-decl "uint8" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (readU32 const-decl "uint32" iccMax2c nil))
   nil
   (parsefunc subtype
              "iccMax2c.error(iccMax2c.nonZero, iccMax2c.startpos, 0)"
              "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (parsefunc_TCC20 0
  (parsefunc_TCC19-1 nil 3851003979 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (window type-eq-decl nil iccMax2c nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32div const-decl "uint32" integertypes nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil (parsefunc subtype "iccMax2c.startpos" "index")))
 (parsefunc_TCC21 0
  (parsefunc_TCC15-1 nil 3850324866 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (badTag const-decl "uint8" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (readU32 const-decl "uint32" iccMax2c nil))
   nil
   (parsefunc subtype
              "iccMax2c.error(iccMax2c.badTag, iccMax2c.startpos, 0)"
              "iccMax2c.goodresult(iccMax2c.stackLimit)")))
 (iccteststring1_TCC1 0
  (iccteststring1_TCC1-1 nil 3850179737 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (iccteststring1 subtype
                   "\"66756e630000000000000026696e20200000000264617461400cc00067616d61000200007473617600000002646174610000000064617461000000006461746100000000657120200002000073756d2000010000646174614040000065712020000000006966202000000007646174613f800000646174614000000073756d2000020000646174613f80000074707574000700007069202000000000706f7020000000007467657400000002646174613f13a08e646174613e3e030d646174613e40bec76d756c200002000073756d20000100007467657400000002646174613e983d5c646174613f209ad1646174613d9a307f6d756c200002000073756d20000100007467657400000002646174613cdd7459646174613d90c50f646174613f7dc8a16d756c200002000073756d20000100006f75742000000002\""
                   "bstring")))
 (iccteststring1_TCC2 0
  (iccteststring1_TCC2-1 nil 3850179737 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (iccteststring1 subtype
                   "bytestrings.mk_bytestring(\"66756e630000000000000026696e20200000000264617461400cc00067616d61000200007473617600000002646174610000000064617461000000006461746100000000657120200002000073756d2000010000646174614040000065712020000000006966202000000007646174613f800000646174614000000073756d2000020000646174613f80000074707574000700007069202000000000706f7020000000007467657400000002646174613f13a08e646174613e3e030d646174613e40bec76d756c200002000073756d20000100007467657400000002646174613e983d5c646174613f209ad1646174613d9a307f6d756c200002000073756d20000100007467657400000002646174613cdd7459646174613d90c50f646174613f7dc8a16d756c200002000073756d20000100006f75742000000002\")"
                   "hexstring")))
 (iccteststring2_TCC1 0
  (iccteststring2_TCC1-1 nil 3850179737 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (iccteststring2 subtype
                   "\"66756e630000000000000006696e202000000002646174613f800000646174613f800000646174613f80000061646420000200006f75742000000002\""
                   "bstring")))
 (iccteststring2_TCC2 0
  (iccteststring2_TCC2-1 nil 3850179737 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (iccteststring2 subtype
                   "bytestrings.mk_bytestring(\"66756e630000000000000006696e202000000002646174613f800000646174613f800000646174613f80000061646420000200006f75742000000002\")"
                   "hexstring")))
 (iccteststring3_TCC1 0
  (iccteststring3_TCC1-1 nil 3850179737 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (iccteststring3 subtype
                   "\"66756e630000000000000026696e2020000000027473617600000002646174610000000064617461000000006461746100000000657120200002000073756d2000010000646174614040000065712020000000006966202000000007646174613f800000646174614000000073756d2000020000646174613f80000074707574000700007069202000000000706f7020000000007467657400000002646174614002a96964617461bf10a47f64617461beb080736d756c200002000073756d2000010000696e20200000000264617461bf78201d646174613ff01fc9646174613d2a3ad26d756c200002000073756d2000010000696e202000000002646174613c5c337264617461bdf266ba646174613f81f1176d756c200002000073756d2000010000646174613ee8cf5967616d61000200006f75742000000002\""
                   "bstring")))
 (iccteststring3_TCC2 0
  (iccteststring3_TCC2-1 nil 3850179737 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (iccteststring3 subtype
                   "bytestrings.mk_bytestring(\"66756e630000000000000026696e2020000000027473617600000002646174610000000064617461000000006461746100000000657120200002000073756d2000010000646174614040000065712020000000006966202000000007646174613f800000646174614000000073756d2000020000646174613f80000074707574000700007069202000000000706f7020000000007467657400000002646174614002a96964617461bf10a47f64617461beb080736d756c200002000073756d2000010000696e20200000000264617461bf78201d646174613ff01fc9646174613d2a3ad26d756c200002000073756d2000010000696e202000000002646174613c5c337264617461bdf266ba646174613f81f1176d756c200002000073756d2000010000646174613ee8cf5967616d61000200006f75742000000002\")"
                   "hexstring")))
 (test1_TCC1 0
  (test1_TCC1-1 nil 3853112539
   ("" (typepred "iccteststring1`length")
    (("" (name-replace "string1" "iccteststring1`length")
      (("" (grind) nil nil)) nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (iccteststring1 const-decl "bytestring" iccMax2c nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (test1 subtype "iccMax2c.iccteststring1`length" "uint32")))
 (test1_TCC2 0
  (test1_TCC2-1 nil 3853112539 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "upto(n)" modulo_arithmetic nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (get const-decl "char" gen_strings nil)
    (mk_bytestring const-decl "bytestring" bytestrings nil)
    (max32 const-decl "uint32" integertypes nil)
    (u32div const-decl "uint32" integertypes nil)
    (u32times const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u8lshift const-decl "uint8" integertypes nil)
    (hexvalue const-decl "byte" hex nil)
    (max8 const-decl "uint8" integertypes nil)
    (hex2byte const-decl "byte" hex nil)
    (hex2bytestring const-decl "bytestring" hex nil)
    (iccteststring1 const-decl "bytestring" iccMax2c nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (test1 subtype "0"
          "naturalnumbers.upto(iccMax2c.iccteststring1`length)")))
 (test2_TCC1 0
  (test2_TCC1-1 nil 3853112539
   ("" (typepred "iccteststring2`length")
    (("" (name-replace "string2" "iccteststring2`length")
      (("" (grind) nil nil)) nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (iccteststring2 const-decl "bytestring" iccMax2c nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (test2 subtype "iccMax2c.iccteststring2`length" "uint32")))
 (test2_TCC2 0
  (test2_TCC2-1 nil 3853112539 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "upto(n)" modulo_arithmetic nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (get const-decl "char" gen_strings nil)
    (mk_bytestring const-decl "bytestring" bytestrings nil)
    (max32 const-decl "uint32" integertypes nil)
    (u32div const-decl "uint32" integertypes nil)
    (u32times const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u8lshift const-decl "uint8" integertypes nil)
    (hexvalue const-decl "byte" hex nil)
    (max8 const-decl "uint8" integertypes nil)
    (hex2byte const-decl "byte" hex nil)
    (hex2bytestring const-decl "bytestring" hex nil)
    (iccteststring2 const-decl "bytestring" iccMax2c nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (test2 subtype "0"
          "naturalnumbers.upto(iccMax2c.iccteststring2`length)")))
 (test3_TCC1 0
  (test3_TCC1-1 nil 3853112539
   ("" (typepred "iccteststring3`length")
    (("" (name-replace "string3" "iccteststring3`length")
      (("" (grind) nil nil)) nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (iccteststring3 const-decl "bytestring" iccMax2c nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (test3 subtype "iccMax2c.iccteststring3`length" "uint32")))
 (test3_TCC2 0
  (test3_TCC2-1 nil 3853112539 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "upto(n)" modulo_arithmetic nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (get const-decl "char" gen_strings nil)
    (mk_bytestring const-decl "bytestring" bytestrings nil)
    (max32 const-decl "uint32" integertypes nil)
    (u32div const-decl "uint32" integertypes nil)
    (u32times const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u8lshift const-decl "uint8" integertypes nil)
    (hexvalue const-decl "byte" hex nil)
    (max8 const-decl "uint8" integertypes nil)
    (hex2byte const-decl "byte" hex nil)
    (hex2bytestring const-decl "bytestring" hex nil)
    (iccteststring3 const-decl "bytestring" iccMax2c nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (test3 subtype "0"
          "naturalnumbers.upto(iccMax2c.iccteststring3`length)")))
 (test4_TCC1 0
  (test4_TCC1-1 nil 3853112539
   ("" (typepred "iccteststring4`length")
    (("" (name-replace "string4" "iccteststring4`length")
      (("" (grind) nil nil)) nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (iccteststring4 const-decl "bytestring" iccMax2c nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (test4 subtype "iccMax2c.iccteststring4`length" "uint32")))
 (test4_TCC2 0
  (test4_TCC2-1 nil 3853112539 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "upto(n)" modulo_arithmetic nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (get const-decl "char" gen_strings nil)
    (mk_bytestring const-decl "bytestring" bytestrings nil)
    (max32 const-decl "uint32" integertypes nil)
    (u32div const-decl "uint32" integertypes nil)
    (u32times const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u8lshift const-decl "uint8" integertypes nil)
    (hexvalue const-decl "byte" hex nil)
    (max8 const-decl "uint8" integertypes nil)
    (hex2byte const-decl "byte" hex nil)
    (hex2bytestring const-decl "bytestring" hex nil)
    (iccteststring4 const-decl "bytestring" iccMax2c nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (test4 subtype "0"
          "naturalnumbers.upto(iccMax2c.iccteststring4`length)")))
 (makesubelementsig_TCC1 0
  (makesubelementsig_TCC1-1 nil 3853185869 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)) nil
   (makesubelementsig subtype
    "(number_fields.-)(iccMax2c.E, iccMax2c.i)" "naturalnumber")))
 (makesubelementsig_TCC2 0
  (makesubelementsig_TCC2-1 nil 3853185869 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (makesubelementsig subtype "(number_fields.+)(iccMax2c.i, 1)"
    "naturalnumbers.upto(iccMax2c.E)")))
 (makesubelementsig_TCC3 0
  (makesubelementsig_TCC3-1 nil 3853185869
   ("" (termination-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (makesubelementsig termination
    "iccMax2c.makesubelementsig(iccMax2c.E, iccMax2c.sigarray, (number_fields.+)(iccMax2c.i, 1))"
    "nil")))
 (makesubelementsig_TCC4 0
  (makesubelementsig_TCC4-1 nil 3853185869 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (makesubelementsig subtype "(number_fields.+)(iccMax2c.i, 1)"
    "naturalnumbers.upto(iccMax2c.E)")))
 (makesubelementsig_TCC5 0
  (makesubelementsig_TCC5-1 nil 3853185869
   ("" (termination-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (makesubelementsig termination
    "iccMax2c.makesubelementsig(iccMax2c.E, iccMax2c.sigarray, (number_fields.+)(iccMax2c.i, 1))"
    "nil")))
 (makesubelementsig_TCC6 0
  (makesubelementsig_TCC6-1 nil 3853185869
   ("" (skeep*)
    (("" (typepred "w`startpos")
      (("" (typepred "w`endpos") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((window type-eq-decl nil iccMax2c nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (makesubelementsig subtype "iccMax2c.w`startpos" "uint32")))
 (makesubelementsig_TCC7 0
  (makesubelementsig_TCC7-1 nil 3853185869 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (makesubelementsig subtype "iccMax2c.i"
    "naturalnumbers.below(iccMax2c.E)")))
 (parsecalc_TCC1 0
  (parsecalc_TCC1-1 nil 3851003979 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parsecalc subtype
              "(number_fields.-)(iccMax2c.w`endpos, iccMax2c.w`startpos)"
              "naturalnumber")))
 (parsecalc_TCC2 0
  (parsecalc_TCC9-1 nil 3851003979 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (parsecalc subtype "iccMax2c.w`startpos" "uint32")))
 (parsecalc_TCC3 0
  (parsecalc_TCC2-1 nil 3851003979 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parsecalc subtype
              "(number_fields.-)(iccMax2c.endpos, iccMax2c.startpos)"
              "uint32")))
 (parsecalc_TCC4 0
  (parsecalc_TCC3-1 nil 3851003979 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parsecalc subtype "iccMax2c.startpos"
              "naturalnumbers.below(iccMax2c.s`length)")))
 (parsecalc_TCC5 0
  (parsecalc_TCC4-1 nil 3851003979 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parsecalc subtype "(number_fields.+)(iccMax2c.startpos, 4)"
              "naturalnumbers.below(iccMax2c.s`length)")))
 (parsecalc_TCC6 0
  (parsecalc_TCC5-1 nil 3851003979 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parsecalc subtype "(number_fields.+)(iccMax2c.startpos, 8)"
              "naturalnumbers.below(iccMax2c.s`length)")))
 (parsecalc_TCC7 0
  (parsecalc_TCC6-1 nil 3851003979 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (print16 const-decl "uint16" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parsecalc subtype "(number_fields.+)(iccMax2c.startpos, 10)"
              "naturalnumbers.below(iccMax2c.s`length)")))
 (parsecalc_TCC8 0
  (parsecalc_TCC7-1 nil 3851003979 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (print16 const-decl "uint16" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parsecalc subtype "(number_fields.+)(iccMax2c.startpos, 12)"
              "naturalnumbers.below(iccMax2c.s`length)")))
 (parsecalc_TCC9 0
  (parsecalc_TCC11-1 nil 3851003979 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (print16 const-decl "uint16" iccMax2c nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parsecalc subtype "(number_fields.+)(iccMax2c.startpos, 16)"
              "naturalnumbers.below(iccMax2c.s`length)")))
 (parsecalc_TCC10 0
  (parsecalc_TCC8-1 nil 3851307718
   ("" (skeep*)
    (("" (hide-all-but (-1 -2 -3 1 2 3))
      (("" (grind)
        (("" (typepred "endpos") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_u32_u32 application-judgement "int64" integertypes nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (printstr const-decl "void" stdio nil)
    (skip const-decl "void" stdlang nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parsecalc subtype "(number_fields.+)(iccMax2c.startpos, 20)"
              "naturalnumbers.below(iccMax2c.s`length)")))
 (parsecalc_TCC11 0
  (parsecalc_TCC13-1 nil 3853112539
   ("" (skeep*)
    (("" (hide -4 -5 -6 -7 -8 -9 -10 -11)
      (("" (typepred "s`length") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_u32_u32 application-judgement "int64" integertypes nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (printstr const-decl "void" stdio nil)
    (skip const-decl "void" stdlang nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parsecalc subtype "(number_fields.-)(iccMax2c.wsize, 16)"
              "uint32")))
 (parsecalc_TCC12 0
  (parsecalc_TCC8-1 nil 3851003979
   ("" (skeep*)
    (("" (expand "u32div")
      (("" (typepred "ndiv(u32minus(wsize, 16), 8)")
        (("" (hide -6 -7 -8 -9 -10 -11 -12)
          (("" (typepred "s`length") (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (u32div const-decl "uint32" integertypes nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_u32_u32 application-judgement "int64" integertypes nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max32 const-decl "uint32" integertypes nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (calcTag const-decl "uint32" iccMax2c nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (below type-eq-decl nil naturalnumbers nil)
    (index type-eq-decl nil integertypes nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (u32minus const-decl "uint32" integertypes nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (parsecalc subtype
              "(number_fields.+)((number_fields.+)(iccMax2c.startpos, 16), number_fields.*(8, iccMax2c.i))"
              "index")))
 (parsecalc_TCC13 0
  (parsecalc_TCC14-1 nil 3853112539
   ("" (skeep*)
    (("" (expand "u32div")
      (("" (typepred "ndiv(u32minus(wsize, 16), 8)")
        (("" (hide -6 -7 -8 -9 -10 -11 -12) (("" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (u32div const-decl "uint32" integertypes nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (calcTag const-decl "uint32" iccMax2c nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (printstr const-decl "void" stdio nil)
    (skip const-decl "void" stdlang nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (max32 const-decl "uint32" integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_u32_u32 application-judgement "int64" integertypes nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (u32minus const-decl "uint32" integertypes nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parsecalc subtype "iccMax2c.j"
              "naturalnumbers.below(iccMax2c.s`length)")))
 (parsecalc_TCC14 0
  (parsecalc_TCC12-1 nil 3851003979
   ("" (skeep*)
    (("" (expand "u32div")
      (("" (typepred "ndiv(u32minus(wsize, 16), 8)")
        (("" (hide -6 -7 -8 -9 -10 -11 -12) (("" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (u32div const-decl "uint32" integertypes nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (calcTag const-decl "uint32" iccMax2c nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (printstr const-decl "void" stdio nil)
    (skip const-decl "void" stdlang nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (max32 const-decl "uint32" integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_u32_u32 application-judgement "int64" integertypes nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (u32minus const-decl "uint32" integertypes nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (parsecalc subtype "(number_fields.+)(iccMax2c.j, 4)"
              "naturalnumbers.below(iccMax2c.s`length)")))
 (parsecalc_TCC15 0
  (parsecalc_TCC15-1 nil 3853112539 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (u32minus const-decl "uint32" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint16 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (print16 const-decl "uint16" iccMax2c nil)
    (calcTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parsecalc subtype
              "(number_fields.+)(iccMax2c.startpos, iccMax2c.offseti)"
              "index")))
 (parsecalc_TCC16 0
  (parsecalc_TCC16-1 nil 3853199540 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u32minus const-decl "uint32" integertypes nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (print16 const-decl "uint16" iccMax2c nil)
    (calcTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parsecalc subtype
              "((number_fields.+)(iccMax2c.starti, iccMax2c.sizei))"
              "uint32")))
 (parsecalc_TCC17 0
  (parsecalc_TCC16-1 nil 3853112539 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u32minus const-decl "uint32" integertypes nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (uint16 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (print16 const-decl "uint16" iccMax2c nil)
    (calcTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil (parsecalc subtype "iccMax2c.wi" "window")))
 (parsecalc_TCC18 0
  (parsecalc_TCC10-1 nil 3851003979 ("" (termination-tcc) nil nil)
   ((uint32 type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (uint16 type-eq-decl nil integertypes nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (get const-decl "byte" bytestrings nil)
    (exp2 def-decl "posnat" exp2 nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (print16 const-decl "uint16" iccMax2c nil)
    (calcTag const-decl "uint32" iccMax2c nil)
    (max32 const-decl "uint32" integertypes nil)
    (u32minus const-decl "uint32" integertypes nil)
    (u32div const-decl "uint32" integertypes nil)
    (u32plus const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (parsecalc termination
              "iccMax2c.parsecalc(iccMax2c.stackLimit, iccMax2c.s, iccMax2c.wi)"
              "nil")))
 (parsecalc_TCC19 0
  (parsecalc_TCC18-1 nil 3853112539 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (print16 const-decl "uint16" iccMax2c nil)
    (calcTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (u32minus const-decl "uint32" integertypes nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil (parsecalc subtype "0" "naturalnumbers.upto(iccMax2c.E)")))
 (parsecalc_TCC20 0
  (parsecalc_TCC20-1 nil 3853199540 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (minus_u32_i32 application-judgement "int64" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (uint16 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (print16 const-decl "uint16" iccMax2c nil)
    (calcTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (u32minus const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil))
   nil
   (parsecalc subtype
              "((number_fields.+)(iccMax2c.startpos, iccMax2c.Moffset))"
              "uint32")))
 (parsecalc_TCC21 0
  (parsecalc_TCC21-1 nil 3853199540 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (plus_u8_u8 application-judgement "uint16" integertypes nil)
    (minus_u32_i32 application-judgement "int64" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (print16 const-decl "uint16" iccMax2c nil)
    (calcTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (u32minus const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil))
   nil
   (parsecalc subtype
              "((number_fields.+)(iccMax2c.Mstart, iccMax2c.Msize))"
              "uint32")))
 (parsecalc_TCC22 0
  (parsecalc_TCC19-1 nil 3853112539 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u32lshift const-decl "uint32" integertypes nil)
    (bytes2uint32 const-decl "uint32" hex nil)
    (u16lshift const-decl "uint16" integertypes nil)
    (bytes2uint16 const-decl "uint16" hex nil)
    (plus_u8_u8 application-judgement "uint16" integertypes nil)
    (minus_u32_i32 application-judgement "int64" integertypes nil)
    (plus_u16_u16 application-judgement "uint32" integertypes nil)
    (plus_u16_i16 application-judgement "int32" integertypes nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (uint16 type-eq-decl nil integertypes nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (print32 const-decl "uint32" iccMax2c nil)
    (readU32 const-decl "uint32" iccMax2c nil)
    (readU16 const-decl "uint16" iccMax2c nil)
    (print16 const-decl "uint16" iccMax2c nil)
    (calcTag const-decl "uint32" iccMax2c nil)
    (u32div const-decl "uint32" integertypes nil)
    (u32minus const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil))
   nil
   (parsecalc subtype "iccMax2c.Mstart"
              "naturalnumbers.upto(iccMax2c.Mend)")))
 (iccteststring5_TCC1 0
  (iccteststring5_TCC1-1 nil 3853112539 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (iccteststring5 subtype
                   "\"63616C63000000000003000300000000000000000000001866756e630000000000000006696e202000000002646174613f800000646174613f800000646174613f80000061646420000200006f75742000000002\""
                   "bstring")))
 (iccteststring5_TCC2 0
  (iccteststring5_TCC2-1 nil 3853112539 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (iccteststring5 subtype
                   "bytestrings.mk_bytestring(\"63616C63000000000003000300000000000000000000001866756e630000000000000006696e202000000002646174613f800000646174613f800000646174613f80000061646420000200006f75742000000002\")"
                   "hexstring")))
 (test5_TCC1 0
  (test5_TCC1-1 nil 3853112539
   ("" (typepred "iccteststring5`length")
    (("" (name-replace "string5" "iccteststring5`length")
      (("" (grind) nil nil)) nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (index type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (iccteststring5 const-decl "bytestring" iccMax2c nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (test5 subtype "iccMax2c.iccteststring5`length" "uint32")))
 (test5_TCC2 0
  (test5_TCC2-1 nil 3853112539 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "upto(n)" modulo_arithmetic nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (get const-decl "char" gen_strings nil)
    (mk_bytestring const-decl "bytestring" bytestrings nil)
    (max32 const-decl "uint32" integertypes nil)
    (u32div const-decl "uint32" integertypes nil)
    (u32times const-decl "uint32" integertypes nil)
    (get const-decl "byte" bytestrings nil)
    (u8lshift const-decl "uint8" integertypes nil)
    (hexvalue const-decl "byte" hex nil)
    (max8 const-decl "uint8" integertypes nil)
    (hex2byte const-decl "byte" hex nil)
    (hex2bytestring const-decl "bytestring" hex nil)
    (iccteststring5 const-decl "bytestring" iccMax2c nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (test5 subtype "0"
          "naturalnumbers.upto(iccMax2c.iccteststring5`length)"))))

