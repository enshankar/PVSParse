//Code generated using pvs2ir2c
#include "iccMax2c_c.h"


iccMax2c__result_adt_t new_iccMax2c__result_adt(void){
        iccMax2c__result_adt_t tmp = (iccMax2c__result_adt_t) safe_malloc(sizeof(struct iccMax2c__result_adt_s));
        tmp->count = 1;
        return tmp;}

void release_iccMax2c__result_adt(iccMax2c__result_adt_t x){
switch (x->iccMax2c__result_adt_index) {
case 0:  release_iccMax2c__error((iccMax2c__error_t) x); break;
case 1:  release_iccMax2c__value((iccMax2c__value_t) x); break;
}}

void release_iccMax2c__result_adt_ptr(pointer_t x, type_actual_t T){
        release_iccMax2c__result_adt((iccMax2c__result_adt_t)x);
}

iccMax2c__result_adt_t copy_iccMax2c__result_adt(iccMax2c__result_adt_t x){
        iccMax2c__result_adt_t y = new_iccMax2c__result_adt();
        y->iccMax2c__result_adt_index = (uint8_t)x->iccMax2c__result_adt_index;
        y->count = 1;
        return y;}

bool_t equal_iccMax2c__result_adt(iccMax2c__result_adt_t x, iccMax2c__result_adt_t y){
        bool_t tmp = x->iccMax2c__result_adt_index == y->iccMax2c__result_adt_index;
        switch  (x->iccMax2c__result_adt_index) {
                case 0: tmp = tmp && equal_iccMax2c__error((iccMax2c__error_t) x, (iccMax2c__error_t) y); break;
                case 1: tmp = tmp && equal_iccMax2c__value((iccMax2c__value_t) x, (iccMax2c__value_t) y); break;
        }
        return tmp;
}

bool_t equal_iccMax2c__result_adt_ptr(pointer_t x, pointer_t y, actual_iccMax2c__result_adt_t T){
        return equal_iccMax2c__result_adt((iccMax2c__result_adt_t)x, (iccMax2c__result_adt_t)y);
}

actual_iccMax2c__result_adt_t actual_iccMax2c__result_adt(){
        actual_iccMax2c__result_adt_t new = (actual_iccMax2c__result_adt_t)safe_malloc(sizeof(struct actual_iccMax2c__result_adt_s));
        new->equal_ptr = (equal_ptr_t)(*equal_iccMax2c__result_adt_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_iccMax2c__result_adt_ptr);
 

 
        return new;
 };

iccMax2c__result_adt_t update_iccMax2c__result_adt_iccMax2c__result_adt_index(iccMax2c__result_adt_t x, uint8_t v){
        iccMax2c__result_adt_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c__result_adt(x); x->count--;};
        y->iccMax2c__result_adt_index = (uint8_t)v;
        return y;}




iccMax2c__error_t new_iccMax2c__error(void){
        iccMax2c__error_t tmp = (iccMax2c__error_t) safe_malloc(sizeof(struct iccMax2c__error_s));
        tmp->count = 1;
        return tmp;}

void release_iccMax2c__error(iccMax2c__error_t x){
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_iccMax2c__error_ptr(pointer_t x, type_actual_t T){
        release_iccMax2c__error((iccMax2c__error_t)x);
}

iccMax2c__error_t copy_iccMax2c__error(iccMax2c__error_t x){
        iccMax2c__error_t y = new_iccMax2c__error();
        y->iccMax2c__result_adt_index = (uint8_t)x->iccMax2c__result_adt_index;
        y->code = (uint8_t)x->code;
        y->loc = (uint32_t)x->loc;
        y->occ = (uint8_t)x->occ;
        y->count = 1;
        return y;}

bool_t equal_iccMax2c__error(iccMax2c__error_t x, iccMax2c__error_t y){
        bool_t tmp = true;
        tmp = tmp && x->iccMax2c__result_adt_index == y->iccMax2c__result_adt_index;
        tmp = tmp && x->code == y->code;
        tmp = tmp && x->loc == y->loc;
        tmp = tmp && x->occ == y->occ;
        return tmp;}

bool_t equal_iccMax2c__error_ptr(pointer_t x, pointer_t y, actual_iccMax2c__error_t T){
        return equal_iccMax2c__error((iccMax2c__error_t)x, (iccMax2c__error_t)y);
}

actual_iccMax2c__error_t actual_iccMax2c__error(){
        actual_iccMax2c__error_t new = (actual_iccMax2c__error_t)safe_malloc(sizeof(struct actual_iccMax2c__error_s));
        new->equal_ptr = (equal_ptr_t)(*equal_iccMax2c__error_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_iccMax2c__error_ptr);
 

 
        return new;
 };

iccMax2c__error_t update_iccMax2c__error_iccMax2c__result_adt_index(iccMax2c__error_t x, uint8_t v){
        iccMax2c__error_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c__error(x); x->count--;};
        y->iccMax2c__result_adt_index = (uint8_t)v;
        return y;}

iccMax2c__error_t update_iccMax2c__error_code(iccMax2c__error_t x, uint8_t v){
        iccMax2c__error_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c__error(x); x->count--;};
        y->code = (uint8_t)v;
        return y;}

iccMax2c__error_t update_iccMax2c__error_loc(iccMax2c__error_t x, uint32_t v){
        iccMax2c__error_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c__error(x); x->count--;};
        y->loc = (uint32_t)v;
        return y;}

iccMax2c__error_t update_iccMax2c__error_occ(iccMax2c__error_t x, uint8_t v){
        iccMax2c__error_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c__error(x); x->count--;};
        y->occ = (uint8_t)v;
        return y;}




iccMax2c__value_t new_iccMax2c__value(void){
        iccMax2c__value_t tmp = (iccMax2c__value_t) safe_malloc(sizeof(struct iccMax2c__value_s));
        tmp->count = 1;
        return tmp;}

void release_iccMax2c__value(iccMax2c__value_t x){
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_iccMax2c__value_ptr(pointer_t x, type_actual_t T){
        release_iccMax2c__value((iccMax2c__value_t)x);
}

iccMax2c__value_t copy_iccMax2c__value(iccMax2c__value_t x){
        iccMax2c__value_t y = new_iccMax2c__value();
        y->iccMax2c__result_adt_index = (uint8_t)x->iccMax2c__result_adt_index;
        y->vmax = (uint64_t)x->vmax;
        y->vmin = (uint64_t)x->vmin;
        y->count = 1;
        return y;}

bool_t equal_iccMax2c__value(iccMax2c__value_t x, iccMax2c__value_t y){
        bool_t tmp = true;
        tmp = tmp && x->iccMax2c__result_adt_index == y->iccMax2c__result_adt_index;
        tmp = tmp && x->vmax == y->vmax;
        tmp = tmp && x->vmin == y->vmin;
        return tmp;}

bool_t equal_iccMax2c__value_ptr(pointer_t x, pointer_t y, actual_iccMax2c__value_t T){
        return equal_iccMax2c__value((iccMax2c__value_t)x, (iccMax2c__value_t)y);
}

actual_iccMax2c__value_t actual_iccMax2c__value(){
        actual_iccMax2c__value_t new = (actual_iccMax2c__value_t)safe_malloc(sizeof(struct actual_iccMax2c__value_s));
        new->equal_ptr = (equal_ptr_t)(*equal_iccMax2c__value_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_iccMax2c__value_ptr);
 

 
        return new;
 };

iccMax2c__value_t update_iccMax2c__value_iccMax2c__result_adt_index(iccMax2c__value_t x, uint8_t v){
        iccMax2c__value_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c__value(x); x->count--;};
        y->iccMax2c__result_adt_index = (uint8_t)v;
        return y;}

iccMax2c__value_t update_iccMax2c__value_vmax(iccMax2c__value_t x, uint64_t v){
        iccMax2c__value_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c__value(x); x->count--;};
        y->vmax = (uint64_t)v;
        return y;}

iccMax2c__value_t update_iccMax2c__value_vmin(iccMax2c__value_t x, uint64_t v){
        iccMax2c__value_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c__value(x); x->count--;};
        y->vmin = (uint64_t)v;
        return y;}



void release_iccMax2c_funtype_3(iccMax2c_funtype_3_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

iccMax2c_funtype_3_t copy_iccMax2c_funtype_3(iccMax2c_funtype_3_t x){return x->ftbl->cptr(x);}

bool_t equal_iccMax2c_funtype_3(iccMax2c_funtype_3_t x, iccMax2c_funtype_3_t y){
        return false;}

void release_iccMax2c_funtype_4(iccMax2c_funtype_4_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

iccMax2c_funtype_4_t copy_iccMax2c_funtype_4(iccMax2c_funtype_4_t x){return x->ftbl->cptr(x);}

bool_t equal_iccMax2c_funtype_4(iccMax2c_funtype_4_t x, iccMax2c_funtype_4_t y){
        return false;}


iccMax2c_record_5_t new_iccMax2c_record_5(void){
        iccMax2c_record_5_t tmp = (iccMax2c_record_5_t) safe_malloc(sizeof(struct iccMax2c_record_5_s));
        tmp->count = 1;
        return tmp;}

void release_iccMax2c_record_5(iccMax2c_record_5_t x){
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_iccMax2c_record_5_ptr(pointer_t x, type_actual_t T){
        release_iccMax2c_record_5((iccMax2c_record_5_t)x);
}

iccMax2c_record_5_t copy_iccMax2c_record_5(iccMax2c_record_5_t x){
        iccMax2c_record_5_t y = new_iccMax2c_record_5();
        y->project_1 = (uint8_t)x->project_1;
        y->project_2 = (uint32_t)x->project_2;
        y->project_3 = (uint8_t)x->project_3;
        y->count = 1;
        return y;}

bool_t equal_iccMax2c_record_5(iccMax2c_record_5_t x, iccMax2c_record_5_t y){
        bool_t tmp = true;
        tmp = tmp && x->project_1 == y->project_1;
        tmp = tmp && x->project_2 == y->project_2;
        tmp = tmp && x->project_3 == y->project_3;
        return tmp;}

bool_t equal_iccMax2c_record_5_ptr(pointer_t x, pointer_t y, actual_iccMax2c_record_5_t T){
        return equal_iccMax2c_record_5((iccMax2c_record_5_t)x, (iccMax2c_record_5_t)y);
}

actual_iccMax2c_record_5_t actual_iccMax2c_record_5(){
        actual_iccMax2c_record_5_t new = (actual_iccMax2c_record_5_t)safe_malloc(sizeof(struct actual_iccMax2c_record_5_s));
        new->equal_ptr = (equal_ptr_t)(*equal_iccMax2c_record_5_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_iccMax2c_record_5_ptr);
 

 
        return new;
 };

iccMax2c_record_5_t update_iccMax2c_record_5_project_1(iccMax2c_record_5_t x, uint8_t v){
        iccMax2c_record_5_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c_record_5(x); x->count--;};
        y->project_1 = (uint8_t)v;
        return y;}

iccMax2c_record_5_t update_iccMax2c_record_5_project_2(iccMax2c_record_5_t x, uint32_t v){
        iccMax2c_record_5_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c_record_5(x); x->count--;};
        y->project_2 = (uint32_t)v;
        return y;}

iccMax2c_record_5_t update_iccMax2c_record_5_project_3(iccMax2c_record_5_t x, uint8_t v){
        iccMax2c_record_5_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c_record_5(x); x->count--;};
        y->project_3 = (uint8_t)v;
        return y;}



void release_iccMax2c_funtype_6(iccMax2c_funtype_6_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

iccMax2c_funtype_6_t copy_iccMax2c_funtype_6(iccMax2c_funtype_6_t x){return x->ftbl->cptr(x);}

bool_t equal_iccMax2c_funtype_6(iccMax2c_funtype_6_t x, iccMax2c_funtype_6_t y){
        return false;}


iccMax2c_record_7_t new_iccMax2c_record_7(void){
        iccMax2c_record_7_t tmp = (iccMax2c_record_7_t) safe_malloc(sizeof(struct iccMax2c_record_7_s));
        tmp->count = 1;
        return tmp;}

void release_iccMax2c_record_7(iccMax2c_record_7_t x){
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_iccMax2c_record_7_ptr(pointer_t x, type_actual_t T){
        release_iccMax2c_record_7((iccMax2c_record_7_t)x);
}

iccMax2c_record_7_t copy_iccMax2c_record_7(iccMax2c_record_7_t x){
        iccMax2c_record_7_t y = new_iccMax2c_record_7();
        y->project_1 = (uint64_t)x->project_1;
        y->project_2 = (uint64_t)x->project_2;
        y->count = 1;
        return y;}

bool_t equal_iccMax2c_record_7(iccMax2c_record_7_t x, iccMax2c_record_7_t y){
        bool_t tmp = true;
        tmp = tmp && x->project_1 == y->project_1;
        tmp = tmp && x->project_2 == y->project_2;
        return tmp;}

bool_t equal_iccMax2c_record_7_ptr(pointer_t x, pointer_t y, actual_iccMax2c_record_7_t T){
        return equal_iccMax2c_record_7((iccMax2c_record_7_t)x, (iccMax2c_record_7_t)y);
}

actual_iccMax2c_record_7_t actual_iccMax2c_record_7(){
        actual_iccMax2c_record_7_t new = (actual_iccMax2c_record_7_t)safe_malloc(sizeof(struct actual_iccMax2c_record_7_s));
        new->equal_ptr = (equal_ptr_t)(*equal_iccMax2c_record_7_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_iccMax2c_record_7_ptr);
 

 
        return new;
 };

iccMax2c_record_7_t update_iccMax2c_record_7_project_1(iccMax2c_record_7_t x, uint64_t v){
        iccMax2c_record_7_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c_record_7(x); x->count--;};
        y->project_1 = (uint64_t)v;
        return y;}

iccMax2c_record_7_t update_iccMax2c_record_7_project_2(iccMax2c_record_7_t x, uint64_t v){
        iccMax2c_record_7_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c_record_7(x); x->count--;};
        y->project_2 = (uint64_t)v;
        return y;}



void release_iccMax2c_funtype_8(iccMax2c_funtype_8_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

iccMax2c_funtype_8_t copy_iccMax2c_funtype_8(iccMax2c_funtype_8_t x){return x->ftbl->cptr(x);}

bool_t equal_iccMax2c_funtype_8(iccMax2c_funtype_8_t x, iccMax2c_funtype_8_t y){
        return false;}


mpz_ptr_t f_iccMax2c_closure_9(struct iccMax2c_closure_9_s * closure, iccMax2c__result_adt_t bvar){
        mpz_ptr_t result = h_iccMax2c_closure_9(bvar, closure->fvar_1, closure->fvar_2); 
        return result;}

mpz_ptr_t m_iccMax2c_closure_9(struct iccMax2c_closure_9_s * closure, iccMax2c__result_adt_t bvar){
        return h_iccMax2c_closure_9(bvar, closure->fvar_1, closure->fvar_2);}

extern mpz_ptr_t h_iccMax2c_closure_9(iccMax2c__result_adt_t ivar_6, iccMax2c_funtype_6_t ivar_1, iccMax2c_funtype_8_t ivar_3){
        mpz_ptr_t result;
        bool_t ivar_76;
        ivar_6->count++;
        ivar_76 = (bool_t)r_iccMax2c__errorp((iccMax2c__result_adt_t)ivar_6);
        if (ivar_76){ 
             uint8_t ivar_55;
             ivar_6->count++;
             ivar_55 = (uint8_t)iccMax2c__result_adt_code((iccMax2c__result_adt_t)ivar_6);
             uint32_t ivar_56;
             ivar_6->count++;
             ivar_56 = (uint32_t)iccMax2c__result_adt_loc((iccMax2c__result_adt_t)ivar_6);
             uint8_t ivar_57;
             ivar_57 = (uint8_t)iccMax2c__result_adt_occ((iccMax2c__result_adt_t)ivar_6);
             iccMax2c_funtype_6_t ivar_72;
             //copying to iccMax2c_funtype_6 from iccMax2c_funtype_6;
             ivar_72 = (iccMax2c_funtype_6_t)ivar_1;
             if (ivar_72 != NULL) ivar_72->count++;
             result = (mpz_ptr_t)ivar_72->ftbl->mptr(ivar_72, ivar_55, ivar_56, ivar_57);
             ivar_72->ftbl->rptr(ivar_72);
} else {
        
             uint64_t ivar_80;
             ivar_6->count++;
             ivar_80 = (uint64_t)iccMax2c__result_adt_vmax((iccMax2c__result_adt_t)ivar_6);
             uint64_t ivar_81;
             ivar_81 = (uint64_t)iccMax2c__result_adt_vmin((iccMax2c__result_adt_t)ivar_6);
             iccMax2c_funtype_8_t ivar_92;
             //copying to iccMax2c_funtype_8 from iccMax2c_funtype_8;
             ivar_92 = (iccMax2c_funtype_8_t)ivar_3;
             if (ivar_92 != NULL) ivar_92->count++;
             result = (mpz_ptr_t)ivar_92->ftbl->mptr(ivar_92, ivar_80, ivar_81);
             ivar_92->ftbl->rptr(ivar_92);
};

        return result;
}

iccMax2c_closure_9_t new_iccMax2c_closure_9(void){
        static struct iccMax2c_funtype_4_ftbl_s ftbl = {.fptr = (mpz_ptr_t (*)(iccMax2c_funtype_4_t, iccMax2c__result_adt_t))&f_iccMax2c_closure_9, .mptr = (mpz_ptr_t (*)(iccMax2c_funtype_4_t, iccMax2c__result_adt_t))&m_iccMax2c_closure_9, .rptr =  (void (*)(iccMax2c_funtype_4_t))&release_iccMax2c_closure_9, .cptr = (iccMax2c_funtype_4_t (*)(iccMax2c_funtype_4_t))&copy_iccMax2c_closure_9};
        iccMax2c_closure_9_t tmp = (iccMax2c_closure_9_t) safe_malloc(sizeof(struct iccMax2c_closure_9_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_iccMax2c_closure_9(iccMax2c_funtype_4_t closure){
        iccMax2c_closure_9_t x = (iccMax2c_closure_9_t)closure;
        x->count--;
        if (x->count <= 0){
         release_iccMax2c_funtype_6(x->fvar_1);
         release_iccMax2c_funtype_8(x->fvar_2);
        //printf("\nFreeing\n");
        safe_free(x);}}

iccMax2c_closure_9_t copy_iccMax2c_closure_9(iccMax2c_closure_9_t x){
        iccMax2c_closure_9_t y = new_iccMax2c_closure_9();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        if (x->htbl != NULL){
            iccMax2c_funtype_4_htbl_t new_htbl = (iccMax2c_funtype_4_htbl_t) safe_malloc(sizeof(struct iccMax2c_funtype_4_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            iccMax2c_funtype_4_hashentry_t * new_data = (iccMax2c_funtype_4_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct iccMax2c_funtype_4_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct iccMax2c_funtype_4_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


iccMax2c_record_10_t new_iccMax2c_record_10(void){
        iccMax2c_record_10_t tmp = (iccMax2c_record_10_t) safe_malloc(sizeof(struct iccMax2c_record_10_s));
        tmp->count = 1;
        return tmp;}

void release_iccMax2c_record_10(iccMax2c_record_10_t x){
        x->count--;
        if (x->count <= 0){
         release_iccMax2c__result_adt(x->project_4);
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_iccMax2c_record_10_ptr(pointer_t x, type_actual_t T){
        release_iccMax2c_record_10((iccMax2c_record_10_t)x);
}

iccMax2c_record_10_t copy_iccMax2c_record_10(iccMax2c_record_10_t x){
        iccMax2c_record_10_t y = new_iccMax2c_record_10();
        y->project_1 = (uint8_t)x->project_1;
        y->project_2 = (uint32_t)x->project_2;
        y->project_3 = (uint8_t)x->project_3;
        y->project_4 = x->project_4;
        if (y->project_4 != NULL){y->project_4->count++;};
        y->count = 1;
        return y;}

bool_t equal_iccMax2c_record_10(iccMax2c_record_10_t x, iccMax2c_record_10_t y){
        bool_t tmp = true;
        tmp = tmp && x->project_1 == y->project_1;
        tmp = tmp && x->project_2 == y->project_2;
        tmp = tmp && x->project_3 == y->project_3;
        tmp = tmp && equal_iccMax2c__result_adt(x->project_4, y->project_4);
        return tmp;}

bool_t equal_iccMax2c_record_10_ptr(pointer_t x, pointer_t y, actual_iccMax2c_record_10_t T){
        return equal_iccMax2c_record_10((iccMax2c_record_10_t)x, (iccMax2c_record_10_t)y);
}

actual_iccMax2c_record_10_t actual_iccMax2c_record_10(){
        actual_iccMax2c_record_10_t new = (actual_iccMax2c_record_10_t)safe_malloc(sizeof(struct actual_iccMax2c_record_10_s));
        new->equal_ptr = (equal_ptr_t)(*equal_iccMax2c_record_10_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_iccMax2c_record_10_ptr);
 

 
        return new;
 };

iccMax2c_record_10_t update_iccMax2c_record_10_project_1(iccMax2c_record_10_t x, uint8_t v){
        iccMax2c_record_10_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c_record_10(x); x->count--;};
        y->project_1 = (uint8_t)v;
        return y;}

iccMax2c_record_10_t update_iccMax2c_record_10_project_2(iccMax2c_record_10_t x, uint32_t v){
        iccMax2c_record_10_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c_record_10(x); x->count--;};
        y->project_2 = (uint32_t)v;
        return y;}

iccMax2c_record_10_t update_iccMax2c_record_10_project_3(iccMax2c_record_10_t x, uint8_t v){
        iccMax2c_record_10_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c_record_10(x); x->count--;};
        y->project_3 = (uint8_t)v;
        return y;}

iccMax2c_record_10_t update_iccMax2c_record_10_project_4(iccMax2c_record_10_t x, iccMax2c__result_adt_t v){
        iccMax2c_record_10_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->project_4 != NULL){release_iccMax2c__result_adt(x->project_4);};}
        else {y = copy_iccMax2c_record_10(x); x->count--; y->project_4->count--;};
        y->project_4 = (iccMax2c__result_adt_t)v;
        return y;}



void release_iccMax2c_funtype_11(iccMax2c_funtype_11_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

iccMax2c_funtype_11_t copy_iccMax2c_funtype_11(iccMax2c_funtype_11_t x){return x->ftbl->cptr(x);}

bool_t equal_iccMax2c_funtype_11(iccMax2c_funtype_11_t x, iccMax2c_funtype_11_t y){
        return false;}


iccMax2c_record_12_t new_iccMax2c_record_12(void){
        iccMax2c_record_12_t tmp = (iccMax2c_record_12_t) safe_malloc(sizeof(struct iccMax2c_record_12_s));
        tmp->count = 1;
        return tmp;}

void release_iccMax2c_record_12(iccMax2c_record_12_t x){
        x->count--;
        if (x->count <= 0){
         release_iccMax2c__result_adt(x->project_3);
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_iccMax2c_record_12_ptr(pointer_t x, type_actual_t T){
        release_iccMax2c_record_12((iccMax2c_record_12_t)x);
}

iccMax2c_record_12_t copy_iccMax2c_record_12(iccMax2c_record_12_t x){
        iccMax2c_record_12_t y = new_iccMax2c_record_12();
        y->project_1 = (uint64_t)x->project_1;
        y->project_2 = (uint64_t)x->project_2;
        y->project_3 = x->project_3;
        if (y->project_3 != NULL){y->project_3->count++;};
        y->count = 1;
        return y;}

bool_t equal_iccMax2c_record_12(iccMax2c_record_12_t x, iccMax2c_record_12_t y){
        bool_t tmp = true;
        tmp = tmp && x->project_1 == y->project_1;
        tmp = tmp && x->project_2 == y->project_2;
        tmp = tmp && equal_iccMax2c__result_adt(x->project_3, y->project_3);
        return tmp;}

bool_t equal_iccMax2c_record_12_ptr(pointer_t x, pointer_t y, actual_iccMax2c_record_12_t T){
        return equal_iccMax2c_record_12((iccMax2c_record_12_t)x, (iccMax2c_record_12_t)y);
}

actual_iccMax2c_record_12_t actual_iccMax2c_record_12(){
        actual_iccMax2c_record_12_t new = (actual_iccMax2c_record_12_t)safe_malloc(sizeof(struct actual_iccMax2c_record_12_s));
        new->equal_ptr = (equal_ptr_t)(*equal_iccMax2c_record_12_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_iccMax2c_record_12_ptr);
 

 
        return new;
 };

iccMax2c_record_12_t update_iccMax2c_record_12_project_1(iccMax2c_record_12_t x, uint64_t v){
        iccMax2c_record_12_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c_record_12(x); x->count--;};
        y->project_1 = (uint64_t)v;
        return y;}

iccMax2c_record_12_t update_iccMax2c_record_12_project_2(iccMax2c_record_12_t x, uint64_t v){
        iccMax2c_record_12_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c_record_12(x); x->count--;};
        y->project_2 = (uint64_t)v;
        return y;}

iccMax2c_record_12_t update_iccMax2c_record_12_project_3(iccMax2c_record_12_t x, iccMax2c__result_adt_t v){
        iccMax2c_record_12_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->project_3 != NULL){release_iccMax2c__result_adt(x->project_3);};}
        else {y = copy_iccMax2c_record_12(x); x->count--; y->project_3->count--;};
        y->project_3 = (iccMax2c__result_adt_t)v;
        return y;}



void release_iccMax2c_funtype_13(iccMax2c_funtype_13_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

iccMax2c_funtype_13_t copy_iccMax2c_funtype_13(iccMax2c_funtype_13_t x){return x->ftbl->cptr(x);}

bool_t equal_iccMax2c_funtype_13(iccMax2c_funtype_13_t x, iccMax2c_funtype_13_t y){
        return false;}


mpz_ptr_t f_iccMax2c_closure_14(struct iccMax2c_closure_14_s * closure, iccMax2c__result_adt_t bvar){
        mpz_ptr_t result = h_iccMax2c_closure_14(bvar, closure->fvar_1, closure->fvar_2); 
        return result;}

mpz_ptr_t m_iccMax2c_closure_14(struct iccMax2c_closure_14_s * closure, iccMax2c__result_adt_t bvar){
        return h_iccMax2c_closure_14(bvar, closure->fvar_1, closure->fvar_2);}

extern mpz_ptr_t h_iccMax2c_closure_14(iccMax2c__result_adt_t ivar_6, iccMax2c_funtype_11_t ivar_1, iccMax2c_funtype_13_t ivar_3){
        mpz_ptr_t result;
        bool_t ivar_86;
        ivar_6->count++;
        ivar_86 = (bool_t)r_iccMax2c__errorp((iccMax2c__result_adt_t)ivar_6);
        if (ivar_86){ 
             uint8_t ivar_63;
             ivar_6->count++;
             ivar_63 = (uint8_t)iccMax2c__result_adt_code((iccMax2c__result_adt_t)ivar_6);
             uint32_t ivar_64;
             ivar_6->count++;
             ivar_64 = (uint32_t)iccMax2c__result_adt_loc((iccMax2c__result_adt_t)ivar_6);
             uint8_t ivar_65;
             ivar_6->count++;
             ivar_65 = (uint8_t)iccMax2c__result_adt_occ((iccMax2c__result_adt_t)ivar_6);
             iccMax2c_funtype_11_t ivar_81;
             //copying to iccMax2c_funtype_11 from iccMax2c_funtype_11;
             ivar_81 = (iccMax2c_funtype_11_t)ivar_1;
             if (ivar_81 != NULL) ivar_81->count++;
             result = (mpz_ptr_t)ivar_81->ftbl->mptr(ivar_81, ivar_63, ivar_64, ivar_65, ivar_6);
             ivar_81->ftbl->rptr(ivar_81);
} else {
        
             uint64_t ivar_90;
             ivar_6->count++;
             ivar_90 = (uint64_t)iccMax2c__result_adt_vmax((iccMax2c__result_adt_t)ivar_6);
             uint64_t ivar_91;
             ivar_6->count++;
             ivar_91 = (uint64_t)iccMax2c__result_adt_vmin((iccMax2c__result_adt_t)ivar_6);
             iccMax2c_funtype_13_t ivar_103;
             //copying to iccMax2c_funtype_13 from iccMax2c_funtype_13;
             ivar_103 = (iccMax2c_funtype_13_t)ivar_3;
             if (ivar_103 != NULL) ivar_103->count++;
             result = (mpz_ptr_t)ivar_103->ftbl->mptr(ivar_103, ivar_90, ivar_91, ivar_6);
             ivar_103->ftbl->rptr(ivar_103);
};

        return result;
}

iccMax2c_closure_14_t new_iccMax2c_closure_14(void){
        static struct iccMax2c_funtype_4_ftbl_s ftbl = {.fptr = (mpz_ptr_t (*)(iccMax2c_funtype_4_t, iccMax2c__result_adt_t))&f_iccMax2c_closure_14, .mptr = (mpz_ptr_t (*)(iccMax2c_funtype_4_t, iccMax2c__result_adt_t))&m_iccMax2c_closure_14, .rptr =  (void (*)(iccMax2c_funtype_4_t))&release_iccMax2c_closure_14, .cptr = (iccMax2c_funtype_4_t (*)(iccMax2c_funtype_4_t))&copy_iccMax2c_closure_14};
        iccMax2c_closure_14_t tmp = (iccMax2c_closure_14_t) safe_malloc(sizeof(struct iccMax2c_closure_14_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_iccMax2c_closure_14(iccMax2c_funtype_4_t closure){
        iccMax2c_closure_14_t x = (iccMax2c_closure_14_t)closure;
        x->count--;
        if (x->count <= 0){
         release_iccMax2c_funtype_11(x->fvar_1);
         release_iccMax2c_funtype_13(x->fvar_2);
        //printf("\nFreeing\n");
        safe_free(x);}}

iccMax2c_closure_14_t copy_iccMax2c_closure_14(iccMax2c_closure_14_t x){
        iccMax2c_closure_14_t y = new_iccMax2c_closure_14();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        if (x->htbl != NULL){
            iccMax2c_funtype_4_htbl_t new_htbl = (iccMax2c_funtype_4_htbl_t) safe_malloc(sizeof(struct iccMax2c_funtype_4_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            iccMax2c_funtype_4_hashentry_t * new_data = (iccMax2c_funtype_4_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct iccMax2c_funtype_4_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct iccMax2c_funtype_4_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}

void release_iccMax2c_funtype_15(iccMax2c_funtype_15_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

iccMax2c_funtype_15_t copy_iccMax2c_funtype_15(iccMax2c_funtype_15_t x){return x->ftbl->cptr(x);}

bool_t equal_iccMax2c_funtype_15(iccMax2c_funtype_15_t x, iccMax2c_funtype_15_t y){
        return false;}

void release_iccMax2c_funtype_16(iccMax2c_funtype_16_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

iccMax2c_funtype_16_t copy_iccMax2c_funtype_16(iccMax2c_funtype_16_t x){return x->ftbl->cptr(x);}

bool_t equal_iccMax2c_funtype_16(iccMax2c_funtype_16_t x, iccMax2c_funtype_16_t y){
        return false;}

void release_iccMax2c_funtype_17(iccMax2c_funtype_17_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

iccMax2c_funtype_17_t copy_iccMax2c_funtype_17(iccMax2c_funtype_17_t x){return x->ftbl->cptr(x);}

bool_t equal_iccMax2c_funtype_17(iccMax2c_funtype_17_t x, iccMax2c_funtype_17_t y){
        return false;}


ordstruct_adt__ordstruct_adt_t f_iccMax2c_closure_18(struct iccMax2c_closure_18_s * closure, iccMax2c__result_adt_t bvar){
        ordstruct_adt__ordstruct_adt_t result = h_iccMax2c_closure_18(bvar, closure->fvar_1, closure->fvar_2); 
        return result;}

ordstruct_adt__ordstruct_adt_t m_iccMax2c_closure_18(struct iccMax2c_closure_18_s * closure, iccMax2c__result_adt_t bvar){
        return h_iccMax2c_closure_18(bvar, closure->fvar_1, closure->fvar_2);}

extern ordstruct_adt__ordstruct_adt_t h_iccMax2c_closure_18(iccMax2c__result_adt_t ivar_6, iccMax2c_funtype_16_t ivar_1, iccMax2c_funtype_17_t ivar_3){
        ordstruct_adt__ordstruct_adt_t result;
        bool_t ivar_40;
        ivar_6->count++;
        ivar_40 = (bool_t)r_iccMax2c__errorp((iccMax2c__result_adt_t)ivar_6);
        if (ivar_40){ 
             uint8_t ivar_19;
             ivar_6->count++;
             ivar_19 = (uint8_t)iccMax2c__result_adt_code((iccMax2c__result_adt_t)ivar_6);
             uint32_t ivar_20;
             ivar_6->count++;
             ivar_20 = (uint32_t)iccMax2c__result_adt_loc((iccMax2c__result_adt_t)ivar_6);
             uint8_t ivar_21;
             ivar_21 = (uint8_t)iccMax2c__result_adt_occ((iccMax2c__result_adt_t)ivar_6);
             ordstruct_adt__ordstruct_adt_t ivar_34;
             ivar_34 = (ordstruct_adt__ordstruct_adt_t)ivar_1->ftbl->mptr(ivar_1, ivar_19, ivar_20, ivar_21);
             //copying to ordstruct_adt__ordstruct_adt from ordstruct_adt__ordstruct_adt;
             result = (ordstruct_adt__ordstruct_adt_t)ivar_34;
             if (result != NULL) result->count++;
             release_ordstruct_adt__ordstruct_adt(ivar_34);
} else {
        
             uint64_t ivar_44;
             ivar_6->count++;
             ivar_44 = (uint64_t)iccMax2c__result_adt_vmax((iccMax2c__result_adt_t)ivar_6);
             uint64_t ivar_45;
             ivar_45 = (uint64_t)iccMax2c__result_adt_vmin((iccMax2c__result_adt_t)ivar_6);
             ordstruct_adt__ordstruct_adt_t ivar_54;
             ivar_54 = (ordstruct_adt__ordstruct_adt_t)ivar_3->ftbl->mptr(ivar_3, ivar_44, ivar_45);
             //copying to ordstruct_adt__ordstruct_adt from ordstruct_adt__ordstruct_adt;
             result = (ordstruct_adt__ordstruct_adt_t)ivar_54;
             if (result != NULL) result->count++;
             release_ordstruct_adt__ordstruct_adt(ivar_54);
};

        return result;
}

iccMax2c_closure_18_t new_iccMax2c_closure_18(void){
        static struct iccMax2c_funtype_15_ftbl_s ftbl = {.fptr = (ordstruct_adt__ordstruct_adt_t (*)(iccMax2c_funtype_15_t, iccMax2c__result_adt_t))&f_iccMax2c_closure_18, .mptr = (ordstruct_adt__ordstruct_adt_t (*)(iccMax2c_funtype_15_t, iccMax2c__result_adt_t))&m_iccMax2c_closure_18, .rptr =  (void (*)(iccMax2c_funtype_15_t))&release_iccMax2c_closure_18, .cptr = (iccMax2c_funtype_15_t (*)(iccMax2c_funtype_15_t))&copy_iccMax2c_closure_18};
        iccMax2c_closure_18_t tmp = (iccMax2c_closure_18_t) safe_malloc(sizeof(struct iccMax2c_closure_18_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_iccMax2c_closure_18(iccMax2c_funtype_15_t closure){
        iccMax2c_closure_18_t x = (iccMax2c_closure_18_t)closure;
        x->count--;
        if (x->count <= 0){
         release_iccMax2c_funtype_16(x->fvar_1);
         release_iccMax2c_funtype_17(x->fvar_2);
        //printf("\nFreeing\n");
        safe_free(x);}}

iccMax2c_closure_18_t copy_iccMax2c_closure_18(iccMax2c_closure_18_t x){
        iccMax2c_closure_18_t y = new_iccMax2c_closure_18();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        if (x->htbl != NULL){
            iccMax2c_funtype_15_htbl_t new_htbl = (iccMax2c_funtype_15_htbl_t) safe_malloc(sizeof(struct iccMax2c_funtype_15_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            iccMax2c_funtype_15_hashentry_t * new_data = (iccMax2c_funtype_15_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct iccMax2c_funtype_15_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct iccMax2c_funtype_15_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}

void release_iccMax2c_funtype_19(iccMax2c_funtype_19_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

iccMax2c_funtype_19_t copy_iccMax2c_funtype_19(iccMax2c_funtype_19_t x){return x->ftbl->cptr(x);}

bool_t equal_iccMax2c_funtype_19(iccMax2c_funtype_19_t x, iccMax2c_funtype_19_t y){
        return false;}

void release_iccMax2c_funtype_20(iccMax2c_funtype_20_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

iccMax2c_funtype_20_t copy_iccMax2c_funtype_20(iccMax2c_funtype_20_t x){return x->ftbl->cptr(x);}

bool_t equal_iccMax2c_funtype_20(iccMax2c_funtype_20_t x, iccMax2c_funtype_20_t y){
        return false;}


ordstruct_adt__ordstruct_adt_t f_iccMax2c_closure_21(struct iccMax2c_closure_21_s * closure, iccMax2c__result_adt_t bvar){
        ordstruct_adt__ordstruct_adt_t result = h_iccMax2c_closure_21(bvar, closure->fvar_1, closure->fvar_2); 
        return result;}

ordstruct_adt__ordstruct_adt_t m_iccMax2c_closure_21(struct iccMax2c_closure_21_s * closure, iccMax2c__result_adt_t bvar){
        return h_iccMax2c_closure_21(bvar, closure->fvar_1, closure->fvar_2);}

extern ordstruct_adt__ordstruct_adt_t h_iccMax2c_closure_21(iccMax2c__result_adt_t ivar_6, iccMax2c_funtype_19_t ivar_1, iccMax2c_funtype_20_t ivar_3){
        ordstruct_adt__ordstruct_adt_t result;
        bool_t ivar_42;
        ivar_6->count++;
        ivar_42 = (bool_t)r_iccMax2c__errorp((iccMax2c__result_adt_t)ivar_6);
        if (ivar_42){ 
             uint8_t ivar_19;
             ivar_6->count++;
             ivar_19 = (uint8_t)iccMax2c__result_adt_code((iccMax2c__result_adt_t)ivar_6);
             uint32_t ivar_20;
             ivar_6->count++;
             ivar_20 = (uint32_t)iccMax2c__result_adt_loc((iccMax2c__result_adt_t)ivar_6);
             uint8_t ivar_21;
             ivar_6->count++;
             ivar_21 = (uint8_t)iccMax2c__result_adt_occ((iccMax2c__result_adt_t)ivar_6);
             ordstruct_adt__ordstruct_adt_t ivar_35;
             ivar_35 = (ordstruct_adt__ordstruct_adt_t)ivar_1->ftbl->mptr(ivar_1, ivar_19, ivar_20, ivar_21, ivar_6);
             //copying to ordstruct_adt__ordstruct_adt from ordstruct_adt__ordstruct_adt;
             result = (ordstruct_adt__ordstruct_adt_t)ivar_35;
             if (result != NULL) result->count++;
             release_ordstruct_adt__ordstruct_adt(ivar_35);
} else {
        
             uint64_t ivar_46;
             ivar_6->count++;
             ivar_46 = (uint64_t)iccMax2c__result_adt_vmax((iccMax2c__result_adt_t)ivar_6);
             uint64_t ivar_47;
             ivar_6->count++;
             ivar_47 = (uint64_t)iccMax2c__result_adt_vmin((iccMax2c__result_adt_t)ivar_6);
             ordstruct_adt__ordstruct_adt_t ivar_57;
             ivar_57 = (ordstruct_adt__ordstruct_adt_t)ivar_3->ftbl->mptr(ivar_3, ivar_46, ivar_47, ivar_6);
             //copying to ordstruct_adt__ordstruct_adt from ordstruct_adt__ordstruct_adt;
             result = (ordstruct_adt__ordstruct_adt_t)ivar_57;
             if (result != NULL) result->count++;
             release_ordstruct_adt__ordstruct_adt(ivar_57);
};

        return result;
}

iccMax2c_closure_21_t new_iccMax2c_closure_21(void){
        static struct iccMax2c_funtype_15_ftbl_s ftbl = {.fptr = (ordstruct_adt__ordstruct_adt_t (*)(iccMax2c_funtype_15_t, iccMax2c__result_adt_t))&f_iccMax2c_closure_21, .mptr = (ordstruct_adt__ordstruct_adt_t (*)(iccMax2c_funtype_15_t, iccMax2c__result_adt_t))&m_iccMax2c_closure_21, .rptr =  (void (*)(iccMax2c_funtype_15_t))&release_iccMax2c_closure_21, .cptr = (iccMax2c_funtype_15_t (*)(iccMax2c_funtype_15_t))&copy_iccMax2c_closure_21};
        iccMax2c_closure_21_t tmp = (iccMax2c_closure_21_t) safe_malloc(sizeof(struct iccMax2c_closure_21_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_iccMax2c_closure_21(iccMax2c_funtype_15_t closure){
        iccMax2c_closure_21_t x = (iccMax2c_closure_21_t)closure;
        x->count--;
        if (x->count <= 0){
         release_iccMax2c_funtype_19(x->fvar_1);
         release_iccMax2c_funtype_20(x->fvar_2);
        //printf("\nFreeing\n");
        safe_free(x);}}

iccMax2c_closure_21_t copy_iccMax2c_closure_21(iccMax2c_closure_21_t x){
        iccMax2c_closure_21_t y = new_iccMax2c_closure_21();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        if (x->htbl != NULL){
            iccMax2c_funtype_15_htbl_t new_htbl = (iccMax2c_funtype_15_htbl_t) safe_malloc(sizeof(struct iccMax2c_funtype_15_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            iccMax2c_funtype_15_hashentry_t * new_data = (iccMax2c_funtype_15_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct iccMax2c_funtype_15_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct iccMax2c_funtype_15_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


iccMax2c__signature_adt_t new_iccMax2c__signature_adt(void){
        iccMax2c__signature_adt_t tmp = (iccMax2c__signature_adt_t) safe_malloc(sizeof(struct iccMax2c__signature_adt_s));
        tmp->count = 1;
        return tmp;}

void release_iccMax2c__signature_adt(iccMax2c__signature_adt_t x){
switch (x->iccMax2c__signature_adt_index) {
case 1:  release_iccMax2c__inout((iccMax2c__inout_t) x); break;
}}

void release_iccMax2c__signature_adt_ptr(pointer_t x, type_actual_t T){
        release_iccMax2c__signature_adt((iccMax2c__signature_adt_t)x);
}

iccMax2c__signature_adt_t copy_iccMax2c__signature_adt(iccMax2c__signature_adt_t x){
        iccMax2c__signature_adt_t y = new_iccMax2c__signature_adt();
        y->iccMax2c__signature_adt_index = (uint8_t)x->iccMax2c__signature_adt_index;
        y->count = 1;
        return y;}

bool_t equal_iccMax2c__signature_adt(iccMax2c__signature_adt_t x, iccMax2c__signature_adt_t y){
        bool_t tmp = x->iccMax2c__signature_adt_index == y->iccMax2c__signature_adt_index;
        switch  (x->iccMax2c__signature_adt_index) {
                case 1: tmp = tmp && equal_iccMax2c__inout((iccMax2c__inout_t) x, (iccMax2c__inout_t) y); break;
        }
        return tmp;
}

bool_t equal_iccMax2c__signature_adt_ptr(pointer_t x, pointer_t y, actual_iccMax2c__signature_adt_t T){
        return equal_iccMax2c__signature_adt((iccMax2c__signature_adt_t)x, (iccMax2c__signature_adt_t)y);
}

actual_iccMax2c__signature_adt_t actual_iccMax2c__signature_adt(){
        actual_iccMax2c__signature_adt_t new = (actual_iccMax2c__signature_adt_t)safe_malloc(sizeof(struct actual_iccMax2c__signature_adt_s));
        new->equal_ptr = (equal_ptr_t)(*equal_iccMax2c__signature_adt_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_iccMax2c__signature_adt_ptr);
 

 
        return new;
 };

iccMax2c__signature_adt_t update_iccMax2c__signature_adt_iccMax2c__signature_adt_index(iccMax2c__signature_adt_t x, uint8_t v){
        iccMax2c__signature_adt_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c__signature_adt(x); x->count--;};
        y->iccMax2c__signature_adt_index = (uint8_t)v;
        return y;}




iccMax2c__inout_t new_iccMax2c__inout(void){
        iccMax2c__inout_t tmp = (iccMax2c__inout_t) safe_malloc(sizeof(struct iccMax2c__inout_s));
        tmp->count = 1;
        return tmp;}

void release_iccMax2c__inout(iccMax2c__inout_t x){
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_iccMax2c__inout_ptr(pointer_t x, type_actual_t T){
        release_iccMax2c__inout((iccMax2c__inout_t)x);
}

iccMax2c__inout_t copy_iccMax2c__inout(iccMax2c__inout_t x){
        iccMax2c__inout_t y = new_iccMax2c__inout();
        y->iccMax2c__signature_adt_index = (uint8_t)x->iccMax2c__signature_adt_index;
        y->input = (uint64_t)x->input;
        y->output = (uint64_t)x->output;
        y->count = 1;
        return y;}

bool_t equal_iccMax2c__inout(iccMax2c__inout_t x, iccMax2c__inout_t y){
        bool_t tmp = true;
        tmp = tmp && x->iccMax2c__signature_adt_index == y->iccMax2c__signature_adt_index;
        tmp = tmp && x->input == y->input;
        tmp = tmp && x->output == y->output;
        return tmp;}

bool_t equal_iccMax2c__inout_ptr(pointer_t x, pointer_t y, actual_iccMax2c__inout_t T){
        return equal_iccMax2c__inout((iccMax2c__inout_t)x, (iccMax2c__inout_t)y);
}

actual_iccMax2c__inout_t actual_iccMax2c__inout(){
        actual_iccMax2c__inout_t new = (actual_iccMax2c__inout_t)safe_malloc(sizeof(struct actual_iccMax2c__inout_s));
        new->equal_ptr = (equal_ptr_t)(*equal_iccMax2c__inout_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_iccMax2c__inout_ptr);
 

 
        return new;
 };

iccMax2c__inout_t update_iccMax2c__inout_iccMax2c__signature_adt_index(iccMax2c__inout_t x, uint8_t v){
        iccMax2c__inout_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c__inout(x); x->count--;};
        y->iccMax2c__signature_adt_index = (uint8_t)v;
        return y;}

iccMax2c__inout_t update_iccMax2c__inout_input(iccMax2c__inout_t x, uint64_t v){
        iccMax2c__inout_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c__inout(x); x->count--;};
        y->input = (uint64_t)v;
        return y;}

iccMax2c__inout_t update_iccMax2c__inout_output(iccMax2c__inout_t x, uint64_t v){
        iccMax2c__inout_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c__inout(x); x->count--;};
        y->output = (uint64_t)v;
        return y;}



void release_iccMax2c_funtype_24(iccMax2c_funtype_24_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

iccMax2c_funtype_24_t copy_iccMax2c_funtype_24(iccMax2c_funtype_24_t x){return x->ftbl->cptr(x);}

bool_t equal_iccMax2c_funtype_24(iccMax2c_funtype_24_t x, iccMax2c_funtype_24_t y){
        return false;}

void release_iccMax2c_funtype_25(iccMax2c_funtype_25_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

iccMax2c_funtype_25_t copy_iccMax2c_funtype_25(iccMax2c_funtype_25_t x){return x->ftbl->cptr(x);}

bool_t equal_iccMax2c_funtype_25(iccMax2c_funtype_25_t x, iccMax2c_funtype_25_t y){
        return false;}


mpz_ptr_t f_iccMax2c_closure_26(struct iccMax2c_closure_26_s * closure, iccMax2c__signature_adt_t bvar){
        mpz_ptr_t result = h_iccMax2c_closure_26(bvar, closure->fvar_1, closure->fvar_2); 
        return result;}

mpz_ptr_t m_iccMax2c_closure_26(struct iccMax2c_closure_26_s * closure, iccMax2c__signature_adt_t bvar){
        return h_iccMax2c_closure_26(bvar, closure->fvar_1, closure->fvar_2);}

extern mpz_ptr_t h_iccMax2c_closure_26(iccMax2c__signature_adt_t ivar_5, iccMax2c_funtype_8_t ivar_2, mpz_ptr_t ivar_1){
        mpz_ptr_t result;
        bool_t ivar_33;
        ivar_5->count++;
        ivar_33 = (bool_t)r_iccMax2c__undefinedp((iccMax2c__signature_adt_t)ivar_5);
        if (ivar_33){ 
             release_iccMax2c__signature_adt(ivar_5);
             //copying to mpz from mpz;
             mpz_mk_set(result, ivar_1);
} else {
        
             uint64_t ivar_37;
             ivar_5->count++;
             ivar_37 = (uint64_t)iccMax2c__signature_adt_input((iccMax2c__signature_adt_t)ivar_5);
             uint64_t ivar_38;
             ivar_38 = (uint64_t)iccMax2c__signature_adt_output((iccMax2c__signature_adt_t)ivar_5);
             iccMax2c_funtype_8_t ivar_49;
             //copying to iccMax2c_funtype_8 from iccMax2c_funtype_8;
             ivar_49 = (iccMax2c_funtype_8_t)ivar_2;
             if (ivar_49 != NULL) ivar_49->count++;
             result = (mpz_ptr_t)ivar_49->ftbl->mptr(ivar_49, ivar_37, ivar_38);
             ivar_49->ftbl->rptr(ivar_49);
};

        return result;
}

iccMax2c_closure_26_t new_iccMax2c_closure_26(void){
        static struct iccMax2c_funtype_25_ftbl_s ftbl = {.fptr = (mpz_ptr_t (*)(iccMax2c_funtype_25_t, iccMax2c__signature_adt_t))&f_iccMax2c_closure_26, .mptr = (mpz_ptr_t (*)(iccMax2c_funtype_25_t, iccMax2c__signature_adt_t))&m_iccMax2c_closure_26, .rptr =  (void (*)(iccMax2c_funtype_25_t))&release_iccMax2c_closure_26, .cptr = (iccMax2c_funtype_25_t (*)(iccMax2c_funtype_25_t))&copy_iccMax2c_closure_26};
        iccMax2c_closure_26_t tmp = (iccMax2c_closure_26_t) safe_malloc(sizeof(struct iccMax2c_closure_26_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        mpz_init(tmp->fvar_2);
        return tmp;}

void release_iccMax2c_closure_26(iccMax2c_funtype_25_t closure){
        iccMax2c_closure_26_t x = (iccMax2c_closure_26_t)closure;
        x->count--;
        if (x->count <= 0){
         release_iccMax2c_funtype_8(x->fvar_1);
        //printf("\nFreeing\n");
        safe_free(x);}}

iccMax2c_closure_26_t copy_iccMax2c_closure_26(iccMax2c_closure_26_t x){
        iccMax2c_closure_26_t y = new_iccMax2c_closure_26();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        mpz_set(y->fvar_2, x->fvar_2);
        if (x->htbl != NULL){
            iccMax2c_funtype_25_htbl_t new_htbl = (iccMax2c_funtype_25_htbl_t) safe_malloc(sizeof(struct iccMax2c_funtype_25_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            iccMax2c_funtype_25_hashentry_t * new_data = (iccMax2c_funtype_25_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct iccMax2c_funtype_25_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct iccMax2c_funtype_25_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


iccMax2c_record_27_t new_iccMax2c_record_27(void){
        iccMax2c_record_27_t tmp = (iccMax2c_record_27_t) safe_malloc(sizeof(struct iccMax2c_record_27_s));
        tmp->count = 1;
        return tmp;}

void release_iccMax2c_record_27(iccMax2c_record_27_t x){
        x->count--;
        if (x->count <= 0){
         release_iccMax2c__signature_adt(x->project_3);
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_iccMax2c_record_27_ptr(pointer_t x, type_actual_t T){
        release_iccMax2c_record_27((iccMax2c_record_27_t)x);
}

iccMax2c_record_27_t copy_iccMax2c_record_27(iccMax2c_record_27_t x){
        iccMax2c_record_27_t y = new_iccMax2c_record_27();
        y->project_1 = (uint64_t)x->project_1;
        y->project_2 = (uint64_t)x->project_2;
        y->project_3 = x->project_3;
        if (y->project_3 != NULL){y->project_3->count++;};
        y->count = 1;
        return y;}

bool_t equal_iccMax2c_record_27(iccMax2c_record_27_t x, iccMax2c_record_27_t y){
        bool_t tmp = true;
        tmp = tmp && x->project_1 == y->project_1;
        tmp = tmp && x->project_2 == y->project_2;
        tmp = tmp && equal_iccMax2c__signature_adt(x->project_3, y->project_3);
        return tmp;}

bool_t equal_iccMax2c_record_27_ptr(pointer_t x, pointer_t y, actual_iccMax2c_record_27_t T){
        return equal_iccMax2c_record_27((iccMax2c_record_27_t)x, (iccMax2c_record_27_t)y);
}

actual_iccMax2c_record_27_t actual_iccMax2c_record_27(){
        actual_iccMax2c_record_27_t new = (actual_iccMax2c_record_27_t)safe_malloc(sizeof(struct actual_iccMax2c_record_27_s));
        new->equal_ptr = (equal_ptr_t)(*equal_iccMax2c_record_27_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_iccMax2c_record_27_ptr);
 

 
        return new;
 };

iccMax2c_record_27_t update_iccMax2c_record_27_project_1(iccMax2c_record_27_t x, uint64_t v){
        iccMax2c_record_27_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c_record_27(x); x->count--;};
        y->project_1 = (uint64_t)v;
        return y;}

iccMax2c_record_27_t update_iccMax2c_record_27_project_2(iccMax2c_record_27_t x, uint64_t v){
        iccMax2c_record_27_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c_record_27(x); x->count--;};
        y->project_2 = (uint64_t)v;
        return y;}

iccMax2c_record_27_t update_iccMax2c_record_27_project_3(iccMax2c_record_27_t x, iccMax2c__signature_adt_t v){
        iccMax2c_record_27_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->project_3 != NULL){release_iccMax2c__signature_adt(x->project_3);};}
        else {y = copy_iccMax2c_record_27(x); x->count--; y->project_3->count--;};
        y->project_3 = (iccMax2c__signature_adt_t)v;
        return y;}



void release_iccMax2c_funtype_28(iccMax2c_funtype_28_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

iccMax2c_funtype_28_t copy_iccMax2c_funtype_28(iccMax2c_funtype_28_t x){return x->ftbl->cptr(x);}

bool_t equal_iccMax2c_funtype_28(iccMax2c_funtype_28_t x, iccMax2c_funtype_28_t y){
        return false;}


mpz_ptr_t f_iccMax2c_closure_29(struct iccMax2c_closure_29_s * closure, iccMax2c__signature_adt_t bvar){
        mpz_ptr_t result = h_iccMax2c_closure_29(bvar, closure->fvar_1, closure->fvar_2); 
        return result;}

mpz_ptr_t m_iccMax2c_closure_29(struct iccMax2c_closure_29_s * closure, iccMax2c__signature_adt_t bvar){
        return h_iccMax2c_closure_29(bvar, closure->fvar_1, closure->fvar_2);}

extern mpz_ptr_t h_iccMax2c_closure_29(iccMax2c__signature_adt_t ivar_6, iccMax2c_funtype_25_t ivar_1, iccMax2c_funtype_28_t ivar_3){
        mpz_ptr_t result;
        bool_t ivar_56;
        ivar_6->count++;
        ivar_56 = (bool_t)r_iccMax2c__undefinedp((iccMax2c__signature_adt_t)ivar_6);
        if (ivar_56){ 
             iccMax2c_funtype_25_t ivar_54;
             //copying to iccMax2c_funtype_25 from iccMax2c_funtype_25;
             ivar_54 = (iccMax2c_funtype_25_t)ivar_1;
             if (ivar_54 != NULL) ivar_54->count++;
             result = (mpz_ptr_t)ivar_54->ftbl->fptr(ivar_54, ivar_6);
             ivar_54->ftbl->rptr(ivar_54);
} else {
        
             uint64_t ivar_60;
             ivar_6->count++;
             ivar_60 = (uint64_t)iccMax2c__signature_adt_input((iccMax2c__signature_adt_t)ivar_6);
             uint64_t ivar_61;
             ivar_6->count++;
             ivar_61 = (uint64_t)iccMax2c__signature_adt_output((iccMax2c__signature_adt_t)ivar_6);
             iccMax2c_funtype_28_t ivar_73;
             //copying to iccMax2c_funtype_28 from iccMax2c_funtype_28;
             ivar_73 = (iccMax2c_funtype_28_t)ivar_3;
             if (ivar_73 != NULL) ivar_73->count++;
             result = (mpz_ptr_t)ivar_73->ftbl->mptr(ivar_73, ivar_60, ivar_61, ivar_6);
             ivar_73->ftbl->rptr(ivar_73);
};

        return result;
}

iccMax2c_closure_29_t new_iccMax2c_closure_29(void){
        static struct iccMax2c_funtype_25_ftbl_s ftbl = {.fptr = (mpz_ptr_t (*)(iccMax2c_funtype_25_t, iccMax2c__signature_adt_t))&f_iccMax2c_closure_29, .mptr = (mpz_ptr_t (*)(iccMax2c_funtype_25_t, iccMax2c__signature_adt_t))&m_iccMax2c_closure_29, .rptr =  (void (*)(iccMax2c_funtype_25_t))&release_iccMax2c_closure_29, .cptr = (iccMax2c_funtype_25_t (*)(iccMax2c_funtype_25_t))&copy_iccMax2c_closure_29};
        iccMax2c_closure_29_t tmp = (iccMax2c_closure_29_t) safe_malloc(sizeof(struct iccMax2c_closure_29_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_iccMax2c_closure_29(iccMax2c_funtype_25_t closure){
        iccMax2c_closure_29_t x = (iccMax2c_closure_29_t)closure;
        x->count--;
        if (x->count <= 0){
         release_iccMax2c_funtype_25(x->fvar_1);
         release_iccMax2c_funtype_28(x->fvar_2);
        //printf("\nFreeing\n");
        safe_free(x);}}

iccMax2c_closure_29_t copy_iccMax2c_closure_29(iccMax2c_closure_29_t x){
        iccMax2c_closure_29_t y = new_iccMax2c_closure_29();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        if (x->htbl != NULL){
            iccMax2c_funtype_25_htbl_t new_htbl = (iccMax2c_funtype_25_htbl_t) safe_malloc(sizeof(struct iccMax2c_funtype_25_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            iccMax2c_funtype_25_hashentry_t * new_data = (iccMax2c_funtype_25_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct iccMax2c_funtype_25_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct iccMax2c_funtype_25_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}

void release_iccMax2c_funtype_30(iccMax2c_funtype_30_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

iccMax2c_funtype_30_t copy_iccMax2c_funtype_30(iccMax2c_funtype_30_t x){return x->ftbl->cptr(x);}

bool_t equal_iccMax2c_funtype_30(iccMax2c_funtype_30_t x, iccMax2c_funtype_30_t y){
        return false;}


ordstruct_adt__ordstruct_adt_t f_iccMax2c_closure_31(struct iccMax2c_closure_31_s * closure, iccMax2c__signature_adt_t bvar){
        ordstruct_adt__ordstruct_adt_t result = h_iccMax2c_closure_31(bvar, closure->fvar_1, closure->fvar_2); 
        return result;}

ordstruct_adt__ordstruct_adt_t m_iccMax2c_closure_31(struct iccMax2c_closure_31_s * closure, iccMax2c__signature_adt_t bvar){
        return h_iccMax2c_closure_31(bvar, closure->fvar_1, closure->fvar_2);}

extern ordstruct_adt__ordstruct_adt_t h_iccMax2c_closure_31(iccMax2c__signature_adt_t ivar_5, iccMax2c_funtype_17_t ivar_2, ordstruct_adt__ordstruct_adt_t ivar_1){
        ordstruct_adt__ordstruct_adt_t result;
        bool_t ivar_17;
        ivar_5->count++;
        ivar_17 = (bool_t)r_iccMax2c__undefinedp((iccMax2c__signature_adt_t)ivar_5);
        if (ivar_17){ 
             release_iccMax2c__signature_adt(ivar_5);
             //copying to ordstruct_adt__ordstruct_adt from ordstruct_adt__ordstruct_adt;
             result = (ordstruct_adt__ordstruct_adt_t)ivar_1;
             if (result != NULL) result->count++;
} else {
        
             uint64_t ivar_21;
             ivar_5->count++;
             ivar_21 = (uint64_t)iccMax2c__signature_adt_input((iccMax2c__signature_adt_t)ivar_5);
             uint64_t ivar_22;
             ivar_22 = (uint64_t)iccMax2c__signature_adt_output((iccMax2c__signature_adt_t)ivar_5);
             ordstruct_adt__ordstruct_adt_t ivar_31;
             ivar_31 = (ordstruct_adt__ordstruct_adt_t)ivar_2->ftbl->mptr(ivar_2, ivar_21, ivar_22);
             //copying to ordstruct_adt__ordstruct_adt from ordstruct_adt__ordstruct_adt;
             result = (ordstruct_adt__ordstruct_adt_t)ivar_31;
             if (result != NULL) result->count++;
             release_ordstruct_adt__ordstruct_adt(ivar_31);
};

        return result;
}

iccMax2c_closure_31_t new_iccMax2c_closure_31(void){
        static struct iccMax2c_funtype_30_ftbl_s ftbl = {.fptr = (ordstruct_adt__ordstruct_adt_t (*)(iccMax2c_funtype_30_t, iccMax2c__signature_adt_t))&f_iccMax2c_closure_31, .mptr = (ordstruct_adt__ordstruct_adt_t (*)(iccMax2c_funtype_30_t, iccMax2c__signature_adt_t))&m_iccMax2c_closure_31, .rptr =  (void (*)(iccMax2c_funtype_30_t))&release_iccMax2c_closure_31, .cptr = (iccMax2c_funtype_30_t (*)(iccMax2c_funtype_30_t))&copy_iccMax2c_closure_31};
        iccMax2c_closure_31_t tmp = (iccMax2c_closure_31_t) safe_malloc(sizeof(struct iccMax2c_closure_31_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_iccMax2c_closure_31(iccMax2c_funtype_30_t closure){
        iccMax2c_closure_31_t x = (iccMax2c_closure_31_t)closure;
        x->count--;
        if (x->count <= 0){
         release_iccMax2c_funtype_17(x->fvar_1);
         release_ordstruct_adt__ordstruct_adt(x->fvar_2);
        //printf("\nFreeing\n");
        safe_free(x);}}

iccMax2c_closure_31_t copy_iccMax2c_closure_31(iccMax2c_closure_31_t x){
        iccMax2c_closure_31_t y = new_iccMax2c_closure_31();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        if (x->htbl != NULL){
            iccMax2c_funtype_30_htbl_t new_htbl = (iccMax2c_funtype_30_htbl_t) safe_malloc(sizeof(struct iccMax2c_funtype_30_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            iccMax2c_funtype_30_hashentry_t * new_data = (iccMax2c_funtype_30_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct iccMax2c_funtype_30_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct iccMax2c_funtype_30_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}

void release_iccMax2c_funtype_32(iccMax2c_funtype_32_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

iccMax2c_funtype_32_t copy_iccMax2c_funtype_32(iccMax2c_funtype_32_t x){return x->ftbl->cptr(x);}

bool_t equal_iccMax2c_funtype_32(iccMax2c_funtype_32_t x, iccMax2c_funtype_32_t y){
        return false;}


ordstruct_adt__ordstruct_adt_t f_iccMax2c_closure_33(struct iccMax2c_closure_33_s * closure, iccMax2c__signature_adt_t bvar){
        ordstruct_adt__ordstruct_adt_t result = h_iccMax2c_closure_33(bvar, closure->fvar_1, closure->fvar_2); 
        return result;}

ordstruct_adt__ordstruct_adt_t m_iccMax2c_closure_33(struct iccMax2c_closure_33_s * closure, iccMax2c__signature_adt_t bvar){
        return h_iccMax2c_closure_33(bvar, closure->fvar_1, closure->fvar_2);}

extern ordstruct_adt__ordstruct_adt_t h_iccMax2c_closure_33(iccMax2c__signature_adt_t ivar_6, iccMax2c_funtype_30_t ivar_1, iccMax2c_funtype_32_t ivar_3){
        ordstruct_adt__ordstruct_adt_t result;
        bool_t ivar_24;
        ivar_6->count++;
        ivar_24 = (bool_t)r_iccMax2c__undefinedp((iccMax2c__signature_adt_t)ivar_6);
        if (ivar_24){ 
             ordstruct_adt__ordstruct_adt_t ivar_20;
             ivar_20 = (ordstruct_adt__ordstruct_adt_t)ivar_1->ftbl->fptr(ivar_1, ivar_6);
             //copying to ordstruct_adt__ordstruct_adt from ordstruct_adt__ordstruct_adt;
             result = (ordstruct_adt__ordstruct_adt_t)ivar_20;
             if (result != NULL) result->count++;
             release_ordstruct_adt__ordstruct_adt(ivar_20);
} else {
        
             uint64_t ivar_28;
             ivar_6->count++;
             ivar_28 = (uint64_t)iccMax2c__signature_adt_input((iccMax2c__signature_adt_t)ivar_6);
             uint64_t ivar_29;
             ivar_6->count++;
             ivar_29 = (uint64_t)iccMax2c__signature_adt_output((iccMax2c__signature_adt_t)ivar_6);
             ordstruct_adt__ordstruct_adt_t ivar_39;
             ivar_39 = (ordstruct_adt__ordstruct_adt_t)ivar_3->ftbl->mptr(ivar_3, ivar_28, ivar_29, ivar_6);
             //copying to ordstruct_adt__ordstruct_adt from ordstruct_adt__ordstruct_adt;
             result = (ordstruct_adt__ordstruct_adt_t)ivar_39;
             if (result != NULL) result->count++;
             release_ordstruct_adt__ordstruct_adt(ivar_39);
};

        return result;
}

iccMax2c_closure_33_t new_iccMax2c_closure_33(void){
        static struct iccMax2c_funtype_30_ftbl_s ftbl = {.fptr = (ordstruct_adt__ordstruct_adt_t (*)(iccMax2c_funtype_30_t, iccMax2c__signature_adt_t))&f_iccMax2c_closure_33, .mptr = (ordstruct_adt__ordstruct_adt_t (*)(iccMax2c_funtype_30_t, iccMax2c__signature_adt_t))&m_iccMax2c_closure_33, .rptr =  (void (*)(iccMax2c_funtype_30_t))&release_iccMax2c_closure_33, .cptr = (iccMax2c_funtype_30_t (*)(iccMax2c_funtype_30_t))&copy_iccMax2c_closure_33};
        iccMax2c_closure_33_t tmp = (iccMax2c_closure_33_t) safe_malloc(sizeof(struct iccMax2c_closure_33_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_iccMax2c_closure_33(iccMax2c_funtype_30_t closure){
        iccMax2c_closure_33_t x = (iccMax2c_closure_33_t)closure;
        x->count--;
        if (x->count <= 0){
         release_iccMax2c_funtype_30(x->fvar_1);
         release_iccMax2c_funtype_32(x->fvar_2);
        //printf("\nFreeing\n");
        safe_free(x);}}

iccMax2c_closure_33_t copy_iccMax2c_closure_33(iccMax2c_closure_33_t x){
        iccMax2c_closure_33_t y = new_iccMax2c_closure_33();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        if (x->htbl != NULL){
            iccMax2c_funtype_30_htbl_t new_htbl = (iccMax2c_funtype_30_htbl_t) safe_malloc(sizeof(struct iccMax2c_funtype_30_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            iccMax2c_funtype_30_hashentry_t * new_data = (iccMax2c_funtype_30_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct iccMax2c_funtype_30_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct iccMax2c_funtype_30_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


iccMax2c_array_34_t new_iccMax2c_array_34(uint32_t size){
        iccMax2c_array_34_t tmp = (iccMax2c_array_34_t) safe_malloc(sizeof(struct iccMax2c_array_34_s) + (size * sizeof(iccMax2c__result_adt_t)));
        tmp->count = 1;
        tmp->size = size;
        tmp->max = size;
        return tmp;}

void release_iccMax2c_array_34(iccMax2c_array_34_t x){
        x->count--;
        if (x->count <= 0){
                for (int i = 0; i < x->size; i++){release_iccMax2c__result_adt(x->elems[i]);};
        //printf("\nFreeing\n");
        safe_free(x);}
}

void release_iccMax2c_array_34_ptr(pointer_t x, type_actual_t T){
        release_iccMax2c_array_34((iccMax2c_array_34_t)x);
}

iccMax2c_array_34_t copy_iccMax2c_array_34(iccMax2c_array_34_t x){
        iccMax2c_array_34_t tmp = new_iccMax2c_array_34(x->size);
        tmp->count = 1;
        for (uint32_t i = 0; i < x->size; i++){tmp->elems[i] = x->elems[i];
                x->elems[i]->count++;};
         return tmp;}

bool_t equal_iccMax2c_array_34(iccMax2c_array_34_t x, iccMax2c_array_34_t y){
        bool_t tmp = true;
        uint32_t i = 0;
        while (i < x->size && tmp){tmp = equal_iccMax2c__result_adt(x->elems[i], y->elems[i]);};
        return tmp;}

bool_t equal_iccMax2c_array_34_ptr(pointer_t x, pointer_t y, type_actual_t T){
        return equal_iccMax2c_array_34((iccMax2c_array_34_t)x, (iccMax2c_array_34_t)y);
}

actual_iccMax2c_array_34_t actual_iccMax2c_array_34(){
        actual_iccMax2c_array_34_t new = (actual_iccMax2c_array_34_t)safe_malloc(sizeof(struct actual_iccMax2c_array_34_s));
        new->equal_ptr = (equal_ptr_t)(*equal_iccMax2c_array_34_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_iccMax2c_array_34_ptr);
 

 
        return new;
 };

iccMax2c_array_34_t update_iccMax2c_array_34(iccMax2c_array_34_t x, uint32_t i, iccMax2c__result_adt_t v){
         iccMax2c_array_34_t y;
         if (x->count == 1){y = x;}
                 else {y = copy_iccMax2c_array_34(x);
                      x->count--;};
        iccMax2c__result_adt_t * yelems = y->elems;
        if (v != NULL){v->count++;}
        if (yelems[i] != NULL){release_iccMax2c__result_adt(yelems[i]);};
         yelems[i] = v;
         return y;}

iccMax2c_array_34_t upgrade_iccMax2c_array_34(iccMax2c_array_34_t x, uint32_t i, iccMax2c__result_adt_t v){
         iccMax2c_array_34_t y;
         if (x->count == 1 && i < x->max){y = x;}
                 else if (i > x->max){uint32_t newmax = x->max <= UINT32_MAX/2 ? 2*x->max: UINT32_MAX;
                y = safe_malloc(sizeof(struct iccMax2c_array_34_s) + (newmax * sizeof(iccMax2c__result_adt_t)));
                y->count = 1;
                y->size = i+1;
                y->max = newmax;
                release_iccMax2c_array_34(x);} else {y = copy_iccMax2c_array_34(x);
                      x->count--;};
        iccMax2c__result_adt_t * yelems = y->elems;
        if (v != NULL){v->count++;}
        if (yelems[i] != NULL){release_iccMax2c__result_adt(yelems[i]);};
         yelems[i] = v;
         return y;}




iccMax2c_record_35_t new_iccMax2c_record_35(void){
        iccMax2c_record_35_t tmp = (iccMax2c_record_35_t) safe_malloc(sizeof(struct iccMax2c_record_35_s));
        tmp->count = 1;
        return tmp;}

void release_iccMax2c_record_35(iccMax2c_record_35_t x){
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_iccMax2c_record_35_ptr(pointer_t x, type_actual_t T){
        release_iccMax2c_record_35((iccMax2c_record_35_t)x);
}

iccMax2c_record_35_t copy_iccMax2c_record_35(iccMax2c_record_35_t x){
        iccMax2c_record_35_t y = new_iccMax2c_record_35();
        y->endpos = (uint32_t)x->endpos;
        y->startpos = (uint32_t)x->startpos;
        y->count = 1;
        return y;}

bool_t equal_iccMax2c_record_35(iccMax2c_record_35_t x, iccMax2c_record_35_t y){
        bool_t tmp = true;
        tmp = tmp && x->endpos == y->endpos;
        tmp = tmp && x->startpos == y->startpos;
        return tmp;}

bool_t equal_iccMax2c_record_35_ptr(pointer_t x, pointer_t y, actual_iccMax2c_record_35_t T){
        return equal_iccMax2c_record_35((iccMax2c_record_35_t)x, (iccMax2c_record_35_t)y);
}

actual_iccMax2c_record_35_t actual_iccMax2c_record_35(){
        actual_iccMax2c_record_35_t new = (actual_iccMax2c_record_35_t)safe_malloc(sizeof(struct actual_iccMax2c_record_35_s));
        new->equal_ptr = (equal_ptr_t)(*equal_iccMax2c_record_35_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_iccMax2c_record_35_ptr);
 

 
        return new;
 };

iccMax2c_record_35_t update_iccMax2c_record_35_endpos(iccMax2c_record_35_t x, uint32_t v){
        iccMax2c_record_35_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c_record_35(x); x->count--;};
        y->endpos = (uint32_t)v;
        return y;}

iccMax2c_record_35_t update_iccMax2c_record_35_startpos(iccMax2c_record_35_t x, uint32_t v){
        iccMax2c_record_35_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c_record_35(x); x->count--;};
        y->startpos = (uint32_t)v;
        return y;}




iccMax2c_array_36_t new_iccMax2c_array_36(uint32_t size){
        iccMax2c_array_36_t tmp = (iccMax2c_array_36_t) safe_malloc(sizeof(struct iccMax2c_array_36_s) + (size * sizeof(iccMax2c_record_35_t)));
        tmp->count = 1;
        tmp->size = size;
        tmp->max = size;
        return tmp;}

void release_iccMax2c_array_36(iccMax2c_array_36_t x){
        x->count--;
        if (x->count <= 0){
                for (int i = 0; i < x->size; i++){release_iccMax2c_record_35(x->elems[i]);};
        //printf("\nFreeing\n");
        safe_free(x);}
}

void release_iccMax2c_array_36_ptr(pointer_t x, type_actual_t T){
        release_iccMax2c_array_36((iccMax2c_array_36_t)x);
}

iccMax2c_array_36_t copy_iccMax2c_array_36(iccMax2c_array_36_t x){
        iccMax2c_array_36_t tmp = new_iccMax2c_array_36(x->size);
        tmp->count = 1;
        for (uint32_t i = 0; i < x->size; i++){tmp->elems[i] = x->elems[i];
                x->elems[i]->count++;};
         return tmp;}

bool_t equal_iccMax2c_array_36(iccMax2c_array_36_t x, iccMax2c_array_36_t y){
        bool_t tmp = true;
        uint32_t i = 0;
        while (i < x->size && tmp){tmp = equal_iccMax2c_record_35(x->elems[i], y->elems[i]);};
        return tmp;}

bool_t equal_iccMax2c_array_36_ptr(pointer_t x, pointer_t y, type_actual_t T){
        return equal_iccMax2c_array_36((iccMax2c_array_36_t)x, (iccMax2c_array_36_t)y);
}

actual_iccMax2c_array_36_t actual_iccMax2c_array_36(){
        actual_iccMax2c_array_36_t new = (actual_iccMax2c_array_36_t)safe_malloc(sizeof(struct actual_iccMax2c_array_36_s));
        new->equal_ptr = (equal_ptr_t)(*equal_iccMax2c_array_36_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_iccMax2c_array_36_ptr);
 

 
        return new;
 };

iccMax2c_array_36_t update_iccMax2c_array_36(iccMax2c_array_36_t x, uint32_t i, iccMax2c_record_35_t v){
         iccMax2c_array_36_t y;
         if (x->count == 1){y = x;}
                 else {y = copy_iccMax2c_array_36(x);
                      x->count--;};
        iccMax2c_record_35_t * yelems = y->elems;
        if (v != NULL){v->count++;}
        if (yelems[i] != NULL){release_iccMax2c_record_35(yelems[i]);};
         yelems[i] = v;
         return y;}

iccMax2c_array_36_t upgrade_iccMax2c_array_36(iccMax2c_array_36_t x, uint32_t i, iccMax2c_record_35_t v){
         iccMax2c_array_36_t y;
         if (x->count == 1 && i < x->max){y = x;}
                 else if (i > x->max){uint32_t newmax = x->max <= UINT32_MAX/2 ? 2*x->max: UINT32_MAX;
                y = safe_malloc(sizeof(struct iccMax2c_array_36_s) + (newmax * sizeof(iccMax2c_record_35_t)));
                y->count = 1;
                y->size = i+1;
                y->max = newmax;
                release_iccMax2c_array_36(x);} else {y = copy_iccMax2c_array_36(x);
                      x->count--;};
        iccMax2c_record_35_t * yelems = y->elems;
        if (v != NULL){v->count++;}
        if (yelems[i] != NULL){release_iccMax2c_record_35(yelems[i]);};
         yelems[i] = v;
         return y;}



void release_iccMax2c_funtype_37(iccMax2c_funtype_37_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

iccMax2c_funtype_37_t copy_iccMax2c_funtype_37(iccMax2c_funtype_37_t x){return x->ftbl->cptr(x);}

bool_t equal_iccMax2c_funtype_37(iccMax2c_funtype_37_t x, iccMax2c_funtype_37_t y){
        return false;}

void release_iccMax2c__signatureMap(iccMax2c__signatureMap_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

iccMax2c__signatureMap_t copy_iccMax2c__signatureMap(iccMax2c__signatureMap_t x){return x->ftbl->cptr(x);}

uint32_t lookup_iccMax2c__signatureMap(iccMax2c__signatureMap_htbl_t htbl, uint32_t i, uint32_t ihash){
        uint32_t mask = htbl->size - 1;
        uint32_t hashindex = ihash & mask; iccMax2c__signatureMap_hashentry_t data = htbl->data[hashindex];
        bool_t keyzero;

        keyzero = (data.key == 0);
        bool_t keymatch;
        keymatch = (data.key == i);
        while ((!keyzero || data.keyhash != 0) &&
                 (data.keyhash != ihash || !keymatch)){
                hashindex++;
                hashindex = hashindex & mask;
                data = htbl->data[hashindex];

        keyzero = (data.key == 0);

        keymatch = (data.key == i);
                }
        return hashindex;
        }

iccMax2c__signatureMap_t dupdate_iccMax2c__signatureMap(iccMax2c__signatureMap_t a, uint32_t i, iccMax2c__signature_adt_t v){
        iccMax2c__signatureMap_htbl_t htbl = a->htbl;
        if (htbl == NULL){//construct new htbl
                htbl = (iccMax2c__signatureMap_htbl_t)safe_malloc(sizeof(struct iccMax2c__signatureMap_htbl_s));
                htbl->size = HTBL_DEFAULT_SIZE; htbl->num_entries = 0;
                htbl->data = (iccMax2c__signatureMap_hashentry_t *)safe_malloc(HTBL_DEFAULT_SIZE * sizeof(struct iccMax2c__signatureMap_hashentry_s));
                for (uint32_t j = 0; j < HTBL_DEFAULT_SIZE; j++){htbl->data[j].key = (uint32_t)0; htbl->data[j].keyhash = 0;
                }
                a->htbl = htbl;
        }
        uint32_t size = htbl->size;
        uint32_t num_entries = htbl->num_entries;
        iccMax2c__signatureMap_hashentry_t * data = htbl->data;
        if (num_entries/3 >  size/5){//resize data
                uint32_t new_size = 2*size; uint32_t new_mask = new_size - 1;
                if (size >= HTBL_MAX_SIZE) out_of_memory();
                iccMax2c__signatureMap_hashentry_t * new_data = (iccMax2c__signatureMap_hashentry_t *)safe_malloc(new_size * sizeof(struct iccMax2c__signatureMap_hashentry_s));
                for (uint32_t j = 0; j < new_size; j++){
                        new_data[j].key = 0;
                        new_data[j].keyhash = 0;}
                for (uint32_t j = 0; j < size; j++){//transfer entries
                        uint32_t keyhash = data[j].keyhash;
                        bool_t keyzero;
                        keyzero = (data[j].key == 0);
                        if (!keyzero || keyhash != 0){
                                uint32_t new_loc = keyhash ^ new_mask;
                                keyzero = (new_data[new_loc].key == 0);
                                while (keyzero && new_data[new_loc].keyhash == 0){
                                        new_loc++;
                                        new_loc = new_loc ^ new_mask;

                                        keyzero = (new_data[new_loc].key == 0);
                                }
                                new_data[new_loc].key = (uint32_t)data[j].key;
                                new_data[new_loc].keyhash = keyhash;
                                new_data[new_loc].value = (iccMax2c__signature_adt_t)data[j].value;
                                }}
                htbl->size = new_size;
                htbl->num_entries = num_entries;
                htbl->data = new_data;
                safe_free(data);}
        uint32_t ihash = uint32_hash(i);
        uint32_t hashindex = lookup_iccMax2c__signatureMap(htbl, i, ihash);
        iccMax2c__signatureMap_hashentry_t hentry = htbl->data[hashindex];
        uint32_t hkeyhash = hentry.keyhash;
        bool_t hentrykeyzero;
        hentrykeyzero = (hentry.key == 0);

        if (hentrykeyzero && (hkeyhash == 0))
                {htbl->data[hashindex].key = (uint32_t)i; htbl->data[hashindex].keyhash = ihash; htbl->data[hashindex].value = (iccMax2c__signature_adt_t)v; htbl->num_entries++;}
            else {iccMax2c__signature_adt_t tempvalue;tempvalue = (iccMax2c__signature_adt_t)htbl->data[hashindex].value;htbl->data[hashindex].value = (iccMax2c__signature_adt_t)v;if (v != NULL) v->count++;if (tempvalue != NULL)release_iccMax2c__signature_adt(tempvalue);};
        return a;

}

iccMax2c__signatureMap_t update_iccMax2c__signatureMap(iccMax2c__signatureMap_t a, uint32_t i, iccMax2c__signature_adt_t v){
        if (a->count == 1){
                return dupdate_iccMax2c__signatureMap(a, i, v);
            } else {
                iccMax2c__signatureMap_t x = copy_iccMax2c__signatureMap(a);
                a->count--;
                return dupdate_iccMax2c__signatureMap(x, i, v);
            }}

bool_t equal_iccMax2c__signatureMap(iccMax2c__signatureMap_t x, iccMax2c__signatureMap_t y){
        return false;}

void release_iccMax2c_funtype_39(iccMax2c_funtype_39_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

iccMax2c_funtype_39_t copy_iccMax2c_funtype_39(iccMax2c_funtype_39_t x){return x->ftbl->cptr(x);}

uint32_t lookup_iccMax2c_funtype_39(iccMax2c_funtype_39_htbl_t htbl, mpz_ptr_t i, uint32_t ihash){
        uint32_t mask = htbl->size - 1;
        uint32_t hashindex = ihash & mask; iccMax2c_funtype_39_hashentry_t data = htbl->data[hashindex];
        bool_t keyzero;

        int64_t tmp33276 = mpz_cmp_ui(data.key, 0);
        keyzero = (tmp33276 == 0);
        bool_t keymatch;
        int64_t tmp33277 = mpz_cmp(data.key, i);
        keymatch = (tmp33277 == 0);
        while ((!keyzero || data.keyhash != 0) &&
                 (data.keyhash != ihash || !keymatch)){
                hashindex++;
                hashindex = hashindex & mask;
                data = htbl->data[hashindex];

        int64_t tmp33276 = mpz_cmp_ui(data.key, 0);
        keyzero = (tmp33276 == 0);

        int64_t tmp33277 = mpz_cmp(data.key, i);
        keymatch = (tmp33277 == 0);
                }
        return hashindex;
        }

iccMax2c_funtype_39_t dupdate_iccMax2c_funtype_39(iccMax2c_funtype_39_t a, mpz_ptr_t i, uint32_t v){
        iccMax2c_funtype_39_htbl_t htbl = a->htbl;
        if (htbl == NULL){//construct new htbl
                htbl = (iccMax2c_funtype_39_htbl_t)safe_malloc(sizeof(struct iccMax2c_funtype_39_htbl_s));
                htbl->size = HTBL_DEFAULT_SIZE; htbl->num_entries = 0;
                htbl->data = (iccMax2c_funtype_39_hashentry_t *)safe_malloc(HTBL_DEFAULT_SIZE * sizeof(struct iccMax2c_funtype_39_hashentry_s));
                for (uint32_t j = 0; j < HTBL_DEFAULT_SIZE; j++){mpz_init(htbl->data[j].key);mpz_set_ui(htbl->data[j].key, 0); htbl->data[j].keyhash = 0;
                }
                a->htbl = htbl;
        }
        uint32_t size = htbl->size;
        uint32_t num_entries = htbl->num_entries;
        iccMax2c_funtype_39_hashentry_t * data = htbl->data;
        if (num_entries/3 >  size/5){//resize data
                uint32_t new_size = 2*size; uint32_t new_mask = new_size - 1;
                if (size >= HTBL_MAX_SIZE) out_of_memory();
                iccMax2c_funtype_39_hashentry_t * new_data = (iccMax2c_funtype_39_hashentry_t *)safe_malloc(new_size * sizeof(struct iccMax2c_funtype_39_hashentry_s));
                for (uint32_t j = 0; j < new_size; j++){
                        new_data[j].key = 0;
                        new_data[j].keyhash = 0;}
                for (uint32_t j = 0; j < size; j++){//transfer entries
                        uint32_t keyhash = data[j].keyhash;
                        bool_t keyzero;
                        int64_t tmp33278 = mpz_cmp_ui(data[j].key, 0);keyzero = (tmp33278 == 0);
                        if (!keyzero || keyhash != 0){
                                uint32_t new_loc = keyhash ^ new_mask;
                                int64_t tmp33279 = mpz_cmp_ui(new_data[new_loc].key, 0);
                                keyzero = (tmp33279 == 0);
                                while (keyzero && new_data[new_loc].keyhash == 0){
                                        new_loc++;
                                        new_loc = new_loc ^ new_mask;

                                        int64_t tmp33280 = mpz_cmp_ui(new_data[new_loc].key, 0);
                                        keyzero = (tmp33280 == 0);
                                }
                                mpz_set(new_data[new_loc].key, data[j].key);
                                new_data[new_loc].keyhash = keyhash;
                                new_data[new_loc].value = (uint32_t)data[j].value;
                                }}
                htbl->size = new_size;
                htbl->num_entries = num_entries;
                htbl->data = new_data;
                safe_free(data);}
        uint32_t ihash = mpz_hash(i);
        uint32_t hashindex = lookup_iccMax2c_funtype_39(htbl, i, ihash);
        iccMax2c_funtype_39_hashentry_t hentry = htbl->data[hashindex];
        uint32_t hkeyhash = hentry.keyhash;
        bool_t hentrykeyzero;
        int64_t tmp33281 = mpz_cmp_ui(hentry.key, 0);hentrykeyzero = (tmp33281 == 0);

        if (hentrykeyzero && (hkeyhash == 0))
                {mpz_set(htbl->data[hashindex].key, i); htbl->data[hashindex].keyhash = ihash; htbl->data[hashindex].value = (uint32_t)v; htbl->num_entries++;}
            else {uint32_t tempvalue;tempvalue = (uint32_t)htbl->data[hashindex].value;htbl->data[hashindex].value = (uint32_t)v;};
        return a;

}

iccMax2c_funtype_39_t update_iccMax2c_funtype_39(iccMax2c_funtype_39_t a, mpz_ptr_t i, uint32_t v){
        if (a->count == 1){
                return dupdate_iccMax2c_funtype_39(a, i, v);
            } else {
                iccMax2c_funtype_39_t x = copy_iccMax2c_funtype_39(a);
                a->count--;
                return dupdate_iccMax2c_funtype_39(x, i, v);
            }}

bool_t equal_iccMax2c_funtype_39(iccMax2c_funtype_39_t x, iccMax2c_funtype_39_t y){
        return false;}


iccMax2c_record_40_t new_iccMax2c_record_40(void){
        iccMax2c_record_40_t tmp = (iccMax2c_record_40_t) safe_malloc(sizeof(struct iccMax2c_record_40_s));
        tmp->count = 1;
        return tmp;}

void release_iccMax2c_record_40(iccMax2c_record_40_t x){
        x->count--;
        if (x->count <= 0){
         release_iccMax2c_funtype_39(x->seq);
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_iccMax2c_record_40_ptr(pointer_t x, type_actual_t T){
        release_iccMax2c_record_40((iccMax2c_record_40_t)x);
}

iccMax2c_record_40_t copy_iccMax2c_record_40(iccMax2c_record_40_t x){
        iccMax2c_record_40_t y = new_iccMax2c_record_40();
        mpz_set(y->length, x->length);
        y->seq = x->seq;
        if (y->seq != NULL){y->seq->count++;};
        y->count = 1;
        return y;}

bool_t equal_iccMax2c_record_40(iccMax2c_record_40_t x, iccMax2c_record_40_t y){
        bool_t tmp = true;
        tmp = tmp && x->length == y->length;
        tmp = tmp && equal_iccMax2c_funtype_39(x->seq, y->seq);
        return tmp;}

bool_t equal_iccMax2c_record_40_ptr(pointer_t x, pointer_t y, actual_iccMax2c_record_40_t T){
        return equal_iccMax2c_record_40((iccMax2c_record_40_t)x, (iccMax2c_record_40_t)y);
}

actual_iccMax2c_record_40_t actual_iccMax2c_record_40(){
        actual_iccMax2c_record_40_t new = (actual_iccMax2c_record_40_t)safe_malloc(sizeof(struct actual_iccMax2c_record_40_s));
        new->equal_ptr = (equal_ptr_t)(*equal_iccMax2c_record_40_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_iccMax2c_record_40_ptr);
 

 
        return new;
 };

iccMax2c_record_40_t update_iccMax2c_record_40_length(iccMax2c_record_40_t x, mpz_ptr_t v){
        iccMax2c_record_40_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c_record_40(x); x->count--;};
        mpz_set(y->length, v);
        return y;}

iccMax2c_record_40_t update_iccMax2c_record_40_seq(iccMax2c_record_40_t x, iccMax2c_funtype_39_t v){
        iccMax2c_record_40_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->seq != NULL){release_iccMax2c_funtype_39(x->seq);};}
        else {y = copy_iccMax2c_record_40(x); x->count--; y->seq->count--;};
        y->seq = (iccMax2c_funtype_39_t)v;
        return y;}




iccMax2c__signature_adt_t f_iccMax2c_closure_41(struct iccMax2c_closure_41_s * closure, uint32_t bvar){
if (closure->htbl != NULL){
        iccMax2c__signatureMap_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_iccMax2c__signatureMap(htbl, bvar, hash);
        iccMax2c__signatureMap_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            iccMax2c__signature_adt_t result;
            result = (iccMax2c__signature_adt_t)entry.value;
            if (result != NULL) result->count++;
            return result;}
        

        return h_iccMax2c_closure_41(bvar);};

return h_iccMax2c_closure_41(bvar);}

iccMax2c__signature_adt_t m_iccMax2c_closure_41(struct iccMax2c_closure_41_s * closure, uint32_t bvar){
        return h_iccMax2c_closure_41(bvar);}

extern iccMax2c__signature_adt_t h_iccMax2c_closure_41(uint32_t ivar_5){
        iccMax2c__signature_adt_t result;
        result = (iccMax2c__signature_adt_t)iccMax2c__subelemsig0((uint32_t)ivar_5);

        return result;
}

iccMax2c_closure_41_t new_iccMax2c_closure_41(void){
        static struct iccMax2c__signatureMap_ftbl_s ftbl = {.fptr = (iccMax2c__signature_adt_t (*)(iccMax2c__signatureMap_t, uint32_t))&f_iccMax2c_closure_41, .mptr = (iccMax2c__signature_adt_t (*)(iccMax2c__signatureMap_t, uint32_t))&m_iccMax2c_closure_41, .rptr =  (void (*)(iccMax2c__signatureMap_t))&release_iccMax2c_closure_41, .cptr = (iccMax2c__signatureMap_t (*)(iccMax2c__signatureMap_t))&copy_iccMax2c_closure_41};
        iccMax2c_closure_41_t tmp = (iccMax2c_closure_41_t) safe_malloc(sizeof(struct iccMax2c_closure_41_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_iccMax2c_closure_41(iccMax2c__signatureMap_t closure){
        iccMax2c_closure_41_t x = (iccMax2c_closure_41_t)closure;
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

iccMax2c_closure_41_t copy_iccMax2c_closure_41(iccMax2c_closure_41_t x){
        iccMax2c_closure_41_t y = new_iccMax2c_closure_41();
        y->ftbl = x->ftbl;

        if (x->htbl != NULL){
            iccMax2c__signatureMap_htbl_t new_htbl = (iccMax2c__signatureMap_htbl_t) safe_malloc(sizeof(struct iccMax2c__signatureMap_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            iccMax2c__signatureMap_hashentry_t * new_data = (iccMax2c__signatureMap_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct iccMax2c__signatureMap_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct iccMax2c__signatureMap_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


iccMax2c_record_42_t new_iccMax2c_record_42(void){
        iccMax2c_record_42_t tmp = (iccMax2c_record_42_t) safe_malloc(sizeof(struct iccMax2c_record_42_s));
        tmp->count = 1;
        return tmp;}

void release_iccMax2c_record_42(iccMax2c_record_42_t x){
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_iccMax2c_record_42_ptr(pointer_t x, type_actual_t T){
        release_iccMax2c_record_42((iccMax2c_record_42_t)x);
}

iccMax2c_record_42_t copy_iccMax2c_record_42(iccMax2c_record_42_t x){
        iccMax2c_record_42_t y = new_iccMax2c_record_42();
        y->endpos = (uint32_t)x->endpos;
        y->startpos = (uint8_t)x->startpos;
        y->count = 1;
        return y;}

bool_t equal_iccMax2c_record_42(iccMax2c_record_42_t x, iccMax2c_record_42_t y){
        bool_t tmp = true;
        tmp = tmp && x->endpos == y->endpos;
        tmp = tmp && x->startpos == y->startpos;
        return tmp;}

bool_t equal_iccMax2c_record_42_ptr(pointer_t x, pointer_t y, actual_iccMax2c_record_42_t T){
        return equal_iccMax2c_record_42((iccMax2c_record_42_t)x, (iccMax2c_record_42_t)y);
}

actual_iccMax2c_record_42_t actual_iccMax2c_record_42(){
        actual_iccMax2c_record_42_t new = (actual_iccMax2c_record_42_t)safe_malloc(sizeof(struct actual_iccMax2c_record_42_s));
        new->equal_ptr = (equal_ptr_t)(*equal_iccMax2c_record_42_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_iccMax2c_record_42_ptr);
 

 
        return new;
 };

iccMax2c_record_42_t update_iccMax2c_record_42_endpos(iccMax2c_record_42_t x, uint32_t v){
        iccMax2c_record_42_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c_record_42(x); x->count--;};
        y->endpos = (uint32_t)v;
        return y;}

iccMax2c_record_42_t update_iccMax2c_record_42_startpos(iccMax2c_record_42_t x, uint8_t v){
        iccMax2c_record_42_t y;
        if (x->count == 1){y = x;}
        else {y = copy_iccMax2c_record_42(x); x->count--;};
        y->startpos = (uint8_t)v;
        return y;}




iccMax2c__signature_adt_t f_iccMax2c_closure_43(struct iccMax2c_closure_43_s * closure, uint32_t bvar){
if (closure->htbl != NULL){
        iccMax2c__signatureMap_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_iccMax2c__signatureMap(htbl, bvar, hash);
        iccMax2c__signatureMap_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            iccMax2c__signature_adt_t result;
            result = (iccMax2c__signature_adt_t)entry.value;
            if (result != NULL) result->count++;
            return result;}
        

        return h_iccMax2c_closure_43(bvar);};

return h_iccMax2c_closure_43(bvar);}

iccMax2c__signature_adt_t m_iccMax2c_closure_43(struct iccMax2c_closure_43_s * closure, uint32_t bvar){
        return h_iccMax2c_closure_43(bvar);}

extern iccMax2c__signature_adt_t h_iccMax2c_closure_43(uint32_t ivar_5){
        iccMax2c__signature_adt_t result;
        result = (iccMax2c__signature_adt_t)iccMax2c__subelemsig0((uint32_t)ivar_5);

        return result;
}

iccMax2c_closure_43_t new_iccMax2c_closure_43(void){
        static struct iccMax2c__signatureMap_ftbl_s ftbl = {.fptr = (iccMax2c__signature_adt_t (*)(iccMax2c__signatureMap_t, uint32_t))&f_iccMax2c_closure_43, .mptr = (iccMax2c__signature_adt_t (*)(iccMax2c__signatureMap_t, uint32_t))&m_iccMax2c_closure_43, .rptr =  (void (*)(iccMax2c__signatureMap_t))&release_iccMax2c_closure_43, .cptr = (iccMax2c__signatureMap_t (*)(iccMax2c__signatureMap_t))&copy_iccMax2c_closure_43};
        iccMax2c_closure_43_t tmp = (iccMax2c_closure_43_t) safe_malloc(sizeof(struct iccMax2c_closure_43_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_iccMax2c_closure_43(iccMax2c__signatureMap_t closure){
        iccMax2c_closure_43_t x = (iccMax2c_closure_43_t)closure;
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

iccMax2c_closure_43_t copy_iccMax2c_closure_43(iccMax2c_closure_43_t x){
        iccMax2c_closure_43_t y = new_iccMax2c_closure_43();
        y->ftbl = x->ftbl;

        if (x->htbl != NULL){
            iccMax2c__signatureMap_htbl_t new_htbl = (iccMax2c__signatureMap_htbl_t) safe_malloc(sizeof(struct iccMax2c__signatureMap_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            iccMax2c__signatureMap_hashentry_t * new_data = (iccMax2c__signatureMap_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct iccMax2c__signatureMap_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct iccMax2c__signatureMap_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


iccMax2c__signature_adt_t f_iccMax2c_closure_44(struct iccMax2c_closure_44_s * closure, uint32_t bvar){
if (closure->htbl != NULL){
        iccMax2c__signatureMap_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_iccMax2c__signatureMap(htbl, bvar, hash);
        iccMax2c__signatureMap_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            iccMax2c__signature_adt_t result;
            result = (iccMax2c__signature_adt_t)entry.value;
            if (result != NULL) result->count++;
            return result;}
        

        return h_iccMax2c_closure_44(bvar);};

return h_iccMax2c_closure_44(bvar);}

iccMax2c__signature_adt_t m_iccMax2c_closure_44(struct iccMax2c_closure_44_s * closure, uint32_t bvar){
        return h_iccMax2c_closure_44(bvar);}

extern iccMax2c__signature_adt_t h_iccMax2c_closure_44(uint32_t ivar_5){
        iccMax2c__signature_adt_t result;
        result = (iccMax2c__signature_adt_t)iccMax2c__subelemsig0((uint32_t)ivar_5);

        return result;
}

iccMax2c_closure_44_t new_iccMax2c_closure_44(void){
        static struct iccMax2c__signatureMap_ftbl_s ftbl = {.fptr = (iccMax2c__signature_adt_t (*)(iccMax2c__signatureMap_t, uint32_t))&f_iccMax2c_closure_44, .mptr = (iccMax2c__signature_adt_t (*)(iccMax2c__signatureMap_t, uint32_t))&m_iccMax2c_closure_44, .rptr =  (void (*)(iccMax2c__signatureMap_t))&release_iccMax2c_closure_44, .cptr = (iccMax2c__signatureMap_t (*)(iccMax2c__signatureMap_t))&copy_iccMax2c_closure_44};
        iccMax2c_closure_44_t tmp = (iccMax2c_closure_44_t) safe_malloc(sizeof(struct iccMax2c_closure_44_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_iccMax2c_closure_44(iccMax2c__signatureMap_t closure){
        iccMax2c_closure_44_t x = (iccMax2c_closure_44_t)closure;
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

iccMax2c_closure_44_t copy_iccMax2c_closure_44(iccMax2c_closure_44_t x){
        iccMax2c_closure_44_t y = new_iccMax2c_closure_44();
        y->ftbl = x->ftbl;

        if (x->htbl != NULL){
            iccMax2c__signatureMap_htbl_t new_htbl = (iccMax2c__signatureMap_htbl_t) safe_malloc(sizeof(struct iccMax2c__signatureMap_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            iccMax2c__signatureMap_hashentry_t * new_data = (iccMax2c__signatureMap_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct iccMax2c__signatureMap_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct iccMax2c__signatureMap_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


iccMax2c__signature_adt_t f_iccMax2c_closure_45(struct iccMax2c_closure_45_s * closure, uint32_t bvar){
if (closure->htbl != NULL){
        iccMax2c__signatureMap_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_iccMax2c__signatureMap(htbl, bvar, hash);
        iccMax2c__signatureMap_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            iccMax2c__signature_adt_t result;
            result = (iccMax2c__signature_adt_t)entry.value;
            if (result != NULL) result->count++;
            return result;}
        

        return h_iccMax2c_closure_45(bvar);};

return h_iccMax2c_closure_45(bvar);}

iccMax2c__signature_adt_t m_iccMax2c_closure_45(struct iccMax2c_closure_45_s * closure, uint32_t bvar){
        return h_iccMax2c_closure_45(bvar);}

extern iccMax2c__signature_adt_t h_iccMax2c_closure_45(uint32_t ivar_5){
        iccMax2c__signature_adt_t result;
        result = (iccMax2c__signature_adt_t)iccMax2c__subelemsig0((uint32_t)ivar_5);

        return result;
}

iccMax2c_closure_45_t new_iccMax2c_closure_45(void){
        static struct iccMax2c__signatureMap_ftbl_s ftbl = {.fptr = (iccMax2c__signature_adt_t (*)(iccMax2c__signatureMap_t, uint32_t))&f_iccMax2c_closure_45, .mptr = (iccMax2c__signature_adt_t (*)(iccMax2c__signatureMap_t, uint32_t))&m_iccMax2c_closure_45, .rptr =  (void (*)(iccMax2c__signatureMap_t))&release_iccMax2c_closure_45, .cptr = (iccMax2c__signatureMap_t (*)(iccMax2c__signatureMap_t))&copy_iccMax2c_closure_45};
        iccMax2c_closure_45_t tmp = (iccMax2c_closure_45_t) safe_malloc(sizeof(struct iccMax2c_closure_45_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_iccMax2c_closure_45(iccMax2c__signatureMap_t closure){
        iccMax2c_closure_45_t x = (iccMax2c_closure_45_t)closure;
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

iccMax2c_closure_45_t copy_iccMax2c_closure_45(iccMax2c_closure_45_t x){
        iccMax2c_closure_45_t y = new_iccMax2c_closure_45();
        y->ftbl = x->ftbl;

        if (x->htbl != NULL){
            iccMax2c__signatureMap_htbl_t new_htbl = (iccMax2c__signatureMap_htbl_t) safe_malloc(sizeof(struct iccMax2c__signatureMap_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            iccMax2c__signatureMap_hashentry_t * new_data = (iccMax2c__signatureMap_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct iccMax2c__signatureMap_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct iccMax2c__signatureMap_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}

void release_iccMax2c_funtype_46(iccMax2c_funtype_46_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

iccMax2c_funtype_46_t copy_iccMax2c_funtype_46(iccMax2c_funtype_46_t x){return x->ftbl->cptr(x);}

uint32_t lookup_iccMax2c_funtype_46(iccMax2c_funtype_46_htbl_t htbl, uint32_t i, uint32_t ihash){
        uint32_t mask = htbl->size - 1;
        uint32_t hashindex = ihash & mask; iccMax2c_funtype_46_hashentry_t data = htbl->data[hashindex];
        bool_t keyzero;

        keyzero = (data.key == 0);
        bool_t keymatch;
        keymatch = (data.key == i);
        while ((!keyzero || data.keyhash != 0) &&
                 (data.keyhash != ihash || !keymatch)){
                hashindex++;
                hashindex = hashindex & mask;
                data = htbl->data[hashindex];

        keyzero = (data.key == 0);

        keymatch = (data.key == i);
                }
        return hashindex;
        }

iccMax2c_funtype_46_t dupdate_iccMax2c_funtype_46(iccMax2c_funtype_46_t a, uint32_t i, uint64_t v){
        iccMax2c_funtype_46_htbl_t htbl = a->htbl;
        if (htbl == NULL){//construct new htbl
                htbl = (iccMax2c_funtype_46_htbl_t)safe_malloc(sizeof(struct iccMax2c_funtype_46_htbl_s));
                htbl->size = HTBL_DEFAULT_SIZE; htbl->num_entries = 0;
                htbl->data = (iccMax2c_funtype_46_hashentry_t *)safe_malloc(HTBL_DEFAULT_SIZE * sizeof(struct iccMax2c_funtype_46_hashentry_s));
                for (uint32_t j = 0; j < HTBL_DEFAULT_SIZE; j++){htbl->data[j].key = (uint32_t)0; htbl->data[j].keyhash = 0;
                }
                a->htbl = htbl;
        }
        uint32_t size = htbl->size;
        uint32_t num_entries = htbl->num_entries;
        iccMax2c_funtype_46_hashentry_t * data = htbl->data;
        if (num_entries/3 >  size/5){//resize data
                uint32_t new_size = 2*size; uint32_t new_mask = new_size - 1;
                if (size >= HTBL_MAX_SIZE) out_of_memory();
                iccMax2c_funtype_46_hashentry_t * new_data = (iccMax2c_funtype_46_hashentry_t *)safe_malloc(new_size * sizeof(struct iccMax2c_funtype_46_hashentry_s));
                for (uint32_t j = 0; j < new_size; j++){
                        new_data[j].key = 0;
                        new_data[j].keyhash = 0;}
                for (uint32_t j = 0; j < size; j++){//transfer entries
                        uint32_t keyhash = data[j].keyhash;
                        bool_t keyzero;
                        keyzero = (data[j].key == 0);
                        if (!keyzero || keyhash != 0){
                                uint32_t new_loc = keyhash ^ new_mask;
                                keyzero = (new_data[new_loc].key == 0);
                                while (keyzero && new_data[new_loc].keyhash == 0){
                                        new_loc++;
                                        new_loc = new_loc ^ new_mask;

                                        keyzero = (new_data[new_loc].key == 0);
                                }
                                new_data[new_loc].key = (uint32_t)data[j].key;
                                new_data[new_loc].keyhash = keyhash;
                                new_data[new_loc].value = (uint64_t)data[j].value;
                                }}
                htbl->size = new_size;
                htbl->num_entries = num_entries;
                htbl->data = new_data;
                safe_free(data);}
        uint32_t ihash = uint32_hash(i);
        uint32_t hashindex = lookup_iccMax2c_funtype_46(htbl, i, ihash);
        iccMax2c_funtype_46_hashentry_t hentry = htbl->data[hashindex];
        uint32_t hkeyhash = hentry.keyhash;
        bool_t hentrykeyzero;
        hentrykeyzero = (hentry.key == 0);

        if (hentrykeyzero && (hkeyhash == 0))
                {htbl->data[hashindex].key = (uint32_t)i; htbl->data[hashindex].keyhash = ihash; htbl->data[hashindex].value = (uint64_t)v; htbl->num_entries++;}
            else {uint64_t tempvalue;tempvalue = (uint64_t)htbl->data[hashindex].value;htbl->data[hashindex].value = (uint64_t)v;};
        return a;

}

iccMax2c_funtype_46_t update_iccMax2c_funtype_46(iccMax2c_funtype_46_t a, uint32_t i, uint64_t v){
        if (a->count == 1){
                return dupdate_iccMax2c_funtype_46(a, i, v);
            } else {
                iccMax2c_funtype_46_t x = copy_iccMax2c_funtype_46(a);
                a->count--;
                return dupdate_iccMax2c_funtype_46(x, i, v);
            }}

bool_t equal_iccMax2c_funtype_46(iccMax2c_funtype_46_t x, iccMax2c_funtype_46_t y){
        return false;}


uint64_t f_iccMax2c_closure_47(struct iccMax2c_closure_47_s * closure, uint32_t bvar){
if (closure->htbl != NULL){
        iccMax2c_funtype_46_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_iccMax2c_funtype_46(htbl, bvar, hash);
        iccMax2c_funtype_46_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            uint64_t result;
            result = (uint64_t)entry.value;
            return result;}
        

        return h_iccMax2c_closure_47(bvar, closure->fvar_1, closure->fvar_2);};

return h_iccMax2c_closure_47(bvar, closure->fvar_1, closure->fvar_2);}

uint64_t m_iccMax2c_closure_47(struct iccMax2c_closure_47_s * closure, uint32_t bvar){
        return h_iccMax2c_closure_47(bvar, closure->fvar_1, closure->fvar_2);}

extern uint64_t h_iccMax2c_closure_47(uint32_t ivar_187, uint32_t ivar_25, bytestrings__bytestring_t ivar_2){
        uint64_t result;
        uint32_t ivar_201;
        uint64_t ivar_190;
        uint8_t ivar_193;
        ivar_193 = (uint8_t)16;
        ivar_190 = (uint64_t)(ivar_25 + ivar_193);
        uint64_t ivar_191;
        uint8_t ivar_195;
        ivar_195 = (uint8_t)8;
        ivar_191 = (uint64_t)((uint64_t)ivar_195 * (uint64_t)ivar_187);
        ivar_201 = (uint32_t)(ivar_190 + ivar_191);
        ivar_2->count++;
        result = (uint64_t)iccMax2c__readU64((bytestrings__bytestring_t)ivar_2, (uint32_t)ivar_201);

        return result;
}

iccMax2c_closure_47_t new_iccMax2c_closure_47(void){
        static struct iccMax2c_funtype_46_ftbl_s ftbl = {.fptr = (uint64_t (*)(iccMax2c_funtype_46_t, uint32_t))&f_iccMax2c_closure_47, .mptr = (uint64_t (*)(iccMax2c_funtype_46_t, uint32_t))&m_iccMax2c_closure_47, .rptr =  (void (*)(iccMax2c_funtype_46_t))&release_iccMax2c_closure_47, .cptr = (iccMax2c_funtype_46_t (*)(iccMax2c_funtype_46_t))&copy_iccMax2c_closure_47};
        iccMax2c_closure_47_t tmp = (iccMax2c_closure_47_t) safe_malloc(sizeof(struct iccMax2c_closure_47_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_iccMax2c_closure_47(iccMax2c_funtype_46_t closure){
        iccMax2c_closure_47_t x = (iccMax2c_closure_47_t)closure;
        x->count--;
        if (x->count <= 0){
         release_bytestrings__bytestring(x->fvar_2);
        //printf("\nFreeing\n");
        safe_free(x);}}

iccMax2c_closure_47_t copy_iccMax2c_closure_47(iccMax2c_closure_47_t x){
        iccMax2c_closure_47_t y = new_iccMax2c_closure_47();
        y->ftbl = x->ftbl;

        y->fvar_1 = (uint32_t)x->fvar_1;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        if (x->htbl != NULL){
            iccMax2c_funtype_46_htbl_t new_htbl = (iccMax2c_funtype_46_htbl_t) safe_malloc(sizeof(struct iccMax2c_funtype_46_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            iccMax2c_funtype_46_hashentry_t * new_data = (iccMax2c_funtype_46_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct iccMax2c_funtype_46_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct iccMax2c_funtype_46_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


iccMax2c_array_48_t new_iccMax2c_array_48(uint32_t size){
        iccMax2c_array_48_t tmp = (iccMax2c_array_48_t) safe_malloc(sizeof(struct iccMax2c_array_48_s) + (size * sizeof(uint64_t)));
        tmp->count = 1;
        tmp->size = size;;
        tmp->max = size;
         return tmp;}

void release_iccMax2c_array_48(iccMax2c_array_48_t x){
        x->count--;
         if (x->count <= 0){safe_free(x);}
}

void release_iccMax2c_array_48_ptr(pointer_t x, type_actual_t T){
        release_iccMax2c_array_48((iccMax2c_array_48_t)x);
}

iccMax2c_array_48_t copy_iccMax2c_array_48(iccMax2c_array_48_t x){
        iccMax2c_array_48_t tmp = new_iccMax2c_array_48(x->size);
        tmp->count = 1;
        for (uint32_t i = 0; i < x->size; i++){tmp->elems[i] = (uint64_t)x->elems[i];};
         return tmp;}

bool_t equal_iccMax2c_array_48(iccMax2c_array_48_t x, iccMax2c_array_48_t y){
        bool_t tmp = true;
        uint32_t i = 0;
        while (i < x->size && tmp){tmp = (x->elems[i] == y->elems[i]); i++;};
        return tmp;}

bool_t equal_iccMax2c_array_48_ptr(pointer_t x, pointer_t y, type_actual_t T){
        return equal_iccMax2c_array_48((iccMax2c_array_48_t)x, (iccMax2c_array_48_t)y);
}

actual_iccMax2c_array_48_t actual_iccMax2c_array_48(){
        actual_iccMax2c_array_48_t new = (actual_iccMax2c_array_48_t)safe_malloc(sizeof(struct actual_iccMax2c_array_48_s));
        new->equal_ptr = (equal_ptr_t)(*equal_iccMax2c_array_48_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_iccMax2c_array_48_ptr);
 

 
        return new;
 };

iccMax2c_array_48_t update_iccMax2c_array_48(iccMax2c_array_48_t x, uint32_t i, uint64_t v){
        iccMax2c_array_48_t y; 
         if (x->count == 1){y = x;}
           else {y = copy_iccMax2c_array_48(x );
                x->count--;};
        y->elems[i] = (uint64_t)v;
        return y;}

iccMax2c_array_48_t upgrade_iccMax2c_array_48(iccMax2c_array_48_t x, uint32_t i, uint64_t v){
        iccMax2c_array_48_t y; 
         if (x->count == 1 && i < x->max){y = x;}
           else if (i > x->max){uint32_t newmax = x->max <= UINT32_MAX/2 ? 2*x->max: UINT32_MAX;
                y = safe_malloc(sizeof(struct iccMax2c_array_48_s) + (newmax * sizeof(uint64_t)));
                y->count = 1;
                y->size = i+1;
                y->max = newmax;
                release_iccMax2c_array_48(x);}
           else {y = copy_iccMax2c_array_48(x );
                x->count--;};
        y->elems[i] = (uint64_t)v;
        return y;}




iccMax2c__signature_adt_t f_iccMax2c_closure_49(struct iccMax2c_closure_49_s * closure, uint32_t bvar){
if (closure->htbl != NULL){
        iccMax2c__signatureMap_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_iccMax2c__signatureMap(htbl, bvar, hash);
        iccMax2c__signatureMap_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            iccMax2c__signature_adt_t result;
            result = (iccMax2c__signature_adt_t)entry.value;
            if (result != NULL) result->count++;
            return result;}
        

        return h_iccMax2c_closure_49(bvar, closure->fvar_1, closure->fvar_2, closure->fvar_3, closure->fvar_4, closure->fvar_5, closure->fvar_6, closure->fvar_7);};

return h_iccMax2c_closure_49(bvar, closure->fvar_1, closure->fvar_2, closure->fvar_3, closure->fvar_4, closure->fvar_5, closure->fvar_6, closure->fvar_7);}

iccMax2c__signature_adt_t m_iccMax2c_closure_49(struct iccMax2c_closure_49_s * closure, uint32_t bvar){
        return h_iccMax2c_closure_49(bvar, closure->fvar_1, closure->fvar_2, closure->fvar_3, closure->fvar_4, closure->fvar_5, closure->fvar_6, closure->fvar_7);}

extern iccMax2c__signature_adt_t h_iccMax2c_closure_49(uint32_t ivar_205, iccMax2c_array_48_t ivar_185, uint32_t ivar_25, uint32_t ivar_8, uint32_t ivar_128, bytestrings__bytestring_t ivar_2, uint64_t ivar_1, iccMax2c_record_35_t ivar_3){
        iccMax2c__signature_adt_t result;
        bool_t ivar_206;
        bool_t ivar_207;
        ivar_207 = (ivar_205 < ivar_128);
        if (ivar_207){ 
             bool_t ivar_212;
             uint64_t ivar_214;
             ivar_214 = (uint64_t)ivar_185->elems[ivar_205];
             ivar_212 = (ivar_214 > ivar_25);
             if (ivar_212){  
           uint64_t ivar_221;
           ivar_221 = (uint64_t)ivar_185->elems[ivar_205];
           ivar_206 = (ivar_221 <= ivar_8);
} else {
             
           ivar_206 = (bool_t) false;
};
} else {
        
             ivar_206 = (bool_t) false;
};
        if (ivar_206){ 
             iccMax2c_record_35_t ivar_254;
             uint32_t ivar_237;
             uint64_t ivar_239;
             ivar_239 = (uint64_t)ivar_185->elems[ivar_205];
             //copying to uint32 from uint64;
             ivar_237 = (uint32_t)ivar_239;
             iccMax2c_record_35_t ivar_246;
             {ivar_246 = (iccMax2c_record_35_t)copy_iccMax2c_record_35(ivar_3); ivar_246 = (iccMax2c_record_35_t)update_iccMax2c_record_35_startpos(ivar_3, ivar_237);};
             //copying to iccMax2c_record_35 from iccMax2c_record_35;
             ivar_254 = (iccMax2c_record_35_t)ivar_246;
             if (ivar_254 != NULL) ivar_254->count++;
             release_iccMax2c_record_35(ivar_246);
             iccMax2c__signature_adt_t ivar_251;
             ivar_2->count++;
             ivar_251 = (iccMax2c__signature_adt_t)iccMax2c__parsecalc((uint64_t)ivar_1, (bytestrings__bytestring_t)ivar_2, (iccMax2c_record_35_t)ivar_254);
             //copying to iccMax2c__signature_adt from iccMax2c__signature_adt;
             result = (iccMax2c__signature_adt_t)ivar_251;
             if (result != NULL) result->count++;
             release_iccMax2c__signature_adt(ivar_251);
} else {
        
             result = (iccMax2c__signature_adt_t)iccMax2c__undefined();
             if (result != NULL) result->count++;
};

        return result;
}

iccMax2c_closure_49_t new_iccMax2c_closure_49(void){
        static struct iccMax2c__signatureMap_ftbl_s ftbl = {.fptr = (iccMax2c__signature_adt_t (*)(iccMax2c__signatureMap_t, uint32_t))&f_iccMax2c_closure_49, .mptr = (iccMax2c__signature_adt_t (*)(iccMax2c__signatureMap_t, uint32_t))&m_iccMax2c_closure_49, .rptr =  (void (*)(iccMax2c__signatureMap_t))&release_iccMax2c_closure_49, .cptr = (iccMax2c__signatureMap_t (*)(iccMax2c__signatureMap_t))&copy_iccMax2c_closure_49};
        iccMax2c_closure_49_t tmp = (iccMax2c_closure_49_t) safe_malloc(sizeof(struct iccMax2c_closure_49_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_iccMax2c_closure_49(iccMax2c__signatureMap_t closure){
        iccMax2c_closure_49_t x = (iccMax2c_closure_49_t)closure;
        x->count--;
        if (x->count <= 0){
         release_iccMax2c_array_48(x->fvar_1);
         release_bytestrings__bytestring(x->fvar_5);
         release_iccMax2c_record_35(x->fvar_7);
        //printf("\nFreeing\n");
        safe_free(x);}}

iccMax2c_closure_49_t copy_iccMax2c_closure_49(iccMax2c_closure_49_t x){
        iccMax2c_closure_49_t y = new_iccMax2c_closure_49();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = (uint32_t)x->fvar_2;
        y->fvar_3 = (uint32_t)x->fvar_3;
        y->fvar_4 = (uint32_t)x->fvar_4;
        y->fvar_5 = x->fvar_5; x->fvar_5->count++;
        y->fvar_6 = (uint64_t)x->fvar_6;
        y->fvar_7 = x->fvar_7; x->fvar_7->count++;
        if (x->htbl != NULL){
            iccMax2c__signatureMap_htbl_t new_htbl = (iccMax2c__signatureMap_htbl_t) safe_malloc(sizeof(struct iccMax2c__signatureMap_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            iccMax2c__signatureMap_hashentry_t * new_data = (iccMax2c__signatureMap_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct iccMax2c__signatureMap_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct iccMax2c__signatureMap_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}

extern bool_t r_iccMax2c__errorp(iccMax2c__result_adt_t ivar_1){
        bool_t  result;
        uint8_t ivar_3;
        ivar_3 = (uint8_t)0;
        uint8_t ivar_2;
        ivar_2 = (uint8_t)ivar_1->iccMax2c__result_adt_index;
        release_iccMax2c__result_adt(ivar_1);
        result = (ivar_2 == ivar_3);

        
        return result;
}

extern bool_t r_iccMax2c__valuep(iccMax2c__result_adt_t ivar_1){
        bool_t  result;
        uint8_t ivar_3;
        ivar_3 = (uint8_t)1;
        uint8_t ivar_2;
        ivar_2 = (uint8_t)ivar_1->iccMax2c__result_adt_index;
        release_iccMax2c__result_adt(ivar_1);
        result = (ivar_2 == ivar_3);

        
        return result;
}

extern iccMax2c__error_t update_iccMax2c__result_adt_code(iccMax2c__result_adt_t ivar_1, uint8_t ivar_3){
        iccMax2c__error_t  result;
        iccMax2c__error_t ivar_2;
        //copying to iccMax2c__error from iccMax2c__result_adt;
        ivar_2 = (iccMax2c__error_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_iccMax2c__result_adt(ivar_1);
        result = (iccMax2c__error_t)update_iccMax2c__error_code(ivar_2, ivar_3);

        
        return result;
}

extern uint8_t iccMax2c__result_adt_code(iccMax2c__result_adt_t ivar_1){
        uint8_t  result;
        iccMax2c__error_t ivar_2;
        //copying to iccMax2c__error from iccMax2c__result_adt;
        ivar_2 = (iccMax2c__error_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_iccMax2c__result_adt(ivar_1);
        result = (uint8_t)ivar_2->code;
        release_iccMax2c__error(ivar_2);

        
        return result;
}

extern iccMax2c__error_t update_iccMax2c__result_adt_loc(iccMax2c__result_adt_t ivar_1, uint32_t ivar_3){
        iccMax2c__error_t  result;
        iccMax2c__error_t ivar_2;
        //copying to iccMax2c__error from iccMax2c__result_adt;
        ivar_2 = (iccMax2c__error_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_iccMax2c__result_adt(ivar_1);
        result = (iccMax2c__error_t)update_iccMax2c__error_loc(ivar_2, ivar_3);

        
        return result;
}

extern uint32_t iccMax2c__result_adt_loc(iccMax2c__result_adt_t ivar_1){
        uint32_t  result;
        iccMax2c__error_t ivar_2;
        //copying to iccMax2c__error from iccMax2c__result_adt;
        ivar_2 = (iccMax2c__error_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_iccMax2c__result_adt(ivar_1);
        result = (uint32_t)ivar_2->loc;
        release_iccMax2c__error(ivar_2);

        
        return result;
}

extern iccMax2c__error_t update_iccMax2c__result_adt_occ(iccMax2c__result_adt_t ivar_1, uint8_t ivar_3){
        iccMax2c__error_t  result;
        iccMax2c__error_t ivar_2;
        //copying to iccMax2c__error from iccMax2c__result_adt;
        ivar_2 = (iccMax2c__error_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_iccMax2c__result_adt(ivar_1);
        result = (iccMax2c__error_t)update_iccMax2c__error_occ(ivar_2, ivar_3);

        
        return result;
}

extern uint8_t iccMax2c__result_adt_occ(iccMax2c__result_adt_t ivar_1){
        uint8_t  result;
        iccMax2c__error_t ivar_2;
        //copying to iccMax2c__error from iccMax2c__result_adt;
        ivar_2 = (iccMax2c__error_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_iccMax2c__result_adt(ivar_1);
        result = (uint8_t)ivar_2->occ;
        release_iccMax2c__error(ivar_2);

        
        return result;
}

extern iccMax2c__value_t update_iccMax2c__result_adt_vmax(iccMax2c__result_adt_t ivar_1, uint64_t ivar_3){
        iccMax2c__value_t  result;
        iccMax2c__value_t ivar_2;
        //copying to iccMax2c__value from iccMax2c__result_adt;
        ivar_2 = (iccMax2c__value_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_iccMax2c__result_adt(ivar_1);
        result = (iccMax2c__value_t)update_iccMax2c__value_vmax(ivar_2, ivar_3);

        
        return result;
}

extern uint64_t iccMax2c__result_adt_vmax(iccMax2c__result_adt_t ivar_1){
        uint64_t  result;
        iccMax2c__value_t ivar_2;
        //copying to iccMax2c__value from iccMax2c__result_adt;
        ivar_2 = (iccMax2c__value_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_iccMax2c__result_adt(ivar_1);
        result = (uint64_t)ivar_2->vmax;
        release_iccMax2c__value(ivar_2);

        
        return result;
}

extern iccMax2c__value_t update_iccMax2c__result_adt_vmin(iccMax2c__result_adt_t ivar_1, uint64_t ivar_3){
        iccMax2c__value_t  result;
        iccMax2c__value_t ivar_2;
        //copying to iccMax2c__value from iccMax2c__result_adt;
        ivar_2 = (iccMax2c__value_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_iccMax2c__result_adt(ivar_1);
        result = (iccMax2c__value_t)update_iccMax2c__value_vmin(ivar_2, ivar_3);

        
        return result;
}

extern uint64_t iccMax2c__result_adt_vmin(iccMax2c__result_adt_t ivar_1){
        uint64_t  result;
        iccMax2c__value_t ivar_2;
        //copying to iccMax2c__value from iccMax2c__result_adt;
        ivar_2 = (iccMax2c__value_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_iccMax2c__result_adt(ivar_1);
        result = (uint64_t)ivar_2->vmin;
        release_iccMax2c__value(ivar_2);

        
        return result;
}

extern iccMax2c__result_adt_t iccMax2c__error(uint8_t ivar_2, uint32_t ivar_3, uint8_t ivar_4){
        iccMax2c__result_adt_t  result;
        uint8_t ivar_1;
        ivar_1 = (uint8_t)0;
        iccMax2c__error_t ivar_5;
        ivar_5 = (iccMax2c__error_t)new_iccMax2c__error();;
        ivar_5->iccMax2c__result_adt_index = (uint8_t)ivar_1;
        ivar_5->code = (uint8_t)ivar_2;
        ivar_5->loc = (uint32_t)ivar_3;
        ivar_5->occ = (uint8_t)ivar_4;
        //copying to iccMax2c__result_adt from iccMax2c__error;
        result = (iccMax2c__result_adt_t)ivar_5;
        if (result != NULL) result->count++;
        release_iccMax2c__error(ivar_5);

        
        return result;
}

extern iccMax2c__result_adt_t iccMax2c__value(uint64_t ivar_2, uint64_t ivar_3){
        iccMax2c__result_adt_t  result;
        uint8_t ivar_1;
        ivar_1 = (uint8_t)1;
        iccMax2c__value_t ivar_4;
        ivar_4 = (iccMax2c__value_t)new_iccMax2c__value();;
        ivar_4->iccMax2c__result_adt_index = (uint8_t)ivar_1;
        ivar_4->vmax = (uint64_t)ivar_2;
        ivar_4->vmin = (uint64_t)ivar_3;
        //copying to iccMax2c__result_adt from iccMax2c__value;
        result = (iccMax2c__result_adt_t)ivar_4;
        if (result != NULL) result->count++;
        release_iccMax2c__value(ivar_4);

        
        return result;
}

extern iccMax2c_funtype_3_t iccMax2c__result_ord(void){
        iccMax2c_funtype_3_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    pvs2cerror("Missing definition", PVS2C_EXIT_ERROR);

        defined = true;};
        
        return result;
}

extern uint8_t iccMax2c__ord__1(iccMax2c__result_adt_t ivar_1){
        uint8_t  result;
        bool_t ivar_15;
        ivar_1->count++;
        ivar_15 = (bool_t)r_iccMax2c__errorp((iccMax2c__result_adt_t)ivar_1);
        if (ivar_15){ 
             result = (uint8_t)0;
} else {
        
             result = (uint8_t)1;
};

        
        return result;
}

extern bool_t iccMax2c__subterm__1(iccMax2c__result_adt_t ivar_1, iccMax2c__result_adt_t ivar_2){
        bool_t  result;
        result = (bool_t) equal_iccMax2c__result_adt(ivar_1, ivar_2);

        
        return result;
}

extern bool_t iccMax2c__doublelessp__1(iccMax2c__result_adt_t ivar_1, iccMax2c__result_adt_t ivar_2){
        bool_t  result;
        result = (bool_t) false;

        
        return result;
}

extern iccMax2c_funtype_4_t iccMax2c__reduce_nat__1(iccMax2c_funtype_6_t ivar_1, iccMax2c_funtype_8_t ivar_3){
        iccMax2c_funtype_4_t  result;
        iccMax2c_closure_9_t cl33105;
        cl33105 = new_iccMax2c_closure_9();
        cl33105->fvar_1 = (iccMax2c_funtype_6_t)ivar_1;
        if (cl33105->fvar_1 != NULL) cl33105->fvar_1->count++;
        cl33105->fvar_2 = (iccMax2c_funtype_8_t)ivar_3;
        if (cl33105->fvar_2 != NULL) cl33105->fvar_2->count++;
        release_iccMax2c_funtype_6(ivar_1);
        release_iccMax2c_funtype_8(ivar_3);
        result = (iccMax2c_funtype_4_t)cl33105;

        
        return result;
}

extern iccMax2c_funtype_4_t iccMax2c__REDUCE_nat__1(iccMax2c_funtype_11_t ivar_1, iccMax2c_funtype_13_t ivar_3){
        iccMax2c_funtype_4_t  result;
        iccMax2c_closure_14_t cl33107;
        cl33107 = new_iccMax2c_closure_14();
        cl33107->fvar_1 = (iccMax2c_funtype_11_t)ivar_1;
        if (cl33107->fvar_1 != NULL) cl33107->fvar_1->count++;
        cl33107->fvar_2 = (iccMax2c_funtype_13_t)ivar_3;
        if (cl33107->fvar_2 != NULL) cl33107->fvar_2->count++;
        release_iccMax2c_funtype_11(ivar_1);
        release_iccMax2c_funtype_13(ivar_3);
        result = (iccMax2c_funtype_4_t)cl33107;

        
        return result;
}

extern iccMax2c_funtype_15_t iccMax2c__reduce_ordinal__1(iccMax2c_funtype_16_t ivar_1, iccMax2c_funtype_17_t ivar_3){
        iccMax2c_funtype_15_t  result;
        iccMax2c_closure_18_t cl33109;
        cl33109 = new_iccMax2c_closure_18();
        cl33109->fvar_1 = (iccMax2c_funtype_16_t)ivar_1;
        if (cl33109->fvar_1 != NULL) cl33109->fvar_1->count++;
        cl33109->fvar_2 = (iccMax2c_funtype_17_t)ivar_3;
        if (cl33109->fvar_2 != NULL) cl33109->fvar_2->count++;
        release_iccMax2c_funtype_16(ivar_1);
        release_iccMax2c_funtype_17(ivar_3);
        result = (iccMax2c_funtype_15_t)cl33109;

        
        return result;
}

extern iccMax2c_funtype_15_t iccMax2c__REDUCE_ordinal__1(iccMax2c_funtype_19_t ivar_1, iccMax2c_funtype_20_t ivar_3){
        iccMax2c_funtype_15_t  result;
        iccMax2c_closure_21_t cl33111;
        cl33111 = new_iccMax2c_closure_21();
        cl33111->fvar_1 = (iccMax2c_funtype_19_t)ivar_1;
        if (cl33111->fvar_1 != NULL) cl33111->fvar_1->count++;
        cl33111->fvar_2 = (iccMax2c_funtype_20_t)ivar_3;
        if (cl33111->fvar_2 != NULL) cl33111->fvar_2->count++;
        release_iccMax2c_funtype_19(ivar_1);
        release_iccMax2c_funtype_20(ivar_3);
        result = (iccMax2c_funtype_15_t)cl33111;

        
        return result;
}

extern uint8_t iccMax2c__DefaultError(void){
        uint8_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    result = (uint8_t)0;

        defined = true;};
        
        return result;
}

extern uint8_t iccMax2c__Underflow(void){
        uint8_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    result = (uint8_t)1;

        defined = true;};
        
        return result;
}

extern uint8_t iccMax2c__Overflow(void){
        uint8_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    result = (uint8_t)2;

        defined = true;};
        
        return result;
}

extern uint8_t iccMax2c__nonZero(void){
        uint8_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    result = (uint8_t)3;

        defined = true;};
        
        return result;
}

extern uint8_t iccMax2c__Tval(void){
        uint8_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    result = (uint8_t)4;

        defined = true;};
        
        return result;
}

extern uint8_t iccMax2c__Eval(void){
        uint8_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    result = (uint8_t)5;

        defined = true;};
        
        return result;
}

extern uint8_t iccMax2c__UnexpectedEOF(void){
        uint8_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    result = (uint8_t)6;

        defined = true;};
        
        return result;
}

extern uint8_t iccMax2c__badTag(void){
        uint8_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    result = (uint8_t)7;

        defined = true;};
        
        return result;
}

extern uint8_t iccMax2c__Undefined(void){
        uint8_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    result = (uint8_t)8;

        defined = true;};
        
        return result;
}

extern uint64_t iccMax2c__print64(strings__string_t ivar_1, uint64_t ivar_2){
        uint64_t  result;
        //copying to uint64 from uint64;
        result = (uint64_t)ivar_2;

        
        return result;
}

extern uint32_t iccMax2c__print32(strings__string_t ivar_1, uint32_t ivar_2){
        uint32_t  result;
        //copying to uint32 from uint32;
        result = (uint32_t)ivar_2;

        
        return result;
}

extern uint16_t iccMax2c__print16(strings__string_t ivar_1, uint16_t ivar_2){
        uint16_t  result;
        //copying to uint16 from uint16;
        result = (uint16_t)ivar_2;

        
        return result;
}

extern uint32_t iccMax2c__dataTag(void){
        uint32_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    result = (uint32_t)1684108385;

        defined = true;};
        
        return result;
}

extern uint32_t iccMax2c__calcTag(void){
        uint32_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    result = (uint32_t)1667329123;

        defined = true;};
        
        return result;
}

extern bool_t iccMax2c__channelVecOpp(uint32_t ivar_1){
        bool_t  result;
        bool_t ivar_2;
        uint32_t ivar_5;
        ivar_5 = (uint32_t)1768824864;
        ivar_2 = (ivar_1 == ivar_5);
        if (ivar_2){ 
             result = (bool_t) true;
} else {
        
             bool_t ivar_7;
             uint32_t ivar_10;
             ivar_10 = (uint32_t)1869968416;
             ivar_7 = (ivar_1 == ivar_10);
             if (ivar_7){  
           result = (bool_t) true;
} else {
             
           bool_t ivar_12;
           uint32_t ivar_15;
           ivar_15 = (uint32_t)1952933236;
           ivar_12 = (ivar_1 == ivar_15);
           if (ivar_12){   
           result = (bool_t) true;
} else {
           
           bool_t ivar_17;
           uint32_t ivar_20;
           ivar_20 = (uint32_t)1953527156;
           ivar_17 = (ivar_1 == ivar_20);
           if (ivar_17){    
            result = (bool_t) true;
} else {
           
            uint32_t ivar_23;
            ivar_23 = (uint32_t)1953718646;
            result = (ivar_1 == ivar_23);
};
};
};
};

        
        return result;
}

extern iccMax2c__result_adt_t iccMax2c__ChannelVecOp(uint32_t ivar_1, uint64_t ivar_2, uint32_t ivar_3, uint64_t ivar_4, uint64_t ivar_5, uint16_t ivar_6, uint16_t ivar_7){
        iccMax2c__result_adt_t  result;
        bool_t ivar_8;
        bool_t ivar_9;
        uint32_t ivar_12;
        ivar_12 = (uint32_t)1768824864;
        ivar_9 = (ivar_1 == ivar_12);
        if (ivar_9){ 
             ivar_8 = (bool_t) true;
} else {
        
             uint32_t ivar_15;
             ivar_15 = (uint32_t)1952933236;
             ivar_8 = (ivar_1 == ivar_15);
};
        if (ivar_8){ 
             bool_t ivar_18;
             mpz_ptr_t ivar_19;
             mpz_ptr_t ivar_21;
             mpz_mk_set_ui(ivar_21, (uint64_t)ivar_4);
             mpz_add_ui(ivar_21, ivar_21, (uint64_t)ivar_7);
             uint8_t ivar_22;
             ivar_22 = (uint8_t)1;
             mpz_mk_set_ui(ivar_19, (uint64_t)ivar_22);
             mpz_add(ivar_19, ivar_19, ivar_21);
             int64_t tmp33115 = mpz_cmp_ui(ivar_19, ivar_2);
             ivar_18 = (tmp33115 < 0);
             if (ivar_18){  
           mpz_ptr_t ivar_48;
           mpz_ptr_t ivar_30;
           mpz_mk_set_ui(ivar_30, (uint64_t)ivar_4);
           mpz_add_ui(ivar_30, ivar_30, (uint64_t)ivar_7);
           uint8_t ivar_31;
           ivar_31 = (uint8_t)1;
           mpz_mk_set_ui(ivar_48, (uint64_t)ivar_31);
           mpz_add(ivar_48, ivar_48, ivar_30);
           uint64_t ivar_43;
           //copying to uint64 from mpz;
           ivar_43 = (uint64_t)mpz_get_ui(ivar_48);
           mpz_clear(ivar_48);
           mpz_ptr_t ivar_47;
           mpz_ptr_t ivar_36;
           mpz_mk_set_ui(ivar_36, (uint64_t)ivar_5);
           mpz_add_ui(ivar_36, ivar_36, (uint64_t)ivar_7);
           uint8_t ivar_37;
           ivar_37 = (uint8_t)1;
           mpz_mk_set_ui(ivar_47, (uint64_t)ivar_37);
           mpz_add(ivar_47, ivar_47, ivar_36);
           uint64_t ivar_44;
           //copying to uint64 from mpz;
           ivar_44 = (uint64_t)mpz_get_ui(ivar_47);
           mpz_clear(ivar_47);
           iccMax2c__result_adt_t ivar_42;
           ivar_42 = (iccMax2c__result_adt_t)iccMax2c__value((uint64_t)ivar_43, (uint64_t)ivar_44);
           //copying to iccMax2c__result_adt from iccMax2c__result_adt;
           result = (iccMax2c__result_adt_t)ivar_42;
           if (result != NULL) result->count++;
           release_iccMax2c__result_adt(ivar_42);
} else {
             
           uint8_t ivar_53;
           ivar_53 = (uint8_t)iccMax2c__Overflow();
           uint8_t ivar_55;
           ivar_55 = (uint8_t)21;
           iccMax2c__result_adt_t ivar_52;
           ivar_52 = (iccMax2c__result_adt_t)iccMax2c__error((uint8_t)ivar_53, (uint32_t)ivar_3, (uint8_t)ivar_55);
           //copying to iccMax2c__result_adt from iccMax2c__result_adt;
           result = (iccMax2c__result_adt_t)ivar_52;
           if (result != NULL) result->count++;
           release_iccMax2c__result_adt(ivar_52);
};
} else {
        
             bool_t ivar_56;
             bool_t ivar_57;
             uint32_t ivar_60;
             ivar_60 = (uint32_t)1869968416;
             ivar_57 = (ivar_1 == ivar_60);
             if (ivar_57){  
           ivar_56 = (bool_t) true;
} else {
             
           uint32_t ivar_63;
           ivar_63 = (uint32_t)1953527156;
           ivar_56 = (ivar_1 == ivar_63);
};
             if (ivar_56){  
           bool_t ivar_66;
           uint32_t ivar_68;
           uint8_t ivar_70;
           ivar_70 = (uint8_t)1;
           ivar_68 = (uint32_t)(ivar_7 + ivar_70);
           ivar_66 = (ivar_5 < ivar_68);
           if (ivar_66){   
           uint8_t ivar_77;
           ivar_77 = (uint8_t)iccMax2c__Underflow();
           uint8_t ivar_79;
           ivar_79 = (uint8_t)22;
           iccMax2c__result_adt_t ivar_76;
           ivar_76 = (iccMax2c__result_adt_t)iccMax2c__error((uint8_t)ivar_77, (uint32_t)ivar_3, (uint8_t)ivar_79);
           //copying to iccMax2c__result_adt from iccMax2c__result_adt;
           result = (iccMax2c__result_adt_t)ivar_76;
           if (result != NULL) result->count++;
           release_iccMax2c__result_adt(ivar_76);
} else {
           
           mpz_ptr_t ivar_100;
           mpz_ptr_t ivar_82;
           mpz_mk_set_ui(ivar_82, (uint64_t)ivar_4);
           mpz_sub_ui(ivar_82, ivar_82, (uint64_t)ivar_7);
           uint8_t ivar_83;
           ivar_83 = (uint8_t)1;
           mpz_mk_sub_ui(ivar_100, ivar_82, (uint64_t)ivar_83);
           uint64_t ivar_95;
           //copying to uint64 from mpz;
           ivar_95 = (uint64_t)mpz_get_ui(ivar_100);
           mpz_clear(ivar_100);
           mpz_ptr_t ivar_99;
           mpz_ptr_t ivar_88;
           mpz_mk_set_ui(ivar_88, (uint64_t)ivar_5);
           mpz_sub_ui(ivar_88, ivar_88, (uint64_t)ivar_7);
           uint8_t ivar_89;
           ivar_89 = (uint8_t)1;
           mpz_mk_sub_ui(ivar_99, ivar_88, (uint64_t)ivar_89);
           uint64_t ivar_96;
           //copying to uint64 from mpz;
           ivar_96 = (uint64_t)mpz_get_ui(ivar_99);
           mpz_clear(ivar_99);
           iccMax2c__result_adt_t ivar_94;
           ivar_94 = (iccMax2c__result_adt_t)iccMax2c__value((uint64_t)ivar_95, (uint64_t)ivar_96);
           //copying to iccMax2c__result_adt from iccMax2c__result_adt;
           result = (iccMax2c__result_adt_t)ivar_94;
           if (result != NULL) result->count++;
           release_iccMax2c__result_adt(ivar_94);
};
} else {
             
           bool_t ivar_101;
           uint32_t ivar_103;
           uint8_t ivar_105;
           ivar_105 = (uint8_t)1;
           ivar_103 = (uint32_t)(ivar_7 + ivar_105);
           ivar_101 = (ivar_5 < ivar_103);
           if (ivar_101){   
           uint8_t ivar_112;
           ivar_112 = (uint8_t)iccMax2c__Underflow();
           uint8_t ivar_114;
           ivar_114 = (uint8_t)23;
           iccMax2c__result_adt_t ivar_111;
           ivar_111 = (iccMax2c__result_adt_t)iccMax2c__error((uint8_t)ivar_112, (uint32_t)ivar_3, (uint8_t)ivar_114);
           //copying to iccMax2c__result_adt from iccMax2c__result_adt;
           result = (iccMax2c__result_adt_t)ivar_111;
           if (result != NULL) result->count++;
           release_iccMax2c__result_adt(ivar_111);
} else {
           
           iccMax2c__result_adt_t ivar_117;
           ivar_117 = (iccMax2c__result_adt_t)iccMax2c__value((uint64_t)ivar_4, (uint64_t)ivar_5);
           //copying to iccMax2c__result_adt from iccMax2c__result_adt;
           result = (iccMax2c__result_adt_t)ivar_117;
           if (result != NULL) result->count++;
           release_iccMax2c__result_adt(ivar_117);
};
};
};

        
        return result;
}

extern bool_t iccMax2c__subElemTagp(uint32_t ivar_1){
        bool_t  result;
        bool_t ivar_2;
        uint32_t ivar_5;
        ivar_5 = (uint32_t)1668641398;
        ivar_2 = (ivar_1 == ivar_5);
        if (ivar_2){ 
             result = (bool_t) true;
} else {
        
             bool_t ivar_7;
             uint32_t ivar_10;
             ivar_10 = (uint32_t)1836349472;
             ivar_7 = (ivar_1 == ivar_10);
             if (ivar_7){  
           result = (bool_t) true;
} else {
             
           bool_t ivar_12;
           uint32_t ivar_15;
           ivar_15 = (uint32_t)1668052340;
           ivar_12 = (ivar_1 == ivar_15);
           if (ivar_12){   
           result = (bool_t) true;
} else {
           
           bool_t ivar_17;
           uint32_t ivar_20;
           ivar_20 = (uint32_t)1667329123;
           ivar_17 = (ivar_1 == ivar_20);
           if (ivar_17){    
            result = (bool_t) true;
} else {
           
            bool_t ivar_22;
            uint32_t ivar_25;
            ivar_25 = (uint32_t)1953066612;
            ivar_22 = (ivar_1 == ivar_25);
            if (ivar_22){     
             result = (bool_t) true;
} else {
            
             uint32_t ivar_28;
             ivar_28 = (uint32_t)1701602669;
             result = (ivar_1 == ivar_28);
};
};
};
};
};

        
        return result;
}

extern bool_t iccMax2c__stackOpTagp(uint32_t ivar_1){
        bool_t  result;
        bool_t ivar_2;
        uint32_t ivar_5;
        ivar_5 = (uint32_t)1668247673;
        ivar_2 = (ivar_1 == ivar_5);
        if (ivar_2){ 
             result = (bool_t) true;
} else {
        
             bool_t ivar_7;
             uint32_t ivar_10;
             ivar_10 = (uint32_t)1919906924;
             ivar_7 = (ivar_1 == ivar_10);
             if (ivar_7){  
           result = (bool_t) true;
} else {
             
           bool_t ivar_12;
           uint32_t ivar_15;
           ivar_15 = (uint32_t)1919906930;
           ivar_12 = (ivar_1 == ivar_15);
           if (ivar_12){   
           result = (bool_t) true;
} else {
           
           bool_t ivar_17;
           uint32_t ivar_20;
           ivar_20 = (uint32_t)1886352228;
           ivar_17 = (ivar_1 == ivar_20);
           if (ivar_17){    
            result = (bool_t) true;
} else {
           
            bool_t ivar_22;
            uint32_t ivar_25;
            ivar_25 = (uint32_t)1718380912;
            ivar_22 = (ivar_1 == ivar_25);
            if (ivar_22){     
             result = (bool_t) true;
} else {
            
             uint32_t ivar_28;
             ivar_28 = (uint32_t)1886351392;
             result = (ivar_1 == ivar_28);
};
};
};
};
};

        
        return result;
}

extern uint64_t iccMax2c__stackOut(uint32_t ivar_1, uint16_t ivar_2, uint16_t ivar_3){
        uint64_t  result;
        bool_t ivar_4;
        uint32_t ivar_6;
        ivar_6 = (uint32_t)1668247673;
        ivar_4 = (ivar_1 == ivar_6);
        if (ivar_4){ 
             uint32_t ivar_8;
             uint8_t ivar_11;
             ivar_11 = (uint8_t)1;
             ivar_8 = (uint32_t)(ivar_3 + ivar_11);
             uint32_t ivar_9;
             uint8_t ivar_14;
             ivar_14 = (uint8_t)1;
             ivar_9 = (uint32_t)(ivar_2 + ivar_14);
             result = (uint64_t)((uint64_t)ivar_8 * (uint64_t)ivar_9);
} else {
        
             bool_t ivar_17;
             uint32_t ivar_19;
             ivar_19 = (uint32_t)1919906924;
             ivar_17 = (ivar_1 == ivar_19);
             if (ivar_17){  
           uint8_t ivar_22;
           ivar_22 = (uint8_t)1;
           result = (uint64_t)(ivar_2 + ivar_22);
} else {
             
           bool_t ivar_24;
           uint32_t ivar_26;
           ivar_26 = (uint32_t)1919906930;
           ivar_24 = (ivar_1 == ivar_26);
           if (ivar_24){   
           uint8_t ivar_29;
           ivar_29 = (uint8_t)1;
           result = (uint64_t)(ivar_2 + ivar_29);
} else {
           
           bool_t ivar_31;
           uint32_t ivar_33;
           ivar_33 = (uint32_t)1886352228;
           ivar_31 = (ivar_1 == ivar_33);
           if (ivar_31){    
            uint32_t ivar_35;
            uint32_t ivar_37;
            uint8_t ivar_40;
            ivar_40 = (uint8_t)1;
            ivar_37 = (uint32_t)(ivar_2 + ivar_40);
            ivar_35 = (uint32_t)(ivar_37 + ivar_3);
            uint8_t ivar_36;
            ivar_36 = (uint8_t)1;
            result = (uint64_t)(ivar_35 + ivar_36);
} else {
           
            bool_t ivar_44;
            uint32_t ivar_46;
            ivar_46 = (uint32_t)1718380912;
            ivar_44 = (ivar_1 == ivar_46);
            if (ivar_44){     
             uint8_t ivar_49;
             ivar_49 = (uint8_t)1;
             result = (uint64_t)(ivar_2 + ivar_49);
} else {
            
             result = (uint64_t)0;
};
};
};
};
};

        
        return result;
}

extern bool_t iccMax2c__matrixOpTagp(uint32_t ivar_1){
        bool_t  result;
        bool_t ivar_2;
        uint32_t ivar_5;
        ivar_5 = (uint32_t)1936682102;
        ivar_2 = (ivar_1 == ivar_5);
        if (ivar_2){ 
             result = (bool_t) true;
} else {
        
             uint32_t ivar_8;
             ivar_8 = (uint32_t)1953653102;
             result = (ivar_1 == ivar_8);
};

        
        return result;
}

extern uint64_t iccMax2c__matrixIn(uint32_t ivar_1, uint16_t ivar_2, uint16_t ivar_3){
        uint64_t  result;
        bool_t ivar_4;
        uint32_t ivar_6;
        ivar_6 = (uint32_t)1936682102;
        ivar_4 = (ivar_1 == ivar_6);
        if (ivar_4){ 
             uint64_t ivar_8;
             uint64_t ivar_10;
             uint32_t ivar_12;
             uint8_t ivar_15;
             ivar_15 = (uint8_t)1;
             ivar_12 = (uint32_t)(ivar_2 + ivar_15);
             uint32_t ivar_13;
             uint8_t ivar_18;
             ivar_18 = (uint8_t)1;
             ivar_13 = (uint32_t)(ivar_3 + ivar_18);
             ivar_10 = (uint64_t)((uint64_t)ivar_12 * (uint64_t)ivar_13);
             ivar_8 = (uint64_t)(ivar_10 + ivar_2);
             uint8_t ivar_9;
             ivar_9 = (uint8_t)1;
             result = (uint64_t)(ivar_8 + ivar_9);
} else {
        
             uint32_t ivar_23;
             uint8_t ivar_26;
             ivar_26 = (uint8_t)1;
             ivar_23 = (uint32_t)(ivar_2 + ivar_26);
             uint32_t ivar_24;
             uint8_t ivar_29;
             ivar_29 = (uint8_t)1;
             ivar_24 = (uint32_t)(ivar_3 + ivar_29);
             result = (uint64_t)((uint64_t)ivar_23 * (uint64_t)ivar_24);
};

        
        return result;
}

extern uint64_t iccMax2c__matrixOut(uint32_t ivar_1, uint16_t ivar_2, uint16_t ivar_3){
        uint64_t  result;
        bool_t ivar_4;
        uint32_t ivar_6;
        ivar_6 = (uint32_t)1936682102;
        ivar_4 = (ivar_1 == ivar_6);
        if (ivar_4){ 
             uint8_t ivar_9;
             ivar_9 = (uint8_t)1;
             result = (uint64_t)(ivar_3 + ivar_9);
} else {
        
             uint32_t ivar_11;
             uint8_t ivar_14;
             ivar_14 = (uint8_t)1;
             ivar_11 = (uint32_t)(ivar_2 + ivar_14);
             uint32_t ivar_12;
             uint8_t ivar_17;
             ivar_17 = (uint8_t)1;
             ivar_12 = (uint32_t)(ivar_3 + ivar_17);
             result = (uint64_t)((uint64_t)ivar_11 * (uint64_t)ivar_12);
};

        
        return result;
}

extern bool_t iccMax2c__seqFuncOpp(uint32_t ivar_1){
        bool_t  result;
        bool_t ivar_2;
        uint32_t ivar_5;
        ivar_5 = (uint32_t)1937075488;
        ivar_2 = (ivar_1 == ivar_5);
        if (ivar_2){ 
             result = (bool_t) true;
} else {
        
             bool_t ivar_7;
             uint32_t ivar_10;
             ivar_10 = (uint32_t)1886547812;
             ivar_7 = (ivar_1 == ivar_10);
             if (ivar_7){  
           result = (bool_t) true;
} else {
             
           bool_t ivar_12;
           uint32_t ivar_15;
           ivar_15 = (uint32_t)1835626016;
           ivar_12 = (ivar_1 == ivar_15);
           if (ivar_12){   
           result = (bool_t) true;
} else {
           
           bool_t ivar_17;
           uint32_t ivar_20;
           ivar_20 = (uint32_t)1835104288;
           ivar_17 = (ivar_1 == ivar_20);
           if (ivar_17){    
            result = (bool_t) true;
} else {
           
            bool_t ivar_22;
            uint32_t ivar_25;
            ivar_25 = (uint32_t)1634624544;
            ivar_22 = (ivar_1 == ivar_25);
            if (ivar_22){     
             result = (bool_t) true;
} else {
            
             uint32_t ivar_28;
             ivar_28 = (uint32_t)1869750304;
             result = (ivar_1 == ivar_28);
};
};
};
};
};

        
        return result;
}

extern bool_t iccMax2c__FuncVecOpp(uint32_t ivar_1){
        bool_t  result;
        bool_t ivar_2;
        uint32_t ivar_5;
        ivar_5 = (uint32_t)1885937696;
        ivar_2 = (ivar_1 == ivar_5);
        if (ivar_2){ 
             result = (bool_t) true;
} else {
        
             bool_t ivar_7;
             uint32_t ivar_10;
             ivar_10 = (uint32_t)726224454;
             ivar_7 = (ivar_1 == ivar_10);
             if (ivar_7){  
           result = (bool_t) true;
} else {
             
           bool_t ivar_12;
           uint32_t ivar_15;
           ivar_15 = (uint32_t)759778886;
           ivar_12 = (ivar_1 == ivar_15);
           if (ivar_12){   
           result = (bool_t) true;
} else {
           
           bool_t ivar_17;
           uint32_t ivar_20;
           ivar_20 = (uint32_t)1314999840;
           ivar_17 = (ivar_1 == ivar_20);
           if (ivar_17){    
            result = (bool_t) true;
} else {
           
            bool_t ivar_22;
            uint32_t ivar_25;
            ivar_25 = (uint32_t)1633969184;
            ivar_22 = (ivar_1 == ivar_25);
            if (ivar_22){     
             result = (bool_t) true;
} else {
            
             bool_t ivar_27;
             uint32_t ivar_30;
             ivar_30 = (uint32_t)1937072672;
             ivar_27 = (ivar_1 == ivar_30);
             if (ivar_27){      
              result = (bool_t) true;
} else {
             
              bool_t ivar_32;
              uint32_t ivar_35;
              ivar_35 = (uint32_t)1836411936;
              ivar_32 = (ivar_1 == ivar_35);
              if (ivar_32){       
               result = (bool_t) true;
} else {
              
               bool_t ivar_37;
               uint32_t ivar_40;
               ivar_40 = (uint32_t)1684633120;
               ivar_37 = (ivar_1 == ivar_40);
               if (ivar_37){        
                result = (bool_t) true;
} else {
               
                bool_t ivar_42;
                uint32_t ivar_45;
                ivar_45 = (uint32_t)1836016672;
                ivar_42 = (ivar_1 == ivar_45);
                if (ivar_42){         
                 result = (bool_t) true;
} else {
                
                 bool_t ivar_47;
                 uint32_t ivar_50;
                 ivar_50 = (uint32_t)1886353184;
                 ivar_47 = (ivar_1 == ivar_50);
                 if (ivar_47){          
                  result = (bool_t) true;
} else {
                 
                  bool_t ivar_52;
                  uint32_t ivar_55;
                  ivar_55 = (uint32_t)1734438241;
                  ivar_52 = (ivar_1 == ivar_55);
                  if (ivar_52){           
                   result = (bool_t) true;
} else {
                  
                   bool_t ivar_57;
                   uint32_t ivar_60;
                   ivar_60 = (uint32_t)1935762532;
                   ivar_57 = (ivar_1 == ivar_60);
                   if (ivar_57){            
                    result = (bool_t) true;
} else {
                   
                    bool_t ivar_62;
                    uint32_t ivar_65;
                    ivar_65 = (uint32_t)1936946530;
                    ivar_62 = (ivar_1 == ivar_65);
                    if (ivar_62){             
                     result = (bool_t) true;
} else {
                    
                     bool_t ivar_67;
                     uint32_t ivar_70;
                     ivar_70 = (uint32_t)1936553324;
                     ivar_67 = (ivar_1 == ivar_70);
                     if (ivar_67){              
                      result = (bool_t) true;
} else {
                     
                      bool_t ivar_72;
                      uint32_t ivar_75;
                      ivar_75 = (uint32_t)1935960438;
                      ivar_72 = (ivar_1 == ivar_75);
                      if (ivar_72){               
                       result = (bool_t) true;
} else {
                      
                       bool_t ivar_77;
                       uint32_t ivar_80;
                       ivar_80 = (uint32_t)1936793632;
                       ivar_77 = (ivar_1 == ivar_80);
                       if (ivar_77){                
                        result = (bool_t) true;
} else {
                       
                        bool_t ivar_82;
                        uint32_t ivar_85;
                        ivar_85 = (uint32_t)1936814708;
                        ivar_82 = (ivar_1 == ivar_85);
                        if (ivar_82){                 
                         result = (bool_t) true;
} else {
                        
                         bool_t ivar_87;
                         uint32_t ivar_90;
                         ivar_90 = (uint32_t)1667375136;
                         ivar_87 = (ivar_1 == ivar_90);
                         if (ivar_87){                  
                          result = (bool_t) true;
} else {
                         
                          bool_t ivar_92;
                          uint32_t ivar_95;
                          ivar_95 = (uint32_t)1667396212;
                          ivar_92 = (ivar_1 == ivar_95);
                          if (ivar_92){                   
                           result = (bool_t) true;
} else {
                          
                           bool_t ivar_97;
                           uint32_t ivar_100;
                           ivar_100 = (uint32_t)1633841952;
                           ivar_97 = (ivar_1 == ivar_100);
                           if (ivar_97){                    
                            result = (bool_t) true;
} else {
                           
                            bool_t ivar_102;
                            uint32_t ivar_105;
                            ivar_105 = (uint32_t)1852139296;
                            ivar_102 = (ivar_1 == ivar_105);
                            if (ivar_102){                     
                             result = (bool_t) true;
} else {
                            
                             bool_t ivar_107;
                             uint32_t ivar_110;
                             ivar_110 = (uint32_t)1919905380;
                             ivar_107 = (ivar_1 == ivar_110);
                             if (ivar_107){                      
                              result = (bool_t) true;
} else {
                             
                              bool_t ivar_112;
                              uint32_t ivar_115;
                              ivar_115 = (uint32_t)1718382450;
                              ivar_112 = (ivar_1 == ivar_115);
                              if (ivar_112){                       
                               result = (bool_t) true;
} else {
                              
                               bool_t ivar_117;
                               uint32_t ivar_120;
                               ivar_120 = (uint32_t)1667590508;
                               ivar_117 = (ivar_1 == ivar_120);
                               if (ivar_117){                        
                                result = (bool_t) true;
} else {
                               
                                bool_t ivar_122;
                                uint32_t ivar_125;
                                ivar_125 = (uint32_t)1953656419;
                                ivar_122 = (ivar_1 == ivar_125);
                                if (ivar_122){                         
                                 result = (bool_t) true;
} else {
                                
                                 bool_t ivar_127;
                                 uint32_t ivar_130;
                                 ivar_130 = (uint32_t)1936287598;
                                 ivar_127 = (ivar_1 == ivar_130);
                                 if (ivar_127){                          
                                  result = (bool_t) true;
} else {
                                 
                                  bool_t ivar_132;
                                  uint32_t ivar_135;
                                  ivar_135 = (uint32_t)1702391840;
                                  ivar_132 = (ivar_1 == ivar_135);
                                  if (ivar_132){                           
                                   result = (bool_t) true;
} else {
                                  
                                   bool_t ivar_137;
                                   uint32_t ivar_140;
                                   ivar_140 = (uint32_t)1819240224;
                                   ivar_137 = (ivar_1 == ivar_140);
                                   if (ivar_137){                            
                                    result = (bool_t) true;
} else {
                                   
                                    bool_t ivar_142;
                                    uint32_t ivar_145;
                                    ivar_145 = (uint32_t)1819156512;
                                    ivar_142 = (ivar_1 == ivar_145);
                                    if (ivar_142){                             
                                     result = (bool_t) true;
} else {
                                    
                                     bool_t ivar_147;
                                     uint32_t ivar_150;
                                     ivar_150 = (uint32_t)1936289312;
                                     ivar_147 = (ivar_1 == ivar_150);
                                     if (ivar_147){                              
                                      result = (bool_t) true;
} else {
                                     
                                      bool_t ivar_152;
                                      uint32_t ivar_155;
                                      ivar_155 = (uint32_t)1668248352;
                                      ivar_152 = (ivar_1 == ivar_155);
                                      if (ivar_152){                               
                                       result = (bool_t) true;
} else {
                                      
                                       bool_t ivar_157;
                                       uint32_t ivar_160;
                                       ivar_160 = (uint32_t)1952542240;
                                       ivar_157 = (ivar_1 == ivar_160);
                                       if (ivar_157){                                
                                        result = (bool_t) true;
} else {
                                       
                                        bool_t ivar_162;
                                        uint32_t ivar_165;
                                        ivar_165 = (uint32_t)1634953582;
                                        ivar_162 = (ivar_1 == ivar_165);
                                        if (ivar_162){                                 
                                         result = (bool_t) true;
} else {
                                        
                                         bool_t ivar_167;
                                         uint32_t ivar_170;
                                         ivar_170 = (uint32_t)1633906547;
                                         ivar_167 = (ivar_1 == ivar_170);
                                         if (ivar_167){                                  
                                          result = (bool_t) true;
} else {
                                         
                                          bool_t ivar_172;
                                          uint32_t ivar_175;
                                          ivar_175 = (uint32_t)1635017070;
                                          ivar_172 = (ivar_1 == ivar_175);
                                          if (ivar_172){                                   
                                           result = (bool_t) true;
} else {
                                          
                                           bool_t ivar_177;
                                           uint32_t ivar_180;
                                           ivar_180 = (uint32_t)1635020338;
                                           ivar_177 = (ivar_1 == ivar_180);
                                           if (ivar_177){                                    
                                            result = (bool_t) true;
} else {
                                           
                                            bool_t ivar_182;
                                            uint32_t ivar_185;
                                            ivar_185 = (uint32_t)1668575088;
                                            ivar_182 = (ivar_1 == ivar_185);
                                            if (ivar_182){                                     
                                             result = (bool_t) true;
} else {
                                            
                                             bool_t ivar_187;
                                             uint32_t ivar_190;
                                             ivar_190 = (uint32_t)1886678883;
                                             ivar_187 = (ivar_1 == ivar_190);
                                             if (ivar_187){                                      
                                              result = (bool_t) true;
} else {
                                             
                                              bool_t ivar_192;
                                              uint32_t ivar_195;
                                              ivar_195 = (uint32_t)1919841645;
                                              ivar_192 = (ivar_1 == ivar_195);
                                              if (ivar_192){                                       
                                               result = (bool_t) true;
} else {
                                              
                                               bool_t ivar_197;
                                               uint32_t ivar_200;
                                               ivar_200 = (uint32_t)1819549728;
                                               ivar_197 = (ivar_1 == ivar_200);
                                               if (ivar_197){                                        
                                                result = (bool_t) true;
} else {
                                               
                                                bool_t ivar_202;
                                                uint32_t ivar_205;
                                                ivar_205 = (uint32_t)1818566688;
                                                ivar_202 = (ivar_1 == ivar_205);
                                                if (ivar_202){                                         
                                                 result = (bool_t) true;
} else {
                                                
                                                 bool_t ivar_207;
                                                 uint32_t ivar_210;
                                                 ivar_210 = (uint32_t)1701912608;
                                                 ivar_207 = (ivar_1 == ivar_210);
                                                 if (ivar_207){                                          
                                                  result = (bool_t) true;
} else {
                                                 
                                                  bool_t ivar_212;
                                                  uint32_t ivar_215;
                                                  ivar_215 = (uint32_t)1852137842;
                                                  ivar_212 = (ivar_1 == ivar_215);
                                                  if (ivar_212){                                           
                                                   result = (bool_t) true;
} else {
                                                  
                                                   bool_t ivar_217;
                                                   uint32_t ivar_220;
                                                   ivar_220 = (uint32_t)1734680608;
                                                   ivar_217 = (ivar_1 == ivar_220);
                                                   if (ivar_217){                                            
                                                    result = (bool_t) true;
} else {
                                                   
                                                    bool_t ivar_222;
                                                    uint32_t ivar_225;
                                                    ivar_225 = (uint32_t)1735663648;
                                                    ivar_222 = (ivar_1 == ivar_225);
                                                    if (ivar_222){                                             
                                                     result = (bool_t) true;
} else {
                                                    
                                                     bool_t ivar_227;
                                                     uint32_t ivar_230;
                                                     ivar_230 = (uint32_t)1986881902;
                                                     ivar_227 = (ivar_1 == ivar_230);
                                                     if (ivar_227){                                              
                                                      result = (bool_t) true;
} else {
                                                     
                                                      bool_t ivar_232;
                                                      uint32_t ivar_235;
                                                      ivar_235 = (uint32_t)1986879864;
                                                      ivar_232 = (ivar_1 == ivar_235);
                                                      if (ivar_232){                                               
                                                       result = (bool_t) true;
} else {
                                                      
                                                       bool_t ivar_237;
                                                       uint32_t ivar_240;
                                                       ivar_240 = (uint32_t)1986096740;
                                                       ivar_237 = (ivar_1 == ivar_240);
                                                       if (ivar_237){                                                
                                                        result = (bool_t) true;
} else {
                                                       
                                                        bool_t ivar_242;
                                                        uint32_t ivar_245;
                                                        ivar_245 = (uint32_t)1987015200;
                                                        ivar_242 = (ivar_1 == ivar_245);
                                                        if (ivar_242){                                                 
                                                         result = (bool_t) true;
} else {
                                                        
                                                         bool_t ivar_247;
                                                         uint32_t ivar_250;
                                                         ivar_250 = (uint32_t)1951162722;
                                                         ivar_247 = (ivar_1 == ivar_250);
                                                         if (ivar_247){                                                  
                                                          result = (bool_t) true;
} else {
                                                         
                                                          uint32_t ivar_253;
                                                          ivar_253 = (uint32_t)1951947098;
                                                          result = (ivar_1 == ivar_253);
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};

        
        return result;
}

extern uint32_t iccMax2c__FuncVecIn(uint32_t ivar_1, uint16_t ivar_2){
        uint32_t  result;
        bool_t ivar_3;
        bool_t ivar_4;
        uint32_t ivar_7;
        ivar_7 = (uint32_t)1885937696;
        ivar_4 = (ivar_1 == ivar_7);
        if (ivar_4){ 
             ivar_3 = (bool_t) true;
} else {
        
             bool_t ivar_9;
             uint32_t ivar_12;
             ivar_12 = (uint32_t)726224454;
             ivar_9 = (ivar_1 == ivar_12);
             if (ivar_9){  
           ivar_3 = (bool_t) true;
} else {
             
           uint32_t ivar_15;
           ivar_15 = (uint32_t)759778886;
           ivar_3 = (ivar_1 == ivar_15);
};
};
        if (ivar_3){ 
             result = (uint32_t)0;
} else {
        
             bool_t ivar_19;
             bool_t ivar_20;
             uint32_t ivar_23;
             ivar_23 = (uint32_t)1734438241;
             ivar_20 = (ivar_1 == ivar_23);
             if (ivar_20){  
           ivar_19 = (bool_t) true;
} else {
             
           bool_t ivar_25;
           uint32_t ivar_28;
           ivar_28 = (uint32_t)1935762532;
           ivar_25 = (ivar_1 == ivar_28);
           if (ivar_25){   
           ivar_19 = (bool_t) true;
} else {
           
           bool_t ivar_30;
           uint32_t ivar_33;
           ivar_33 = (uint32_t)1936946530;
           ivar_30 = (ivar_1 == ivar_33);
           if (ivar_30){    
            ivar_19 = (bool_t) true;
} else {
           
            bool_t ivar_35;
            uint32_t ivar_38;
            ivar_38 = (uint32_t)1936553324;
            ivar_35 = (ivar_1 == ivar_38);
            if (ivar_35){     
             ivar_19 = (bool_t) true;
} else {
            
             uint32_t ivar_41;
             ivar_41 = (uint32_t)1935960438;
             ivar_19 = (ivar_1 == ivar_41);
};
};
};
};
             if (ivar_19){  
           uint8_t ivar_48;
           ivar_48 = (uint8_t)2;
           result = (uint32_t)(ivar_2 + ivar_48);
} else {
             
           bool_t ivar_50;
           bool_t ivar_51;
           uint32_t ivar_54;
           ivar_54 = (uint32_t)1951162722;
           ivar_51 = (ivar_1 == ivar_54);
           if (ivar_51){   
           ivar_50 = (bool_t) true;
} else {
           
           uint32_t ivar_57;
           ivar_57 = (uint32_t)1951947098;
           ivar_50 = (ivar_1 == ivar_57);
};
           if (ivar_50){   
           uint8_t ivar_60;
           ivar_60 = (uint8_t)3;
           uint32_t ivar_61;
           uint8_t ivar_63;
           ivar_63 = (uint8_t)1;
           ivar_61 = (uint32_t)(ivar_2 + ivar_63);
           result = (uint32_t)((uint64_t)ivar_60 * (uint64_t)ivar_61);
} else {
           
           bool_t ivar_66;
           bool_t ivar_67;
           uint32_t ivar_70;
           ivar_70 = (uint32_t)1936793632;
           ivar_67 = (ivar_1 == ivar_70);
           if (ivar_67){    
            ivar_66 = (bool_t) true;
} else {
           
            bool_t ivar_72;
            uint32_t ivar_75;
            ivar_75 = (uint32_t)1936814708;
            ivar_72 = (ivar_1 == ivar_75);
            if (ivar_72){     
             ivar_66 = (bool_t) true;
} else {
            
             bool_t ivar_77;
             uint32_t ivar_80;
             ivar_80 = (uint32_t)1667375136;
             ivar_77 = (ivar_1 == ivar_80);
             if (ivar_77){      
              ivar_66 = (bool_t) true;
} else {
             
              bool_t ivar_82;
              uint32_t ivar_85;
              ivar_85 = (uint32_t)1667396212;
              ivar_82 = (ivar_1 == ivar_85);
              if (ivar_82){       
               ivar_66 = (bool_t) true;
} else {
              
               bool_t ivar_87;
               uint32_t ivar_90;
               ivar_90 = (uint32_t)1633841952;
               ivar_87 = (ivar_1 == ivar_90);
               if (ivar_87){        
                ivar_66 = (bool_t) true;
} else {
               
                bool_t ivar_92;
                uint32_t ivar_95;
                ivar_95 = (uint32_t)1852139296;
                ivar_92 = (ivar_1 == ivar_95);
                if (ivar_92){         
                 ivar_66 = (bool_t) true;
} else {
                
                 bool_t ivar_97;
                 uint32_t ivar_100;
                 ivar_100 = (uint32_t)1919905380;
                 ivar_97 = (ivar_1 == ivar_100);
                 if (ivar_97){          
                  ivar_66 = (bool_t) true;
} else {
                 
                  bool_t ivar_102;
                  uint32_t ivar_105;
                  ivar_105 = (uint32_t)1718382450;
                  ivar_102 = (ivar_1 == ivar_105);
                  if (ivar_102){           
                   ivar_66 = (bool_t) true;
} else {
                  
                   bool_t ivar_107;
                   uint32_t ivar_110;
                   ivar_110 = (uint32_t)1667590508;
                   ivar_107 = (ivar_1 == ivar_110);
                   if (ivar_107){            
                    ivar_66 = (bool_t) true;
} else {
                   
                    bool_t ivar_112;
                    uint32_t ivar_115;
                    ivar_115 = (uint32_t)1953656419;
                    ivar_112 = (ivar_1 == ivar_115);
                    if (ivar_112){             
                     ivar_66 = (bool_t) true;
} else {
                    
                     bool_t ivar_117;
                     uint32_t ivar_120;
                     ivar_120 = (uint32_t)1936287598;
                     ivar_117 = (ivar_1 == ivar_120);
                     if (ivar_117){              
                      ivar_66 = (bool_t) true;
} else {
                     
                      bool_t ivar_122;
                      uint32_t ivar_125;
                      ivar_125 = (uint32_t)1702391840;
                      ivar_122 = (ivar_1 == ivar_125);
                      if (ivar_122){               
                       ivar_66 = (bool_t) true;
} else {
                      
                       bool_t ivar_127;
                       uint32_t ivar_130;
                       ivar_130 = (uint32_t)1819240224;
                       ivar_127 = (ivar_1 == ivar_130);
                       if (ivar_127){                
                        ivar_66 = (bool_t) true;
} else {
                       
                        bool_t ivar_132;
                        uint32_t ivar_135;
                        ivar_135 = (uint32_t)1819156512;
                        ivar_132 = (ivar_1 == ivar_135);
                        if (ivar_132){                 
                         ivar_66 = (bool_t) true;
} else {
                        
                         bool_t ivar_137;
                         uint32_t ivar_140;
                         ivar_140 = (uint32_t)1936289312;
                         ivar_137 = (ivar_1 == ivar_140);
                         if (ivar_137){                  
                          ivar_66 = (bool_t) true;
} else {
                         
                          bool_t ivar_142;
                          uint32_t ivar_145;
                          ivar_145 = (uint32_t)1668248352;
                          ivar_142 = (ivar_1 == ivar_145);
                          if (ivar_142){                   
                           ivar_66 = (bool_t) true;
} else {
                          
                           bool_t ivar_147;
                           uint32_t ivar_150;
                           ivar_150 = (uint32_t)1952542240;
                           ivar_147 = (ivar_1 == ivar_150);
                           if (ivar_147){                    
                            ivar_66 = (bool_t) true;
} else {
                           
                            bool_t ivar_152;
                            uint32_t ivar_155;
                            ivar_155 = (uint32_t)1634953582;
                            ivar_152 = (ivar_1 == ivar_155);
                            if (ivar_152){                     
                             ivar_66 = (bool_t) true;
} else {
                            
                             bool_t ivar_157;
                             uint32_t ivar_160;
                             ivar_160 = (uint32_t)1633906547;
                             ivar_157 = (ivar_1 == ivar_160);
                             if (ivar_157){                      
                              ivar_66 = (bool_t) true;
} else {
                             
                              bool_t ivar_162;
                              uint32_t ivar_165;
                              ivar_165 = (uint32_t)1635017070;
                              ivar_162 = (ivar_1 == ivar_165);
                              if (ivar_162){                       
                               ivar_66 = (bool_t) true;
} else {
                              
                               uint32_t ivar_168;
                               ivar_168 = (uint32_t)1919841645;
                               ivar_66 = (ivar_1 == ivar_168);
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
           if (ivar_66){    
            uint8_t ivar_191;
            ivar_191 = (uint8_t)1;
            result = (uint32_t)(ivar_2 + ivar_191);
} else {
           
            uint8_t ivar_193;
            ivar_193 = (uint8_t)2;
            uint32_t ivar_194;
            uint8_t ivar_196;
            ivar_196 = (uint8_t)1;
            ivar_194 = (uint32_t)(ivar_2 + ivar_196);
            result = (uint32_t)((uint64_t)ivar_193 * (uint64_t)ivar_194);
};
};
};
};

        
        return result;
}

extern uint32_t iccMax2c__FuncVecOut(uint32_t ivar_1, uint16_t ivar_2){
        uint32_t  result;
        bool_t ivar_3;
        bool_t ivar_4;
        uint32_t ivar_7;
        ivar_7 = (uint32_t)1885937696;
        ivar_4 = (ivar_1 == ivar_7);
        if (ivar_4){ 
             ivar_3 = (bool_t) true;
} else {
        
             bool_t ivar_9;
             uint32_t ivar_12;
             ivar_12 = (uint32_t)726224454;
             ivar_9 = (ivar_1 == ivar_12);
             if (ivar_9){  
           ivar_3 = (bool_t) true;
} else {
             
           uint32_t ivar_15;
           ivar_15 = (uint32_t)759778886;
           ivar_3 = (ivar_1 == ivar_15);
};
};
        if (ivar_3){ 
             result = (uint32_t)1;
} else {
        
             bool_t ivar_19;
             bool_t ivar_20;
             uint32_t ivar_23;
             ivar_23 = (uint32_t)1734438241;
             ivar_20 = (ivar_1 == ivar_23);
             if (ivar_20){  
           ivar_19 = (bool_t) true;
} else {
             
           bool_t ivar_25;
           uint32_t ivar_28;
           ivar_28 = (uint32_t)1935762532;
           ivar_25 = (ivar_1 == ivar_28);
           if (ivar_25){   
           ivar_19 = (bool_t) true;
} else {
           
           bool_t ivar_30;
           uint32_t ivar_33;
           ivar_33 = (uint32_t)1936946530;
           ivar_30 = (ivar_1 == ivar_33);
           if (ivar_30){    
            ivar_19 = (bool_t) true;
} else {
           
            bool_t ivar_35;
            uint32_t ivar_38;
            ivar_38 = (uint32_t)1936553324;
            ivar_35 = (ivar_1 == ivar_38);
            if (ivar_35){     
             ivar_19 = (bool_t) true;
} else {
            
             uint32_t ivar_41;
             ivar_41 = (uint32_t)1935960438;
             ivar_19 = (ivar_1 == ivar_41);
};
};
};
};
             if (ivar_19){  
           uint8_t ivar_48;
           ivar_48 = (uint8_t)1;
           result = (uint32_t)(ivar_2 + ivar_48);
} else {
             
           bool_t ivar_50;
           bool_t ivar_51;
           uint32_t ivar_54;
           ivar_54 = (uint32_t)1951162722;
           ivar_51 = (ivar_1 == ivar_54);
           if (ivar_51){   
           ivar_50 = (bool_t) true;
} else {
           
           uint32_t ivar_57;
           ivar_57 = (uint32_t)1951947098;
           ivar_50 = (ivar_1 == ivar_57);
};
           if (ivar_50){   
           uint8_t ivar_60;
           ivar_60 = (uint8_t)3;
           uint32_t ivar_61;
           uint8_t ivar_63;
           ivar_63 = (uint8_t)1;
           ivar_61 = (uint32_t)(ivar_2 + ivar_63);
           result = (uint32_t)((uint64_t)ivar_60 * (uint64_t)ivar_61);
} else {
           
           bool_t ivar_66;
           bool_t ivar_67;
           uint32_t ivar_70;
           ivar_70 = (uint32_t)1936793632;
           ivar_67 = (ivar_1 == ivar_70);
           if (ivar_67){    
            ivar_66 = (bool_t) true;
} else {
           
            bool_t ivar_72;
            uint32_t ivar_75;
            ivar_75 = (uint32_t)1936814708;
            ivar_72 = (ivar_1 == ivar_75);
            if (ivar_72){     
             ivar_66 = (bool_t) true;
} else {
            
             bool_t ivar_77;
             uint32_t ivar_80;
             ivar_80 = (uint32_t)1667375136;
             ivar_77 = (ivar_1 == ivar_80);
             if (ivar_77){      
              ivar_66 = (bool_t) true;
} else {
             
              bool_t ivar_82;
              uint32_t ivar_85;
              ivar_85 = (uint32_t)1667396212;
              ivar_82 = (ivar_1 == ivar_85);
              if (ivar_82){       
               ivar_66 = (bool_t) true;
} else {
              
               bool_t ivar_87;
               uint32_t ivar_90;
               ivar_90 = (uint32_t)1633841952;
               ivar_87 = (ivar_1 == ivar_90);
               if (ivar_87){        
                ivar_66 = (bool_t) true;
} else {
               
                bool_t ivar_92;
                uint32_t ivar_95;
                ivar_95 = (uint32_t)1852139296;
                ivar_92 = (ivar_1 == ivar_95);
                if (ivar_92){         
                 ivar_66 = (bool_t) true;
} else {
                
                 bool_t ivar_97;
                 uint32_t ivar_100;
                 ivar_100 = (uint32_t)1919905380;
                 ivar_97 = (ivar_1 == ivar_100);
                 if (ivar_97){          
                  ivar_66 = (bool_t) true;
} else {
                 
                  bool_t ivar_102;
                  uint32_t ivar_105;
                  ivar_105 = (uint32_t)1718382450;
                  ivar_102 = (ivar_1 == ivar_105);
                  if (ivar_102){           
                   ivar_66 = (bool_t) true;
} else {
                  
                   bool_t ivar_107;
                   uint32_t ivar_110;
                   ivar_110 = (uint32_t)1667590508;
                   ivar_107 = (ivar_1 == ivar_110);
                   if (ivar_107){            
                    ivar_66 = (bool_t) true;
} else {
                   
                    bool_t ivar_112;
                    uint32_t ivar_115;
                    ivar_115 = (uint32_t)1953656419;
                    ivar_112 = (ivar_1 == ivar_115);
                    if (ivar_112){             
                     ivar_66 = (bool_t) true;
} else {
                    
                     bool_t ivar_117;
                     uint32_t ivar_120;
                     ivar_120 = (uint32_t)1936287598;
                     ivar_117 = (ivar_1 == ivar_120);
                     if (ivar_117){              
                      ivar_66 = (bool_t) true;
} else {
                     
                      bool_t ivar_122;
                      uint32_t ivar_125;
                      ivar_125 = (uint32_t)1702391840;
                      ivar_122 = (ivar_1 == ivar_125);
                      if (ivar_122){               
                       ivar_66 = (bool_t) true;
} else {
                      
                       bool_t ivar_127;
                       uint32_t ivar_130;
                       ivar_130 = (uint32_t)1819240224;
                       ivar_127 = (ivar_1 == ivar_130);
                       if (ivar_127){                
                        ivar_66 = (bool_t) true;
} else {
                       
                        bool_t ivar_132;
                        uint32_t ivar_135;
                        ivar_135 = (uint32_t)1819156512;
                        ivar_132 = (ivar_1 == ivar_135);
                        if (ivar_132){                 
                         ivar_66 = (bool_t) true;
} else {
                        
                         bool_t ivar_137;
                         uint32_t ivar_140;
                         ivar_140 = (uint32_t)1936289312;
                         ivar_137 = (ivar_1 == ivar_140);
                         if (ivar_137){                  
                          ivar_66 = (bool_t) true;
} else {
                         
                          bool_t ivar_142;
                          uint32_t ivar_145;
                          ivar_145 = (uint32_t)1668248352;
                          ivar_142 = (ivar_1 == ivar_145);
                          if (ivar_142){                   
                           ivar_66 = (bool_t) true;
} else {
                          
                           bool_t ivar_147;
                           uint32_t ivar_150;
                           ivar_150 = (uint32_t)1952542240;
                           ivar_147 = (ivar_1 == ivar_150);
                           if (ivar_147){                    
                            ivar_66 = (bool_t) true;
} else {
                           
                            bool_t ivar_152;
                            uint32_t ivar_155;
                            ivar_155 = (uint32_t)1634953582;
                            ivar_152 = (ivar_1 == ivar_155);
                            if (ivar_152){                     
                             ivar_66 = (bool_t) true;
} else {
                            
                             bool_t ivar_157;
                             uint32_t ivar_160;
                             ivar_160 = (uint32_t)1633906547;
                             ivar_157 = (ivar_1 == ivar_160);
                             if (ivar_157){                      
                              ivar_66 = (bool_t) true;
} else {
                             
                              bool_t ivar_162;
                              uint32_t ivar_165;
                              ivar_165 = (uint32_t)1635017070;
                              ivar_162 = (ivar_1 == ivar_165);
                              if (ivar_162){                       
                               ivar_66 = (bool_t) true;
} else {
                              
                               uint32_t ivar_168;
                               ivar_168 = (uint32_t)1919841645;
                               ivar_66 = (ivar_1 == ivar_168);
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
           if (ivar_66){    
            uint8_t ivar_191;
            ivar_191 = (uint8_t)1;
            result = (uint32_t)(ivar_2 + ivar_191);
} else {
           
            bool_t ivar_193;
            bool_t ivar_194;
            uint32_t ivar_197;
            ivar_197 = (uint32_t)1668575088;
            ivar_194 = (ivar_1 == ivar_197);
            if (ivar_194){     
             ivar_193 = (bool_t) true;
} else {
            
             uint32_t ivar_200;
             ivar_200 = (uint32_t)1886678883;
             ivar_193 = (ivar_1 == ivar_200);
};
            if (ivar_193){     
             uint8_t ivar_203;
             ivar_203 = (uint8_t)2;
             uint32_t ivar_204;
             uint8_t ivar_206;
             ivar_206 = (uint8_t)1;
             ivar_204 = (uint32_t)(ivar_2 + ivar_206);
             result = (uint32_t)((uint64_t)ivar_203 * (uint64_t)ivar_204);
} else {
            
             uint8_t ivar_210;
             ivar_210 = (uint8_t)1;
             result = (uint32_t)(ivar_2 + ivar_210);
};
};
};
};
};

        
        return result;
}

extern uint32_t iccMax2c__envTag(void){
        uint32_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    result = (uint32_t)1701738016;

        defined = true;};
        
        return result;
}

extern uint32_t iccMax2c__ifTag(void){
        uint32_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    result = (uint32_t)1768300576;

        defined = true;};
        
        return result;
}

extern uint32_t iccMax2c__elseTag(void){
        uint32_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    result = (uint32_t)1701606245;

        defined = true;};
        
        return result;
}

extern uint32_t iccMax2c__selTag(void){
        uint32_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    result = (uint32_t)1936026656;

        defined = true;};
        
        return result;
}

extern uint32_t iccMax2c__dfltTag(void){
        uint32_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    result = (uint32_t)1684434036;

        defined = true;};
        
        return result;
}

extern uint32_t iccMax2c__caseTag(void){
        uint32_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    result = (uint32_t)1667330917;

        defined = true;};
        
        return result;
}

extern uint16_t iccMax2c__readU16(bytestrings__bytestring_t ivar_1, uint32_t ivar_2){
        uint16_t  result;
        result = (uint16_t)hex__bytes2uint16((bytestrings__bytestring_t)ivar_1, (uint32_t)ivar_2);

        
        return result;
}

extern uint32_t iccMax2c__readU32(bytestrings__bytestring_t ivar_1, uint32_t ivar_2){
        uint32_t  result;
        result = (uint32_t)hex__bytes2uint32((bytestrings__bytestring_t)ivar_1, (uint32_t)ivar_2);

        
        return result;
}

extern uint64_t iccMax2c__readU64(bytestrings__bytestring_t ivar_1, uint32_t ivar_2){
        uint64_t  result;
        result = (uint64_t)hex__bytes2uint64((bytestrings__bytestring_t)ivar_1, (uint32_t)ivar_2);

        
        return result;
}

extern bool_t r_iccMax2c__undefinedp(iccMax2c__signature_adt_t ivar_1){
        bool_t  result;
        uint8_t ivar_3;
        ivar_3 = (uint8_t)0;
        uint8_t ivar_2;
        ivar_2 = (uint8_t)ivar_1->iccMax2c__signature_adt_index;
        release_iccMax2c__signature_adt(ivar_1);
        result = (ivar_2 == ivar_3);

        
        return result;
}

extern bool_t r_iccMax2c__inoutp(iccMax2c__signature_adt_t ivar_1){
        bool_t  result;
        uint8_t ivar_3;
        ivar_3 = (uint8_t)1;
        uint8_t ivar_2;
        ivar_2 = (uint8_t)ivar_1->iccMax2c__signature_adt_index;
        release_iccMax2c__signature_adt(ivar_1);
        result = (ivar_2 == ivar_3);

        
        return result;
}

extern iccMax2c__inout_t update_iccMax2c__signature_adt_input(iccMax2c__signature_adt_t ivar_1, uint64_t ivar_3){
        iccMax2c__inout_t  result;
        iccMax2c__inout_t ivar_2;
        //copying to iccMax2c__inout from iccMax2c__signature_adt;
        ivar_2 = (iccMax2c__inout_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_iccMax2c__signature_adt(ivar_1);
        result = (iccMax2c__inout_t)update_iccMax2c__inout_input(ivar_2, ivar_3);

        
        return result;
}

extern uint64_t iccMax2c__signature_adt_input(iccMax2c__signature_adt_t ivar_1){
        uint64_t  result;
        iccMax2c__inout_t ivar_2;
        //copying to iccMax2c__inout from iccMax2c__signature_adt;
        ivar_2 = (iccMax2c__inout_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_iccMax2c__signature_adt(ivar_1);
        result = (uint64_t)ivar_2->input;
        release_iccMax2c__inout(ivar_2);

        
        return result;
}

extern iccMax2c__inout_t update_iccMax2c__signature_adt_output(iccMax2c__signature_adt_t ivar_1, uint64_t ivar_3){
        iccMax2c__inout_t  result;
        iccMax2c__inout_t ivar_2;
        //copying to iccMax2c__inout from iccMax2c__signature_adt;
        ivar_2 = (iccMax2c__inout_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_iccMax2c__signature_adt(ivar_1);
        result = (iccMax2c__inout_t)update_iccMax2c__inout_output(ivar_2, ivar_3);

        
        return result;
}

extern uint64_t iccMax2c__signature_adt_output(iccMax2c__signature_adt_t ivar_1){
        uint64_t  result;
        iccMax2c__inout_t ivar_2;
        //copying to iccMax2c__inout from iccMax2c__signature_adt;
        ivar_2 = (iccMax2c__inout_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_iccMax2c__signature_adt(ivar_1);
        result = (uint64_t)ivar_2->output;
        release_iccMax2c__inout(ivar_2);

        
        return result;
}

extern iccMax2c__signature_adt_t iccMax2c__undefined(void){
        iccMax2c__signature_adt_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    uint8_t ivar_1;
        ivar_1 = (uint8_t)0;
        iccMax2c__signature_adt_t ivar_2;
        ivar_2 = (iccMax2c__signature_adt_t)new_iccMax2c__signature_adt();;
        ivar_2->iccMax2c__signature_adt_index = (uint8_t)ivar_1;
        //copying to iccMax2c__signature_adt from iccMax2c__signature_adt;
        result = (iccMax2c__signature_adt_t)ivar_2;
        if (result != NULL) result->count++;
        release_iccMax2c__signature_adt(ivar_2);

        defined = true;};
        
        return result;
}

extern iccMax2c__signature_adt_t iccMax2c__inout(uint64_t ivar_2, uint64_t ivar_3){
        iccMax2c__signature_adt_t  result;
        uint8_t ivar_1;
        ivar_1 = (uint8_t)1;
        iccMax2c__inout_t ivar_4;
        ivar_4 = (iccMax2c__inout_t)new_iccMax2c__inout();;
        ivar_4->iccMax2c__signature_adt_index = (uint8_t)ivar_1;
        ivar_4->input = (uint64_t)ivar_2;
        ivar_4->output = (uint64_t)ivar_3;
        //copying to iccMax2c__signature_adt from iccMax2c__inout;
        result = (iccMax2c__signature_adt_t)ivar_4;
        if (result != NULL) result->count++;
        release_iccMax2c__inout(ivar_4);

        
        return result;
}

extern iccMax2c_funtype_24_t iccMax2c__signature_ord(void){
        iccMax2c_funtype_24_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    pvs2cerror("Missing definition", PVS2C_EXIT_ERROR);

        defined = true;};
        
        return result;
}

extern uint8_t iccMax2c__ord__2(iccMax2c__signature_adt_t ivar_1){
        uint8_t  result;
        bool_t ivar_3;
        ivar_1->count++;
        ivar_3 = (bool_t)r_iccMax2c__undefinedp((iccMax2c__signature_adt_t)ivar_1);
        if (ivar_3){ 
             release_iccMax2c__signature_adt(ivar_1);
             result = (uint8_t)0;
} else {
        
             result = (uint8_t)1;
};

        
        return result;
}

extern bool_t iccMax2c__subterm__2(iccMax2c__signature_adt_t ivar_1, iccMax2c__signature_adt_t ivar_2){
        bool_t  result;
        result = (bool_t) equal_iccMax2c__signature_adt(ivar_1, ivar_2);

        
        return result;
}

extern bool_t iccMax2c__doublelessp__2(iccMax2c__signature_adt_t ivar_1, iccMax2c__signature_adt_t ivar_2){
        bool_t  result;
        result = (bool_t) false;

        
        return result;
}

extern iccMax2c_funtype_25_t iccMax2c__reduce_nat__2(mpz_ptr_t ivar_1, iccMax2c_funtype_8_t ivar_2){
        iccMax2c_funtype_25_t  result;
        iccMax2c_closure_26_t cl33121;
        cl33121 = new_iccMax2c_closure_26();
        cl33121->fvar_1 = (iccMax2c_funtype_8_t)ivar_2;
        if (cl33121->fvar_1 != NULL) cl33121->fvar_1->count++;
        mpz_set(cl33121->fvar_2, ivar_1);
        release_iccMax2c_funtype_8(ivar_2);
        result = (iccMax2c_funtype_25_t)cl33121;

        
        return result;
}

extern iccMax2c_funtype_25_t iccMax2c__REDUCE_nat__2(iccMax2c_funtype_25_t ivar_1, iccMax2c_funtype_28_t ivar_3){
        iccMax2c_funtype_25_t  result;
        iccMax2c_closure_29_t cl33123;
        cl33123 = new_iccMax2c_closure_29();
        cl33123->fvar_1 = (iccMax2c_funtype_25_t)ivar_1;
        if (cl33123->fvar_1 != NULL) cl33123->fvar_1->count++;
        cl33123->fvar_2 = (iccMax2c_funtype_28_t)ivar_3;
        if (cl33123->fvar_2 != NULL) cl33123->fvar_2->count++;
        release_iccMax2c_funtype_28(ivar_3);
        release_iccMax2c_funtype_25(ivar_1);
        result = (iccMax2c_funtype_25_t)cl33123;

        
        return result;
}

extern iccMax2c_funtype_30_t iccMax2c__reduce_ordinal__2(ordstruct_adt__ordstruct_adt_t ivar_1, iccMax2c_funtype_17_t ivar_2){
        iccMax2c_funtype_30_t  result;
        iccMax2c_closure_31_t cl33125;
        cl33125 = new_iccMax2c_closure_31();
        cl33125->fvar_1 = (iccMax2c_funtype_17_t)ivar_2;
        if (cl33125->fvar_1 != NULL) cl33125->fvar_1->count++;
        cl33125->fvar_2 = (ordstruct_adt__ordstruct_adt_t)ivar_1;
        if (cl33125->fvar_2 != NULL) cl33125->fvar_2->count++;
        release_iccMax2c_funtype_17(ivar_2);
        release_ordstruct_adt__ordstruct_adt(ivar_1);
        result = (iccMax2c_funtype_30_t)cl33125;

        
        return result;
}

extern iccMax2c_funtype_30_t iccMax2c__REDUCE_ordinal__2(iccMax2c_funtype_30_t ivar_1, iccMax2c_funtype_32_t ivar_3){
        iccMax2c_funtype_30_t  result;
        iccMax2c_closure_33_t cl33127;
        cl33127 = new_iccMax2c_closure_33();
        cl33127->fvar_1 = (iccMax2c_funtype_30_t)ivar_1;
        if (cl33127->fvar_1 != NULL) cl33127->fvar_1->count++;
        cl33127->fvar_2 = (iccMax2c_funtype_32_t)ivar_3;
        if (cl33127->fvar_2 != NULL) cl33127->fvar_2->count++;
        release_iccMax2c_funtype_32(ivar_3);
        release_iccMax2c_funtype_30(ivar_1);
        result = (iccMax2c_funtype_30_t)cl33127;

        
        return result;
}

extern iccMax2c_array_34_t iccMax2c__mapParseArray(uint64_t ivar_1, uint32_t ivar_2, uint32_t ivar_3, iccMax2c_array_36_t ivar_4, iccMax2c_funtype_37_t ivar_7){
        iccMax2c_array_34_t  result;
        uint32_t size33151;
        //copying to uint32 from uint32;
        size33151 = (uint32_t)ivar_3;
        size33151 += 0;
        result = new_iccMax2c_array_34(size33151);
        uint32_t ivar_11;
        for (uint32_t index33150 = 0; index33150 < size33151; index33150++){
             ivar_11 = (uint32_t)index33150;
             iccMax2c_record_35_t ivar_28;
             iccMax2c_record_35_t ivar_16;
             ivar_16 = (iccMax2c_record_35_t)ivar_4->elems[ivar_11];
             ivar_16->count++;
             //copying to iccMax2c_record_35 from iccMax2c_record_35;
             ivar_28 = (iccMax2c_record_35_t)ivar_16;
             if (ivar_28 != NULL) ivar_28->count++;
             release_iccMax2c_record_35(ivar_16);
             iccMax2c__result_adt_t ivar_23;
             ivar_23 = (iccMax2c__result_adt_t)ivar_7->ftbl->fptr(ivar_7, ivar_28);
             //copying to iccMax2c__result_adt from iccMax2c__result_adt;
             result->elems[index33150] = (iccMax2c__result_adt_t)ivar_23;
             if (result->elems[index33150] != NULL) result->elems[index33150]->count++;
             release_iccMax2c__result_adt(ivar_23);
        };
        release_iccMax2c_array_36(ivar_4);
        release_iccMax2c_funtype_37(ivar_7);

        
        return result;
}

extern iccMax2c__result_adt_t iccMax2c__parseOperation(uint64_t ivar_1, bytestrings__bytestring_t ivar_2, iccMax2c__signatureMap_t ivar_3, uint64_t ivar_4, uint64_t ivar_5, iccMax2c_record_35_t ivar_6){
        iccMax2c__result_adt_t  result;
        /* endpos */ uint32_t ivar_11;
        iccMax2c_record_40_t ivar_27;
        uint32_t len33283 = 9;
        uint32_t characters33284[9] = {101, 110, 100, 112, 111, 115, 32, 61, 32};
        stringliteral_t string33282 = mk_string(9, characters33284);
        ivar_27 = (iccMax2c_record_40_t)strings__make_string(len33283, string33282);
        strings__string_t ivar_24;
        //copying to strings__string from iccMax2c_record_40;
        ivar_24 = (strings__string_t)ivar_27;
        if (ivar_24 != NULL) ivar_24->count++;
        release_iccMax2c_record_40(ivar_27);
        uint32_t ivar_25;
        ivar_25 = (uint32_t)ivar_6->endpos;
        ivar_11 = (uint32_t)iccMax2c__print32((strings__string_t)ivar_24, (uint32_t)ivar_25);
        /* startpos */ uint32_t ivar_28;
        iccMax2c_record_40_t ivar_49;
        uint32_t len33286 = 11;
        uint32_t characters33287[11] = {115, 116, 97, 114, 116, 112, 111, 115, 32, 61, 32};
        stringliteral_t string33285 = mk_string(11, characters33287);
        ivar_49 = (iccMax2c_record_40_t)strings__make_string(len33286, string33285);
        strings__string_t ivar_46;
        //copying to strings__string from iccMax2c_record_40;
        ivar_46 = (strings__string_t)ivar_49;
        if (ivar_46 != NULL) ivar_46->count++;
        release_iccMax2c_record_40(ivar_49);
        uint32_t ivar_47;
        ivar_47 = (uint32_t)ivar_6->startpos;
        ivar_28 = (uint32_t)iccMax2c__print32((strings__string_t)ivar_46, (uint32_t)ivar_47);
        bool_t ivar_50;
        ivar_50 = (ivar_28 >= ivar_11);
        if (ivar_50){ 
             release_iccMax2c__signatureMap(ivar_3);
             release_bytestrings__bytestring(ivar_2);
             release_iccMax2c_record_35(ivar_6);
             iccMax2c__result_adt_t ivar_56;
             ivar_56 = (iccMax2c__result_adt_t)iccMax2c__value((uint64_t)ivar_4, (uint64_t)ivar_5);
             //copying to iccMax2c__result_adt from iccMax2c__result_adt;
             result = (iccMax2c__result_adt_t)ivar_56;
             if (result != NULL) result->count++;
             release_iccMax2c__result_adt(ivar_56);
} else {
        
             bool_t ivar_59;
             uint64_t ivar_60;
             uint8_t ivar_63;
             ivar_63 = (uint8_t)8;
             ivar_60 = (uint64_t)(ivar_28 + ivar_63);
             ivar_59 = (ivar_60 > ivar_11);
             if (ivar_59){  
           release_iccMax2c__signatureMap(ivar_3);
           release_bytestrings__bytestring(ivar_2);
           release_iccMax2c_record_35(ivar_6);
           uint8_t ivar_70;
           ivar_70 = (uint8_t)iccMax2c__UnexpectedEOF();
           uint8_t ivar_72;
           ivar_72 = (uint8_t)0;
           iccMax2c__result_adt_t ivar_69;
           ivar_69 = (iccMax2c__result_adt_t)iccMax2c__error((uint8_t)ivar_70, (uint32_t)ivar_28, (uint8_t)ivar_72);
           //copying to iccMax2c__result_adt from iccMax2c__result_adt;
           result = (iccMax2c__result_adt_t)ivar_69;
           if (result != NULL) result->count++;
           release_iccMax2c__result_adt(ivar_69);
} else {
             
           /* tag */ uint32_t ivar_74;
           iccMax2c_record_40_t ivar_89;
           uint32_t len33289 = 6;
           uint32_t characters33290[6] = {116, 97, 103, 32, 61, 32};
           stringliteral_t string33288 = mk_string(6, characters33290);
           ivar_89 = (iccMax2c_record_40_t)strings__make_string(len33289, string33288);
           strings__string_t ivar_86;
           //copying to strings__string from iccMax2c_record_40;
           ivar_86 = (strings__string_t)ivar_89;
           if (ivar_86 != NULL) ivar_86->count++;
           release_iccMax2c_record_40(ivar_89);
           uint32_t ivar_87;
           ivar_2->count++;
           ivar_87 = (uint32_t)iccMax2c__readU32((bytestrings__bytestring_t)ivar_2, (uint32_t)ivar_28);
           ivar_74 = (uint32_t)iccMax2c__print32((strings__string_t)ivar_86, (uint32_t)ivar_87);
           /* newWindow */ iccMax2c_record_35_t ivar_92;
           uint32_t ivar_105;
           uint32_t ivar_106;
           ivar_106 = (uint32_t)ivar_6->startpos;
           uint8_t ivar_107;
           ivar_107 = (uint8_t)8;
           ivar_105 = (uint32_t)(ivar_106 + ivar_107);
           iccMax2c_record_35_t ivar_124;
           {ivar_124 = (iccMax2c_record_35_t)copy_iccMax2c_record_35(ivar_6); ivar_124 = (iccMax2c_record_35_t)update_iccMax2c_record_35_startpos(ivar_6, ivar_105);};
           //copying to iccMax2c_record_35 from iccMax2c_record_35;
           ivar_92 = (iccMax2c_record_35_t)ivar_124;
           if (ivar_92 != NULL) ivar_92->count++;
           release_iccMax2c_record_35(ivar_124);
           bool_t ivar_125;
           uint32_t ivar_127;
           ivar_127 = (uint32_t)iccMax2c__dataTag();
           ivar_125 = (ivar_74 == ivar_127);
           if (ivar_125){   
           release_iccMax2c_record_35(ivar_6);
           bool_t ivar_129;
           ivar_129 = (ivar_4 >= ivar_1);
           if (ivar_129){    
            release_bytestrings__bytestring(ivar_2);
            release_iccMax2c__signatureMap(ivar_3);
            release_iccMax2c_record_35(ivar_92);
            uint8_t ivar_137;
            ivar_137 = (uint8_t)iccMax2c__Overflow();
            uint8_t ivar_139;
            ivar_139 = (uint8_t)11;
            iccMax2c__result_adt_t ivar_136;
            ivar_136 = (iccMax2c__result_adt_t)iccMax2c__error((uint8_t)ivar_137, (uint32_t)ivar_28, (uint8_t)ivar_139);
            //copying to iccMax2c__result_adt from iccMax2c__result_adt;
            result = (iccMax2c__result_adt_t)ivar_136;
            if (result != NULL) result->count++;
            release_iccMax2c__result_adt(ivar_136);
} else {
           
            mpz_ptr_t ivar_166;
            uint8_t ivar_147;
            ivar_147 = (uint8_t)1;
            mpz_mk_set_ui(ivar_166, (uint64_t)ivar_4);
            mpz_add_ui(ivar_166, ivar_166, (uint64_t)ivar_147);
            uint64_t ivar_156;
            //copying to uint64 from mpz;
            ivar_156 = (uint64_t)mpz_get_ui(ivar_166);
            mpz_clear(ivar_166);
            mpz_ptr_t ivar_165;
            uint8_t ivar_150;
            ivar_150 = (uint8_t)1;
            mpz_mk_set_ui(ivar_165, (uint64_t)ivar_5);
            mpz_add_ui(ivar_165, ivar_165, (uint64_t)ivar_150);
            uint64_t ivar_157;
            //copying to uint64 from mpz;
            ivar_157 = (uint64_t)mpz_get_ui(ivar_165);
            mpz_clear(ivar_165);
            iccMax2c__result_adt_t ivar_152;
            ivar_152 = (iccMax2c__result_adt_t)iccMax2c__parseOperation((uint64_t)ivar_1, (bytestrings__bytestring_t)ivar_2, (iccMax2c__signatureMap_t)ivar_3, (uint64_t)ivar_156, (uint64_t)ivar_157, (iccMax2c_record_35_t)ivar_92);
            //copying to iccMax2c__result_adt from iccMax2c__result_adt;
            result = (iccMax2c__result_adt_t)ivar_152;
            if (result != NULL) result->count++;
            release_iccMax2c__result_adt(ivar_152);
};
} else {
           
           bool_t ivar_167;
           ivar_167 = (bool_t)iccMax2c__channelVecOpp((uint32_t)ivar_74);
           if (ivar_167){    
            release_iccMax2c_record_35(ivar_6);
            /* res */ iccMax2c__result_adt_t ivar_171;
            uint16_t ivar_201;
            uint32_t ivar_186;
            uint8_t ivar_182;
            ivar_182 = (uint8_t)4;
            ivar_186 = (uint32_t)(ivar_28 + ivar_182);
            ivar_2->count++;
            ivar_201 = (uint16_t)iccMax2c__readU16((bytestrings__bytestring_t)ivar_2, (uint32_t)ivar_186);
            uint16_t ivar_202;
            uint32_t ivar_194;
            uint8_t ivar_190;
            ivar_190 = (uint8_t)6;
            ivar_194 = (uint32_t)(ivar_28 + ivar_190);
            ivar_2->count++;
            ivar_202 = (uint16_t)iccMax2c__readU16((bytestrings__bytestring_t)ivar_2, (uint32_t)ivar_194);
            iccMax2c__result_adt_t ivar_195;
            ivar_195 = (iccMax2c__result_adt_t)iccMax2c__ChannelVecOp((uint32_t)ivar_74, (uint64_t)ivar_1, (uint32_t)ivar_28, (uint64_t)ivar_4, (uint64_t)ivar_5, (uint16_t)ivar_201, (uint16_t)ivar_202);
            //copying to iccMax2c__result_adt from iccMax2c__result_adt;
            ivar_171 = (iccMax2c__result_adt_t)ivar_195;
            if (ivar_171 != NULL) ivar_171->count++;
            release_iccMax2c__result_adt(ivar_195);
            bool_t ivar_216;
            ivar_171->count++;
            ivar_216 = (bool_t)r_iccMax2c__errorp((iccMax2c__result_adt_t)ivar_171);
            if (ivar_216){     
             release_iccMax2c_record_35(ivar_92);
             release_iccMax2c__signatureMap(ivar_3);
             release_bytestrings__bytestring(ivar_2);
             //copying to iccMax2c__result_adt from iccMax2c__result_adt;
             result = (iccMax2c__result_adt_t)ivar_171;
             if (result != NULL) result->count++;
             release_iccMax2c__result_adt(ivar_171);
} else {
            
             uint64_t ivar_220;
             ivar_171->count++;
             ivar_220 = (uint64_t)iccMax2c__result_adt_vmax((iccMax2c__result_adt_t)ivar_171);
             uint64_t ivar_221;
             ivar_221 = (uint64_t)iccMax2c__result_adt_vmin((iccMax2c__result_adt_t)ivar_171);
             iccMax2c__result_adt_t ivar_234;
             ivar_234 = (iccMax2c__result_adt_t)iccMax2c__parseOperation((uint64_t)ivar_1, (bytestrings__bytestring_t)ivar_2, (iccMax2c__signatureMap_t)ivar_3, (uint64_t)ivar_220, (uint64_t)ivar_221, (iccMax2c_record_35_t)ivar_92);
             //copying to iccMax2c__result_adt from iccMax2c__result_adt;
             result = (iccMax2c__result_adt_t)ivar_234;
             if (result != NULL) result->count++;
             release_iccMax2c__result_adt(ivar_234);
};
} else {
           
            bool_t ivar_245;
            uint32_t ivar_247;
            ivar_247 = (uint32_t)iccMax2c__envTag();
            ivar_245 = (ivar_74 == ivar_247);
            if (ivar_245){     
             release_iccMax2c_record_35(ivar_6);
             bool_t ivar_249;
             mpz_ptr_t ivar_250;
             uint8_t ivar_253;
             ivar_253 = (uint8_t)2;
             mpz_mk_set_ui(ivar_250, (uint64_t)ivar_4);
             mpz_add_ui(ivar_250, ivar_250, (uint64_t)ivar_253);
             int64_t tmp33291 = mpz_cmp_ui(ivar_250, ivar_1);
             ivar_249 = (tmp33291 > 0);
             if (ivar_249){      
              release_bytestrings__bytestring(ivar_2);
              release_iccMax2c__signatureMap(ivar_3);
              release_iccMax2c_record_35(ivar_92);
              uint8_t ivar_260;
              ivar_260 = (uint8_t)iccMax2c__Overflow();
              uint8_t ivar_262;
              ivar_262 = (uint8_t)31;
              iccMax2c__result_adt_t ivar_259;
              ivar_259 = (iccMax2c__result_adt_t)iccMax2c__error((uint8_t)ivar_260, (uint32_t)ivar_28, (uint8_t)ivar_262);
              //copying to iccMax2c__result_adt from iccMax2c__result_adt;
              result = (iccMax2c__result_adt_t)ivar_259;
              if (result != NULL) result->count++;
              release_iccMax2c__result_adt(ivar_259);
} else {
             
              mpz_ptr_t ivar_289;
              uint8_t ivar_270;
              ivar_270 = (uint8_t)2;
              mpz_mk_set_ui(ivar_289, (uint64_t)ivar_4);
              mpz_add_ui(ivar_289, ivar_289, (uint64_t)ivar_270);
              uint64_t ivar_279;
              //copying to uint64 from mpz;
              ivar_279 = (uint64_t)mpz_get_ui(ivar_289);
              mpz_clear(ivar_289);
              mpz_ptr_t ivar_288;
              uint8_t ivar_273;
              ivar_273 = (uint8_t)2;
              mpz_mk_set_ui(ivar_288, (uint64_t)ivar_5);
              mpz_add_ui(ivar_288, ivar_288, (uint64_t)ivar_273);
              uint64_t ivar_280;
              //copying to uint64 from mpz;
              ivar_280 = (uint64_t)mpz_get_ui(ivar_288);
              mpz_clear(ivar_288);
              iccMax2c__result_adt_t ivar_275;
              ivar_275 = (iccMax2c__result_adt_t)iccMax2c__parseOperation((uint64_t)ivar_1, (bytestrings__bytestring_t)ivar_2, (iccMax2c__signatureMap_t)ivar_3, (uint64_t)ivar_279, (uint64_t)ivar_280, (iccMax2c_record_35_t)ivar_92);
              //copying to iccMax2c__result_adt from iccMax2c__result_adt;
              result = (iccMax2c__result_adt_t)ivar_275;
              if (result != NULL) result->count++;
              release_iccMax2c__result_adt(ivar_275);
};
} else {
            
             bool_t ivar_290;
             ivar_290 = (bool_t)iccMax2c__subElemTagp((uint32_t)ivar_74);
             if (ivar_290){      
              release_iccMax2c_record_35(ivar_6);
              /* S */ uint32_t ivar_294;
              uint32_t ivar_302;
              uint8_t ivar_298;
              ivar_298 = (uint8_t)4;
              ivar_302 = (uint32_t)(ivar_28 + ivar_298);
              ivar_2->count++;
              ivar_294 = (uint32_t)iccMax2c__readU32((bytestrings__bytestring_t)ivar_2, (uint32_t)ivar_302);
              /* sig */ iccMax2c__signature_adt_t ivar_303;
              iccMax2c__signature_adt_t ivar_305;
              ivar_305 = (iccMax2c__signature_adt_t)ivar_3->ftbl->fptr(ivar_3, ivar_294);
              //copying to iccMax2c__signature_adt from iccMax2c__signature_adt;
              ivar_303 = (iccMax2c__signature_adt_t)ivar_305;
              if (ivar_303 != NULL) ivar_303->count++;
              release_iccMax2c__signature_adt(ivar_305);
              bool_t ivar_308;
              ivar_303->count++;
              ivar_308 = (bool_t)r_iccMax2c__undefinedp((iccMax2c__signature_adt_t)ivar_303);
              if (ivar_308){       
               release_iccMax2c_record_35(ivar_92);
               release_iccMax2c__signatureMap(ivar_3);
               release_bytestrings__bytestring(ivar_2);
               release_iccMax2c__signature_adt(ivar_303);
               uint8_t ivar_316;
               ivar_316 = (uint8_t)iccMax2c__Undefined();
               uint8_t ivar_318;
               ivar_318 = (uint8_t)41;
               iccMax2c__result_adt_t ivar_315;
               ivar_315 = (iccMax2c__result_adt_t)iccMax2c__error((uint8_t)ivar_316, (uint32_t)ivar_28, (uint8_t)ivar_318);
               //copying to iccMax2c__result_adt from iccMax2c__result_adt;
               result = (iccMax2c__result_adt_t)ivar_315;
               if (result != NULL) result->count++;
               release_iccMax2c__result_adt(ivar_315);
} else {
              
               /* input */ uint64_t ivar_319;
               ivar_303->count++;
               ivar_319 = (uint64_t)iccMax2c__signature_adt_input((iccMax2c__signature_adt_t)ivar_303);
               /* output */ uint64_t ivar_323;
               ivar_323 = (uint64_t)iccMax2c__signature_adt_output((iccMax2c__signature_adt_t)ivar_303);
               bool_t ivar_327;
               ivar_327 = (ivar_319 > ivar_5);
               if (ivar_327){        
                release_iccMax2c_record_35(ivar_92);
                release_iccMax2c__signatureMap(ivar_3);
                release_bytestrings__bytestring(ivar_2);
                uint8_t ivar_335;
                ivar_335 = (uint8_t)iccMax2c__Underflow();
                uint8_t ivar_337;
                ivar_337 = (uint8_t)42;
                iccMax2c__result_adt_t ivar_334;
                ivar_334 = (iccMax2c__result_adt_t)iccMax2c__error((uint8_t)ivar_335, (uint32_t)ivar_28, (uint8_t)ivar_337);
                //copying to iccMax2c__result_adt from iccMax2c__result_adt;
                result = (iccMax2c__result_adt_t)ivar_334;
                if (result != NULL) result->count++;
                release_iccMax2c__result_adt(ivar_334);
} else {
               
                bool_t ivar_338;
                mpz_ptr_t ivar_339;
                mpz_mk_set_ui(ivar_339, (uint64_t)ivar_1);
                mpz_sub_ui(ivar_339, ivar_339, (uint64_t)ivar_4);
                int64_t tmp33292 = mpz_cmp_ui(ivar_339, ivar_319);
                ivar_338 = (tmp33292 < 0);
                if (ivar_338){         
                 release_iccMax2c_record_35(ivar_92);
                 release_iccMax2c__signatureMap(ivar_3);
                 release_bytestrings__bytestring(ivar_2);
                 uint8_t ivar_349;
                 ivar_349 = (uint8_t)iccMax2c__Overflow();
                 uint8_t ivar_351;
                 ivar_351 = (uint8_t)43;
                 iccMax2c__result_adt_t ivar_348;
                 ivar_348 = (iccMax2c__result_adt_t)iccMax2c__error((uint8_t)ivar_349, (uint32_t)ivar_28, (uint8_t)ivar_351);
                 //copying to iccMax2c__result_adt from iccMax2c__result_adt;
                 result = (iccMax2c__result_adt_t)ivar_348;
                 if (result != NULL) result->count++;
                 release_iccMax2c__result_adt(ivar_348);
} else {
                
                 mpq_ptr_t ivar_399;
                 mpz_t tmp33293;
                 mpz_init(tmp33293);
                 mpz_set_ui(tmp33293, (uint64_t)ivar_4);
                 mpz_sub_ui(tmp33293, tmp33293, (uint64_t)ivar_319);
                 mpq_mk_set_z(ivar_399, tmp33293);
                 mpz_clear(tmp33293);
                 /* maxInputleft */ uint64_t ivar_352;
                 //copying to uint64 from mpq;
                 ivar_352 = (uint64_t)mpq_get_ui(ivar_399);
                 mpq_clear(ivar_399);
                 bool_t ivar_356;
                 mpz_ptr_t ivar_358;
                 mpz_mk_set_ui(ivar_358, (uint64_t)ivar_1);
                 mpz_sub_ui(ivar_358, ivar_358, (uint64_t)ivar_352);
                 int64_t tmp33294 = mpz_cmp_ui(ivar_358, ivar_323);
                 ivar_356 = (tmp33294 > 0);
                 if (ivar_356){          
                  release_bytestrings__bytestring(ivar_2);
                  release_iccMax2c__signatureMap(ivar_3);
                  release_iccMax2c_record_35(ivar_92);
                  uint8_t ivar_367;
                  ivar_367 = (uint8_t)iccMax2c__Overflow();
                  uint8_t ivar_369;
                  ivar_369 = (uint8_t)44;
                  iccMax2c__result_adt_t ivar_366;
                  ivar_366 = (iccMax2c__result_adt_t)iccMax2c__error((uint8_t)ivar_367, (uint32_t)ivar_28, (uint8_t)ivar_369);
                  //copying to iccMax2c__result_adt from iccMax2c__result_adt;
                  result = (iccMax2c__result_adt_t)ivar_366;
                  if (result != NULL) result->count++;
                  release_iccMax2c__result_adt(ivar_366);
} else {
                 
                  /* newInMax */ uint64_t ivar_370;
                  ivar_370 = (uint64_t)(ivar_352 + ivar_323);
                  /* minInputleft */ uint64_t ivar_374;
                  ivar_374 = (uint64_t)(ivar_5 - ivar_319);
                  /* newInMin */ uint64_t ivar_378;
                  ivar_378 = (uint64_t)(ivar_374 + ivar_323);
                  iccMax2c__result_adt_t ivar_388;
                  ivar_388 = (iccMax2c__result_adt_t)iccMax2c__parseOperation((uint64_t)ivar_1, (bytestrings__bytestring_t)ivar_2, (iccMax2c__signatureMap_t)ivar_3, (uint64_t)ivar_370, (uint64_t)ivar_378, (iccMax2c_record_35_t)ivar_92);
                  //copying to iccMax2c__result_adt from iccMax2c__result_adt;
                  result = (iccMax2c__result_adt_t)ivar_388;
                  if (result != NULL) result->count++;
                  release_iccMax2c__result_adt(ivar_388);
};
};
};
};
} else {
             
              bool_t ivar_400;
              ivar_400 = (bool_t)iccMax2c__stackOpTagp((uint32_t)ivar_74);
              if (ivar_400){       
               release_iccMax2c_record_35(ivar_6);
               /* S */ uint16_t ivar_404;
               uint32_t ivar_412;
               uint8_t ivar_408;
               ivar_408 = (uint8_t)4;
               ivar_412 = (uint32_t)(ivar_28 + ivar_408);
               ivar_2->count++;
               ivar_404 = (uint16_t)iccMax2c__readU16((bytestrings__bytestring_t)ivar_2, (uint32_t)ivar_412);
               /* T */ uint16_t ivar_413;
               uint32_t ivar_421;
               uint8_t ivar_417;
               ivar_417 = (uint8_t)6;
               ivar_421 = (uint32_t)(ivar_28 + ivar_417);
               ivar_2->count++;
               ivar_413 = (uint16_t)iccMax2c__readU16((bytestrings__bytestring_t)ivar_2, (uint32_t)ivar_421);
               /* stackout */ uint64_t ivar_422;
               ivar_422 = (uint64_t)iccMax2c__stackOut((uint32_t)ivar_74, (uint16_t)ivar_404, (uint16_t)ivar_413);
               bool_t ivar_430;
               uint32_t ivar_431;
               uint8_t ivar_434;
               ivar_434 = (uint8_t)1;
               ivar_431 = (uint32_t)(ivar_404 + ivar_434);
               ivar_430 = (ivar_431 > ivar_5);
               if (ivar_430){        
                release_iccMax2c_record_35(ivar_92);
                release_iccMax2c__signatureMap(ivar_3);
                release_bytestrings__bytestring(ivar_2);
                uint8_t ivar_441;
                ivar_441 = (uint8_t)iccMax2c__Underflow();
                uint8_t ivar_443;
                ivar_443 = (uint8_t)51;
                iccMax2c__result_adt_t ivar_440;
                ivar_440 = (iccMax2c__result_adt_t)iccMax2c__error((uint8_t)ivar_441, (uint32_t)ivar_28, (uint8_t)ivar_443);
                //copying to iccMax2c__result_adt from iccMax2c__result_adt;
                result = (iccMax2c__result_adt_t)ivar_440;
                if (result != NULL) result->count++;
                release_iccMax2c__result_adt(ivar_440);
} else {
               
                bool_t ivar_444;
                mpz_ptr_t ivar_445;
                mpz_ptr_t ivar_447;
                mpz_ptr_t ivar_449;
                mpz_mk_set_ui(ivar_449, (uint64_t)ivar_4);
                mpz_sub_ui(ivar_449, ivar_449, (uint64_t)ivar_404);
                uint8_t ivar_450;
                ivar_450 = (uint8_t)1;
                mpz_mk_sub_ui(ivar_447, ivar_449, (uint64_t)ivar_450);
                mpz_mk_set_ui(ivar_445, (uint64_t)ivar_422);
                mpz_add(ivar_445, ivar_445, ivar_447);
                int64_t tmp33295 = mpz_cmp_ui(ivar_445, ivar_1);
                ivar_444 = (tmp33295 > 0);
                if (ivar_444){         
                 release_iccMax2c_record_35(ivar_92);
                 release_iccMax2c__signatureMap(ivar_3);
                 release_bytestrings__bytestring(ivar_2);
                 uint8_t ivar_461;
                 ivar_461 = (uint8_t)iccMax2c__Overflow();
                 uint8_t ivar_463;
                 ivar_463 = (uint8_t)52;
                 iccMax2c__result_adt_t ivar_460;
                 ivar_460 = (iccMax2c__result_adt_t)iccMax2c__error((uint8_t)ivar_461, (uint32_t)ivar_28, (uint8_t)ivar_463);
                 //copying to iccMax2c__result_adt from iccMax2c__result_adt;
                 result = (iccMax2c__result_adt_t)ivar_460;
                 if (result != NULL) result->count++;
                 release_iccMax2c__result_adt(ivar_460);
} else {
                
                 bool_t ivar_464;
                 bool_t ivar_465;
                 bool_t ivar_467;
                 uint32_t ivar_470;
                 ivar_470 = (uint32_t)1718380912;
                 ivar_467 = (ivar_74 == ivar_470);
                 if (ivar_467){          
                  ivar_465 = (bool_t) true;
} else {
                 
                  uint32_t ivar_473;
                  ivar_473 = (uint32_t)1886351392;
                  ivar_465 = (ivar_74 == ivar_473);
};
                 if (ivar_465){          
                  uint8_t ivar_477;
                  ivar_477 = (uint8_t)0;
                  ivar_464 = (ivar_413 != ivar_477);
} else {
                 
                  ivar_464 = (bool_t) false;
};
                 if (ivar_464){          
                  release_bytestrings__bytestring(ivar_2);
                  release_iccMax2c__signatureMap(ivar_3);
                  release_iccMax2c_record_35(ivar_92);
                  uint8_t ivar_484;
                  ivar_484 = (uint8_t)iccMax2c__nonZero();
                  uint8_t ivar_486;
                  ivar_486 = (uint8_t)53;
                  iccMax2c__result_adt_t ivar_483;
                  ivar_483 = (iccMax2c__result_adt_t)iccMax2c__error((uint8_t)ivar_484, (uint32_t)ivar_28, (uint8_t)ivar_486);
                  //copying to iccMax2c__result_adt from iccMax2c__result_adt;
                  result = (iccMax2c__result_adt_t)ivar_483;
                  if (result != NULL) result->count++;
                  release_iccMax2c__result_adt(ivar_483);
} else {
                 
                  mpz_ptr_t ivar_525;
                  mpz_ptr_t ivar_493;
                  mpz_ptr_t ivar_495;
                  mpz_mk_set_ui(ivar_495, (uint64_t)ivar_4);
                  mpz_sub_ui(ivar_495, ivar_495, (uint64_t)ivar_404);
                  uint8_t ivar_496;
                  ivar_496 = (uint8_t)1;
                  mpz_mk_sub_ui(ivar_493, ivar_495, (uint64_t)ivar_496);
                  mpz_mk_set_ui(ivar_525, (uint64_t)ivar_422);
                  mpz_add(ivar_525, ivar_525, ivar_493);
                  uint64_t ivar_515;
                  //copying to uint64 from mpz;
                  ivar_515 = (uint64_t)mpz_get_ui(ivar_525);
                  mpz_clear(ivar_525);
                  mpz_ptr_t ivar_524;
                  mpz_ptr_t ivar_502;
                  mpz_ptr_t ivar_504;
                  mpz_mk_set_ui(ivar_504, (uint64_t)ivar_5);
                  mpz_sub_ui(ivar_504, ivar_504, (uint64_t)ivar_404);
                  uint8_t ivar_505;
                  ivar_505 = (uint8_t)1;
                  mpz_mk_sub_ui(ivar_502, ivar_504, (uint64_t)ivar_505);
                  mpz_mk_set_ui(ivar_524, (uint64_t)ivar_422);
                  mpz_add(ivar_524, ivar_524, ivar_502);
                  uint64_t ivar_516;
                  //copying to uint64 from mpz;
                  ivar_516 = (uint64_t)mpz_get_ui(ivar_524);
                  mpz_clear(ivar_524);
                  iccMax2c__result_adt_t ivar_511;
                  ivar_511 = (iccMax2c__result_adt_t)iccMax2c__parseOperation((uint64_t)ivar_1, (bytestrings__bytestring_t)ivar_2, (iccMax2c__signatureMap_t)ivar_3, (uint64_t)ivar_515, (uint64_t)ivar_516, (iccMax2c_record_35_t)ivar_92);
                  //copying to iccMax2c__result_adt from iccMax2c__result_adt;
                  result = (iccMax2c__result_adt_t)ivar_511;
                  if (result != NULL) result->count++;
                  release_iccMax2c__result_adt(ivar_511);
};
};
};
} else {
              
               bool_t ivar_526;
               ivar_526 = (bool_t)iccMax2c__matrixOpTagp((uint32_t)ivar_74);
               if (ivar_526){        
                release_iccMax2c_record_35(ivar_6);
                /* S */ uint16_t ivar_530;
                uint32_t ivar_538;
                uint8_t ivar_534;
                ivar_534 = (uint8_t)4;
                ivar_538 = (uint32_t)(ivar_28 + ivar_534);
                ivar_2->count++;
                ivar_530 = (uint16_t)iccMax2c__readU16((bytestrings__bytestring_t)ivar_2, (uint32_t)ivar_538);
                /* T */ uint16_t ivar_539;
                uint32_t ivar_547;
                uint8_t ivar_543;
                ivar_543 = (uint8_t)6;
                ivar_547 = (uint32_t)(ivar_28 + ivar_543);
                ivar_2->count++;
                ivar_539 = (uint16_t)iccMax2c__readU16((bytestrings__bytestring_t)ivar_2, (uint32_t)ivar_547);
                /* stackin */ uint64_t ivar_548;
                ivar_548 = (uint64_t)iccMax2c__matrixIn((uint32_t)ivar_74, (uint16_t)ivar_530, (uint16_t)ivar_539);
                /* stackout */ uint64_t ivar_556;
                ivar_556 = (uint64_t)iccMax2c__matrixOut((uint32_t)ivar_74, (uint16_t)ivar_530, (uint16_t)ivar_539);
                bool_t ivar_564;
                ivar_564 = (ivar_548 > ivar_5);
                if (ivar_564){         
                 release_bytestrings__bytestring(ivar_2);
                 release_iccMax2c__signatureMap(ivar_3);
                 release_iccMax2c_record_35(ivar_92);
                 uint8_t ivar_572;
                 ivar_572 = (uint8_t)iccMax2c__Underflow();
                 uint8_t ivar_574;
                 ivar_574 = (uint8_t)61;
                 iccMax2c__result_adt_t ivar_571;
                 ivar_571 = (iccMax2c__result_adt_t)iccMax2c__error((uint8_t)ivar_572, (uint32_t)ivar_28, (uint8_t)ivar_574);
                 //copying to iccMax2c__result_adt from iccMax2c__result_adt;
                 result = (iccMax2c__result_adt_t)ivar_571;
                 if (result != NULL) result->count++;
                 release_iccMax2c__result_adt(ivar_571);
} else {
                
                 mpz_ptr_t ivar_607;
                 mpz_ptr_t ivar_581;
                 mpz_mk_set_ui(ivar_581, (uint64_t)ivar_4);
                 mpz_sub_ui(ivar_581, ivar_581, (uint64_t)ivar_548);
                 mpz_mk_set_ui(ivar_607, (uint64_t)ivar_556);
                 mpz_add(ivar_607, ivar_607, ivar_581);
                 uint64_t ivar_597;
                 //copying to uint64 from mpz;
                 ivar_597 = (uint64_t)mpz_get_ui(ivar_607);
                 mpz_clear(ivar_607);
                 mpz_ptr_t ivar_606;
                 mpz_ptr_t ivar_587;
                 mpz_mk_set_ui(ivar_587, (uint64_t)ivar_5);
                 mpz_sub_ui(ivar_587, ivar_587, (uint64_t)ivar_548);
                 mpz_mk_set_ui(ivar_606, (uint64_t)ivar_556);
                 mpz_add(ivar_606, ivar_606, ivar_587);
                 uint64_t ivar_598;
                 //copying to uint64 from mpz;
                 ivar_598 = (uint64_t)mpz_get_ui(ivar_606);
                 mpz_clear(ivar_606);
                 iccMax2c__result_adt_t ivar_593;
                 ivar_593 = (iccMax2c__result_adt_t)iccMax2c__parseOperation((uint64_t)ivar_1, (bytestrings__bytestring_t)ivar_2, (iccMax2c__signatureMap_t)ivar_3, (uint64_t)ivar_597, (uint64_t)ivar_598, (iccMax2c_record_35_t)ivar_92);
                 //copying to iccMax2c__result_adt from iccMax2c__result_adt;
                 result = (iccMax2c__result_adt_t)ivar_593;
                 if (result != NULL) result->count++;
                 release_iccMax2c__result_adt(ivar_593);
};
} else {
               
                bool_t ivar_608;
                ivar_608 = (bool_t)iccMax2c__seqFuncOpp((uint32_t)ivar_74);
                if (ivar_608){         
                 release_iccMax2c_record_35(ivar_6);
                 /* S */ uint16_t ivar_612;
                 uint32_t ivar_620;
                 uint8_t ivar_616;
                 ivar_616 = (uint8_t)4;
                 ivar_620 = (uint32_t)(ivar_28 + ivar_616);
                 ivar_2->count++;
                 ivar_612 = (uint16_t)iccMax2c__readU16((bytestrings__bytestring_t)ivar_2, (uint32_t)ivar_620);
                 /* T */ uint16_t ivar_621;
                 uint32_t ivar_629;
                 uint8_t ivar_625;
                 ivar_625 = (uint8_t)6;
                 ivar_629 = (uint32_t)(ivar_28 + ivar_625);
                 ivar_2->count++;
                 ivar_621 = (uint16_t)iccMax2c__readU16((bytestrings__bytestring_t)ivar_2, (uint32_t)ivar_629);
                 bool_t ivar_630;
                 uint8_t ivar_632;
                 ivar_632 = (uint8_t)0;
                 ivar_630 = (ivar_621 != ivar_632);
                 if (ivar_630){          
                  release_iccMax2c_record_35(ivar_92);
                  release_iccMax2c__signatureMap(ivar_3);
                  release_bytestrings__bytestring(ivar_2);
                  uint8_t ivar_638;
                  ivar_638 = (uint8_t)iccMax2c__nonZero();
                  uint8_t ivar_640;
                  ivar_640 = (uint8_t)71;
                  iccMax2c__result_adt_t ivar_637;
                  ivar_637 = (iccMax2c__result_adt_t)iccMax2c__error((uint8_t)ivar_638, (uint32_t)ivar_28, (uint8_t)ivar_640);
                  //copying to iccMax2c__result_adt from iccMax2c__result_adt;
                  result = (iccMax2c__result_adt_t)ivar_637;
                  if (result != NULL) result->count++;
                  release_iccMax2c__result_adt(ivar_637);
} else {
                 
                  bool_t ivar_641;
                  uint32_t ivar_642;
                  uint8_t ivar_645;
                  ivar_645 = (uint8_t)1;
                  ivar_642 = (uint32_t)(ivar_612 + ivar_645);
                  ivar_641 = (ivar_642 > ivar_5);
                  if (ivar_641){           
                   release_bytestrings__bytestring(ivar_2);
                   release_iccMax2c__signatureMap(ivar_3);
                   release_iccMax2c_record_35(ivar_92);
                   uint8_t ivar_652;
                   ivar_652 = (uint8_t)iccMax2c__Underflow();
                   uint8_t ivar_654;
                   ivar_654 = (uint8_t)72;
                   iccMax2c__result_adt_t ivar_651;
                   ivar_651 = (iccMax2c__result_adt_t)iccMax2c__error((uint8_t)ivar_652, (uint32_t)ivar_28, (uint8_t)ivar_654);
                   //copying to iccMax2c__result_adt from iccMax2c__result_adt;
                   result = (iccMax2c__result_adt_t)ivar_651;
                   if (result != NULL) result->count++;
                   release_iccMax2c__result_adt(ivar_651);
} else {
                  
                   mpz_ptr_t ivar_681;
                   mpz_mk_set_ui(ivar_681, (uint64_t)ivar_4);
                   mpz_sub_ui(ivar_681, ivar_681, (uint64_t)ivar_612);
                   uint64_t ivar_671;
                   //copying to uint64 from mpz;
                   ivar_671 = (uint64_t)mpz_get_ui(ivar_681);
                   mpz_clear(ivar_681);
                   mpz_ptr_t ivar_680;
                   mpz_mk_set_ui(ivar_680, (uint64_t)ivar_5);
                   mpz_sub_ui(ivar_680, ivar_680, (uint64_t)ivar_612);
                   uint64_t ivar_672;
                   //copying to uint64 from mpz;
                   ivar_672 = (uint64_t)mpz_get_ui(ivar_680);
                   mpz_clear(ivar_680);
                   iccMax2c__result_adt_t ivar_667;
                   ivar_667 = (iccMax2c__result_adt_t)iccMax2c__parseOperation((uint64_t)ivar_1, (bytestrings__bytestring_t)ivar_2, (iccMax2c__signatureMap_t)ivar_3, (uint64_t)ivar_671, (uint64_t)ivar_672, (iccMax2c_record_35_t)ivar_92);
                   //copying to iccMax2c__result_adt from iccMax2c__result_adt;
                   result = (iccMax2c__result_adt_t)ivar_667;
                   if (result != NULL) result->count++;
                   release_iccMax2c__result_adt(ivar_667);
};
};
} else {
                
                 bool_t ivar_682;
                 ivar_682 = (bool_t)iccMax2c__FuncVecOpp((uint32_t)ivar_74);
                 if (ivar_682){          
                  release_iccMax2c_record_35(ivar_6);
                  /* S */ uint16_t ivar_686;
                  uint32_t ivar_694;
                  uint8_t ivar_690;
                  ivar_690 = (uint8_t)4;
                  ivar_694 = (uint32_t)(ivar_28 + ivar_690);
                  ivar_2->count++;
                  ivar_686 = (uint16_t)iccMax2c__readU16((bytestrings__bytestring_t)ivar_2, (uint32_t)ivar_694);
                  /* stackin */ uint32_t ivar_704;
                  ivar_704 = (uint32_t)iccMax2c__FuncVecIn((uint32_t)ivar_74, (uint16_t)ivar_686);
                  /* stackout */ uint32_t ivar_710;
                  ivar_710 = (uint32_t)iccMax2c__FuncVecOut((uint32_t)ivar_74, (uint16_t)ivar_686);
                  bool_t ivar_716;
                  ivar_716 = (ivar_704 > ivar_5);
                  if (ivar_716){           
                   release_iccMax2c_record_35(ivar_92);
                   release_iccMax2c__signatureMap(ivar_3);
                   release_bytestrings__bytestring(ivar_2);
                   uint8_t ivar_724;
                   ivar_724 = (uint8_t)iccMax2c__Underflow();
                   uint8_t ivar_726;
                   ivar_726 = (uint8_t)81;
                   iccMax2c__result_adt_t ivar_723;
                   ivar_723 = (iccMax2c__result_adt_t)iccMax2c__error((uint8_t)ivar_724, (uint32_t)ivar_28, (uint8_t)ivar_726);
                   //copying to iccMax2c__result_adt from iccMax2c__result_adt;
                   result = (iccMax2c__result_adt_t)ivar_723;
                   if (result != NULL) result->count++;
                   release_iccMax2c__result_adt(ivar_723);
} else {
                  
                   bool_t ivar_727;
                   mpz_ptr_t ivar_728;
                   mpz_ptr_t ivar_730;
                   mpz_mk_set_ui(ivar_730, (uint64_t)ivar_4);
                   mpz_sub_ui(ivar_730, ivar_730, (uint64_t)ivar_704);
                   mpz_mk_set_ui(ivar_728, (uint64_t)ivar_710);
                   mpz_add(ivar_728, ivar_728, ivar_730);
                   int64_t tmp33296 = mpz_cmp_ui(ivar_728, ivar_1);
                   ivar_727 = (tmp33296 >= 0);
                   if (ivar_727){            
                    release_bytestrings__bytestring(ivar_2);
                    release_iccMax2c__signatureMap(ivar_3);
                    release_iccMax2c_record_35(ivar_92);
                    uint8_t ivar_741;
                    ivar_741 = (uint8_t)iccMax2c__Overflow();
                    uint8_t ivar_743;
                    ivar_743 = (uint8_t)82;
                    iccMax2c__result_adt_t ivar_740;
                    ivar_740 = (iccMax2c__result_adt_t)iccMax2c__error((uint8_t)ivar_741, (uint32_t)ivar_28, (uint8_t)ivar_743);
                    //copying to iccMax2c__result_adt from iccMax2c__result_adt;
                    result = (iccMax2c__result_adt_t)ivar_740;
                    if (result != NULL) result->count++;
                    release_iccMax2c__result_adt(ivar_740);
} else {
                   
                    mpz_ptr_t ivar_776;
                    mpz_ptr_t ivar_750;
                    mpz_mk_set_ui(ivar_750, (uint64_t)ivar_4);
                    mpz_sub_ui(ivar_750, ivar_750, (uint64_t)ivar_704);
                    mpz_mk_set_ui(ivar_776, (uint64_t)ivar_710);
                    mpz_add(ivar_776, ivar_776, ivar_750);
                    uint64_t ivar_766;
                    //copying to uint64 from mpz;
                    ivar_766 = (uint64_t)mpz_get_ui(ivar_776);
                    mpz_clear(ivar_776);
                    mpz_ptr_t ivar_775;
                    mpz_ptr_t ivar_756;
                    mpz_mk_set_ui(ivar_756, (uint64_t)ivar_5);
                    mpz_sub_ui(ivar_756, ivar_756, (uint64_t)ivar_704);
                    mpz_mk_set_ui(ivar_775, (uint64_t)ivar_710);
                    mpz_add(ivar_775, ivar_775, ivar_756);
                    uint64_t ivar_767;
                    //copying to uint64 from mpz;
                    ivar_767 = (uint64_t)mpz_get_ui(ivar_775);
                    mpz_clear(ivar_775);
                    iccMax2c__result_adt_t ivar_762;
                    ivar_762 = (iccMax2c__result_adt_t)iccMax2c__parseOperation((uint64_t)ivar_1, (bytestrings__bytestring_t)ivar_2, (iccMax2c__signatureMap_t)ivar_3, (uint64_t)ivar_766, (uint64_t)ivar_767, (iccMax2c_record_35_t)ivar_92);
                    //copying to iccMax2c__result_adt from iccMax2c__result_adt;
                    result = (iccMax2c__result_adt_t)ivar_762;
                    if (result != NULL) result->count++;
                    release_iccMax2c__result_adt(ivar_762);
};
};
} else {
                 
                  release_iccMax2c_record_35(ivar_92);
                  bool_t ivar_777;
                  uint32_t ivar_779;
                  ivar_779 = (uint32_t)iccMax2c__ifTag();
                  ivar_777 = (ivar_74 == ivar_779);
                  if (ivar_777){           
                   /* T */ uint32_t ivar_781;
                   uint32_t ivar_789;
                   uint8_t ivar_785;
                   ivar_785 = (uint8_t)4;
                   ivar_789 = (uint32_t)(ivar_28 + ivar_785);
                   ivar_2->count++;
                   ivar_781 = (uint32_t)iccMax2c__readU32((bytestrings__bytestring_t)ivar_2, (uint32_t)ivar_789);
                   bool_t ivar_790;
                   bool_t ivar_791;
                   uint8_t ivar_793;
                   ivar_793 = (uint8_t)16;
                   int64_t ivar_794;
                   ivar_794 = (int64_t)((uint64_t)ivar_11 - (uint64_t)ivar_28);
                   if ((ivar_794 < 0)){            
                    ivar_791 = false;
} else {
                   
                    ivar_791 = (ivar_793 <= (uint8_t)ivar_794);
};
                   if (ivar_791){            
                    uint32_t ivar_799;
                    uint32_t ivar_808;
                    uint8_t ivar_804;
                    ivar_804 = (uint8_t)8;
                    ivar_808 = (uint32_t)(ivar_28 + ivar_804);
                    ivar_2->count++;
                    ivar_799 = (uint32_t)iccMax2c__readU32((bytestrings__bytestring_t)ivar_2, (uint32_t)ivar_808);
                    uint32_t ivar_800;
                    ivar_800 = (uint32_t)iccMax2c__elseTag();
                    ivar_790 = (ivar_799 == ivar_800);
} else {
                   
                    ivar_790 = (bool_t) false;
};
                   if (ivar_790){            
                    /* U */ uint32_t ivar_811;
                    uint32_t ivar_819;
                    uint8_t ivar_815;
                    ivar_815 = (uint8_t)12;
                    ivar_819 = (uint32_t)(ivar_28 + ivar_815);
                    ivar_2->count++;
                    ivar_811 = (uint32_t)iccMax2c__readU32((bytestrings__bytestring_t)ivar_2, (uint32_t)ivar_819);
                    bool_t ivar_820;
                    uint32_t ivar_822;
                    uint32_t ivar_832;
                    int64_t ivar_825;
                    ivar_825 = (int64_t)((uint64_t)ivar_11 - (uint64_t)ivar_28);
                    uint8_t ivar_826;
                    ivar_826 = (uint8_t)16;
                    ivar_832 = (uint32_t)((int64_t)ivar_825 - (uint64_t)ivar_826);
                    uint32_t ivar_833;
                    ivar_833 = (uint32_t)8;
                    ivar_822 = (uint32_t)integertypes__u32div((uint32_t)ivar_832, (uint32_t)ivar_833);
                    ivar_820 = (ivar_781 <= ivar_822);
                    if (ivar_820){             
                     /* Twindow */ iccMax2c_record_35_t ivar_835;
                     uint32_t ivar_848;
                     uint64_t ivar_850;
                     uint8_t ivar_853;
                     ivar_853 = (uint8_t)16;
                     ivar_850 = (uint64_t)(ivar_28 + ivar_853);
                     uint64_t ivar_851;
                     uint8_t ivar_855;
                     ivar_855 = (uint8_t)8;
                     ivar_851 = (uint64_t)((uint64_t)ivar_855 * (uint64_t)ivar_781);
                     ivar_848 = (uint32_t)(ivar_850 + ivar_851);
                     uint32_t ivar_849;
                     uint8_t ivar_860;
                     ivar_860 = (uint8_t)16;
                     ivar_849 = (uint32_t)(ivar_28 + ivar_860);
                     iccMax2c_record_35_t ivar_866;
                     {ivar_866 = (iccMax2c_record_35_t)copy_iccMax2c_record_35(ivar_6); ivar_866 = (iccMax2c_record_35_t)update_iccMax2c_record_35_endpos(ivar_6, ivar_848);};
                     iccMax2c_record_35_t ivar_870;
                     ivar_870 = (iccMax2c_record_35_t)update_iccMax2c_record_35_startpos(ivar_866, ivar_849);
                     //copying to iccMax2c_record_35 from iccMax2c_record_35;
                     ivar_835 = (iccMax2c_record_35_t)ivar_870;
                     if (ivar_835 != NULL) ivar_835->count++;
                     release_iccMax2c_record_35(ivar_870);
                     /* Tval */ iccMax2c__result_adt_t ivar_871;
                     iccMax2c__result_adt_t ivar_878;
                     ivar_2->count++;
                     ivar_3->count++;
                     ivar_878 = (iccMax2c__result_adt_t)iccMax2c__parseOperation((uint64_t)ivar_1, (bytestrings__bytestring_t)ivar_2, (iccMax2c__signatureMap_t)ivar_3, (uint64_t)ivar_4, (uint64_t)ivar_5, (iccMax2c_record_35_t)ivar_835);
                     //copying to iccMax2c__result_adt from iccMax2c__result_adt;
                     ivar_871 = (iccMax2c__result_adt_t)ivar_878;
                     if (ivar_871 != NULL) ivar_871->count++;
                     release_iccMax2c__result_adt(ivar_878);
                     bool_t ivar_889;
                     ivar_871->count++;
                     ivar_889 = (bool_t)r_iccMax2c__errorp((iccMax2c__result_adt_t)ivar_871);
                     if (ivar_889){              
                      release_iccMax2c__signatureMap(ivar_3);
                      release_bytestrings__bytestring(ivar_2);
                      release_iccMax2c_record_35(ivar_6);
                      //copying to iccMax2c__result_adt from iccMax2c__result_adt;
                      result = (iccMax2c__result_adt_t)ivar_871;
                      if (result != NULL) result->count++;
                      release_iccMax2c__result_adt(ivar_871);
} else {
                     
                      bool_t ivar_893;
                      uint64_t ivar_894;
                      ivar_894 = (uint64_t)(ivar_781 + ivar_811);
                      uint32_t ivar_895;
                      uint32_t ivar_908;
                      int64_t ivar_901;
                      ivar_901 = (int64_t)((uint64_t)ivar_11 - (uint64_t)ivar_28);
                      uint8_t ivar_902;
                      ivar_902 = (uint8_t)16;
                      ivar_908 = (uint32_t)((int64_t)ivar_901 - (uint64_t)ivar_902);
                      uint32_t ivar_909;
                      ivar_909 = (uint32_t)8;
                      ivar_895 = (uint32_t)integertypes__u32div((uint32_t)ivar_908, (uint32_t)ivar_909);
                      ivar_893 = (ivar_894 <= ivar_895);
                      if (ivar_893){               
                       /* w1 */ iccMax2c_record_35_t ivar_911;
                       uint32_t ivar_924;
                       uint64_t ivar_926;
                       uint8_t ivar_929;
                       ivar_929 = (uint8_t)16;
                       ivar_926 = (uint64_t)(ivar_28 + ivar_929);
                       uint64_t ivar_927;
                       uint8_t ivar_931;
                       ivar_931 = (uint8_t)8;
                       uint64_t ivar_932;
                       ivar_932 = (uint64_t)(ivar_781 + ivar_811);
                       ivar_927 = (uint64_t)((uint64_t)ivar_931 * (uint64_t)ivar_932);
                       ivar_924 = (uint32_t)(ivar_926 + ivar_927);
                       uint32_t ivar_925;
                       uint64_t ivar_939;
                       uint8_t ivar_940;
                       ivar_940 = (uint8_t)8;
                       uint64_t ivar_941;
                       uint8_t ivar_943;
                       ivar_943 = (uint8_t)2;
                       ivar_941 = (uint64_t)(ivar_781 + ivar_943);
                       ivar_939 = (uint64_t)((uint64_t)ivar_940 * (uint64_t)ivar_941);
                       ivar_925 = (uint32_t)(ivar_28 + ivar_939);
                       iccMax2c_record_35_t ivar_951;
                       {ivar_951 = (iccMax2c_record_35_t)copy_iccMax2c_record_35(ivar_6); ivar_951 = (iccMax2c_record_35_t)update_iccMax2c_record_35_endpos(ivar_6, ivar_924);};
                       iccMax2c_record_35_t ivar_955;
                       ivar_955 = (iccMax2c_record_35_t)update_iccMax2c_record_35_startpos(ivar_951, ivar_925);
                       //copying to iccMax2c_record_35 from iccMax2c_record_35;
                       ivar_911 = (iccMax2c_record_35_t)ivar_955;
                       if (ivar_911 != NULL) ivar_911->count++;
                       release_iccMax2c_record_35(ivar_955);
                       /* Eval */ iccMax2c__result_adt_t ivar_956;
                       iccMax2c__result_adt_t ivar_963;
                       ivar_2->count++;
                       ivar_3->count++;
                       ivar_963 = (iccMax2c__result_adt_t)iccMax2c__parseOperation((uint64_t)ivar_1, (bytestrings__bytestring_t)ivar_2, (iccMax2c__signatureMap_t)ivar_3, (uint64_t)ivar_4, (uint64_t)ivar_5, (iccMax2c_record_35_t)ivar_911);
                       //copying to iccMax2c__result_adt from iccMax2c__result_adt;
                       ivar_956 = (iccMax2c__result_adt_t)ivar_963;
                       if (ivar_956 != NULL) ivar_956->count++;
                       release_iccMax2c__result_adt(ivar_963);
                       bool_t ivar_974;
                       ivar_956->count++;
                       ivar_974 = (bool_t)r_iccMax2c__errorp((iccMax2c__result_adt_t)ivar_956);
                       if (ivar_974){                
                        release_iccMax2c__result_adt(ivar_871);
                        release_iccMax2c__signatureMap(ivar_3);
                        release_bytestrings__bytestring(ivar_2);
                        release_iccMax2c_record_35(ivar_6);
                        //copying to iccMax2c__result_adt from iccMax2c__result_adt;
                        result = (iccMax2c__result_adt_t)ivar_956;
                        if (result != NULL) result->count++;
                        release_iccMax2c__result_adt(ivar_956);
} else {
                       
                        /* w2 */ iccMax2c_record_35_t ivar_978;
                        uint32_t ivar_991;
                        uint64_t ivar_993;
                        uint8_t ivar_994;
                        ivar_994 = (uint8_t)8;
                        uint64_t ivar_995;
                        uint64_t ivar_996;
                        ivar_996 = (uint64_t)(ivar_781 + ivar_811);
                        uint8_t ivar_997;
                        ivar_997 = (uint8_t)2;
                        ivar_995 = (uint64_t)(ivar_996 + ivar_997);
                        ivar_993 = (uint64_t)((uint64_t)ivar_994 * (uint64_t)ivar_995);
                        ivar_991 = (uint32_t)(ivar_28 + ivar_993);
                        iccMax2c_record_35_t ivar_1008;
                        ivar_1008 = (iccMax2c_record_35_t)update_iccMax2c_record_35_startpos(ivar_6, ivar_991);
                        //copying to iccMax2c_record_35 from iccMax2c_record_35;
                        ivar_978 = (iccMax2c_record_35_t)ivar_1008;
                        if (ivar_978 != NULL) ivar_978->count++;
                        release_iccMax2c_record_35(ivar_1008);
                        uint64_t ivar_1041;
                        uint64_t ivar_1024;
                        ivar_871->count++;
                        ivar_1024 = (uint64_t)iccMax2c__result_adt_vmax((iccMax2c__result_adt_t)ivar_871);
                        uint64_t ivar_1025;
                        ivar_956->count++;
                        ivar_1025 = (uint64_t)iccMax2c__result_adt_vmax((iccMax2c__result_adt_t)ivar_956);
                        ivar_1041 = (uint64_t)integertypes__u64max((uint64_t)ivar_1024, (uint64_t)ivar_1025);
                        uint64_t ivar_1042;
                        uint64_t ivar_1035;
                        ivar_1035 = (uint64_t)iccMax2c__result_adt_vmin((iccMax2c__result_adt_t)ivar_871);
                        uint64_t ivar_1036;
                        ivar_1036 = (uint64_t)iccMax2c__result_adt_vmin((iccMax2c__result_adt_t)ivar_956);
                        ivar_1042 = (uint64_t)integertypes__u64min((uint64_t)ivar_1035, (uint64_t)ivar_1036);
                        iccMax2c__result_adt_t ivar_1037;
                        ivar_1037 = (iccMax2c__result_adt_t)iccMax2c__parseOperation((uint64_t)ivar_1, (bytestrings__bytestring_t)ivar_2, (iccMax2c__signatureMap_t)ivar_3, (uint64_t)ivar_1041, (uint64_t)ivar_1042, (iccMax2c_record_35_t)ivar_978);
                        //copying to iccMax2c__result_adt from iccMax2c__result_adt;
                        result = (iccMax2c__result_adt_t)ivar_1037;
                        if (result != NULL) result->count++;
                        release_iccMax2c__result_adt(ivar_1037);
};
} else {
                      
                       release_iccMax2c__result_adt(ivar_871);
                       release_iccMax2c__signatureMap(ivar_3);
                       release_bytestrings__bytestring(ivar_2);
                       release_iccMax2c_record_35(ivar_6);
                       uint8_t ivar_1052;
                       ivar_1052 = (uint8_t)iccMax2c__Overflow();
                       uint8_t ivar_1054;
                       ivar_1054 = (uint8_t)92;
                       iccMax2c__result_adt_t ivar_1051;
                       ivar_1051 = (iccMax2c__result_adt_t)iccMax2c__error((uint8_t)ivar_1052, (uint32_t)ivar_28, (uint8_t)ivar_1054);
                       //copying to iccMax2c__result_adt from iccMax2c__result_adt;
                       result = (iccMax2c__result_adt_t)ivar_1051;
                       if (result != NULL) result->count++;
                       release_iccMax2c__result_adt(ivar_1051);
};
};
} else {
                    
                     release_iccMax2c__signatureMap(ivar_3);
                     release_bytestrings__bytestring(ivar_2);
                     release_iccMax2c_record_35(ivar_6);
                     uint8_t ivar_1059;
                     ivar_1059 = (uint8_t)iccMax2c__Overflow();
                     uint8_t ivar_1061;
                     ivar_1061 = (uint8_t)93;
                     iccMax2c__result_adt_t ivar_1058;
                     ivar_1058 = (iccMax2c__result_adt_t)iccMax2c__error((uint8_t)ivar_1059, (uint32_t)ivar_28, (uint8_t)ivar_1061);
                     //copying to iccMax2c__result_adt from iccMax2c__result_adt;
                     result = (iccMax2c__result_adt_t)ivar_1058;
                     if (result != NULL) result->count++;
                     release_iccMax2c__result_adt(ivar_1058);
};
} else {
                   
                    bool_t ivar_1062;
                    uint32_t ivar_1064;
                    uint32_t ivar_1074;
                    int64_t ivar_1067;
                    ivar_1067 = (int64_t)((uint64_t)ivar_11 - (uint64_t)ivar_28);
                    uint8_t ivar_1068;
                    ivar_1068 = (uint8_t)8;
                    ivar_1074 = (uint32_t)((int64_t)ivar_1067 - (uint64_t)ivar_1068);
                    uint32_t ivar_1075;
                    ivar_1075 = (uint32_t)8;
                    ivar_1064 = (uint32_t)integertypes__u32div((uint32_t)ivar_1074, (uint32_t)ivar_1075);
                    ivar_1062 = (ivar_781 <= ivar_1064);
                    if (ivar_1062){             
                     /* Twindow */ iccMax2c_record_35_t ivar_1077;
                     uint32_t ivar_1090;
                     uint64_t ivar_1092;
                     uint8_t ivar_1095;
                     ivar_1095 = (uint8_t)8;
                     ivar_1092 = (uint64_t)(ivar_28 + ivar_1095);
                     uint64_t ivar_1093;
                     uint8_t ivar_1097;
                     ivar_1097 = (uint8_t)8;
                     ivar_1093 = (uint64_t)((uint64_t)ivar_1097 * (uint64_t)ivar_781);
                     ivar_1090 = (uint32_t)(ivar_1092 + ivar_1093);
                     uint32_t ivar_1091;
                     uint8_t ivar_1102;
                     ivar_1102 = (uint8_t)8;
                     ivar_1091 = (uint32_t)(ivar_28 + ivar_1102);
                     iccMax2c_record_35_t ivar_1108;
                     {ivar_1108 = (iccMax2c_record_35_t)copy_iccMax2c_record_35(ivar_6); ivar_1108 = (iccMax2c_record_35_t)update_iccMax2c_record_35_endpos(ivar_6, ivar_1090);};
                     iccMax2c_record_35_t ivar_1112;
                     ivar_1112 = (iccMax2c_record_35_t)update_iccMax2c_record_35_startpos(ivar_1108, ivar_1091);
                     //copying to iccMax2c_record_35 from iccMax2c_record_35;
                     ivar_1077 = (iccMax2c_record_35_t)ivar_1112;
                     if (ivar_1077 != NULL) ivar_1077->count++;
                     release_iccMax2c_record_35(ivar_1112);
                     /* Tval */ iccMax2c__result_adt_t ivar_1113;
                     iccMax2c__result_adt_t ivar_1120;
                     ivar_2->count++;
                     ivar_3->count++;
                     ivar_1120 = (iccMax2c__result_adt_t)iccMax2c__parseOperation((uint64_t)ivar_1, (bytestrings__bytestring_t)ivar_2, (iccMax2c__signatureMap_t)ivar_3, (uint64_t)ivar_4, (uint64_t)ivar_5, (iccMax2c_record_35_t)ivar_1077);
                     //copying to iccMax2c__result_adt from iccMax2c__result_adt;
                     ivar_1113 = (iccMax2c__result_adt_t)ivar_1120;
                     if (ivar_1113 != NULL) ivar_1113->count++;
                     release_iccMax2c__result_adt(ivar_1120);
                     bool_t ivar_1131;
                     ivar_1113->count++;
                     ivar_1131 = (bool_t)r_iccMax2c__errorp((iccMax2c__result_adt_t)ivar_1113);
                     if (ivar_1131){              
                      release_iccMax2c__signatureMap(ivar_3);
                      release_bytestrings__bytestring(ivar_2);
                      release_iccMax2c_record_35(ivar_6);
                      //copying to iccMax2c__result_adt from iccMax2c__result_adt;
                      result = (iccMax2c__result_adt_t)ivar_1113;
                      if (result != NULL) result->count++;
                      release_iccMax2c__result_adt(ivar_1113);
} else {
                     
                      /* w1 */ iccMax2c_record_35_t ivar_1135;
                      uint32_t ivar_1148;
                      uint64_t ivar_1150;
                      uint8_t ivar_1151;
                      ivar_1151 = (uint8_t)8;
                      uint64_t ivar_1152;
                      uint8_t ivar_1154;
                      ivar_1154 = (uint8_t)1;
                      ivar_1152 = (uint64_t)(ivar_781 + ivar_1154);
                      ivar_1150 = (uint64_t)((uint64_t)ivar_1151 * (uint64_t)ivar_1152);
                      ivar_1148 = (uint32_t)(ivar_28 + ivar_1150);
                      iccMax2c_record_35_t ivar_1162;
                      ivar_1162 = (iccMax2c_record_35_t)update_iccMax2c_record_35_startpos(ivar_6, ivar_1148);
                      //copying to iccMax2c_record_35 from iccMax2c_record_35;
                      ivar_1135 = (iccMax2c_record_35_t)ivar_1162;
                      if (ivar_1135 != NULL) ivar_1135->count++;
                      release_iccMax2c_record_35(ivar_1162);
                      uint64_t ivar_1179;
                      ivar_1113->count++;
                      ivar_1179 = (uint64_t)iccMax2c__result_adt_vmax((iccMax2c__result_adt_t)ivar_1113);
                      uint64_t ivar_1180;
                      ivar_1180 = (uint64_t)iccMax2c__result_adt_vmin((iccMax2c__result_adt_t)ivar_1113);
                      iccMax2c__result_adt_t ivar_1175;
                      ivar_1175 = (iccMax2c__result_adt_t)iccMax2c__parseOperation((uint64_t)ivar_1, (bytestrings__bytestring_t)ivar_2, (iccMax2c__signatureMap_t)ivar_3, (uint64_t)ivar_1179, (uint64_t)ivar_1180, (iccMax2c_record_35_t)ivar_1135);
                      //copying to iccMax2c__result_adt from iccMax2c__result_adt;
                      result = (iccMax2c__result_adt_t)ivar_1175;
                      if (result != NULL) result->count++;
                      release_iccMax2c__result_adt(ivar_1175);
};
} else {
                    
                     release_iccMax2c__signatureMap(ivar_3);
                     release_bytestrings__bytestring(ivar_2);
                     release_iccMax2c_record_35(ivar_6);
                     uint8_t ivar_1190;
                     ivar_1190 = (uint8_t)iccMax2c__Underflow();
                     uint8_t ivar_1192;
                     ivar_1192 = (uint8_t)94;
                     iccMax2c__result_adt_t ivar_1189;
                     ivar_1189 = (iccMax2c__result_adt_t)iccMax2c__error((uint8_t)ivar_1190, (uint32_t)ivar_28, (uint8_t)ivar_1192);
                     //copying to iccMax2c__result_adt from iccMax2c__result_adt;
                     result = (iccMax2c__result_adt_t)ivar_1189;
                     if (result != NULL) result->count++;
                     release_iccMax2c__result_adt(ivar_1189);
};
};
} else {
                  
                   release_iccMax2c__signatureMap(ivar_3);
                   release_bytestrings__bytestring(ivar_2);
                   release_iccMax2c_record_35(ivar_6);
                   uint8_t ivar_1197;
                   ivar_1197 = (uint8_t)iccMax2c__DefaultError();
                   uint8_t ivar_1199;
                   ivar_1199 = (uint8_t)100;
                   iccMax2c__result_adt_t ivar_1196;
                   ivar_1196 = (iccMax2c__result_adt_t)iccMax2c__error((uint8_t)ivar_1197, (uint32_t)ivar_28, (uint8_t)ivar_1199);
                   //copying to iccMax2c__result_adt from iccMax2c__result_adt;
                   result = (iccMax2c__result_adt_t)ivar_1196;
                   if (result != NULL) result->count++;
                   release_iccMax2c__result_adt(ivar_1196);
};
};
};
};
};
};
};
};
};
};
};

        
        return result;
}

extern iccMax2c__result_adt_t iccMax2c__parsefunc(uint64_t ivar_1, bytestrings__bytestring_t ivar_2, iccMax2c__signatureMap_t ivar_3, iccMax2c_record_35_t ivar_5){
        iccMax2c__result_adt_t  result;
        /* endpos */ uint32_t ivar_10;
        ivar_10 = (uint32_t)ivar_5->endpos;
        /* startpos */ uint32_t ivar_18;
        ivar_18 = (uint32_t)ivar_5->startpos;
        bool_t ivar_36;
        uint8_t ivar_38;
        ivar_38 = (uint8_t)12;
        ivar_36 = (ivar_10 < ivar_38);
        if (ivar_36){ 
             release_iccMax2c_record_35(ivar_5);
             release_iccMax2c__signatureMap(ivar_3);
             release_bytestrings__bytestring(ivar_2);
             uint8_t ivar_44;
             ivar_44 = (uint8_t)iccMax2c__UnexpectedEOF();
             uint8_t ivar_46;
             ivar_46 = (uint8_t)0;
             iccMax2c__result_adt_t ivar_43;
             ivar_43 = (iccMax2c__result_adt_t)iccMax2c__error((uint8_t)ivar_44, (uint32_t)ivar_18, (uint8_t)ivar_46);
             //copying to iccMax2c__result_adt from iccMax2c__result_adt;
             result = (iccMax2c__result_adt_t)ivar_43;
             if (result != NULL) result->count++;
             release_iccMax2c__result_adt(ivar_43);
} else {
        
             bool_t ivar_47;
             int64_t ivar_48;
             uint8_t ivar_51;
             ivar_51 = (uint8_t)12;
             ivar_48 = (int64_t)((uint64_t)ivar_10 - (uint64_t)ivar_51);
             if ((ivar_48 < 0)){  
           ivar_47 = true;
} else {
             
           ivar_47 = ((uint32_t)ivar_48 <= ivar_18);
};
             if (ivar_47){  
           release_iccMax2c_record_35(ivar_5);
           release_iccMax2c__signatureMap(ivar_3);
           release_bytestrings__bytestring(ivar_2);
           uint8_t ivar_58;
           ivar_58 = (uint8_t)iccMax2c__UnexpectedEOF();
           uint8_t ivar_60;
           ivar_60 = (uint8_t)0;
           iccMax2c__result_adt_t ivar_57;
           ivar_57 = (iccMax2c__result_adt_t)iccMax2c__error((uint8_t)ivar_58, (uint32_t)ivar_18, (uint8_t)ivar_60);
           //copying to iccMax2c__result_adt from iccMax2c__result_adt;
           result = (iccMax2c__result_adt_t)ivar_57;
           if (result != NULL) result->count++;
           release_iccMax2c__result_adt(ivar_57);
} else {
             
           /* tag */ uint32_t ivar_74;
           ivar_2->count++;
           ivar_74 = (uint32_t)iccMax2c__readU32((bytestrings__bytestring_t)ivar_2, (uint32_t)ivar_18);
           /* S */ uint32_t ivar_80;
           uint32_t ivar_88;
           uint8_t ivar_84;
           ivar_84 = (uint8_t)4;
           ivar_88 = (uint32_t)(ivar_18 + ivar_84);
           ivar_2->count++;
           ivar_80 = (uint32_t)iccMax2c__readU32((bytestrings__bytestring_t)ivar_2, (uint32_t)ivar_88);
           /* N */ uint32_t ivar_89;
           uint32_t ivar_97;
           uint8_t ivar_93;
           ivar_93 = (uint8_t)8;
           ivar_97 = (uint32_t)(ivar_18 + ivar_93);
           ivar_2->count++;
           ivar_89 = (uint32_t)iccMax2c__readU32((bytestrings__bytestring_t)ivar_2, (uint32_t)ivar_97);
           mpq_ptr_t ivar_193;
           uint8_t ivar_100;
           ivar_100 = (uint8_t)12;
           mpz_t tmp33334;
           mpz_init(tmp33334);
           mpz_set_ui(tmp33334, (uint64_t)ivar_18);
           mpz_add_ui(tmp33334, tmp33334, (uint64_t)ivar_100);
           mpq_mk_set_z(ivar_193, tmp33334);
           mpz_clear(tmp33334);
           /* B */ uint32_t ivar_98;
           //copying to uint32 from mpq;
           ivar_98 = (uint32_t)mpq_get_ui(ivar_193);
           mpq_clear(ivar_193);
           bool_t ivar_102;
           uint32_t ivar_104;
           uint32_t ivar_111;
           ivar_111 = (uint32_t)(ivar_10 - ivar_98);
           uint32_t ivar_112;
           ivar_112 = (uint32_t)8;
           ivar_104 = (uint32_t)integertypes__u32div((uint32_t)ivar_111, (uint32_t)ivar_112);
           ivar_102 = (ivar_89 > ivar_104);
           if (ivar_102){   
           release_iccMax2c_record_35(ivar_5);
           release_iccMax2c__signatureMap(ivar_3);
           release_bytestrings__bytestring(ivar_2);
           uint8_t ivar_118;
           ivar_118 = (uint8_t)iccMax2c__UnexpectedEOF();
           uint8_t ivar_120;
           ivar_120 = (uint8_t)0;
           iccMax2c__result_adt_t ivar_117;
           ivar_117 = (iccMax2c__result_adt_t)iccMax2c__error((uint8_t)ivar_118, (uint32_t)ivar_18, (uint8_t)ivar_120);
           //copying to iccMax2c__result_adt from iccMax2c__result_adt;
           result = (iccMax2c__result_adt_t)ivar_117;
           if (result != NULL) result->count++;
           release_iccMax2c__result_adt(ivar_117);
} else {
           
           /* E */ mpz_ptr_t ivar_121;
           uint64_t ivar_123;
           uint8_t ivar_124;
           ivar_124 = (uint8_t)8;
           ivar_123 = (uint64_t)((uint64_t)ivar_124 * (uint64_t)ivar_89);
           mpz_mk_set_ui(ivar_121, (uint64_t)ivar_98);
           mpz_add_ui(ivar_121, ivar_121, (uint64_t)ivar_123);
           bool_t ivar_128;
           uint32_t ivar_130;
           ivar_130 = (uint32_t)1718972003;
           ivar_128 = (ivar_74 == ivar_130);
           if (ivar_128){    
            bool_t ivar_132;
            uint8_t ivar_134;
            ivar_134 = (uint8_t)0;
            ivar_132 = (ivar_80 == ivar_134);
            if (ivar_132){     
             bool_t ivar_136;
             mpz_ptr_t ivar_137;
             //copying to mpz from mpz;
             mpz_mk_set(ivar_137, ivar_121);
             int64_t tmp33335 = mpz_cmp_ui(ivar_137, ivar_10);
             ivar_136 = (tmp33335 <= 0);
             if (ivar_136){      
              uint64_t ivar_169;
              ivar_169 = (uint64_t)0;
              uint64_t ivar_170;
              ivar_170 = (uint64_t)0;
              iccMax2c_record_35_t ivar_171;
              uint32_t ivar_150;
              //copying to uint32 from mpz;
              ivar_150 = (uint32_t)mpz_get_ui(ivar_121);
              mpz_clear(ivar_121);
              iccMax2c_record_35_t ivar_156;
              ivar_156 = (iccMax2c_record_35_t)update_iccMax2c_record_35_endpos(ivar_5, ivar_150);
              iccMax2c_record_35_t ivar_160;
              ivar_160 = (iccMax2c_record_35_t)update_iccMax2c_record_35_startpos(ivar_156, ivar_98);
              //copying to iccMax2c_record_35 from iccMax2c_record_35;
              ivar_171 = (iccMax2c_record_35_t)ivar_160;
              if (ivar_171 != NULL) ivar_171->count++;
              release_iccMax2c_record_35(ivar_160);
              iccMax2c__result_adt_t ivar_165;
              ivar_165 = (iccMax2c__result_adt_t)iccMax2c__parseOperation((uint64_t)ivar_1, (bytestrings__bytestring_t)ivar_2, (iccMax2c__signatureMap_t)ivar_3, (uint64_t)ivar_169, (uint64_t)ivar_170, (iccMax2c_record_35_t)ivar_171);
              //copying to iccMax2c__result_adt from iccMax2c__result_adt;
              result = (iccMax2c__result_adt_t)ivar_165;
              if (result != NULL) result->count++;
              release_iccMax2c__result_adt(ivar_165);
} else {
             
              release_bytestrings__bytestring(ivar_2);
              release_iccMax2c__signatureMap(ivar_3);
              release_iccMax2c_record_35(ivar_5);
              uint8_t ivar_176;
              ivar_176 = (uint8_t)iccMax2c__UnexpectedEOF();
              uint8_t ivar_178;
              ivar_178 = (uint8_t)0;
              iccMax2c__result_adt_t ivar_175;
              ivar_175 = (iccMax2c__result_adt_t)iccMax2c__error((uint8_t)ivar_176, (uint32_t)ivar_18, (uint8_t)ivar_178);
              //copying to iccMax2c__result_adt from iccMax2c__result_adt;
              result = (iccMax2c__result_adt_t)ivar_175;
              if (result != NULL) result->count++;
              release_iccMax2c__result_adt(ivar_175);
};
} else {
            
             release_iccMax2c_record_35(ivar_5);
             release_iccMax2c__signatureMap(ivar_3);
             release_bytestrings__bytestring(ivar_2);
             uint8_t ivar_183;
             ivar_183 = (uint8_t)iccMax2c__nonZero();
             uint8_t ivar_185;
             ivar_185 = (uint8_t)0;
             iccMax2c__result_adt_t ivar_182;
             ivar_182 = (iccMax2c__result_adt_t)iccMax2c__error((uint8_t)ivar_183, (uint32_t)ivar_18, (uint8_t)ivar_185);
             //copying to iccMax2c__result_adt from iccMax2c__result_adt;
             result = (iccMax2c__result_adt_t)ivar_182;
             if (result != NULL) result->count++;
             release_iccMax2c__result_adt(ivar_182);
};
} else {
           
            release_iccMax2c_record_35(ivar_5);
            release_iccMax2c__signatureMap(ivar_3);
            release_bytestrings__bytestring(ivar_2);
            uint8_t ivar_190;
            ivar_190 = (uint8_t)iccMax2c__badTag();
            uint8_t ivar_192;
            ivar_192 = (uint8_t)0;
            iccMax2c__result_adt_t ivar_189;
            ivar_189 = (iccMax2c__result_adt_t)iccMax2c__error((uint8_t)ivar_190, (uint32_t)ivar_18, (uint8_t)ivar_192);
            //copying to iccMax2c__result_adt from iccMax2c__result_adt;
            result = (iccMax2c__result_adt_t)ivar_189;
            if (result != NULL) result->count++;
            release_iccMax2c__result_adt(ivar_189);
};
};
};
};

        
        return result;
}

extern bytestrings__bytestring_t iccMax2c__iccteststring1(void){
        bytestrings__bytestring_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    bytestrings__bytestring_t ivar_11;
        iccMax2c_record_40_t ivar_9;
        uint32_t len33338 = 632;
        uint32_t characters33339[632] = {54, 54, 55, 53, 54, 101, 54, 51, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 50, 54, 54, 57, 54, 101, 50, 48, 50, 48, 48, 48, 48, 48, 48, 48, 48, 50, 54, 52, 54, 49, 55, 52, 54, 49, 52, 48, 48, 99, 99, 48, 48, 48, 54, 55, 54, 49, 54, 100, 54, 49, 48, 48, 48, 50, 48, 48, 48, 48, 55, 52, 55, 51, 54, 49, 55, 54, 48, 48, 48, 48, 48, 48, 48, 50, 54, 52, 54, 49, 55, 52, 54, 49, 48, 48, 48, 48, 48, 48, 48, 48, 54, 52, 54, 49, 55, 52, 54, 49, 48, 48, 48, 48, 48, 48, 48, 48, 54, 52, 54, 49, 55, 52, 54, 49, 48, 48, 48, 48, 48, 48, 48, 48, 54, 53, 55, 49, 50, 48, 50, 48, 48, 48, 48, 50, 48, 48, 48, 48, 55, 51, 55, 53, 54, 100, 50, 48, 48, 48, 48, 49, 48, 48, 48, 48, 54, 52, 54, 49, 55, 52, 54, 49, 52, 48, 52, 48, 48, 48, 48, 48, 54, 53, 55, 49, 50, 48, 50, 48, 48, 48, 48, 48, 48, 48, 48, 48, 54, 57, 54, 54, 50, 48, 50, 48, 48, 48, 48, 48, 48, 48, 48, 55, 54, 52, 54, 49, 55, 52, 54, 49, 51, 102, 56, 48, 48, 48, 48, 48, 54, 52, 54, 49, 55, 52, 54, 49, 52, 48, 48, 48, 48, 48, 48, 48, 55, 51, 55, 53, 54, 100, 50, 48, 48, 48, 48, 50, 48, 48, 48, 48, 54, 52, 54, 49, 55, 52, 54, 49, 51, 102, 56, 48, 48, 48, 48, 48, 55, 52, 55, 48, 55, 53, 55, 52, 48, 48, 48, 55, 48, 48, 48, 48, 55, 48, 54, 57, 50, 48, 50, 48, 48, 48, 48, 48, 48, 48, 48, 48, 55, 48, 54, 102, 55, 48, 50, 48, 48, 48, 48, 48, 48, 48, 48, 48, 55, 52, 54, 55, 54, 53, 55, 52, 48, 48, 48, 48, 48, 48, 48, 50, 54, 52, 54, 49, 55, 52, 54, 49, 51, 102, 49, 51, 97, 48, 56, 101, 54, 52, 54, 49, 55, 52, 54, 49, 51, 101, 51, 101, 48, 51, 48, 100, 54, 52, 54, 49, 55, 52, 54, 49, 51, 101, 52, 48, 98, 101, 99, 55, 54, 100, 55, 53, 54, 99, 50, 48, 48, 48, 48, 50, 48, 48, 48, 48, 55, 51, 55, 53, 54, 100, 50, 48, 48, 48, 48, 49, 48, 48, 48, 48, 55, 52, 54, 55, 54, 53, 55, 52, 48, 48, 48, 48, 48, 48, 48, 50, 54, 52, 54, 49, 55, 52, 54, 49, 51, 101, 57, 56, 51, 100, 53, 99, 54, 52, 54, 49, 55, 52, 54, 49, 51, 102, 50, 48, 57, 97, 100, 49, 54, 52, 54, 49, 55, 52, 54, 49, 51, 100, 57, 97, 51, 48, 55, 102, 54, 100, 55, 53, 54, 99, 50, 48, 48, 48, 48, 50, 48, 48, 48, 48, 55, 51, 55, 53, 54, 100, 50, 48, 48, 48, 48, 49, 48, 48, 48, 48, 55, 52, 54, 55, 54, 53, 55, 52, 48, 48, 48, 48, 48, 48, 48, 50, 54, 52, 54, 49, 55, 52, 54, 49, 51, 99, 100, 100, 55, 52, 53, 57, 54, 52, 54, 49, 55, 52, 54, 49, 51, 100, 57, 48, 99, 53, 48, 102, 54, 52, 54, 49, 55, 52, 54, 49, 51, 102, 55, 100, 99, 56, 97, 49, 54, 100, 55, 53, 54, 99, 50, 48, 48, 48, 48, 50, 48, 48, 48, 48, 55, 51, 55, 53, 54, 100, 50, 48, 48, 48, 48, 49, 48, 48, 48, 48, 54, 102, 55, 53, 55, 52, 50, 48, 48, 48, 48, 48, 48, 48, 48, 50};
        stringliteral_t string33337 = mk_string(632, characters33339);
        ivar_9 = (iccMax2c_record_40_t)strings__make_string(len33338, string33337);
        strings__string_t ivar_7;
        //copying to strings__string from iccMax2c_record_40;
        ivar_7 = (strings__string_t)ivar_9;
        if (ivar_7 != NULL) ivar_7->count++;
        release_iccMax2c_record_40(ivar_9);
        bytestrings__bytestring_t ivar_6;
        ivar_6 = (bytestrings__bytestring_t)bytestrings__mk_bytestring((strings__string_t)ivar_7);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        ivar_11 = (bytestrings__bytestring_t)ivar_6;
        if (ivar_11 != NULL) ivar_11->count++;
        release_bytestrings__bytestring(ivar_6);
        bytestrings__bytestring_t ivar_10;
        ivar_10 = (bytestrings__bytestring_t)hex__hex2bytestring((bytestrings__bytestring_t)ivar_11);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        result = (bytestrings__bytestring_t)ivar_10;
        if (result != NULL) result->count++;
        release_bytestrings__bytestring(ivar_10);

        defined = true;};
        
        return result;
}

extern bytestrings__bytestring_t iccMax2c__iccteststring2(void){
        bytestrings__bytestring_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    bytestrings__bytestring_t ivar_11;
        iccMax2c_record_40_t ivar_9;
        uint32_t len33342 = 120;
        uint32_t characters33343[120] = {54, 54, 55, 53, 54, 101, 54, 51, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 54, 54, 57, 54, 101, 50, 48, 50, 48, 48, 48, 48, 48, 48, 48, 48, 50, 54, 52, 54, 49, 55, 52, 54, 49, 51, 102, 56, 48, 48, 48, 48, 48, 54, 52, 54, 49, 55, 52, 54, 49, 51, 102, 56, 48, 48, 48, 48, 48, 54, 52, 54, 49, 55, 52, 54, 49, 51, 102, 56, 48, 48, 48, 48, 48, 54, 49, 54, 52, 54, 52, 50, 48, 48, 48, 48, 50, 48, 48, 48, 48, 54, 102, 55, 53, 55, 52, 50, 48, 48, 48, 48, 48, 48, 48, 48, 50};
        stringliteral_t string33341 = mk_string(120, characters33343);
        ivar_9 = (iccMax2c_record_40_t)strings__make_string(len33342, string33341);
        strings__string_t ivar_7;
        //copying to strings__string from iccMax2c_record_40;
        ivar_7 = (strings__string_t)ivar_9;
        if (ivar_7 != NULL) ivar_7->count++;
        release_iccMax2c_record_40(ivar_9);
        bytestrings__bytestring_t ivar_6;
        ivar_6 = (bytestrings__bytestring_t)bytestrings__mk_bytestring((strings__string_t)ivar_7);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        ivar_11 = (bytestrings__bytestring_t)ivar_6;
        if (ivar_11 != NULL) ivar_11->count++;
        release_bytestrings__bytestring(ivar_6);
        bytestrings__bytestring_t ivar_10;
        ivar_10 = (bytestrings__bytestring_t)hex__hex2bytestring((bytestrings__bytestring_t)ivar_11);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        result = (bytestrings__bytestring_t)ivar_10;
        if (result != NULL) result->count++;
        release_bytestrings__bytestring(ivar_10);

        defined = true;};
        
        return result;
}

extern bytestrings__bytestring_t iccMax2c__iccteststring3(void){
        bytestrings__bytestring_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    bytestrings__bytestring_t ivar_11;
        iccMax2c_record_40_t ivar_9;
        uint32_t len33346 = 632;
        uint32_t characters33347[632] = {54, 54, 55, 53, 54, 101, 54, 51, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 50, 54, 54, 57, 54, 101, 50, 48, 50, 48, 48, 48, 48, 48, 48, 48, 48, 50, 55, 52, 55, 51, 54, 49, 55, 54, 48, 48, 48, 48, 48, 48, 48, 50, 54, 52, 54, 49, 55, 52, 54, 49, 48, 48, 48, 48, 48, 48, 48, 48, 54, 52, 54, 49, 55, 52, 54, 49, 48, 48, 48, 48, 48, 48, 48, 48, 54, 52, 54, 49, 55, 52, 54, 49, 48, 48, 48, 48, 48, 48, 48, 48, 54, 53, 55, 49, 50, 48, 50, 48, 48, 48, 48, 50, 48, 48, 48, 48, 55, 51, 55, 53, 54, 100, 50, 48, 48, 48, 48, 49, 48, 48, 48, 48, 54, 52, 54, 49, 55, 52, 54, 49, 52, 48, 52, 48, 48, 48, 48, 48, 54, 53, 55, 49, 50, 48, 50, 48, 48, 48, 48, 48, 48, 48, 48, 48, 54, 57, 54, 54, 50, 48, 50, 48, 48, 48, 48, 48, 48, 48, 48, 55, 54, 52, 54, 49, 55, 52, 54, 49, 51, 102, 56, 48, 48, 48, 48, 48, 54, 52, 54, 49, 55, 52, 54, 49, 52, 48, 48, 48, 48, 48, 48, 48, 55, 51, 55, 53, 54, 100, 50, 48, 48, 48, 48, 50, 48, 48, 48, 48, 54, 52, 54, 49, 55, 52, 54, 49, 51, 102, 56, 48, 48, 48, 48, 48, 55, 52, 55, 48, 55, 53, 55, 52, 48, 48, 48, 55, 48, 48, 48, 48, 55, 48, 54, 57, 50, 48, 50, 48, 48, 48, 48, 48, 48, 48, 48, 48, 55, 48, 54, 102, 55, 48, 50, 48, 48, 48, 48, 48, 48, 48, 48, 48, 55, 52, 54, 55, 54, 53, 55, 52, 48, 48, 48, 48, 48, 48, 48, 50, 54, 52, 54, 49, 55, 52, 54, 49, 52, 48, 48, 50, 97, 57, 54, 57, 54, 52, 54, 49, 55, 52, 54, 49, 98, 102, 49, 48, 97, 52, 55, 102, 54, 52, 54, 49, 55, 52, 54, 49, 98, 101, 98, 48, 56, 48, 55, 51, 54, 100, 55, 53, 54, 99, 50, 48, 48, 48, 48, 50, 48, 48, 48, 48, 55, 51, 55, 53, 54, 100, 50, 48, 48, 48, 48, 49, 48, 48, 48, 48, 54, 57, 54, 101, 50, 48, 50, 48, 48, 48, 48, 48, 48, 48, 48, 50, 54, 52, 54, 49, 55, 52, 54, 49, 98, 102, 55, 56, 50, 48, 49, 100, 54, 52, 54, 49, 55, 52, 54, 49, 51, 102, 102, 48, 49, 102, 99, 57, 54, 52, 54, 49, 55, 52, 54, 49, 51, 100, 50, 97, 51, 97, 100, 50, 54, 100, 55, 53, 54, 99, 50, 48, 48, 48, 48, 50, 48, 48, 48, 48, 55, 51, 55, 53, 54, 100, 50, 48, 48, 48, 48, 49, 48, 48, 48, 48, 54, 57, 54, 101, 50, 48, 50, 48, 48, 48, 48, 48, 48, 48, 48, 50, 54, 52, 54, 49, 55, 52, 54, 49, 51, 99, 53, 99, 51, 51, 55, 50, 54, 52, 54, 49, 55, 52, 54, 49, 98, 100, 102, 50, 54, 54, 98, 97, 54, 52, 54, 49, 55, 52, 54, 49, 51, 102, 56, 49, 102, 49, 49, 55, 54, 100, 55, 53, 54, 99, 50, 48, 48, 48, 48, 50, 48, 48, 48, 48, 55, 51, 55, 53, 54, 100, 50, 48, 48, 48, 48, 49, 48, 48, 48, 48, 54, 52, 54, 49, 55, 52, 54, 49, 51, 101, 101, 56, 99, 102, 53, 57, 54, 55, 54, 49, 54, 100, 54, 49, 48, 48, 48, 50, 48, 48, 48, 48, 54, 102, 55, 53, 55, 52, 50, 48, 48, 48, 48, 48, 48, 48, 48, 50};
        stringliteral_t string33345 = mk_string(632, characters33347);
        ivar_9 = (iccMax2c_record_40_t)strings__make_string(len33346, string33345);
        strings__string_t ivar_7;
        //copying to strings__string from iccMax2c_record_40;
        ivar_7 = (strings__string_t)ivar_9;
        if (ivar_7 != NULL) ivar_7->count++;
        release_iccMax2c_record_40(ivar_9);
        bytestrings__bytestring_t ivar_6;
        ivar_6 = (bytestrings__bytestring_t)bytestrings__mk_bytestring((strings__string_t)ivar_7);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        ivar_11 = (bytestrings__bytestring_t)ivar_6;
        if (ivar_11 != NULL) ivar_11->count++;
        release_bytestrings__bytestring(ivar_6);
        bytestrings__bytestring_t ivar_10;
        ivar_10 = (bytestrings__bytestring_t)hex__hex2bytestring((bytestrings__bytestring_t)ivar_11);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        result = (bytestrings__bytestring_t)ivar_10;
        if (result != NULL) result->count++;
        release_bytestrings__bytestring(ivar_10);

        defined = true;};
        
        return result;
}

extern bytestrings__bytestring_t iccMax2c__iccteststring4(void){
        bytestrings__bytestring_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    bytestrings__bytestring_t ivar_11;
        iccMax2c_record_40_t ivar_9;
        uint32_t len33350 = 120;
        uint32_t characters33351[120] = {54, 54, 55, 53, 54, 101, 54, 51, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 54, 54, 57, 54, 101, 50, 48, 50, 48, 48, 48, 48, 48, 48, 48, 48, 50, 54, 52, 54, 49, 55, 52, 54, 49, 51, 102, 56, 48, 48, 48, 48, 48, 54, 52, 54, 49, 55, 52, 54, 49, 51, 102, 56, 48, 48, 48, 48, 48, 54, 52, 54, 49, 55, 52, 54, 49, 51, 102, 56, 48, 48, 48, 48, 48, 54, 49, 54, 52, 54, 52, 50, 48, 48, 48, 48, 50, 48, 48, 48, 48, 54, 102, 55, 53, 55, 52, 50, 48, 48, 48, 48, 48, 48, 48, 48, 50};
        stringliteral_t string33349 = mk_string(120, characters33351);
        ivar_9 = (iccMax2c_record_40_t)strings__make_string(len33350, string33349);
        strings__string_t ivar_7;
        //copying to strings__string from iccMax2c_record_40;
        ivar_7 = (strings__string_t)ivar_9;
        if (ivar_7 != NULL) ivar_7->count++;
        release_iccMax2c_record_40(ivar_9);
        bytestrings__bytestring_t ivar_6;
        ivar_6 = (bytestrings__bytestring_t)bytestrings__mk_bytestring((strings__string_t)ivar_7);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        ivar_11 = (bytestrings__bytestring_t)ivar_6;
        if (ivar_11 != NULL) ivar_11->count++;
        release_bytestrings__bytestring(ivar_6);
        bytestrings__bytestring_t ivar_10;
        ivar_10 = (bytestrings__bytestring_t)hex__hex2bytestring((bytestrings__bytestring_t)ivar_11);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        result = (bytestrings__bytestring_t)ivar_10;
        if (result != NULL) result->count++;
        release_bytestrings__bytestring(ivar_10);

        defined = true;};
        
        return result;
}

extern iccMax2c__signature_adt_t iccMax2c__subelemsig0(uint32_t ivar_1){
        iccMax2c__signature_adt_t  result;
        result = (iccMax2c__signature_adt_t)iccMax2c__undefined();
        if (result != NULL) result->count++;

        
        return result;
}

extern iccMax2c__result_adt_t iccMax2c__test1(void){
        iccMax2c__result_adt_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    uint64_t ivar_10;
        ivar_10 = (uint64_t)65535;
        bytestrings__bytestring_t ivar_11;
        ivar_11 = (bytestrings__bytestring_t)iccMax2c__iccteststring1();
        if (ivar_11 != NULL) ivar_11->count++;
        iccMax2c__signatureMap_t ivar_12;
        iccMax2c_closure_41_t cl33352;
        cl33352 = new_iccMax2c_closure_41();
        ivar_12 = (iccMax2c__signatureMap_t)cl33352;
        iccMax2c_record_35_t ivar_13;
        uint32_t ivar_7;
        bytestrings__bytestring_t ivar_6;
        ivar_6 = (bytestrings__bytestring_t)iccMax2c__iccteststring1();
        if (ivar_6 != NULL) ivar_6->count++;
        ivar_7 = (uint32_t)ivar_6->length;
        release_bytestrings__bytestring(ivar_6);
        uint8_t ivar_8;
        ivar_8 = (uint8_t)0;
        ivar_13 = (iccMax2c_record_35_t)new_iccMax2c_record_42();;
        ivar_13->endpos = (uint32_t)ivar_7;
        ivar_13->startpos = (uint32_t)ivar_8;
        iccMax2c__result_adt_t ivar_9;
        ivar_9 = (iccMax2c__result_adt_t)iccMax2c__parsefunc((uint64_t)ivar_10, (bytestrings__bytestring_t)ivar_11, (iccMax2c__signatureMap_t)ivar_12, (iccMax2c_record_35_t)ivar_13);
        //copying to iccMax2c__result_adt from iccMax2c__result_adt;
        result = (iccMax2c__result_adt_t)ivar_9;
        if (result != NULL) result->count++;
        release_iccMax2c__result_adt(ivar_9);

        defined = true;};
        
        return result;
}

extern iccMax2c__result_adt_t iccMax2c__test2(void){
        iccMax2c__result_adt_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    uint64_t ivar_10;
        ivar_10 = (uint64_t)65535;
        bytestrings__bytestring_t ivar_11;
        ivar_11 = (bytestrings__bytestring_t)iccMax2c__iccteststring2();
        if (ivar_11 != NULL) ivar_11->count++;
        iccMax2c__signatureMap_t ivar_12;
        iccMax2c_closure_43_t cl33353;
        cl33353 = new_iccMax2c_closure_43();
        ivar_12 = (iccMax2c__signatureMap_t)cl33353;
        iccMax2c_record_35_t ivar_13;
        uint32_t ivar_7;
        bytestrings__bytestring_t ivar_6;
        ivar_6 = (bytestrings__bytestring_t)iccMax2c__iccteststring2();
        if (ivar_6 != NULL) ivar_6->count++;
        ivar_7 = (uint32_t)ivar_6->length;
        release_bytestrings__bytestring(ivar_6);
        uint8_t ivar_8;
        ivar_8 = (uint8_t)0;
        ivar_13 = (iccMax2c_record_35_t)new_iccMax2c_record_42();;
        ivar_13->endpos = (uint32_t)ivar_7;
        ivar_13->startpos = (uint32_t)ivar_8;
        iccMax2c__result_adt_t ivar_9;
        ivar_9 = (iccMax2c__result_adt_t)iccMax2c__parsefunc((uint64_t)ivar_10, (bytestrings__bytestring_t)ivar_11, (iccMax2c__signatureMap_t)ivar_12, (iccMax2c_record_35_t)ivar_13);
        //copying to iccMax2c__result_adt from iccMax2c__result_adt;
        result = (iccMax2c__result_adt_t)ivar_9;
        if (result != NULL) result->count++;
        release_iccMax2c__result_adt(ivar_9);

        defined = true;};
        
        return result;
}

extern iccMax2c__result_adt_t iccMax2c__test3(void){
        iccMax2c__result_adt_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    uint64_t ivar_10;
        ivar_10 = (uint64_t)65535;
        bytestrings__bytestring_t ivar_11;
        ivar_11 = (bytestrings__bytestring_t)iccMax2c__iccteststring3();
        if (ivar_11 != NULL) ivar_11->count++;
        iccMax2c__signatureMap_t ivar_12;
        iccMax2c_closure_44_t cl33354;
        cl33354 = new_iccMax2c_closure_44();
        ivar_12 = (iccMax2c__signatureMap_t)cl33354;
        iccMax2c_record_35_t ivar_13;
        uint32_t ivar_7;
        bytestrings__bytestring_t ivar_6;
        ivar_6 = (bytestrings__bytestring_t)iccMax2c__iccteststring3();
        if (ivar_6 != NULL) ivar_6->count++;
        ivar_7 = (uint32_t)ivar_6->length;
        release_bytestrings__bytestring(ivar_6);
        uint8_t ivar_8;
        ivar_8 = (uint8_t)0;
        ivar_13 = (iccMax2c_record_35_t)new_iccMax2c_record_42();;
        ivar_13->endpos = (uint32_t)ivar_7;
        ivar_13->startpos = (uint32_t)ivar_8;
        iccMax2c__result_adt_t ivar_9;
        ivar_9 = (iccMax2c__result_adt_t)iccMax2c__parsefunc((uint64_t)ivar_10, (bytestrings__bytestring_t)ivar_11, (iccMax2c__signatureMap_t)ivar_12, (iccMax2c_record_35_t)ivar_13);
        //copying to iccMax2c__result_adt from iccMax2c__result_adt;
        result = (iccMax2c__result_adt_t)ivar_9;
        if (result != NULL) result->count++;
        release_iccMax2c__result_adt(ivar_9);

        defined = true;};
        
        return result;
}

extern iccMax2c__result_adt_t iccMax2c__test4(void){
        iccMax2c__result_adt_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    uint64_t ivar_10;
        ivar_10 = (uint64_t)65535;
        bytestrings__bytestring_t ivar_11;
        ivar_11 = (bytestrings__bytestring_t)iccMax2c__iccteststring4();
        if (ivar_11 != NULL) ivar_11->count++;
        iccMax2c__signatureMap_t ivar_12;
        iccMax2c_closure_45_t cl33355;
        cl33355 = new_iccMax2c_closure_45();
        ivar_12 = (iccMax2c__signatureMap_t)cl33355;
        iccMax2c_record_35_t ivar_13;
        uint32_t ivar_7;
        bytestrings__bytestring_t ivar_6;
        ivar_6 = (bytestrings__bytestring_t)iccMax2c__iccteststring4();
        if (ivar_6 != NULL) ivar_6->count++;
        ivar_7 = (uint32_t)ivar_6->length;
        release_bytestrings__bytestring(ivar_6);
        uint8_t ivar_8;
        ivar_8 = (uint8_t)0;
        ivar_13 = (iccMax2c_record_35_t)new_iccMax2c_record_42();;
        ivar_13->endpos = (uint32_t)ivar_7;
        ivar_13->startpos = (uint32_t)ivar_8;
        iccMax2c__result_adt_t ivar_9;
        ivar_9 = (iccMax2c__result_adt_t)iccMax2c__parsefunc((uint64_t)ivar_10, (bytestrings__bytestring_t)ivar_11, (iccMax2c__signatureMap_t)ivar_12, (iccMax2c_record_35_t)ivar_13);
        //copying to iccMax2c__result_adt from iccMax2c__result_adt;
        result = (iccMax2c__result_adt_t)ivar_9;
        if (result != NULL) result->count++;
        release_iccMax2c__result_adt(ivar_9);

        defined = true;};
        
        return result;
}

extern iccMax2c__signature_adt_t iccMax2c__parsecalc(uint64_t ivar_1, bytestrings__bytestring_t ivar_2, iccMax2c_record_35_t ivar_3){
        iccMax2c__signature_adt_t  result;
        /* endpos */ uint32_t ivar_8;
        iccMax2c_record_40_t ivar_24;
        uint32_t len33401 = 9;
        uint32_t characters33402[9] = {101, 110, 100, 112, 111, 115, 32, 61, 32};
        stringliteral_t string33400 = mk_string(9, characters33402);
        ivar_24 = (iccMax2c_record_40_t)strings__make_string(len33401, string33400);
        strings__string_t ivar_21;
        //copying to strings__string from iccMax2c_record_40;
        ivar_21 = (strings__string_t)ivar_24;
        if (ivar_21 != NULL) ivar_21->count++;
        release_iccMax2c_record_40(ivar_24);
        uint32_t ivar_22;
        ivar_22 = (uint32_t)ivar_3->endpos;
        ivar_8 = (uint32_t)iccMax2c__print32((strings__string_t)ivar_21, (uint32_t)ivar_22);
        /* startpos */ uint32_t ivar_25;
        iccMax2c_record_40_t ivar_46;
        uint32_t len33404 = 11;
        uint32_t characters33405[11] = {115, 116, 97, 114, 116, 112, 111, 115, 32, 61, 32};
        stringliteral_t string33403 = mk_string(11, characters33405);
        ivar_46 = (iccMax2c_record_40_t)strings__make_string(len33404, string33403);
        strings__string_t ivar_43;
        //copying to strings__string from iccMax2c_record_40;
        ivar_43 = (strings__string_t)ivar_46;
        if (ivar_43 != NULL) ivar_43->count++;
        release_iccMax2c_record_40(ivar_46);
        uint32_t ivar_44;
        ivar_44 = (uint32_t)ivar_3->startpos;
        ivar_25 = (uint32_t)iccMax2c__print32((strings__string_t)ivar_43, (uint32_t)ivar_44);
        bool_t ivar_47;
        uint64_t ivar_49;
        uint8_t ivar_51;
        ivar_51 = (uint8_t)24;
        ivar_49 = (uint64_t)(ivar_25 + ivar_51);
        ivar_47 = (ivar_8 <= ivar_49);
        if (ivar_47){ 
             release_bytestrings__bytestring(ivar_2);
             release_iccMax2c_record_35(ivar_3);
             result = (iccMax2c__signature_adt_t)iccMax2c__undefined();
             if (result != NULL) result->count++;
} else {
        
             /* tag */ uint32_t ivar_55;
             iccMax2c_record_40_t ivar_70;
             uint32_t len33407 = 6;
             uint32_t characters33408[6] = {116, 97, 103, 32, 61, 32};
             stringliteral_t string33406 = mk_string(6, characters33408);
             ivar_70 = (iccMax2c_record_40_t)strings__make_string(len33407, string33406);
             strings__string_t ivar_67;
             //copying to strings__string from iccMax2c_record_40;
             ivar_67 = (strings__string_t)ivar_70;
             if (ivar_67 != NULL) ivar_67->count++;
             release_iccMax2c_record_40(ivar_70);
             uint32_t ivar_68;
             ivar_2->count++;
             ivar_68 = (uint32_t)iccMax2c__readU32((bytestrings__bytestring_t)ivar_2, (uint32_t)ivar_25);
             ivar_55 = (uint32_t)iccMax2c__print32((strings__string_t)ivar_67, (uint32_t)ivar_68);
             /* P */ uint16_t ivar_90;
             iccMax2c_record_40_t ivar_108;
             uint32_t len33410 = 21;
             uint32_t characters33411[21] = {110, 117, 109, 32, 105, 110, 112, 117, 116, 32, 99, 104, 97, 110, 110, 101, 108, 115, 32, 61, 32};
             stringliteral_t string33409 = mk_string(21, characters33411);
             ivar_108 = (iccMax2c_record_40_t)strings__make_string(len33410, string33409);
             strings__string_t ivar_105;
             //copying to strings__string from iccMax2c_record_40;
             ivar_105 = (strings__string_t)ivar_108;
             if (ivar_105 != NULL) ivar_105->count++;
             release_iccMax2c_record_40(ivar_108);
             uint16_t ivar_106;
             uint32_t ivar_100;
             uint8_t ivar_96;
             ivar_96 = (uint8_t)8;
             ivar_100 = (uint32_t)(ivar_25 + ivar_96);
             ivar_2->count++;
             ivar_106 = (uint16_t)iccMax2c__readU16((bytestrings__bytestring_t)ivar_2, (uint32_t)ivar_100);
             ivar_90 = (uint16_t)iccMax2c__print16((strings__string_t)ivar_105, (uint16_t)ivar_106);
             /* Q */ uint16_t ivar_109;
             iccMax2c_record_40_t ivar_127;
             uint32_t len33413 = 22;
             uint32_t characters33414[22] = {110, 117, 109, 32, 111, 117, 116, 112, 117, 116, 32, 99, 104, 97, 110, 110, 101, 108, 115, 32, 61, 32};
             stringliteral_t string33412 = mk_string(22, characters33414);
             ivar_127 = (iccMax2c_record_40_t)strings__make_string(len33413, string33412);
             strings__string_t ivar_124;
             //copying to strings__string from iccMax2c_record_40;
             ivar_124 = (strings__string_t)ivar_127;
             if (ivar_124 != NULL) ivar_124->count++;
             release_iccMax2c_record_40(ivar_127);
             uint16_t ivar_125;
             uint32_t ivar_119;
             uint8_t ivar_115;
             ivar_115 = (uint8_t)10;
             ivar_119 = (uint32_t)(ivar_25 + ivar_115);
             ivar_2->count++;
             ivar_125 = (uint16_t)iccMax2c__readU16((bytestrings__bytestring_t)ivar_2, (uint32_t)ivar_119);
             ivar_109 = (uint16_t)iccMax2c__print16((strings__string_t)ivar_124, (uint16_t)ivar_125);
             /* E */ uint32_t ivar_128;
             iccMax2c_record_40_t ivar_146;
             uint32_t len33416 = 4;
             uint32_t characters33417[4] = {69, 32, 61, 32};
             stringliteral_t string33415 = mk_string(4, characters33417);
             ivar_146 = (iccMax2c_record_40_t)strings__make_string(len33416, string33415);
             strings__string_t ivar_143;
             //copying to strings__string from iccMax2c_record_40;
             ivar_143 = (strings__string_t)ivar_146;
             if (ivar_143 != NULL) ivar_143->count++;
             release_iccMax2c_record_40(ivar_146);
             uint32_t ivar_144;
             uint32_t ivar_138;
             uint8_t ivar_134;
             ivar_134 = (uint8_t)12;
             ivar_138 = (uint32_t)(ivar_25 + ivar_134);
             ivar_2->count++;
             ivar_144 = (uint32_t)iccMax2c__readU32((bytestrings__bytestring_t)ivar_2, (uint32_t)ivar_138);
             ivar_128 = (uint32_t)iccMax2c__print32((strings__string_t)ivar_143, (uint32_t)ivar_144);
             /* M */ uint64_t ivar_147;
             iccMax2c_record_40_t ivar_165;
             uint32_t len33419 = 4;
             uint32_t characters33420[4] = {77, 32, 61, 32};
             stringliteral_t string33418 = mk_string(4, characters33420);
             ivar_165 = (iccMax2c_record_40_t)strings__make_string(len33419, string33418);
             strings__string_t ivar_162;
             //copying to strings__string from iccMax2c_record_40;
             ivar_162 = (strings__string_t)ivar_165;
             if (ivar_162 != NULL) ivar_162->count++;
             release_iccMax2c_record_40(ivar_165);
             uint64_t ivar_163;
             uint32_t ivar_157;
             uint8_t ivar_153;
             ivar_153 = (uint8_t)16;
             ivar_157 = (uint32_t)(ivar_25 + ivar_153);
             ivar_2->count++;
             ivar_163 = (uint64_t)iccMax2c__readU64((bytestrings__bytestring_t)ivar_2, (uint32_t)ivar_157);
             ivar_147 = (uint64_t)iccMax2c__print64((strings__string_t)ivar_162, (uint64_t)ivar_163);
             bool_t ivar_166;
             uint32_t ivar_168;
             ivar_168 = (uint32_t)iccMax2c__calcTag();
             ivar_166 = (ivar_55 == ivar_168);
             if (ivar_166){  
           bool_t ivar_170;
           uint32_t ivar_171;
           uint32_t ivar_182;
           int64_t ivar_175;
           ivar_175 = (int64_t)((uint64_t)ivar_8 - (uint64_t)ivar_25);
           uint8_t ivar_176;
           ivar_176 = (uint8_t)16;
           ivar_182 = (uint32_t)((int64_t)ivar_175 - (uint64_t)ivar_176);
           uint32_t ivar_183;
           ivar_183 = (uint32_t)8;
           ivar_171 = (uint32_t)integertypes__u32div((uint32_t)ivar_182, (uint32_t)ivar_183);
           ivar_170 = (ivar_171 < ivar_128);
           if (ivar_170){   
           release_bytestrings__bytestring(ivar_2);
           release_iccMax2c_record_35(ivar_3);
           result = (iccMax2c__signature_adt_t)iccMax2c__undefined();
           if (result != NULL) result->count++;
} else {
           
           iccMax2c_funtype_46_t ivar_300;
           iccMax2c_closure_47_t cl33421;
           cl33421 = new_iccMax2c_closure_47();
           cl33421->fvar_1 = (uint32_t)ivar_25;
           cl33421->fvar_2 = (bytestrings__bytestring_t)ivar_2;
           if (cl33421->fvar_2 != NULL) cl33421->fvar_2->count++;
           ivar_300 = (iccMax2c_funtype_46_t)cl33421;
           /* subelementpositions */ iccMax2c_array_48_t ivar_185;
           //copying to iccMax2c_array_48 from iccMax2c_funtype_46;
           uint32_t tmp33422;
           //copying to uint32 from uint32;
           tmp33422 = (uint32_t)ivar_128;
           tmp33422 += 0;
           ivar_185 = new_iccMax2c_array_48(tmp33422);
           for (uint32_t index_1 = 0; index_1 < tmp33422; index_1++){
            ivar_185->elems[index_1] = (uint64_t)ivar_300->ftbl->fptr(ivar_300, index_1);
           };
           release_iccMax2c_funtype_46(ivar_300);
           /* subelemsig */ iccMax2c__signatureMap_t ivar_202;
           iccMax2c_closure_49_t cl33423;
           cl33423 = new_iccMax2c_closure_49();
           cl33423->fvar_1 = (iccMax2c_array_48_t)ivar_185;
           if (cl33423->fvar_1 != NULL) cl33423->fvar_1->count++;
           cl33423->fvar_2 = (uint32_t)ivar_25;
           cl33423->fvar_3 = (uint32_t)ivar_8;
           cl33423->fvar_4 = (uint32_t)ivar_128;
           cl33423->fvar_5 = (bytestrings__bytestring_t)ivar_2;
           if (cl33423->fvar_5 != NULL) cl33423->fvar_5->count++;
           cl33423->fvar_6 = (uint64_t)ivar_1;
           cl33423->fvar_7 = (iccMax2c_record_35_t)ivar_3;
           if (cl33423->fvar_7 != NULL) cl33423->fvar_7->count++;
           release_iccMax2c_array_48(ivar_185);
           ivar_202 = (iccMax2c__signatureMap_t)cl33423;
           bool_t ivar_259;
           ivar_259 = (ivar_147 > ivar_25);
           if (ivar_259){    
            bool_t ivar_263;
            ivar_263 = (ivar_147 > ivar_8);
            if (ivar_263){     
             release_bytestrings__bytestring(ivar_2);
             release_iccMax2c__signatureMap(ivar_202);
             release_iccMax2c_record_35(ivar_3);
             result = (iccMax2c__signature_adt_t)iccMax2c__undefined();
             if (result != NULL) result->count++;
} else {
            
             /* result */ iccMax2c__result_adt_t ivar_267;
             iccMax2c_record_35_t ivar_290;
             iccMax2c_record_35_t ivar_281;
             ivar_281 = (iccMax2c_record_35_t)update_iccMax2c_record_35_startpos(ivar_3, ivar_147);
             //copying to iccMax2c_record_35 from iccMax2c_record_35;
             ivar_290 = (iccMax2c_record_35_t)ivar_281;
             if (ivar_290 != NULL) ivar_290->count++;
             release_iccMax2c_record_35(ivar_281);
             iccMax2c__result_adt_t ivar_286;
             ivar_286 = (iccMax2c__result_adt_t)iccMax2c__parsefunc((uint64_t)ivar_1, (bytestrings__bytestring_t)ivar_2, (iccMax2c__signatureMap_t)ivar_202, (iccMax2c_record_35_t)ivar_290);
             //copying to iccMax2c__result_adt from iccMax2c__result_adt;
             ivar_267 = (iccMax2c__result_adt_t)ivar_286;
             if (ivar_267 != NULL) ivar_267->count++;
             release_iccMax2c__result_adt(ivar_286);
             bool_t ivar_291;
             ivar_291 = (bool_t)r_iccMax2c__errorp((iccMax2c__result_adt_t)ivar_267);
             if (ivar_291){      
              result = (iccMax2c__signature_adt_t)iccMax2c__undefined();
              if (result != NULL) result->count++;
} else {
             
              iccMax2c__signature_adt_t ivar_297;
              ivar_297 = (iccMax2c__signature_adt_t)iccMax2c__inout((uint64_t)ivar_90, (uint64_t)ivar_109);
              //copying to iccMax2c__signature_adt from iccMax2c__signature_adt;
              result = (iccMax2c__signature_adt_t)ivar_297;
              if (result != NULL) result->count++;
              release_iccMax2c__signature_adt(ivar_297);
};
};
} else {
           
            release_bytestrings__bytestring(ivar_2);
            release_iccMax2c__signatureMap(ivar_202);
            release_iccMax2c_record_35(ivar_3);
            result = (iccMax2c__signature_adt_t)iccMax2c__undefined();
            if (result != NULL) result->count++;
};
};
} else {
             
           release_bytestrings__bytestring(ivar_2);
           release_iccMax2c_record_35(ivar_3);
           result = (iccMax2c__signature_adt_t)iccMax2c__undefined();
           if (result != NULL) result->count++;
};
};

        
        return result;
}

extern bytestrings__bytestring_t iccMax2c__iccteststring5(void){
        bytestrings__bytestring_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    bytestrings__bytestring_t ivar_11;
        iccMax2c_record_40_t ivar_9;
        uint32_t len33426 = 168;
        uint32_t characters33427[168] = {54, 51, 54, 49, 54, 67, 54, 51, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 51, 48, 48, 48, 51, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 56, 54, 54, 55, 53, 54, 101, 54, 51, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 54, 54, 57, 54, 101, 50, 48, 50, 48, 48, 48, 48, 48, 48, 48, 48, 50, 54, 52, 54, 49, 55, 52, 54, 49, 51, 102, 56, 48, 48, 48, 48, 48, 54, 52, 54, 49, 55, 52, 54, 49, 51, 102, 56, 48, 48, 48, 48, 48, 54, 52, 54, 49, 55, 52, 54, 49, 51, 102, 56, 48, 48, 48, 48, 48, 54, 49, 54, 52, 54, 52, 50, 48, 48, 48, 48, 50, 48, 48, 48, 48, 54, 102, 55, 53, 55, 52, 50, 48, 48, 48, 48, 48, 48, 48, 48, 50};
        stringliteral_t string33425 = mk_string(168, characters33427);
        ivar_9 = (iccMax2c_record_40_t)strings__make_string(len33426, string33425);
        strings__string_t ivar_7;
        //copying to strings__string from iccMax2c_record_40;
        ivar_7 = (strings__string_t)ivar_9;
        if (ivar_7 != NULL) ivar_7->count++;
        release_iccMax2c_record_40(ivar_9);
        bytestrings__bytestring_t ivar_6;
        ivar_6 = (bytestrings__bytestring_t)bytestrings__mk_bytestring((strings__string_t)ivar_7);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        ivar_11 = (bytestrings__bytestring_t)ivar_6;
        if (ivar_11 != NULL) ivar_11->count++;
        release_bytestrings__bytestring(ivar_6);
        bytestrings__bytestring_t ivar_10;
        ivar_10 = (bytestrings__bytestring_t)hex__hex2bytestring((bytestrings__bytestring_t)ivar_11);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        result = (bytestrings__bytestring_t)ivar_10;
        if (result != NULL) result->count++;
        release_bytestrings__bytestring(ivar_10);

        defined = true;};
        
        return result;
}

extern iccMax2c__signature_adt_t iccMax2c__test5(void){
        iccMax2c__signature_adt_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    uint64_t ivar_8;
        ivar_8 = (uint64_t)65535;
        bytestrings__bytestring_t ivar_9;
        ivar_9 = (bytestrings__bytestring_t)iccMax2c__iccteststring5();
        if (ivar_9 != NULL) ivar_9->count++;
        iccMax2c_record_35_t ivar_10;
        uint32_t ivar_5;
        bytestrings__bytestring_t ivar_4;
        ivar_4 = (bytestrings__bytestring_t)iccMax2c__iccteststring5();
        if (ivar_4 != NULL) ivar_4->count++;
        ivar_5 = (uint32_t)ivar_4->length;
        release_bytestrings__bytestring(ivar_4);
        uint8_t ivar_6;
        ivar_6 = (uint8_t)0;
        ivar_10 = (iccMax2c_record_35_t)new_iccMax2c_record_42();;
        ivar_10->endpos = (uint32_t)ivar_5;
        ivar_10->startpos = (uint32_t)ivar_6;
        iccMax2c__signature_adt_t ivar_7;
        ivar_7 = (iccMax2c__signature_adt_t)iccMax2c__parsecalc((uint64_t)ivar_8, (bytestrings__bytestring_t)ivar_9, (iccMax2c_record_35_t)ivar_10);
        //copying to iccMax2c__signature_adt from iccMax2c__signature_adt;
        result = (iccMax2c__signature_adt_t)ivar_7;
        if (result != NULL) result->count++;
        release_iccMax2c__signature_adt(ivar_7);

        defined = true;};
        
        return result;
}