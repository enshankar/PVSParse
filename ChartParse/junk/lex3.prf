(lex3
 (lex3_TCC1 0
  (lex3_TCC1-1 nil 3768751962 ("" (subtype-tcc) nil nil) nil nil
   (lex3 subtype "lex3.m" "posnat")))
 (lex3_TCC2 0
  (lex3_TCC2-1 nil 3768751962
   ("" (skeep) (("" (expand "ordinal?") (("" (grind) nil nil)) nil))
    nil)
   nil nil
   (lex3 subtype
    "ordstruct_adt.add(lex3.m, ordstruct_adt.add(2, ordstruct_adt.add(2, ordstruct_adt.zero, ordstruct_adt.zero), ordstruct_adt.zero), lex2.lex2(lex3.n, lex3.p))"
    "ordinal")))
 (lex3_lt 0
  (lex3_lt-1 nil 3768752051
   ("" (grind-with-ext)
    (("1" (decompose-equality) nil nil)
     ("2" (decompose-equality) nil nil)
     ("3" (decompose-equality) nil nil)
     ("4" (decompose-equality) nil nil)
     ("5" (decompose-equality) nil nil)
     ("6" (decompose-equality) nil nil)
     ("7" (decompose-equality) nil nil)
     ("8" (decompose-equality) nil nil)
     ("9" (decompose-equality) nil nil)
     ("10" (decompose-equality) nil nil)
     ("11" (decompose-equality) nil nil))
    nil)
   ((rest adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
          nil)
    (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
         nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (add adt-constructor-decl
     "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt
     nil)
    (coef adt-accessor-decl "[(nonzero?) -> posnat]" ordstruct_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< def-decl "bool" ordinals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (lex3 const-decl "ordinal" lex3 nil)
    (lex2 const-decl "ordinal" lex2 nil))
   shostak)))

