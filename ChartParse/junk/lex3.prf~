(lex3
 (lex3_TCC1 0
  (lex3_TCC1-1 nil 3768751962 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (lex3 subtype "lex3.m" "posnat")))
 (lex3_TCC2 0
  (lex3_TCC2-1 nil 3768751962
   ("" (skeep) (("" (expand "ordinal?") (("" (grind) nil nil)) nil))
    nil)
   ((< def-decl "bool" ordinals nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (ordinal? def-decl "bool" ordinals nil))
   nil
   (lex3 subtype
    "ordstruct_adt.add(lex3.m, ordstruct_adt.add(2, ordstruct_adt.add(2, ordstruct_adt.zero, ordstruct_adt.zero), ordstruct_adt.zero), lex2.lex2(lex3.n, lex3.p))"
    "ordinal")))
 (wtf? 0
  (wtf?-1 nil 3768765387 ("" (decompose-equality) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (coef adt-accessor-decl "[(nonzero?) -> posnat]" ordstruct_adt nil)
    (add adt-constructor-decl
     "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt
     nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
         nil)
    (rest adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
          nil))
   shostak))
 (lex3_lt 0
  (lex3_lt-1 nil 3768752051
   ("" (skeep)
    (("" (grind-with-ext)
      (("1" (name "A" "add(1, zero, zero)")
        (("1" (name "B" "add(2, add(2, zero, zero), zero)")
          (("1" (replace -1 * LR)
            (("1" (replace -2 * LR)
              (("1" (case "1 = 2")
                (("1" (assert) nil nil)
                 ("2" (hide 2 3 4 5 6)
                  (("2" (hide -7 -5 -4 -3)
                    (("2" (case "coef(A) = 1")
                      (("1" (case "coef(B) = 2")
                        (("1" (replace -5 -1 LR)
                          (("1" (assert) nil nil)) nil)
                         ("2" (grind)
                          (("2" (replace -2 1 RL)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (replace -2 1 RL) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "wtf?") (("2" (propax) nil nil)) nil)
       ("3" (lemma "wtf?") (("3" (propax) nil nil)) nil)
       ("4" (lemma "wtf?") (("4" (propax) nil nil)) nil)
       ("5" (lemma "wtf?") (("5" (propax) nil nil)) nil)
       ("6" (lemma "wtf?") (("6" (propax) nil nil)) nil)
       ("7" (lemma "wtf?") (("7" (propax) nil nil)) nil)
       ("8" (lemma "wtf?") (("8" (propax) nil nil)) nil))
      nil))
    nil)
   ((wtf? formula-decl nil lex3 nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (add adt-constructor-decl
     "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt
     nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (coef adt-accessor-decl "[(nonzero?) -> posnat]" ordstruct_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lex3 const-decl "ordinal" lex3 nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (< def-decl "bool" ordinals nil))
   shostak)))

