(lex4
 (lex4_TCC1 0
  (lex4_TCC1-1 nil 3768930415 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (lex4 subtype "lex4.m" "posnat")))
 (lex4_TCC2 0
  (lex4_TCC2-1 nil 3768930415
   ("" (skeep)
    (("" (expand "lex3")
      (("" (lift-if)
        (("" (split)
          (("1" (flatten) (("1" (grind) nil nil)) nil)
           ("2" (flatten) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((lex3 const-decl "ordinal" lex3 nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (lex4 subtype
    "ordstruct_adt.add(lex4.m, ordstruct_adt.add(3, ordstruct_adt.add(2, ordstruct_adt.add(1, ordstruct_adt.zero, ordstruct_adt.zero), ordstruct_adt.zero), ordstruct_adt.zero), lex3.lex3(lex4.n, lex4.p, lex4.q))"
    "ordinal")))
 (lex4_lt 0
  (lex4_lt-1 nil 3768930553
   ("" (grind)
    (("1" (decompose-equality -) nil nil)
     ("2" (decompose-equality -) nil nil)
     ("3" (decompose-equality -) nil nil)
     ("4" (decompose-equality -) nil nil)
     ("5" (decompose-equality -) nil nil)
     ("6" (decompose-equality -) nil nil)
     ("7" (decompose-equality -) nil nil)
     ("8" (decompose-equality -) nil nil)
     ("9" (decompose-equality -) nil nil)
     ("10" (decompose-equality -) nil nil)
     ("11" (decompose-equality -) nil nil)
     ("12" (decompose-equality -) nil nil)
     ("13" (decompose-equality -) nil nil)
     ("14" (decompose-equality -) nil nil)
     ("15" (decompose-equality -) nil nil)
     ("16" (decompose-equality -) nil nil)
     ("17" (decompose-equality -) nil nil)
     ("18" (decompose-equality -) nil nil)
     ("19" (decompose-equality -) nil nil)
     ("20" (decompose-equality -) nil nil)
     ("21" (decompose-equality -) nil nil)
     ("22" (decompose-equality -) nil nil)
     ("23" (decompose-equality -) nil nil)
     ("24" (decompose-equality -) nil nil)
     ("25" (decompose-equality -) nil nil)
     ("26" (decompose-equality -) nil nil)
     ("27" (decompose-equality -) nil nil)
     ("28" (decompose-equality -) nil nil)
     ("29" (decompose-equality -) nil nil)
     ("30" (decompose-equality -) nil nil)
     ("31" (decompose-equality -) nil nil)
     ("32" (decompose-equality -) nil nil)
     ("33" (decompose-equality -) nil nil)
     ("34" (decompose-equality -) nil nil)
     ("35" (decompose-equality -) nil nil)
     ("36" (decompose-equality -) nil nil)
     ("37" (decompose-equality -) nil nil)
     ("38" (decompose-equality -) nil nil)
     ("39" (decompose-equality -) nil nil)
     ("40" (decompose-equality -) nil nil)
     ("41" (decompose-equality -) nil nil)
     ("42" (decompose-equality -) nil nil)
     ("43" (decompose-equality -) nil nil)
     ("44" (decompose-equality -) nil nil)
     ("45" (decompose-equality -) nil nil)
     ("46" (decompose-equality -) nil nil)
     ("47" (decompose-equality -) nil nil)
     ("48" (decompose-equality -) nil nil)
     ("49" (decompose-equality -) nil nil)
     ("50" (decompose-equality -) nil nil)
     ("51" (decompose-equality -) nil nil)
     ("52" (decompose-equality -) nil nil)
     ("53" (decompose-equality -) nil nil)
     ("54" (decompose-equality -) nil nil)
     ("55" (decompose-equality -) nil nil)
     ("56" (decompose-equality -) nil nil)
     ("57" (decompose-equality -) nil nil)
     ("58" (decompose-equality -) nil nil)
     ("59" (decompose-equality -) nil nil)
     ("60" (decompose-equality -) nil nil)
     ("61" (decompose-equality -) nil nil)
     ("62" (decompose-equality -) nil nil)
     ("63" (decompose-equality -) nil nil)
     ("64" (decompose-equality -) nil nil)
     ("65" (decompose-equality -) nil nil)
     ("66" (decompose-equality -) nil nil)
     ("67" (decompose-equality -) nil nil)
     ("68" (decompose-equality -) nil nil)
     ("69" (decompose-equality -) nil nil)
     ("70" (decompose-equality -) nil nil)
     ("71" (decompose-equality -) nil nil)
     ("72" (decompose-equality -) nil nil)
     ("73" (decompose-equality -) nil nil)
     ("74" (decompose-equality -) nil nil)
     ("75" (decompose-equality -) nil nil)
     ("76" (decompose-equality -) nil nil)
     ("77" (decompose-equality -) nil nil)
     ("78" (decompose-equality -) nil nil)
     ("79" (decompose-equality -) nil nil)
     ("80" (decompose-equality -) nil nil)
     ("81" (decompose-equality -) nil nil)
     ("82" (decompose-equality -) nil nil)
     ("83" (decompose-equality -) nil nil)
     ("84" (decompose-equality -) nil nil))
    nil)
   ((rest adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
          nil)
    (exp adt-accessor-decl "[(nonzero?) -> ordstruct]" ordstruct_adt
         nil)
    (zero adt-constructor-decl "(zero?)" ordstruct_adt nil)
    (zero? adt-recognizer-decl "[ordstruct -> boolean]" ordstruct_adt
     nil)
    (add adt-constructor-decl
     "[[posnat, ordstruct, ordstruct] -> (nonzero?)]" ordstruct_adt
     nil)
    (coef adt-accessor-decl "[(nonzero?) -> posnat]" ordstruct_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonzero? adt-recognizer-decl "[ordstruct -> boolean]"
     ordstruct_adt nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< def-decl "bool" ordinals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (lex4 const-decl "ordinal" lex4 nil)
    (lex3 const-decl "ordinal" lex3 nil)
    (lex2 const-decl "ordinal" lex2 nil))
   shostak)))

