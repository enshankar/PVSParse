(sigmatd
 (subtype_TCC1 0
  (subtype_TCC1-1 nil 3897229421 ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (subtype_ subtype "sigmatd.x" "uint32")))
 (subtype_TCC2 0
  (subtype_TCC2-1 nil 3897229421 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (subtype_ subtype "sigmatd.x" "uint8")))
 (fine_push_entry?_TCC1 0
  (fine_push_entry?_TCC1-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (fine_push_entry? subtype "sigmatd.x" "(sigmatd.push?)")))
 (successor_TCC1 0
  (successor_TCC1-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (successor subtype "sigmatd.entry1" "(sigmatd.push?)")))
 (successor_TCC2 0
  (successor_TCC2-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (uint8 type-eq-decl nil integertypes nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (successor subtype "sigmatd.entry2" "(sigmatd.push?)")))
 (successor_TCC3 0
  (successor_TCC3-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (uint8 type-eq-decl nil integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (successor subtype "sigmatd.nt1" "non_terminal")))
 (successor_TCC4 0
  (successor_TCC4-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (uint8 type-eq-decl nil integertypes nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (successor subtype "sigmatd.p1"
    "naturalnumbers.upto(sigmatd.len)")))
 (sigma_TCC1 0
  (sigma_TCC1-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (sigma subtype "0" "naturalnumbers.upto(sigmatd.max)")))
 (sigma_TCC2 0
  (sigma_TCC2-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (sigma subtype "(number_fields.-)(sigmatd.j, 1)"
          "naturalnumbers.upto(sigmatd.max)")))
 (sigma_TCC3 0
  (sigma_TCC3-1 nil 3897229421 ("" (termination-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (sigma termination
          "sigmatd.sigma(sigmatd.max, sigmatd.A)((number_fields.-)(sigmatd.j, 1))"
          "nil")))
 (sigma_dec_TCC1 0
  (sigma_dec_TCC1-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (sigma_dec subtype "(number_fields.-)(sigmatd.F(sigmatd.i), 1)"
    "nat")))
 (scafcount_TCC1 0
  (scafcount_TCC1-1 nil 3897229421 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (num_non_terminals const-decl "byte" sigmatd nil))
   nil (scafcount subtype "sigmatd.num_non_terminals" "index")))
 (scafcount_TCC2 0
  (scafcount_TCC2-1 nil 3897229421
   ("" (skolem + (len A P "_"))
    ((""
      (case "FORALL ((j: upto(len))):
                                    sigma(len,
                                         LAMBDA (i: upto(len)): count[ent](num_non_terminals)(P)(A(i)))(j)
                                     <= (j + 1) * num_non_terminals")
      (("1" (skeep)
        (("1" (case "(j + 1) * num_non_terminals <= exp2(64) - 1")
          (("1" (assert) (("1" (inst?) (("1" (assert) nil nil)) nil))
            nil)
           ("2" (hide -1 2)
            (("2"
              (use le_times_le_pos :subst
                   (nnx "j + 1" y "exp2(32)" nnz num_non_terminals w
                    "exp2(8)"))
              (("2" (ground)
                (("1" (rewrite exp2_sum :dir RL)
                  (("1" (grind) nil nil)) nil)
                 ("2" (typepred "num_non_terminals")
                  (("2" (typepred j)
                    (("2" (typepred len) (("2" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (induct j)
          (("1" (expand "sigma") (("1" (assert) nil nil)) nil)
           ("2" (skeep*)
            (("2" (expand "sigma" +) (("2" (assert) nil nil)) nil))
            nil)
           ("3" (hide 2) (("3" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (hide 2) (("3" (grind) nil nil)) nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (ent type-decl nil sigmatd nil)
    (sigma def-decl "nat" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (exp2_sum formula-decl nil exp2 nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pred type-eq-decl nil defined_types nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (scafcount subtype
    "sigmatd.sigma(sigmatd.len, LAMBDA (i: naturalnumbers.upto(sigmatd.len)): arrayCount[sigmatd.ent].count(sigmatd.num_non_terminals)(sigmatd.P)(sigmatd.A(i)))(sigmatd.j)"
    "uint64")))
 (scafcount0_TCC1 0
  (scafcount0_TCC1-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (scafcount0 subtype "0" "naturalnumbers.upto(sigmatd.len)")))
 (scafcount_step_TCC1 0
  (scafcount_step_TCC1-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (scafcount_step subtype "(number_fields.+)(sigmatd.j, 1)"
    "naturalnumbers.upto(sigmatd.len)")))
 (scafcount_step_TCC2 0
  (scafcount_step_TCC2-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (scafcount_step subtype "sigmatd.j"
    "naturalnumbers.upto(sigmatd.len)")))
 (pushcount_TCC1 0
  (pushcount_TCC1-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (pushcount subtype "sigmatd.len"
    "naturalnumbers.upto(sigmatd.len)")))
 (good_stack?_TCC1 0
  (good_stack?_TCC1-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (good_stack? subtype "sigmatd.stack" "(sigmatd.push?)")))
 (good_stack?_TCC2 0
  (good_stack?_TCC2-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (good_stack? subtype "sigmatd.entry" "(sigmatd.push?)")))
 (good_stack?_TCC3 0
  (good_stack?_TCC3-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_stack? subtype "(number_fields.-)(sigmatd.depth, 1)"
    "uint64")))
 (good_stack?_TCC4 0
  (good_stack?_TCC4-1 nil 3897229421 ("" (termination-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (good_stack? termination
    "sigmatd.good_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.A)"
    "nil")))
 (good_stack?_TCC5 0
  (good_stack?_TCC5-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_stack? subtype "sigmatd.nt(sigmatd.stack)" "non_terminal")))
 (good_stack?_TCC6 0
  (good_stack?_TCC6-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_stack? subtype "sigmatd.pos(sigmatd.stack)"
    "naturalnumbers.upto(sigmatd.len)")))
 (mem_stack?_TCC1 0
  (mem_stack?_TCC1-1 nil 3897229421
   ("" (skeep* :preds? t)
    (("" (expand "good_stack?") (("" (ground) nil nil)) nil)) nil)
   ((good_stack? def-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (mem_stack? subtype "(number_fields.-)(sigmatd.depth, 1)"
    "uint64")))
 (mem_stack?_TCC2 0
  (mem_stack?_TCC2-1 nil 3897229421 ("" (termination-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (num_non_terminals const-decl "byte" sigmatd nil))
   nil
   (mem_stack? termination
    "sigmatd.mem_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.A)"
    "nil")))
 (mem_stack?_TCC3 0
  (mem_stack?_TCC3-1 nil 3897229421 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (mem_stack? subtype
    "sigmatd.A(sigmatd.pos(sigmatd.stack))(sigmatd.nt(sigmatd.stack))"
    "(sigmatd.good_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.A))")))
 (mem_stack_push_TCC1 0
  (mem_stack_push_TCC1-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (mem_stack_push subtype "sigmatd.entry" "(sigmatd.push?)")))
 (mem_stack_push_TCC2 0
  (mem_stack_push_TCC2-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (mem_stack_push subtype "(sigmatd.pos(sigmatd.entry))"
    "naturalnumbers.upto(sigmatd.len)")))
 (mem_stack_push_TCC3 0
  (mem_stack_push_TCC3-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (mem_stack_push subtype "sigmatd.nt(sigmatd.entry)"
    "non_terminal")))
 (good_mem_stack_TCC1 0
  (good_mem_stack_TCC1-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_mem_stack subtype "(sigmatd.pos(sigmatd.entry))"
    "naturalnumbers.upto(sigmatd.len)")))
 (good_mem_stack_TCC2 0
  (good_mem_stack_TCC2-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_mem_stack subtype "sigmatd.nt(sigmatd.entry)"
    "non_terminal")))
 (mem_mem_stack_TCC1 0
  (mem_mem_stack_TCC1-1 nil 3897229421
   ("" (skeep*)
    (("" (lemma good_mem_stack)
      (("" (inst?) (("" (ground) nil nil)) nil)) nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (good_mem_stack formula-decl nil sigmatd nil))
   nil
   (mem_mem_stack subtype "sigmatd.stack"
    "(sigmatd.good_stack?(sigmatd.len, sigmatd.G, sigmatd.depth, sigmatd.A WITH [(sigmatd.pos(sigmatd.entry))(sigmatd.nt(sigmatd.entry)) := sigmatd.u]))")))
 (good_mem_stack_push_TCC1 0
  (good_mem_stack_push_TCC1-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_mem_stack_push subtype "sigmatd.push(sigmatd.pos, sigmatd.n)"
    "(sigmatd.good_push_entry?(sigmatd.len))")))
 (good_mem_stack_push_TCC2 0
  (good_mem_stack_push_TCC2-1 nil 3897229421
   ("" (skeep*)
    (("" (use exp2_lt :subst (n 41 m 64)) (("" (grind) nil nil)) nil))
    nil)
   ((exp2_lt formula-decl nil exp2 nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_mem_stack_push subtype "(number_fields.+)(sigmatd.depth, 1)"
    "uint64")))
 (good_mem_stack_push_TCC3 0
  (good_mem_stack_push_TCC3-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_mem_stack_push subtype "sigmatd.stack"
    "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (fine_stack?_TCC1 0
  (fine_stack?_TCC1-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (fine_stack? subtype "sigmatd.stack"
    "(sigmatd.fine_push_entry?(sigmatd.len))")))
 (fine_stack?_TCC2 0
  (fine_stack?_TCC2-1 nil 3897229421
   ("" (skeep*) (("" (typepred stack) (("" (grind) nil nil)) nil)) nil)
   ((good_stack? def-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (fine_stack? subtype "sigmatd.rest"
    "(sigmatd.good_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.A))")))
 (fine_stack?_TCC3 0
  (fine_stack?_TCC3-1 nil 3897229421
   ("" (skeep*)
    (("" (ground) (("" (typepred stack) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (fine_stack? subtype "(number_fields.-)(sigmatd.depth, 1)"
    "uint64")))
 (fine_stack?_TCC4 0
  (fine_stack?_TCC4-1 nil 3897229421
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred "stack") (("1" (grind) nil nil)) nil)
       ("2" (typepred "stack") (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (fine_stack? subtype
    "sigmatd.A(sigmatd.pos(sigmatd.stack))(sigmatd.nt(sigmatd.stack))"
    "(sigmatd.good_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.A))")))
 (fine_stack?_TCC5 0
  (fine_stack?_TCC5-1 nil 3897229421 ("" (termination-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (num_non_terminals const-decl "byte" sigmatd nil))
   nil
   (fine_stack? termination
    "sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.A)"
    "nil")))
 (fine_mem_stack_TCC1 0
  (fine_mem_stack_TCC1-1 nil 3897229421
   ("" (skeep*) (("" (rewrite good_mem_stack) nil nil)) nil)
   ((good_mem_stack formula-decl nil sigmatd nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (fine_mem_stack subtype "sigmatd.stack"
    "(sigmatd.good_stack?(sigmatd.len, sigmatd.G, sigmatd.depth, sigmatd.A WITH [(sigmatd.pos(sigmatd.entry))(sigmatd.nt(sigmatd.entry)) := sigmatd.u]))")))
 (loop_ready?_TCC1 0
  (loop_ready?_TCC1-1 nil 3897229421
   ("" (skeep* :preds? t)
    (("" (typepred "A(i)(n1)") (("" (grind) nil nil)) nil)) nil)
   ((scaffold type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (loop_ready? subtype
    "(number_fields.+)(sigmatd.i, sigmatd.span(sigmatd.A(sigmatd.i)(sigmatd.n1)))"
    "naturalnumbers.upto(sigmatd.len)")))
 (good_fail?_TCC1 0
  (good_fail?_TCC1-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_fail? subtype "sigmatd.i"
    "naturalnumbers.below(sigmatd.len)")))
 (good_fail?_TCC2 0
  (good_fail?_TCC2-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_fail? subtype "sigmatd.i"
    "naturalnumbers.below(sigmatd.len)")))
 (good_fail?_TCC3 0
  (good_fail?_TCC3-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_fail? subtype "sigmatd.A(sigmatd.i)(sigmatd.n1)"
    "{x: sigmatd.ent | booleans.OR(sigmatd.fail?(x), sigmatd.good?(x))}")))
 (good_fail?_TCC4 0
  (good_fail?_TCC4-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_fail? subtype "sigmatd.A(sigmatd.i)(sigmatd.n3)"
    "{x: sigmatd.ent | booleans.OR(sigmatd.fail?(x), sigmatd.good?(x))}")))
 (good_fail?_TCC5 0
  (good_fail?_TCC5-1 nil 3897229421
   ("" (grind)
    (("" (typepred "A!1(i!1)(n1!1)") (("" (grind) nil nil)) nil)) nil)
   ((ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   nil
   (good_fail? subtype
    "(number_fields.+)(sigmatd.i, sigmatd.span(sigmatd.A(sigmatd.i)(sigmatd.n1)))"
    "naturalnumbers.upto(sigmatd.len)")))
 (good_fail?_TCC6 0
  (good_fail?_TCC6-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil))
   nil
   (good_fail? subtype "sigmatd.A(sigmatd.i)(sigmatd.n1)"
    "{x: sigmatd.ent | booleans.OR(sigmatd.fail?(x), sigmatd.good?(x))}")))
 (good_fail?_TCC7 0
  (good_fail?_TCC7-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil))
   nil
   (good_fail? subtype
    "sigmatd.A((number_fields.+)(sigmatd.i, sigmatd.span(sigmatd.A(sigmatd.i)(sigmatd.n1))))(sigmatd.n2)"
    "{x: sigmatd.ent | booleans.OR(sigmatd.fail?(x), sigmatd.good?(x))}")))
 (good_loop?_TCC1 0
  (good_loop?_TCC1-1 nil 3897229421
   ("" (skeep* :preds? t)
    (("" (typepred "A(i)(n1)") (("" (grind) nil nil)) nil)) nil)
   ((scaffold type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_loop? subtype
    "(number_fields.+)(sigmatd.i, sigmatd.span(sigmatd.A(sigmatd.i)(sigmatd.n1)))"
    "naturalnumbers.upto(sigmatd.len)")))
 (good_good?_TCC1 0
  (good_good?_TCC1-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good? subtype "(number_fields.-)(sigmatd.len, sigmatd.i)"
    "nat")))
 (good_good?_TCC2 0
  (good_good?_TCC2-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good? subtype "sigmatd.i"
    "naturalnumbers.below(sigmatd.len)")))
 (good_good?_TCC3 0
  (good_good?_TCC3-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good? subtype "sigmatd.i"
    "naturalnumbers.below(sigmatd.len)")))
 (good_good?_TCC4 0
  (good_good?_TCC4-1 nil 3897229421
   ("" (skeep* :preds? t)
    (("" (typepred "A(i)(n1)") (("" (grind) nil nil)) nil)) nil)
   ((scaffold type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good? subtype
    "(number_fields.+)(sigmatd.i, sigmatd.span(sigmatd.A(sigmatd.i)(sigmatd.n1)))"
    "naturalnumbers.upto(sigmatd.len)")))
 (good_good?_TCC5 0
  (good_good?_TCC5-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good? subtype "sigmatd.A(sigmatd.i)(sigmatd.n1)"
    "{x: sigmatd.ent | booleans.OR(sigmatd.fail?(x), sigmatd.good?(x))}")))
 (good_good?_TCC6 0
  (good_good?_TCC6-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good? subtype
    "sigmatd.A((number_fields.+)(sigmatd.i, sigmatd.span(sigmatd.A(sigmatd.i)(sigmatd.n1))))(sigmatd.n2)"
    "{x: sigmatd.ent | booleans.OR(sigmatd.fail?(x), sigmatd.good?(x))}")))
 (good_good?_TCC7 0
  (good_good?_TCC7-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil))
   nil
   (good_good? subtype "sigmatd.A(sigmatd.i)(sigmatd.n1)"
    "{x: sigmatd.ent | booleans.OR(sigmatd.fail?(x), sigmatd.good?(x))}")))
 (good_good?_TCC8 0
  (good_good?_TCC8-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil))
   nil
   (good_good? subtype "sigmatd.A(sigmatd.i)(sigmatd.n3)"
    "{x: sigmatd.ent | booleans.OR(sigmatd.fail?(x), sigmatd.good?(x))}")))
 (good_tscaffold?_TCC1 0
  (good_tscaffold?_TCC1-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (good_or_fail? const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_tscaffold? subtype "sigmatd.A(sigmatd.i)(sigmatd.n)"
    "{x: sigmatd.ent | booleans.OR(sigmatd.fail?(x), sigmatd.good?(x))}")))
 (state_TCC1 0
  (state_TCC1-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_or_fail? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (state subtype "sigmatd.stack" "(sigmatd.push?)")))
 (state_TCC2 0
  (state_TCC2-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_or_fail? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (state subtype "sigmatd.pos(sigmatd.stack)"
    "naturalnumbers.upto(sigmatd.len)")))
 (state_TCC3 0
  (state_TCC3-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_or_fail? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (state subtype "sigmatd.nt(sigmatd.stack)" "non_terminal")))
 (step_TCC1 0
  (step_TCC1-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (step subtype "sigmatd.stack" "(sigmatd.push?)")))
 (step_TCC2 0
  (step_TCC2-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_or_fail? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (step subtype "sigmatd.cur" "non_terminal")))
 (step_TCC3 0
  (step_TCC3-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_or_fail? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.pos" "naturalnumbers.upto(sigmatd.len)")))
 (step_TCC4 0
  (step_TCC4-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_or_fail? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.good(0, 0)"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC5 0
  (step_TCC5-1 nil 3897229421
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (skeep*)
                (("3" (typepred lflag)
                  (("3" (ground)
                    (("1" (inst?) nil nil)
                     ("2" (hide 2) (("2" (grind) nil nil)) nil)
                     ("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" sigmatd
     nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (len skolem-const-decl "index" sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (good_or_fail? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (sigma def-decl "nat" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (good_good? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good(0, 0)]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC6 0
  (step_TCC6-1 nil 3897229421
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3"
                  (use sigma_dec
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" pos!1 "j" "len"))
                  (("1" (ground)
                    (("1" (lift-if)
                      (("1" (ground)
                        (("1" (typepred pos (stack))
                          (("1" (grind) nil nil)) nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                         count(num_non_terminals)(push?)
                                              (St`scaf WITH [(pos!1)(cur) := good(0, 0)](i))) = ((LAMBDA (i: upto(len)):
                                         count(num_non_terminals)(push?)(St`scaf(i)))
                                        WITH [(pos!1)
                                                := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                    1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                          push?(St`scaf(x!1) WITH [(cur) := good(0, 0)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("3" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand count)
                                  (("2"
                                    (lemma
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("2"
                                      (inst?)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand nonempty?)
                                          (("1"
                                            (expand empty?)
                                            (("1"
                                              (inst - cur)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite count_TCC1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -1 3)
                            (("3" (expand count)
                              (("3"
                                (lemma
                                 "nonempty_card[below(num_non_terminals)]")
                                (("3"
                                  (inst?)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (rewrite count_TCC1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (lemma
                         "nonempty_card[below(num_non_terminals)]")
                        (("2" (inst?)
                          (("1" (grind) nil nil)
                           ("2" (rewrite count_TCC1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (card_remove formula-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (x!1 skolem-const-decl "upto(len)" sigmatd nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (len skolem-const-decl "index" sigmatd nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" sigmatd
     nil)
    (sigma_dec formula-decl nil sigmatd nil)
    (arr type-eq-decl nil arrayCount nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil))
   nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good(0, 0)]))")))
 (step_TCC7 0
  (step_TCC7-1 nil 3897229421
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2" (inst - G "depth - 1" len scaf stack rest "good(0, 0)")
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2"
                    (inst - G "depth - 1" len scaf stack rest
                     "good(0, 0)")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (mem_stack? def-decl "bool" sigmatd nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatd nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" sigmatd
     nil)
    (len skolem-const-decl "index" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil))
   nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good(0, 0)]))")))
 (step_TCC8 0
  (step_TCC8-1 nil 3897229421
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good(0, 0)], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good(0, 0)](i)(sigmatd.n))) ENDIF}")))
 (step_TCC9 0
  (step_TCC9-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "sigmatd.fail(0)"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC10 0
  (step_TCC10-1 nil 3897229421
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatd nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (len skolem-const-decl "index" sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (good_or_fail? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (sigma def-decl "nat" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (good_good? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_root? const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail(0)]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC11 0
  (step_TCC11-1 nil 3897229421
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3"
                  (use sigma_dec
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" pos!1 "j" "len"))
                  (("1" (ground)
                    (("1" (lift-if)
                      (("1" (ground)
                        (("1" (typepred pos (stack))
                          (("1" (grind) nil nil)) nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                                 count(num_non_terminals)(push?)
                                                      (St`scaf WITH [(pos!1)(cur) := fail(0)](i))) = ((LAMBDA (i: upto(len)):
                                                 count(num_non_terminals)(push?)(St`scaf(i)))
                                                WITH [(pos!1)
                                                        := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                            1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                                        push?(St`scaf(x!1) WITH [(cur) := fail(0)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("3" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand count)
                                  (("2"
                                    (lemma
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("2"
                                      (inst?)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand nonempty?)
                                          (("1"
                                            (expand empty?)
                                            (("1"
                                              (inst - cur)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite count_TCC1)
                                        (("2"
                                          (hide 2)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide -1 3)
                                (("3"
                                  (expand count)
                                  (("3"
                                    (lemma
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("3"
                                      (inst?)
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (rewrite count_TCC1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand count)
                            (("3"
                              (lemma
                               "nonempty_card[below(num_non_terminals)]")
                              (("3"
                                (inst?)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (rewrite count_TCC1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "count")
                      (("2"
                        (lemma
                         "nonempty_card[below(num_non_terminals)]")
                        (("2" (inst?)
                          (("1" (grind) nil nil)
                           ("2" (rewrite count_TCC1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (card_remove formula-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (x!1 skolem-const-decl "upto(len)" sigmatd nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (len skolem-const-decl "index" sigmatd nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatd nil)
    (sigma_dec formula-decl nil sigmatd nil)
    (arr type-eq-decl nil arrayCount nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil))
   nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail(0)]))")))
 (step_TCC12 0
  (step_TCC12-1 nil 3897229421
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2" (inst - G "depth - 1" len scaf stack rest "fail(0)")
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)
           ("3" (typepred stack)
            (("3" (expand fine_stack? -)
              (("3" (ground)
                (("1" (grind) nil nil)
                 ("2" (lemma fine_mem_stack)
                  (("2" (ground)
                    (("2" (expand good_stack? -)
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2"
                    (inst - G "depth - 1" len scaf stack rest
                     "fail(0)")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (mem_stack? def-decl "bool" sigmatd nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatd nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatd nil)
    (len skolem-const-decl "index" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil))
   nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail(0)]))")))
 (step_TCC13 0
  (step_TCC13-1 nil 3897229421
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail(0)], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail(0)](i)(sigmatd.n))) ENDIF}")))
 (step_TCC14 0
  (step_TCC14-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_or_fail? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.pos" "naturalnumbers.below(sigmatd.len)")))
 (step_TCC15 0
  (step_TCC15-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (good_good? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.v"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC16 0
  (step_TCC16-1 nil 3897229421
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (v skolem-const-decl "ent" sigmatd nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (len skolem-const-decl "index" sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (mem_stack? def-decl "bool" sigmatd nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (good_or_fail? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (sigma def-decl "nat" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (good_good? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.v]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC17 0
  (step_TCC17-1 nil 3897229421
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3"
                  (use sigma_dec
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" pos!1 "j" "len"))
                  (("1" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (grind) nil nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                                                         count(num_non_terminals)(push?)
                                                                              (St`scaf WITH [(pos!1)(cur) := v](i))) = ((LAMBDA (i: upto(len)):
                                                                         count(num_non_terminals)(push?)(St`scaf(i)))
                                                                        WITH [(pos!1)
                                                                                := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                    1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                                                                                  push?(St`scaf(x!1) WITH [(cur) := v](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if +)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("3" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand count)
                                  (("2"
                                    (lemma
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("2"
                                      (inst?)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand nonempty?)
                                          (("1"
                                            (expand empty?)
                                            (("1"
                                              (inst - cur)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite count_TCC1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -1 3)
                            (("3" (expand count)
                              (("3"
                                (lemma
                                 "nonempty_card[below(num_non_terminals)]")
                                (("3"
                                  (inst?)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (rewrite count_TCC1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (lemma
                         "nonempty_card[below(num_non_terminals)]")
                        (("2" (inst?)
                          (("1" (grind) nil nil)
                           ("2" (rewrite count_TCC1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (card_remove formula-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (x!1 skolem-const-decl "upto(len)" sigmatd nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (len skolem-const-decl "index" sigmatd nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (v skolem-const-decl "ent" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (sigma_dec formula-decl nil sigmatd nil)
    (arr type-eq-decl nil arrayCount nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.v]))")))
 (step_TCC18 0
  (step_TCC18-1 nil 3897229421
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2" (inst - G "depth - 1" len scaf stack rest v)
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (typepred "stack") (("2" (grind) nil nil)) nil)) nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2" (inst - G "depth - 1" len scaf stack rest "v")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (mem_stack? def-decl "bool" sigmatd nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatd nil)
    (v skolem-const-decl "ent" sigmatd nil)
    (len skolem-const-decl "index" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil))
   nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.v]))")))
 (step_TCC19 0
  (step_TCC19-1 nil 3897229421
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatd nil))
   nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.v], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.v](i)(sigmatd.n))) ENDIF}")))
 (step_TCC20 0
  (step_TCC20-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_or_fail? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.pos" "naturalnumbers.below(sigmatd.len)")))
 (step_TCC21 0
  (step_TCC21-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (good_good? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (/= const-decl "boolean" notequal nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.v"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC22 0
  (step_TCC22-1 nil 3897229421
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (v skolem-const-decl "ent" sigmatd nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (len skolem-const-decl "index" sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (mem_stack? def-decl "bool" sigmatd nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (good_or_fail? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (sigma def-decl "nat" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (good_good? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.v]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC23 0
  (step_TCC23-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.v]))")))
 (step_TCC24 0
  (step_TCC24-1 nil 3897229421
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth)
        (("2" (grind)
          (("1" (postpone) nil nil) ("2" (postpone) nil nil)
           ("3" (postpone) nil nil) ("4" (postpone) nil nil)
           ("5" (postpone) nil nil) ("6" (postpone) nil nil))
          nil))
        nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3"
                  (use sigma_dec
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" pos!1 "j" "len"))
                  (("1" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (grind) nil nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                                                         count(num_non_terminals)(push?)
                                                                              (St`scaf WITH [(pos!1)(cur) := v](i))) = ((LAMBDA (i: upto(len)):
                                                                         count(num_non_terminals)(push?)(St`scaf(i)))
                                                                        WITH [(pos!1)
                                                                                := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                    1])")
                          (("1" (hide -1) (("1" (postpone) nil nil))
                            nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                                                                                  push?(St`scaf(x!1) WITH [(cur) := v](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if +)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (hide -3 -4 -6)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("3" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand count)
                                  (("2"
                                    (lemma
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("2"
                                      (inst?)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand nonempty?)
                                          (("1"
                                            (expand empty?)
                                            (("1"
                                              (inst - cur)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite count_TCC1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -1 3)
                            (("3" (expand count)
                              (("3"
                                (lemma
                                 "nonempty_card[below(num_non_terminals)]")
                                (("3"
                                  (inst?)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (rewrite count_TCC1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (lemma
                         "nonempty_card[below(num_non_terminals)]")
                        (("2" (inst?)
                          (("1" (grind) nil nil)
                           ("2" (rewrite count_TCC1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.v]))")))
 (step_TCC25 0
  (step_TCC25-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.v], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.v](i)(sigmatd.n))) ENDIF}")))
 (step_TCC26 0
  (step_TCC26-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype
         "(number_fields.+)(real_defs.max(sigmatd.d1, sigmatd.d3), 1)"
         "uint64")))
 (step_TCC27 0
  (step_TCC27-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype
         "sigmatd.fail((number_fields.+)(real_defs.max(sigmatd.d1, sigmatd.d3), 1))"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC28 0
  (step_TCC28-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(real_defs.max(sigmatd.d1, sigmatd.d3), 1))]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC29 0
  (step_TCC29-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(real_defs.max(sigmatd.d1, sigmatd.d3), 1))]))")))
 (step_TCC30 0
  (step_TCC30-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(real_defs.max(sigmatd.d1, sigmatd.d3), 1))]))")))
 (step_TCC31 0
  (step_TCC31-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d3)))], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d3)))](i)(sigmatd.n))) ENDIF}")))
 (step_TCC32 0
  (step_TCC32-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype
         "(number_fields.+)(real_defs.max(sigmatd.d1, sigmatd.d3), 1)"
         "uint64")))
 (step_TCC33 0
  (step_TCC33-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype
         "sigmatd.good((number_fields.+)(real_defs.max(sigmatd.d1, sigmatd.d3), 1), sigmatd.sp)"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC34 0
  (step_TCC34-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(real_defs.max(sigmatd.d1, sigmatd.d3), 1), sigmatd.sp)]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC35 0
  (step_TCC35-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(real_defs.max(sigmatd.d1, sigmatd.d3), 1), sigmatd.sp)]))")))
 (step_TCC36 0
  (step_TCC36-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(real_defs.max(sigmatd.d1, sigmatd.d3), 1), sigmatd.sp)]))")))
 (step_TCC37 0
  (step_TCC37-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d3)), sigmatd.sp)], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d3)), sigmatd.sp)](i)(sigmatd.n))) ENDIF}")))
 (step_TCC38 0
  (step_TCC38-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_or_fail? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.stack"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC39 0
  (step_TCC39-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n3) := sigmatd.stack]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC40 0
  (step_TCC40-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "(number_fields.+)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n3) := sigmatd.stack]))")))
 (step_TCC41 0
  (step_TCC41-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "sigmatd.push(sigmatd.pos, sigmatd.n3)"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.+)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n3) := sigmatd.stack]))")))
 (step_TCC42 0
  (step_TCC42-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.n3 = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n3) := sigmatd.stack], sigmatd.pos, sigmatd.n3)) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n3) := sigmatd.stack](i)(sigmatd.n))) ENDIF}")))
 (step_TCC43 0
  (step_TCC43-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "sigmatd.loop"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC44 0
  (step_TCC44-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC45 0
  (step_TCC45-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop]))")))
 (step_TCC46 0
  (step_TCC46-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop]))")))
 (step_TCC47 0
  (step_TCC47-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "booleans.TRUE"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop](i)(sigmatd.n))) ENDIF}")))
 (step_TCC48 0
  (step_TCC48-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "(number_fields.+)(sigmatd.pos, sigmatd.sp)"
         "naturalnumbers.upto(sigmatd.len)")))
 (step_TCC49 0
  (step_TCC49-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype
         "(number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2))"
         "uint64")))
 (step_TCC50 0
  (step_TCC50-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype
         "sigmatd.fail((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2)))"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC51 0
  (step_TCC51-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2)))]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC52 0
  (step_TCC52-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2)))]))")))
 (step_TCC53 0
  (step_TCC53-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2)))]))")))
 (step_TCC54 0
  (step_TCC54-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2)))], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2)))](i)(sigmatd.n))) ENDIF}")))
 (step_TCC55 0
  (step_TCC55-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype
         "(number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2))"
         "uint64")))
 (step_TCC56 0
  (step_TCC56-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "(number_fields.+)(sigmatd.sp, sigmatd.sp2)"
         "uint32")))
 (step_TCC57 0
  (step_TCC57-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype
         "sigmatd.good((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2)), (number_fields.+)(sigmatd.sp, sigmatd.sp2))"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC58 0
  (step_TCC58-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2)), (number_fields.+)(sigmatd.sp, sigmatd.sp2))]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC59 0
  (step_TCC59-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2)), (number_fields.+)(sigmatd.sp, sigmatd.sp2))]))")))
 (step_TCC60 0
  (step_TCC60-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2)), (number_fields.+)(sigmatd.sp, sigmatd.sp2))]))")))
 (step_TCC61 0
  (step_TCC61-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2)), (number_fields.+)(sigmatd.sp2, sigmatd.sp))], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2)), (number_fields.+)(sigmatd.sp2, sigmatd.sp))](i)(sigmatd.n))) ENDIF}")))
 (step_TCC62 0
  (step_TCC62-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_or_fail? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil))
   nil
   (step subtype "sigmatd.St`stack"
         "(sigmatd.nice_entry?(sigmatd.len, (number_fields.+)(sigmatd.pos, sigmatd.sp)))")))
 (step_TCC63 0
  (step_TCC63-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype
         "sigmatd.St`scaf WITH [((number_fields.+)(sigmatd.pos, sigmatd.sp))(sigmatd.n2) := sigmatd.St`stack]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC64 0
  (step_TCC64-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "(number_fields.+)(sigmatd.St`depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [((number_fields.+)(sigmatd.pos, sigmatd.sp))(sigmatd.n2) := sigmatd.St`stack]))")))
 (step_TCC65 0
  (step_TCC65-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "(number_fields.+)(sigmatd.pos, sigmatd.sp)"
         "uint32")))
 (step_TCC66 0
  (step_TCC66-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype
         "sigmatd.push((number_fields.+)(sigmatd.pos, sigmatd.sp), sigmatd.n2)"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.+)(sigmatd.St`depth, 1), sigmatd.St`scaf WITH [((number_fields.+)(sigmatd.pos, sigmatd.sp))(sigmatd.n2) := sigmatd.St`stack]))")))
 (step_TCC67 0
  (step_TCC67-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.n2 = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [((number_fields.+)(sigmatd.pos, sigmatd.sp))(sigmatd.n2) := sigmatd.St`stack], (number_fields.+)(sigmatd.pos, sigmatd.sp), sigmatd.n2)) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [((number_fields.+)(sigmatd.pos, sigmatd.sp))(sigmatd.n2) := sigmatd.St`stack](i)(sigmatd.n))) ENDIF}")))
 (step_TCC68 0
  (step_TCC68-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "sigmatd.loop"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC69 0
  (step_TCC69-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC70 0
  (step_TCC70-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop]))")))
 (step_TCC71 0
  (step_TCC71-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop]))")))
 (step_TCC72 0
  (step_TCC72-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "booleans.TRUE"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop](i)(sigmatd.n))) ENDIF}")))
 (step_TCC73 0
  (step_TCC73-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (prepeg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_or_fail? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.stack"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC74 0
  (step_TCC74-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n1) := sigmatd.stack]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC75 0
  (step_TCC75-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "(number_fields.+)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n1) := sigmatd.stack]))")))
 (step_TCC76 0
  (step_TCC76-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "sigmatd.push(sigmatd.pos, sigmatd.n1)"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.+)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n1) := sigmatd.stack]))")))
 (step_TCC77 0
  (step_TCC77-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.n1 = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n1) := sigmatd.stack], sigmatd.pos, sigmatd.n1)) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n1) := sigmatd.stack](i)(sigmatd.n))) ENDIF}")))
 (step_TCC78 0
  (step_TCC78-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "sigmatd.loop"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC79 0
  (step_TCC79-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC80 0
  (step_TCC80-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop]))")))
 (step_TCC81 0
  (step_TCC81-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop]))")))
 (step_TCC82 0
  (step_TCC82-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "booleans.TRUE"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop](i)(sigmatd.n))) ENDIF}")))
 (size_TCC1 0
  (size_TCC1-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (size subtype "sigmatd.len" "naturalnumbers.upto(sigmatd.len)")))
 (size_TCC2 0
  (size_TCC2-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (size subtype
         "(number_fields.-)((number_fields.*(((number_fields.+)(sigmatd.len, 1)), sigmatd.num_non_terminals)), sigmatd.St`depth)"
         "nat")))
 (endstate_TCC1 0
  (endstate_TCC1-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (endstate subtype "sigmatd.st`stack" "(sigmatd.push?)")))
 (parse_TCC1 0
  (parse_TCC1-1 nil 3897229421 ("" (well-founded-tcc) nil nil) nil nil
   (parse well-founded
          "restrict[[ordstruct_adt.ordstruct, ordstruct_adt.ordstruct], [ordinal, ordinal], booleans.bool].restrict(ordinals.<)"
          "nil")))
 (parse_TCC2 0
  (parse_TCC2-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (parse subtype "sigmatd.St"
          "sigmatd.endstate(sigmatd.len, sigmatd.G, sigmatd.s, sigmatd.start, sigmatd.root)")))
 (parse_TCC3 0
  (parse_TCC3-1 nil 3897229421 ("" (termination-tcc) nil nil) nil nil
   (parse termination
          "sigmatd.parse(sigmatd.len, sigmatd.G, sigmatd.s, sigmatd.start, sigmatd.root)(sigmatd.step(sigmatd.len, sigmatd.G, sigmatd.s, sigmatd.start, sigmatd.root)(sigmatd.St))"
          "nil")))
 (doparse_TCC1 0
  (doparse_TCC1-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (doparse subtype "sigmatd.pend"
    "[non_terminal -> (sigmatd.nice_entry?(sigmatd.len, sigmatd.i))]")))
 (doparse_TCC2 0
  (doparse_TCC2-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (doparse subtype "0" "naturalnumbers.upto(sigmatd.len)")))
 (doparse_TCC3 0
  (doparse_TCC3-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (doparse subtype "sigmatd.num_non_terminals" "uint8")))
 (doparse_TCC4 0
  (doparse_TCC4-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (doparse subtype "sigmatd.push(0, sigmatd.num_non_terminals)"
    "(sigmatd.nice_entry?(sigmatd.len, 0))")))
 (doparse_TCC5 0
  (doparse_TCC5-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_or_fail? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (doparse subtype
    "(LAMBDA (i: naturalnumbers.upto(sigmatd.len)): sigmatd.pend) WITH [(0)(sigmatd.n) := sigmatd.push(0, sigmatd.num_non_terminals)]"
    "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(0, sigmatd.n))")))
 (doparse_TCC6 0
  (doparse_TCC6-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (doparse subtype "1"
    "(sigmatd.good_depth?(sigmatd.len, (LAMBDA (i: naturalnumbers.upto(sigmatd.len)): sigmatd.pend) WITH [(0)(sigmatd.n) := sigmatd.push(0, sigmatd.num_non_terminals)]))")))
 (doparse_TCC7 0
  (doparse_TCC7-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil
   (doparse subtype "sigmatd.push(0, sigmatd.n)"
    "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, 1, (LAMBDA (i: naturalnumbers.upto(sigmatd.len)): sigmatd.pend) WITH [(0)(sigmatd.n) := sigmatd.push(0, sigmatd.num_non_terminals)]))")))
 (doparse_TCC8 0
  (doparse_TCC8-1 nil 3897229421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (doparse subtype "booleans.FALSE"
    "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.n = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, (LAMBDA (i: naturalnumbers.upto(sigmatd.len)): sigmatd.pend) WITH [(0)(sigmatd.n) := sigmatd.push(0, sigmatd.num_non_terminals)], 0, sigmatd.n)) ELSE FORALL (i_1: naturalnumbers.upto(sigmatd.len)), (n_1: sigmatd.non_terminal): (booleans.NOT)(sigmatd.loop?((LAMBDA (i: naturalnumbers.upto(sigmatd.len)): sigmatd.pend) WITH [(0)(sigmatd.n) := sigmatd.push(0, sigmatd.num_non_terminals)](i_1)(n_1))) ENDIF}"))))

