(|ltedfapeg|
 (|subtype_TCC1| 0
  (|subtype_TCC1-1| |nil| 3804536638 ("" (GRIND) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL))
   NIL (|subtype_| SUBTYPE "ltedfapeg.x" "uint32")))
 (|subtype_TCC2| 0
  (|subtype_TCC2-1| |nil| 3804564519 ("" (GRIND) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL))
   NIL (|subtype_| SUBTYPE "ltedfapeg.x" "uint8")))
 (|fine_push_entry?_TCC1| 0
  (|fine_push_entry?_TCC1-1| |nil| 3807728459 ("" (SUBTYPE-TCC) NIL NIL)
   ((|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL (|fine_push_entry?| SUBTYPE "ltedfapeg.x" "(ltedfapeg.push?)")))
 (|successor_TCC1| 0
  (|successor_TCC1-1| |nil| 3804904050 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL (|successor| SUBTYPE "ltedfapeg.entry1" "(ltedfapeg.push?)")))
 (|successor_TCC2| 0
  (|successor_TCC2-1| |nil| 3804904050 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL (|successor| SUBTYPE "ltedfapeg.entry2" "(ltedfapeg.push?)")))
 (|successor_TCC3| 0
  (|successor_TCC1-1| |nil| 3804547853 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL (|successor| SUBTYPE "ltedfapeg.nt1" "non_terminal")))
 (|successor_TCC4| 0
  (|successor_TCC1-1| |nil| 3804455654 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL (|successor| SUBTYPE "ltedfapeg.p1" "upto(ltedfapeg.len)")))
 (|sigma_TCC1| 0
  (|sigma_TCC1-1| |nil| 3885810362 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|sigma| SUBTYPE "0" "upto(ltedfapeg.max)")))
 (|sigma_TCC2| 0
  (|sigma_TCC2-1| |nil| 3885810362 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|minus_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|sigma| SUBTYPE "(number_fields.-)(ltedfapeg.j, 1)"
    "upto(ltedfapeg.max)")))
 (|sigma_TCC3| 0
  (|sigma_TCC4-1| |nil| 3885810362 ("" (TERMINATION-TCC) NIL NIL) NIL NIL
   (|sigma| TERMINATION
    "ltedfapeg.sigma(ltedfapeg.max, ltedfapeg.A)((number_fields.-)(ltedfapeg.j, 1))"
    "NIL")))
 (|sigma_pos| 0
  (|sigma_pos-1| |nil| 3885943581
   ("" (SKOLEM + ("len" "F" "i" "_")) (("" (INDUCT-AND-SIMPLIFY "j") NIL NIL))
    NIL)
   ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|plus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|plus_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|upto_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|sigma| DEF-DECL "nat" |ltedfapeg| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL))
   SHOSTAK))
 (|sigma_dec_TCC1| 0
  (|sigma_dec_TCC1-1| |nil| 3885933801 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|sigma_dec| SUBTYPE "(number_fields.-)(ltedfapeg.F(ltedfapeg.i), 1)"
    "nat")))
 (|sigma_dec| 0
  (|sigma_dec-1| |nil| 3885933802
   ("" (SKOLEM + (LEN F I "_")) (("" (INDUCT-AND-SIMPLIFY "j") NIL NIL)) NIL)
   ((|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|plus_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|plus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|upto_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (I SKOLEM-CONST-DECL "upto(LEN)" |ltedfapeg| NIL)
    (F SKOLEM-CONST-DECL "[upto(LEN) -> nat]" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (LEN SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|sigma| DEF-DECL "nat" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL))
   SHOSTAK))
 (|sigma_inc| 0
  (|sigma_inc-1| |nil| 3885943324
   ("" (SKOLEM + (LEN F I "_")) (("" (INDUCT-AND-SIMPLIFY "j") NIL NIL)) NIL)
   ((|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|plus_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|plus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|upto_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|sigma| DEF-DECL "nat" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL))
   SHOSTAK))
 (|sigma_zero| 0
  (|sigma_zero-1| |nil| 3886210429
   ("" (SKOLEM + ("len" "_")) (("" (INDUCT-AND-SIMPLIFY "j") NIL NIL)) NIL)
   ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|plus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|plus_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|upto_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|sigma| DEF-DECL "nat" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL))
   SHOSTAK))
 (|scafcount_TCC1| 0
  (|scafcount_TCC4-1| |nil| 3806632141 ("" (GRIND) NIL NIL)
   ((|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL))
   NIL (|scafcount| SUBTYPE "ltedfapeg.num_non_terminals" "index")))
 (|scafcount_TCC2| 0
  (|scafcount_TCC3-1| |nil| 3885810362
   ("" (SKOLEM + ("len" "A" "P" "_"))
    ((""
      (CASE "FORALL ((j: upto(len))):
                             sigma(len,
                                  LAMBDA (i: upto(len)): count[ent](num_non_terminals)(P)(A(i)))(j)
                              <= (j + 1) * num_non_terminals")
      (("1" (SKEEP)
        (("1" (CASE "(j + 1) * num_non_terminals <= exp2(64) - 1")
          (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
           ("2" (HIDE -1 2)
            (("2"
              (USE "le_times_le_pos" :SUBST
                   ("nnx" "j + 1" "y" "exp2(32)" "nnz" "num_non_terminals" "w"
                    "exp2(8)"))
              (("2" (GROUND)
                (("1" (REWRITE "exp2_sum" :DIR RL) (("1" (GRIND) NIL NIL)) NIL)
                 ("2" (TYPEPRED "num_non_terminals")
                  (("2" (TYPEPRED "j")
                    (("2" (TYPEPRED "len") (("2" (GRIND) NIL NIL)) NIL)) NIL))
                  NIL)
                 ("3" (GRIND) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (INDUCT "j")
          (("1" (EXPAND "sigma") (("1" (ASSERT) NIL NIL)) NIL)
           ("2" (SKEEP*)
            (("2" (EXPAND "sigma" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)
           ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL)
       ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|sigma| DEF-DECL "nat" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|arr| TYPE-EQ-DECL NIL |arrayCount| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|plus_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|exp2_sum| FORMULA-DECL NIL |exp2| NIL)
    (|plus_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|times_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|times_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|upto_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL)
    (|plus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|scafcount| SUBTYPE
    "ltedfapeg.sigma(ltedfapeg.len, LAMBDA (i: naturalnumbers.upto(ltedfapeg.len)): arrayCount[ltedfapeg.ent].count(ltedfapeg.num_non_terminals)(ltedfapeg.P)(ltedfapeg.A(i)))(ltedfapeg.j)"
    "uint64")))
 (|sigma_max| 0
  (|sigma_max-1| |nil| 3806353166
   ("" (SKOLEM + ("len" "A" "P" "_"))
    (("" (INDUCT "j")
      (("1" (GRIND :EXCLUDE "count") NIL NIL)
       ("2" (SKEEP*)
        (("2" (EXPAND "scafcount")
          (("2" (EXPAND "sigma" +) (("2" (GROUND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|upto_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|plus_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|sigma| DEF-DECL "nat" |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|plus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|scafcount_max| 0
  (|scafcount_max-1| |nil| 3807566158
   ("" (SKEEP*)
    (("" (USE "sigma_max")
      (("" (USE "le_times_le_pos" :SUBST ("y" "exp2(32)" "w" "exp2(8)"))
        (("" (GROUND)
          (("1" (REWRITE "EXP2_SUM" :DIR RL) (("1" (ASSERT) NIL NIL)) NIL)
           ("2" (ASSERT)
            (("2" (TYPEPRED "num_non_terminals")
              (("2" (TYPEPRED "j")
                (("2" (HIDE -3 2)
                  (("2" (GRIND)
                    (("2" (TYPEPRED "len") (("2" (GRIND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (GRIND) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|plus_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|sigma_max| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|plus_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|exp2_sum| FORMULA-DECL NIL |exp2| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|plus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|scafcount0_TCC1| 0
  (|scafcount0_TCC1-1| |nil| 3806988426 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|scafcount0| SUBTYPE "0" "upto(ltedfapeg.len)")))
 (|scafcount0| 0
  (|scafcount0-1| |nil| 3806988426
   ("" (GRIND :REWRITES COUNT_UPDATE00) NIL NIL)
   ((|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|sigma| DEF-DECL "nat" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL))
   SHOSTAK))
 (|scafcount_step_TCC1| 0
  (|scafcount_step_TCC1-1| |nil| 3806977775 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|scafcount_step| SUBTYPE "(number_fields.+)(ltedfapeg.j, 1)"
    "upto(ltedfapeg.len)")))
 (|scafcount_step_TCC2| 0
  (|scafcount_step_TCC2-1| |nil| 3806977775 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|scafcount_step| SUBTYPE "ltedfapeg.j" "upto(ltedfapeg.len)")))
 (|scafcount_step| 0
  (|scafcount_step-1| |nil| 3806977775
   ("" (SKOLEM + (LEN "_" "_" "_")) (("" (INDUCT-AND-SIMPLIFY "j") NIL NIL))
    NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sigma| DEF-DECL "nat" |ltedfapeg| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|plus_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|below_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|arr| TYPE-EQ-DECL NIL |arrayCount| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL))
   SHOSTAK))
 (|scafcount_update| 0
  (|scafcount_update-1| |nil| 3806936723
   ("" (SKOLEM + ("len" "_" "_" "_" "_" "_" "_"))
    (("" (INDUCT "j")
      (("1" (SKEEP*)
        (("1" (REWRITE "scafcount0")
          (("1" (LIFT-IF :UPDATES? NIL)
            (("1" (GROUND)
              (("1" (GRIND) NIL NIL)
               ("2" (CASE "i  = 0")
                (("1" (ASSERT)
                  (("1" (REWRITE "count_update00") (("1" (GRIND) NIL NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT) NIL NIL))
                NIL)
               ("3" (CASE "i  = 0")
                (("1" (ASSERT)
                  (("1" (REWRITE "count_update00") (("1" (GRIND) NIL NIL))
                    NIL))
                  NIL)
                 ("2" (CASE "i  = 0")
                  (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
                NIL)
               ("4" (CASE "i  = 0")
                (("1" (ASSERT)
                  (("1" (REWRITE "count_update00") (("1" (GRIND) NIL NIL))
                    NIL))
                  NIL)
                 ("2" (CASE "i  = 0")
                  (("1" (PROPAX) NIL NIL) ("2" (GRIND) NIL NIL)) NIL))
                NIL)
               ("5" (CASE "i  = 0")
                (("1" (ASSERT)
                  (("1" (REWRITE "count_update00") (("1" (GRIND) NIL NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (SKEEP*)
        (("2" (REWRITE "scafcount_step")
          (("2" (REWRITE -2)
            (("2" (HIDE -2)
              (("2" (CASE "i = 1 + jt")
                (("1" (ASSERT)
                  (("1" (REWRITE "count_update00")
                    (("1" (GRIND :REWRITES "scafcount_step" :EXCLUDE "count")
                      NIL NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT)
                  (("2" (GRIND :REWRITES "scafcount_step" :EXCLUDE "count") NIL
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|upto_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL)
    (|scafcount0| FORMULA-DECL NIL |ltedfapeg| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|sigma| DEF-DECL "nat" |ltedfapeg| NIL)
    (|arr| TYPE-EQ-DECL NIL |arrayCount| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|count_update00| FORMULA-DECL NIL |arrayCount| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|scafcount_step| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|plus_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|plus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL))
   SHOSTAK))
 (|pushcount_TCC1| 0
  (|pushcount_TCC1-1| |nil| 3806632141 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|pushcount| SUBTYPE "ltedfapeg.len" "upto(ltedfapeg.len)")))
 (|good_stack?_TCC1| 0
  (|good_stack?_TCC1-1| |nil| 3804904050 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL (|good_stack?| SUBTYPE "ltedfapeg.stack" "(ltedfapeg.push?)")))
 (|good_stack?_TCC2| 0
  (|good_stack?_TCC2-1| |nil| 3804455654 ("" (SUBTYPE-TCC) NIL NIL)
   ((|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL (|good_stack?| SUBTYPE "ltedfapeg.entry" "(ltedfapeg.push?)")))
 (|good_stack?_TCC3| 0
  (|good_stack?_TCC3-1| |nil| 3804455654 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_stack?| SUBTYPE "(number_fields.-)(ltedfapeg.depth, 1)" "uint64")))
 (|good_stack?_TCC4| 0
  (|good_stack?_TCC4-1| |nil| 3804455654 ("" (TERMINATION-TCC) NIL NIL)
   ((|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|good_stack?| TERMINATION
    "ltedfapeg.good_stack?(ltedfapeg.len, ltedfapeg.G, (number_fields.-)(ltedfapeg.depth, 1), ltedfapeg.A)"
    "NIL")))
 (|good_stack?_TCC5| 0
  (|good_stack?_TCC5-1| |nil| 3804547853 ("" (SUBTYPE-TCC) NIL NIL)
   ((|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL (|good_stack?| SUBTYPE "ltedfapeg.nt(ltedfapeg.stack)" "non_terminal")))
 (|good_stack?_TCC6| 0
  (|good_stack?_TCC5-1| |nil| 3804455654 ("" (SUBTYPE-TCC) NIL NIL)
   ((|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_stack?| SUBTYPE "ltedfapeg.pos(ltedfapeg.stack)"
    "upto(ltedfapeg.len)")))
 (|mem_stack?_TCC1| 0
  (|mem_stack?_TCC1-1| |nil| 3804455654
   ("" (SKEEP* :PREDS? T)
    (("" (EXPAND "good_stack?") (("" (GROUND) NIL NIL)) NIL)) NIL)
   ((|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|mem_stack?| SUBTYPE "(number_fields.-)(ltedfapeg.depth, 1)" "uint64")))
 (|mem_stack?_TCC2| 0
  (|mem_stack?_TCC2-1| |nil| 3804455654 ("" (TERMINATION-TCC) NIL NIL)
   ((|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|mem_stack?| TERMINATION
    "ltedfapeg.mem_stack?(ltedfapeg.len, ltedfapeg.G, (number_fields.-)(ltedfapeg.depth, 1), ltedfapeg.A)"
    "NIL")))
 (|mem_stack?_TCC3| 0
  (|mem_stack?_TCC3-1| |nil| 3804455654 ("" (GRIND) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|fine_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|mem_stack?| SUBTYPE
    "ltedfapeg.A(ltedfapeg.pos(ltedfapeg.stack))(ltedfapeg.nt(ltedfapeg.stack))"
    "(ltedfapeg.good_stack?(ltedfapeg.len, ltedfapeg.G, (number_fields.-)(ltedfapeg.depth, 1), ltedfapeg.A))")))
 (|mem_stack_push_TCC1| 0
  (|mem_stack_push_TCC2-1| |nil| 3807675826 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL (|mem_stack_push| SUBTYPE "ltedfapeg.entry" "(ltedfapeg.push?)")))
 (|mem_stack_push_TCC2| 0
  (|mem_stack_push_TCC1-1| |nil| 3807675826 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|mem_stack_push| SUBTYPE "(ltedfapeg.pos(ltedfapeg.entry))"
    "upto(ltedfapeg.len)")))
 (|mem_stack_push_TCC3| 0
  (|mem_stack_push_TCC3-1| |nil| 3807675826 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|mem_stack_push| SUBTYPE "ltedfapeg.nt(ltedfapeg.entry)" "non_terminal")))
 (|mem_stack_push| 0
  (|mem_stack_push-1| |nil| 3807675827
   ("" (INDUCT "depth")
    (("1" (LAZY-GRIND :DEFS NIL) NIL NIL)
     ("2" (SKEEP*)
      (("2" (EXPAND "mem_stack?")
        (("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)) NIL))
      NIL)
     ("3" (SKEEP*)
      (("3" (EXPAND "mem_stack?" -4)
        (("3" (GROUND)
          (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
           ("2" (INST?)
            (("2" (INST?)
              (("1" (GROUND) NIL NIL)
               ("2" (TYPEPRED "entry") (("2" (GRIND) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2)
      (("4" (SKEEP*) (("4" (TYPEPRED "entry") (("4" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL)
     ("5" (HIDE 2)
      (("5" (SKEEP*) (("5" (TYPEPRED "entry") (("5" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL)
     ("6" (HIDE 2)
      (("6" (SKEEP*) (("6" (TYPEPRED "entry") (("6" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL)
     ("7" (HIDE 2)
      (("7" (SKEEP*) (("7" (TYPEPRED "entry") (("7" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL)
     ("8" (HIDE 2)
      (("8" (SKEEP*) (("8" (TYPEPRED "entry") (("8" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|entry| SKOLEM-CONST-DECL "(fine_push_entry?(len))" |ltedfapeg| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|mem_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|upto_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL))
   SHOSTAK))
 (|good_mem_stack_TCC1| 0
  (|good_mem_stack_TCC1-1| |nil| 3807728459 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_mem_stack| SUBTYPE "(ltedfapeg.pos(ltedfapeg.entry))"
    "upto(ltedfapeg.len)")))
 (|good_mem_stack_TCC2| 0
  (|good_mem_stack_TCC2-1| |nil| 3807728459 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|fine_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_mem_stack| SUBTYPE "ltedfapeg.nt(ltedfapeg.entry)" "non_terminal")))
 (|good_mem_stack| 0
  (|good_mem_stack-1| |nil| 3804823624
   ("" (INDUCT "depth")
    (("1" (GRIND)
      (("1" (EXPAND "good_stack?") (("1" (PROPAX) NIL NIL)) NIL)
       ("2" (GRIND) (("2" (EXPAND "good_stack?") (("2" (PROPAX) NIL NIL)) NIL))
        NIL)
       ("3" (EXPAND "good_stack?") (("3" (PROPAX) NIL NIL)) NIL)
       ("4" (EXPAND "good_stack?") (("4" (PROPAX) NIL NIL)) NIL)
       ("5" (EXPAND "good_stack?") (("5" (PROPAX) NIL NIL)) NIL)
       ("6" (EXPAND "good_stack?") (("6" (PROPAX) NIL NIL)) NIL))
      NIL)
     ("2" (SKEEP*)
      (("2" (EXPAND "mem_stack?" +)
        (("2" (GROUND)
          (("1" (TYPEPRED "stack") (("1" (GRIND :IF-MATCH NIL) NIL NIL)) NIL)
           ("2" (EXPAND "good_stack?" :FNUM (-3 4))
            (("2" (GROUND)
              (("1" (HIDE -3 4)
                (("1" (GRIND)
                  (("1" (TYPEPRED "entry")
                    (("1" (GRIND)
                      (("1" (TYPEPRED "stack")
                        (("1" (GRIND)
                          (("1" (EXTENSIONALITY "(push?)")
                            (("1" (INST?) (("1" (GROUND) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXTENSIONALITY "(push?)")
                    (("2" (INST?) (("2" (GROUND) NIL NIL)) NIL)) NIL)
                   ("3" (EXTENSIONALITY "(push?)")
                    (("3" (INST?) (("3" (GROUND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL)
               ("2" (HIDE -3 2 5)
                (("2" (LIFT-IF)
                  (("2" (GROUND)
                    (("2" (LIFT-IF)
                      (("2" (GROUND)
                        (("2" (EXTENSIONALITY "(push?)")
                          (("2" (INST?) (("2" (GROUND) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (INST?)
                (("3" (GROUND)
                  (("1" (HIDE 2)
                    (("1" (LIFT-IF)
                      (("1" (TYPEPRED "entry")
                        (("1" (GRIND)
                          (("1" (EXTENSIONALITY "(push?)")
                            (("1" (INST?) (("1" (GROUND) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (LIFT-IF)
                    (("2" (GROUND)
                      (("2" (GROUND)
                        (("2" (EXTENSIONALITY "(push?)")
                          (("2" (INST?) (("2" (GROUND) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("4" (HIDE -3 4)
                (("4" (HIDE -1)
                  (("4" (LIFT-IF)
                    (("4" (GROUND)
                      (("4" (GROUND)
                        (("4" (EXTENSIONALITY "(push?)")
                          (("4" (INST?) (("4" (GROUND) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("5" (HIDE -3 5)
                (("5" (CASE "pos(stack) = pos(entry)")
                  (("1" (CASE "nt(stack) = nt(entry)")
                    (("1" (EXTENSIONALITY "(push?)")
                      (("1" (ASSERT)
                        (("1" (INST?) (("1" (GROUND) NIL NIL)) NIL)) NIL))
                      NIL)
                     ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL))
                    NIL)
                   ("2" (GRIND) NIL NIL))
                  NIL))
                NIL)
               ("6" (INST? :POLARITY? T)
                (("6" (GROUND)
                  (("1" (HIDE 2)
                    (("1" (LIFT-IF)
                      (("1" (GROUND)
                        (("1" (GROUND)
                          (("1" (EXTENSIONALITY "(push?)")
                            (("1" (INST?) (("1" (GROUND) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (LIFT-IF)
                    (("2" (GROUND)
                      (("2" (GROUND)
                        (("2" (EXTENSIONALITY "(push?)")
                          (("2" (INST?) (("2" (GROUND) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)
     ("4" (HIDE 2) (("4" (GRIND) NIL NIL)) NIL)
     ("5" (HIDE 2) (("5" (GRIND) NIL NIL)) NIL)
     ("6" (HIDE 2) (("6" (GRIND) NIL NIL)) NIL)
     ("7" (HIDE 2) (("7" (GRIND) NIL NIL)) NIL)
     ("8" (HIDE 2) (("8" (GRIND) NIL NIL)) NIL)
     ("9" (HIDE 2) (("9" (GRIND) NIL NIL)) NIL)
     ("10" (HIDE 2) (("10" (GRIND) NIL NIL)) NIL))
    NIL)
   ((TRUE CONST-DECL "bool" |booleans| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|ent_push_extensionality| FORMULA-DECL NIL |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|mem_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|fine_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|upto_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL))
   SHOSTAK))
 (|mem_mem_stack_TCC1| 0
  (|mem_mem_stack_TCC1-1| |nil| 3804967699
   ("" (SKEEP*)
    (("" (LEMMA GOOD_MEM_STACK) (("" (INST?) (("" (GROUND) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|good_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|mem_mem_stack| SUBTYPE "ltedfapeg.stack"
    "(ltedfapeg.good_stack?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.depth, ltedfapeg.A WITH [(ltedfapeg.pos(ltedfapeg.entry))(ltedfapeg.nt(ltedfapeg.entry)) := ltedfapeg.u]))")))
 (|mem_mem_stack| 0
  (|mem_mem_stack-2| "" 3807748697
   ("" (INDUCT "depth")
    (("1" (SKEEP*) (("1" (EXPAND "good_stack?") (("1" (GRIND) NIL NIL)) NIL))
      NIL)
     ("2" (SKEEP*)
      (("2" (EXPAND "mem_stack?" +)
        (("2" (LIFT-IF)
          (("2" (GROUND)
            (("2" (CASE "v = stack")
              (("1" (ASSERT) NIL NIL)
               ("2" (ASSERT)
                (("2" (INST?)
                  (("2" (GROUND)
                    (("1" (LIFT-IF -)
                      (("1" (GROUND)
                        (("1" (LIFT-IF -)
                          (("1" (GROUND)
                            (("1" (EXTENSIONALITY "(push?)")
                              (("1" (FORWARD-CHAIN -) (("1" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "good_stack?" -)
                      (("2" (GROUND)
                        (("1" (CASE "pos(stack) = pos(entry)")
                          (("1" (CASE "nt(stack) = nt(entry)")
                            (("1" (ASSERT)
                              (("1" (EXTENSIONALITY "(push?)")
                                (("1" (INST - "stack" "entry")
                                  (("1" (GROUND) NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL))
                          NIL)
                         ("2" (CASE "pos(stack) = pos(entry)")
                          (("1" (CASE "nt(stack) = nt(entry)")
                            (("1" (ASSERT)
                              (("1" (EXTENSIONALITY "(push?)")
                                (("1" (INST - "stack" "entry")
                                  (("1" (GROUND) NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (CASE "pos(stack) = pos(entry)")
                      (("1" (CASE "nt(stack) = nt(entry)")
                        (("1" (EXTENSIONALITY "(push?)")
                          (("1" (INST - "stack" "entry")
                            (("1" (GROUND) NIL NIL)) NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)
     ("4" (HIDE 2) (("4" (GRIND) NIL NIL)) NIL)
     ("5" (HIDE 2) (("5" (GRIND) NIL NIL)) NIL)
     ("6" (HIDE 2)
      (("6" (SKEEP*)
        (("6" (USE "good_mem_stack") (("6" (GROUND) NIL NIL)) NIL)) NIL))
      NIL)
     ("7" (HIDE 2)
      (("7" (SKEEP*) (("7" (TYPEPRED "entry") (("7" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL)
     ("8" (HIDE 2) (("8" (GRIND) NIL NIL)) NIL)
     ("9" (HIDE 2) (("9" (GRIND) NIL NIL)) NIL)
     ("10" (HIDE 2) (("10" (GRIND) NIL NIL)) NIL)
     ("11" (HIDE 2) (("11" (GRIND) NIL NIL)) NIL))
    NIL)
   ((|good_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|ent_push_extensionality| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|mem_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|fine_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|upto_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL))
   SHOSTAK)
  (|mem_mem_stack-1| |nil| 3804967700
   ("" (INDUCT DEPTH)
    (("1" (SKEEP*) (("1" (INST?) (("1" (GROUND) NIL NIL)) NIL)) NIL)
     ("2" (SKEEP*) (("2" (EXPAND GOOD_STACK?) (("2" (GRIND) NIL NIL)) NIL))
      NIL)
     ("3" (SKEEP*)
      (("3" (EXPAND MEM_STACK? +)
        (("3" (LIFT-IF)
          (("3" (GROUND)
            (("3" (CASE "v = stack")
              (("1" (ASSERT) NIL NIL)
               ("2" (ASSERT)
                (("2" (INST?)
                  (("2" (GROUND)
                    (("1" (LIFT-IF -)
                      (("1" (GROUND)
                        (("1" (LIFT-IF -)
                          (("1" (GROUND)
                            (("1" (EXTENSIONALITY "(push?)")
                              (("1" (FORWARD-CHAIN -) (("1" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND GOOD_STACK? -)
                      (("2" (GROUND)
                        (("1" (GRIND) NIL NIL)
                         ("2" (LIFT-IF 1)
                          (("2" (GROUND)
                            (("2" (GROUND)
                              (("2" (EXTENSIONALITY "(push?)")
                                (("2" (FORWARD-CHAIN -)
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (LIFT-IF -)
                      (("3" (GROUND)
                        (("3" (LIFT-IF -)
                          (("3" (GROUND)
                            (("3" (EXTENSIONALITY "(push?)")
                              (("3" (FORWARD-CHAIN -) (("3" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("4" (HIDE 2) (("4" (GRIND) NIL NIL)) NIL)
     ("5" (HIDE 2) (("5" (GRIND) NIL NIL)) NIL)
     ("6" (HIDE 2)
      (("6" (SKEEP*)
        (("6" (LEMMA GOOD_MEM_STACK)
          (("6" (INST?) (("6" (GROUND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("7" (HIDE 2) (("7" (GRIND) NIL NIL)) NIL)
     ("8" (HIDE 2) (("8" (GRIND) NIL NIL)) NIL)
     ("9" (HIDE 2) (("9" (GRIND) NIL NIL)) NIL)
     ("10" (HIDE 2) (("10" (GRIND) NIL NIL)) NIL)
     ("11" (HIDE 2) (("11" (GRIND) NIL NIL)) NIL)
     ("12" (HIDE 2) (("12" (GRIND) NIL NIL)) NIL))
    NIL)
   NIL SHOSTAK))
 (|good_mem_stack_push_TCC1| 0
  (|good_mem_stack_push_TCC2-1| |nil| 3807665403 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_mem_stack_push| SUBTYPE "ltedfapeg.push(ltedfapeg.pos, ltedfapeg.n)"
    "(ltedfapeg.good_push_entry?(ltedfapeg.len))")))
 (|good_mem_stack_push_TCC2| 0
  (|good_mem_stack_push_TCC3-1| |nil| 3807665403
   ("" (SKEEP*)
    (("" (USE EXP2_LT :SUBST (N 41 M 64)) (("" (GRIND) NIL NIL)) NIL)) NIL)
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|good_mem_stack_push| SUBTYPE "(number_fields.+)(ltedfapeg.depth, 1)"
    "uint64")))
 (|good_mem_stack_push_TCC3| 0
  (|good_mem_stack_push_TCC4-1| |nil| 3807665403 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_mem_stack_push| SUBTYPE "ltedfapeg.stack"
    "(ltedfapeg.nice_entry?(ltedfapeg.len, ltedfapeg.pos))")))
 (|good_mem_stack_push| 0
  (|good_mem_stack_push-2| "" 3807671734
   ("" (SKEEP*)
    (("" (EXPAND "good_stack?" +)
      (("" (GROUND)
        (("1" (GRIND) NIL NIL)
         ("2"
          (USE "good_mem_stack" :SUBST ("len" "len" "entry" "push(pos!1, n)"))
          (("1" (GROUND)
            (("1" (GRIND) NIL NIL)
             ("2" (USE "mem_stack_push") (("2" (GROUND) NIL NIL)) NIL)
             ("3" (GRIND) NIL NIL))
            NIL)
           ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|stack| SKOLEM-CONST-DECL "(good_push_entry?(len))" |ltedfapeg| NIL)
    (|pos!1| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|push| ADT-CONSTRUCTOR-DECL "[[uint32, uint8] -> (push?)]" |ltedfapeg|
     NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|mem_stack_push| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|fine_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   SHOSTAK)
  (|good_mem_stack_push-1| |nil| 3807665405
   ("" (SKEEP*)
    (("" (EXPAND GOOD_STACK? +)
      (("" (GROUND)
        (("1" (POSTPONE) NIL NIL) ("2" (POSTPONE) NIL NIL)
         ("3" (POSTPONE) NIL NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|fine_stack?_TCC1| 0
  (|fine_stack?_TCC1-1| |nil| 3807728459 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|fine_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|fine_stack?| SUBTYPE "ltedfapeg.stack"
    "(ltedfapeg.fine_push_entry?(ltedfapeg.len))")))
 (|fine_stack?_TCC2| 0
  (|fine_stack?_TCC1-1| |nil| 3804908888
   ("" (SKEEP*) (("" (TYPEPRED "stack") (("" (GRIND) NIL NIL)) NIL)) NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|fine_stack?| SUBTYPE "ltedfapeg.rest"
    "(ltedfapeg.good_stack?(ltedfapeg.len, ltedfapeg.G, (number_fields.-)(ltedfapeg.depth, 1), ltedfapeg.A))")))
 (|fine_stack?_TCC3| 0
  (|fine_stack?_TCC2-1| |nil| 3804908888
   ("" (SKEEP*)
    (("" (GROUND) (("" (TYPEPRED "stack") (("" (GRIND) NIL NIL)) NIL)) NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|fine_stack?| SUBTYPE "(number_fields.-)(ltedfapeg.depth, 1)" "uint64")))
 (|fine_stack?_TCC4| 0
  (|fine_stack?_TCC3-1| |nil| 3804908888
   ("" (SKEEP*)
    (("" (GROUND)
      (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
       ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|fine_stack?| SUBTYPE
    "ltedfapeg.A(ltedfapeg.pos(ltedfapeg.stack))(ltedfapeg.nt(ltedfapeg.stack))"
    "(ltedfapeg.good_stack?(ltedfapeg.len, ltedfapeg.G, (number_fields.-)(ltedfapeg.depth, 1), ltedfapeg.A))")))
 (|fine_stack?_TCC5| 0
  (|fine_stack?_TCC4-1| |nil| 3804908888 ("" (TERMINATION-TCC) NIL NIL)
   ((|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|fine_stack?| TERMINATION
    "ltedfapeg.fine_stack?(ltedfapeg.len, ltedfapeg.G, (number_fields.-)(ltedfapeg.depth, 1), ltedfapeg.A)"
    "NIL")))
 (|fine_mem_stack_TCC1| 0
  (|fine_mem_stack_TCC1-1| |nil| 3804969900
   ("" (SKEEP*) (("" (REWRITE GOOD_MEM_STACK) (("" (GRIND) NIL NIL)) NIL)) NIL)
   ((|good_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|fine_mem_stack| SUBTYPE "ltedfapeg.stack"
    "(ltedfapeg.good_stack?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.depth, ltedfapeg.A WITH [(ltedfapeg.pos(ltedfapeg.entry))(ltedfapeg.nt(ltedfapeg.entry)) := ltedfapeg.u]))")))
 (|fine_mem_stack| 0
  (|fine_mem_stack-1| |nil| 3804969200
   ("" (INDUCT "depth")
    (("1" (SKEEP*)
      (("1" (EXPAND FINE_STACK?)
        (("1" (EXPAND GOOD_STACK? -) (("1" (GROUND) NIL NIL)) NIL)) NIL))
      NIL)
     ("2" (SKEEP*)
      (("2" (EXPAND FINE_STACK? +)
        (("2" (EXPAND GOOD_STACK? -3)
          (("2" (GROUND)
            (("1" (REWRITE MEM_MEM_STACK)
              (("1" (EXPAND MEM_STACK? 2)
                (("1" (GROUND)
                  (("1" (LIFT-IF +)
                    (("1" (GROUND)
                      (("1" (LIFT-IF +)
                        (("1" (GROUND)
                          (("1" (EXTENSIONALITY "(push?)")
                            (("1" (FORWARD-CHAIN -) (("1" (ASSERT) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (INST?)
                            (("2" (GROUND)
                              (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (GRIND) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE -5 4)
                (("2" (LIFT-IF +)
                  (("2" (GROUND)
                    (("2" (GROUND)
                      (("2" (EXPAND MEM_STACK? +)
                        (("2" (GROUND)
                          (("2" (EXTENSIONALITY "(push?)")
                            (("2" (FORWARD-CHAIN -) (("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (HIDE -5 4) (("3" (GRIND) NIL NIL)) NIL)
               ("4" (HIDE -6 3)
                (("4" (GRIND)
                  (("4" (EXTENSIONALITY "(push?)")
                    (("4" (INST?) (("4" (GROUND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL)
               ("5" (HIDE -5 4)
                (("5" (GRIND)
                  (("1" (EXTENSIONALITY "(push?)")
                    (("1" (INST?) (("1" (GROUND) NIL NIL)) NIL)) NIL)
                   ("2" (EXTENSIONALITY "(push?)")
                    (("2" (INST?) (("2" (GROUND) NIL NIL)) NIL)) NIL)
                   ("3" (EXTENSIONALITY "(push?)")
                    (("3" (INST?) (("3" (GROUND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (REWRITE MEM_MEM_STACK)
              (("1" (EXPAND MEM_STACK? 2)
                (("1" (GROUND)
                  (("1" (LIFT-IF +)
                    (("1" (GROUND)
                      (("1" (LIFT-IF +)
                        (("1" (GROUND)
                          (("1" (EXTENSIONALITY "(push?)")
                            (("1" (FORWARD-CHAIN -) (("1" (ASSERT) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (INST?)
                            (("2" (GROUND)
                              (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (GRIND) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE -5 4)
                (("2" (HIDE -1)
                  (("2" (GRIND)
                    (("2" (EXTENSIONALITY "(push?)")
                      (("2" (INST?) (("2" (GROUND) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (HIDE -5 4) (("3" (HIDE -1) (("3" (GRIND) NIL NIL)) NIL))
                NIL)
               ("4" (HIDE -6 3)
                (("4" (HIDE -2)
                  (("4" (GRIND)
                    (("4" (EXTENSIONALITY "(push?)")
                      (("4" (INST?) (("4" (GROUND) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("5" (HIDE -5 4)
                (("5" (HIDE -1)
                  (("5" (GRIND)
                    (("1" (HIDE -5 4)
                      (("1" (HIDE -1)
                        (("1" (GRIND)
                          (("1" (EXTENSIONALITY "(push?)")
                            (("1" (INST?) (("1" (GROUND) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXTENSIONALITY "(push?)")
                      (("2" (INST?) (("2" (GROUND) NIL NIL)) NIL)) NIL)
                     ("3" (EXTENSIONALITY "(push?)")
                      (("3" (INST?) (("3" (GROUND) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)
     ("4" (HIDE 2) (("4" (GRIND) NIL NIL)) NIL)
     ("5" (HIDE 2) (("5" (GRIND) NIL NIL)) NIL)
     ("6" (HIDE 2)
      (("6" (SKEEP*) (("6" (USE GOOD_MEM_STACK) (("6" (GROUND) NIL NIL)) NIL))
        NIL))
      NIL)
     ("7" (GRIND) NIL NIL) ("8" (HIDE 2) (("8" (GRIND) NIL NIL)) NIL)
     ("9" (HIDE 2) (("9" (GRIND) NIL NIL)) NIL)
     ("10" (HIDE 2) (("10" (GRIND) NIL NIL)) NIL)
     ("11" (HIDE 2) (("11" (GRIND) NIL NIL)) NIL)
     ("12" (HIDE 2) (("12" (GRIND) NIL NIL)) NIL))
    NIL)
   ((|good_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|mem_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|ent_push_extensionality| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|mem_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|fine_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|upto_induction| FORMULA-DECL NIL |bounded_nat_inductions| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL))
   SHOSTAK))
 (|loop_ready?_TCC1| 0
  (|loop_ready?_TCC1-1| |nil| 3804455654
   ("" (SKEEP* :PREDS? T)
    (("" (TYPEPRED "A(i)(n1)") (("" (GRIND) NIL NIL)) NIL)) NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|loop_ready?| SUBTYPE
    "(number_fields.+)(ltedfapeg.i, ltedfapeg.span(ltedfapeg.A(ltedfapeg.i)(ltedfapeg.n1)))"
    "upto(ltedfapeg.len)")))
 (|good_fail?_TCC1| 0
  (|good_fail?_TCC1-1| |nil| 3885853547 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL (|good_fail?| SUBTYPE "ltedfapeg.i" "below(ltedfapeg.len)")))
 (|good_fail?_TCC2| 0
  (|good_fail?_TCC3-1| |nil| 3804991042 ("" (SUBTYPE-TCC) NIL NIL)
   ((|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_fail?| SUBTYPE "ltedfapeg.A(ltedfapeg.i)(ltedfapeg.n1)"
    "{x: ltedfapeg.ent | booleans.OR(ltedfapeg.fail?(x), ltedfapeg.good?(x))}")))
 (|good_fail?_TCC3| 0
  (|good_fail?_TCC7-1| |nil| 3806878024 ("" (SUBTYPE-TCC) NIL NIL)
   ((|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_fail?| SUBTYPE "ltedfapeg.A(ltedfapeg.i)(ltedfapeg.n3)"
    "{x: ltedfapeg.ent | booleans.OR(ltedfapeg.fail?(x), ltedfapeg.good?(x))}")))
 (|good_fail?_TCC4| 0
  (|good_fail?_TCC3-1| |nil| 3804455654
   ("" (GRIND) (("" (TYPEPRED "A!1(i!1)(n1!1)") (("" (GRIND) NIL NIL)) NIL))
    NIL)
   ((|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL))
   NIL
   (|good_fail?| SUBTYPE
    "(number_fields.+)(ltedfapeg.i, ltedfapeg.span(ltedfapeg.A(ltedfapeg.i)(ltedfapeg.n1)))"
    "upto(ltedfapeg.len)")))
 (|good_fail?_TCC5| 0
  (|good_fail?_TCC5-1| |nil| 3806878024 ("" (SUBTYPE-TCC) NIL NIL)
   ((|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_fail?| SUBTYPE "ltedfapeg.A(ltedfapeg.i)(ltedfapeg.n1)"
    "{x: ltedfapeg.ent | booleans.OR(ltedfapeg.fail?(x), ltedfapeg.good?(x))}")))
 (|good_fail?_TCC6| 0
  (|good_fail?_TCC6-1| |nil| 3806878024 ("" (SUBTYPE-TCC) NIL NIL)
   ((|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_fail?| SUBTYPE
    "ltedfapeg.A((number_fields.+)(ltedfapeg.i, ltedfapeg.span(ltedfapeg.A(ltedfapeg.i)(ltedfapeg.n1))))(ltedfapeg.n2)"
    "{x: ltedfapeg.ent | booleans.OR(ltedfapeg.fail?(x), ltedfapeg.good?(x))}")))
 (|good_loop?_TCC1| 0
  (|good_loop?_TCC1-1| |nil| 3804455654
   ("" (SKEEP* :PREDS? T)
    (("" (TYPEPRED "A(i)(n1)") (("" (GRIND) NIL NIL)) NIL)) NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|good_loop?| SUBTYPE
    "(number_fields.+)(ltedfapeg.i, ltedfapeg.span(ltedfapeg.A(ltedfapeg.i)(ltedfapeg.n1)))"
    "upto(ltedfapeg.len)")))
 (|good_good?_TCC1| 0
  (|good_good?_TCC1-1| |nil| 3886088192 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|good_good?| SUBTYPE "(number_fields.-)(ltedfapeg.len, ltedfapeg.i)"
    "nat")))
 (|good_good?_TCC2| 0
  (|good_good?_TCC2-1| |nil| 3804455654 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL (|good_good?| SUBTYPE "ltedfapeg.i" "below(ltedfapeg.len)")))
 (|good_good?_TCC3| 0
  (|good_good?_TCC4-1| |nil| 3804455654
   ("" (SKEEP* :PREDS? T)
    (("" (TYPEPRED "A(i)(n1)") (("" (GRIND) NIL NIL)) NIL)) NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|good_good?| SUBTYPE
    "(number_fields.+)(ltedfapeg.i, ltedfapeg.span(ltedfapeg.A(ltedfapeg.i)(ltedfapeg.n1)))"
    "upto(ltedfapeg.len)")))
 (|good_good?_TCC4| 0
  (|good_good?_TCC5-1| |nil| 3804991042 ("" (SUBTYPE-TCC) NIL NIL)
   ((|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_good?| SUBTYPE "ltedfapeg.A(ltedfapeg.i)(ltedfapeg.n1)"
    "{x: ltedfapeg.ent | booleans.OR(ltedfapeg.fail?(x), ltedfapeg.good?(x))}")))
 (|good_good?_TCC5| 0
  (|good_good?_TCC6-1| |nil| 3806878024 ("" (SUBTYPE-TCC) NIL NIL)
   ((|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_good?| SUBTYPE
    "ltedfapeg.A((number_fields.+)(ltedfapeg.i, ltedfapeg.span(ltedfapeg.A(ltedfapeg.i)(ltedfapeg.n1))))(ltedfapeg.n2)"
    "{x: ltedfapeg.ent | booleans.OR(ltedfapeg.fail?(x), ltedfapeg.good?(x))}")))
 (|good_good?_TCC6| 0
  (|good_good?_TCC7-1| |nil| 3806878024 ("" (SUBTYPE-TCC) NIL NIL)
   ((|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_good?| SUBTYPE "ltedfapeg.A(ltedfapeg.i)(ltedfapeg.n1)"
    "{x: ltedfapeg.ent | booleans.OR(ltedfapeg.fail?(x), ltedfapeg.good?(x))}")))
 (|good_good?_TCC7| 0
  (|good_good?_TCC8-1| |nil| 3806878024 ("" (SUBTYPE-TCC) NIL NIL)
   ((|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_good?| SUBTYPE "ltedfapeg.A(ltedfapeg.i)(ltedfapeg.n3)"
    "{x: ltedfapeg.ent | booleans.OR(ltedfapeg.fail?(x), ltedfapeg.good?(x))}")))
 (|good_tscaffold?_TCC1| 0
  (|good_tscaffold?_TCC1-1| |nil| 3806632141 ("" (SUBTYPE-TCC) NIL NIL)
   ((|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_tscaffold?| SUBTYPE "ltedfapeg.A(ltedfapeg.i)(ltedfapeg.n)"
    "{x: ltedfapeg.ent | booleans.OR(ltedfapeg.fail?(x), ltedfapeg.good?(x))}")))
 (|good_good_tscaffold| 0
  (|good_good_tscaffold-2| "updated with depth bound" 3806872130
   ("" (SKEEP*)
    (("" (EXPAND "good_tscaffold?")
      (("" (SKEEP*)
        (("" (INST - "i" "n")
          (("" (EXPAND "good_entry?")
            (("" (LIFT-IF + :UPDATES? NIL)
              (("" (GROUND)
                (("1" (CASE "i = pos!1" "n = nt!1")
                  (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)
                   ("2" (ASSERT)
                    (("2" (EXPAND "good_fail?")
                      (("2" (LIFT-IF)
                        (("2" (GROUND)
                          (("1" (GRIND) NIL NIL)
                           ("2" (HIDE -11)
                            (("2" (GRIND :EXCLUDE "gfcount") NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (GRIND :EXCLUDE "gfcount") NIL NIL))
                  NIL)
                 ("2" (HIDE -5)
                  (("2" (EXPAND "gfcount" +)
                    (("2" (REWRITE "scafcount_update")
                      (("2" (HIDE -6)
                        (("2" (REVEAL -3)
                          (("2" (LAZY-GRIND :IF-MATCH ALL :EXCLUDE "scafcount")
                            NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (INST? -) (("3" (GRIND :EXCLUDE "gfcount") NIL NIL)) NIL)
                 ("4" (HIDE -7)
                  (("4" (REVEAL -2)
                    (("4" (LAZY-GRIND :IF-MATCH ALL :EXCLUDE "scafcount") NIL
                      NIL))
                    NIL))
                  NIL)
                 ("5" (TYPEPRED "u")
                  (("5" (HIDE -5 -7)
                    (("5" (TYPEPRED "A(i)(n)")
                      (("5" (GRIND :EXCLUDE "gfcount") NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("6" (HIDE -6)
                  (("6" (HIDE -2)
                    (("6" (LIFT-IF)
                      (("6" (GROUND)
                        (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
                         ("3" (LIFT-IF)
                          (("3" (GROUND)
                            (("1" (EXPAND "good_good?")
                              (("1" (LIFT-IF)
                                (("1" (GROUND)
                                  (("1" (GROUND)
                                    (("1" (GRIND) NIL NIL)
                                     ("2" (GRIND :EXCLUDE "max") NIL NIL))
                                    NIL)
                                   ("2" (GRIND :EXCLUDE "max") NIL NIL)
                                   ("3" (GRIND :EXCLUDE "max") NIL NIL)
                                   ("4" (GRIND :EXCLUDE "max") NIL NIL)
                                   ("5" (GRIND :EXCLUDE "max") NIL NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (GRIND) NIL NIL))
                            NIL))
                          NIL)
                         ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("7" (HIDE -5 -7)
                  (("7" (TYPEPRED "A(i)(n)")
                    (("7" (EXPAND "gfcount" +)
                      (("7" (REWRITE "scafcount_update")
                        (("7" (REVEAL -3)
                          (("7" (LAZY-GRIND :IF-MATCH ALL :EXCLUDE "scafcount")
                            NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("8" (HIDE -4 -6)
                  (("8" (REVEAL -3)
                    (("8" (LAZY-GRIND :IF-MATCH ALL :EXCLUDE "scafcount") NIL
                      NIL))
                    NIL))
                  NIL)
                 ("9" (HIDE -5) (("9" (GRIND :EXCLUDE "max") NIL NIL)) NIL)
                 ("10" (HIDE -6)
                  (("10" (EXPAND "gfcount")
                    (("10" (REVEAL -2)
                      (("10" (HIDE -5)
                        (("10" (REWRITE "scafcount_update")
                          (("10" (LIFT-IF)
                            (("10" (GROUND)
                              (("10" (LIFT-IF)
                                (("10" (GROUND)
                                  (("10" (EXPAND "fine_entry?")
                                    (("10" (EXPAND "good_fail?")
                                      (("10" (LIFT-IF)
                                        (("10" (GROUND)
                                          (("1" (INST? :COPY? T)
                                            (("1"
                                              (INST? :SUBST
                                               ("n" "lelse(G(nt!1))"))
                                              (("1"
                                                (GRIND :EXCLUDE "scafcount")
                                                NIL NIL))
                                              NIL))
                                            NIL)
                                           ("2" (INST? :COPY? T)
                                            (("2"
                                              (INST -
                                               "span(A(pos!1)(fst(G(nt!1)))) + pos!1"
                                               "lthen(G(nt!1))")
                                              (("2"
                                                (GRIND :EXCLUDE "scafcount")
                                                NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("11" (INST?) (("11" (GRIND :EXCLUDE "scafcount") NIL NIL))
                  NIL)
                 ("12" (HIDE -4 -6)
                  (("12" (EXPAND "gfcount")
                    (("12" (REWRITE "scafcount_update")
                      (("12" (REVEAL -3)
                        (("12"
                          (LAZY-GRIND :IF-MATCH ALL :EXCLUDE
                           ("max" "scafcount"))
                          NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("13" (TYPEPRED "A(i)(n)")
                  (("13" (TYPEPRED "u")
                    (("13" (HIDE -5 -7)
                      (("13" (GRIND :EXCLUDE ("max" "gfcount")) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("14" (HIDE -5)
                  (("14" (TYPEPRED "A(i)(n)")
                    (("14" (TYPEPRED "u")
                      (("14" (GRIND :EXCLUDE ("max" "gfcount")) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("15" (HIDE -6)
                  (("15" (REVEAL -2)
                    (("15" (EXPAND "gfcount")
                      (("15" (REWRITE "scafcount_update")
                        (("15" (LIFT-IF)
                          (("15" (GROUND)
                            (("1" (LIFT-IF)
                              (("1" (GROUND)
                                (("1" (HIDE -15)
                                  (("1" (GRIND :EXCLUDE ("max" "scafcount"))
                                    NIL NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (LIFT-IF)
                              (("2" (GROUND)
                                (("2" (HIDE -15)
                                  (("2" (GRIND :EXCLUDE ("max" "scafcount"))
                                    NIL NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("3" (LIFT-IF)
                              (("3" (GROUND)
                                (("3" (HIDE -16)
                                  (("3" (GRIND :EXCLUDE ("max" "scafcount"))
                                    NIL NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("4" (LIFT-IF)
                              (("4" (GROUND)
                                (("4" (EXPAND "fine_entry?")
                                  (("4" (GROUND)
                                    (("4" (EXPAND "good_good?")
                                      (("4" (LIFT-IF)
                                        (("4" (GROUND)
                                          (("1" (INST? :COPY? T)
                                            (("1"
                                              (INST -
                                               "span(A(pos!1)(fst(G(nt!1)))) + pos!1"
                                               "lthen(G(nt!1))")
                                              (("1"
                                                (GRIND :EXCLUDE "scafcount")
                                                NIL NIL))
                                              NIL))
                                            NIL)
                                           ("2" (INST? :COPY? T)
                                            (("2"
                                              (INST - "pos!1" "lelse(G(nt!1))")
                                              (("2"
                                                (GRIND :EXCLUDE "scafcount")
                                                NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("16" (EXPAND "gfcount" +)
                  (("16" (REWRITE "scafcount_update")
                    (("16" (HIDE -5)
                      (("16" (REVEAL -2)
                        (("16"
                          (LAZY-GRIND :IF-MATCH ALL :EXCLUDE
                           ("max" "scafcount"))
                          NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|dfaparse| DEF-DECL "(goodDfaResult?(len, startpos))" |dfa| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scafcount_update| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|lthen| ADT-ACCESSOR-DECL "[(lte?) -> non_terminal]" |ltedfapeg| NIL)
    (|span| ADT-ACCESSOR-DECL "[(good?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|good?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|lelse| ADT-ACCESSOR-DECL "[(lte?) -> non_terminal]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|DfaParse| CONST-DECL "(goodDfaResult?(len, startpos))" |dfa| NIL)
    (|plus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lte?| ADT-RECOGNIZER-DECL "[prepeg -> boolean]" |ltedfapeg| NIL)
    (|fst| ADT-ACCESSOR-DECL "[(lte?) -> non_terminal]" |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK)
  (|good_good_tscaffold-1| |nil| 3804994419
   ("" (SKEEP*)
    (("" (EXPAND "good_tscaffold?")
      (("" (SKEEP*)
        (("" (INST - I N)
          (("" (EXPAND GOOD_ENTRY?)
            (("" (LIFT-IF + :UPDATES? NIL)
              (("" (GROUND)
                (("1" (CASE "i = pos(entry)" "n = nt(entry)")
                  (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)
                   ("2" (ASSERT)
                    (("2" (HIDE -7 -8) (("2" (GRIND) NIL NIL)) NIL)) NIL)
                   ("3" (HIDE -6 -7) (("3" (GRIND) NIL NIL)) NIL))
                  NIL)
                 ("2" (CASE "i = pos(entry)" "n = nt(entry)")
                  (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)
                   ("2" (ASSERT)
                    (("2" (FORWARD-CHAIN -) (("2" (GRIND) NIL NIL)) NIL)) NIL)
                   ("3" (ASSERT)
                    (("3" (FORWARD-CHAIN -) (("3" (GRIND) NIL NIL)) NIL)) NIL))
                  NIL)
                 ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|state_TCC1| 0
  (|state_TCC1-1| |nil| 3804904050 ("" (GRIND) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL (|state| SUBTYPE "ltedfapeg.stack" "(ltedfapeg.push?)")))
 (|state_TCC2| 0
  (|state_TCC1-1| |nil| 3804730988 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|state| SUBTYPE "ltedfapeg.pos(ltedfapeg.stack)" "upto(ltedfapeg.len)")))
 (|state_TCC3| 0
  (|state_TCC2-1| |nil| 3804730988 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL (|state| SUBTYPE "ltedfapeg.nt(ltedfapeg.stack)" "non_terminal")))
 (|step_TCC1| 0
  (|step_TCC66-1| |nil| 3804455654 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL (|step| SUBTYPE "ltedfapeg.stack" "(ltedfapeg.push?)")))
 (|step_TCC2| 0
  (|step_TCC1-1| |nil| 3804547853 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL (|step| SUBTYPE "ltedfapeg.cur" "non_terminal")))
 (|step_TCC3| 0
  (|step_TCC10-1| |nil| 3804455654 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL (|step| SUBTYPE "ltedfapeg.pos" "upto(ltedfapeg.len)")))
 (|step_TCC4| 0
  (|step_TCC4-1| |nil| 3804455654 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.good(0, 0)"
    "(ltedfapeg.nice_entry?(ltedfapeg.len, ltedfapeg.pos))")))
 (|step_TCC5| 0
  (|step_TCC5-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (TYPEPRED "scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)
           ("2" (USE "good_good_tscaffold")
            (("1" (GROUND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)
               ("3" (SKEEP*)
                (("3" (TYPEPRED "lflag")
                  (("3" (GROUND)
                    (("1" (INST?) NIL NIL)
                     ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)
                     ("3" (INST?) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE -2 2)
              (("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|sigma| DEF-DECL "nat" |ltedfapeg| NIL)
    (|good_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|fine_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|good| ADT-CONSTRUCTOR-DECL "[[uint64, uint32] -> (good?)]" |ltedfapeg|
     NIL)
    (|good?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos!1| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_good_tscaffold| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE
    "ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.good(0, 0)]"
    "(ltedfapeg.fine_scaffold?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.s)(ltedfapeg.start, ltedfapeg.rootnt))")))
 (|step_TCC6| 0
  (|step_TCC1-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (SPLIT +)
      (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
       ("2" (TYPEPRED "depth") (("2" (GRIND) NIL NIL)) NIL)
       ("3" (TYPEPRED "depth")
        (("3" (TYPEPRED "stack")
          (("3" (EXPAND "good_depth?")
            (("3" (EXPAND "pushcount")
              (("3" (EXPAND "scafcount")
                (("3"
                  (USE "sigma_dec"
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" "pos!1" "j" "len"))
                  (("1" (GROUND)
                    (("1" (LIFT-IF)
                      (("1" (GROUND)
                        (("1" (TYPEPRED "pos" ("stack"))
                          (("1" (GRIND) NIL NIL)) NIL)
                         ("2"
                          (CASE-REPLACE "(LAMBDA (i: upto(len)):
                               count(num_non_terminals)(push?)
                                    (St`scaf WITH [(pos!1)(cur) := good(0, 0)](i))) = ((LAMBDA (i: upto(len)):
                               count(num_non_terminals)(push?)(St`scaf(i)))
                              WITH [(pos!1)
                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                          1])")
                          (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL)
                           ("2" (HIDE -1 3)
                            (("2" (APPLY-EXTENSIONALITY)
                              (("1" (HIDE 2)
                                (("1" (EXPAND "count")
                                  (("1" (CASE "pos!1 = x!1")
                                    (("1" (ASSERT)
                                      (("1"
                                        (CASE-REPLACE
                                         "{i: below(num_non_terminals) |
                                          push?(St`scaf(x!1) WITH [(cur) := good(0, 0)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1" (REWRITE "card_remove")
                                          (("1" (HIDE -1)
                                            (("1" (LIFT-IF)
                                              (("1" (GROUND)
                                                (("1" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE -1 2)
                                            (("2" (REWRITE "count_TCC1")
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2)
                                          (("2" (APPLY-EXTENSIONALITY)
                                            (("1" (HIDE 2)
                                              (("1" (HIDE -3 -4 -6)
                                                (("1" (GRIND) NIL NIL)) NIL))
                                              NIL)
                                             ("2" (GRIND) NIL NIL))
                                            NIL))
                                          NIL)
                                         ("3" (GRIND) NIL NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE 2)
                                (("2" (EXPAND "count")
                                  (("2"
                                    (LEMMA
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("2" (INST?)
                                      (("1" (GROUND)
                                        (("1" (EXPAND "nonempty?")
                                          (("1" (EXPAND "empty?")
                                            (("1" (INST - "cur")
                                              (("1" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (REWRITE "count_tcc1")
                                        (("2" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("3" (HIDE -1 3)
                            (("3" (EXPAND "count")
                              (("3"
                                (LEMMA
                                 "nonempty_card[below(num_non_terminals)]")
                                (("3" (INST?)
                                  (("1" (GRIND) NIL NIL)
                                   ("2" (REWRITE "count_tcc1")
                                    (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("4" (GRIND) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "count")
                      (("2" (LEMMA "nonempty_card[below(num_non_terminals)]")
                        (("2" (INST?)
                          (("1" (GRIND) NIL NIL)
                           ("2" (REWRITE "count_tcc1") (("2" (GRIND) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sigma_dec| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|arr| TYPE-EQ-DECL NIL |arrayCount| NIL)
    (|good?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|good| ADT-CONSTRUCTOR-DECL "[[uint64, uint32] -> (good?)]" |ltedfapeg|
     NIL)
    (G SKOLEM-CONST-DECL "lang_spec" |ltedfapeg| NIL)
    (|s| SKOLEM-CONST-DECL "strings(len)" |ltedfapeg| NIL)
    (|start| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|rootnt| SKOLEM-CONST-DECL "non_terminal" |ltedfapeg| NIL)
    (|St| SKOLEM-CONST-DECL "state(len, G, s, start, rootnt)" |ltedfapeg| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|pos!1| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|x!1| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|card_remove| FORMULA-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|count_TCC1| SUBTYPE-TCC NIL |arrayCount| NIL)
    (|remove| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|nonempty_card| FORMULA-DECL NIL |finite_sets| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "(number_fields.-)(ltedfapeg.depth, 1)"
    "(ltedfapeg.good_depth?(ltedfapeg.len, ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.good(0, 0)]))")))
 (|step_TCC7| 0
  (|step_TCC2-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (GROUND)
      (("1" (TYPEPRED "rest")
        (("1" (TYPEPRED "stack")
          (("1" (EXPAND "good_stack?") (("1" (GRIND) NIL NIL)) NIL)) NIL))
        NIL)
       ("2" (LEMMA "good_mem_stack")
        (("2" (INST - G "depth - 1" "len" "scaf" "stack" "rest" "good(0, 0)")
          (("1" (GROUND)
            (("1" (HIDE 2)
              (("1" (TYPEPRED "stack")
                (("1" (EXPAND "good_stack?" -)
                  (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)
             ("3" (TYPEPRED "stack")
              (("3" (EXPAND "fine_stack?" -)
                (("3" (GROUND) (("3" (GRIND) NIL NIL)) NIL)) NIL))
              NIL)
             ("4" (TYPEPRED "stack") (("4" (GRIND) NIL NIL)) NIL))
            NIL)
           ("2" (HIDE 2) (("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL))
            NIL)
           ("3" (TYPEPRED "stack") (("3" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL)
       ("3" (TYPEPRED "stack")
        (("3" (EXPAND "fine_stack?" -)
          (("3" (GROUND)
            (("1" (GRIND) NIL NIL)
             ("2" (LEMMA "fine_mem_stack")
              (("2" (GROUND)
                (("2" (EXPAND "good_stack?" -)
                  (("2"
                    (INST - G "depth - 1" "len" "scaf" "stack" "rest"
                     "good(0, 0)")
                    (("1" (GROUND)
                      (("1" (EXPAND "good_stack?" -) (("1" (PROPAX) NIL NIL))
                        NIL)
                       ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)
                       ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)
                       ("6" (GRIND) NIL NIL) ("7" (GRIND) NIL NIL)
                       ("8" (GRIND) NIL NIL) ("9" (GRIND) NIL NIL)
                       ("10" (GRIND) NIL NIL))
                      NIL)
                     ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|good| ADT-CONSTRUCTOR-DECL "[[uint64, uint32] -> (good?)]" |ltedfapeg|
     NIL)
    (|good?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|stack| SKOLEM-CONST-DECL "(fine_stack?(len, G, St`depth, St`scaf))"
     |ltedfapeg| NIL)
    (|depth| SKOLEM-CONST-DECL "(good_depth?(len, St`scaf))" |ltedfapeg| NIL)
    (|St| SKOLEM-CONST-DECL "state(len, G, s, start, rootnt)" |ltedfapeg| NIL)
    (|rootnt| SKOLEM-CONST-DECL "non_terminal" |ltedfapeg| NIL)
    (|start| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|s| SKOLEM-CONST-DECL "strings(len)" |ltedfapeg| NIL)
    (G SKOLEM-CONST-DECL "lang_spec" |ltedfapeg| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|fine_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|good_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|fine_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|mem_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.rest"
    "(ltedfapeg.fine_stack?(ltedfapeg.len, ltedfapeg.G, (number_fields.-)(ltedfapeg.depth, 1), ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.good(0, 0)]))")))
 (|step_TCC8| 0
  (|step_TCC83-1| |nil| 3804706560
   ("" (SKEEP*)
    (("" (GROUND)
      (("1" (TYPEPRED "lflag")
        (("1" (ASSERT)
          (("1" (HIDE -2)
            (("1" (GROUND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (EXPAND "loop_ready?") (("2" (PROPAX) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (TYPEPRED "lflag")
        (("2" (ASSERT) (("2" (HIDE -1) (("2" (LAZY-GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.St`lflag"
    "{b: booleans.bool | IF b THEN booleans.OR(ltedfapeg.nt(ltedfapeg.rest) = ltedfapeg.num_non_terminals, ltedfapeg.loop_ready?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.good(0, 0)], ltedfapeg.pos(ltedfapeg.rest), ltedfapeg.nt(ltedfapeg.rest))) ELSE FORALL (i: naturalnumbers.upto(ltedfapeg.len)), (n: non_terminal): (booleans.NOT)(ltedfapeg.loop?(ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.good(0, 0)](i)(n))) ENDIF}")))
 (|step_TCC9| 0
  (|step_TCC8-1| |nil| 3804455654 ("" (SUBTYPE-TCC) NIL NIL)
   ((|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.fail(0)"
    "(ltedfapeg.nice_entry?(ltedfapeg.len, ltedfapeg.pos))")))
 (|step_TCC10| 0
  (|step_TCC9-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (TYPEPRED "scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)
           ("2" (USE "good_good_tscaffold")
            (("1" (GROUND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)
               ("3" (TYPEPRED "lflag")
                (("3" (SKEEP*)
                  (("3" (GROUND)
                    (("1" (INST?) NIL NIL) ("2" (GRIND) NIL NIL)
                     ("3" (INST?) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (GRIND) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|sigma| DEF-DECL "nat" |ltedfapeg| NIL)
    (|good_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|fine_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|fail| ADT-CONSTRUCTOR-DECL "[uint64 -> (fail?)]" |ltedfapeg| NIL)
    (|fail?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos!1| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_good_tscaffold| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE
    "ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.fail(0)]"
    "(ltedfapeg.fine_scaffold?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.s)(ltedfapeg.start, ltedfapeg.rootnt))")))
 (|step_TCC11| 0
  (|step_TCC6-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (SPLIT +)
      (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
       ("2" (TYPEPRED "depth") (("2" (GRIND) NIL NIL)) NIL)
       ("3" (TYPEPRED "depth")
        (("3" (TYPEPRED "stack")
          (("3" (EXPAND "good_depth?")
            (("3" (EXPAND "pushcount")
              (("3" (EXPAND "scafcount")
                (("3"
                  (USE "sigma_dec"
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" "pos!1" "j" "len"))
                  (("1" (GROUND)
                    (("1" (LIFT-IF)
                      (("1" (GROUND)
                        (("1" (TYPEPRED "pos" ("stack"))
                          (("1" (GRIND) NIL NIL)) NIL)
                         ("2"
                          (CASE-REPLACE "(LAMBDA (i: upto(len)):
                                       count(num_non_terminals)(push?)
                                            (St`scaf WITH [(pos!1)(cur) := fail(0)](i))) = ((LAMBDA (i: upto(len)):
                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                      WITH [(pos!1)
                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                  1])")
                          (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL)
                           ("2" (HIDE -1 3)
                            (("2" (APPLY-EXTENSIONALITY)
                              (("1" (HIDE 2)
                                (("1" (EXPAND "count")
                                  (("1" (CASE "pos!1 = x!1")
                                    (("1" (ASSERT)
                                      (("1"
                                        (CASE-REPLACE
                                         "{i: below(num_non_terminals) |
                                                        push?(St`scaf(x!1) WITH [(cur) := fail(0)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1" (REWRITE "card_remove")
                                          (("1" (HIDE -1)
                                            (("1" (LIFT-IF)
                                              (("1" (GROUND)
                                                (("1" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE -1 2)
                                            (("2" (REWRITE "count_TCC1")
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2)
                                          (("2" (APPLY-EXTENSIONALITY)
                                            (("1" (HIDE 2)
                                              (("1" (HIDE -3 -4 -6)
                                                (("1" (GRIND) NIL NIL)) NIL))
                                              NIL)
                                             ("2" (GRIND) NIL NIL))
                                            NIL))
                                          NIL)
                                         ("3" (GRIND) NIL NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE 2)
                                (("2" (EXPAND "count")
                                  (("2"
                                    (LEMMA
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("2" (INST?)
                                      (("1" (GROUND)
                                        (("1" (EXPAND "nonempty?")
                                          (("1" (EXPAND "empty?")
                                            (("1" (INST - "cur")
                                              (("1" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (REWRITE "count_tcc1")
                                        (("2" (HIDE 2) (("2" (GRIND) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("3" (HIDE -1 3)
                                (("3" (EXPAND "count")
                                  (("3"
                                    (LEMMA
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("3" (INST?)
                                      (("1" (GRIND) NIL NIL)
                                       ("2" (REWRITE "count_tcc1")
                                        (("2" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (EXPAND "count")
                            (("3"
                              (LEMMA "nonempty_card[below(num_non_terminals)]")
                              (("3" (INST?)
                                (("1" (GRIND) NIL NIL)
                                 ("2" (REWRITE "count_tcc1")
                                  (("2" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("4" (GRIND) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "count")
                      (("2" (LEMMA "nonempty_card[below(num_non_terminals)]")
                        (("2" (INST?)
                          (("1" (GRIND) NIL NIL)
                           ("2" (REWRITE "count_tcc1") (("2" (GRIND) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sigma_dec| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|arr| TYPE-EQ-DECL NIL |arrayCount| NIL)
    (|fail?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|fail| ADT-CONSTRUCTOR-DECL "[uint64 -> (fail?)]" |ltedfapeg| NIL)
    (G SKOLEM-CONST-DECL "lang_spec" |ltedfapeg| NIL)
    (|s| SKOLEM-CONST-DECL "strings(len)" |ltedfapeg| NIL)
    (|start| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|rootnt| SKOLEM-CONST-DECL "non_terminal" |ltedfapeg| NIL)
    (|St| SKOLEM-CONST-DECL "state(len, G, s, start, rootnt)" |ltedfapeg| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|pos!1| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|x!1| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|card_remove| FORMULA-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|count_TCC1| SUBTYPE-TCC NIL |arrayCount| NIL)
    (|remove| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|nonempty_card| FORMULA-DECL NIL |finite_sets| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "(number_fields.-)(ltedfapeg.depth, 1)"
    "(ltedfapeg.good_depth?(ltedfapeg.len, ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.fail(0)]))")))
 (|step_TCC12| 0
  (|step_TCC7-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (GROUND)
      (("1" (TYPEPRED "rest")
        (("1" (TYPEPRED "stack")
          (("1" (EXPAND "good_stack?") (("1" (GRIND) NIL NIL)) NIL)) NIL))
        NIL)
       ("2" (LEMMA "good_mem_stack")
        (("2" (INST - "G" "depth - 1" "len" "scaf" "stack" "rest" "fail(0)")
          (("1" (GROUND)
            (("1" (HIDE 2)
              (("1" (TYPEPRED "stack")
                (("1" (EXPAND "good_stack?" -)
                  (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)
             ("3" (TYPEPRED "stack")
              (("3" (EXPAND "fine_stack?" -)
                (("3" (GROUND) (("3" (GRIND) NIL NIL)) NIL)) NIL))
              NIL)
             ("4" (TYPEPRED "stack") (("4" (GRIND) NIL NIL)) NIL))
            NIL)
           ("2" (HIDE 2) (("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL))
            NIL)
           ("3" (TYPEPRED "stack")
            (("3" (EXPAND "fine_stack?" -)
              (("3" (GROUND)
                (("1" (GRIND) NIL NIL)
                 ("2" (LEMMA "fine_mem_stack")
                  (("2" (GROUND)
                    (("2" (EXPAND "good_stack?" -) (("2" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (TYPEPRED "stack")
        (("3" (EXPAND "fine_stack?" -)
          (("3" (GROUND)
            (("1" (GRIND) NIL NIL)
             ("2" (LEMMA "fine_mem_stack")
              (("2" (GROUND)
                (("2" (EXPAND "good_stack?" -)
                  (("2"
                    (INST - "G" "depth - 1" "len" "scaf" "stack" "rest"
                     "fail(0)")
                    (("1" (GROUND)
                      (("1" (EXPAND "good_stack?" -) (("1" (PROPAX) NIL NIL))
                        NIL)
                       ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)
                       ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)
                       ("6" (GRIND) NIL NIL) ("7" (GRIND) NIL NIL)
                       ("8" (GRIND) NIL NIL) ("9" (GRIND) NIL NIL)
                       ("10" (GRIND) NIL NIL))
                      NIL)
                     ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|fail| ADT-CONSTRUCTOR-DECL "[uint64 -> (fail?)]" |ltedfapeg| NIL)
    (|fail?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|stack| SKOLEM-CONST-DECL "(fine_stack?(len, G, St`depth, St`scaf))"
     |ltedfapeg| NIL)
    (|depth| SKOLEM-CONST-DECL "(good_depth?(len, St`scaf))" |ltedfapeg| NIL)
    (|St| SKOLEM-CONST-DECL "state(len, G, s, start, rootnt)" |ltedfapeg| NIL)
    (|rootnt| SKOLEM-CONST-DECL "non_terminal" |ltedfapeg| NIL)
    (|start| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|s| SKOLEM-CONST-DECL "strings(len)" |ltedfapeg| NIL)
    (G SKOLEM-CONST-DECL "lang_spec" |ltedfapeg| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|fine_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|fine_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|good_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|mem_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.rest"
    "(ltedfapeg.fine_stack?(ltedfapeg.len, ltedfapeg.G, (number_fields.-)(ltedfapeg.depth, 1), ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.fail(0)]))")))
 (|step_TCC13| 0
  (|step_TCC84-1| |nil| 3804706560
   ("" (SKEEP*)
    (("" (GROUND)
      (("1" (TYPEPRED "lflag")
        (("1" (ASSERT)
          (("1" (HIDE -2)
            (("1" (GROUND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (EXPAND "loop_ready?") (("2" (PROPAX) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (TYPEPRED "lflag")
        (("2" (ASSERT) (("2" (HIDE -1) (("2" (LAZY-GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.St`lflag"
    "{b: booleans.bool | IF b THEN booleans.OR(ltedfapeg.nt(ltedfapeg.rest) = ltedfapeg.num_non_terminals, ltedfapeg.loop_ready?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.fail(0)], ltedfapeg.pos(ltedfapeg.rest), ltedfapeg.nt(ltedfapeg.rest))) ELSE FORALL (i: naturalnumbers.upto(ltedfapeg.len)), (n: non_terminal): (booleans.NOT)(ltedfapeg.loop?(ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.fail(0)](i)(n))) ENDIF}")))
 (|step_TCC14| 0
  (|step_TCC44-1| |nil| 3804455654 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|DfaParse| CONST-DECL "(goodDfaResult?(len, startpos))" |dfa| NIL)
    (|dfaResult| TYPE-DECL NIL |dfa| NIL)
    (|goodDfaResult?| CONST-DECL "bool" |dfa| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL (|step| SUBTYPE "ltedfapeg.res" "(dfa.success?)")))
 (|step_TCC15| 0
  (|step_TCC15-1| |nil| 3897961030 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|DfaParse| CONST-DECL "(goodDfaResult?(len, startpos))" |dfa| NIL)
    (|dfaResult| TYPE-DECL NIL |dfa| NIL)
    (|goodDfaResult?| CONST-DECL "bool" |dfa| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL (|step| SUBTYPE "dfa.span(ltedfapeg.res)" "uint32")))
 (|step_TCC16| 0
  (|step_TCC14-1| |nil| 3804455654 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|DfaParse| CONST-DECL "(goodDfaResult?(len, startpos))" |dfa| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|dfaResult| TYPE-DECL NIL |dfa| NIL)
    (|goodDfaResult?| CONST-DECL "bool" |dfa| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.v"
    "(ltedfapeg.nice_entry?(ltedfapeg.len, ltedfapeg.pos))")))
 (|step_TCC17| 0
  (|step_TCC15-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (TYPEPRED "scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)
           ("2" (USE "good_good_tscaffold")
            (("1" (GROUND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (TYPEPRED "stack")
                (("2" (REPLACE -15 :HIDE? T)
                  (("2" (EXPAND "fine_entry?")
                    (("2" (GROUND)
                      (("2" (LIFT-IF)
                        (("2" (GROUND)
                          (("1" (TYPEPRED "res") (("1" (GRIND) NIL NIL)) NIL)
                           ("2" (TYPEPRED "res") (("2" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (TYPEPRED "lflag")
                (("3" (SKEEP*)
                  (("3" (GROUND)
                    (("1" (INST?) NIL NIL) ("2" (GRIND) NIL NIL)
                     ("3" (INST?) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE -2 2)
              (("2" (TYPEPRED "stack")
                (("2" (TYPEPRED "res") (("2" (GRIND) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|DfaParse| CONST-DECL "(goodDfaResult?(len, startpos))" |dfa| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|sigma| DEF-DECL "nat" |ltedfapeg| NIL)
    (|good_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|dfaResult| TYPE-DECL NIL |dfa| NIL)
    (|goodDfaResult?| CONST-DECL "bool" |dfa| NIL)
    (|fine_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|v| SKOLEM-CONST-DECL "ent" |ltedfapeg| NIL)
    (|pos!1| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_good_tscaffold| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE
    "ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.v]"
    "(ltedfapeg.fine_scaffold?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.s)(ltedfapeg.start, ltedfapeg.rootnt))")))
 (|step_TCC18| 0
  (|step_TCC12-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (SPLIT +)
      (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
       ("2" (TYPEPRED "depth") (("2" (GRIND) NIL NIL)) NIL)
       ("3" (TYPEPRED "depth")
        (("3" (TYPEPRED "stack")
          (("3" (EXPAND "good_depth?")
            (("3" (EXPAND "pushcount")
              (("3" (EXPAND "scafcount")
                (("3"
                  (USE "sigma_dec"
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" "pos!1" "j" "len"))
                  (("1" (GROUND)
                    (("1" (LIFT-IF -1)
                      (("1" (GROUND)
                        (("1" (GRIND) NIL NIL)
                         ("2"
                          (CASE-REPLACE "(LAMBDA (i: upto(len)):
                                                                         count(num_non_terminals)(push?)
                                                                              (St`scaf WITH [(pos!1)(cur) := v](i))) = ((LAMBDA (i: upto(len)):
                                                                         count(num_non_terminals)(push?)(St`scaf(i)))
                                                                        WITH [(pos!1)
                                                                                := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                    1])")
                          (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL)
                           ("2" (HIDE -1 3)
                            (("2" (APPLY-EXTENSIONALITY)
                              (("1" (HIDE 2)
                                (("1" (EXPAND "count")
                                  (("1" (CASE "pos!1 = x!1")
                                    (("1" (ASSERT)
                                      (("1"
                                        (CASE-REPLACE
                                         "{i: below(num_non_terminals) |
                                                                                                                  push?(St`scaf(x!1) WITH [(cur) := v](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1" (REWRITE "card_remove")
                                          (("1" (HIDE -1)
                                            (("1" (LIFT-IF +)
                                              (("1" (GROUND)
                                                (("1" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE -1 2)
                                            (("2" (REWRITE "count_TCC1")
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2)
                                          (("2" (APPLY-EXTENSIONALITY)
                                            (("1" (HIDE 2)
                                              (("1" (HIDE -3 -4 -6)
                                                (("1" (GRIND) NIL NIL)) NIL))
                                              NIL)
                                             ("2" (TYPEPRED "res")
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("3" (TYPEPRED "res")
                                          (("3" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE 2)
                                (("2" (EXPAND "count")
                                  (("2"
                                    (LEMMA
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("2" (INST?)
                                      (("1" (GROUND)
                                        (("1" (EXPAND "nonempty?")
                                          (("1" (EXPAND "empty?")
                                            (("1" (INST - "cur")
                                              (("1" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (REWRITE "count_tcc1")
                                        (("2" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("3" (HIDE 2)
                                (("3" (TYPEPRED "res") (("3" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (HIDE -1 3)
                            (("3" (EXPAND "count")
                              (("3"
                                (LEMMA
                                 "nonempty_card[below(num_non_terminals)]")
                                (("3" (INST?)
                                  (("1" (GRIND) NIL NIL)
                                   ("2" (REWRITE "count_tcc1")
                                    (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("4" (TYPEPRED "res") (("4" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "count")
                      (("2" (LEMMA "nonempty_card[below(num_non_terminals)]")
                        (("2" (INST?)
                          (("1" (GRIND) NIL NIL)
                           ("2" (REWRITE "count_tcc1") (("2" (GRIND) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|DfaParse| CONST-DECL "(goodDfaResult?(len, startpos))" |dfa| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|sigma_dec| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|arr| TYPE-EQ-DECL NIL |arrayCount| NIL)
    (G SKOLEM-CONST-DECL "lang_spec" |ltedfapeg| NIL)
    (|s| SKOLEM-CONST-DECL "strings(len)" |ltedfapeg| NIL)
    (|start| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|rootnt| SKOLEM-CONST-DECL "non_terminal" |ltedfapeg| NIL)
    (|St| SKOLEM-CONST-DECL "state(len, G, s, start, rootnt)" |ltedfapeg| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|pos!1| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|v| SKOLEM-CONST-DECL "ent" |ltedfapeg| NIL)
    (|goodDfaResult?| CONST-DECL "bool" |dfa| NIL)
    (|dfaResult| TYPE-DECL NIL |dfa| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|x!1| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|card_remove| FORMULA-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|count_TCC1| SUBTYPE-TCC NIL |arrayCount| NIL)
    (|remove| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|nonempty_card| FORMULA-DECL NIL |finite_sets| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "(number_fields.-)(ltedfapeg.depth, 1)"
    "(ltedfapeg.good_depth?(ltedfapeg.len, ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.v]))")))
 (|step_TCC19| 0
  (|step_TCC13-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (GROUND)
      (("1" (TYPEPRED "rest")
        (("1" (TYPEPRED "stack")
          (("1" (EXPAND "good_stack?") (("1" (GRIND) NIL NIL)) NIL)) NIL))
        NIL)
       ("2" (LEMMA "good_mem_stack")
        (("2" (INST - "G" "depth - 1" "len" "scaf" "stack" "rest" "v")
          (("1" (GROUND)
            (("1" (HIDE 2)
              (("1" (TYPEPRED "stack")
                (("1" (EXPAND "good_stack?" -)
                  (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)
             ("3" (TYPEPRED "stack")
              (("3" (EXPAND "fine_stack?" -)
                (("3" (GROUND) (("3" (GRIND) NIL NIL)) NIL)) NIL))
              NIL)
             ("4" (TYPEPRED "stack") (("4" (GRIND) NIL NIL)) NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (TYPEPRED "stack")
              (("2" (TYPEPRED "res") (("2" (GRIND) NIL NIL)) NIL)) NIL))
            NIL)
           ("3" (TYPEPRED "stack") (("3" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL)
       ("3" (TYPEPRED "stack")
        (("3" (EXPAND "fine_stack?" -)
          (("3" (GROUND)
            (("1" (GRIND) NIL NIL)
             ("2" (LEMMA "fine_mem_stack")
              (("2" (GROUND)
                (("2" (EXPAND GOOD_STACK? -)
                  (("2"
                    (INST - "G" "depth - 1" "len" "scaf" "stack" "rest" "v")
                    (("1" (GROUND)
                      (("1" (EXPAND "good_stack?" -) (("1" (PROPAX) NIL NIL))
                        NIL)
                       ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)
                       ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)
                       ("6" (GRIND) NIL NIL) ("7" (GRIND) NIL NIL)
                       ("8" (GRIND) NIL NIL) ("9" (GRIND) NIL NIL)
                       ("10" (GRIND) NIL NIL))
                      NIL)
                     ("2" (TYPEPRED "res") (("2" (GRIND) NIL NIL)) NIL)
                     ("3" (GRIND) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|DfaParse| CONST-DECL "(goodDfaResult?(len, startpos))" |dfa| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|v| SKOLEM-CONST-DECL "ent" |ltedfapeg| NIL)
    (|stack| SKOLEM-CONST-DECL "(fine_stack?(len, G, St`depth, St`scaf))"
     |ltedfapeg| NIL)
    (|depth| SKOLEM-CONST-DECL "(good_depth?(len, St`scaf))" |ltedfapeg| NIL)
    (|St| SKOLEM-CONST-DECL "state(len, G, s, start, rootnt)" |ltedfapeg| NIL)
    (|rootnt| SKOLEM-CONST-DECL "non_terminal" |ltedfapeg| NIL)
    (|start| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|s| SKOLEM-CONST-DECL "strings(len)" |ltedfapeg| NIL)
    (G SKOLEM-CONST-DECL "lang_spec" |ltedfapeg| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|fine_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|dfaResult| TYPE-DECL NIL |dfa| NIL)
    (|goodDfaResult?| CONST-DECL "bool" |dfa| NIL)
    (|good_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|fine_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|mem_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.rest"
    "(ltedfapeg.fine_stack?(ltedfapeg.len, ltedfapeg.G, (number_fields.-)(ltedfapeg.depth, 1), ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.v]))")))
 (|step_TCC20| 0
  (|step_TCC89-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (GROUND)
      (("1" (TYPEPRED "lflag")
        (("1" (ASSERT)
          (("1" (HIDE -2)
            (("1" (GROUND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (EXPAND "loop_ready?") (("2" (PROPAX) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (TYPEPRED "lflag")
        (("2" (ASSERT) (("2" (HIDE -1) (("2" (LAZY-GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|DfaParse| CONST-DECL "(goodDfaResult?(len, startpos))" |dfa| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.St`lflag"
    "{b: booleans.bool | IF b THEN booleans.OR(ltedfapeg.nt(ltedfapeg.rest) = ltedfapeg.num_non_terminals, ltedfapeg.loop_ready?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.v], ltedfapeg.pos(ltedfapeg.rest), ltedfapeg.nt(ltedfapeg.rest))) ELSE FORALL (i: naturalnumbers.upto(ltedfapeg.len)), (n: non_terminal): (booleans.NOT)(ltedfapeg.loop?(ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.v](i)(n))) ENDIF}")))
 (|step_TCC21| 0
  (|step_TCC16-1| |nil| 3804455654 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL (|step| SUBTYPE "ltedfapeg.pos" "below(ltedfapeg.len)")))
 (|step_TCC22| 0
  (|step_TCC20-1| |nil| 3804455654 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.v"
    "(ltedfapeg.nice_entry?(ltedfapeg.len, ltedfapeg.pos))")))
 (|step_TCC23| 0
  (|step_TCC21-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (TYPEPRED "scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)
           ("2" (USE "good_good_tscaffold")
            (("1" (GROUND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)
               ("3" (TYPEPRED "lflag")
                (("3" (SKEEP*)
                  (("3" (GROUND)
                    (("1" (INST?) NIL NIL) ("2" (GRIND) NIL NIL)
                     ("3" (INST?) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE -2 2)
              (("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|sigma| DEF-DECL "nat" |ltedfapeg| NIL)
    (|good_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|mem_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|v| SKOLEM-CONST-DECL "ent" |ltedfapeg| NIL)
    (|pos!1| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_good_tscaffold| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE
    "ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.v]"
    "(ltedfapeg.fine_scaffold?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.s)(ltedfapeg.start, ltedfapeg.rootnt))")))
 (|step_TCC24| 0
  (|step_TCC18-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (SPLIT +)
      (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
       ("2" (TYPEPRED "depth") (("2" (GRIND) NIL NIL)) NIL)
       ("3" (TYPEPRED "depth")
        (("3" (TYPEPRED "stack")
          (("3" (EXPAND "good_depth?")
            (("3" (EXPAND "pushcount")
              (("3" (EXPAND "scafcount")
                (("3"
                  (USE "sigma_dec"
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" "pos!1" "j" "len"))
                  (("1" (GROUND)
                    (("1" (LIFT-IF -1)
                      (("1" (GROUND)
                        (("1" (GRIND) NIL NIL)
                         ("2"
                          (CASE-REPLACE "(LAMBDA (i: upto(len)):
                                                               count(num_non_terminals)(push?)
                                                                    (St`scaf WITH [(pos!1)(cur) := v](i))) = ((LAMBDA (i: upto(len)):
                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                              WITH [(pos!1)
                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                          1])")
                          (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL)
                           ("2" (HIDE -1 3)
                            (("2" (APPLY-EXTENSIONALITY)
                              (("1" (HIDE 2)
                                (("1" (EXPAND "count")
                                  (("1" (CASE "pos!1 = x!1")
                                    (("1" (ASSERT)
                                      (("1"
                                        (CASE-REPLACE
                                         "{i: below(num_non_terminals) |
                                                                                                  push?(St`scaf(x!1) WITH [(cur) := v](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1" (REWRITE "card_remove")
                                          (("1" (HIDE -1)
                                            (("1" (LIFT-IF +)
                                              (("1" (GROUND)
                                                (("1" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE -1 2)
                                            (("2" (REWRITE "count_TCC1")
                                              (("2" (HIDE 2)
                                                (("2" (HIDE 2)
                                                  (("2" (HIDE -3 -4 -6)
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2)
                                          (("2" (APPLY-EXTENSIONALITY)
                                            (("1" (HIDE 2)
                                              (("1" (HIDE -3 -4 -6)
                                                (("1" (GRIND) NIL NIL)) NIL))
                                              NIL)
                                             ("2" (GRIND) NIL NIL))
                                            NIL))
                                          NIL)
                                         ("3" (GRIND) NIL NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE 2)
                                (("2" (EXPAND "count")
                                  (("2"
                                    (LEMMA
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("2" (INST?)
                                      (("1" (GROUND)
                                        (("1" (EXPAND "nonempty?")
                                          (("1" (EXPAND "empty?")
                                            (("1" (INST - "cur")
                                              (("1" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (REWRITE "count_tcc1")
                                        (("2" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("3" (HIDE -1 3)
                            (("3" (EXPAND "count")
                              (("3"
                                (LEMMA
                                 "nonempty_card[below(num_non_terminals)]")
                                (("3" (INST?)
                                  (("1" (GRIND) NIL NIL)
                                   ("2" (REWRITE "count_tcc1")
                                    (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("4" (GRIND) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "count")
                      (("2" (LEMMA "nonempty_card[below(num_non_terminals)]")
                        (("2" (INST?)
                          (("1" (GRIND) NIL NIL)
                           ("2" (REWRITE "count_tcc1") (("2" (GRIND) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sigma_dec| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|arr| TYPE-EQ-DECL NIL |arrayCount| NIL)
    (G SKOLEM-CONST-DECL "lang_spec" |ltedfapeg| NIL)
    (|s| SKOLEM-CONST-DECL "strings(len)" |ltedfapeg| NIL)
    (|start| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|rootnt| SKOLEM-CONST-DECL "non_terminal" |ltedfapeg| NIL)
    (|St| SKOLEM-CONST-DECL "state(len, G, s, start, rootnt)" |ltedfapeg| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|pos!1| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|v| SKOLEM-CONST-DECL "ent" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|x!1| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|card_remove| FORMULA-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|count_TCC1| SUBTYPE-TCC NIL |arrayCount| NIL)
    (|remove| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|nonempty_card| FORMULA-DECL NIL |finite_sets| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "(number_fields.-)(ltedfapeg.depth, 1)"
    "(ltedfapeg.good_depth?(ltedfapeg.len, ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.v]))")))
 (|step_TCC25| 0
  (|step_TCC19-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (GROUND)
      (("1" (TYPEPRED "rest")
        (("1" (TYPEPRED "stack")
          (("1" (EXPAND "good_stack?") (("1" (GRIND) NIL NIL)) NIL)) NIL))
        NIL)
       ("2" (LEMMA "good_mem_stack")
        (("2" (INST - "G" "depth - 1" "len" "scaf" "stack" "rest" "v")
          (("1" (GROUND)
            (("1" (HIDE 2)
              (("1" (TYPEPRED "stack")
                (("1" (EXPAND "good_stack?" -)
                  (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)
             ("3" (TYPEPRED "stack")
              (("3" (EXPAND "fine_stack?" -)
                (("3" (GROUND) (("3" (GRIND) NIL NIL)) NIL)) NIL))
              NIL)
             ("4" (TYPEPRED "stack") (("4" (GRIND) NIL NIL)) NIL))
            NIL)
           ("2" (HIDE 2) (("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL))
            NIL)
           ("3" (TYPEPRED "stack") (("3" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL)
       ("3" (TYPEPRED "stack")
        (("3" (EXPAND "fine_stack?" -)
          (("3" (GROUND)
            (("1" (GRIND) NIL NIL)
             ("2" (LEMMA "fine_mem_stack")
              (("2" (GROUND)
                (("2" (EXPAND "good_stack?" -)
                  (("2"
                    (INST - "G" "depth - 1" "len" "scaf" "stack" "rest" "v")
                    (("1" (GROUND)
                      (("1" (EXPAND "good_stack?" -) (("1" (PROPAX) NIL NIL))
                        NIL)
                       ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)
                       ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)
                       ("6" (GRIND) NIL NIL) ("7" (GRIND) NIL NIL)
                       ("8" (GRIND) NIL NIL) ("9" (GRIND) NIL NIL)
                       ("10" (GRIND) NIL NIL))
                      NIL)
                     ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|v| SKOLEM-CONST-DECL "ent" |ltedfapeg| NIL)
    (|stack| SKOLEM-CONST-DECL "(fine_stack?(len, G, St`depth, St`scaf))"
     |ltedfapeg| NIL)
    (|depth| SKOLEM-CONST-DECL "(good_depth?(len, St`scaf))" |ltedfapeg| NIL)
    (|St| SKOLEM-CONST-DECL "state(len, G, s, start, rootnt)" |ltedfapeg| NIL)
    (|rootnt| SKOLEM-CONST-DECL "non_terminal" |ltedfapeg| NIL)
    (|start| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|s| SKOLEM-CONST-DECL "strings(len)" |ltedfapeg| NIL)
    (G SKOLEM-CONST-DECL "lang_spec" |ltedfapeg| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|fine_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|good_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|fine_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|mem_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.rest"
    "(ltedfapeg.fine_stack?(ltedfapeg.len, ltedfapeg.G, (number_fields.-)(ltedfapeg.depth, 1), ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.v]))")))
 (|step_TCC26| 0
  (|step_TCC90-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (GROUND)
      (("1" (TYPEPRED "lflag")
        (("1" (ASSERT)
          (("1" (HIDE -2)
            (("1" (GROUND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (EXPAND "loop_ready?") (("2" (PROPAX) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (TYPEPRED "lflag")
        (("2" (ASSERT) (("2" (HIDE -1) (("2" (LAZY-GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.St`lflag"
    "{b: booleans.bool | IF b THEN booleans.OR(ltedfapeg.nt(ltedfapeg.rest) = ltedfapeg.num_non_terminals, ltedfapeg.loop_ready?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.v], ltedfapeg.pos(ltedfapeg.rest), ltedfapeg.nt(ltedfapeg.rest))) ELSE FORALL (i: naturalnumbers.upto(ltedfapeg.len)), (n: non_terminal): (booleans.NOT)(ltedfapeg.loop?(ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.v](i)(n))) ENDIF}")))
 (|step_TCC27| 0
  (|step_TCC42-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (TYPEPRED "scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("" (EXPAND "good_tscaffold?")
            (("" (INST-CP - "pos!1" "n1")
              (("" (INST - "pos!1" "n3")
                (("" (GROUND)
                  (("1" (EXPAND "gfcount")
                    (("1" (USE "sigma_max")
                      (("1" (GROUND)
                        (("1"
                          (CASE
                              "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                          (("1" (ASSERT)
                            (("1"
                              (NAME-REPLACE "lnn"
                               "len * num_non_terminals + num_non_terminals")
                              (("1" (ASSERT)
                                (("1"
                                  (CASE-REPLACE "dep(scaf(pos!1)(n1)) = d1")
                                  (("1"
                                    (CASE-REPLACE "dep(scaf(pos!1)(n3)) = d3")
                                    (("1" (GRIND) NIL NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL)
                                   ("2" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT)
                            (("2" (CASE "len * num_non_terminals <= exp2(46)")
                              (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)
                               ("2"
                                (USE "lt_times_lt_pos1" :SUBST
                                     ("px" "len" "nnz" "num_non_terminals" "y"
                                      "exp2(32)" "w" "exp2(8)"))
                                (("1" (HIDE-ALL-BUT (-1 1))
                                  (("1" (GRIND)
                                    (("1" (TYPEPRED "len")
                                      (("1" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)
                   ("4" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|sigma_max| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|plus_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|fail?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|good?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|dep| SHARED-ADT-ACCESSOR-DECL
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" |ltedfapeg| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|DfaParse| CONST-DECL "(goodDfaResult?(len, startpos))" |dfa| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|lt_times_lt_pos1| FORMULA-DECL NIL |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE
    "(number_fields.+)(real_defs.max(ltedfapeg.d1, ltedfapeg.d3), 1)"
    "uint64")))
 (|step_TCC28| 0
  (|step_TCC43-1| |nil| 3804455654 ("" (SUBTYPE-TCC) NIL NIL)
   ((|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE
    "ltedfapeg.fail((number_fields.+)(real_defs.max(ltedfapeg.d1, ltedfapeg.d3), 1))"
    "(ltedfapeg.nice_entry?(ltedfapeg.len, ltedfapeg.pos))")))
 (|step_TCC29| 0
  (|step_TCC55-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (TYPEPRED "scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)
           ("2" (USE "good_good_tscaffold")
            (("1" (GROUND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)
               ("3" (TYPEPRED "lflag")
                (("3" (SKEEP*)
                  (("3" (GROUND)
                    (("1" (INST?) NIL NIL) ("2" (GRIND) NIL NIL)
                     ("3" (INST?) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE -2 2)
              (("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|sigma| DEF-DECL "nat" |ltedfapeg| NIL)
    (|good_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|fine_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|d3| SKOLEM-CONST-DECL "uint64" |ltedfapeg| NIL)
    (|d1| SKOLEM-CONST-DECL "uint64" |ltedfapeg| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|fail| ADT-CONSTRUCTOR-DECL "[uint64 -> (fail?)]" |ltedfapeg| NIL)
    (|fail?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos!1| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_good_tscaffold| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE
    "ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.fail((number_fields.+)(real_defs.max(ltedfapeg.d1, ltedfapeg.d3), 1))]"
    "(ltedfapeg.fine_scaffold?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.s)(ltedfapeg.start, ltedfapeg.rootnt))")))
 (|step_TCC30| 0
  (|step_TCC22-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (SPLIT +)
      (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
       ("2" (TYPEPRED "depth") (("2" (GRIND) NIL NIL)) NIL)
       ("3" (TYPEPRED "depth")
        (("3" (TYPEPRED "stack")
          (("3" (EXPAND "good_depth?")
            (("3" (EXPAND "pushcount")
              (("3" (EXPAND "scafcount")
                (("3"
                  (USE "sigma_dec"
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" "pos!1" "j" "len"))
                  (("1" (GROUND)
                    (("1" (LIFT-IF -1)
                      (("1" (GROUND)
                        (("1" (GRIND) NIL NIL)
                         ("2"
                          (CASE-REPLACE "(LAMBDA (i: upto(len)):
                                                                                                     count(num_non_terminals)(push?)
                                                                                                          (St`scaf WITH [(pos!1)(cur) := fail(1 + max(d1, d3))](i))) = ((LAMBDA (i: upto(len)):
                                                                                                     count(num_non_terminals)(push?)(St`scaf(i)))
                                                                                                    WITH [(pos!1)
                                                                                                            := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                                                1])")
                          (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL)
                           ("2" (HIDE -1 3)
                            (("2" (APPLY-EXTENSIONALITY)
                              (("1" (HIDE 2)
                                (("1" (EXPAND "count")
                                  (("1" (CASE "pos!1 = x!1")
                                    (("1" (ASSERT)
                                      (("1"
                                        (CASE-REPLACE
                                         "{i: below(num_non_terminals) |
                                                                                                                                                                push?(St`scaf(x!1) WITH [(cur) := fail(1 + max(d1, d3))](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1" (REWRITE "card_remove")
                                          (("1" (HIDE -1)
                                            (("1" (LIFT-IF +)
                                              (("1" (GROUND)
                                                (("1" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE -1 2)
                                            (("2" (REWRITE "count_TCC1")
                                              (("2" (HIDE 2)
                                                (("2" (HIDE 2)
                                                  (("2" (HIDE -3 -4 -6)
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2)
                                          (("2" (APPLY-EXTENSIONALITY)
                                            (("1" (HIDE 2)
                                              (("1" (HIDE -3 -4 -6)
                                                (("1" (GRIND) NIL NIL)) NIL))
                                              NIL)
                                             ("2" (GRIND) NIL NIL)
                                             ("3" (SKEEP*)
                                              (("3" (USE "step_tcc27")
                                                (("3" (GROUND)
                                                  (("3" (INST?)
                                                    (("3" (INST?)
                                                      (("3" (INST?)
                                                        (("3" (GROUND) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("3" (HIDE -6 2)
                                          (("3" (GRIND) NIL NIL)) NIL)
                                         ("4" (HIDE 2)
                                          (("4" (SKEEP*)
                                            (("4" (USE "step_tcc27")
                                              (("4" (GROUND)
                                                (("4" (INST?)
                                                  (("4" (INST?)
                                                    (("4" (INST?)
                                                      (("4" (GROUND) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE 2)
                                (("2" (EXPAND "count" +)
                                  (("2"
                                    (USE
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("1" (GROUND)
                                      (("1" (EXPAND "nonempty?")
                                        (("1" (EXPAND "empty?")
                                          (("1" (INST - "nt(stack)")
                                            (("1" (GRIND) NIL NIL)
                                             ("2" (ASSERT)
                                              (("2" (TYPEPRED "nt(stack)")
                                                (("2"
                                                  (EXPAND "good_push_entry?")
                                                  (("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (REWRITE "count_TCC1")
                                      (("2" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)
                               ("4" (HIDE 2)
                                (("4" (USE "step_tcc27")
                                  (("4" (GROUND)
                                    (("4" (INST?)
                                      (("4" (INST?)
                                        (("4" (INST?) (("4" (GROUND) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (HIDE -1)
                            (("3" (EXPAND "count")
                              (("3"
                                (USE "nonempty_card[below(num_non_terminals)]")
                                (("1" (GROUND)
                                  (("1" (HIDE -5 5) (("1" (GRIND) NIL NIL))
                                    NIL))
                                  NIL)
                                 ("2" (REWRITE "count_TCC1")
                                  (("2" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("4" (HIDE -1 3) (("4" (GRIND) NIL NIL)) NIL)
                           ("5" (USE "step_tcc27")
                            (("5" (GROUND)
                              (("5" (INST?)
                                (("5" (INST?)
                                  (("5" (INST?) (("5" (GROUND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "count")
                      (("2" (USE "nonempty_card[below(num_non_terminals)]")
                        (("1" (GRIND) NIL NIL)
                         ("2" (REWRITE "count_tcc1") (("2" (GRIND) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sigma_dec| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|arr| TYPE-EQ-DECL NIL |arrayCount| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|fail?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|fail| ADT-CONSTRUCTOR-DECL "[uint64 -> (fail?)]" |ltedfapeg| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (G SKOLEM-CONST-DECL "lang_spec" |ltedfapeg| NIL)
    (|s| SKOLEM-CONST-DECL "strings(len)" |ltedfapeg| NIL)
    (|start| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|rootnt| SKOLEM-CONST-DECL "non_terminal" |ltedfapeg| NIL)
    (|St| SKOLEM-CONST-DECL "state(len, G, s, start, rootnt)" |ltedfapeg| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|pos!1| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|d1| SKOLEM-CONST-DECL "uint64" |ltedfapeg| NIL)
    (|d3| SKOLEM-CONST-DECL "uint64" |ltedfapeg| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|step_TCC27| SUBTYPE-TCC NIL |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|x!1| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|card_remove| FORMULA-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|count_TCC1| SUBTYPE-TCC NIL |arrayCount| NIL)
    (|remove| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|stack| SKOLEM-CONST-DECL "(fine_stack?(len, G, St`depth, St`scaf))"
     |ltedfapeg| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|nonempty_card| FORMULA-DECL NIL |finite_sets| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "(number_fields.-)(ltedfapeg.depth, 1)"
    "(ltedfapeg.good_depth?(ltedfapeg.len, ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.fail((number_fields.+)(real_defs.max(ltedfapeg.d1, ltedfapeg.d3), 1))]))")))
 (|step_TCC31| 0
  (|step_TCC23-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (GROUND)
      (("1" (TYPEPRED "rest")
        (("1" (TYPEPRED "stack")
          (("1" (EXPAND "good_stack?") (("1" (GRIND) NIL NIL)) NIL)) NIL))
        NIL)
       ("2" (LEMMA "good_mem_stack")
        (("2"
          (INST - "G" "depth - 1" "len" "scaf" "stack" "rest"
           "fail(1 + max(d1, d3))")
          (("1" (GROUND)
            (("1" (HIDE 2)
              (("1" (TYPEPRED "stack")
                (("1" (EXPAND "good_stack?" -)
                  (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)
             ("3" (TYPEPRED "stack")
              (("3" (EXPAND "fine_stack?" -)
                (("3" (GROUND) (("3" (GRIND) NIL NIL)) NIL)) NIL))
              NIL)
             ("4" (TYPEPRED "stack") (("4" (GRIND) NIL NIL)) NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (EXPAND "nice_entry?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)
           ("3" (TYPEPRED "stack") (("3" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL)
       ("3" (TYPEPRED "stack")
        (("3" (EXPAND "fine_stack?" -)
          (("3" (GROUND)
            (("1" (GRIND) NIL NIL)
             ("2" (LEMMA "fine_mem_stack")
              (("2" (GROUND)
                (("2" (EXPAND "good_stack?" -)
                  (("2"
                    (INST - "G" "depth - 1" "len" "scaf" "stack" "rest"
                     "fail(1 + max(d1, d3))")
                    (("1" (GROUND)
                      (("1" (EXPAND "good_stack?" -) (("1" (PROPAX) NIL NIL))
                        NIL)
                       ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)
                       ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)
                       ("6" (GRIND) NIL NIL) ("7" (GRIND) NIL NIL)
                       ("8" (GRIND) NIL NIL) ("9" (GRIND) NIL NIL)
                       ("10" (GRIND) NIL NIL))
                      NIL)
                     ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|d3| SKOLEM-CONST-DECL "uint64" |ltedfapeg| NIL)
    (|d1| SKOLEM-CONST-DECL "uint64" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|fail| ADT-CONSTRUCTOR-DECL "[uint64 -> (fail?)]" |ltedfapeg| NIL)
    (|fail?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|stack| SKOLEM-CONST-DECL "(fine_stack?(len, G, St`depth, St`scaf))"
     |ltedfapeg| NIL)
    (|depth| SKOLEM-CONST-DECL "(good_depth?(len, St`scaf))" |ltedfapeg| NIL)
    (|St| SKOLEM-CONST-DECL "state(len, G, s, start, rootnt)" |ltedfapeg| NIL)
    (|rootnt| SKOLEM-CONST-DECL "non_terminal" |ltedfapeg| NIL)
    (|start| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|s| SKOLEM-CONST-DECL "strings(len)" |ltedfapeg| NIL)
    (G SKOLEM-CONST-DECL "lang_spec" |ltedfapeg| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|fine_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|good_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|fine_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|mem_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.rest"
    "(ltedfapeg.fine_stack?(ltedfapeg.len, ltedfapeg.G, (number_fields.-)(ltedfapeg.depth, 1), ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.fail((number_fields.+)(real_defs.max(ltedfapeg.d1, ltedfapeg.d3), 1))]))")))
 (|step_TCC32| 0
  (|step_TCC95-1| |nil| 3804706560
   ("" (SKEEP*)
    (("" (GROUND)
      (("1" (TYPEPRED "lflag")
        (("1" (ASSERT)
          (("1" (HIDE -2)
            (("1" (GROUND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (GRIND) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (TYPEPRED "lflag")
        (("2" (ASSERT) (("2" (HIDE -1) (("2" (LAZY-GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.St`lflag"
    "{b: booleans.bool | IF b THEN booleans.OR(ltedfapeg.nt(ltedfapeg.rest) = ltedfapeg.num_non_terminals, ltedfapeg.loop_ready?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.fail((number_fields.+)(1, real_defs.max(ltedfapeg.d1, ltedfapeg.d3)))], ltedfapeg.pos(ltedfapeg.rest), ltedfapeg.nt(ltedfapeg.rest))) ELSE FORALL (i: naturalnumbers.upto(ltedfapeg.len)), (n: non_terminal): (booleans.NOT)(ltedfapeg.loop?(ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.fail((number_fields.+)(1, real_defs.max(ltedfapeg.d1, ltedfapeg.d3)))](i)(n))) ENDIF}")))
 (|step_TCC33| 0
  (|step_TCC84-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (TYPEPRED "scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("" (EXPAND "good_tscaffold?")
            (("" (INST-CP - "pos!1" "n1")
              (("" (INST - "pos!1" "n3")
                (("" (GROUND)
                  (("1" (EXPAND GFCOUNT)
                    (("1" (USE "sigma_max")
                      (("1" (GROUND)
                        (("1"
                          (CASE
                              "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                          (("1" (ASSERT)
                            (("1"
                              (NAME-REPLACE LNN
                               "len * num_non_terminals + num_non_terminals")
                              (("1" (ASSERT)
                                (("1"
                                  (CASE-REPLACE "dep(scaf(pos!1)(n3)) = d3")
                                  (("1"
                                    (CASE-REPLACE "dep(scaf(pos!1)(n1)) = d1")
                                    (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL)
                                   ("2" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT)
                            (("2" (CASE "len * num_non_terminals <= exp2(46)")
                              (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)
                               ("2"
                                (USE "lt_times_lt_pos1" :SUBST
                                     ("px" "len" "nnz" "num_non_terminals" "y"
                                      "exp2(32)" "w" "exp2(8)"))
                                (("1" (HIDE-ALL-BUT (-1 1))
                                  (("1" (GRIND)
                                    (("1" (TYPEPRED "len")
                                      (("1" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)
                   ("4" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|sigma_max| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|plus_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|fail?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|good?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|dep| SHARED-ADT-ACCESSOR-DECL
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" |ltedfapeg| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|DfaParse| CONST-DECL "(goodDfaResult?(len, startpos))" |dfa| NIL)
    (|minus_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|lt_times_lt_pos1| FORMULA-DECL NIL |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE
    "(number_fields.+)(real_defs.max(ltedfapeg.d1, ltedfapeg.d3), 1)"
    "uint64")))
 (|step_TCC34| 0
  (|step_TCC92-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (TYPEPRED "scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("" (EXPAND "good_tscaffold?")
            (("" (INST-CP - "pos!1" "n1")
              (("" (INST - "pos!1" "n3")
                (("" (GROUND)
                  (("1" (EXPAND "gfcount")
                    (("1" (USE "sigma_max")
                      (("1" (GROUND)
                        (("1"
                          (CASE
                              "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                          (("1" (ASSERT)
                            (("1"
                              (NAME-REPLACE "lnn"
                               "len * num_non_terminals + num_non_terminals")
                              (("1" (ASSERT)
                                (("1"
                                  (CASE-REPLACE "dep(scaf(pos!1)(n3)) = d3")
                                  (("1"
                                    (CASE-REPLACE "dep(scaf(pos!1)(n1)) = d1")
                                    (("1" (ASSERT)
                                      (("1" (EXPAND "max")
                                        (("1" (LIFT-IF)
                                          (("1" (GROUND)
                                            (("1" (GRIND) NIL NIL)
                                             ("2" (GRIND) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL)
                                   ("2" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT)
                            (("2" (CASE "len * num_non_terminals <= exp2(46)")
                              (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)
                               ("2"
                                (USE "lt_times_lt_pos1" :SUBST
                                     ("px" "len" "nnz" "num_non_terminals" "y"
                                      "exp2(32)" "w" "exp2(8)"))
                                (("1" (HIDE-ALL-BUT (-1 1))
                                  (("1" (GRIND)
                                    (("1" (TYPEPRED "len")
                                      (("1" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)
                   ("4" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|sigma_max| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|plus_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|fail?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|good?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|dep| SHARED-ADT-ACCESSOR-DECL
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" |ltedfapeg| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|lt_times_lt_pos1| FORMULA-DECL NIL |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE
    "ltedfapeg.good((number_fields.+)(real_defs.max(ltedfapeg.d1, ltedfapeg.d3), 1), ltedfapeg.sp)"
    "(ltedfapeg.nice_entry?(ltedfapeg.len, ltedfapeg.pos))")))
 (|step_TCC35| 0
  (|step_TCC93-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (TYPEPRED "scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)
           ("2" (USE "good_good_tscaffold")
            (("1" (GROUND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (TYPEPRED "stack")
                (("2" (TYPEPRED "scaf(pos!1)(n1)")
                  (("2" (TYPEPRED "scaf(pos!1)(n3)")
                    (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL)
               ("3" (TYPEPRED "lflag")
                (("3" (SKEEP*)
                  (("3" (GROUND)
                    (("1" (INST?) NIL NIL) ("2" (GRIND) NIL NIL)
                     ("3" (INST?) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE -2 2)
              (("2" (TYPEPRED "stack")
                (("2" (TYPEPRED "scaf(pos!1)(n1)")
                  (("2" (TYPEPRED "scaf(pos!1)(n3)") (("2" (GRIND) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|sigma| DEF-DECL "nat" |ltedfapeg| NIL)
    (|good_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|fine_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|sp| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|d3| SKOLEM-CONST-DECL "uint64" |ltedfapeg| NIL)
    (|d1| SKOLEM-CONST-DECL "uint64" |ltedfapeg| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|good| ADT-CONSTRUCTOR-DECL "[[uint64, uint32] -> (good?)]" |ltedfapeg|
     NIL)
    (|good?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos!1| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_good_tscaffold| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE
    "ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.good((number_fields.+)(real_defs.max(ltedfapeg.d1, ltedfapeg.d3), 1), ltedfapeg.sp)]"
    "(ltedfapeg.fine_scaffold?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.s)(ltedfapeg.start, ltedfapeg.rootnt))")))
 (|step_TCC36| 0
  (|step_TCC31-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (SPLIT +)
      (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
       ("2" (TYPEPRED "depth") (("2" (GRIND) NIL NIL)) NIL)
       ("3" (TYPEPRED "depth")
        (("3" (TYPEPRED "stack")
          (("3" (EXPAND "good_depth?")
            (("3" (EXPAND "pushcount")
              (("3" (EXPAND "scafcount")
                (("3"
                  (USE "sigma_dec"
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" "pos!1" "j" "len"))
                  (("1" (GROUND)
                    (("1" (LIFT-IF -1)
                      (("1" (GROUND)
                        (("1" (GRIND) NIL NIL)
                         ("2"
                          (CASE-REPLACE "(LAMBDA (i: upto(len)):
                                                                                                                   count(num_non_terminals)(push?)
                                                                                                                        (St`scaf WITH [(pos!1)(cur) := good(1 + max(d1, d3), sp)](i))) = ((LAMBDA (i: upto(len)):
                                                                                                                   count(num_non_terminals)(push?)(St`scaf(i)))
                                                                                                                  WITH [(pos!1)
                                                                                                                          := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                                                              1])")
                          (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL)
                           ("2" (HIDE -1 3)
                            (("2" (APPLY-EXTENSIONALITY)
                              (("1" (HIDE 2)
                                (("1" (EXPAND "count")
                                  (("1" (CASE "pos!1 = x!1")
                                    (("1" (ASSERT)
                                      (("1"
                                        (CASE-REPLACE
                                         "{i: below(num_non_terminals) |
                                                                                                                                                                                          push?(St`scaf(x!1) WITH [(cur) := good(1 + max(d1, d3), sp)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1" (REWRITE "card_remove")
                                          (("1" (HIDE -1)
                                            (("1" (LIFT-IF +)
                                              (("1" (GROUND)
                                                (("1" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE -1 2)
                                            (("2" (REWRITE "count_TCC1")
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2)
                                          (("2" (APPLY-EXTENSIONALITY)
                                            (("1" (HIDE 2)
                                              (("1" (HIDE -3 -4 -6)
                                                (("1" (GRIND) NIL NIL)) NIL))
                                              NIL)
                                             ("2" (HIDE 2)
                                              (("2"
                                                (TYPEPRED "St`scaf(pos!1)(n1)")
                                                (("2"
                                                  (TYPEPRED "scaf(pos!1)(n3)")
                                                  (("2" (GRIND) NIL NIL)) NIL))
                                                NIL))
                                              NIL)
                                             ("3" (SKEEP*)
                                              (("3" (USE "step_tcc33")
                                                (("3" (GROUND)
                                                  (("3" (INST?)
                                                    (("3" (INST?)
                                                      (("3" (INST?)
                                                        (("3" (INST?)
                                                          (("3" (GROUND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("3" (HIDE -6 2)
                                          (("3" (TYPEPRED "St`scaf(pos!1)(n1)")
                                            (("3"
                                              (TYPEPRED "St`scaf(pos!1)(n3)")
                                              (("3" (SKEEP*)
                                                (("3" (USE "step_tcc34")
                                                  (("3" (GROUND)
                                                    (("3" (INST?)
                                                      (("3" (INST?)
                                                        (("3" (INST?)
                                                          (("3" (GROUND)
                                                            (("3"
                                                              (TYPEPRED
                                                               "St`scaf(pos!1)(n1)")
                                                              (("3"
                                                                (TYPEPRED
                                                                 "St`scaf(pos!1)(n3)")
                                                                (("3" (GRIND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("4" (SKEEP*)
                                          (("4" (USE "step_tcc33")
                                            (("4" (GROUND)
                                              (("4" (INST?)
                                                (("4" (INST?)
                                                  (("4" (INST?)
                                                    (("4" (INST?)
                                                      (("4" (GROUND) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "count")
                                (("2"
                                  (USE
                                   "nonempty_card[below(num_non_terminals)]")
                                  (("1" (GRIND) NIL NIL)
                                   ("2" (REWRITE "count_tcc1")
                                    (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL)
                               ("3" (HIDE 2)
                                (("3" (TYPEPRED "St`scaf(pos!1)(n1)")
                                  (("3" (TYPEPRED "St`scaf(pos!1)(n3)")
                                    (("3" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL)
                               ("4" (HIDE 2)
                                (("4" (USE "step_tcc33")
                                  (("4" (GROUND)
                                    (("4" (INST?)
                                      (("4" (INST?)
                                        (("4" (INST?)
                                          (("4" (INST?)
                                            (("4" (GROUND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (EXPAND "count")
                            (("3"
                              (USE "nonempty_card[below(num_non_terminals)]")
                              (("1" (GRIND) NIL NIL)
                               ("2" (REWRITE "count_tcc1")
                                (("2" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("4" (USE "step_tcc34")
                            (("4" (GROUND)
                              (("4" (INST?)
                                (("4" (INST?)
                                  (("4" (INST?) (("4" (GROUND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("5" (HIDE -1 3)
                            (("5" (USE "step_tcc33")
                              (("5" (GROUND)
                                (("5" (INST?)
                                  (("5" (INST?)
                                    (("5" (INST?)
                                      (("5" (INST?) (("5" (GROUND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "count")
                      (("2" (USE "nonempty_card[below(num_non_terminals)]")
                        (("1" (GRIND) NIL NIL)
                         ("2" (REWRITE "COUNT_TCC1") (("2" (GRIND) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sigma_dec| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|arr| TYPE-EQ-DECL NIL |arrayCount| NIL)
    (|good?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|good| ADT-CONSTRUCTOR-DECL "[[uint64, uint32] -> (good?)]" |ltedfapeg|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (G SKOLEM-CONST-DECL "lang_spec" |ltedfapeg| NIL)
    (|s| SKOLEM-CONST-DECL "strings(len)" |ltedfapeg| NIL)
    (|start| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|rootnt| SKOLEM-CONST-DECL "non_terminal" |ltedfapeg| NIL)
    (|St| SKOLEM-CONST-DECL "state(len, G, s, start, rootnt)" |ltedfapeg| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|pos!1| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|sp| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|d1| SKOLEM-CONST-DECL "uint64" |ltedfapeg| NIL)
    (|d3| SKOLEM-CONST-DECL "uint64" |ltedfapeg| NIL)
    (|step_TCC34| SUBTYPE-TCC NIL |ltedfapeg| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|step_TCC33| SUBTYPE-TCC NIL |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|x!1| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|card_remove| FORMULA-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|count_TCC1| SUBTYPE-TCC NIL |arrayCount| NIL)
    (|remove| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nonempty_card| FORMULA-DECL NIL |finite_sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "(number_fields.-)(ltedfapeg.depth, 1)"
    "(ltedfapeg.good_depth?(ltedfapeg.len, ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.good((number_fields.+)(real_defs.max(ltedfapeg.d1, ltedfapeg.d3), 1), ltedfapeg.sp)]))")))
 (|step_TCC37| 0
  (|step_TCC32-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (GROUND)
      (("1" (TYPEPRED "rest")
        (("1" (TYPEPRED "stack")
          (("1" (EXPAND "good_stack?") (("1" (GRIND) NIL NIL)) NIL)) NIL))
        NIL)
       ("2" (LEMMA "good_mem_stack")
        (("2"
          (INST - "G" "depth - 1" "len" "scaf" "stack" "rest"
           "good(1 + max(d1, d3), sp)")
          (("1" (GROUND)
            (("1" (HIDE 2)
              (("1" (TYPEPRED "stack")
                (("1" (EXPAND "good_stack?" -)
                  (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)
             ("3" (TYPEPRED "stack")
              (("3" (EXPAND "fine_stack?" -)
                (("3" (GROUND) (("3" (GRIND) NIL NIL)) NIL)) NIL))
              NIL)
             ("4" (TYPEPRED "stack") (("4" (GRIND) NIL NIL)) NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (TYPEPRED "stack")
              (("2" (TYPEPRED "St`scaf(pos!1)(n1)")
                (("2" (TYPEPRED "St`scaf(pos!1)(n3)") (("2" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (USE "step_tcc36")
            (("3" (GROUND)
              (("3" (INST?)
                (("3" (INST?)
                  (("3" (INST?) (("3" (INST?) (("3" (GROUND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (TYPEPRED "stack")
        (("3" (EXPAND "fine_stack?" -)
          (("3" (GROUND)
            (("1" (GRIND) NIL NIL)
             ("2" (LEMMA "fine_mem_stack")
              (("2" (GROUND)
                (("2" (EXPAND "good_stack?" -)
                  (("2"
                    (INST - "G" "depth - 1" "len" "scaf" "stack" "rest"
                     "good(1 + max(d1, d3), sp)")
                    (("1" (GROUND)
                      (("1" (EXPAND "good_stack?" -) (("1" (PROPAX) NIL NIL))
                        NIL)
                       ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)
                       ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)
                       ("6" (GRIND) NIL NIL) ("7" (GRIND) NIL NIL)
                       ("8" (GRIND) NIL NIL) ("9" (GRIND) NIL NIL)
                       ("10" (GRIND) NIL NIL))
                      NIL)
                     ("2" (TYPEPRED "St`scaf(pos!1)(n1)")
                      (("2" (TYPEPRED "St`scaf(pos!1)(n3)")
                        (("2" (GRIND) NIL NIL)) NIL))
                      NIL)
                     ("3" (GRIND) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|sp| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|d3| SKOLEM-CONST-DECL "uint64" |ltedfapeg| NIL)
    (|d1| SKOLEM-CONST-DECL "uint64" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|good| ADT-CONSTRUCTOR-DECL "[[uint64, uint32] -> (good?)]" |ltedfapeg|
     NIL)
    (|good?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|stack| SKOLEM-CONST-DECL "(fine_stack?(len, G, St`depth, St`scaf))"
     |ltedfapeg| NIL)
    (|depth| SKOLEM-CONST-DECL "(good_depth?(len, St`scaf))" |ltedfapeg| NIL)
    (|St| SKOLEM-CONST-DECL "state(len, G, s, start, rootnt)" |ltedfapeg| NIL)
    (|rootnt| SKOLEM-CONST-DECL "non_terminal" |ltedfapeg| NIL)
    (|start| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|s| SKOLEM-CONST-DECL "strings(len)" |ltedfapeg| NIL)
    (G SKOLEM-CONST-DECL "lang_spec" |ltedfapeg| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|fine_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|step_TCC36| SUBTYPE-TCC NIL |ltedfapeg| NIL)
    (|good_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|fine_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|mem_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.rest"
    "(ltedfapeg.fine_stack?(ltedfapeg.len, ltedfapeg.G, (number_fields.-)(ltedfapeg.depth, 1), ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.good((number_fields.+)(real_defs.max(ltedfapeg.d1, ltedfapeg.d3), 1), ltedfapeg.sp)]))")))
 (|step_TCC38| 0
  (|step_TCC117-1| |nil| 3804706560
   ("" (SKEEP*)
    (("" (GROUND)
      (("1" (TYPEPRED "lflag")
        (("1" (ASSERT)
          (("1" (HIDE -2)
            (("1" (GROUND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (GRIND) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (TYPEPRED "lflag")
        (("2" (ASSERT) (("2" (HIDE -1) (("2" (LAZY-GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.St`lflag"
    "{b: booleans.bool | IF b THEN booleans.OR(ltedfapeg.nt(ltedfapeg.rest) = ltedfapeg.num_non_terminals, ltedfapeg.loop_ready?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.good((number_fields.+)(1, real_defs.max(ltedfapeg.d1, ltedfapeg.d3)), ltedfapeg.sp)], ltedfapeg.pos(ltedfapeg.rest), ltedfapeg.nt(ltedfapeg.rest))) ELSE FORALL (i: naturalnumbers.upto(ltedfapeg.len)), (n: non_terminal): (booleans.NOT)(ltedfapeg.loop?(ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.good((number_fields.+)(1, real_defs.max(ltedfapeg.d1, ltedfapeg.d3)), ltedfapeg.sp)](i)(n))) ENDIF}")))
 (|step_TCC39| 0
  (|step_TCC95-1| |nil| 3804455654 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.stack"
    "(ltedfapeg.nice_entry?(ltedfapeg.len, ltedfapeg.pos))")))
 (|step_TCC40| 0
  (|step_TCC53-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (TYPEPRED "scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)
           ("2" (USE "good_good_tscaffold")
            (("1" (GROUND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (TYPEPRED "stack")
                (("2" (HIDE 2)
                  (("2" (EXPAND "fine_entry?") (("2" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL)
               ("3" (HIDE 2)
                (("3" (SKEEP*)
                  (("3" (TYPEPRED "lflag")
                    (("3" (CASE "lflag")
                      (("1" (ASSERT)
                        (("1" (HIDE -3) (("1" (GRIND) NIL NIL)) NIL)) NIL)
                       ("2" (ASSERT) (("2" (INST?) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|stack| SKOLEM-CONST-DECL "(fine_stack?(len, G, St`depth, St`scaf))"
     |ltedfapeg| NIL)
    (|St| SKOLEM-CONST-DECL "state(len, G, s, start, rootnt)" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|rootnt| SKOLEM-CONST-DECL "non_terminal" |ltedfapeg| NIL)
    (|start| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|s| SKOLEM-CONST-DECL "strings(len)" |ltedfapeg| NIL)
    (G SKOLEM-CONST-DECL "lang_spec" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pos!1| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|good_good_tscaffold| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE
    "ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.n3) := ltedfapeg.stack]"
    "(ltedfapeg.fine_scaffold?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.s)(ltedfapeg.start, ltedfapeg.rootnt))")))
 (|step_TCC41| 0
  (|step_TCC78-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (SPLIT)
      (("1" (TYPEPRED "stack")
        (("1" (TYPEPRED "depth")
          (("1" (EXPAND "good_depth?")
            (("1" (EXPAND "pushcount")
              (("1" (USE "scafcount_max")
                (("1" (ASSERT)
                  (("1" (USE "exp2_lt" :SUBST ("n" 41 "m" 64))
                    (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "good_depth?")
        (("2" (EXPAND "pushcount")
          (("2" (REWRITE "scafcount_update")
            (("1" (LIFT-IF)
              (("1" (GROUND)
                (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
                 ("2" (TYPEPRED "depth")
                  (("2" (GRIND :EXCLUDE "scafcount") NIL NIL)) NIL)
                 ("3" (TYPEPRED "stack") (("3" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|exp2_lt| FORMULA-DECL NIL |exp2| NIL)
    (|scafcount_max| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scafcount_update| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "(number_fields.+)(ltedfapeg.depth, 1)"
    "(ltedfapeg.good_depth?(ltedfapeg.len, ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.n3) := ltedfapeg.stack]))")))
 (|step_TCC42| 0
  (|step_TCC54-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (GROUND)
      (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
       ("2" (TYPEPRED "stack")
        (("2" (EXPAND "good_stack?" +)
          (("2" (GROUND)
            (("1" (GRIND) NIL NIL)
             ("2" (LEMMA "good_mem_stack")
              (("2"
                (INST - "G" "depth" "len" "scaf" "push(pos!1, n3)" "stack"
                 "stack")
                (("1" (GROUND)
                  (("1" (GRIND) NIL NIL)
                   ("2" (USE "mem_stack_push") (("2" (GROUND) NIL NIL)) NIL)
                   ("3" (GRIND) NIL NIL))
                  NIL)
                 ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (EXPAND "fine_stack?" +)
        (("3" (GROUND)
          (("1" (LEMMA "mem_mem_stack")
            (("1" (INST - "G" "depth" "len" "scaf" _ _ _ _)
              (("1"
                (INST - "push(pos!1, n3)" "push(pos!1, n3)" "stack" "stack")
                (("1" (GROUND)
                  (("1" (HIDE -2)
                    (("1" (USE "mem_stack_push") (("1" (GROUND) NIL NIL)) NIL))
                    NIL)
                   ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)
                   ("3" (TYPEPRED "stack") (("3" (GRIND) NIL NIL)) NIL)
                   ("4" (USE "mem_stack_push") (("4" (GROUND) NIL NIL)) NIL)
                   ("5" (TYPEPRED "stack") (("5" (GRIND) NIL NIL)) NIL))
                  NIL)
                 ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)
                 ("3" (TYPEPRED "stack") (("3" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("2"
            (USE "fine_mem_stack" :SUBST
                 ("len" "len" "entry" "push(pos!1, n3)" "u" "stack" "stack"
                  "stack"))
            (("1" (GROUND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (USE "mem_stack_push") (("2" (GROUND) NIL NIL)) NIL)
               ("3" (GRIND) NIL NIL))
              NIL)
             ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)
             ("3" (GRIND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|good_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|fine_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|mem_stack_push| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (G SKOLEM-CONST-DECL "lang_spec" |ltedfapeg| NIL)
    (|s| SKOLEM-CONST-DECL "strings(len)" |ltedfapeg| NIL)
    (|start| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|rootnt| SKOLEM-CONST-DECL "non_terminal" |ltedfapeg| NIL)
    (|St| SKOLEM-CONST-DECL "state(len, G, s, start, rootnt)" |ltedfapeg| NIL)
    (|stack| SKOLEM-CONST-DECL "(fine_stack?(len, G, St`depth, St`scaf))"
     |ltedfapeg| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|push| ADT-CONSTRUCTOR-DECL "[[uint32, uint8] -> (push?)]" |ltedfapeg|
     NIL)
    (|pos!1| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|n3| SKOLEM-CONST-DECL "non_terminal" |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|mem_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|fine_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.push(ltedfapeg.pos, ltedfapeg.n3)"
    "(ltedfapeg.fine_stack?(ltedfapeg.len, ltedfapeg.G, (number_fields.+)(ltedfapeg.depth, 1), ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.n3) := ltedfapeg.stack]))")))
 (|step_TCC43| 0
  (|step_TCC81-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (GROUND)
      (("1" (TYPEPRED "lflag")
        (("1" (ASSERT)
          (("1" (HIDE -2)
            (("1" (GROUND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (GRIND) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (TYPEPRED "lflag")
        (("2" (ASSERT)
          (("2" (HIDE -1)
            (("2" (SKEEP*)
              (("2" (LIFT-IF)
                (("2" (GROUND)
                  (("1" (LIFT-IF)
                    (("1" (GROUND)
                      (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
                       ("2" (INST?) NIL NIL))
                      NIL))
                    NIL)
                   ("2" (INST?) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.St`lflag"
    "{b: booleans.bool | IF b THEN booleans.OR(ltedfapeg.n3 = ltedfapeg.num_non_terminals, ltedfapeg.loop_ready?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.n3) := ltedfapeg.stack], ltedfapeg.pos, ltedfapeg.n3)) ELSE FORALL (i: naturalnumbers.upto(ltedfapeg.len)), (n: non_terminal): (booleans.NOT)(ltedfapeg.loop?(ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.n3) := ltedfapeg.stack](i)(n))) ENDIF}")))
 (|step_TCC44| 0
  (|step_TCC28-1| |nil| 3804455654 ("" (SUBTYPE-TCC) NIL NIL)
   ((|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.loop"
    "(ltedfapeg.nice_entry?(ltedfapeg.len, ltedfapeg.pos))")))
 (|step_TCC45| 0
  (|step_TCC29-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (TYPEPRED "scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)
           ("2" (USE "good_good_tscaffold")
            (("1" (GROUND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (TYPEPRED "stack")
                (("2" (HIDE 2)
                  (("2" (EXPAND "fine_entry?") (("2" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL)
               ("3" (HIDE 2)
                (("3" (SKEEP*)
                  (("3" (TYPEPRED "lflag")
                    (("3" (CASE "lflag")
                      (("1" (ASSERT)
                        (("1" (HIDE -3) (("1" (GRIND) NIL NIL)) NIL)) NIL)
                       ("2" (ASSERT) (("2" (INST?) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|sigma| DEF-DECL "nat" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|good_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|fine_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|loop| ADT-CONSTRUCTOR-DECL "(loop?)" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos!1| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_good_tscaffold| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE
    "ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.loop]"
    "(ltedfapeg.fine_scaffold?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.s)(ltedfapeg.start, ltedfapeg.rootnt))")))
 (|step_TCC46| 0
  (|step_TCC26-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (TYPEPRED "stack")
      (("" (TYPEPRED "depth")
        (("" (EXPAND "good_depth?")
          (("" (EXPAND "pushcount")
            (("" (USE "scafcount_max")
              (("" (ASSERT)
                (("" (USE "exp2_lt" :SUBST ("n" 41 "m" 64))
                  (("" (GROUND)
                    (("1" (GRIND) NIL NIL)
                     ("2" (REWRITE "scafcount_update")
                      (("1" (LIFT-IF)
                        (("1" (GROUND)
                          (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
                           ("2" (TYPEPRED "depth")
                            (("2" (GRIND :EXCLUDE "scafcount") NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|scafcount_max| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|exp2_lt| FORMULA-DECL NIL |exp2| NIL)
    (|scafcount_update| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|loop| ADT-CONSTRUCTOR-DECL "(loop?)" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "(number_fields.-)(ltedfapeg.depth, 1)"
    "(ltedfapeg.good_depth?(ltedfapeg.len, ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.loop]))")))
 (|step_TCC47| 0
  (|step_TCC27-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (GROUND)
      (("1" (TYPEPRED "St`scaf(pos!1)(n1)")
        (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)) NIL)
       ("2" (LEMMA "good_mem_stack")
        (("2"
          (INST - "G" "depth - 1" "len" "scaf" "push(pos!1, cur)" "rest"
           "loop")
          (("1" (GROUND)
            (("1" (HIDE 2)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)) NIL)
             ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)
             ("3" (TYPEPRED "St`stack")
              (("3" (EXPAND "fine_stack?")
                (("3" (GROUND)
                  (("1" (GRIND :EXCLUDE "mem_stack") NIL NIL)
                   ("2" (HIDE -1)
                    (("2" (REPLACE -8)
                      (("2" (REPLACE -9)
                        (("2" (REPLACE -5)
                          (("2"
                            (CASE-REPLACE
                             "push(pos(St`stack), nt(St`stack)) = St`stack")
                            (("1"
                              (CASE-REPLACE
                               "St`scaf(pos(St`stack))(nt(St`stack)) = rest")
                              (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL))
                              NIL)
                             ("2" (APPLY-EXTENSIONALITY 1) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("4" (TYPEPRED "stack") (("4" (GRIND) NIL NIL)) NIL))
            NIL)
           ("2" (GRIND) NIL NIL)
           ("3" (TYPEPRED "stack") (("3" (GRIND) NIL NIL)) NIL)
           ("4" (TYPEPRED "stack") (("4" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL)
       ("3" (LEMMA "FINE_MEM_STACK")
        (("3"
          (INST - "G" "depth - 1" "len" "scaf" "push(pos!1, cur)" "rest"
           "loop")
          (("1" (GROUND)
            (("1" (HIDE 2)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)) NIL)
             ("2" (HIDE 2)
              (("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)) NIL)
             ("3" (HIDE 2)
              (("3" (TYPEPRED "stack") (("3" (GRIND) NIL NIL)) NIL)) NIL)
             ("4" (TYPEPRED "stack")
              (("4" (HIDE 1)
                (("4" (EXPAND "fine_stack?")
                  (("4" (GROUND)
                    (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
                     ("2"
                      (CASE-REPLACE "St`scaf(pos(stack))(nt(stack)) = rest")
                      (("1" (CASE-REPLACE "push(pos!1, cur) = St`stack")
                        (("1" (ASSERT) NIL NIL)
                         ("2" (APPLY-EXTENSIONALITY 1) (("2" (GRIND) NIL NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("5" (TYPEPRED "stack") (("5" (GRIND) NIL NIL)) NIL))
            NIL)
           ("2" (GRIND) NIL NIL)
           ("3" (TYPEPRED "stack") (("3" (GRIND) NIL NIL)) NIL)
           ("4" (TYPEPRED "stack") (("4" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|loop| ADT-CONSTRUCTOR-DECL "(loop?)" |ltedfapeg| NIL)
    (|cur| SKOLEM-CONST-DECL "uint8" |ltedfapeg| NIL)
    (|pos!1| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|push| ADT-CONSTRUCTOR-DECL "[[uint32, uint8] -> (push?)]" |ltedfapeg|
     NIL)
    (|depth| SKOLEM-CONST-DECL "(good_depth?(len, St`scaf))" |ltedfapeg| NIL)
    (|St| SKOLEM-CONST-DECL "state(len, G, s, start, rootnt)" |ltedfapeg| NIL)
    (|rootnt| SKOLEM-CONST-DECL "non_terminal" |ltedfapeg| NIL)
    (|start| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|s| SKOLEM-CONST-DECL "strings(len)" |ltedfapeg| NIL)
    (G SKOLEM-CONST-DECL "lang_spec" |ltedfapeg| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|ent_push_extensionality| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|fine_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|fine_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.rest"
    "(ltedfapeg.fine_stack?(ltedfapeg.len, ltedfapeg.G, (number_fields.-)(ltedfapeg.depth, 1), ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.loop]))")))
 (|step_TCC48| 0
  (|step_TCC103-1| |nil| 3804706560
   ("" (SKEEP*)
    (("" (TYPEPRED "stack")
      (("" (EXPAND "good_stack?")
        (("" (GROUND)
          (("1" (GRIND) NIL NIL)
           ("2" (GRIND :EXCLUDE ("good_stack?" "fine_stack?" "mem_stack?")) NIL
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "booleans.TRUE"
    "{b: booleans.bool | IF b THEN booleans.OR(ltedfapeg.nt(ltedfapeg.rest) = ltedfapeg.num_non_terminals, ltedfapeg.loop_ready?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.loop], ltedfapeg.pos(ltedfapeg.rest), ltedfapeg.nt(ltedfapeg.rest))) ELSE FORALL (i: naturalnumbers.upto(ltedfapeg.len)), (n: non_terminal): (booleans.NOT)(ltedfapeg.loop?(ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.loop](i)(n))) ENDIF}")))
 (|step_TCC49| 0
  (|step_TCC30-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (TYPEPRED "scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("" (EXPAND "good_tscaffold?")
            (("" (INST - "pos!1" "n1")
              (("" (GROUND)
                (("1" (EXPAND "gfcount")
                  (("1" (USE "sigma_max")
                    (("1" (GROUND)
                      (("1"
                        (CASE
                            "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                        (("1" (ASSERT)
                          (("1"
                            (NAME-REPLACE "lnn"
                             "len * num_non_terminals + num_non_terminals")
                            (("1" (ASSERT)
                              (("1" (CASE-REPLACE "dep(scaf(pos!1)(n1)) = d1")
                                (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (CASE "len * num_non_terminals <= exp2(46)")
                            (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)
                             ("2"
                              (USE "lt_times_lt_pos1" :SUBST
                                   ("px" "len" "nnz" "num_non_terminals" "y"
                                    "exp2(32)" "w" "exp2(8)"))
                              (("1" (HIDE-ALL-BUT (-1 1))
                                (("1" (GRIND)
                                  (("1" (TYPEPRED "len")
                                    (("1" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL)
                               ("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (GRIND) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|lt_times_lt_pos1| FORMULA-DECL NIL |real_props| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|dep| SHARED-ADT-ACCESSOR-DECL
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|fail?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|plus_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|sigma_max| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "(number_fields.+)(ltedfapeg.pos, ltedfapeg.sp)"
    "upto(ltedfapeg.len)")))
 (|step_TCC50| 0
  (|step_TCC75-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (TYPEPRED "scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("" (EXPAND "good_tscaffold?")
            (("" (INST-CP - "pos!1" "n1")
              (("" (INST - "pos!1+sp" "n2")
                (("" (GROUND)
                  (("1" (EXPAND "gfcount")
                    (("1" (USE "sigma_max")
                      (("1" (GROUND)
                        (("1"
                          (CASE
                              "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                          (("1" (ASSERT)
                            (("1"
                              (NAME-REPLACE "lnn"
                               "len * num_non_terminals + num_non_terminals")
                              (("1" (ASSERT)
                                (("1"
                                  (CASE-REPLACE
                                   "dep(scaf(pos!1 + sp)(n2)) = d2")
                                  (("1"
                                    (CASE-REPLACE "dep(scaf(pos!1)(n1)) = d1")
                                    (("1" (ASSERT)
                                      (("1" (EXPAND "max")
                                        (("1" (LIFT-IF)
                                          (("1" (GROUND) NIL NIL)) NIL))
                                        NIL))
                                      NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL)
                                   ("2" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT)
                            (("2" (CASE "len * num_non_terminals <= exp2(46)")
                              (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)
                               ("2"
                                (USE "lt_times_lt_pos1" :SUBST
                                     ("px" "len" "nnz" "num_non_terminals" "y"
                                      "exp2(32)" "w" "exp2(8)"))
                                (("1" (HIDE-ALL-BUT (-1 1))
                                  (("1" (GRIND)
                                    (("1" (TYPEPRED "len")
                                      (("1" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)
                   ("4" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|sigma_max| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|fail?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|good?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|dep| SHARED-ADT-ACCESSOR-DECL
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" |ltedfapeg| NIL)
    (|minus_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|lt_times_lt_pos1| FORMULA-DECL NIL |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE
    "(number_fields.+)(1, real_defs.max(ltedfapeg.d1, ltedfapeg.d2))"
    "uint64")))
 (|step_TCC51| 0
  (|step_TCC56-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (TYPEPRED "St`scaf(pos!1)(n1)")
      (("" (TYPEPRED "St`scaf(pos!1 + sp)(n2)") (("" (GRIND) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE
    "ltedfapeg.fail((number_fields.+)(1, real_defs.max(ltedfapeg.d1, ltedfapeg.d2)))"
    "(ltedfapeg.nice_entry?(ltedfapeg.len, ltedfapeg.pos))")))
 (|step_TCC52| 0
  (|step_TCC63-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (TYPEPRED "scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)
           ("2" (USE "good_good_tscaffold")
            (("1" (GROUND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)
               ("3" (TYPEPRED "lflag")
                (("3" (SKEEP*)
                  (("3" (GROUND)
                    (("1" (INST?) NIL NIL) ("2" (GRIND) NIL NIL)
                     ("3" (INST?) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE -2 2)
              (("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|sigma| DEF-DECL "nat" |ltedfapeg| NIL)
    (|good_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|mem_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|d2| SKOLEM-CONST-DECL "uint64" |ltedfapeg| NIL)
    (|d1| SKOLEM-CONST-DECL "uint64" |ltedfapeg| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|fail| ADT-CONSTRUCTOR-DECL "[uint64 -> (fail?)]" |ltedfapeg| NIL)
    (|fail?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos!1| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_good_tscaffold| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE
    "ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.fail((number_fields.+)(1, real_defs.max(ltedfapeg.d1, ltedfapeg.d2)))]"
    "(ltedfapeg.fine_scaffold?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.s)(ltedfapeg.start, ltedfapeg.rootnt))")))
 (|step_TCC53| 0
  (|step_TCC39-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (SPLIT +)
      (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
       ("2" (TYPEPRED "depth") (("2" (GRIND) NIL NIL)) NIL)
       ("3" (TYPEPRED "depth")
        (("3" (TYPEPRED "stack")
          (("3" (EXPAND "good_depth?")
            (("3" (EXPAND "pushcount")
              (("3" (EXPAND "scafcount")
                (("3"
                  (USE "sigma_dec"
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" "pos!1" "j" "len"))
                  (("1" (GROUND)
                    (("1" (LIFT-IF -1)
                      (("1" (GROUND)
                        (("1" (GRIND) NIL NIL)
                         ("2"
                          (CASE-REPLACE "(LAMBDA (i: upto(len)):
                                                                                                           count(num_non_terminals)(push?)
                                                                                                                (St`scaf WITH [(pos!1)(cur) := fail(1 + max(d1, d2))](i))) = ((LAMBDA (i: upto(len)):
                                                                                                           count(num_non_terminals)(push?)(St`scaf(i)))
                                                                                                          WITH [(pos!1)
                                                                                                                  := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                                                      1])")
                          (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL)
                           ("2" (HIDE -1 3)
                            (("2" (APPLY-EXTENSIONALITY)
                              (("1" (HIDE 2)
                                (("1" (EXPAND "count")
                                  (("1" (CASE "pos!1 = x!1")
                                    (("1" (ASSERT)
                                      (("1"
                                        (CASE-REPLACE
                                         "{i: below(num_non_terminals) |
                                                                                                                                                                            push?(St`scaf(x!1) WITH [(cur) := fail(1 + max(d1, d2))](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1" (REWRITE "card_remove")
                                          (("1" (HIDE -1)
                                            (("1" (LIFT-IF +)
                                              (("1" (GROUND)
                                                (("1" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE -1 2)
                                            (("2" (REWRITE "count_TCC1")
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2)
                                          (("2" (APPLY-EXTENSIONALITY)
                                            (("1" (HIDE 2)
                                              (("1" (HIDE -3 -4 -6)
                                                (("1" (GRIND) NIL NIL)) NIL))
                                              NIL)
                                             ("2" (HIDE 2)
                                              (("2"
                                                (TYPEPRED "St`scaf(pos!1)(n1)")
                                                (("2" (GRIND) NIL NIL)) NIL))
                                              NIL)
                                             ("3" (SKEEP*)
                                              (("3" (USE "step_tcc50")
                                                (("3" (GROUND)
                                                  (("3" (INST?)
                                                    (("3" (INST?)
                                                      (("3" (INST?)
                                                        (("3" (INST?)
                                                          (("3" (GROUND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("3" (HIDE -6 2)
                                          (("3" (TYPEPRED "St`scaf(pos!1)(n1)")
                                            (("3"
                                              (TYPEPRED "St`scaf(pos!1)(n2)")
                                              (("3" (SKEEP*)
                                                (("3" (USE "step_tcc51")
                                                  (("3" (GROUND)
                                                    (("3" (INST?)
                                                      (("3" (INST?)
                                                        (("3" (INST?)
                                                          (("3" (INST?)
                                                            (("3" (GROUND)
                                                              (("3"
                                                                (TYPEPRED
                                                                 "St`scaf(pos!1)(n1)")
                                                                (("3"
                                                                  (TYPEPRED
                                                                   "St`scaf(pos!1)(n2)")
                                                                  (("3" (GRIND)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("4" (USE "step_tcc50")
                                          (("4" (GROUND)
                                            (("4" (INST?)
                                              (("4" (INST?)
                                                (("4" (INST?)
                                                  (("4" (INST?)
                                                    (("4" (GROUND) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "count")
                                (("2"
                                  (USE
                                   "nonempty_card[below(num_non_terminals)]")
                                  (("1" (GRIND) NIL NIL)
                                   ("2" (REWRITE "count_tcc1")
                                    (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL)
                               ("3" (HIDE 2)
                                (("3" (TYPEPRED "St`scaf(pos!1)(n1)")
                                  (("3" (TYPEPRED "St`scaf(pos!1)(n2)")
                                    (("3" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL)
                               ("4" (HIDE 2)
                                (("4" (USE "step_tcc50")
                                  (("4" (GROUND)
                                    (("4" (INST?)
                                      (("4" (INST?)
                                        (("4" (INST?)
                                          (("4" (INST?)
                                            (("4" (GROUND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (EXPAND "count")
                            (("3"
                              (USE "nonempty_card[below(num_non_terminals)]")
                              (("1" (GRIND) NIL NIL)
                               ("2" (REWRITE "count_tcc1")
                                (("2" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("4" (USE "step_tcc51")
                            (("4" (GROUND)
                              (("4" (INST?)
                                (("4" (INST?)
                                  (("4" (INST?)
                                    (("4" (INST?) (("4" (GROUND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("5" (HIDE -1 3)
                            (("5" (USE "step_tcc50")
                              (("5" (GROUND)
                                (("5" (INST?)
                                  (("5" (INST?)
                                    (("5" (INST?)
                                      (("5" (INST?) (("5" (GROUND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "count")
                      (("2" (USE "nonempty_card[below(num_non_terminals)]")
                        (("1" (GRIND) NIL NIL)
                         ("2" (REWRITE "count_tcc1") (("2" (GRIND) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sigma_dec| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|arr| TYPE-EQ-DECL NIL |arrayCount| NIL)
    (|fail?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|fail| ADT-CONSTRUCTOR-DECL "[uint64 -> (fail?)]" |ltedfapeg| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (G SKOLEM-CONST-DECL "lang_spec" |ltedfapeg| NIL)
    (|s| SKOLEM-CONST-DECL "strings(len)" |ltedfapeg| NIL)
    (|start| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|rootnt| SKOLEM-CONST-DECL "non_terminal" |ltedfapeg| NIL)
    (|St| SKOLEM-CONST-DECL "state(len, G, s, start, rootnt)" |ltedfapeg| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|pos!1| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|d1| SKOLEM-CONST-DECL "uint64" |ltedfapeg| NIL)
    (|d2| SKOLEM-CONST-DECL "uint64" |ltedfapeg| NIL)
    (|step_TCC51| SUBTYPE-TCC NIL |ltedfapeg| NIL)
    (|step_TCC50| SUBTYPE-TCC NIL |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|x!1| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|card_remove| FORMULA-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|count_TCC1| SUBTYPE-TCC NIL |arrayCount| NIL)
    (|remove| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nonempty_card| FORMULA-DECL NIL |finite_sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "(number_fields.-)(ltedfapeg.depth, 1)"
    "(ltedfapeg.good_depth?(ltedfapeg.len, ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.fail((number_fields.+)(1, real_defs.max(ltedfapeg.d1, ltedfapeg.d2)))]))")))
 (|step_TCC54| 0
  (|step_TCC40-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (GROUND)
      (("1" (TYPEPRED "rest")
        (("1" (TYPEPRED "stack")
          (("1" (EXPAND "good_stack?") (("1" (GRIND) NIL NIL)) NIL)) NIL))
        NIL)
       ("2" (LEMMA "good_mem_stack")
        (("2"
          (INST - "G" "depth - 1" "len" "scaf" "stack" "rest"
           "fail(1 + max(d1, d2))")
          (("1" (GROUND)
            (("1" (HIDE 2)
              (("1" (TYPEPRED "stack")
                (("1" (EXPAND "good_stack?" -)
                  (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)
             ("3" (TYPEPRED "stack")
              (("3" (EXPAND "fine_stack?" -)
                (("3" (GROUND) (("3" (GRIND) NIL NIL)) NIL)) NIL))
              NIL)
             ("4" (TYPEPRED "stack") (("4" (GRIND) NIL NIL)) NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (TYPEPRED "stack")
              (("2" (TYPEPRED "St`scaf(pos!1)(n1)")
                (("2" (TYPEPRED "St`scaf(pos!1)(n2)") (("2" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (TYPEPRED "stack") (("3" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL)
       ("3" (TYPEPRED "stack")
        (("3" (EXPAND "fine_stack?" -)
          (("3" (GROUND)
            (("1" (GRIND) NIL NIL)
             ("2" (LEMMA "fine_mem_stack")
              (("2" (GROUND)
                (("2" (EXPAND "good_stack?" -)
                  (("2"
                    (INST - "G" "depth - 1" "len" "scaf" "stack" "rest"
                     "fail(1 + max(d1, d2))")
                    (("1" (GROUND)
                      (("1" (EXPAND "good_stack?" -) (("1" (PROPAX) NIL NIL))
                        NIL)
                       ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)
                       ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)
                       ("6" (GRIND) NIL NIL) ("7" (GRIND) NIL NIL)
                       ("8" (GRIND) NIL NIL) ("9" (GRIND) NIL NIL)
                       ("10" (GRIND) NIL NIL))
                      NIL)
                     ("2" (TYPEPRED "St`scaf(pos!1)(n1)")
                      (("2" (TYPEPRED "St`scaf(pos!1)(n2)")
                        (("2" (GRIND) NIL NIL)) NIL))
                      NIL)
                     ("3" (GRIND) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|d2| SKOLEM-CONST-DECL "uint64" |ltedfapeg| NIL)
    (|d1| SKOLEM-CONST-DECL "uint64" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|fail| ADT-CONSTRUCTOR-DECL "[uint64 -> (fail?)]" |ltedfapeg| NIL)
    (|fail?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|stack| SKOLEM-CONST-DECL "(fine_stack?(len, G, St`depth, St`scaf))"
     |ltedfapeg| NIL)
    (|depth| SKOLEM-CONST-DECL "(good_depth?(len, St`scaf))" |ltedfapeg| NIL)
    (|St| SKOLEM-CONST-DECL "state(len, G, s, start, rootnt)" |ltedfapeg| NIL)
    (|rootnt| SKOLEM-CONST-DECL "non_terminal" |ltedfapeg| NIL)
    (|start| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|s| SKOLEM-CONST-DECL "strings(len)" |ltedfapeg| NIL)
    (G SKOLEM-CONST-DECL "lang_spec" |ltedfapeg| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|fine_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|good_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|fine_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|mem_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.rest"
    "(ltedfapeg.fine_stack?(ltedfapeg.len, ltedfapeg.G, (number_fields.-)(ltedfapeg.depth, 1), ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.fail((number_fields.+)(1, real_defs.max(ltedfapeg.d1, ltedfapeg.d2)))]))")))
 (|step_TCC55| 0
  (|step_TCC96-1| |nil| 3804706560
   ("" (SKEEP*)
    (("" (GROUND)
      (("1" (TYPEPRED "lflag")
        (("1" (ASSERT)
          (("1" (HIDE -2)
            (("1" (GROUND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (GRIND) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (TYPEPRED "lflag")
        (("2" (ASSERT) (("2" (HIDE -1) (("2" (LAZY-GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.St`lflag"
    "{b: booleans.bool | IF b THEN booleans.OR(ltedfapeg.nt(ltedfapeg.rest) = ltedfapeg.num_non_terminals, ltedfapeg.loop_ready?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.fail((number_fields.+)(1, real_defs.max(ltedfapeg.d1, ltedfapeg.d2)))], ltedfapeg.pos(ltedfapeg.rest), ltedfapeg.nt(ltedfapeg.rest))) ELSE FORALL (i: naturalnumbers.upto(ltedfapeg.len)), (n: non_terminal): (booleans.NOT)(ltedfapeg.loop?(ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.fail((number_fields.+)(1, real_defs.max(ltedfapeg.d1, ltedfapeg.d2)))](i)(n))) ENDIF}")))
 (|step_TCC56| 0
  (|step_TCC64-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (TYPEPRED "scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("" (EXPAND "good_tscaffold?")
            (("" (INST-CP - "pos!1" "n1")
              (("" (INST - "pos!1+sp" "n2")
                (("" (GROUND)
                  (("1" (EXPAND "gfcount")
                    (("1" (USE "sigma_max")
                      (("1" (GROUND)
                        (("1"
                          (CASE
                              "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                          (("1" (ASSERT)
                            (("1"
                              (NAME-REPLACE "lnn"
                               "len * num_non_terminals + num_non_terminals")
                              (("1" (ASSERT)
                                (("1"
                                  (CASE-REPLACE
                                   "dep(scaf(pos!1 + sp)(n2)) = d2")
                                  (("1"
                                    (CASE-REPLACE "dep(scaf(pos!1)(n1)) = d1")
                                    (("1" (ASSERT)
                                      (("1" (EXPAND "max")
                                        (("1" (LIFT-IF)
                                          (("1" (GROUND) NIL NIL)) NIL))
                                        NIL))
                                      NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL)
                                   ("2" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT)
                            (("2" (CASE "len * num_non_terminals <= exp2(46)")
                              (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)
                               ("2"
                                (USE "lt_times_lt_pos1" :SUBST
                                     ("px" "len" "nnz" "num_non_terminals" "y"
                                      "exp2(32)" "w" "exp2(8)"))
                                (("1" (HIDE-ALL-BUT (-1 1))
                                  (("1" (GRIND)
                                    (("1" (TYPEPRED "len")
                                      (("1" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL)
                                 ("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)
                   ("4" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|sigma_max| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|fail?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|good?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|dep| SHARED-ADT-ACCESSOR-DECL
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" |ltedfapeg| NIL)
    (|minus_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|lt_times_lt_pos1| FORMULA-DECL NIL |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE
    "(number_fields.+)(1, real_defs.max(ltedfapeg.d1, ltedfapeg.d2))"
    "uint64")))
 (|step_TCC57| 0
  (|step_TCC41-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (TYPEPRED "St`scaf(pos!1)(n1)")
      (("" (TYPEPRED "St`scaf(pos!1 + sp)(n2)")
        (("" (TYPEPRED "len") (("" (GRIND) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "(number_fields.+)(ltedfapeg.sp, ltedfapeg.sp2)" "uint32")))
 (|step_TCC58| 0
  (|step_TCC76-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (TYPEPRED "St`scaf(pos!1)(n1)")
      (("" (TYPEPRED "St`scaf(pos!1 + sp)(n2)") (("" (GRIND) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE
    "ltedfapeg.good((number_fields.+)(1, real_defs.max(ltedfapeg.d1, ltedfapeg.d2)), (number_fields.+)(ltedfapeg.sp, ltedfapeg.sp2))"
    "(ltedfapeg.nice_entry?(ltedfapeg.len, ltedfapeg.pos))")))
 (|step_TCC59| 0
  (|step_TCC83-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (TYPEPRED "scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)
           ("2" (USE "good_good_tscaffold")
            (("1" (GROUND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (TYPEPRED "stack")
                (("2" (HIDE 2)
                  (("2" (EXPAND "fine_entry?")
                    (("2" (GROUND)
                      (("1" (TYPEPRED "St`scaf(pos!1 + sp)(n2)")
                        (("1" (GRIND) NIL NIL)) NIL)
                       ("2" (EXPAND "good_good?")
                        (("2" (GRIND :EXCLUDE ("max" "gfcount")) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (HIDE 2)
                (("3" (TYPEPRED "lflag")
                  (("3" (SKEEP*)
                    (("3" (GROUND)
                      (("1" (INST?) NIL NIL) ("2" (GRIND) NIL NIL)
                       ("3" (INST?) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE 2)
              (("2" (TYPEPRED "St`scaf(pos!1 + sp)(n2)")
                (("2" (TYPEPRED "St`scaf(pos!1)(n1)") (("2" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|sigma| DEF-DECL "nat" |ltedfapeg| NIL)
    (|good_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|fine_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|sp| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|sp2| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|d2| SKOLEM-CONST-DECL "uint64" |ltedfapeg| NIL)
    (|d1| SKOLEM-CONST-DECL "uint64" |ltedfapeg| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|good| ADT-CONSTRUCTOR-DECL "[[uint64, uint32] -> (good?)]" |ltedfapeg|
     NIL)
    (|good?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos!1| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_good_tscaffold| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE
    "ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.good((number_fields.+)(1, real_defs.max(ltedfapeg.d1, ltedfapeg.d2)), (number_fields.+)(ltedfapeg.sp, ltedfapeg.sp2))]"
    "(ltedfapeg.fine_scaffold?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.s)(ltedfapeg.start, ltedfapeg.rootnt))")))
 (|step_TCC60| 0
  (|step_TCC35-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (SPLIT +)
      (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
       ("2" (TYPEPRED "depth") (("2" (GRIND) NIL NIL)) NIL)
       ("3" (TYPEPRED "depth")
        (("3" (TYPEPRED "stack")
          (("3" (EXPAND "good_depth?")
            (("3" (EXPAND "pushcount")
              (("3" (EXPAND "scafcount")
                (("3"
                  (USE "sigma_dec"
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" "pos!1" "j" "len"))
                  (("1" (GROUND)
                    (("1" (LIFT-IF -1)
                      (("1" (GROUND)
                        (("1" (GRIND) NIL NIL)
                         ("2"
                          (CASE-REPLACE "(LAMBDA (i: upto(len)):
                                                                                                   count(num_non_terminals)(push?)
                                                                                                        (St`scaf WITH [(pos!1)(cur) := good(1 + max(d1, d2), sp2 + sp)](i))) = ((LAMBDA (i: upto(len)):
                                                                                                   count(num_non_terminals)(push?)(St`scaf(i)))
                                                                                                  WITH [(pos!1)
                                                                                                          := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                                              1])")
                          (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL)
                           ("2" (HIDE -1 3)
                            (("2" (APPLY-EXTENSIONALITY)
                              (("1" (HIDE 2)
                                (("1" (EXPAND "count")
                                  (("1" (CASE "pos!1 = x!1")
                                    (("1" (ASSERT)
                                      (("1"
                                        (CASE-REPLACE
                                         "{i: below(num_non_terminals) |
                                                                                                                                                              push?(St`scaf(x!1) WITH [(cur) := good(1 + max(d1, d2), sp2 + sp)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1" (REWRITE "card_remove")
                                          (("1" (HIDE -1)
                                            (("1" (LIFT-IF +)
                                              (("1" (GROUND)
                                                (("1" (GRIND) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE -1 2)
                                            (("2" (REWRITE "count_TCC1")
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2)
                                          (("2" (APPLY-EXTENSIONALITY)
                                            (("1" (HIDE 2)
                                              (("1" (HIDE -3 -4 -6)
                                                (("1" (GRIND) NIL NIL)) NIL))
                                              NIL)
                                             ("2" (HIDE 2)
                                              (("2"
                                                (TYPEPRED "St`scaf(pos!1)(n1)")
                                                (("2"
                                                  (TYPEPRED
                                                   "St`scaf(pos!1 + sp)(n2)")
                                                  (("2" (GRIND) NIL NIL)) NIL))
                                                NIL))
                                              NIL)
                                             ("3" (SKEEP*)
                                              (("3" (USE "step_tcc57")
                                                (("3" (GROUND)
                                                  (("3" (INST?)
                                                    (("3" (INST?)
                                                      (("3" (INST?)
                                                        (("3" (INST?)
                                                          (("3" (GROUND) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("4" (HIDE -6 2)
                                              (("4"
                                                (TYPEPRED "St`scaf(pos!1)(n1)")
                                                (("4"
                                                  (TYPEPRED
                                                   "St`scaf(pos!1 + sp)(n2)")
                                                  (("4" (SKEEP*)
                                                    (("4" (USE "step_tcc56")
                                                      (("4" (GROUND)
                                                        (("4" (INST?)
                                                          (("4" (INST?)
                                                            (("4" (INST?)
                                                              (("4" (INST?)
                                                                (("4" (GROUND)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("3" (SKEEP*)
                                          (("3" (TYPEPRED "St`scaf(pos!1)(n1)")
                                            (("3"
                                              (TYPEPRED
                                               "St`scaf(pos!1 + sp)(n2)")
                                              (("3" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("4" (SKEEP*)
                                          (("4" (USE "step_tcc57")
                                            (("4" (GROUND)
                                              (("4" (INST?)
                                                (("4" (INST?)
                                                  (("4" (INST?)
                                                    (("4" (INST?)
                                                      (("4" (GROUND) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("5" (SKEEP*)
                                          (("5" (USE "step_tcc56")
                                            (("5" (GROUND)
                                              (("5" (INST?)
                                                (("5" (INST?)
                                                  (("5" (INST?)
                                                    (("5" (INST?)
                                                      (("5" (GROUND) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "count")
                                (("2"
                                  (USE
                                   "nonempty_card[below(num_non_terminals)]")
                                  (("1" (GRIND) NIL NIL)
                                   ("2" (REWRITE "count_tcc1")
                                    (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL)
                               ("3" (HIDE 2)
                                (("3" (TYPEPRED "St`scaf(pos!1)(n1)")
                                  (("3" (TYPEPRED "St`scaf(pos!1 + sp)(n2)")
                                    (("3" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL)
                               ("4" (HIDE 2)
                                (("4" (USE "step_tcc57")
                                  (("4" (GROUND)
                                    (("4" (INST?)
                                      (("4" (INST?)
                                        (("4" (INST?)
                                          (("4" (INST?)
                                            (("4" (GROUND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("5" (HIDE 2)
                                (("5" (USE "step_tcc56")
                                  (("5" (GROUND)
                                    (("5" (INST?)
                                      (("5" (INST?)
                                        (("5" (INST?)
                                          (("5" (INST?)
                                            (("5" (GROUND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (HIDE -1 3)
                            (("3" (EXPAND "count")
                              (("3"
                                (USE "nonempty_card[below(num_non_terminals)]")
                                (("1" (GRIND) NIL NIL)
                                 ("2" (REWRITE "count_tcc1")
                                  (("2" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("4" (HIDE -1 3)
                            (("4" (TYPEPRED "St`scaf(pos!1)(n1)")
                              (("4" (TYPEPRED "St`scaf(pos!1 + sp)(n2)")
                                (("4" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL)
                           ("5" (HIDE -1 3)
                            (("5" (USE "step_tcc57")
                              (("5" (GROUND)
                                (("5" (INST?)
                                  (("5" (INST?)
                                    (("5" (INST?)
                                      (("5" (INST?) (("5" (GROUND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("6" (HIDE -1 3)
                            (("6" (USE "step_tcc56")
                              (("6" (GROUND)
                                (("6" (INST?)
                                  (("6" (INST?)
                                    (("6" (INST?)
                                      (("6" (INST?) (("6" (GROUND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE 2)
                      (("2" (EXPAND "count")
                        (("2" (USE "nonempty_card[below(num_non_terminals)]")
                          (("1" (GRIND) NIL NIL)
                           ("2" (REWRITE "count_tcc1") (("2" (GRIND) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sigma_dec| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|arr| TYPE-EQ-DECL NIL |arrayCount| NIL)
    (|good?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|good| ADT-CONSTRUCTOR-DECL "[[uint64, uint32] -> (good?)]" |ltedfapeg|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (G SKOLEM-CONST-DECL "lang_spec" |ltedfapeg| NIL)
    (|s| SKOLEM-CONST-DECL "strings(len)" |ltedfapeg| NIL)
    (|start| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|rootnt| SKOLEM-CONST-DECL "non_terminal" |ltedfapeg| NIL)
    (|St| SKOLEM-CONST-DECL "state(len, G, s, start, rootnt)" |ltedfapeg| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|pos!1| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|sp2| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|sp| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|d1| SKOLEM-CONST-DECL "uint64" |ltedfapeg| NIL)
    (|d2| SKOLEM-CONST-DECL "uint64" |ltedfapeg| NIL)
    (|step_TCC56| SUBTYPE-TCC NIL |ltedfapeg| NIL)
    (|step_TCC57| SUBTYPE-TCC NIL |ltedfapeg| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|x!1| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|card_remove| FORMULA-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|count_TCC1| SUBTYPE-TCC NIL |arrayCount| NIL)
    (|remove| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nonempty_card| FORMULA-DECL NIL |finite_sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "(number_fields.-)(ltedfapeg.depth, 1)"
    "(ltedfapeg.good_depth?(ltedfapeg.len, ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.good((number_fields.+)(1, real_defs.max(ltedfapeg.d1, ltedfapeg.d2)), (number_fields.+)(ltedfapeg.sp, ltedfapeg.sp2))]))")))
 (|step_TCC61| 0
  (|step_TCC36-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (GROUND)
      (("1" (TYPEPRED "rest")
        (("1" (TYPEPRED "stack")
          (("1" (EXPAND "good_stack?") (("1" (GRIND) NIL NIL)) NIL)) NIL))
        NIL)
       ("2" (LEMMA "good_mem_stack")
        (("2"
          (INST - "G" "depth - 1" "len" "scaf" "stack" "rest"
           "good(1 + max(d1, d2), sp2 + sp)")
          (("1" (GROUND)
            (("1" (HIDE 2)
              (("1" (TYPEPRED "stack")
                (("1" (EXPAND "good_stack?" -)
                  (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)
             ("3" (TYPEPRED "stack")
              (("3" (EXPAND "fine_stack?" -)
                (("3" (GROUND) (("3" (GRIND) NIL NIL)) NIL)) NIL))
              NIL)
             ("4" (TYPEPRED "stack") (("4" (GRIND) NIL NIL)) NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (TYPEPRED "stack")
              (("2" (TYPEPRED "St`scaf(pos!1)(n1)")
                (("2" (TYPEPRED "St`scaf(pos!1 + sp)(n2)")
                  (("2" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("3" (USE "step_tcc60")
            (("3" (GROUND)
              (("3" (INST?)
                (("3" (INST?)
                  (("3" (INST?) (("3" (INST?) (("3" (GROUND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (TYPEPRED "stack")
        (("3" (EXPAND "fine_stack?" -)
          (("3" (GROUND)
            (("1" (GRIND) NIL NIL)
             ("2" (LEMMA "fine_mem_stack")
              (("2" (GROUND)
                (("2" (EXPAND "good_stack?" -)
                  (("2"
                    (INST - "G" "depth - 1" "len" "scaf" "stack" "rest"
                     "good(1 + max(d1, d2), sp2 + sp)")
                    (("1" (GROUND)
                      (("1" (EXPAND "good_stack?" -) (("1" (PROPAX) NIL NIL))
                        NIL)
                       ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)
                       ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)
                       ("6" (GRIND) NIL NIL) ("7" (GRIND) NIL NIL)
                       ("8" (GRIND) NIL NIL) ("9" (GRIND) NIL NIL)
                       ("10" (GRIND) NIL NIL))
                      NIL)
                     ("2" (TYPEPRED "St`scaf(pos!1)(n1)")
                      (("2" (TYPEPRED "St`scaf(pos!1 + sp)(n2)")
                        (("2" (GRIND) NIL NIL)) NIL))
                      NIL)
                     ("3" (GRIND) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|sp| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|sp2| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|d2| SKOLEM-CONST-DECL "uint64" |ltedfapeg| NIL)
    (|d1| SKOLEM-CONST-DECL "uint64" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|good| ADT-CONSTRUCTOR-DECL "[[uint64, uint32] -> (good?)]" |ltedfapeg|
     NIL)
    (|good?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|stack| SKOLEM-CONST-DECL "(fine_stack?(len, G, St`depth, St`scaf))"
     |ltedfapeg| NIL)
    (|depth| SKOLEM-CONST-DECL "(good_depth?(len, St`scaf))" |ltedfapeg| NIL)
    (|St| SKOLEM-CONST-DECL "state(len, G, s, start, rootnt)" |ltedfapeg| NIL)
    (|rootnt| SKOLEM-CONST-DECL "non_terminal" |ltedfapeg| NIL)
    (|start| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|s| SKOLEM-CONST-DECL "strings(len)" |ltedfapeg| NIL)
    (G SKOLEM-CONST-DECL "lang_spec" |ltedfapeg| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|fine_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|step_TCC60| SUBTYPE-TCC NIL |ltedfapeg| NIL)
    (|good_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|fine_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|mem_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.rest"
    "(ltedfapeg.fine_stack?(ltedfapeg.len, ltedfapeg.G, (number_fields.-)(ltedfapeg.depth, 1), ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.good((number_fields.+)(1, real_defs.max(ltedfapeg.d1, ltedfapeg.d2)), (number_fields.+)(ltedfapeg.sp, ltedfapeg.sp2))]))")))
 (|step_TCC62| 0
  (|step_TCC104-1| |nil| 3804706560
   ("" (SKEEP*)
    (("" (GROUND)
      (("1" (TYPEPRED "lflag")
        (("1" (ASSERT)
          (("1" (HIDE -2)
            (("1" (GROUND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (GRIND) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (TYPEPRED "lflag")
        (("2" (ASSERT) (("2" (HIDE -1) (("2" (LAZY-GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.St`lflag"
    "{b: booleans.bool | IF b THEN booleans.OR(ltedfapeg.nt(ltedfapeg.rest) = ltedfapeg.num_non_terminals, ltedfapeg.loop_ready?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.good((number_fields.+)(1, real_defs.max(ltedfapeg.d1, ltedfapeg.d2)), (number_fields.+)(ltedfapeg.sp2, ltedfapeg.sp))], ltedfapeg.pos(ltedfapeg.rest), ltedfapeg.nt(ltedfapeg.rest))) ELSE FORALL (i: naturalnumbers.upto(ltedfapeg.len)), (n: non_terminal): (booleans.NOT)(ltedfapeg.loop?(ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.good((number_fields.+)(1, real_defs.max(ltedfapeg.d1, ltedfapeg.d2)), (number_fields.+)(ltedfapeg.sp2, ltedfapeg.sp))](i)(n))) ENDIF}")))
 (|step_TCC63| 0
  (|step_TCC45-1| |nil| 3804455654 ("" (SUBTYPE-TCC) NIL NIL)
   ((|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.St`stack"
    "(ltedfapeg.nice_entry?(ltedfapeg.len, (number_fields.+)(ltedfapeg.pos, ltedfapeg.sp)))")))
 (|step_TCC64| 0
  (|step_TCC46-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (TYPEPRED "scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)
           ("2" (USE "good_good_tscaffold")
            (("1" (GROUND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (TYPEPRED "stack")
                (("2" (HIDE 2)
                  (("2" (EXPAND "fine_entry?")
                    (("2" (TYPEPRED "St`scaf(pos!1 + sp)(n2)")
                      (("2" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (HIDE 2)
                (("3" (SKEEP*)
                  (("3" (TYPEPRED "lflag")
                    (("3" (CASE "lflag")
                      (("1" (ASSERT)
                        (("1" (HIDE -3)
                          (("1" (GROUND)
                            (("1" (GRIND) NIL NIL)
                             ("2" (HIDE -5) (("2" (GRIND) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (HIDE -1) (("2" (INST?) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE 2)
              (("2" (HIDE -2)
                (("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|St| SKOLEM-CONST-DECL "state(len, G, s, start, rootnt)" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|rootnt| SKOLEM-CONST-DECL "non_terminal" |ltedfapeg| NIL)
    (|start| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|s| SKOLEM-CONST-DECL "strings(len)" |ltedfapeg| NIL)
    (G SKOLEM-CONST-DECL "lang_spec" |ltedfapeg| NIL)
    (|sp| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|pos!1| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|good_good_tscaffold| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE
    "ltedfapeg.St`scaf WITH [((number_fields.+)(ltedfapeg.pos, ltedfapeg.sp))(ltedfapeg.n2) := ltedfapeg.St`stack]"
    "(ltedfapeg.fine_scaffold?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.s)(ltedfapeg.start, ltedfapeg.rootnt))")))
 (|step_TCC65| 0
  (|step_TCC49-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (SPLIT +)
      (("1" (TYPEPRED "depth")
        (("1" (EXPAND "good_depth?")
          (("1" (EXPAND "pushcount")
            (("1" (USE "scafcount_max")
              (("1" (ASSERT)
                (("1" (USE "exp2_lt" :SUBST ("n" 41 "m" 64))
                  (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "good_depth?")
        (("2" (EXPAND "pushcount")
          (("2" (REWRITE "scafcount_update")
            (("1" (LIFT-IF)
              (("1" (GROUND)
                (("1" (TYPEPRED "St`scaf(pos!1)(n1)") (("1" (GRIND) NIL NIL))
                  NIL)
                 ("2" (TYPEPRED "depth")
                  (("2" (GRIND :EXCLUDE ("max" "scafcount")) NIL NIL)) NIL)
                 ("3" (TYPEPRED "stack") (("3" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|scafcount_max| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|exp2_lt| FORMULA-DECL NIL |exp2| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|scafcount_update| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "(number_fields.+)(ltedfapeg.St`depth, 1)"
    "(ltedfapeg.good_depth?(ltedfapeg.len, ltedfapeg.St`scaf WITH [((number_fields.+)(ltedfapeg.pos, ltedfapeg.sp))(ltedfapeg.n2) := ltedfapeg.St`stack]))")))
 (|step_TCC66| 0
  (|step_TCC50-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (TYPEPRED "St`scaf(pos!1)(n1)")
      (("" (TYPEPRED "St`scaf(pos!1 + sp)(n2)")
        (("" (TYPEPRED "len") (("" (GRIND) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "(number_fields.+)(ltedfapeg.pos, ltedfapeg.sp)" "uint32")))
 (|step_TCC67| 0
  (|step_TCC65-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (GROUND)
      (("1" (TYPEPRED "St`scaf(pos!1)(n1)") (("1" (GRIND) NIL NIL)) NIL)
       ("2" (LEMMA "good_mem_stack")
        (("2" (EXPAND "good_stack?" +)
          (("2" (GROUND)
            (("1" (HIDE -1) (("1" (GRIND) NIL NIL)) NIL)
             ("2"
              (INST - "G" "depth" "len" "scaf" "push(pos!1 + sp, n2)" "stack"
               "stack")
              (("1" (GROUND)
                (("1" (HIDE 2)
                  (("1" (TYPEPRED "St`scaf(pos!1)(n1)") (("1" (GRIND) NIL NIL))
                    NIL))
                  NIL)
                 ("2" (USE "mem_stack_push") (("2" (GROUND) NIL NIL)) NIL)
                 ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)) NIL)
               ("3" (HIDE 2)
                (("3" (TYPEPRED "St`scaf(pos!1)(n1)") (("3" (GRIND) NIL NIL))
                  NIL))
                NIL)
               ("4" (TYPEPRED "St`scaf(pos!1)(n1)")
                (("4" (TYPEPRED "len") (("4" (GRIND) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (EXPAND "fine_stack?" +)
        (("3" (GROUND)
          (("1" (LEMMA "mem_mem_stack")
            (("1" (INST - "G" "depth" "len" "scaf" _ _ _ _)
              (("1"
                (INST - "push(pos!1 + sp, n2)" "push(pos!1 + sp, n2)" "stack"
                 "stack")
                (("1" (GROUND)
                  (("1" (USE "mem_stack_push") (("1" (GROUND) NIL NIL)) NIL)
                   ("2" (TYPEPRED "St`scaf(pos!1)(n1)") (("2" (GRIND) NIL NIL))
                    NIL)
                   ("3" (TYPEPRED "St`scaf(pos!1)(n1)") (("3" (GRIND) NIL NIL))
                    NIL)
                   ("4" (USE "mem_stack_push") (("4" (GROUND) NIL NIL)) NIL)
                   ("5" (TYPEPRED "St`scaf(pos!1)(n1)") (("5" (GRIND) NIL NIL))
                    NIL))
                  NIL)
                 ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)
                 ("3" (TYPEPRED "St`scaf(pos!1)(n1)") (("3" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2"
            (USE "fine_mem_stack" :SUBST
                 ("len" "len" "entry" "push(pos!1 + sp, n2)"))
            (("1" (GROUND)
              (("1" (HIDE 2)
                (("1" (TYPEPRED "St`scaf(pos!1)(n1)") (("1" (GRIND) NIL NIL))
                  NIL))
                NIL)
               ("2" (USE "mem_stack_push") (("2" (GROUND) NIL NIL)) NIL)
               ("3" (GRIND) NIL NIL))
              NIL)
             ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)
             ("3" (TYPEPRED "St`scaf(pos!1)(n1)") (("3" (GRIND) NIL NIL)) NIL)
             ("4" (TYPEPRED "St`scaf(pos!1)(n1)")
              (("4" (TYPEPRED "len") (("4" (GRIND) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|stack| SKOLEM-CONST-DECL "(fine_stack?(len, G, St`depth, St`scaf))"
     |ltedfapeg| NIL)
    (|St| SKOLEM-CONST-DECL "state(len, G, s, start, rootnt)" |ltedfapeg| NIL)
    (|rootnt| SKOLEM-CONST-DECL "non_terminal" |ltedfapeg| NIL)
    (|start| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|s| SKOLEM-CONST-DECL "strings(len)" |ltedfapeg| NIL)
    (G SKOLEM-CONST-DECL "lang_spec" |ltedfapeg| NIL)
    (|n2| SKOLEM-CONST-DECL "non_terminal" |ltedfapeg| NIL)
    (|push| ADT-CONSTRUCTOR-DECL "[[uint32, uint8] -> (push?)]" |ltedfapeg|
     NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|sp| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|pos!1| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|mem_stack_push| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|fine_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|mem_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|fine_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE
    "ltedfapeg.push((number_fields.+)(ltedfapeg.pos, ltedfapeg.sp), ltedfapeg.n2)"
    "(ltedfapeg.fine_stack?(ltedfapeg.len, ltedfapeg.G, (number_fields.+)(ltedfapeg.St`depth, 1), ltedfapeg.St`scaf WITH [((number_fields.+)(ltedfapeg.pos, ltedfapeg.sp))(ltedfapeg.n2) := ltedfapeg.St`stack]))")))
 (|step_TCC68| 0
  (|step_TCC82-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (GROUND)
      (("1" (TYPEPRED "lflag")
        (("1" (ASSERT)
          (("1" (HIDE -2)
            (("1" (GROUND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (GRIND) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (TYPEPRED "lflag")
        (("2" (ASSERT)
          (("2" (HIDE -1)
            (("2" (SKEEP*)
              (("2" (LIFT-IF)
                (("2" (GROUND)
                  (("1" (LIFT-IF)
                    (("1" (GROUND)
                      (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
                       ("2" (INST?) NIL NIL))
                      NIL))
                    NIL)
                   ("2" (INST?) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.St`lflag"
    "{b: booleans.bool | IF b THEN booleans.OR(ltedfapeg.n2 = ltedfapeg.num_non_terminals, ltedfapeg.loop_ready?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.St`scaf WITH [((number_fields.+)(ltedfapeg.pos, ltedfapeg.sp))(ltedfapeg.n2) := ltedfapeg.St`stack], (number_fields.+)(ltedfapeg.pos, ltedfapeg.sp), ltedfapeg.n2)) ELSE FORALL (i: naturalnumbers.upto(ltedfapeg.len)), (n: non_terminal): (booleans.NOT)(ltedfapeg.loop?(ltedfapeg.St`scaf WITH [((number_fields.+)(ltedfapeg.pos, ltedfapeg.sp))(ltedfapeg.n2) := ltedfapeg.St`stack](i)(n))) ENDIF}")))
 (|step_TCC69| 0
  (|step_TCC37-1| |nil| 3804455654 ("" (GRIND) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.loop"
    "(ltedfapeg.nice_entry?(ltedfapeg.len, ltedfapeg.pos))")))
 (|step_TCC70| 0
  (|step_TCC38-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (TYPEPRED "scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)
           ("2" (USE "good_good_tscaffold")
            (("1" (GROUND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (TYPEPRED "stack")
                (("2" (HIDE 2)
                  (("2" (EXPAND "fine_entry?") (("2" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL)
               ("3" (HIDE 2)
                (("3" (SKEEP*)
                  (("3" (TYPEPRED "lflag")
                    (("3" (CASE "lflag")
                      (("1" (ASSERT)
                        (("1" (HIDE -3) (("1" (GRIND) NIL NIL)) NIL)) NIL)
                       ("2" (ASSERT) (("2" (INST?) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|sigma| DEF-DECL "nat" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|good_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|fine_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|loop| ADT-CONSTRUCTOR-DECL "(loop?)" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos!1| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_good_tscaffold| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE
    "ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.loop]"
    "(ltedfapeg.fine_scaffold?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.s)(ltedfapeg.start, ltedfapeg.rootnt))")))
 (|step_TCC71| 0
  (|step_TCC69-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (TYPEPRED "stack")
      (("" (TYPEPRED "depth")
        (("" (EXPAND "good_depth?")
          (("" (EXPAND "pushcount")
            (("" (USE "scafcount_max")
              (("" (ASSERT)
                (("" (USE "exp2_lt" :SUBST ("n" 41 "m" 64))
                  (("" (GROUND)
                    (("1" (GRIND) NIL NIL)
                     ("2" (REWRITE "scafcount_update")
                      (("1" (LIFT-IF)
                        (("1" (GROUND)
                          (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
                           ("2" (TYPEPRED "depth")
                            (("2" (GRIND :EXCLUDE "scafcount") NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|scafcount_max| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|exp2_lt| FORMULA-DECL NIL |exp2| NIL)
    (|scafcount_update| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|loop| ADT-CONSTRUCTOR-DECL "(loop?)" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "(number_fields.-)(ltedfapeg.depth, 1)"
    "(ltedfapeg.good_depth?(ltedfapeg.len, ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.loop]))")))
 (|step_TCC72| 0
  (|step_TCC70-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (GROUND)
      (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
       ("2" (TYPEPRED "stack")
        (("2" (LEMMA "good_mem_stack")
          (("2"
            (INST - "G" "depth - 1" "len" "scaf" "push(pos!1, cur)" "rest"
             "loop")
            (("1" (GROUND)
              (("1" (HIDE 2) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)
               ("3" (HIDE 1)
                (("3" (EXPAND "fine_stack?")
                  (("3" (GROUND)
                    (("1" (GRIND) NIL NIL)
                     ("2" (CASE-REPLACE "push(pos!1, cur) = stack")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (APPLY-EXTENSIONALITY) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("4" (GRIND) NIL NIL))
              NIL)
             ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL))
            NIL))
          NIL))
        NIL)
       ("3"
        (USE "fine_mem_stack" :SUBST
             ("len" "len" "entry" "push(pos!1, cur)" "u" "loop" "stack"
              "rest"))
        (("1" (GROUND)
          (("1" (HIDE 2) (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL))
            NIL)
           ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)
           ("3" (HIDE 2) (("3" (TYPEPRED "stack") (("3" (GRIND) NIL NIL)) NIL))
            NIL)
           ("4" (TYPEPRED "stack")
            (("4" (HIDE 1)
              (("4" (EXPAND "fine_stack?")
                (("4" (GROUND)
                  (("1" (GRIND) NIL NIL)
                   ("2" (CASE-REPLACE "push(pos!1, cur) = stack")
                    (("1" (ASSERT) NIL NIL)
                     ("2" (APPLY-EXTENSIONALITY) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("5" (TYPEPRED "stack") (("5" (GRIND) NIL NIL)) NIL))
          NIL)
         ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)
         ("3" (GRIND) NIL NIL)
         ("4" (TYPEPRED "stack") (("4" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|good_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|fine_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent_push_extensionality| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|loop| ADT-CONSTRUCTOR-DECL "(loop?)" |ltedfapeg| NIL)
    (|push| ADT-CONSTRUCTOR-DECL "[[uint32, uint8] -> (push?)]" |ltedfapeg|
     NIL)
    (|pos!1| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|cur| SKOLEM-CONST-DECL "uint8" |ltedfapeg| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (G SKOLEM-CONST-DECL "lang_spec" |ltedfapeg| NIL)
    (|s| SKOLEM-CONST-DECL "strings(len)" |ltedfapeg| NIL)
    (|start| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|rootnt| SKOLEM-CONST-DECL "non_terminal" |ltedfapeg| NIL)
    (|St| SKOLEM-CONST-DECL "state(len, G, s, start, rootnt)" |ltedfapeg| NIL)
    (|depth| SKOLEM-CONST-DECL "(good_depth?(len, St`scaf))" |ltedfapeg| NIL)
    (|fine_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.rest"
    "(ltedfapeg.fine_stack?(ltedfapeg.len, ltedfapeg.G, (number_fields.-)(ltedfapeg.depth, 1), ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.loop]))")))
 (|step_TCC73| 0
  (|step_TCC98-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (TYPEPRED "stack")
      (("" (EXPAND "good_stack?")
        (("" (GROUND)
          (("1" (GRIND) NIL NIL)
           ("2" (GRIND :EXCLUDE ("good_stack?" "fine_stack?" "mem_stack?")) NIL
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "booleans.TRUE"
    "{b: booleans.bool | IF b THEN booleans.OR(ltedfapeg.nt(ltedfapeg.rest) = ltedfapeg.num_non_terminals, ltedfapeg.loop_ready?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.loop], ltedfapeg.pos(ltedfapeg.rest), ltedfapeg.nt(ltedfapeg.rest))) ELSE FORALL (i: naturalnumbers.upto(ltedfapeg.len)), (n: non_terminal): (booleans.NOT)(ltedfapeg.loop?(ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.loop](i)(n))) ENDIF}")))
 (|step_TCC74| 0
  (|step_TCC91-1| |nil| 3804706560 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.stack"
    "(ltedfapeg.nice_entry?(ltedfapeg.len, ltedfapeg.pos))")))
 (|step_TCC75| 0
  (|step_TCC77-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (TYPEPRED "scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)
           ("2" (USE "good_good_tscaffold")
            (("1" (GROUND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (TYPEPRED "stack")
                (("2" (HIDE 2)
                  (("2" (EXPAND "fine_entry?") (("2" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL)
               ("3" (HIDE 2)
                (("3" (SKEEP*)
                  (("3" (TYPEPRED "lflag")
                    (("3" (CASE "lflag")
                      (("1" (ASSERT)
                        (("1" (HIDE -3) (("1" (GRIND) NIL NIL)) NIL)) NIL)
                       ("2" (ASSERT) (("2" (INST?) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|stack| SKOLEM-CONST-DECL "(fine_stack?(len, G, St`depth, St`scaf))"
     |ltedfapeg| NIL)
    (|St| SKOLEM-CONST-DECL "state(len, G, s, start, rootnt)" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|rootnt| SKOLEM-CONST-DECL "non_terminal" |ltedfapeg| NIL)
    (|start| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|s| SKOLEM-CONST-DECL "strings(len)" |ltedfapeg| NIL)
    (G SKOLEM-CONST-DECL "lang_spec" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pos!1| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|good_good_tscaffold| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE
    "ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.n1) := ltedfapeg.stack]"
    "(ltedfapeg.fine_scaffold?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.s)(ltedfapeg.start, ltedfapeg.rootnt))")))
 (|step_TCC76| 0
  (|step_TCC93-1| |nil| 3804706560
   ("" (SKEEP*)
    (("" (SPLIT)
      (("1" (TYPEPRED "stack")
        (("1" (TYPEPRED "depth")
          (("1" (EXPAND "good_depth?")
            (("1" (EXPAND "pushcount")
              (("1" (USE "scafcount_max")
                (("1" (ASSERT)
                  (("1" (USE "exp2_lt" :SUBST ("n" 41 "m" 64))
                    (("1" (GROUND) (("1" (GRIND) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "good_depth?")
        (("2" (EXPAND "pushcount")
          (("2" (REWRITE "scafcount_update")
            (("1" (LIFT-IF)
              (("1" (GROUND)
                (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
                 ("2" (TYPEPRED "depth")
                  (("2" (GRIND :EXCLUDE "scafcount") NIL NIL)) NIL)
                 ("3" (TYPEPRED "stack") (("3" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|exp2_lt| FORMULA-DECL NIL |exp2| NIL)
    (|scafcount_max| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scafcount_update| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "(number_fields.+)(ltedfapeg.depth, 1)"
    "(ltedfapeg.good_depth?(ltedfapeg.len, ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.n1) := ltedfapeg.stack]))")))
 (|step_TCC77| 0
  (|step_TCC94-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (GROUND)
      (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
       ("2" (TYPEPRED "stack")
        (("2" (EXPAND "good_stack?" +)
          (("2" (GROUND)
            (("1" (GRIND) NIL NIL)
             ("2" (LEMMA "good_mem_stack")
              (("2"
                (INST - "G" "depth" "len" "scaf" "push(pos!1, n1)" "stack"
                 "stack")
                (("1" (GROUND)
                  (("1" (GRIND) NIL NIL)
                   ("2" (USE "mem_stack_push") (("2" (GROUND) NIL NIL)) NIL)
                   ("3" (GRIND) NIL NIL))
                  NIL)
                 ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (EXPAND "fine_stack?" +)
        (("3" (GROUND)
          (("1" (LEMMA "mem_mem_stack")
            (("1" (INST - "G" "depth" "len" "scaf" _ _ _ _)
              (("1"
                (INST - "push(pos!1, n1)" "push(pos!1, n1)" "stack" "stack")
                (("1" (GROUND)
                  (("1" (HIDE -2)
                    (("1" (USE "mem_stack_push") (("1" (GROUND) NIL NIL)) NIL))
                    NIL)
                   ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)
                   ("3" (TYPEPRED "stack") (("3" (GRIND) NIL NIL)) NIL)
                   ("4" (USE "mem_stack_push") (("4" (GROUND) NIL NIL)) NIL)
                   ("5" (TYPEPRED "stack") (("5" (GRIND) NIL NIL)) NIL))
                  NIL)
                 ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)
                 ("3" (TYPEPRED "stack") (("3" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("2"
            (USE "fine_mem_stack" :SUBST
                 ("len" "len" "entry" "push(pos!1, n1)" "u" "stack" "stack"
                  "stack"))
            (("1" (GROUND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (USE "mem_stack_push") (("2" (GROUND) NIL NIL)) NIL)
               ("3" (GRIND) NIL NIL))
              NIL)
             ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)
             ("3" (GRIND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|good_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|fine_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|mem_stack_push| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (G SKOLEM-CONST-DECL "lang_spec" |ltedfapeg| NIL)
    (|s| SKOLEM-CONST-DECL "strings(len)" |ltedfapeg| NIL)
    (|start| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|rootnt| SKOLEM-CONST-DECL "non_terminal" |ltedfapeg| NIL)
    (|St| SKOLEM-CONST-DECL "state(len, G, s, start, rootnt)" |ltedfapeg| NIL)
    (|stack| SKOLEM-CONST-DECL "(fine_stack?(len, G, St`depth, St`scaf))"
     |ltedfapeg| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|push| ADT-CONSTRUCTOR-DECL "[[uint32, uint8] -> (push?)]" |ltedfapeg|
     NIL)
    (|pos!1| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|n1| SKOLEM-CONST-DECL "non_terminal" |ltedfapeg| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|mem_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|fine_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.push(ltedfapeg.pos, ltedfapeg.n1)"
    "(ltedfapeg.fine_stack?(ltedfapeg.len, ltedfapeg.G, (number_fields.+)(ltedfapeg.depth, 1), ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.n1) := ltedfapeg.stack]))")))
 (|step_TCC78| 0
  (|step_TCC125-1| |nil| 3804706560
   ("" (SKEEP*)
    (("" (GROUND)
      (("1" (TYPEPRED "lflag")
        (("1" (ASSERT)
          (("1" (HIDE -2)
            (("1" (GROUND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (GRIND) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (TYPEPRED "lflag")
        (("2" (ASSERT)
          (("2" (HIDE -1)
            (("2" (SKEEP*)
              (("2" (LIFT-IF)
                (("2" (GROUND)
                  (("1" (LIFT-IF)
                    (("1" (GROUND)
                      (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
                       ("2" (INST?) NIL NIL))
                      NIL))
                    NIL)
                   ("2" (INST?) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.St`lflag"
    "{b: booleans.bool | IF b THEN booleans.OR(ltedfapeg.n1 = ltedfapeg.num_non_terminals, ltedfapeg.loop_ready?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.n1) := ltedfapeg.stack], ltedfapeg.pos, ltedfapeg.n1)) ELSE FORALL (i: naturalnumbers.upto(ltedfapeg.len)), (n: non_terminal): (booleans.NOT)(ltedfapeg.loop?(ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.n1) := ltedfapeg.stack](i)(n))) ENDIF}")))
 (|step_TCC79| 0
  (|step_TCC59-1| |nil| 3804455654 ("" (SUBTYPE-TCC) NIL NIL)
   ((|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.loop"
    "(ltedfapeg.nice_entry?(ltedfapeg.len, ltedfapeg.pos))")))
 (|step_TCC80| 0
  (|step_TCC60-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (TYPEPRED "scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)
           ("2" (USE "good_good_tscaffold")
            (("1" (GROUND)
              (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
               ("2" (TYPEPRED "stack")
                (("2" (HIDE 2)
                  (("2" (EXPAND "fine_entry?") (("2" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL)
               ("3" (HIDE 2)
                (("3" (SKEEP*)
                  (("3" (TYPEPRED "lflag")
                    (("3" (CASE "lflag")
                      (("1" (ASSERT)
                        (("1" (HIDE -3) (("1" (GRIND) NIL NIL)) NIL)) NIL)
                       ("2" (ASSERT) (("2" (INST?) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|sigma| DEF-DECL "nat" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|good_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|fine_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|loop| ADT-CONSTRUCTOR-DECL "(loop?)" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos!1| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_good_tscaffold| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE
    "ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.loop]"
    "(ltedfapeg.fine_scaffold?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.s)(ltedfapeg.start, ltedfapeg.rootnt))")))
 (|step_TCC81| 0
  (|step_TCC85-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (TYPEPRED "stack")
      (("" (TYPEPRED "depth")
        (("" (EXPAND "good_depth?")
          (("" (EXPAND "pushcount")
            (("" (USE "scafcount_max")
              (("" (ASSERT)
                (("" (USE "exp2_lt" :SUBST ("n" 41 "m" 64))
                  (("" (GROUND)
                    (("1" (GRIND) NIL NIL)
                     ("2" (REWRITE "scafcount_update")
                      (("1" (LIFT-IF)
                        (("1" (GROUND)
                          (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
                           ("2" (TYPEPRED "depth")
                            (("2" (GRIND :EXCLUDE "scafcount") NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|scafcount_max| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|exp2_lt| FORMULA-DECL NIL |exp2| NIL)
    (|scafcount_update| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|loop| ADT-CONSTRUCTOR-DECL "(loop?)" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "(number_fields.-)(ltedfapeg.depth, 1)"
    "(ltedfapeg.good_depth?(ltedfapeg.len, ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.loop]))")))
 (|step_TCC82| 0
  (|step_TCC86-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (GROUND)
      (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL)
       ("2" (TYPEPRED "stack")
        (("2" (LEMMA "good_mem_stack")
          (("2"
            (INST - "G" "depth - 1" "len" "scaf" "push(pos!1, cur)" "rest"
             "loop")
            (("1" (GROUND)
              (("1" (HIDE 2) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)
               ("3" (HIDE 1)
                (("3" (EXPAND "fine_stack?")
                  (("3" (GROUND)
                    (("1" (GRIND) NIL NIL)
                     ("2" (CASE-REPLACE "push(pos!1, cur) = stack")
                      (("1" (ASSERT) NIL NIL)
                       ("2" (APPLY-EXTENSIONALITY) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("4" (GRIND) NIL NIL))
              NIL)
             ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL))
            NIL))
          NIL))
        NIL)
       ("3"
        (USE "fine_mem_stack" :SUBST
             ("len" "len" "entry" "push(pos!1, cur)" "u" "loop" "stack"
              "rest"))
        (("1" (GROUND)
          (("1" (HIDE 2) (("1" (TYPEPRED "stack") (("1" (GRIND) NIL NIL)) NIL))
            NIL)
           ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)
           ("3" (HIDE 2) (("3" (TYPEPRED "stack") (("3" (GRIND) NIL NIL)) NIL))
            NIL)
           ("4" (TYPEPRED "stack")
            (("4" (HIDE 1)
              (("4" (EXPAND "fine_stack?")
                (("4" (GROUND)
                  (("1" (GRIND) NIL NIL)
                   ("2" (CASE-REPLACE "push(pos!1, cur) = stack")
                    (("1" (ASSERT) NIL NIL)
                     ("2" (APPLY-EXTENSIONALITY) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("5" (TYPEPRED "stack") (("5" (GRIND) NIL NIL)) NIL))
          NIL)
         ("2" (TYPEPRED "stack") (("2" (GRIND) NIL NIL)) NIL)
         ("3" (GRIND) NIL NIL)
         ("4" (TYPEPRED "stack") (("4" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|good_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|fine_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent_push_extensionality| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|loop| ADT-CONSTRUCTOR-DECL "(loop?)" |ltedfapeg| NIL)
    (|push| ADT-CONSTRUCTOR-DECL "[[uint32, uint8] -> (push?)]" |ltedfapeg|
     NIL)
    (|pos!1| SKOLEM-CONST-DECL "uint32" |ltedfapeg| NIL)
    (|cur| SKOLEM-CONST-DECL "uint8" |ltedfapeg| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapeg| NIL)
    (G SKOLEM-CONST-DECL "lang_spec" |ltedfapeg| NIL)
    (|s| SKOLEM-CONST-DECL "strings(len)" |ltedfapeg| NIL)
    (|start| SKOLEM-CONST-DECL "upto(len)" |ltedfapeg| NIL)
    (|rootnt| SKOLEM-CONST-DECL "non_terminal" |ltedfapeg| NIL)
    (|St| SKOLEM-CONST-DECL "state(len, G, s, start, rootnt)" |ltedfapeg| NIL)
    (|depth| SKOLEM-CONST-DECL "(good_depth?(len, St`scaf))" |ltedfapeg| NIL)
    (|fine_mem_stack| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "ltedfapeg.rest"
    "(ltedfapeg.fine_stack?(ltedfapeg.len, ltedfapeg.G, (number_fields.-)(ltedfapeg.depth, 1), ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.loop]))")))
 (|step_TCC83| 0
  (|step_TCC118-1| |nil| 3804706560
   ("" (SKEEP*)
    (("" (TYPEPRED "stack")
      (("" (EXPAND "good_stack?")
        (("" (GROUND)
          (("1" (GRIND) NIL NIL)
           ("2" (GRIND :EXCLUDE ("good_stack?" "fine_stack?" "mem_stack?")) NIL
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|step| SUBTYPE "booleans.TRUE"
    "{b: booleans.bool | IF b THEN booleans.OR(ltedfapeg.nt(ltedfapeg.rest) = ltedfapeg.num_non_terminals, ltedfapeg.loop_ready?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.loop], ltedfapeg.pos(ltedfapeg.rest), ltedfapeg.nt(ltedfapeg.rest))) ELSE FORALL (i: naturalnumbers.upto(ltedfapeg.len)), (n: non_terminal): (booleans.NOT)(ltedfapeg.loop?(ltedfapeg.St`scaf WITH [(ltedfapeg.pos)(ltedfapeg.cur) := ltedfapeg.loop](i)(n))) ENDIF}")))
 (|size_TCC1| 0
  (|size_TCC1-1| |nil| 3808434333 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|size| SUBTYPE "ltedfapeg.len" "upto(ltedfapeg.len)")))
 (|size_TCC2| 0
  (|size_TCC2-1| |nil| 3808434333
   ("" (SKEEP*)
    (("" (TYPEPRED "St`depth")
      (("" (EXPAND GOOD_DEPTH?)
        (("" (EXPAND PUSHCOUNT)
          (("" (USE SIGMA_MAX) (("" (GRIND :EXCLUDE EXP2) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|plus_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|sigma_max| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|size| SUBTYPE
    "(number_fields.-)((number_fields.*(((number_fields.+)(ltedfapeg.len, 1)), ltedfapeg.num_non_terminals)), ltedfapeg.St`depth)"
    "nat")))
 (|endstate_TCC1| 0
  (|endstate_TCC1-1| |nil| 3804455654
   ("" (SKEEP*) (("" (TYPEPRED "st`stack") (("" (GRIND) NIL NIL)) NIL)) NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL (|endstate| SUBTYPE "ltedfapeg.st`stack" "(ltedfapeg.push?)")))
 (|parse_TCC1| 0
  (|parse_TCC2-1| |nil| 3804455654
   ("" (USE WELL_FOUNDED_LE) (("" (GRIND :EXCLUDE <) NIL NIL)) NIL)
   ((|restrict| CONST-DECL "R" |restrict| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|well_founded_le| FORMULA-DECL NIL |ordinals| NIL))
   NIL
   (|parse| WELL-FOUNDED
    "restrict[[ordstruct_adt.ordstruct, ordstruct_adt.ordstruct], [ordinal, ordinal], bool].restrict(ordinals.<)"
    "NIL")))
 (|parse_TCC2| 0
  (|parse_TCC3-1| |nil| 3804455654
   ("" (SKEEP*) (("" (TYPEPRED "St`stack") (("" (GRIND) NIL NIL)) NIL)) NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|parse| SUBTYPE "ltedfapeg.St"
    "endstate(ltedfapeg.len, ltedfapeg.G, ltedfapeg.s, ltedfapeg.start, ltedfapeg.root)")))
 (|parse_TCC3| 0
  (|parse_TCC4-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (EXPAND RESTRICT)
      (("" (EXPAND SIZE)
        (("" (REWRITE LEX2_LT)
          (("1" (FLATTEN)
            (("1" (HIDE 3)
              (("1" (TYPEPRED "St`stack")
                (("1" (APPLY (THEN (EXPAND STEP) (LIFT-IF) (GROUND)))
                  (("1" (HIDE 1) (("1" (GRIND) NIL NIL)) NIL)
                   ("2" (REWRITE SCAFCOUNT_UPDATE)
                    (("1" (GRIND :DEFS NIL)
                      (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
                       ("3" (GRIND) NIL NIL))
                      NIL)
                     ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL))
                    NIL)
                   ("3" (REWRITE SCAFCOUNT_UPDATE)
                    (("1" (GRIND :DEFS NIL)
                      (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
                       ("3" (GRIND) NIL NIL))
                      NIL)
                     ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL))
                    NIL)
                   ("4" (LIFT-IF)
                    (("4" (GROUND)
                      (("1" (REWRITE SCAFCOUNT_UPDATE)
                        (("1" (GRIND :DEFS NIL)
                          (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
                           ("3" (GRIND) NIL NIL))
                          NIL)
                         ("2" (GRIND :DEFS NIL) (("2" (GRIND) NIL NIL)) NIL))
                        NIL)
                       ("2" (REWRITE SCAFCOUNT_UPDATE)
                        (("1" (GRIND :DEFS NIL)
                          (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
                           ("3" (GRIND) NIL NIL))
                          NIL)
                         ("2"
                          (TYPEPRED
                           "DfaParse(dfa(G(nt(St`stack))), len, s, pos(St`stack))")
                          (("2" (GRIND) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("5" (REWRITE SCAFCOUNT_UPDATE)
                    (("1" (GRIND :DEFS NIL)
                      (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)
                     ("2" (GRIND) NIL NIL))
                    NIL)
                   ("6" (REWRITE SCAFCOUNT_UPDATE)
                    (("1" (GRIND :DEFS NIL)
                      (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
                       ("3" (GRIND) NIL NIL))
                      NIL)
                     ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL))
                    NIL)
                   ("7" (REWRITE SCAFCOUNT_UPDATE)
                    (("1" (GRIND :DEFS NIL)
                      (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
                       ("3" (GRIND) NIL NIL))
                      NIL)
                     ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL))
                    NIL)
                   ("8" (REWRITE SCAFCOUNT_UPDATE)
                    (("1" (GRIND :DEFS NIL)
                      (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
                       ("3" (GRIND) NIL NIL))
                      NIL)
                     ("2" (GRIND) NIL NIL))
                    NIL)
                   ("9" (REWRITE SCAFCOUNT_UPDATE)
                    (("1" (GRIND :DEFS NIL)
                      (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
                       ("3" (GRIND) NIL NIL))
                      NIL)
                     ("2" (HIDE 2)
                      (("2" (EXPAND NICE_ENTRY?)
                        (("2" (EXPAND "good_good_entry?")
                          (("2"
                            (TYPEPRED "step(len, G, s, start, root)(St)`scaf")
                            (("2" (EXPAND STEP)
                              (("2" (EXPAND FINE_SCAFFOLD?)
                                (("2" (GROUND)
                                  (("2" (HIDE -1)
                                    (("2" (EXPAND GOOD_TSCAFFOLD?)
                                      (("2"
                                        (INST - "pos(St`stack)" "nt(St`stack)")
                                        (("2" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("10" (REVEAL 1)
                    (("10" (HIDE 2)
                      (("10" (GROUND)
                        (("1" (EXPAND STEP)
                          (("1" (REWRITE SCAFCOUNT_UPDATE)
                            (("1" (GRIND :DEFS NIL)
                              (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL))
                              NIL)
                             ("2" (GRIND) NIL NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND STEP) (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("11" (REWRITE SCAFCOUNT_UPDATE)
                    (("1" (GRIND :DEFS NIL)
                      (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
                       ("3" (GRIND) NIL NIL))
                      NIL)
                     ("2" (GRIND) NIL NIL))
                    NIL)
                   ("12" (REWRITE SCAFCOUNT_UPDATE)
                    (("1" (GRIND :DEFS NIL)
                      (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
                       ("3" (GRIND) NIL NIL))
                      NIL)
                     ("2" (GRIND) NIL NIL))
                    NIL)
                   ("13" (REWRITE SCAFCOUNT_UPDATE)
                    (("1" (GRIND :DEFS NIL)
                      (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
                       ("3" (GRIND) NIL NIL))
                      NIL)
                     ("2" (HIDE 2)
                      (("2" (EXPAND NICE_ENTRY?)
                        (("2" (EXPAND "good_good_entry?")
                          (("2"
                            (TYPEPRED "step(len, G, s, start, root)(St)`scaf")
                            (("2" (EXPAND STEP)
                              (("2" (EXPAND FINE_SCAFFOLD?)
                                (("2" (GROUND)
                                  (("2" (HIDE -1)
                                    (("2" (EXPAND GOOD_TSCAFFOLD?)
                                      (("2"
                                        (INST - "pos(St`stack)" "nt(St`stack)")
                                        (("2" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("14" (REVEAL 1)
                    (("14" (HIDE 2)
                      (("14" (GROUND)
                        (("1" (EXPAND STEP)
                          (("1" (REWRITE SCAFCOUNT_UPDATE)
                            (("1" (GRIND :DEFS NIL)
                              (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL))
                              NIL)
                             ("2" (GRIND) NIL NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND STEP) (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("15" (REWRITE SCAFCOUNT_UPDATE)
                    (("1" (GRIND :DEFS NIL)
                      (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
                       ("3" (GRIND) NIL NIL))
                      NIL)
                     ("2" (GRIND) NIL NIL))
                    NIL)
                   ("16" (REVEAL 1)
                    (("16" (HIDE 2)
                      (("16" (GROUND)
                        (("1" (EXPAND STEP)
                          (("1" (REWRITE SCAFCOUNT_UPDATE)
                            (("1" (GRIND :DEFS NIL)
                              (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL))
                              NIL)
                             ("2" (GRIND) NIL NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND STEP) (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("17" (REWRITE SCAFCOUNT_UPDATE)
                    (("1" (GRIND :DEFS NIL)
                      (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)
                       ("3" (GRIND) NIL NIL))
                      NIL)
                     ("2" (GRIND) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (TYPEPRED "St`depth")
            (("2" (EXPAND GOOD_DEPTH?)
              (("2" (EXPAND PUSHCOUNT)
                (("2" (USE SIGMA_MAX) (("2" (GROUND) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("3" (TYPEPRED "step(len, G, s, start, root)(St)`depth")
            (("3" (EXPAND GOOD_DEPTH?)
              (("3" (EXPAND PUSHCOUNT)
                (("3" (USE SIGMA_MAX) (("3" (GROUND) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|restrict| CONST-DECL "R" |restrict| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|lex2_lt| FORMULA-DECL NIL |lex2| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|step| CONST-DECL "state(len, G, s, start, rootnt)" |ltedfapeg| NIL)
    (|push_or_pending?| CONST-DECL "bool" |ltedfapeg| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|good| ADT-CONSTRUCTOR-DECL "[[uint64, uint32] -> (good?)]" |ltedfapeg|
     NIL)
    (|good?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|scafcount_update| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|fail| ADT-CONSTRUCTOR-DECL "[uint64 -> (fail?)]" |ltedfapeg| NIL)
    (|fail?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|dfaparse| DEF-DECL "(goodDfaResult?(len, startpos))" |dfa| NIL)
    (|DfaParse| CONST-DECL "(goodDfaResult?(len, startpos))" |dfa| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|dfa| ADT-ACCESSOR-DECL "[(any?) -> dfa]" |ltedfapeg| NIL)
    (|any?| ADT-RECOGNIZER-DECL "[prepeg -> boolean]" |ltedfapeg| NIL)
    (|goodDfaResult?| CONST-DECL "bool" |dfa| NIL)
    (|dfa| TYPE-EQ-DECL NIL |dfa| NIL) (|offset| CONST-DECL "uint8" |dfa| NIL)
    (|span| ADT-ACCESSOR-DECL "[(success?) -> index]" |dfa| NIL)
    (|success?| ADT-RECOGNIZER-DECL "[dfaResult -> boolean]" |dfa| NIL)
    (|dfaResult| TYPE-DECL NIL |dfa| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|lelse| ADT-ACCESSOR-DECL "[(lte?) -> non_terminal]" |ltedfapeg| NIL)
    (|fst| ADT-ACCESSOR-DECL "[(lte?) -> non_terminal]" |ltedfapeg| NIL)
    (|lte?| ADT-RECOGNIZER-DECL "[prepeg -> boolean]" |ltedfapeg| NIL)
    (|dep| SHARED-ADT-ACCESSOR-DECL
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|span| ADT-ACCESSOR-DECL "[(good?) -> uint32]" |ltedfapeg| NIL)
    (|loop| ADT-CONSTRUCTOR-DECL "(loop?)" |ltedfapeg| NIL)
    (|lthen| ADT-ACCESSOR-DECL "[(lte?) -> non_terminal]" |ltedfapeg| NIL)
    (|sigma_max| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|plus_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|size| CONST-DECL "ordinal" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|parse| TERMINATION
    "ltedfapeg.parse(ltedfapeg.len, ltedfapeg.G, ltedfapeg.s, ltedfapeg.start, ltedfapeg.root, ltedfapeg.step(ltedfapeg.len, ltedfapeg.G, ltedfapeg.s, ltedfapeg.start, ltedfapeg.root)(ltedfapeg.St))"
    "NIL")))
 (|doparse_TCC1| 0
  (|doparse_TCC3-1| |nil| 3804455654 ("" (SUBTYPE-TCC) NIL NIL)
   ((|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|doparse| SUBTYPE "ltedfapeg.pend"
    "[non_terminal -> (ltedfapeg.nice_entry?(ltedfapeg.len, ltedfapeg.i))]")))
 (|doparse_TCC2| 0
  (|doparse_TCC2-1| |nil| 3804455654 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|doparse| SUBTYPE "0" "upto(ltedfapeg.len)")))
 (|doparse_TCC3| 0
  (|doparse_TCC4-1| |nil| 3804547853 ("" (GRIND) NIL NIL)
   ((|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL))
   NIL (|doparse| SUBTYPE "ltedfapeg.num_non_terminals" "uint8")))
 (|doparse_TCC4| 0
  (|doparse_TCC4-1| |nil| 3804455654 ("" (SUBTYPE-TCC) NIL NIL)
   ((|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL))
   NIL
   (|doparse| SUBTYPE "ltedfapeg.push(0, ltedfapeg.num_non_terminals)"
    "(ltedfapeg.nice_entry?(ltedfapeg.len, 0))")))
 (|doparse_TCC5| 0
  (|doparse_TCC5-1| |nil| 3804455654 ("" (SUBTYPE-TCC) NIL NIL)
   ((|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|doparse| SUBTYPE
    "(LAMBDA (i: naturalnumbers.upto(ltedfapeg.len)): ltedfapeg.pend) WITH [(0)(ltedfapeg.n) := ltedfapeg.push(0, ltedfapeg.num_non_terminals)]"
    "(ltedfapeg.fine_scaffold?(ltedfapeg.len, ltedfapeg.G, ltedfapeg.s)(0, ltedfapeg.n))")))
 (|doparse_TCC6| 0
  (|doparse_TCC1-1| |nil| 3804455654
   ("" (SKEEP*)
    (("" (GRIND :EXCLUDE "good_depth?")
      (("" (EXPAND "good_depth?")
        (("" (EXPAND "pushcount")
          (("" (REWRITE "scafcount_update")
            (("" (USE "empty_card[below(255)]")
              (("1" (GROUND)
                (("1" (REPLACE -2 :HIDE? T)
                  (("1" (REWRITE "sigma_zero") NIL NIL)) NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (INST + 255 "id[below(255)]") (("2" (GRIND) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|empty_card| FORMULA-DECL NIL |finite_sets| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|sigma_zero| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|plus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|push| ADT-CONSTRUCTOR-DECL "[[uint32, uint8] -> (push?)]" |ltedfapeg|
     NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pending| ADT-CONSTRUCTOR-DECL "(pending?)" |ltedfapeg| NIL)
    (|pending?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|scafcount_update| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|doparse| SUBTYPE "1"
    "(ltedfapeg.good_depth?(ltedfapeg.len, (LAMBDA (i: naturalnumbers.upto(ltedfapeg.len)): ltedfapeg.pend) WITH [(0)(ltedfapeg.n) := ltedfapeg.push(0, ltedfapeg.num_non_terminals)]))")))
 (|doparse_TCC7| 0
  (|doparse_TCC6-1| |nil| 3804534082 ("" (GRIND) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|successor| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|mem_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL))
   NIL
   (|doparse| SUBTYPE "ltedfapeg.push(0, ltedfapeg.n)"
    "(ltedfapeg.fine_stack?(ltedfapeg.len, ltedfapeg.G, 1, (LAMBDA (i: naturalnumbers.upto(ltedfapeg.len)): ltedfapeg.pend) WITH [(0)(ltedfapeg.n) := ltedfapeg.push(0, ltedfapeg.num_non_terminals)]))")))
 (|doparse_TCC8| 0
  (|doparse_TCC8-1| |nil| 3804730988 ("" (SUBTYPE-TCC) NIL NIL)
   ((|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|doparse| SUBTYPE "booleans.FALSE"
    "{b: booleans.bool | IF b THEN booleans.OR(ltedfapeg.n = ltedfapeg.num_non_terminals, ltedfapeg.loop_ready?(ltedfapeg.len, ltedfapeg.G, (LAMBDA (i: naturalnumbers.upto(ltedfapeg.len)): ltedfapeg.pend) WITH [(0)(ltedfapeg.n) := ltedfapeg.push(0, ltedfapeg.num_non_terminals)], 0, ltedfapeg.n)) ELSE FORALL (i_1: naturalnumbers.upto(ltedfapeg.len)), (n_1: non_terminal): (booleans.NOT)(ltedfapeg.loop?((LAMBDA (i: naturalnumbers.upto(ltedfapeg.len)): ltedfapeg.pend) WITH [(0)(ltedfapeg.n) := ltedfapeg.push(0, ltedfapeg.num_non_terminals)](i_1)(n_1))) ENDIF}"))))

