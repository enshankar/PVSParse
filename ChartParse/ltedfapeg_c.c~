//Code generated using pvs2ir2c
#include "ltedfapeg_c.h"


ltedfapeg__ent_adt_t new_ltedfapeg__ent_adt(void){
        ltedfapeg__ent_adt_t tmp = (ltedfapeg__ent_adt_t) safe_malloc(sizeof(struct ltedfapeg__ent_adt_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapeg__ent_adt(ltedfapeg__ent_adt_t x){
switch (x->ltedfapeg__ent_adt_index) {
case 0:  release_ltedfapeg__fail((ltedfapeg__fail_t) x); break;
case 3:  release_ltedfapeg__good((ltedfapeg__good_t) x); break;
case 4:  release_ltedfapeg__push((ltedfapeg__push_t) x); break;
}}

void release_ltedfapeg__ent_adt_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg__ent_adt((ltedfapeg__ent_adt_t)x);
}

ltedfapeg__ent_adt_t copy_ltedfapeg__ent_adt(ltedfapeg__ent_adt_t x){
        ltedfapeg__ent_adt_t y = new_ltedfapeg__ent_adt();
        y->ltedfapeg__ent_adt_index = (uint8_t)x->ltedfapeg__ent_adt_index;
        y->count = 1;
        return y;}

bool_t equal_ltedfapeg__ent_adt(ltedfapeg__ent_adt_t x, ltedfapeg__ent_adt_t y){
        bool_t tmp = x->ltedfapeg__ent_adt_index == y->ltedfapeg__ent_adt_index;
        switch  (x->ltedfapeg__ent_adt_index) {
                case 0: tmp = tmp && equal_ltedfapeg__fail((ltedfapeg__fail_t) x, (ltedfapeg__fail_t) y); break;
                case 3: tmp = tmp && equal_ltedfapeg__good((ltedfapeg__good_t) x, (ltedfapeg__good_t) y); break;
                case 4: tmp = tmp && equal_ltedfapeg__push((ltedfapeg__push_t) x, (ltedfapeg__push_t) y); break;
        }
        return tmp;
}

char * json_ltedfapeg__ent_adt(ltedfapeg__ent_adt_t x){
        char * tmp = safe_malloc(24); sprintf(tmp, "{ \"constructor\" = %u,", x->ltedfapeg__ent_adt_index);
        switch  (x->ltedfapeg__ent_adt_index) {
                case 0: tmp = safe_strcat(tmp, json_ltedfapeg__fail((ltedfapeg__fail_t) x)); break;
                case 3: tmp = safe_strcat(tmp, json_ltedfapeg__good((ltedfapeg__good_t) x)); break;
                case 4: tmp = safe_strcat(tmp, json_ltedfapeg__push((ltedfapeg__push_t) x)); break;
        };
        tmp = safe_strcat(tmp, " }");
        return tmp;
}

bool_t equal_ltedfapeg__ent_adt_ptr(pointer_t x, pointer_t y, actual_ltedfapeg__ent_adt_t T){
        return equal_ltedfapeg__ent_adt((ltedfapeg__ent_adt_t)x, (ltedfapeg__ent_adt_t)y);
}

char * json_ltedfapeg__ent_adt_ptr(pointer_t x, actual_ltedfapeg__ent_adt_t T){
        return json_ltedfapeg__ent_adt((ltedfapeg__ent_adt_t)x);
}

actual_ltedfapeg__ent_adt_t actual_ltedfapeg__ent_adt(){
        actual_ltedfapeg__ent_adt_t new = (actual_ltedfapeg__ent_adt_t)safe_malloc(sizeof(struct actual_ltedfapeg__ent_adt_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg__ent_adt_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg__ent_adt_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg__ent_adt_ptr);
 

 
        return new;
 };

ltedfapeg__ent_adt_t update_ltedfapeg__ent_adt_ltedfapeg__ent_adt_index(ltedfapeg__ent_adt_t x, uint8_t v){
        ltedfapeg__ent_adt_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg__ent_adt(x); x->count--;};
        y->ltedfapeg__ent_adt_index = (uint8_t)v;
        return y;}




ltedfapeg__fail_t new_ltedfapeg__fail(void){
        ltedfapeg__fail_t tmp = (ltedfapeg__fail_t) safe_malloc(sizeof(struct ltedfapeg__fail_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapeg__fail(ltedfapeg__fail_t x){
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_ltedfapeg__fail_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg__fail((ltedfapeg__fail_t)x);
}

ltedfapeg__fail_t copy_ltedfapeg__fail(ltedfapeg__fail_t x){
        ltedfapeg__fail_t y = new_ltedfapeg__fail();
        y->ltedfapeg__ent_adt_index = (uint8_t)x->ltedfapeg__ent_adt_index;
        y->dep = (uint64_t)x->dep;
        y->count = 1;
        return y;}

bool_t equal_ltedfapeg__fail(ltedfapeg__fail_t x, ltedfapeg__fail_t y){
        bool_t tmp = true;
        tmp = tmp && x->ltedfapeg__ent_adt_index == y->ltedfapeg__ent_adt_index;
        tmp = tmp && x->dep == y->dep;
        return tmp;}

char * json_ltedfapeg__fail(ltedfapeg__fail_t x){
        char * tmp[2]; 
        char * fld0 = safe_malloc(36);
         sprintf(fld0, "\"ltedfapeg__ent_adt_index\" : ");
        tmp[0] = safe_strcat(fld0, json_uint8(x->ltedfapeg__ent_adt_index));
        char * fld1 = safe_malloc(15);
         sprintf(fld1, "\"dep\" : ");
        tmp[1] = safe_strcat(fld1, json_uint64(x->dep));
         char * result = json_list_with_sep(tmp, 2,  '{', ',', '}');
         for (uint32_t i = 0; i < 2; i++) free(tmp[i]);
        return result;}

bool_t equal_ltedfapeg__fail_ptr(pointer_t x, pointer_t y, actual_ltedfapeg__fail_t T){
        return equal_ltedfapeg__fail((ltedfapeg__fail_t)x, (ltedfapeg__fail_t)y);
}

char * json_ltedfapeg__fail_ptr(pointer_t x, actual_ltedfapeg__fail_t T){
        return json_ltedfapeg__fail((ltedfapeg__fail_t)x);
}

actual_ltedfapeg__fail_t actual_ltedfapeg__fail(){
        actual_ltedfapeg__fail_t new = (actual_ltedfapeg__fail_t)safe_malloc(sizeof(struct actual_ltedfapeg__fail_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg__fail_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg__fail_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg__fail_ptr);
 

 
        return new;
 };

ltedfapeg__fail_t update_ltedfapeg__fail_ltedfapeg__ent_adt_index(ltedfapeg__fail_t x, uint8_t v){
        ltedfapeg__fail_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg__fail(x); x->count--;};
        y->ltedfapeg__ent_adt_index = (uint8_t)v;
        return y;}

ltedfapeg__fail_t update_ltedfapeg__fail_dep(ltedfapeg__fail_t x, uint64_t v){
        ltedfapeg__fail_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg__fail(x); x->count--;};
        y->dep = (uint64_t)v;
        return y;}




ltedfapeg__good_t new_ltedfapeg__good(void){
        ltedfapeg__good_t tmp = (ltedfapeg__good_t) safe_malloc(sizeof(struct ltedfapeg__good_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapeg__good(ltedfapeg__good_t x){
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_ltedfapeg__good_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg__good((ltedfapeg__good_t)x);
}

ltedfapeg__good_t copy_ltedfapeg__good(ltedfapeg__good_t x){
        ltedfapeg__good_t y = new_ltedfapeg__good();
        y->ltedfapeg__ent_adt_index = (uint8_t)x->ltedfapeg__ent_adt_index;
        y->dep = (uint64_t)x->dep;
        y->span = (uint32_t)x->span;
        y->count = 1;
        return y;}

bool_t equal_ltedfapeg__good(ltedfapeg__good_t x, ltedfapeg__good_t y){
        bool_t tmp = true;
        tmp = tmp && x->ltedfapeg__ent_adt_index == y->ltedfapeg__ent_adt_index;
        tmp = tmp && x->dep == y->dep;
        tmp = tmp && x->span == y->span;
        return tmp;}

char * json_ltedfapeg__good(ltedfapeg__good_t x){
        char * tmp[3]; 
        char * fld0 = safe_malloc(36);
         sprintf(fld0, "\"ltedfapeg__ent_adt_index\" : ");
        tmp[0] = safe_strcat(fld0, json_uint8(x->ltedfapeg__ent_adt_index));
        char * fld1 = safe_malloc(15);
         sprintf(fld1, "\"dep\" : ");
        tmp[1] = safe_strcat(fld1, json_uint64(x->dep));
        char * fld2 = safe_malloc(16);
         sprintf(fld2, "\"span\" : ");
        tmp[2] = safe_strcat(fld2, json_uint32(x->span));
         char * result = json_list_with_sep(tmp, 3,  '{', ',', '}');
         for (uint32_t i = 0; i < 3; i++) free(tmp[i]);
        return result;}

bool_t equal_ltedfapeg__good_ptr(pointer_t x, pointer_t y, actual_ltedfapeg__good_t T){
        return equal_ltedfapeg__good((ltedfapeg__good_t)x, (ltedfapeg__good_t)y);
}

char * json_ltedfapeg__good_ptr(pointer_t x, actual_ltedfapeg__good_t T){
        return json_ltedfapeg__good((ltedfapeg__good_t)x);
}

actual_ltedfapeg__good_t actual_ltedfapeg__good(){
        actual_ltedfapeg__good_t new = (actual_ltedfapeg__good_t)safe_malloc(sizeof(struct actual_ltedfapeg__good_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg__good_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg__good_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg__good_ptr);
 

 
        return new;
 };

ltedfapeg__good_t update_ltedfapeg__good_ltedfapeg__ent_adt_index(ltedfapeg__good_t x, uint8_t v){
        ltedfapeg__good_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg__good(x); x->count--;};
        y->ltedfapeg__ent_adt_index = (uint8_t)v;
        return y;}

ltedfapeg__good_t update_ltedfapeg__good_dep(ltedfapeg__good_t x, uint64_t v){
        ltedfapeg__good_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg__good(x); x->count--;};
        y->dep = (uint64_t)v;
        return y;}

ltedfapeg__good_t update_ltedfapeg__good_span(ltedfapeg__good_t x, uint32_t v){
        ltedfapeg__good_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg__good(x); x->count--;};
        y->span = (uint32_t)v;
        return y;}




ltedfapeg__push_t new_ltedfapeg__push(void){
        ltedfapeg__push_t tmp = (ltedfapeg__push_t) safe_malloc(sizeof(struct ltedfapeg__push_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapeg__push(ltedfapeg__push_t x){
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_ltedfapeg__push_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg__push((ltedfapeg__push_t)x);
}

ltedfapeg__push_t copy_ltedfapeg__push(ltedfapeg__push_t x){
        ltedfapeg__push_t y = new_ltedfapeg__push();
        y->ltedfapeg__ent_adt_index = (uint8_t)x->ltedfapeg__ent_adt_index;
        y->pos = (uint32_t)x->pos;
        y->nt = (uint8_t)x->nt;
        y->count = 1;
        return y;}

bool_t equal_ltedfapeg__push(ltedfapeg__push_t x, ltedfapeg__push_t y){
        bool_t tmp = true;
        tmp = tmp && x->ltedfapeg__ent_adt_index == y->ltedfapeg__ent_adt_index;
        tmp = tmp && x->pos == y->pos;
        tmp = tmp && x->nt == y->nt;
        return tmp;}

char * json_ltedfapeg__push(ltedfapeg__push_t x){
        char * tmp[3]; 
        char * fld0 = safe_malloc(36);
         sprintf(fld0, "\"ltedfapeg__ent_adt_index\" : ");
        tmp[0] = safe_strcat(fld0, json_uint8(x->ltedfapeg__ent_adt_index));
        char * fld1 = safe_malloc(15);
         sprintf(fld1, "\"pos\" : ");
        tmp[1] = safe_strcat(fld1, json_uint32(x->pos));
        char * fld2 = safe_malloc(14);
         sprintf(fld2, "\"nt\" : ");
        tmp[2] = safe_strcat(fld2, json_uint8(x->nt));
         char * result = json_list_with_sep(tmp, 3,  '{', ',', '}');
         for (uint32_t i = 0; i < 3; i++) free(tmp[i]);
        return result;}

bool_t equal_ltedfapeg__push_ptr(pointer_t x, pointer_t y, actual_ltedfapeg__push_t T){
        return equal_ltedfapeg__push((ltedfapeg__push_t)x, (ltedfapeg__push_t)y);
}

char * json_ltedfapeg__push_ptr(pointer_t x, actual_ltedfapeg__push_t T){
        return json_ltedfapeg__push((ltedfapeg__push_t)x);
}

actual_ltedfapeg__push_t actual_ltedfapeg__push(){
        actual_ltedfapeg__push_t new = (actual_ltedfapeg__push_t)safe_malloc(sizeof(struct actual_ltedfapeg__push_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg__push_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg__push_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg__push_ptr);
 

 
        return new;
 };

ltedfapeg__push_t update_ltedfapeg__push_ltedfapeg__ent_adt_index(ltedfapeg__push_t x, uint8_t v){
        ltedfapeg__push_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg__push(x); x->count--;};
        y->ltedfapeg__ent_adt_index = (uint8_t)v;
        return y;}

ltedfapeg__push_t update_ltedfapeg__push_pos(ltedfapeg__push_t x, uint32_t v){
        ltedfapeg__push_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg__push(x); x->count--;};
        y->pos = (uint32_t)v;
        return y;}

ltedfapeg__push_t update_ltedfapeg__push_nt(ltedfapeg__push_t x, uint8_t v){
        ltedfapeg__push_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg__push(x); x->count--;};
        y->nt = (uint8_t)v;
        return y;}



void release_ltedfapeg_funtype_4(ltedfapeg_funtype_4_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_4_t copy_ltedfapeg_funtype_4(ltedfapeg_funtype_4_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_4(ltedfapeg_funtype_4_t x, ltedfapeg_funtype_4_t y){
        return false;}

char* json_ltedfapeg_funtype_4(ltedfapeg_funtype_4_t x){char * result = safe_malloc(29); sprintf(result, "%s", "\"ltedfapeg_funtype_4\""); return result;}

void release_ltedfapeg_funtype_5(ltedfapeg_funtype_5_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_5_t copy_ltedfapeg_funtype_5(ltedfapeg_funtype_5_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_5(ltedfapeg_funtype_5_t x, ltedfapeg_funtype_5_t y){
        return false;}

char* json_ltedfapeg_funtype_5(ltedfapeg_funtype_5_t x){char * result = safe_malloc(29); sprintf(result, "%s", "\"ltedfapeg_funtype_5\""); return result;}

void release_ltedfapeg_funtype_6(ltedfapeg_funtype_6_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_6_t copy_ltedfapeg_funtype_6(ltedfapeg_funtype_6_t x){return x->ftbl->cptr(x);}

uint32_t lookup_ltedfapeg_funtype_6(ltedfapeg_funtype_6_htbl_t htbl, uint64_t i, uint32_t ihash){
        uint32_t mask = htbl->size - 1;
        uint32_t hashindex = ihash & mask;
        ltedfapeg_funtype_6_hashentry_t data = htbl->data[hashindex];
        bool_t keyzero;

        keyzero = (data.key == 0);
        bool_t keymatch;
        keymatch = (data.key == i);
        while ((!keyzero || data.keyhash != 0) &&
                 (data.keyhash != ihash || !keymatch)){
                hashindex++;
                hashindex = hashindex & mask;
                data = htbl->data[hashindex];

                keyzero = (data.key == 0);

                keymatch = (data.key == i);
                }
        return hashindex;
        }

ltedfapeg_funtype_6_t dupdate_ltedfapeg_funtype_6(ltedfapeg_funtype_6_t a, uint64_t i, mpz_ptr_t v){
        ltedfapeg_funtype_6_htbl_t htbl = a->htbl;
        if (htbl == NULL){//construct new htbl
                htbl = (ltedfapeg_funtype_6_htbl_t)safe_malloc(sizeof(struct ltedfapeg_funtype_6_htbl_s));
                htbl->size = HTBL_DEFAULT_SIZE; htbl->num_entries = 0;
                htbl->data = (ltedfapeg_funtype_6_hashentry_t *)safe_malloc(HTBL_DEFAULT_SIZE * sizeof(struct ltedfapeg_funtype_6_hashentry_s));
                for (uint32_t j = 0; j < HTBL_DEFAULT_SIZE; j++){htbl->data[j].key = (uint64_t)0; htbl->data[j].keyhash = 0;
                }
                a->htbl = htbl;
        }
        uint32_t size = htbl->size;
        uint32_t num_entries = htbl->num_entries;
        ltedfapeg_funtype_6_hashentry_t * data = htbl->data;
        if (num_entries/3 >  size/5){//resize data
                uint32_t new_size = 2*size; uint32_t new_mask = new_size - 1;
                if (size >= HTBL_MAX_SIZE) out_of_memory();
                ltedfapeg_funtype_6_hashentry_t * new_data = (ltedfapeg_funtype_6_hashentry_t *)safe_malloc(new_size * sizeof(struct ltedfapeg_funtype_6_hashentry_s));
                for (uint32_t j = 0; j < new_size; j++){
                        new_data[j].key = 0;
                        new_data[j].keyhash = 0;}
                for (uint32_t j = 0; j < size; j++){//transfer entries
                        uint32_t keyhash = data[j].keyhash;
                        bool_t keyzero;
                        keyzero = (data[j].key == 0);
                        if (!keyzero || keyhash != 0){
                                uint32_t new_loc = keyhash ^ new_mask;
                                keyzero = (new_data[new_loc].key == 0);
                                while (keyzero && new_data[new_loc].keyhash == 0){
                                        new_loc++;
                                        new_loc = new_loc ^ new_mask;

                                        keyzero = (new_data[new_loc].key == 0);
                                }
                                new_data[new_loc].key = (uint64_t)data[j].key;
                                new_data[new_loc].keyhash = keyhash;
                                mpz_set(new_data[new_loc].value, data[j].value);
                                }}
                htbl->size = new_size;
                htbl->num_entries = num_entries;
                htbl->data = new_data;
                safe_free(data);}
        uint32_t ihash = uint64_hash(i);
        uint32_t hashindex = lookup_ltedfapeg_funtype_6(htbl, i, ihash);
        ltedfapeg_funtype_6_hashentry_t hentry = htbl->data[hashindex];
        uint32_t hkeyhash = hentry.keyhash;
        bool_t hentrykeyzero;
        hentrykeyzero = (hentry.key == 0);

        if (hentrykeyzero && (hkeyhash == 0))
                {htbl->data[hashindex].key = (uint64_t)i; htbl->data[hashindex].keyhash = ihash; mpz_set(htbl->data[hashindex].value, v); htbl->num_entries++;}
            else {mpz_ptr_t tempvalue;mpz_mk_set(tempvalue, htbl->data[hashindex].value);mpz_set(htbl->data[hashindex].value, v);};
        return a;

}

ltedfapeg_funtype_6_t update_ltedfapeg_funtype_6(ltedfapeg_funtype_6_t a, uint64_t i, mpz_ptr_t v){
        if (a->count == 1){
                return dupdate_ltedfapeg_funtype_6(a, i, v);
            } else {
                ltedfapeg_funtype_6_t x = copy_ltedfapeg_funtype_6(a);
                a->count--;
                return dupdate_ltedfapeg_funtype_6(x, i, v);
            }}

bool_t equal_ltedfapeg_funtype_6(ltedfapeg_funtype_6_t x, ltedfapeg_funtype_6_t y){
        return false;}

char* json_ltedfapeg_funtype_6(ltedfapeg_funtype_6_t x){char * result = safe_malloc(29); sprintf(result, "%s", "\"ltedfapeg_funtype_6\""); return result;}


ltedfapeg_record_7_t new_ltedfapeg_record_7(void){
        ltedfapeg_record_7_t tmp = (ltedfapeg_record_7_t) safe_malloc(sizeof(struct ltedfapeg_record_7_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapeg_record_7(ltedfapeg_record_7_t x){
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_ltedfapeg_record_7_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg_record_7((ltedfapeg_record_7_t)x);
}

ltedfapeg_record_7_t copy_ltedfapeg_record_7(ltedfapeg_record_7_t x){
        ltedfapeg_record_7_t y = new_ltedfapeg_record_7();
        y->project_1 = (uint64_t)x->project_1;
        y->project_2 = (uint32_t)x->project_2;
        y->count = 1;
        return y;}

bool_t equal_ltedfapeg_record_7(ltedfapeg_record_7_t x, ltedfapeg_record_7_t y){
        bool_t tmp = true;
        tmp = tmp && x->project_1 == y->project_1;
        tmp = tmp && x->project_2 == y->project_2;
        return tmp;}

char * json_ltedfapeg_record_7(ltedfapeg_record_7_t x){
        char * tmp[2]; 
        char * fld0 = safe_malloc(21);
         sprintf(fld0, "\"project_1\" : ");
        tmp[0] = safe_strcat(fld0, json_uint64(x->project_1));
        char * fld1 = safe_malloc(21);
         sprintf(fld1, "\"project_2\" : ");
        tmp[1] = safe_strcat(fld1, json_uint32(x->project_2));
         char * result = json_list_with_sep(tmp, 2,  '{', ',', '}');
         for (uint32_t i = 0; i < 2; i++) free(tmp[i]);
        return result;}

bool_t equal_ltedfapeg_record_7_ptr(pointer_t x, pointer_t y, actual_ltedfapeg_record_7_t T){
        return equal_ltedfapeg_record_7((ltedfapeg_record_7_t)x, (ltedfapeg_record_7_t)y);
}

char * json_ltedfapeg_record_7_ptr(pointer_t x, actual_ltedfapeg_record_7_t T){
        return json_ltedfapeg_record_7((ltedfapeg_record_7_t)x);
}

actual_ltedfapeg_record_7_t actual_ltedfapeg_record_7(){
        actual_ltedfapeg_record_7_t new = (actual_ltedfapeg_record_7_t)safe_malloc(sizeof(struct actual_ltedfapeg_record_7_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg_record_7_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg_record_7_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg_record_7_ptr);
 

 
        return new;
 };

ltedfapeg_record_7_t update_ltedfapeg_record_7_project_1(ltedfapeg_record_7_t x, uint64_t v){
        ltedfapeg_record_7_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_7(x); x->count--;};
        y->project_1 = (uint64_t)v;
        return y;}

ltedfapeg_record_7_t update_ltedfapeg_record_7_project_2(ltedfapeg_record_7_t x, uint32_t v){
        ltedfapeg_record_7_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_7(x); x->count--;};
        y->project_2 = (uint32_t)v;
        return y;}



void release_ltedfapeg_funtype_8(ltedfapeg_funtype_8_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_8_t copy_ltedfapeg_funtype_8(ltedfapeg_funtype_8_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_8(ltedfapeg_funtype_8_t x, ltedfapeg_funtype_8_t y){
        return false;}

char* json_ltedfapeg_funtype_8(ltedfapeg_funtype_8_t x){char * result = safe_malloc(29); sprintf(result, "%s", "\"ltedfapeg_funtype_8\""); return result;}


ltedfapeg_record_9_t new_ltedfapeg_record_9(void){
        ltedfapeg_record_9_t tmp = (ltedfapeg_record_9_t) safe_malloc(sizeof(struct ltedfapeg_record_9_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapeg_record_9(ltedfapeg_record_9_t x){
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_ltedfapeg_record_9_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg_record_9((ltedfapeg_record_9_t)x);
}

ltedfapeg_record_9_t copy_ltedfapeg_record_9(ltedfapeg_record_9_t x){
        ltedfapeg_record_9_t y = new_ltedfapeg_record_9();
        y->project_1 = (uint32_t)x->project_1;
        y->project_2 = (uint8_t)x->project_2;
        y->count = 1;
        return y;}

bool_t equal_ltedfapeg_record_9(ltedfapeg_record_9_t x, ltedfapeg_record_9_t y){
        bool_t tmp = true;
        tmp = tmp && x->project_1 == y->project_1;
        tmp = tmp && x->project_2 == y->project_2;
        return tmp;}

char * json_ltedfapeg_record_9(ltedfapeg_record_9_t x){
        char * tmp[2]; 
        char * fld0 = safe_malloc(21);
         sprintf(fld0, "\"project_1\" : ");
        tmp[0] = safe_strcat(fld0, json_uint32(x->project_1));
        char * fld1 = safe_malloc(21);
         sprintf(fld1, "\"project_2\" : ");
        tmp[1] = safe_strcat(fld1, json_uint8(x->project_2));
         char * result = json_list_with_sep(tmp, 2,  '{', ',', '}');
         for (uint32_t i = 0; i < 2; i++) free(tmp[i]);
        return result;}

bool_t equal_ltedfapeg_record_9_ptr(pointer_t x, pointer_t y, actual_ltedfapeg_record_9_t T){
        return equal_ltedfapeg_record_9((ltedfapeg_record_9_t)x, (ltedfapeg_record_9_t)y);
}

char * json_ltedfapeg_record_9_ptr(pointer_t x, actual_ltedfapeg_record_9_t T){
        return json_ltedfapeg_record_9((ltedfapeg_record_9_t)x);
}

actual_ltedfapeg_record_9_t actual_ltedfapeg_record_9(){
        actual_ltedfapeg_record_9_t new = (actual_ltedfapeg_record_9_t)safe_malloc(sizeof(struct actual_ltedfapeg_record_9_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg_record_9_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg_record_9_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg_record_9_ptr);
 

 
        return new;
 };

ltedfapeg_record_9_t update_ltedfapeg_record_9_project_1(ltedfapeg_record_9_t x, uint32_t v){
        ltedfapeg_record_9_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_9(x); x->count--;};
        y->project_1 = (uint32_t)v;
        return y;}

ltedfapeg_record_9_t update_ltedfapeg_record_9_project_2(ltedfapeg_record_9_t x, uint8_t v){
        ltedfapeg_record_9_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_9(x); x->count--;};
        y->project_2 = (uint8_t)v;
        return y;}



void release_ltedfapeg_funtype_10(ltedfapeg_funtype_10_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_10_t copy_ltedfapeg_funtype_10(ltedfapeg_funtype_10_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_10(ltedfapeg_funtype_10_t x, ltedfapeg_funtype_10_t y){
        return false;}

char* json_ltedfapeg_funtype_10(ltedfapeg_funtype_10_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_10\""); return result;}


mpz_ptr_t f_ltedfapeg_closure_11(struct ltedfapeg_closure_11_s * closure, ltedfapeg__ent_adt_t bvar){
        mpz_ptr_t result = h_ltedfapeg_closure_11(bvar, closure->fvar_1, closure->fvar_2, closure->fvar_3, closure->fvar_4, closure->fvar_5); 
        return result;}

mpz_ptr_t m_ltedfapeg_closure_11(struct ltedfapeg_closure_11_s * closure, ltedfapeg__ent_adt_t bvar){
        return h_ltedfapeg_closure_11(bvar, closure->fvar_1, closure->fvar_2, closure->fvar_3, closure->fvar_4, closure->fvar_5);}

extern mpz_ptr_t h_ltedfapeg_closure_11(ltedfapeg__ent_adt_t ivar_10, ltedfapeg_funtype_8_t ivar_5, ltedfapeg_funtype_10_t ivar_7, mpz_ptr_t ivar_4, mpz_ptr_t ivar_3, ltedfapeg_funtype_6_t ivar_1){
        mpz_ptr_t result;
        bool_t ivar_40;
        ivar_10->count++;
        ivar_40 = (bool_t)r_ltedfapeg__failp((ltedfapeg__ent_adt_t)ivar_10);
        if (ivar_40){ 
             uint64_t ivar_31;
             ivar_31 = (uint64_t)ltedfapeg__ent_adt_dep((ltedfapeg__ent_adt_t)ivar_10);
             mpz_mk_set(result, ivar_1->ftbl->fptr(ivar_1, ivar_31));
} else {
        
             bool_t ivar_44;
             ivar_10->count++;
             ivar_44 = (bool_t)r_ltedfapeg__pendingp((ltedfapeg__ent_adt_t)ivar_10);
             if (ivar_44){  
           release_ltedfapeg__ent_adt(ivar_10);
           //copying to mpz from mpz;
           mpz_mk_set(result, ivar_3);
} else {
             
           bool_t ivar_48;
           ivar_10->count++;
           ivar_48 = (bool_t)r_ltedfapeg__loopp((ltedfapeg__ent_adt_t)ivar_10);
           if (ivar_48){   
           release_ltedfapeg__ent_adt(ivar_10);
           //copying to mpz from mpz;
           mpz_mk_set(result, ivar_4);
} else {
           
           bool_t ivar_67;
           ivar_10->count++;
           ivar_67 = (bool_t)r_ltedfapeg__goodp((ltedfapeg__ent_adt_t)ivar_10);
           if (ivar_67){    
            uint64_t ivar_52;
            ivar_10->count++;
            ivar_52 = (uint64_t)ltedfapeg__ent_adt_dep((ltedfapeg__ent_adt_t)ivar_10);
            uint32_t ivar_53;
            ivar_53 = (uint32_t)ltedfapeg__ent_adt_span((ltedfapeg__ent_adt_t)ivar_10);
            mpz_mk_set(result, ivar_5->ftbl->mptr(ivar_5, ivar_52, ivar_53));
} else {
           
            uint32_t ivar_71;
            ivar_10->count++;
            ivar_71 = (uint32_t)ltedfapeg__ent_adt_pos((ltedfapeg__ent_adt_t)ivar_10);
            uint8_t ivar_72;
            ivar_72 = (uint8_t)ltedfapeg__ent_adt_nt((ltedfapeg__ent_adt_t)ivar_10);
            mpz_mk_set(result, ivar_7->ftbl->mptr(ivar_7, ivar_71, ivar_72));
};
};
};
};

        return result;
}

ltedfapeg_closure_11_t new_ltedfapeg_closure_11(void){
        static struct ltedfapeg_funtype_5_ftbl_s ftbl = {.fptr = (mpz_ptr_t (*)(ltedfapeg_funtype_5_t, ltedfapeg__ent_adt_t))&f_ltedfapeg_closure_11, .mptr = (mpz_ptr_t (*)(ltedfapeg_funtype_5_t, ltedfapeg__ent_adt_t))&m_ltedfapeg_closure_11, .rptr =  (void (*)(ltedfapeg_funtype_5_t))&release_ltedfapeg_closure_11, .cptr = (ltedfapeg_funtype_5_t (*)(ltedfapeg_funtype_5_t))&copy_ltedfapeg_closure_11};
        ltedfapeg_closure_11_t tmp = (ltedfapeg_closure_11_t) safe_malloc(sizeof(struct ltedfapeg_closure_11_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        mpz_init(tmp->fvar_3);
        mpz_init(tmp->fvar_4);
        return tmp;}

void release_ltedfapeg_closure_11(ltedfapeg_funtype_5_t closure){
        ltedfapeg_closure_11_t x = (ltedfapeg_closure_11_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg_funtype_8(x->fvar_1);
         release_ltedfapeg_funtype_10(x->fvar_2);
         release_ltedfapeg_funtype_6(x->fvar_5);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_11_t copy_ltedfapeg_closure_11(ltedfapeg_closure_11_t x){
        ltedfapeg_closure_11_t y = new_ltedfapeg_closure_11();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        mpz_set(y->fvar_3, x->fvar_3);
        mpz_set(y->fvar_4, x->fvar_4);
        y->fvar_5 = x->fvar_5; x->fvar_5->count++;
        if (x->htbl != NULL){
            ltedfapeg_funtype_5_htbl_t new_htbl = (ltedfapeg_funtype_5_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_5_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_5_hashentry_t * new_data = (ltedfapeg_funtype_5_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_5_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_5_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


ltedfapeg_record_12_t new_ltedfapeg_record_12(void){
        ltedfapeg_record_12_t tmp = (ltedfapeg_record_12_t) safe_malloc(sizeof(struct ltedfapeg_record_12_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapeg_record_12(ltedfapeg_record_12_t x){
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg__ent_adt(x->project_2);
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_ltedfapeg_record_12_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg_record_12((ltedfapeg_record_12_t)x);
}

ltedfapeg_record_12_t copy_ltedfapeg_record_12(ltedfapeg_record_12_t x){
        ltedfapeg_record_12_t y = new_ltedfapeg_record_12();
        y->project_1 = (uint64_t)x->project_1;
        y->project_2 = x->project_2;
        if (y->project_2 != NULL){y->project_2->count++;};
        y->count = 1;
        return y;}

bool_t equal_ltedfapeg_record_12(ltedfapeg_record_12_t x, ltedfapeg_record_12_t y){
        bool_t tmp = true;
        tmp = tmp && x->project_1 == y->project_1;
        tmp = tmp && equal_ltedfapeg__ent_adt(x->project_2, y->project_2);
        return tmp;}

char * json_ltedfapeg_record_12(ltedfapeg_record_12_t x){
        char * tmp[2]; 
        char * fld0 = safe_malloc(21);
         sprintf(fld0, "\"project_1\" : ");
        tmp[0] = safe_strcat(fld0, json_uint64(x->project_1));
        char * fld1 = safe_malloc(21);
         sprintf(fld1, "\"project_2\" : ");
        tmp[1] = safe_strcat(fld1, json_ltedfapeg__ent_adt(x->project_2));
         char * result = json_list_with_sep(tmp, 2,  '{', ',', '}');
         for (uint32_t i = 0; i < 2; i++) free(tmp[i]);
        return result;}

bool_t equal_ltedfapeg_record_12_ptr(pointer_t x, pointer_t y, actual_ltedfapeg_record_12_t T){
        return equal_ltedfapeg_record_12((ltedfapeg_record_12_t)x, (ltedfapeg_record_12_t)y);
}

char * json_ltedfapeg_record_12_ptr(pointer_t x, actual_ltedfapeg_record_12_t T){
        return json_ltedfapeg_record_12((ltedfapeg_record_12_t)x);
}

actual_ltedfapeg_record_12_t actual_ltedfapeg_record_12(){
        actual_ltedfapeg_record_12_t new = (actual_ltedfapeg_record_12_t)safe_malloc(sizeof(struct actual_ltedfapeg_record_12_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg_record_12_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg_record_12_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg_record_12_ptr);
 

 
        return new;
 };

ltedfapeg_record_12_t update_ltedfapeg_record_12_project_1(ltedfapeg_record_12_t x, uint64_t v){
        ltedfapeg_record_12_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_12(x); x->count--;};
        y->project_1 = (uint64_t)v;
        return y;}

ltedfapeg_record_12_t update_ltedfapeg_record_12_project_2(ltedfapeg_record_12_t x, ltedfapeg__ent_adt_t v){
        ltedfapeg_record_12_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->project_2 != NULL){release_ltedfapeg__ent_adt(x->project_2);};}
        else {y = copy_ltedfapeg_record_12(x); x->count--; y->project_2->count--;};
        y->project_2 = (ltedfapeg__ent_adt_t)v;
        return y;}



void release_ltedfapeg_funtype_13(ltedfapeg_funtype_13_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_13_t copy_ltedfapeg_funtype_13(ltedfapeg_funtype_13_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_13(ltedfapeg_funtype_13_t x, ltedfapeg_funtype_13_t y){
        return false;}

char* json_ltedfapeg_funtype_13(ltedfapeg_funtype_13_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_13\""); return result;}


ltedfapeg_record_14_t new_ltedfapeg_record_14(void){
        ltedfapeg_record_14_t tmp = (ltedfapeg_record_14_t) safe_malloc(sizeof(struct ltedfapeg_record_14_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapeg_record_14(ltedfapeg_record_14_t x){
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg__ent_adt(x->project_3);
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_ltedfapeg_record_14_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg_record_14((ltedfapeg_record_14_t)x);
}

ltedfapeg_record_14_t copy_ltedfapeg_record_14(ltedfapeg_record_14_t x){
        ltedfapeg_record_14_t y = new_ltedfapeg_record_14();
        y->project_1 = (uint64_t)x->project_1;
        y->project_2 = (uint32_t)x->project_2;
        y->project_3 = x->project_3;
        if (y->project_3 != NULL){y->project_3->count++;};
        y->count = 1;
        return y;}

bool_t equal_ltedfapeg_record_14(ltedfapeg_record_14_t x, ltedfapeg_record_14_t y){
        bool_t tmp = true;
        tmp = tmp && x->project_1 == y->project_1;
        tmp = tmp && x->project_2 == y->project_2;
        tmp = tmp && equal_ltedfapeg__ent_adt(x->project_3, y->project_3);
        return tmp;}

char * json_ltedfapeg_record_14(ltedfapeg_record_14_t x){
        char * tmp[3]; 
        char * fld0 = safe_malloc(21);
         sprintf(fld0, "\"project_1\" : ");
        tmp[0] = safe_strcat(fld0, json_uint64(x->project_1));
        char * fld1 = safe_malloc(21);
         sprintf(fld1, "\"project_2\" : ");
        tmp[1] = safe_strcat(fld1, json_uint32(x->project_2));
        char * fld2 = safe_malloc(21);
         sprintf(fld2, "\"project_3\" : ");
        tmp[2] = safe_strcat(fld2, json_ltedfapeg__ent_adt(x->project_3));
         char * result = json_list_with_sep(tmp, 3,  '{', ',', '}');
         for (uint32_t i = 0; i < 3; i++) free(tmp[i]);
        return result;}

bool_t equal_ltedfapeg_record_14_ptr(pointer_t x, pointer_t y, actual_ltedfapeg_record_14_t T){
        return equal_ltedfapeg_record_14((ltedfapeg_record_14_t)x, (ltedfapeg_record_14_t)y);
}

char * json_ltedfapeg_record_14_ptr(pointer_t x, actual_ltedfapeg_record_14_t T){
        return json_ltedfapeg_record_14((ltedfapeg_record_14_t)x);
}

actual_ltedfapeg_record_14_t actual_ltedfapeg_record_14(){
        actual_ltedfapeg_record_14_t new = (actual_ltedfapeg_record_14_t)safe_malloc(sizeof(struct actual_ltedfapeg_record_14_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg_record_14_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg_record_14_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg_record_14_ptr);
 

 
        return new;
 };

ltedfapeg_record_14_t update_ltedfapeg_record_14_project_1(ltedfapeg_record_14_t x, uint64_t v){
        ltedfapeg_record_14_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_14(x); x->count--;};
        y->project_1 = (uint64_t)v;
        return y;}

ltedfapeg_record_14_t update_ltedfapeg_record_14_project_2(ltedfapeg_record_14_t x, uint32_t v){
        ltedfapeg_record_14_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_14(x); x->count--;};
        y->project_2 = (uint32_t)v;
        return y;}

ltedfapeg_record_14_t update_ltedfapeg_record_14_project_3(ltedfapeg_record_14_t x, ltedfapeg__ent_adt_t v){
        ltedfapeg_record_14_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->project_3 != NULL){release_ltedfapeg__ent_adt(x->project_3);};}
        else {y = copy_ltedfapeg_record_14(x); x->count--; y->project_3->count--;};
        y->project_3 = (ltedfapeg__ent_adt_t)v;
        return y;}



void release_ltedfapeg_funtype_15(ltedfapeg_funtype_15_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_15_t copy_ltedfapeg_funtype_15(ltedfapeg_funtype_15_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_15(ltedfapeg_funtype_15_t x, ltedfapeg_funtype_15_t y){
        return false;}

char* json_ltedfapeg_funtype_15(ltedfapeg_funtype_15_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_15\""); return result;}


ltedfapeg_record_16_t new_ltedfapeg_record_16(void){
        ltedfapeg_record_16_t tmp = (ltedfapeg_record_16_t) safe_malloc(sizeof(struct ltedfapeg_record_16_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapeg_record_16(ltedfapeg_record_16_t x){
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg__ent_adt(x->project_3);
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_ltedfapeg_record_16_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg_record_16((ltedfapeg_record_16_t)x);
}

ltedfapeg_record_16_t copy_ltedfapeg_record_16(ltedfapeg_record_16_t x){
        ltedfapeg_record_16_t y = new_ltedfapeg_record_16();
        y->project_1 = (uint32_t)x->project_1;
        y->project_2 = (uint8_t)x->project_2;
        y->project_3 = x->project_3;
        if (y->project_3 != NULL){y->project_3->count++;};
        y->count = 1;
        return y;}

bool_t equal_ltedfapeg_record_16(ltedfapeg_record_16_t x, ltedfapeg_record_16_t y){
        bool_t tmp = true;
        tmp = tmp && x->project_1 == y->project_1;
        tmp = tmp && x->project_2 == y->project_2;
        tmp = tmp && equal_ltedfapeg__ent_adt(x->project_3, y->project_3);
        return tmp;}

char * json_ltedfapeg_record_16(ltedfapeg_record_16_t x){
        char * tmp[3]; 
        char * fld0 = safe_malloc(21);
         sprintf(fld0, "\"project_1\" : ");
        tmp[0] = safe_strcat(fld0, json_uint32(x->project_1));
        char * fld1 = safe_malloc(21);
         sprintf(fld1, "\"project_2\" : ");
        tmp[1] = safe_strcat(fld1, json_uint8(x->project_2));
        char * fld2 = safe_malloc(21);
         sprintf(fld2, "\"project_3\" : ");
        tmp[2] = safe_strcat(fld2, json_ltedfapeg__ent_adt(x->project_3));
         char * result = json_list_with_sep(tmp, 3,  '{', ',', '}');
         for (uint32_t i = 0; i < 3; i++) free(tmp[i]);
        return result;}

bool_t equal_ltedfapeg_record_16_ptr(pointer_t x, pointer_t y, actual_ltedfapeg_record_16_t T){
        return equal_ltedfapeg_record_16((ltedfapeg_record_16_t)x, (ltedfapeg_record_16_t)y);
}

char * json_ltedfapeg_record_16_ptr(pointer_t x, actual_ltedfapeg_record_16_t T){
        return json_ltedfapeg_record_16((ltedfapeg_record_16_t)x);
}

actual_ltedfapeg_record_16_t actual_ltedfapeg_record_16(){
        actual_ltedfapeg_record_16_t new = (actual_ltedfapeg_record_16_t)safe_malloc(sizeof(struct actual_ltedfapeg_record_16_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg_record_16_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg_record_16_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg_record_16_ptr);
 

 
        return new;
 };

ltedfapeg_record_16_t update_ltedfapeg_record_16_project_1(ltedfapeg_record_16_t x, uint32_t v){
        ltedfapeg_record_16_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_16(x); x->count--;};
        y->project_1 = (uint32_t)v;
        return y;}

ltedfapeg_record_16_t update_ltedfapeg_record_16_project_2(ltedfapeg_record_16_t x, uint8_t v){
        ltedfapeg_record_16_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_16(x); x->count--;};
        y->project_2 = (uint8_t)v;
        return y;}

ltedfapeg_record_16_t update_ltedfapeg_record_16_project_3(ltedfapeg_record_16_t x, ltedfapeg__ent_adt_t v){
        ltedfapeg_record_16_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->project_3 != NULL){release_ltedfapeg__ent_adt(x->project_3);};}
        else {y = copy_ltedfapeg_record_16(x); x->count--; y->project_3->count--;};
        y->project_3 = (ltedfapeg__ent_adt_t)v;
        return y;}



void release_ltedfapeg_funtype_17(ltedfapeg_funtype_17_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_17_t copy_ltedfapeg_funtype_17(ltedfapeg_funtype_17_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_17(ltedfapeg_funtype_17_t x, ltedfapeg_funtype_17_t y){
        return false;}

char* json_ltedfapeg_funtype_17(ltedfapeg_funtype_17_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_17\""); return result;}


mpz_ptr_t f_ltedfapeg_closure_18(struct ltedfapeg_closure_18_s * closure, ltedfapeg__ent_adt_t bvar){
        mpz_ptr_t result = h_ltedfapeg_closure_18(bvar, closure->fvar_1, closure->fvar_2, closure->fvar_3, closure->fvar_4, closure->fvar_5); 
        return result;}

mpz_ptr_t m_ltedfapeg_closure_18(struct ltedfapeg_closure_18_s * closure, ltedfapeg__ent_adt_t bvar){
        return h_ltedfapeg_closure_18(bvar, closure->fvar_1, closure->fvar_2, closure->fvar_3, closure->fvar_4, closure->fvar_5);}

extern mpz_ptr_t h_ltedfapeg_closure_18(ltedfapeg__ent_adt_t ivar_12, ltedfapeg_funtype_15_t ivar_7, ltedfapeg_funtype_17_t ivar_9, ltedfapeg_funtype_5_t ivar_5, ltedfapeg_funtype_5_t ivar_3, ltedfapeg_funtype_13_t ivar_1){
        mpz_ptr_t result;
        bool_t ivar_46;
        ivar_12->count++;
        ivar_46 = (bool_t)r_ltedfapeg__failp((ltedfapeg__ent_adt_t)ivar_12);
        if (ivar_46){ 
             uint64_t ivar_35;
             ivar_12->count++;
             ivar_35 = (uint64_t)ltedfapeg__ent_adt_dep((ltedfapeg__ent_adt_t)ivar_12);
             mpz_mk_set(result, ivar_1->ftbl->mptr(ivar_1, ivar_35, ivar_12));
} else {
        
             bool_t ivar_55;
             ivar_12->count++;
             ivar_55 = (bool_t)r_ltedfapeg__pendingp((ltedfapeg__ent_adt_t)ivar_12);
             if (ivar_55){  
           mpz_mk_set(result, ivar_3->ftbl->fptr(ivar_3, ivar_12));
} else {
             
           bool_t ivar_64;
           ivar_12->count++;
           ivar_64 = (bool_t)r_ltedfapeg__loopp((ltedfapeg__ent_adt_t)ivar_12);
           if (ivar_64){   
           mpz_mk_set(result, ivar_5->ftbl->fptr(ivar_5, ivar_12));
} else {
           
           bool_t ivar_85;
           ivar_12->count++;
           ivar_85 = (bool_t)r_ltedfapeg__goodp((ltedfapeg__ent_adt_t)ivar_12);
           if (ivar_85){    
            uint64_t ivar_68;
            ivar_12->count++;
            ivar_68 = (uint64_t)ltedfapeg__ent_adt_dep((ltedfapeg__ent_adt_t)ivar_12);
            uint32_t ivar_69;
            ivar_12->count++;
            ivar_69 = (uint32_t)ltedfapeg__ent_adt_span((ltedfapeg__ent_adt_t)ivar_12);
            mpz_mk_set(result, ivar_7->ftbl->mptr(ivar_7, ivar_68, ivar_69, ivar_12));
} else {
           
            uint32_t ivar_89;
            ivar_12->count++;
            ivar_89 = (uint32_t)ltedfapeg__ent_adt_pos((ltedfapeg__ent_adt_t)ivar_12);
            uint8_t ivar_90;
            ivar_12->count++;
            ivar_90 = (uint8_t)ltedfapeg__ent_adt_nt((ltedfapeg__ent_adt_t)ivar_12);
            mpz_mk_set(result, ivar_9->ftbl->mptr(ivar_9, ivar_89, ivar_90, ivar_12));
};
};
};
};

        return result;
}

ltedfapeg_closure_18_t new_ltedfapeg_closure_18(void){
        static struct ltedfapeg_funtype_5_ftbl_s ftbl = {.fptr = (mpz_ptr_t (*)(ltedfapeg_funtype_5_t, ltedfapeg__ent_adt_t))&f_ltedfapeg_closure_18, .mptr = (mpz_ptr_t (*)(ltedfapeg_funtype_5_t, ltedfapeg__ent_adt_t))&m_ltedfapeg_closure_18, .rptr =  (void (*)(ltedfapeg_funtype_5_t))&release_ltedfapeg_closure_18, .cptr = (ltedfapeg_funtype_5_t (*)(ltedfapeg_funtype_5_t))&copy_ltedfapeg_closure_18};
        ltedfapeg_closure_18_t tmp = (ltedfapeg_closure_18_t) safe_malloc(sizeof(struct ltedfapeg_closure_18_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_18(ltedfapeg_funtype_5_t closure){
        ltedfapeg_closure_18_t x = (ltedfapeg_closure_18_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg_funtype_15(x->fvar_1);
         release_ltedfapeg_funtype_17(x->fvar_2);
         release_ltedfapeg_funtype_5(x->fvar_3);
         release_ltedfapeg_funtype_5(x->fvar_4);
         release_ltedfapeg_funtype_13(x->fvar_5);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_18_t copy_ltedfapeg_closure_18(ltedfapeg_closure_18_t x){
        ltedfapeg_closure_18_t y = new_ltedfapeg_closure_18();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        y->fvar_3 = x->fvar_3; x->fvar_3->count++;
        y->fvar_4 = x->fvar_4; x->fvar_4->count++;
        y->fvar_5 = x->fvar_5; x->fvar_5->count++;
        if (x->htbl != NULL){
            ltedfapeg_funtype_5_htbl_t new_htbl = (ltedfapeg_funtype_5_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_5_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_5_hashentry_t * new_data = (ltedfapeg_funtype_5_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_5_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_5_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}

void release_ltedfapeg_funtype_19(ltedfapeg_funtype_19_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_19_t copy_ltedfapeg_funtype_19(ltedfapeg_funtype_19_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_19(ltedfapeg_funtype_19_t x, ltedfapeg_funtype_19_t y){
        return false;}

char* json_ltedfapeg_funtype_19(ltedfapeg_funtype_19_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_19\""); return result;}

void release_ltedfapeg_funtype_20(ltedfapeg_funtype_20_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_20_t copy_ltedfapeg_funtype_20(ltedfapeg_funtype_20_t x){return x->ftbl->cptr(x);}

uint32_t lookup_ltedfapeg_funtype_20(ltedfapeg_funtype_20_htbl_t htbl, uint64_t i, uint32_t ihash){
        uint32_t mask = htbl->size - 1;
        uint32_t hashindex = ihash & mask;
        ltedfapeg_funtype_20_hashentry_t data = htbl->data[hashindex];
        bool_t keyzero;

        keyzero = (data.key == 0);
        bool_t keymatch;
        keymatch = (data.key == i);
        while ((!keyzero || data.keyhash != 0) &&
                 (data.keyhash != ihash || !keymatch)){
                hashindex++;
                hashindex = hashindex & mask;
                data = htbl->data[hashindex];

                keyzero = (data.key == 0);

                keymatch = (data.key == i);
                }
        return hashindex;
        }

ltedfapeg_funtype_20_t dupdate_ltedfapeg_funtype_20(ltedfapeg_funtype_20_t a, uint64_t i, ordstruct_adt__ordstruct_adt_t v){
        ltedfapeg_funtype_20_htbl_t htbl = a->htbl;
        if (htbl == NULL){//construct new htbl
                htbl = (ltedfapeg_funtype_20_htbl_t)safe_malloc(sizeof(struct ltedfapeg_funtype_20_htbl_s));
                htbl->size = HTBL_DEFAULT_SIZE; htbl->num_entries = 0;
                htbl->data = (ltedfapeg_funtype_20_hashentry_t *)safe_malloc(HTBL_DEFAULT_SIZE * sizeof(struct ltedfapeg_funtype_20_hashentry_s));
                for (uint32_t j = 0; j < HTBL_DEFAULT_SIZE; j++){htbl->data[j].key = (uint64_t)0; htbl->data[j].keyhash = 0;
                }
                a->htbl = htbl;
        }
        uint32_t size = htbl->size;
        uint32_t num_entries = htbl->num_entries;
        ltedfapeg_funtype_20_hashentry_t * data = htbl->data;
        if (num_entries/3 >  size/5){//resize data
                uint32_t new_size = 2*size; uint32_t new_mask = new_size - 1;
                if (size >= HTBL_MAX_SIZE) out_of_memory();
                ltedfapeg_funtype_20_hashentry_t * new_data = (ltedfapeg_funtype_20_hashentry_t *)safe_malloc(new_size * sizeof(struct ltedfapeg_funtype_20_hashentry_s));
                for (uint32_t j = 0; j < new_size; j++){
                        new_data[j].key = 0;
                        new_data[j].keyhash = 0;}
                for (uint32_t j = 0; j < size; j++){//transfer entries
                        uint32_t keyhash = data[j].keyhash;
                        bool_t keyzero;
                        keyzero = (data[j].key == 0);
                        if (!keyzero || keyhash != 0){
                                uint32_t new_loc = keyhash ^ new_mask;
                                keyzero = (new_data[new_loc].key == 0);
                                while (keyzero && new_data[new_loc].keyhash == 0){
                                        new_loc++;
                                        new_loc = new_loc ^ new_mask;

                                        keyzero = (new_data[new_loc].key == 0);
                                }
                                new_data[new_loc].key = (uint64_t)data[j].key;
                                new_data[new_loc].keyhash = keyhash;
                                new_data[new_loc].value = (ordstruct_adt__ordstruct_adt_t)data[j].value;
                                }}
                htbl->size = new_size;
                htbl->num_entries = num_entries;
                htbl->data = new_data;
                safe_free(data);}
        uint32_t ihash = uint64_hash(i);
        uint32_t hashindex = lookup_ltedfapeg_funtype_20(htbl, i, ihash);
        ltedfapeg_funtype_20_hashentry_t hentry = htbl->data[hashindex];
        uint32_t hkeyhash = hentry.keyhash;
        bool_t hentrykeyzero;
        hentrykeyzero = (hentry.key == 0);

        if (hentrykeyzero && (hkeyhash == 0))
                {htbl->data[hashindex].key = (uint64_t)i; htbl->data[hashindex].keyhash = ihash; htbl->data[hashindex].value = (ordstruct_adt__ordstruct_adt_t)v; htbl->num_entries++;}
            else {ordstruct_adt__ordstruct_adt_t tempvalue;tempvalue = (ordstruct_adt__ordstruct_adt_t)htbl->data[hashindex].value;htbl->data[hashindex].value = (ordstruct_adt__ordstruct_adt_t)v;if (v != NULL) v->count++;if (tempvalue != NULL)release_ordstruct_adt__ordstruct_adt(tempvalue);};
        return a;

}

ltedfapeg_funtype_20_t update_ltedfapeg_funtype_20(ltedfapeg_funtype_20_t a, uint64_t i, ordstruct_adt__ordstruct_adt_t v){
        if (a->count == 1){
                return dupdate_ltedfapeg_funtype_20(a, i, v);
            } else {
                ltedfapeg_funtype_20_t x = copy_ltedfapeg_funtype_20(a);
                a->count--;
                return dupdate_ltedfapeg_funtype_20(x, i, v);
            }}

bool_t equal_ltedfapeg_funtype_20(ltedfapeg_funtype_20_t x, ltedfapeg_funtype_20_t y){
        return false;}

char* json_ltedfapeg_funtype_20(ltedfapeg_funtype_20_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_20\""); return result;}

void release_ltedfapeg_funtype_21(ltedfapeg_funtype_21_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_21_t copy_ltedfapeg_funtype_21(ltedfapeg_funtype_21_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_21(ltedfapeg_funtype_21_t x, ltedfapeg_funtype_21_t y){
        return false;}

char* json_ltedfapeg_funtype_21(ltedfapeg_funtype_21_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_21\""); return result;}

void release_ltedfapeg_funtype_22(ltedfapeg_funtype_22_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_22_t copy_ltedfapeg_funtype_22(ltedfapeg_funtype_22_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_22(ltedfapeg_funtype_22_t x, ltedfapeg_funtype_22_t y){
        return false;}

char* json_ltedfapeg_funtype_22(ltedfapeg_funtype_22_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_22\""); return result;}


ordstruct_adt__ordstruct_adt_t f_ltedfapeg_closure_23(struct ltedfapeg_closure_23_s * closure, ltedfapeg__ent_adt_t bvar){
        ordstruct_adt__ordstruct_adt_t result = h_ltedfapeg_closure_23(bvar, closure->fvar_1, closure->fvar_2, closure->fvar_3, closure->fvar_4, closure->fvar_5); 
        return result;}

ordstruct_adt__ordstruct_adt_t m_ltedfapeg_closure_23(struct ltedfapeg_closure_23_s * closure, ltedfapeg__ent_adt_t bvar){
        return h_ltedfapeg_closure_23(bvar, closure->fvar_1, closure->fvar_2, closure->fvar_3, closure->fvar_4, closure->fvar_5);}

extern ordstruct_adt__ordstruct_adt_t h_ltedfapeg_closure_23(ltedfapeg__ent_adt_t ivar_10, ltedfapeg_funtype_21_t ivar_5, ltedfapeg_funtype_22_t ivar_7, ordstruct_adt__ordstruct_adt_t ivar_4, ordstruct_adt__ordstruct_adt_t ivar_3, ltedfapeg_funtype_20_t ivar_1){
        ordstruct_adt__ordstruct_adt_t result;
        bool_t ivar_40;
        ivar_10->count++;
        ivar_40 = (bool_t)r_ltedfapeg__failp((ltedfapeg__ent_adt_t)ivar_10);
        if (ivar_40){ 
             uint64_t ivar_31;
             ivar_31 = (uint64_t)ltedfapeg__ent_adt_dep((ltedfapeg__ent_adt_t)ivar_10);
             result = (ordstruct_adt__ordstruct_adt_t)ivar_1->ftbl->fptr(ivar_1, ivar_31);
} else {
        
             bool_t ivar_44;
             ivar_10->count++;
             ivar_44 = (bool_t)r_ltedfapeg__pendingp((ltedfapeg__ent_adt_t)ivar_10);
             if (ivar_44){  
           release_ltedfapeg__ent_adt(ivar_10);
           //copying to ordstruct_adt__ordstruct_adt from ordstruct_adt__ordstruct_adt;
           result = (ordstruct_adt__ordstruct_adt_t)ivar_3;
           if (result != NULL) result->count++;
} else {
             
           bool_t ivar_48;
           ivar_10->count++;
           ivar_48 = (bool_t)r_ltedfapeg__loopp((ltedfapeg__ent_adt_t)ivar_10);
           if (ivar_48){   
           release_ltedfapeg__ent_adt(ivar_10);
           //copying to ordstruct_adt__ordstruct_adt from ordstruct_adt__ordstruct_adt;
           result = (ordstruct_adt__ordstruct_adt_t)ivar_4;
           if (result != NULL) result->count++;
} else {
           
           bool_t ivar_67;
           ivar_10->count++;
           ivar_67 = (bool_t)r_ltedfapeg__goodp((ltedfapeg__ent_adt_t)ivar_10);
           if (ivar_67){    
            uint64_t ivar_52;
            ivar_10->count++;
            ivar_52 = (uint64_t)ltedfapeg__ent_adt_dep((ltedfapeg__ent_adt_t)ivar_10);
            uint32_t ivar_53;
            ivar_53 = (uint32_t)ltedfapeg__ent_adt_span((ltedfapeg__ent_adt_t)ivar_10);
            result = (ordstruct_adt__ordstruct_adt_t)ivar_5->ftbl->mptr(ivar_5, ivar_52, ivar_53);
} else {
           
            uint32_t ivar_71;
            ivar_10->count++;
            ivar_71 = (uint32_t)ltedfapeg__ent_adt_pos((ltedfapeg__ent_adt_t)ivar_10);
            uint8_t ivar_72;
            ivar_72 = (uint8_t)ltedfapeg__ent_adt_nt((ltedfapeg__ent_adt_t)ivar_10);
            result = (ordstruct_adt__ordstruct_adt_t)ivar_7->ftbl->mptr(ivar_7, ivar_71, ivar_72);
};
};
};
};

        return result;
}

ltedfapeg_closure_23_t new_ltedfapeg_closure_23(void){
        static struct ltedfapeg_funtype_19_ftbl_s ftbl = {.fptr = (ordstruct_adt__ordstruct_adt_t (*)(ltedfapeg_funtype_19_t, ltedfapeg__ent_adt_t))&f_ltedfapeg_closure_23, .mptr = (ordstruct_adt__ordstruct_adt_t (*)(ltedfapeg_funtype_19_t, ltedfapeg__ent_adt_t))&m_ltedfapeg_closure_23, .rptr =  (void (*)(ltedfapeg_funtype_19_t))&release_ltedfapeg_closure_23, .cptr = (ltedfapeg_funtype_19_t (*)(ltedfapeg_funtype_19_t))&copy_ltedfapeg_closure_23};
        ltedfapeg_closure_23_t tmp = (ltedfapeg_closure_23_t) safe_malloc(sizeof(struct ltedfapeg_closure_23_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_23(ltedfapeg_funtype_19_t closure){
        ltedfapeg_closure_23_t x = (ltedfapeg_closure_23_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg_funtype_21(x->fvar_1);
         release_ltedfapeg_funtype_22(x->fvar_2);
         release_ordstruct_adt__ordstruct_adt(x->fvar_3);
         release_ordstruct_adt__ordstruct_adt(x->fvar_4);
         release_ltedfapeg_funtype_20(x->fvar_5);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_23_t copy_ltedfapeg_closure_23(ltedfapeg_closure_23_t x){
        ltedfapeg_closure_23_t y = new_ltedfapeg_closure_23();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        y->fvar_3 = x->fvar_3; x->fvar_3->count++;
        y->fvar_4 = x->fvar_4; x->fvar_4->count++;
        y->fvar_5 = x->fvar_5; x->fvar_5->count++;
        if (x->htbl != NULL){
            ltedfapeg_funtype_19_htbl_t new_htbl = (ltedfapeg_funtype_19_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_19_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_19_hashentry_t * new_data = (ltedfapeg_funtype_19_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_19_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_19_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}

void release_ltedfapeg_funtype_24(ltedfapeg_funtype_24_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_24_t copy_ltedfapeg_funtype_24(ltedfapeg_funtype_24_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_24(ltedfapeg_funtype_24_t x, ltedfapeg_funtype_24_t y){
        return false;}

char* json_ltedfapeg_funtype_24(ltedfapeg_funtype_24_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_24\""); return result;}

void release_ltedfapeg_funtype_25(ltedfapeg_funtype_25_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_25_t copy_ltedfapeg_funtype_25(ltedfapeg_funtype_25_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_25(ltedfapeg_funtype_25_t x, ltedfapeg_funtype_25_t y){
        return false;}

char* json_ltedfapeg_funtype_25(ltedfapeg_funtype_25_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_25\""); return result;}

void release_ltedfapeg_funtype_26(ltedfapeg_funtype_26_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_26_t copy_ltedfapeg_funtype_26(ltedfapeg_funtype_26_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_26(ltedfapeg_funtype_26_t x, ltedfapeg_funtype_26_t y){
        return false;}

char* json_ltedfapeg_funtype_26(ltedfapeg_funtype_26_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_26\""); return result;}


ordstruct_adt__ordstruct_adt_t f_ltedfapeg_closure_27(struct ltedfapeg_closure_27_s * closure, ltedfapeg__ent_adt_t bvar){
        ordstruct_adt__ordstruct_adt_t result = h_ltedfapeg_closure_27(bvar, closure->fvar_1, closure->fvar_2, closure->fvar_3, closure->fvar_4, closure->fvar_5); 
        return result;}

ordstruct_adt__ordstruct_adt_t m_ltedfapeg_closure_27(struct ltedfapeg_closure_27_s * closure, ltedfapeg__ent_adt_t bvar){
        return h_ltedfapeg_closure_27(bvar, closure->fvar_1, closure->fvar_2, closure->fvar_3, closure->fvar_4, closure->fvar_5);}

extern ordstruct_adt__ordstruct_adt_t h_ltedfapeg_closure_27(ltedfapeg__ent_adt_t ivar_12, ltedfapeg_funtype_25_t ivar_7, ltedfapeg_funtype_26_t ivar_9, ltedfapeg_funtype_19_t ivar_5, ltedfapeg_funtype_19_t ivar_3, ltedfapeg_funtype_24_t ivar_1){
        ordstruct_adt__ordstruct_adt_t result;
        bool_t ivar_46;
        ivar_12->count++;
        ivar_46 = (bool_t)r_ltedfapeg__failp((ltedfapeg__ent_adt_t)ivar_12);
        if (ivar_46){ 
             uint64_t ivar_35;
             ivar_12->count++;
             ivar_35 = (uint64_t)ltedfapeg__ent_adt_dep((ltedfapeg__ent_adt_t)ivar_12);
             result = (ordstruct_adt__ordstruct_adt_t)ivar_1->ftbl->mptr(ivar_1, ivar_35, ivar_12);
} else {
        
             bool_t ivar_55;
             ivar_12->count++;
             ivar_55 = (bool_t)r_ltedfapeg__pendingp((ltedfapeg__ent_adt_t)ivar_12);
             if (ivar_55){  
           result = (ordstruct_adt__ordstruct_adt_t)ivar_3->ftbl->fptr(ivar_3, ivar_12);
} else {
             
           bool_t ivar_64;
           ivar_12->count++;
           ivar_64 = (bool_t)r_ltedfapeg__loopp((ltedfapeg__ent_adt_t)ivar_12);
           if (ivar_64){   
           result = (ordstruct_adt__ordstruct_adt_t)ivar_5->ftbl->fptr(ivar_5, ivar_12);
} else {
           
           bool_t ivar_85;
           ivar_12->count++;
           ivar_85 = (bool_t)r_ltedfapeg__goodp((ltedfapeg__ent_adt_t)ivar_12);
           if (ivar_85){    
            uint64_t ivar_68;
            ivar_12->count++;
            ivar_68 = (uint64_t)ltedfapeg__ent_adt_dep((ltedfapeg__ent_adt_t)ivar_12);
            uint32_t ivar_69;
            ivar_12->count++;
            ivar_69 = (uint32_t)ltedfapeg__ent_adt_span((ltedfapeg__ent_adt_t)ivar_12);
            result = (ordstruct_adt__ordstruct_adt_t)ivar_7->ftbl->mptr(ivar_7, ivar_68, ivar_69, ivar_12);
} else {
           
            uint32_t ivar_89;
            ivar_12->count++;
            ivar_89 = (uint32_t)ltedfapeg__ent_adt_pos((ltedfapeg__ent_adt_t)ivar_12);
            uint8_t ivar_90;
            ivar_12->count++;
            ivar_90 = (uint8_t)ltedfapeg__ent_adt_nt((ltedfapeg__ent_adt_t)ivar_12);
            result = (ordstruct_adt__ordstruct_adt_t)ivar_9->ftbl->mptr(ivar_9, ivar_89, ivar_90, ivar_12);
};
};
};
};

        return result;
}

ltedfapeg_closure_27_t new_ltedfapeg_closure_27(void){
        static struct ltedfapeg_funtype_19_ftbl_s ftbl = {.fptr = (ordstruct_adt__ordstruct_adt_t (*)(ltedfapeg_funtype_19_t, ltedfapeg__ent_adt_t))&f_ltedfapeg_closure_27, .mptr = (ordstruct_adt__ordstruct_adt_t (*)(ltedfapeg_funtype_19_t, ltedfapeg__ent_adt_t))&m_ltedfapeg_closure_27, .rptr =  (void (*)(ltedfapeg_funtype_19_t))&release_ltedfapeg_closure_27, .cptr = (ltedfapeg_funtype_19_t (*)(ltedfapeg_funtype_19_t))&copy_ltedfapeg_closure_27};
        ltedfapeg_closure_27_t tmp = (ltedfapeg_closure_27_t) safe_malloc(sizeof(struct ltedfapeg_closure_27_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_27(ltedfapeg_funtype_19_t closure){
        ltedfapeg_closure_27_t x = (ltedfapeg_closure_27_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg_funtype_25(x->fvar_1);
         release_ltedfapeg_funtype_26(x->fvar_2);
         release_ltedfapeg_funtype_19(x->fvar_3);
         release_ltedfapeg_funtype_19(x->fvar_4);
         release_ltedfapeg_funtype_24(x->fvar_5);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_27_t copy_ltedfapeg_closure_27(ltedfapeg_closure_27_t x){
        ltedfapeg_closure_27_t y = new_ltedfapeg_closure_27();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        y->fvar_3 = x->fvar_3; x->fvar_3->count++;
        y->fvar_4 = x->fvar_4; x->fvar_4->count++;
        y->fvar_5 = x->fvar_5; x->fvar_5->count++;
        if (x->htbl != NULL){
            ltedfapeg_funtype_19_htbl_t new_htbl = (ltedfapeg_funtype_19_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_19_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_19_hashentry_t * new_data = (ltedfapeg_funtype_19_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_19_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_19_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


ltedfapeg__prepeg_adt_t new_ltedfapeg__prepeg_adt(void){
        ltedfapeg__prepeg_adt_t tmp = (ltedfapeg__prepeg_adt_t) safe_malloc(sizeof(struct ltedfapeg__prepeg_adt_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapeg__prepeg_adt(ltedfapeg__prepeg_adt_t x){
switch (x->ltedfapeg__prepeg_adt_index) {
case 2:  release_ltedfapeg__any((ltedfapeg__any_t) x); break;
case 3:  release_ltedfapeg__terminal((ltedfapeg__terminal_t) x); break;
case 4:  release_ltedfapeg__lte((ltedfapeg__lte_t) x); break;
}}

void release_ltedfapeg__prepeg_adt_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg__prepeg_adt((ltedfapeg__prepeg_adt_t)x);
}

ltedfapeg__prepeg_adt_t copy_ltedfapeg__prepeg_adt(ltedfapeg__prepeg_adt_t x){
        ltedfapeg__prepeg_adt_t y = new_ltedfapeg__prepeg_adt();
        y->ltedfapeg__prepeg_adt_index = (uint8_t)x->ltedfapeg__prepeg_adt_index;
        y->count = 1;
        return y;}

bool_t equal_ltedfapeg__prepeg_adt(ltedfapeg__prepeg_adt_t x, ltedfapeg__prepeg_adt_t y){
        bool_t tmp = x->ltedfapeg__prepeg_adt_index == y->ltedfapeg__prepeg_adt_index;
        switch  (x->ltedfapeg__prepeg_adt_index) {
                case 2: tmp = tmp && equal_ltedfapeg__any((ltedfapeg__any_t) x, (ltedfapeg__any_t) y); break;
                case 3: tmp = tmp && equal_ltedfapeg__terminal((ltedfapeg__terminal_t) x, (ltedfapeg__terminal_t) y); break;
                case 4: tmp = tmp && equal_ltedfapeg__lte((ltedfapeg__lte_t) x, (ltedfapeg__lte_t) y); break;
        }
        return tmp;
}

char * json_ltedfapeg__prepeg_adt(ltedfapeg__prepeg_adt_t x){
        char * tmp = safe_malloc(24); sprintf(tmp, "{ \"constructor\" = %u,", x->ltedfapeg__prepeg_adt_index);
        switch  (x->ltedfapeg__prepeg_adt_index) {
                case 2: tmp = safe_strcat(tmp, json_ltedfapeg__any((ltedfapeg__any_t) x)); break;
                case 3: tmp = safe_strcat(tmp, json_ltedfapeg__terminal((ltedfapeg__terminal_t) x)); break;
                case 4: tmp = safe_strcat(tmp, json_ltedfapeg__lte((ltedfapeg__lte_t) x)); break;
        };
        tmp = safe_strcat(tmp, " }");
        return tmp;
}

bool_t equal_ltedfapeg__prepeg_adt_ptr(pointer_t x, pointer_t y, actual_ltedfapeg__prepeg_adt_t T){
        return equal_ltedfapeg__prepeg_adt((ltedfapeg__prepeg_adt_t)x, (ltedfapeg__prepeg_adt_t)y);
}

char * json_ltedfapeg__prepeg_adt_ptr(pointer_t x, actual_ltedfapeg__prepeg_adt_t T){
        return json_ltedfapeg__prepeg_adt((ltedfapeg__prepeg_adt_t)x);
}

actual_ltedfapeg__prepeg_adt_t actual_ltedfapeg__prepeg_adt(){
        actual_ltedfapeg__prepeg_adt_t new = (actual_ltedfapeg__prepeg_adt_t)safe_malloc(sizeof(struct actual_ltedfapeg__prepeg_adt_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg__prepeg_adt_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg__prepeg_adt_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg__prepeg_adt_ptr);
 

 
        return new;
 };

ltedfapeg__prepeg_adt_t update_ltedfapeg__prepeg_adt_ltedfapeg__prepeg_adt_index(ltedfapeg__prepeg_adt_t x, uint8_t v){
        ltedfapeg__prepeg_adt_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg__prepeg_adt(x); x->count--;};
        y->ltedfapeg__prepeg_adt_index = (uint8_t)v;
        return y;}




ltedfapeg__any_t new_ltedfapeg__any(void){
        ltedfapeg__any_t tmp = (ltedfapeg__any_t) safe_malloc(sizeof(struct ltedfapeg__any_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapeg__any(ltedfapeg__any_t x){
        x->count--;
        if (x->count <= 0){
         release_dfa__dfa(x->dfa);
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_ltedfapeg__any_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg__any((ltedfapeg__any_t)x);
}

ltedfapeg__any_t copy_ltedfapeg__any(ltedfapeg__any_t x){
        ltedfapeg__any_t y = new_ltedfapeg__any();
        y->ltedfapeg__prepeg_adt_index = (uint8_t)x->ltedfapeg__prepeg_adt_index;
        y->dfa = x->dfa;
        if (y->dfa != NULL){y->dfa->count++;};
        y->count = 1;
        return y;}

bool_t equal_ltedfapeg__any(ltedfapeg__any_t x, ltedfapeg__any_t y){
        bool_t tmp = true;
        tmp = tmp && x->ltedfapeg__prepeg_adt_index == y->ltedfapeg__prepeg_adt_index;
        tmp = tmp && equal_dfa__dfa(x->dfa, y->dfa);
        return tmp;}

char * json_ltedfapeg__any(ltedfapeg__any_t x){
        char * tmp[2]; 
        char * fld0 = safe_malloc(39);
         sprintf(fld0, "\"ltedfapeg__prepeg_adt_index\" : ");
        tmp[0] = safe_strcat(fld0, json_uint8(x->ltedfapeg__prepeg_adt_index));
        char * fld1 = safe_malloc(15);
         sprintf(fld1, "\"dfa\" : ");
        tmp[1] = safe_strcat(fld1, json_dfa__dfa(x->dfa));
         char * result = json_list_with_sep(tmp, 2,  '{', ',', '}');
         for (uint32_t i = 0; i < 2; i++) free(tmp[i]);
        return result;}

bool_t equal_ltedfapeg__any_ptr(pointer_t x, pointer_t y, actual_ltedfapeg__any_t T){
        return equal_ltedfapeg__any((ltedfapeg__any_t)x, (ltedfapeg__any_t)y);
}

char * json_ltedfapeg__any_ptr(pointer_t x, actual_ltedfapeg__any_t T){
        return json_ltedfapeg__any((ltedfapeg__any_t)x);
}

actual_ltedfapeg__any_t actual_ltedfapeg__any(){
        actual_ltedfapeg__any_t new = (actual_ltedfapeg__any_t)safe_malloc(sizeof(struct actual_ltedfapeg__any_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg__any_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg__any_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg__any_ptr);
 

 
        return new;
 };

ltedfapeg__any_t update_ltedfapeg__any_ltedfapeg__prepeg_adt_index(ltedfapeg__any_t x, uint8_t v){
        ltedfapeg__any_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg__any(x); x->count--;};
        y->ltedfapeg__prepeg_adt_index = (uint8_t)v;
        return y;}

ltedfapeg__any_t update_ltedfapeg__any_dfa(ltedfapeg__any_t x, dfa__dfa_t v){
        ltedfapeg__any_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->dfa != NULL){release_dfa__dfa(x->dfa);};}
        else {y = copy_ltedfapeg__any(x); x->count--; y->dfa->count--;};
        y->dfa = (dfa__dfa_t)v;
        return y;}




ltedfapeg__terminal_t new_ltedfapeg__terminal(void){
        ltedfapeg__terminal_t tmp = (ltedfapeg__terminal_t) safe_malloc(sizeof(struct ltedfapeg__terminal_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapeg__terminal(ltedfapeg__terminal_t x){
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_ltedfapeg__terminal_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg__terminal((ltedfapeg__terminal_t)x);
}

ltedfapeg__terminal_t copy_ltedfapeg__terminal(ltedfapeg__terminal_t x){
        ltedfapeg__terminal_t y = new_ltedfapeg__terminal();
        y->ltedfapeg__prepeg_adt_index = (uint8_t)x->ltedfapeg__prepeg_adt_index;
        y->a = (uint8_t)x->a;
        y->count = 1;
        return y;}

bool_t equal_ltedfapeg__terminal(ltedfapeg__terminal_t x, ltedfapeg__terminal_t y){
        bool_t tmp = true;
        tmp = tmp && x->ltedfapeg__prepeg_adt_index == y->ltedfapeg__prepeg_adt_index;
        tmp = tmp && x->a == y->a;
        return tmp;}

char * json_ltedfapeg__terminal(ltedfapeg__terminal_t x){
        char * tmp[2]; 
        char * fld0 = safe_malloc(39);
         sprintf(fld0, "\"ltedfapeg__prepeg_adt_index\" : ");
        tmp[0] = safe_strcat(fld0, json_uint8(x->ltedfapeg__prepeg_adt_index));
        char * fld1 = safe_malloc(13);
         sprintf(fld1, "\"a\" : ");
        tmp[1] = safe_strcat(fld1, json_uint8(x->a));
         char * result = json_list_with_sep(tmp, 2,  '{', ',', '}');
         for (uint32_t i = 0; i < 2; i++) free(tmp[i]);
        return result;}

bool_t equal_ltedfapeg__terminal_ptr(pointer_t x, pointer_t y, actual_ltedfapeg__terminal_t T){
        return equal_ltedfapeg__terminal((ltedfapeg__terminal_t)x, (ltedfapeg__terminal_t)y);
}

char * json_ltedfapeg__terminal_ptr(pointer_t x, actual_ltedfapeg__terminal_t T){
        return json_ltedfapeg__terminal((ltedfapeg__terminal_t)x);
}

actual_ltedfapeg__terminal_t actual_ltedfapeg__terminal(){
        actual_ltedfapeg__terminal_t new = (actual_ltedfapeg__terminal_t)safe_malloc(sizeof(struct actual_ltedfapeg__terminal_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg__terminal_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg__terminal_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg__terminal_ptr);
 

 
        return new;
 };

ltedfapeg__terminal_t update_ltedfapeg__terminal_ltedfapeg__prepeg_adt_index(ltedfapeg__terminal_t x, uint8_t v){
        ltedfapeg__terminal_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg__terminal(x); x->count--;};
        y->ltedfapeg__prepeg_adt_index = (uint8_t)v;
        return y;}

ltedfapeg__terminal_t update_ltedfapeg__terminal_a(ltedfapeg__terminal_t x, uint8_t v){
        ltedfapeg__terminal_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg__terminal(x); x->count--;};
        y->a = (uint8_t)v;
        return y;}




ltedfapeg__lte_t new_ltedfapeg__lte(void){
        ltedfapeg__lte_t tmp = (ltedfapeg__lte_t) safe_malloc(sizeof(struct ltedfapeg__lte_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapeg__lte(ltedfapeg__lte_t x){
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_ltedfapeg__lte_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg__lte((ltedfapeg__lte_t)x);
}

ltedfapeg__lte_t copy_ltedfapeg__lte(ltedfapeg__lte_t x){
        ltedfapeg__lte_t y = new_ltedfapeg__lte();
        y->ltedfapeg__prepeg_adt_index = (uint8_t)x->ltedfapeg__prepeg_adt_index;
        y->fst = (uint8_t)x->fst;
        y->lthen = (uint8_t)x->lthen;
        y->lelse = (uint8_t)x->lelse;
        y->count = 1;
        return y;}

bool_t equal_ltedfapeg__lte(ltedfapeg__lte_t x, ltedfapeg__lte_t y){
        bool_t tmp = true;
        tmp = tmp && x->ltedfapeg__prepeg_adt_index == y->ltedfapeg__prepeg_adt_index;
        tmp = tmp && x->fst == y->fst;
        tmp = tmp && x->lthen == y->lthen;
        tmp = tmp && x->lelse == y->lelse;
        return tmp;}

char * json_ltedfapeg__lte(ltedfapeg__lte_t x){
        char * tmp[4]; 
        char * fld0 = safe_malloc(39);
         sprintf(fld0, "\"ltedfapeg__prepeg_adt_index\" : ");
        tmp[0] = safe_strcat(fld0, json_uint8(x->ltedfapeg__prepeg_adt_index));
        char * fld1 = safe_malloc(15);
         sprintf(fld1, "\"fst\" : ");
        tmp[1] = safe_strcat(fld1, json_uint8(x->fst));
        char * fld2 = safe_malloc(17);
         sprintf(fld2, "\"lthen\" : ");
        tmp[2] = safe_strcat(fld2, json_uint8(x->lthen));
        char * fld3 = safe_malloc(17);
         sprintf(fld3, "\"lelse\" : ");
        tmp[3] = safe_strcat(fld3, json_uint8(x->lelse));
         char * result = json_list_with_sep(tmp, 4,  '{', ',', '}');
         for (uint32_t i = 0; i < 4; i++) free(tmp[i]);
        return result;}

bool_t equal_ltedfapeg__lte_ptr(pointer_t x, pointer_t y, actual_ltedfapeg__lte_t T){
        return equal_ltedfapeg__lte((ltedfapeg__lte_t)x, (ltedfapeg__lte_t)y);
}

char * json_ltedfapeg__lte_ptr(pointer_t x, actual_ltedfapeg__lte_t T){
        return json_ltedfapeg__lte((ltedfapeg__lte_t)x);
}

actual_ltedfapeg__lte_t actual_ltedfapeg__lte(){
        actual_ltedfapeg__lte_t new = (actual_ltedfapeg__lte_t)safe_malloc(sizeof(struct actual_ltedfapeg__lte_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg__lte_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg__lte_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg__lte_ptr);
 

 
        return new;
 };

ltedfapeg__lte_t update_ltedfapeg__lte_ltedfapeg__prepeg_adt_index(ltedfapeg__lte_t x, uint8_t v){
        ltedfapeg__lte_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg__lte(x); x->count--;};
        y->ltedfapeg__prepeg_adt_index = (uint8_t)v;
        return y;}

ltedfapeg__lte_t update_ltedfapeg__lte_fst(ltedfapeg__lte_t x, uint8_t v){
        ltedfapeg__lte_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg__lte(x); x->count--;};
        y->fst = (uint8_t)v;
        return y;}

ltedfapeg__lte_t update_ltedfapeg__lte_lthen(ltedfapeg__lte_t x, uint8_t v){
        ltedfapeg__lte_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg__lte(x); x->count--;};
        y->lthen = (uint8_t)v;
        return y;}

ltedfapeg__lte_t update_ltedfapeg__lte_lelse(ltedfapeg__lte_t x, uint8_t v){
        ltedfapeg__lte_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg__lte(x); x->count--;};
        y->lelse = (uint8_t)v;
        return y;}



void release_ltedfapeg_funtype_32(ltedfapeg_funtype_32_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_32_t copy_ltedfapeg_funtype_32(ltedfapeg_funtype_32_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_32(ltedfapeg_funtype_32_t x, ltedfapeg_funtype_32_t y){
        return false;}

char* json_ltedfapeg_funtype_32(ltedfapeg_funtype_32_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_32\""); return result;}

void release_ltedfapeg_funtype_33(ltedfapeg_funtype_33_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_33_t copy_ltedfapeg_funtype_33(ltedfapeg_funtype_33_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_33(ltedfapeg_funtype_33_t x, ltedfapeg_funtype_33_t y){
        return false;}

char* json_ltedfapeg_funtype_33(ltedfapeg_funtype_33_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_33\""); return result;}

void release_ltedfapeg_funtype_34(ltedfapeg_funtype_34_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_34_t copy_ltedfapeg_funtype_34(ltedfapeg_funtype_34_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_34(ltedfapeg_funtype_34_t x, ltedfapeg_funtype_34_t y){
        return false;}

char* json_ltedfapeg_funtype_34(ltedfapeg_funtype_34_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_34\""); return result;}

void release_ltedfapeg_funtype_35(ltedfapeg_funtype_35_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_35_t copy_ltedfapeg_funtype_35(ltedfapeg_funtype_35_t x){return x->ftbl->cptr(x);}

uint32_t lookup_ltedfapeg_funtype_35(ltedfapeg_funtype_35_htbl_t htbl, uint8_t i, uint32_t ihash){
        uint32_t mask = htbl->size - 1;
        uint32_t hashindex = ihash & mask;
        ltedfapeg_funtype_35_hashentry_t data = htbl->data[hashindex];
        bool_t keyzero;

        keyzero = (data.key == 0);
        bool_t keymatch;
        keymatch = (data.key == i);
        while ((!keyzero || data.keyhash != 0) &&
                 (data.keyhash != ihash || !keymatch)){
                hashindex++;
                hashindex = hashindex & mask;
                data = htbl->data[hashindex];

                keyzero = (data.key == 0);

                keymatch = (data.key == i);
                }
        return hashindex;
        }

ltedfapeg_funtype_35_t dupdate_ltedfapeg_funtype_35(ltedfapeg_funtype_35_t a, uint8_t i, mpz_ptr_t v){
        ltedfapeg_funtype_35_htbl_t htbl = a->htbl;
        if (htbl == NULL){//construct new htbl
                htbl = (ltedfapeg_funtype_35_htbl_t)safe_malloc(sizeof(struct ltedfapeg_funtype_35_htbl_s));
                htbl->size = HTBL_DEFAULT_SIZE; htbl->num_entries = 0;
                htbl->data = (ltedfapeg_funtype_35_hashentry_t *)safe_malloc(HTBL_DEFAULT_SIZE * sizeof(struct ltedfapeg_funtype_35_hashentry_s));
                for (uint32_t j = 0; j < HTBL_DEFAULT_SIZE; j++){htbl->data[j].key = (uint8_t)0; htbl->data[j].keyhash = 0;
                }
                a->htbl = htbl;
        }
        uint32_t size = htbl->size;
        uint32_t num_entries = htbl->num_entries;
        ltedfapeg_funtype_35_hashentry_t * data = htbl->data;
        if (num_entries/3 >  size/5){//resize data
                uint32_t new_size = 2*size; uint32_t new_mask = new_size - 1;
                if (size >= HTBL_MAX_SIZE) out_of_memory();
                ltedfapeg_funtype_35_hashentry_t * new_data = (ltedfapeg_funtype_35_hashentry_t *)safe_malloc(new_size * sizeof(struct ltedfapeg_funtype_35_hashentry_s));
                for (uint32_t j = 0; j < new_size; j++){
                        new_data[j].key = 0;
                        new_data[j].keyhash = 0;}
                for (uint32_t j = 0; j < size; j++){//transfer entries
                        uint32_t keyhash = data[j].keyhash;
                        bool_t keyzero;
                        keyzero = (data[j].key == 0);
                        if (!keyzero || keyhash != 0){
                                uint32_t new_loc = keyhash ^ new_mask;
                                keyzero = (new_data[new_loc].key == 0);
                                while (keyzero && new_data[new_loc].keyhash == 0){
                                        new_loc++;
                                        new_loc = new_loc ^ new_mask;

                                        keyzero = (new_data[new_loc].key == 0);
                                }
                                new_data[new_loc].key = (uint8_t)data[j].key;
                                new_data[new_loc].keyhash = keyhash;
                                mpz_set(new_data[new_loc].value, data[j].value);
                                }}
                htbl->size = new_size;
                htbl->num_entries = num_entries;
                htbl->data = new_data;
                safe_free(data);}
        uint32_t ihash = uint32_hash(i);
        uint32_t hashindex = lookup_ltedfapeg_funtype_35(htbl, i, ihash);
        ltedfapeg_funtype_35_hashentry_t hentry = htbl->data[hashindex];
        uint32_t hkeyhash = hentry.keyhash;
        bool_t hentrykeyzero;
        hentrykeyzero = (hentry.key == 0);

        if (hentrykeyzero && (hkeyhash == 0))
                {htbl->data[hashindex].key = (uint8_t)i; htbl->data[hashindex].keyhash = ihash; mpz_set(htbl->data[hashindex].value, v); htbl->num_entries++;}
            else {mpz_ptr_t tempvalue;mpz_mk_set(tempvalue, htbl->data[hashindex].value);mpz_set(htbl->data[hashindex].value, v);};
        return a;

}

ltedfapeg_funtype_35_t update_ltedfapeg_funtype_35(ltedfapeg_funtype_35_t a, uint8_t i, mpz_ptr_t v){
        if (a->count == 1){
                return dupdate_ltedfapeg_funtype_35(a, i, v);
            } else {
                ltedfapeg_funtype_35_t x = copy_ltedfapeg_funtype_35(a);
                a->count--;
                return dupdate_ltedfapeg_funtype_35(x, i, v);
            }}

bool_t equal_ltedfapeg_funtype_35(ltedfapeg_funtype_35_t x, ltedfapeg_funtype_35_t y){
        return false;}

char* json_ltedfapeg_funtype_35(ltedfapeg_funtype_35_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_35\""); return result;}


ltedfapeg_record_36_t new_ltedfapeg_record_36(void){
        ltedfapeg_record_36_t tmp = (ltedfapeg_record_36_t) safe_malloc(sizeof(struct ltedfapeg_record_36_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapeg_record_36(ltedfapeg_record_36_t x){
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_ltedfapeg_record_36_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg_record_36((ltedfapeg_record_36_t)x);
}

ltedfapeg_record_36_t copy_ltedfapeg_record_36(ltedfapeg_record_36_t x){
        ltedfapeg_record_36_t y = new_ltedfapeg_record_36();
        y->project_1 = (uint8_t)x->project_1;
        y->project_2 = (uint8_t)x->project_2;
        y->project_3 = (uint8_t)x->project_3;
        y->count = 1;
        return y;}

bool_t equal_ltedfapeg_record_36(ltedfapeg_record_36_t x, ltedfapeg_record_36_t y){
        bool_t tmp = true;
        tmp = tmp && x->project_1 == y->project_1;
        tmp = tmp && x->project_2 == y->project_2;
        tmp = tmp && x->project_3 == y->project_3;
        return tmp;}

char * json_ltedfapeg_record_36(ltedfapeg_record_36_t x){
        char * tmp[3]; 
        char * fld0 = safe_malloc(21);
         sprintf(fld0, "\"project_1\" : ");
        tmp[0] = safe_strcat(fld0, json_uint8(x->project_1));
        char * fld1 = safe_malloc(21);
         sprintf(fld1, "\"project_2\" : ");
        tmp[1] = safe_strcat(fld1, json_uint8(x->project_2));
        char * fld2 = safe_malloc(21);
         sprintf(fld2, "\"project_3\" : ");
        tmp[2] = safe_strcat(fld2, json_uint8(x->project_3));
         char * result = json_list_with_sep(tmp, 3,  '{', ',', '}');
         for (uint32_t i = 0; i < 3; i++) free(tmp[i]);
        return result;}

bool_t equal_ltedfapeg_record_36_ptr(pointer_t x, pointer_t y, actual_ltedfapeg_record_36_t T){
        return equal_ltedfapeg_record_36((ltedfapeg_record_36_t)x, (ltedfapeg_record_36_t)y);
}

char * json_ltedfapeg_record_36_ptr(pointer_t x, actual_ltedfapeg_record_36_t T){
        return json_ltedfapeg_record_36((ltedfapeg_record_36_t)x);
}

actual_ltedfapeg_record_36_t actual_ltedfapeg_record_36(){
        actual_ltedfapeg_record_36_t new = (actual_ltedfapeg_record_36_t)safe_malloc(sizeof(struct actual_ltedfapeg_record_36_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg_record_36_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg_record_36_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg_record_36_ptr);
 

 
        return new;
 };

ltedfapeg_record_36_t update_ltedfapeg_record_36_project_1(ltedfapeg_record_36_t x, uint8_t v){
        ltedfapeg_record_36_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_36(x); x->count--;};
        y->project_1 = (uint8_t)v;
        return y;}

ltedfapeg_record_36_t update_ltedfapeg_record_36_project_2(ltedfapeg_record_36_t x, uint8_t v){
        ltedfapeg_record_36_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_36(x); x->count--;};
        y->project_2 = (uint8_t)v;
        return y;}

ltedfapeg_record_36_t update_ltedfapeg_record_36_project_3(ltedfapeg_record_36_t x, uint8_t v){
        ltedfapeg_record_36_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_36(x); x->count--;};
        y->project_3 = (uint8_t)v;
        return y;}



void release_ltedfapeg_funtype_37(ltedfapeg_funtype_37_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_37_t copy_ltedfapeg_funtype_37(ltedfapeg_funtype_37_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_37(ltedfapeg_funtype_37_t x, ltedfapeg_funtype_37_t y){
        return false;}

char* json_ltedfapeg_funtype_37(ltedfapeg_funtype_37_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_37\""); return result;}


mpz_ptr_t f_ltedfapeg_closure_38(struct ltedfapeg_closure_38_s * closure, ltedfapeg__prepeg_adt_t bvar){
        mpz_ptr_t result = h_ltedfapeg_closure_38(bvar, closure->fvar_1, closure->fvar_2, closure->fvar_3, closure->fvar_4, closure->fvar_5); 
        return result;}

mpz_ptr_t m_ltedfapeg_closure_38(struct ltedfapeg_closure_38_s * closure, ltedfapeg__prepeg_adt_t bvar){
        return h_ltedfapeg_closure_38(bvar, closure->fvar_1, closure->fvar_2, closure->fvar_3, closure->fvar_4, closure->fvar_5);}

extern mpz_ptr_t h_ltedfapeg_closure_38(ltedfapeg__prepeg_adt_t ivar_10, ltedfapeg_funtype_35_t ivar_5, ltedfapeg_funtype_37_t ivar_7, ltedfapeg_funtype_34_t ivar_3, mpz_ptr_t ivar_2, mpz_ptr_t ivar_1){
        mpz_ptr_t result;
        bool_t ivar_31;
        ivar_10->count++;
        ivar_31 = (bool_t)r_ltedfapeg__epsilonp((ltedfapeg__prepeg_adt_t)ivar_10);
        if (ivar_31){ 
             release_ltedfapeg__prepeg_adt(ivar_10);
             //copying to mpz from mpz;
             mpz_mk_set(result, ivar_1);
} else {
        
             bool_t ivar_35;
             ivar_10->count++;
             ivar_35 = (bool_t)r_ltedfapeg__failurep((ltedfapeg__prepeg_adt_t)ivar_10);
             if (ivar_35){  
           release_ltedfapeg__prepeg_adt(ivar_10);
           //copying to mpz from mpz;
           mpz_mk_set(result, ivar_2);
} else {
             
           bool_t ivar_48;
           ivar_10->count++;
           ivar_48 = (bool_t)r_ltedfapeg__anyp((ltedfapeg__prepeg_adt_t)ivar_10);
           if (ivar_48){   
           dfa__dfa_t ivar_39;
           ivar_39 = (dfa__dfa_t)ltedfapeg__prepeg_adt_dfa((ltedfapeg__prepeg_adt_t)ivar_10);
           mpz_mk_set(result, ivar_3->ftbl->fptr(ivar_3, ivar_39));
} else {
           
           bool_t ivar_61;
           ivar_10->count++;
           ivar_61 = (bool_t)r_ltedfapeg__terminalp((ltedfapeg__prepeg_adt_t)ivar_10);
           if (ivar_61){    
            uint8_t ivar_52;
            ivar_52 = (uint8_t)ltedfapeg__prepeg_adt_a((ltedfapeg__prepeg_adt_t)ivar_10);
            mpz_mk_set(result, ivar_5->ftbl->fptr(ivar_5, ivar_52));
} else {
           
            uint8_t ivar_65;
            ivar_10->count++;
            ivar_65 = (uint8_t)ltedfapeg__prepeg_adt_fst((ltedfapeg__prepeg_adt_t)ivar_10);
            uint8_t ivar_66;
            ivar_10->count++;
            ivar_66 = (uint8_t)ltedfapeg__prepeg_adt_lthen((ltedfapeg__prepeg_adt_t)ivar_10);
            uint8_t ivar_67;
            ivar_67 = (uint8_t)ltedfapeg__prepeg_adt_lelse((ltedfapeg__prepeg_adt_t)ivar_10);
            mpz_mk_set(result, ivar_7->ftbl->mptr(ivar_7, ivar_65, ivar_66, ivar_67));
};
};
};
};

        return result;
}

ltedfapeg_closure_38_t new_ltedfapeg_closure_38(void){
        static struct ltedfapeg_funtype_33_ftbl_s ftbl = {.fptr = (mpz_ptr_t (*)(ltedfapeg_funtype_33_t, ltedfapeg__prepeg_adt_t))&f_ltedfapeg_closure_38, .mptr = (mpz_ptr_t (*)(ltedfapeg_funtype_33_t, ltedfapeg__prepeg_adt_t))&m_ltedfapeg_closure_38, .rptr =  (void (*)(ltedfapeg_funtype_33_t))&release_ltedfapeg_closure_38, .cptr = (ltedfapeg_funtype_33_t (*)(ltedfapeg_funtype_33_t))&copy_ltedfapeg_closure_38};
        ltedfapeg_closure_38_t tmp = (ltedfapeg_closure_38_t) safe_malloc(sizeof(struct ltedfapeg_closure_38_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        mpz_init(tmp->fvar_4);
        mpz_init(tmp->fvar_5);
        return tmp;}

void release_ltedfapeg_closure_38(ltedfapeg_funtype_33_t closure){
        ltedfapeg_closure_38_t x = (ltedfapeg_closure_38_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg_funtype_35(x->fvar_1);
         release_ltedfapeg_funtype_37(x->fvar_2);
         release_ltedfapeg_funtype_34(x->fvar_3);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_38_t copy_ltedfapeg_closure_38(ltedfapeg_closure_38_t x){
        ltedfapeg_closure_38_t y = new_ltedfapeg_closure_38();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        y->fvar_3 = x->fvar_3; x->fvar_3->count++;
        mpz_set(y->fvar_4, x->fvar_4);
        mpz_set(y->fvar_5, x->fvar_5);
        if (x->htbl != NULL){
            ltedfapeg_funtype_33_htbl_t new_htbl = (ltedfapeg_funtype_33_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_33_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_33_hashentry_t * new_data = (ltedfapeg_funtype_33_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_33_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_33_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


ltedfapeg_record_39_t new_ltedfapeg_record_39(void){
        ltedfapeg_record_39_t tmp = (ltedfapeg_record_39_t) safe_malloc(sizeof(struct ltedfapeg_record_39_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapeg_record_39(ltedfapeg_record_39_t x){
        x->count--;
        if (x->count <= 0){
         release_dfa__dfa(x->project_1);
         release_ltedfapeg__prepeg_adt(x->project_2);
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_ltedfapeg_record_39_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg_record_39((ltedfapeg_record_39_t)x);
}

ltedfapeg_record_39_t copy_ltedfapeg_record_39(ltedfapeg_record_39_t x){
        ltedfapeg_record_39_t y = new_ltedfapeg_record_39();
        y->project_1 = x->project_1;
        if (y->project_1 != NULL){y->project_1->count++;};
        y->project_2 = x->project_2;
        if (y->project_2 != NULL){y->project_2->count++;};
        y->count = 1;
        return y;}

bool_t equal_ltedfapeg_record_39(ltedfapeg_record_39_t x, ltedfapeg_record_39_t y){
        bool_t tmp = true;
        tmp = tmp && equal_dfa__dfa(x->project_1, y->project_1);
        tmp = tmp && equal_ltedfapeg__prepeg_adt(x->project_2, y->project_2);
        return tmp;}

char * json_ltedfapeg_record_39(ltedfapeg_record_39_t x){
        char * tmp[2]; 
        char * fld0 = safe_malloc(21);
         sprintf(fld0, "\"project_1\" : ");
        tmp[0] = safe_strcat(fld0, json_dfa__dfa(x->project_1));
        char * fld1 = safe_malloc(21);
         sprintf(fld1, "\"project_2\" : ");
        tmp[1] = safe_strcat(fld1, json_ltedfapeg__prepeg_adt(x->project_2));
         char * result = json_list_with_sep(tmp, 2,  '{', ',', '}');
         for (uint32_t i = 0; i < 2; i++) free(tmp[i]);
        return result;}

bool_t equal_ltedfapeg_record_39_ptr(pointer_t x, pointer_t y, actual_ltedfapeg_record_39_t T){
        return equal_ltedfapeg_record_39((ltedfapeg_record_39_t)x, (ltedfapeg_record_39_t)y);
}

char * json_ltedfapeg_record_39_ptr(pointer_t x, actual_ltedfapeg_record_39_t T){
        return json_ltedfapeg_record_39((ltedfapeg_record_39_t)x);
}

actual_ltedfapeg_record_39_t actual_ltedfapeg_record_39(){
        actual_ltedfapeg_record_39_t new = (actual_ltedfapeg_record_39_t)safe_malloc(sizeof(struct actual_ltedfapeg_record_39_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg_record_39_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg_record_39_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg_record_39_ptr);
 

 
        return new;
 };

ltedfapeg_record_39_t update_ltedfapeg_record_39_project_1(ltedfapeg_record_39_t x, dfa__dfa_t v){
        ltedfapeg_record_39_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->project_1 != NULL){release_dfa__dfa(x->project_1);};}
        else {y = copy_ltedfapeg_record_39(x); x->count--; y->project_1->count--;};
        y->project_1 = (dfa__dfa_t)v;
        return y;}

ltedfapeg_record_39_t update_ltedfapeg_record_39_project_2(ltedfapeg_record_39_t x, ltedfapeg__prepeg_adt_t v){
        ltedfapeg_record_39_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->project_2 != NULL){release_ltedfapeg__prepeg_adt(x->project_2);};}
        else {y = copy_ltedfapeg_record_39(x); x->count--; y->project_2->count--;};
        y->project_2 = (ltedfapeg__prepeg_adt_t)v;
        return y;}



void release_ltedfapeg_funtype_40(ltedfapeg_funtype_40_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_40_t copy_ltedfapeg_funtype_40(ltedfapeg_funtype_40_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_40(ltedfapeg_funtype_40_t x, ltedfapeg_funtype_40_t y){
        return false;}

char* json_ltedfapeg_funtype_40(ltedfapeg_funtype_40_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_40\""); return result;}


ltedfapeg_record_41_t new_ltedfapeg_record_41(void){
        ltedfapeg_record_41_t tmp = (ltedfapeg_record_41_t) safe_malloc(sizeof(struct ltedfapeg_record_41_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapeg_record_41(ltedfapeg_record_41_t x){
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg__prepeg_adt(x->project_2);
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_ltedfapeg_record_41_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg_record_41((ltedfapeg_record_41_t)x);
}

ltedfapeg_record_41_t copy_ltedfapeg_record_41(ltedfapeg_record_41_t x){
        ltedfapeg_record_41_t y = new_ltedfapeg_record_41();
        y->project_1 = (uint8_t)x->project_1;
        y->project_2 = x->project_2;
        if (y->project_2 != NULL){y->project_2->count++;};
        y->count = 1;
        return y;}

bool_t equal_ltedfapeg_record_41(ltedfapeg_record_41_t x, ltedfapeg_record_41_t y){
        bool_t tmp = true;
        tmp = tmp && x->project_1 == y->project_1;
        tmp = tmp && equal_ltedfapeg__prepeg_adt(x->project_2, y->project_2);
        return tmp;}

char * json_ltedfapeg_record_41(ltedfapeg_record_41_t x){
        char * tmp[2]; 
        char * fld0 = safe_malloc(21);
         sprintf(fld0, "\"project_1\" : ");
        tmp[0] = safe_strcat(fld0, json_uint8(x->project_1));
        char * fld1 = safe_malloc(21);
         sprintf(fld1, "\"project_2\" : ");
        tmp[1] = safe_strcat(fld1, json_ltedfapeg__prepeg_adt(x->project_2));
         char * result = json_list_with_sep(tmp, 2,  '{', ',', '}');
         for (uint32_t i = 0; i < 2; i++) free(tmp[i]);
        return result;}

bool_t equal_ltedfapeg_record_41_ptr(pointer_t x, pointer_t y, actual_ltedfapeg_record_41_t T){
        return equal_ltedfapeg_record_41((ltedfapeg_record_41_t)x, (ltedfapeg_record_41_t)y);
}

char * json_ltedfapeg_record_41_ptr(pointer_t x, actual_ltedfapeg_record_41_t T){
        return json_ltedfapeg_record_41((ltedfapeg_record_41_t)x);
}

actual_ltedfapeg_record_41_t actual_ltedfapeg_record_41(){
        actual_ltedfapeg_record_41_t new = (actual_ltedfapeg_record_41_t)safe_malloc(sizeof(struct actual_ltedfapeg_record_41_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg_record_41_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg_record_41_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg_record_41_ptr);
 

 
        return new;
 };

ltedfapeg_record_41_t update_ltedfapeg_record_41_project_1(ltedfapeg_record_41_t x, uint8_t v){
        ltedfapeg_record_41_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_41(x); x->count--;};
        y->project_1 = (uint8_t)v;
        return y;}

ltedfapeg_record_41_t update_ltedfapeg_record_41_project_2(ltedfapeg_record_41_t x, ltedfapeg__prepeg_adt_t v){
        ltedfapeg_record_41_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->project_2 != NULL){release_ltedfapeg__prepeg_adt(x->project_2);};}
        else {y = copy_ltedfapeg_record_41(x); x->count--; y->project_2->count--;};
        y->project_2 = (ltedfapeg__prepeg_adt_t)v;
        return y;}



void release_ltedfapeg_funtype_42(ltedfapeg_funtype_42_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_42_t copy_ltedfapeg_funtype_42(ltedfapeg_funtype_42_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_42(ltedfapeg_funtype_42_t x, ltedfapeg_funtype_42_t y){
        return false;}

char* json_ltedfapeg_funtype_42(ltedfapeg_funtype_42_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_42\""); return result;}


ltedfapeg_record_43_t new_ltedfapeg_record_43(void){
        ltedfapeg_record_43_t tmp = (ltedfapeg_record_43_t) safe_malloc(sizeof(struct ltedfapeg_record_43_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapeg_record_43(ltedfapeg_record_43_t x){
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg__prepeg_adt(x->project_4);
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_ltedfapeg_record_43_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg_record_43((ltedfapeg_record_43_t)x);
}

ltedfapeg_record_43_t copy_ltedfapeg_record_43(ltedfapeg_record_43_t x){
        ltedfapeg_record_43_t y = new_ltedfapeg_record_43();
        y->project_1 = (uint8_t)x->project_1;
        y->project_2 = (uint8_t)x->project_2;
        y->project_3 = (uint8_t)x->project_3;
        y->project_4 = x->project_4;
        if (y->project_4 != NULL){y->project_4->count++;};
        y->count = 1;
        return y;}

bool_t equal_ltedfapeg_record_43(ltedfapeg_record_43_t x, ltedfapeg_record_43_t y){
        bool_t tmp = true;
        tmp = tmp && x->project_1 == y->project_1;
        tmp = tmp && x->project_2 == y->project_2;
        tmp = tmp && x->project_3 == y->project_3;
        tmp = tmp && equal_ltedfapeg__prepeg_adt(x->project_4, y->project_4);
        return tmp;}

char * json_ltedfapeg_record_43(ltedfapeg_record_43_t x){
        char * tmp[4]; 
        char * fld0 = safe_malloc(21);
         sprintf(fld0, "\"project_1\" : ");
        tmp[0] = safe_strcat(fld0, json_uint8(x->project_1));
        char * fld1 = safe_malloc(21);
         sprintf(fld1, "\"project_2\" : ");
        tmp[1] = safe_strcat(fld1, json_uint8(x->project_2));
        char * fld2 = safe_malloc(21);
         sprintf(fld2, "\"project_3\" : ");
        tmp[2] = safe_strcat(fld2, json_uint8(x->project_3));
        char * fld3 = safe_malloc(21);
         sprintf(fld3, "\"project_4\" : ");
        tmp[3] = safe_strcat(fld3, json_ltedfapeg__prepeg_adt(x->project_4));
         char * result = json_list_with_sep(tmp, 4,  '{', ',', '}');
         for (uint32_t i = 0; i < 4; i++) free(tmp[i]);
        return result;}

bool_t equal_ltedfapeg_record_43_ptr(pointer_t x, pointer_t y, actual_ltedfapeg_record_43_t T){
        return equal_ltedfapeg_record_43((ltedfapeg_record_43_t)x, (ltedfapeg_record_43_t)y);
}

char * json_ltedfapeg_record_43_ptr(pointer_t x, actual_ltedfapeg_record_43_t T){
        return json_ltedfapeg_record_43((ltedfapeg_record_43_t)x);
}

actual_ltedfapeg_record_43_t actual_ltedfapeg_record_43(){
        actual_ltedfapeg_record_43_t new = (actual_ltedfapeg_record_43_t)safe_malloc(sizeof(struct actual_ltedfapeg_record_43_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg_record_43_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg_record_43_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg_record_43_ptr);
 

 
        return new;
 };

ltedfapeg_record_43_t update_ltedfapeg_record_43_project_1(ltedfapeg_record_43_t x, uint8_t v){
        ltedfapeg_record_43_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_43(x); x->count--;};
        y->project_1 = (uint8_t)v;
        return y;}

ltedfapeg_record_43_t update_ltedfapeg_record_43_project_2(ltedfapeg_record_43_t x, uint8_t v){
        ltedfapeg_record_43_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_43(x); x->count--;};
        y->project_2 = (uint8_t)v;
        return y;}

ltedfapeg_record_43_t update_ltedfapeg_record_43_project_3(ltedfapeg_record_43_t x, uint8_t v){
        ltedfapeg_record_43_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_43(x); x->count--;};
        y->project_3 = (uint8_t)v;
        return y;}

ltedfapeg_record_43_t update_ltedfapeg_record_43_project_4(ltedfapeg_record_43_t x, ltedfapeg__prepeg_adt_t v){
        ltedfapeg_record_43_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->project_4 != NULL){release_ltedfapeg__prepeg_adt(x->project_4);};}
        else {y = copy_ltedfapeg_record_43(x); x->count--; y->project_4->count--;};
        y->project_4 = (ltedfapeg__prepeg_adt_t)v;
        return y;}



void release_ltedfapeg_funtype_44(ltedfapeg_funtype_44_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_44_t copy_ltedfapeg_funtype_44(ltedfapeg_funtype_44_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_44(ltedfapeg_funtype_44_t x, ltedfapeg_funtype_44_t y){
        return false;}

char* json_ltedfapeg_funtype_44(ltedfapeg_funtype_44_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_44\""); return result;}


mpz_ptr_t f_ltedfapeg_closure_45(struct ltedfapeg_closure_45_s * closure, ltedfapeg__prepeg_adt_t bvar){
        mpz_ptr_t result = h_ltedfapeg_closure_45(bvar, closure->fvar_1, closure->fvar_2, closure->fvar_3, closure->fvar_4, closure->fvar_5); 
        return result;}

mpz_ptr_t m_ltedfapeg_closure_45(struct ltedfapeg_closure_45_s * closure, ltedfapeg__prepeg_adt_t bvar){
        return h_ltedfapeg_closure_45(bvar, closure->fvar_1, closure->fvar_2, closure->fvar_3, closure->fvar_4, closure->fvar_5);}

extern mpz_ptr_t h_ltedfapeg_closure_45(ltedfapeg__prepeg_adt_t ivar_12, ltedfapeg_funtype_42_t ivar_7, ltedfapeg_funtype_44_t ivar_9, ltedfapeg_funtype_40_t ivar_5, ltedfapeg_funtype_33_t ivar_3, ltedfapeg_funtype_33_t ivar_1){
        mpz_ptr_t result;
        bool_t ivar_40;
        ivar_12->count++;
        ivar_40 = (bool_t)r_ltedfapeg__epsilonp((ltedfapeg__prepeg_adt_t)ivar_12);
        if (ivar_40){ 
             mpz_mk_set(result, ivar_1->ftbl->fptr(ivar_1, ivar_12));
} else {
        
             bool_t ivar_49;
             ivar_12->count++;
             ivar_49 = (bool_t)r_ltedfapeg__failurep((ltedfapeg__prepeg_adt_t)ivar_12);
             if (ivar_49){  
           mpz_mk_set(result, ivar_3->ftbl->fptr(ivar_3, ivar_12));
} else {
             
           bool_t ivar_64;
           ivar_12->count++;
           ivar_64 = (bool_t)r_ltedfapeg__anyp((ltedfapeg__prepeg_adt_t)ivar_12);
           if (ivar_64){   
           dfa__dfa_t ivar_53;
           ivar_12->count++;
           ivar_53 = (dfa__dfa_t)ltedfapeg__prepeg_adt_dfa((ltedfapeg__prepeg_adt_t)ivar_12);
           mpz_mk_set(result, ivar_5->ftbl->mptr(ivar_5, ivar_53, ivar_12));
} else {
           
           bool_t ivar_79;
           ivar_12->count++;
           ivar_79 = (bool_t)r_ltedfapeg__terminalp((ltedfapeg__prepeg_adt_t)ivar_12);
           if (ivar_79){    
            uint8_t ivar_68;
            ivar_12->count++;
            ivar_68 = (uint8_t)ltedfapeg__prepeg_adt_a((ltedfapeg__prepeg_adt_t)ivar_12);
            mpz_mk_set(result, ivar_7->ftbl->mptr(ivar_7, ivar_68, ivar_12));
} else {
           
            uint8_t ivar_83;
            ivar_12->count++;
            ivar_83 = (uint8_t)ltedfapeg__prepeg_adt_fst((ltedfapeg__prepeg_adt_t)ivar_12);
            uint8_t ivar_84;
            ivar_12->count++;
            ivar_84 = (uint8_t)ltedfapeg__prepeg_adt_lthen((ltedfapeg__prepeg_adt_t)ivar_12);
            uint8_t ivar_85;
            ivar_12->count++;
            ivar_85 = (uint8_t)ltedfapeg__prepeg_adt_lelse((ltedfapeg__prepeg_adt_t)ivar_12);
            mpz_mk_set(result, ivar_9->ftbl->mptr(ivar_9, ivar_83, ivar_84, ivar_85, ivar_12));
};
};
};
};

        return result;
}

ltedfapeg_closure_45_t new_ltedfapeg_closure_45(void){
        static struct ltedfapeg_funtype_33_ftbl_s ftbl = {.fptr = (mpz_ptr_t (*)(ltedfapeg_funtype_33_t, ltedfapeg__prepeg_adt_t))&f_ltedfapeg_closure_45, .mptr = (mpz_ptr_t (*)(ltedfapeg_funtype_33_t, ltedfapeg__prepeg_adt_t))&m_ltedfapeg_closure_45, .rptr =  (void (*)(ltedfapeg_funtype_33_t))&release_ltedfapeg_closure_45, .cptr = (ltedfapeg_funtype_33_t (*)(ltedfapeg_funtype_33_t))&copy_ltedfapeg_closure_45};
        ltedfapeg_closure_45_t tmp = (ltedfapeg_closure_45_t) safe_malloc(sizeof(struct ltedfapeg_closure_45_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_45(ltedfapeg_funtype_33_t closure){
        ltedfapeg_closure_45_t x = (ltedfapeg_closure_45_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg_funtype_42(x->fvar_1);
         release_ltedfapeg_funtype_44(x->fvar_2);
         release_ltedfapeg_funtype_40(x->fvar_3);
         release_ltedfapeg_funtype_33(x->fvar_4);
         release_ltedfapeg_funtype_33(x->fvar_5);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_45_t copy_ltedfapeg_closure_45(ltedfapeg_closure_45_t x){
        ltedfapeg_closure_45_t y = new_ltedfapeg_closure_45();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        y->fvar_3 = x->fvar_3; x->fvar_3->count++;
        y->fvar_4 = x->fvar_4; x->fvar_4->count++;
        y->fvar_5 = x->fvar_5; x->fvar_5->count++;
        if (x->htbl != NULL){
            ltedfapeg_funtype_33_htbl_t new_htbl = (ltedfapeg_funtype_33_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_33_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_33_hashentry_t * new_data = (ltedfapeg_funtype_33_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_33_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_33_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}

void release_ltedfapeg_funtype_46(ltedfapeg_funtype_46_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_46_t copy_ltedfapeg_funtype_46(ltedfapeg_funtype_46_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_46(ltedfapeg_funtype_46_t x, ltedfapeg_funtype_46_t y){
        return false;}

char* json_ltedfapeg_funtype_46(ltedfapeg_funtype_46_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_46\""); return result;}

void release_ltedfapeg_funtype_47(ltedfapeg_funtype_47_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_47_t copy_ltedfapeg_funtype_47(ltedfapeg_funtype_47_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_47(ltedfapeg_funtype_47_t x, ltedfapeg_funtype_47_t y){
        return false;}

char* json_ltedfapeg_funtype_47(ltedfapeg_funtype_47_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_47\""); return result;}

void release_ltedfapeg_funtype_48(ltedfapeg_funtype_48_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_48_t copy_ltedfapeg_funtype_48(ltedfapeg_funtype_48_t x){return x->ftbl->cptr(x);}

uint32_t lookup_ltedfapeg_funtype_48(ltedfapeg_funtype_48_htbl_t htbl, uint8_t i, uint32_t ihash){
        uint32_t mask = htbl->size - 1;
        uint32_t hashindex = ihash & mask;
        ltedfapeg_funtype_48_hashentry_t data = htbl->data[hashindex];
        bool_t keyzero;

        keyzero = (data.key == 0);
        bool_t keymatch;
        keymatch = (data.key == i);
        while ((!keyzero || data.keyhash != 0) &&
                 (data.keyhash != ihash || !keymatch)){
                hashindex++;
                hashindex = hashindex & mask;
                data = htbl->data[hashindex];

                keyzero = (data.key == 0);

                keymatch = (data.key == i);
                }
        return hashindex;
        }

ltedfapeg_funtype_48_t dupdate_ltedfapeg_funtype_48(ltedfapeg_funtype_48_t a, uint8_t i, ordstruct_adt__ordstruct_adt_t v){
        ltedfapeg_funtype_48_htbl_t htbl = a->htbl;
        if (htbl == NULL){//construct new htbl
                htbl = (ltedfapeg_funtype_48_htbl_t)safe_malloc(sizeof(struct ltedfapeg_funtype_48_htbl_s));
                htbl->size = HTBL_DEFAULT_SIZE; htbl->num_entries = 0;
                htbl->data = (ltedfapeg_funtype_48_hashentry_t *)safe_malloc(HTBL_DEFAULT_SIZE * sizeof(struct ltedfapeg_funtype_48_hashentry_s));
                for (uint32_t j = 0; j < HTBL_DEFAULT_SIZE; j++){htbl->data[j].key = (uint8_t)0; htbl->data[j].keyhash = 0;
                }
                a->htbl = htbl;
        }
        uint32_t size = htbl->size;
        uint32_t num_entries = htbl->num_entries;
        ltedfapeg_funtype_48_hashentry_t * data = htbl->data;
        if (num_entries/3 >  size/5){//resize data
                uint32_t new_size = 2*size; uint32_t new_mask = new_size - 1;
                if (size >= HTBL_MAX_SIZE) out_of_memory();
                ltedfapeg_funtype_48_hashentry_t * new_data = (ltedfapeg_funtype_48_hashentry_t *)safe_malloc(new_size * sizeof(struct ltedfapeg_funtype_48_hashentry_s));
                for (uint32_t j = 0; j < new_size; j++){
                        new_data[j].key = 0;
                        new_data[j].keyhash = 0;}
                for (uint32_t j = 0; j < size; j++){//transfer entries
                        uint32_t keyhash = data[j].keyhash;
                        bool_t keyzero;
                        keyzero = (data[j].key == 0);
                        if (!keyzero || keyhash != 0){
                                uint32_t new_loc = keyhash ^ new_mask;
                                keyzero = (new_data[new_loc].key == 0);
                                while (keyzero && new_data[new_loc].keyhash == 0){
                                        new_loc++;
                                        new_loc = new_loc ^ new_mask;

                                        keyzero = (new_data[new_loc].key == 0);
                                }
                                new_data[new_loc].key = (uint8_t)data[j].key;
                                new_data[new_loc].keyhash = keyhash;
                                new_data[new_loc].value = (ordstruct_adt__ordstruct_adt_t)data[j].value;
                                }}
                htbl->size = new_size;
                htbl->num_entries = num_entries;
                htbl->data = new_data;
                safe_free(data);}
        uint32_t ihash = uint32_hash(i);
        uint32_t hashindex = lookup_ltedfapeg_funtype_48(htbl, i, ihash);
        ltedfapeg_funtype_48_hashentry_t hentry = htbl->data[hashindex];
        uint32_t hkeyhash = hentry.keyhash;
        bool_t hentrykeyzero;
        hentrykeyzero = (hentry.key == 0);

        if (hentrykeyzero && (hkeyhash == 0))
                {htbl->data[hashindex].key = (uint8_t)i; htbl->data[hashindex].keyhash = ihash; htbl->data[hashindex].value = (ordstruct_adt__ordstruct_adt_t)v; htbl->num_entries++;}
            else {ordstruct_adt__ordstruct_adt_t tempvalue;tempvalue = (ordstruct_adt__ordstruct_adt_t)htbl->data[hashindex].value;htbl->data[hashindex].value = (ordstruct_adt__ordstruct_adt_t)v;if (v != NULL) v->count++;if (tempvalue != NULL)release_ordstruct_adt__ordstruct_adt(tempvalue);};
        return a;

}

ltedfapeg_funtype_48_t update_ltedfapeg_funtype_48(ltedfapeg_funtype_48_t a, uint8_t i, ordstruct_adt__ordstruct_adt_t v){
        if (a->count == 1){
                return dupdate_ltedfapeg_funtype_48(a, i, v);
            } else {
                ltedfapeg_funtype_48_t x = copy_ltedfapeg_funtype_48(a);
                a->count--;
                return dupdate_ltedfapeg_funtype_48(x, i, v);
            }}

bool_t equal_ltedfapeg_funtype_48(ltedfapeg_funtype_48_t x, ltedfapeg_funtype_48_t y){
        return false;}

char* json_ltedfapeg_funtype_48(ltedfapeg_funtype_48_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_48\""); return result;}

void release_ltedfapeg_funtype_49(ltedfapeg_funtype_49_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_49_t copy_ltedfapeg_funtype_49(ltedfapeg_funtype_49_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_49(ltedfapeg_funtype_49_t x, ltedfapeg_funtype_49_t y){
        return false;}

char* json_ltedfapeg_funtype_49(ltedfapeg_funtype_49_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_49\""); return result;}


ordstruct_adt__ordstruct_adt_t f_ltedfapeg_closure_50(struct ltedfapeg_closure_50_s * closure, ltedfapeg__prepeg_adt_t bvar){
        ordstruct_adt__ordstruct_adt_t result = h_ltedfapeg_closure_50(bvar, closure->fvar_1, closure->fvar_2, closure->fvar_3, closure->fvar_4, closure->fvar_5); 
        return result;}

ordstruct_adt__ordstruct_adt_t m_ltedfapeg_closure_50(struct ltedfapeg_closure_50_s * closure, ltedfapeg__prepeg_adt_t bvar){
        return h_ltedfapeg_closure_50(bvar, closure->fvar_1, closure->fvar_2, closure->fvar_3, closure->fvar_4, closure->fvar_5);}

extern ordstruct_adt__ordstruct_adt_t h_ltedfapeg_closure_50(ltedfapeg__prepeg_adt_t ivar_10, ltedfapeg_funtype_48_t ivar_5, ltedfapeg_funtype_49_t ivar_7, ltedfapeg_funtype_47_t ivar_3, ordstruct_adt__ordstruct_adt_t ivar_2, ordstruct_adt__ordstruct_adt_t ivar_1){
        ordstruct_adt__ordstruct_adt_t result;
        bool_t ivar_31;
        ivar_10->count++;
        ivar_31 = (bool_t)r_ltedfapeg__epsilonp((ltedfapeg__prepeg_adt_t)ivar_10);
        if (ivar_31){ 
             release_ltedfapeg__prepeg_adt(ivar_10);
             //copying to ordstruct_adt__ordstruct_adt from ordstruct_adt__ordstruct_adt;
             result = (ordstruct_adt__ordstruct_adt_t)ivar_1;
             if (result != NULL) result->count++;
} else {
        
             bool_t ivar_35;
             ivar_10->count++;
             ivar_35 = (bool_t)r_ltedfapeg__failurep((ltedfapeg__prepeg_adt_t)ivar_10);
             if (ivar_35){  
           release_ltedfapeg__prepeg_adt(ivar_10);
           //copying to ordstruct_adt__ordstruct_adt from ordstruct_adt__ordstruct_adt;
           result = (ordstruct_adt__ordstruct_adt_t)ivar_2;
           if (result != NULL) result->count++;
} else {
             
           bool_t ivar_48;
           ivar_10->count++;
           ivar_48 = (bool_t)r_ltedfapeg__anyp((ltedfapeg__prepeg_adt_t)ivar_10);
           if (ivar_48){   
           dfa__dfa_t ivar_39;
           ivar_39 = (dfa__dfa_t)ltedfapeg__prepeg_adt_dfa((ltedfapeg__prepeg_adt_t)ivar_10);
           result = (ordstruct_adt__ordstruct_adt_t)ivar_3->ftbl->fptr(ivar_3, ivar_39);
} else {
           
           bool_t ivar_61;
           ivar_10->count++;
           ivar_61 = (bool_t)r_ltedfapeg__terminalp((ltedfapeg__prepeg_adt_t)ivar_10);
           if (ivar_61){    
            uint8_t ivar_52;
            ivar_52 = (uint8_t)ltedfapeg__prepeg_adt_a((ltedfapeg__prepeg_adt_t)ivar_10);
            result = (ordstruct_adt__ordstruct_adt_t)ivar_5->ftbl->fptr(ivar_5, ivar_52);
} else {
           
            uint8_t ivar_65;
            ivar_10->count++;
            ivar_65 = (uint8_t)ltedfapeg__prepeg_adt_fst((ltedfapeg__prepeg_adt_t)ivar_10);
            uint8_t ivar_66;
            ivar_10->count++;
            ivar_66 = (uint8_t)ltedfapeg__prepeg_adt_lthen((ltedfapeg__prepeg_adt_t)ivar_10);
            uint8_t ivar_67;
            ivar_67 = (uint8_t)ltedfapeg__prepeg_adt_lelse((ltedfapeg__prepeg_adt_t)ivar_10);
            result = (ordstruct_adt__ordstruct_adt_t)ivar_7->ftbl->mptr(ivar_7, ivar_65, ivar_66, ivar_67);
};
};
};
};

        return result;
}

ltedfapeg_closure_50_t new_ltedfapeg_closure_50(void){
        static struct ltedfapeg_funtype_46_ftbl_s ftbl = {.fptr = (ordstruct_adt__ordstruct_adt_t (*)(ltedfapeg_funtype_46_t, ltedfapeg__prepeg_adt_t))&f_ltedfapeg_closure_50, .mptr = (ordstruct_adt__ordstruct_adt_t (*)(ltedfapeg_funtype_46_t, ltedfapeg__prepeg_adt_t))&m_ltedfapeg_closure_50, .rptr =  (void (*)(ltedfapeg_funtype_46_t))&release_ltedfapeg_closure_50, .cptr = (ltedfapeg_funtype_46_t (*)(ltedfapeg_funtype_46_t))&copy_ltedfapeg_closure_50};
        ltedfapeg_closure_50_t tmp = (ltedfapeg_closure_50_t) safe_malloc(sizeof(struct ltedfapeg_closure_50_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_50(ltedfapeg_funtype_46_t closure){
        ltedfapeg_closure_50_t x = (ltedfapeg_closure_50_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg_funtype_48(x->fvar_1);
         release_ltedfapeg_funtype_49(x->fvar_2);
         release_ltedfapeg_funtype_47(x->fvar_3);
         release_ordstruct_adt__ordstruct_adt(x->fvar_4);
         release_ordstruct_adt__ordstruct_adt(x->fvar_5);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_50_t copy_ltedfapeg_closure_50(ltedfapeg_closure_50_t x){
        ltedfapeg_closure_50_t y = new_ltedfapeg_closure_50();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        y->fvar_3 = x->fvar_3; x->fvar_3->count++;
        y->fvar_4 = x->fvar_4; x->fvar_4->count++;
        y->fvar_5 = x->fvar_5; x->fvar_5->count++;
        if (x->htbl != NULL){
            ltedfapeg_funtype_46_htbl_t new_htbl = (ltedfapeg_funtype_46_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_46_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_46_hashentry_t * new_data = (ltedfapeg_funtype_46_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_46_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_46_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}

void release_ltedfapeg_funtype_51(ltedfapeg_funtype_51_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_51_t copy_ltedfapeg_funtype_51(ltedfapeg_funtype_51_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_51(ltedfapeg_funtype_51_t x, ltedfapeg_funtype_51_t y){
        return false;}

char* json_ltedfapeg_funtype_51(ltedfapeg_funtype_51_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_51\""); return result;}

void release_ltedfapeg_funtype_52(ltedfapeg_funtype_52_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_52_t copy_ltedfapeg_funtype_52(ltedfapeg_funtype_52_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_52(ltedfapeg_funtype_52_t x, ltedfapeg_funtype_52_t y){
        return false;}

char* json_ltedfapeg_funtype_52(ltedfapeg_funtype_52_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_52\""); return result;}

void release_ltedfapeg_funtype_53(ltedfapeg_funtype_53_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_53_t copy_ltedfapeg_funtype_53(ltedfapeg_funtype_53_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_53(ltedfapeg_funtype_53_t x, ltedfapeg_funtype_53_t y){
        return false;}

char* json_ltedfapeg_funtype_53(ltedfapeg_funtype_53_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_53\""); return result;}


ordstruct_adt__ordstruct_adt_t f_ltedfapeg_closure_54(struct ltedfapeg_closure_54_s * closure, ltedfapeg__prepeg_adt_t bvar){
        ordstruct_adt__ordstruct_adt_t result = h_ltedfapeg_closure_54(bvar, closure->fvar_1, closure->fvar_2, closure->fvar_3, closure->fvar_4, closure->fvar_5); 
        return result;}

ordstruct_adt__ordstruct_adt_t m_ltedfapeg_closure_54(struct ltedfapeg_closure_54_s * closure, ltedfapeg__prepeg_adt_t bvar){
        return h_ltedfapeg_closure_54(bvar, closure->fvar_1, closure->fvar_2, closure->fvar_3, closure->fvar_4, closure->fvar_5);}

extern ordstruct_adt__ordstruct_adt_t h_ltedfapeg_closure_54(ltedfapeg__prepeg_adt_t ivar_12, ltedfapeg_funtype_52_t ivar_7, ltedfapeg_funtype_53_t ivar_9, ltedfapeg_funtype_51_t ivar_5, ltedfapeg_funtype_46_t ivar_3, ltedfapeg_funtype_46_t ivar_1){
        ordstruct_adt__ordstruct_adt_t result;
        bool_t ivar_40;
        ivar_12->count++;
        ivar_40 = (bool_t)r_ltedfapeg__epsilonp((ltedfapeg__prepeg_adt_t)ivar_12);
        if (ivar_40){ 
             result = (ordstruct_adt__ordstruct_adt_t)ivar_1->ftbl->fptr(ivar_1, ivar_12);
} else {
        
             bool_t ivar_49;
             ivar_12->count++;
             ivar_49 = (bool_t)r_ltedfapeg__failurep((ltedfapeg__prepeg_adt_t)ivar_12);
             if (ivar_49){  
           result = (ordstruct_adt__ordstruct_adt_t)ivar_3->ftbl->fptr(ivar_3, ivar_12);
} else {
             
           bool_t ivar_64;
           ivar_12->count++;
           ivar_64 = (bool_t)r_ltedfapeg__anyp((ltedfapeg__prepeg_adt_t)ivar_12);
           if (ivar_64){   
           dfa__dfa_t ivar_53;
           ivar_12->count++;
           ivar_53 = (dfa__dfa_t)ltedfapeg__prepeg_adt_dfa((ltedfapeg__prepeg_adt_t)ivar_12);
           result = (ordstruct_adt__ordstruct_adt_t)ivar_5->ftbl->mptr(ivar_5, ivar_53, ivar_12);
} else {
           
           bool_t ivar_79;
           ivar_12->count++;
           ivar_79 = (bool_t)r_ltedfapeg__terminalp((ltedfapeg__prepeg_adt_t)ivar_12);
           if (ivar_79){    
            uint8_t ivar_68;
            ivar_12->count++;
            ivar_68 = (uint8_t)ltedfapeg__prepeg_adt_a((ltedfapeg__prepeg_adt_t)ivar_12);
            result = (ordstruct_adt__ordstruct_adt_t)ivar_7->ftbl->mptr(ivar_7, ivar_68, ivar_12);
} else {
           
            uint8_t ivar_83;
            ivar_12->count++;
            ivar_83 = (uint8_t)ltedfapeg__prepeg_adt_fst((ltedfapeg__prepeg_adt_t)ivar_12);
            uint8_t ivar_84;
            ivar_12->count++;
            ivar_84 = (uint8_t)ltedfapeg__prepeg_adt_lthen((ltedfapeg__prepeg_adt_t)ivar_12);
            uint8_t ivar_85;
            ivar_12->count++;
            ivar_85 = (uint8_t)ltedfapeg__prepeg_adt_lelse((ltedfapeg__prepeg_adt_t)ivar_12);
            result = (ordstruct_adt__ordstruct_adt_t)ivar_9->ftbl->mptr(ivar_9, ivar_83, ivar_84, ivar_85, ivar_12);
};
};
};
};

        return result;
}

ltedfapeg_closure_54_t new_ltedfapeg_closure_54(void){
        static struct ltedfapeg_funtype_46_ftbl_s ftbl = {.fptr = (ordstruct_adt__ordstruct_adt_t (*)(ltedfapeg_funtype_46_t, ltedfapeg__prepeg_adt_t))&f_ltedfapeg_closure_54, .mptr = (ordstruct_adt__ordstruct_adt_t (*)(ltedfapeg_funtype_46_t, ltedfapeg__prepeg_adt_t))&m_ltedfapeg_closure_54, .rptr =  (void (*)(ltedfapeg_funtype_46_t))&release_ltedfapeg_closure_54, .cptr = (ltedfapeg_funtype_46_t (*)(ltedfapeg_funtype_46_t))&copy_ltedfapeg_closure_54};
        ltedfapeg_closure_54_t tmp = (ltedfapeg_closure_54_t) safe_malloc(sizeof(struct ltedfapeg_closure_54_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_54(ltedfapeg_funtype_46_t closure){
        ltedfapeg_closure_54_t x = (ltedfapeg_closure_54_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg_funtype_52(x->fvar_1);
         release_ltedfapeg_funtype_53(x->fvar_2);
         release_ltedfapeg_funtype_51(x->fvar_3);
         release_ltedfapeg_funtype_46(x->fvar_4);
         release_ltedfapeg_funtype_46(x->fvar_5);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_54_t copy_ltedfapeg_closure_54(ltedfapeg_closure_54_t x){
        ltedfapeg_closure_54_t y = new_ltedfapeg_closure_54();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        y->fvar_3 = x->fvar_3; x->fvar_3->count++;
        y->fvar_4 = x->fvar_4; x->fvar_4->count++;
        y->fvar_5 = x->fvar_5; x->fvar_5->count++;
        if (x->htbl != NULL){
            ltedfapeg_funtype_46_htbl_t new_htbl = (ltedfapeg_funtype_46_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_46_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_46_hashentry_t * new_data = (ltedfapeg_funtype_46_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_46_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_46_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}

void release_ltedfapeg_funtype_55(ltedfapeg_funtype_55_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_55_t copy_ltedfapeg_funtype_55(ltedfapeg_funtype_55_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_55(ltedfapeg_funtype_55_t x, ltedfapeg_funtype_55_t y){
        return false;}

char* json_ltedfapeg_funtype_55(ltedfapeg_funtype_55_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_55\""); return result;}


bool_t f_ltedfapeg_closure_56(struct ltedfapeg_closure_56_s * closure, ltedfapeg__ent_adt_t bvar){
        bool_t result = h_ltedfapeg_closure_56(bvar, closure->fvar_1, closure->fvar_2); 
        return result;}

bool_t m_ltedfapeg_closure_56(struct ltedfapeg_closure_56_s * closure, ltedfapeg__ent_adt_t bvar){
        return h_ltedfapeg_closure_56(bvar, closure->fvar_1, closure->fvar_2);}

extern bool_t h_ltedfapeg_closure_56(ltedfapeg__ent_adt_t ivar_4, uint32_t ivar_2, uint32_t ivar_1){
        bool_t result;
        mpq_ptr_t ivar_5;
        uint32_t ivar_8;
        ivar_8 = (uint32_t)ltedfapeg__ent_adt_span((ltedfapeg__ent_adt_t)ivar_4);
        mpz_t tmp431940;
        mpz_init(tmp431940);
        mpz_set_ui(tmp431940, (uint64_t)ivar_2);
        mpz_add_ui(tmp431940, tmp431940, (uint64_t)ivar_8);
        mpq_mk_set_z(ivar_5, tmp431940);
        mpz_clear(tmp431940);
        int64_t tmp431941 = mpq_cmp_ui(ivar_5, ivar_1, 1);
        result = (tmp431941 <= 0);

        return result;
}

ltedfapeg_closure_56_t new_ltedfapeg_closure_56(void){
        static struct ltedfapeg_funtype_55_ftbl_s ftbl = {.fptr = (bool_t (*)(ltedfapeg_funtype_55_t, ltedfapeg__ent_adt_t))&f_ltedfapeg_closure_56, .mptr = (bool_t (*)(ltedfapeg_funtype_55_t, ltedfapeg__ent_adt_t))&m_ltedfapeg_closure_56, .rptr =  (void (*)(ltedfapeg_funtype_55_t))&release_ltedfapeg_closure_56, .cptr = (ltedfapeg_funtype_55_t (*)(ltedfapeg_funtype_55_t))&copy_ltedfapeg_closure_56};
        ltedfapeg_closure_56_t tmp = (ltedfapeg_closure_56_t) safe_malloc(sizeof(struct ltedfapeg_closure_56_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_56(ltedfapeg_funtype_55_t closure){
        ltedfapeg_closure_56_t x = (ltedfapeg_closure_56_t)closure;
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_56_t copy_ltedfapeg_closure_56(ltedfapeg_closure_56_t x){
        ltedfapeg_closure_56_t y = new_ltedfapeg_closure_56();
        y->ftbl = x->ftbl;

        y->fvar_1 = (uint32_t)x->fvar_1;
        y->fvar_2 = (uint32_t)x->fvar_2;
        if (x->htbl != NULL){
            ltedfapeg_funtype_55_htbl_t new_htbl = (ltedfapeg_funtype_55_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_55_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_55_hashentry_t * new_data = (ltedfapeg_funtype_55_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_55_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_55_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


bool_t f_ltedfapeg_closure_57(struct ltedfapeg_closure_57_s * closure, ltedfapeg__ent_adt_t bvar){
        bool_t result = h_ltedfapeg_closure_57(bvar, closure->fvar_1); 
        return result;}

bool_t m_ltedfapeg_closure_57(struct ltedfapeg_closure_57_s * closure, ltedfapeg__ent_adt_t bvar){
        return h_ltedfapeg_closure_57(bvar, closure->fvar_1);}

extern bool_t h_ltedfapeg_closure_57(ltedfapeg__ent_adt_t ivar_3, uint32_t ivar_1){
        bool_t result;
        bool_t ivar_4;
        ivar_3->count++;
        ivar_4 = (bool_t)r_ltedfapeg__pushp((ltedfapeg__ent_adt_t)ivar_3);
        if (ivar_4){ 
             bool_t ivar_9;
             uint32_t ivar_11;
             ivar_3->count++;
             ivar_11 = (uint32_t)ltedfapeg__ent_adt_pos((ltedfapeg__ent_adt_t)ivar_3);
             ivar_9 = (ivar_11 <= ivar_1);
             if (ivar_9){  
           uint8_t ivar_17;
           ivar_17 = (uint8_t)ltedfapeg__ent_adt_nt((ltedfapeg__ent_adt_t)ivar_3);
           uint8_t ivar_18;
           ivar_18 = (uint8_t)ltedfapeg__num_non_terminals();
           result = (ivar_17 <= ivar_18);
} else {
             
           release_ltedfapeg__ent_adt(ivar_3);
           result = (bool_t) false;
};
} else {
        
             release_ltedfapeg__ent_adt(ivar_3);
             result = (bool_t) false;
};

        return result;
}

ltedfapeg_closure_57_t new_ltedfapeg_closure_57(void){
        static struct ltedfapeg_funtype_55_ftbl_s ftbl = {.fptr = (bool_t (*)(ltedfapeg_funtype_55_t, ltedfapeg__ent_adt_t))&f_ltedfapeg_closure_57, .mptr = (bool_t (*)(ltedfapeg_funtype_55_t, ltedfapeg__ent_adt_t))&m_ltedfapeg_closure_57, .rptr =  (void (*)(ltedfapeg_funtype_55_t))&release_ltedfapeg_closure_57, .cptr = (ltedfapeg_funtype_55_t (*)(ltedfapeg_funtype_55_t))&copy_ltedfapeg_closure_57};
        ltedfapeg_closure_57_t tmp = (ltedfapeg_closure_57_t) safe_malloc(sizeof(struct ltedfapeg_closure_57_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_57(ltedfapeg_funtype_55_t closure){
        ltedfapeg_closure_57_t x = (ltedfapeg_closure_57_t)closure;
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_57_t copy_ltedfapeg_closure_57(ltedfapeg_closure_57_t x){
        ltedfapeg_closure_57_t y = new_ltedfapeg_closure_57();
        y->ftbl = x->ftbl;

        y->fvar_1 = (uint32_t)x->fvar_1;
        if (x->htbl != NULL){
            ltedfapeg_funtype_55_htbl_t new_htbl = (ltedfapeg_funtype_55_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_55_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_55_hashentry_t * new_data = (ltedfapeg_funtype_55_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_55_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_55_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


bool_t f_ltedfapeg_closure_58(struct ltedfapeg_closure_58_s * closure, ltedfapeg__ent_adt_t bvar){
        bool_t result = h_ltedfapeg_closure_58(bvar, closure->fvar_1); 
        return result;}

bool_t m_ltedfapeg_closure_58(struct ltedfapeg_closure_58_s * closure, ltedfapeg__ent_adt_t bvar){
        return h_ltedfapeg_closure_58(bvar, closure->fvar_1);}

extern bool_t h_ltedfapeg_closure_58(ltedfapeg__ent_adt_t ivar_3, uint32_t ivar_1){
        bool_t result;
        bool_t ivar_4;
        ltedfapeg_funtype_55_t ivar_9;
        ivar_9 = (ltedfapeg_funtype_55_t)ltedfapeg__good_push_entryp((uint32_t)ivar_1);
        ivar_3->count++;
        ivar_4 = (bool_t)ivar_9->ftbl->fptr(ivar_9, ivar_3);
        ivar_9->ftbl->rptr(ivar_9);
        if (ivar_4){ 
             uint8_t ivar_15;
             ivar_15 = (uint8_t)ltedfapeg__ent_adt_nt((ltedfapeg__ent_adt_t)ivar_3);
             uint8_t ivar_16;
             ivar_16 = (uint8_t)ltedfapeg__num_non_terminals();
             result = (ivar_15 < ivar_16);
} else {
        
             release_ltedfapeg__ent_adt(ivar_3);
             result = (bool_t) false;
};

        return result;
}

ltedfapeg_closure_58_t new_ltedfapeg_closure_58(void){
        static struct ltedfapeg_funtype_55_ftbl_s ftbl = {.fptr = (bool_t (*)(ltedfapeg_funtype_55_t, ltedfapeg__ent_adt_t))&f_ltedfapeg_closure_58, .mptr = (bool_t (*)(ltedfapeg_funtype_55_t, ltedfapeg__ent_adt_t))&m_ltedfapeg_closure_58, .rptr =  (void (*)(ltedfapeg_funtype_55_t))&release_ltedfapeg_closure_58, .cptr = (ltedfapeg_funtype_55_t (*)(ltedfapeg_funtype_55_t))&copy_ltedfapeg_closure_58};
        ltedfapeg_closure_58_t tmp = (ltedfapeg_closure_58_t) safe_malloc(sizeof(struct ltedfapeg_closure_58_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_58(ltedfapeg_funtype_55_t closure){
        ltedfapeg_closure_58_t x = (ltedfapeg_closure_58_t)closure;
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_58_t copy_ltedfapeg_closure_58(ltedfapeg_closure_58_t x){
        ltedfapeg_closure_58_t y = new_ltedfapeg_closure_58();
        y->ftbl = x->ftbl;

        y->fvar_1 = (uint32_t)x->fvar_1;
        if (x->htbl != NULL){
            ltedfapeg_funtype_55_htbl_t new_htbl = (ltedfapeg_funtype_55_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_55_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_55_hashentry_t * new_data = (ltedfapeg_funtype_55_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_55_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_55_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


bool_t f_ltedfapeg_closure_59(struct ltedfapeg_closure_59_s * closure, ltedfapeg__ent_adt_t bvar){
        bool_t result = h_ltedfapeg_closure_59(bvar, closure->fvar_1, closure->fvar_2); 
        return result;}

bool_t m_ltedfapeg_closure_59(struct ltedfapeg_closure_59_s * closure, ltedfapeg__ent_adt_t bvar){
        return h_ltedfapeg_closure_59(bvar, closure->fvar_1, closure->fvar_2);}

extern bool_t h_ltedfapeg_closure_59(ltedfapeg__ent_adt_t ivar_4, uint32_t ivar_2, uint32_t ivar_1){
        bool_t result;
        bool_t ivar_5;
        bool_t ivar_7;
        ivar_4->count++;
        ivar_7 = (bool_t)r_ltedfapeg__goodp((ltedfapeg__ent_adt_t)ivar_4);
        if (ivar_7){ 
             ltedfapeg_funtype_55_t ivar_15;
             ivar_15 = (ltedfapeg_funtype_55_t)ltedfapeg__good_good_entryp((uint32_t)ivar_1, (uint32_t)ivar_2);
             ivar_4->count++;
             ivar_5 = (bool_t)ivar_15->ftbl->fptr(ivar_15, ivar_4);
             ivar_15->ftbl->rptr(ivar_15);
} else {
        
             ivar_5 = (bool_t) true;
};
        if (ivar_5){ 
             bool_t ivar_24;
             ivar_4->count++;
             ivar_24 = (bool_t)r_ltedfapeg__pushp((ltedfapeg__ent_adt_t)ivar_4);
             if (ivar_24){  
           ltedfapeg_funtype_55_t ivar_32;
           ivar_32 = (ltedfapeg_funtype_55_t)ltedfapeg__good_push_entryp((uint32_t)ivar_1);
           result = (bool_t)ivar_32->ftbl->fptr(ivar_32, ivar_4);
           ivar_32->ftbl->rptr(ivar_32);
} else {
             
           release_ltedfapeg__ent_adt(ivar_4);
           result = (bool_t) true;
};
} else {
        
             release_ltedfapeg__ent_adt(ivar_4);
             result = (bool_t) false;
};

        return result;
}

ltedfapeg_closure_59_t new_ltedfapeg_closure_59(void){
        static struct ltedfapeg_funtype_55_ftbl_s ftbl = {.fptr = (bool_t (*)(ltedfapeg_funtype_55_t, ltedfapeg__ent_adt_t))&f_ltedfapeg_closure_59, .mptr = (bool_t (*)(ltedfapeg_funtype_55_t, ltedfapeg__ent_adt_t))&m_ltedfapeg_closure_59, .rptr =  (void (*)(ltedfapeg_funtype_55_t))&release_ltedfapeg_closure_59, .cptr = (ltedfapeg_funtype_55_t (*)(ltedfapeg_funtype_55_t))&copy_ltedfapeg_closure_59};
        ltedfapeg_closure_59_t tmp = (ltedfapeg_closure_59_t) safe_malloc(sizeof(struct ltedfapeg_closure_59_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_59(ltedfapeg_funtype_55_t closure){
        ltedfapeg_closure_59_t x = (ltedfapeg_closure_59_t)closure;
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_59_t copy_ltedfapeg_closure_59(ltedfapeg_closure_59_t x){
        ltedfapeg_closure_59_t y = new_ltedfapeg_closure_59();
        y->ftbl = x->ftbl;

        y->fvar_1 = (uint32_t)x->fvar_1;
        y->fvar_2 = (uint32_t)x->fvar_2;
        if (x->htbl != NULL){
            ltedfapeg_funtype_55_htbl_t new_htbl = (ltedfapeg_funtype_55_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_55_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_55_hashentry_t * new_data = (ltedfapeg_funtype_55_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_55_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_55_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}

void release_ltedfapeg_funtype_60(ltedfapeg_funtype_60_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_60_t copy_ltedfapeg_funtype_60(ltedfapeg_funtype_60_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_60(ltedfapeg_funtype_60_t x, ltedfapeg_funtype_60_t y){
        return false;}

char* json_ltedfapeg_funtype_60(ltedfapeg_funtype_60_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_60\""); return result;}


ltedfapeg_array_61_t new_ltedfapeg_array_61(uint32_t size){
        ltedfapeg_array_61_t tmp = (ltedfapeg_array_61_t) safe_malloc(sizeof(struct ltedfapeg_array_61_s) + (size * sizeof(ltedfapeg__ent_adt_t)));
        tmp->count = 1;
        tmp->size = size;
        tmp->max = size;
        return tmp;}

void release_ltedfapeg_array_61(ltedfapeg_array_61_t x){
        x->count--;
        if (x->count <= 0){
                for (int i = 0; i < x->size; i++){release_ltedfapeg__ent_adt(x->elems[i]);};
        //printf("\nFreeing\n");
        safe_free(x);}
}

void release_ltedfapeg_array_61_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg_array_61((ltedfapeg_array_61_t)x);
}

ltedfapeg_array_61_t copy_ltedfapeg_array_61(ltedfapeg_array_61_t x){
        ltedfapeg_array_61_t tmp = new_ltedfapeg_array_61(x->size);
        tmp->count = 1;
        for (uint32_t i = 0; i < x->size; i++){tmp->elems[i] = x->elems[i];
                x->elems[i]->count++;};
         return tmp;}

bool_t equal_ltedfapeg_array_61(ltedfapeg_array_61_t x, ltedfapeg_array_61_t y){
        bool_t tmp = true;
        uint32_t i = 0;
        while (i < x->size && tmp){tmp = equal_ltedfapeg__ent_adt(x->elems[i], y->elems[i]); i++;};
        return tmp;}

char * json_ltedfapeg_array_61(ltedfapeg_array_61_t x){
        char ** tmp = (char **)safe_malloc(sizeof(void *) * x->size);
        for (uint32_t i = 0; i < x->size; i++){tmp[i] = json_ltedfapeg__ent_adt(x->elems[i]);};
        char * result = json_list_with_sep(tmp, x->size, '[', ',', ']');
        for (uint32_t i = 0; i < x->size; i++) free(tmp[i]);
        free(tmp);
        return result;}

bool_t equal_ltedfapeg_array_61_ptr(pointer_t x, pointer_t y, type_actual_t T){
        return equal_ltedfapeg_array_61((ltedfapeg_array_61_t)x, (ltedfapeg_array_61_t)y);
}

char * json_ltedfapeg_array_61_ptr(pointer_t x, type_actual_t T){
        return json_ltedfapeg_array_61((ltedfapeg_array_61_t)x);
}

actual_ltedfapeg_array_61_t actual_ltedfapeg_array_61(){
        actual_ltedfapeg_array_61_t new = (actual_ltedfapeg_array_61_t)safe_malloc(sizeof(struct actual_ltedfapeg_array_61_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg_array_61_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg_array_61_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg_array_61_ptr);
 

 
        return new;
 };

ltedfapeg_array_61_t update_ltedfapeg_array_61(ltedfapeg_array_61_t x, uint32_t i, ltedfapeg__ent_adt_t v){
         ltedfapeg_array_61_t y;
         if (x->count == 1){y = x;}
                 else {y = copy_ltedfapeg_array_61(x);
                      x->count--;};
        ltedfapeg__ent_adt_t * yelems = y->elems;
        if (v != NULL){v->count++;}
        if (yelems[i] != NULL){release_ltedfapeg__ent_adt(yelems[i]);};
         yelems[i] = v;
         return y;}

ltedfapeg_array_61_t upgrade_ltedfapeg_array_61(ltedfapeg_array_61_t x, uint32_t i, ltedfapeg__ent_adt_t v){
         ltedfapeg_array_61_t y;
         if (x->count == 1 && i < x->max){y = x;}
                 else if (i > x->max){uint32_t newmax = x->max <= UINT32_MAX/2 ? 2*x->max: UINT32_MAX;
                y = safe_realloc(x, sizeof(struct ltedfapeg_array_61_s) + (newmax * sizeof(ltedfapeg__ent_adt_t)));
                y->count = 1;
                y->size = i+1;
                y->max = newmax;
                release_ltedfapeg_array_61(x);} else {y = copy_ltedfapeg_array_61(x);
                      x->count--;};
        ltedfapeg__ent_adt_t * yelems = y->elems;
        if (v != NULL){v->count++;}
        if (yelems[i] != NULL){release_ltedfapeg__ent_adt(yelems[i]);};
         yelems[i] = v;
         return y;}




ltedfapeg_array_62_t new_ltedfapeg_array_62(uint32_t size){
        ltedfapeg_array_62_t tmp = (ltedfapeg_array_62_t) safe_malloc(sizeof(struct ltedfapeg_array_62_s) + (size * sizeof(ltedfapeg_array_61_t)));
        tmp->count = 1;
        tmp->size = size;
        tmp->max = size;
        return tmp;}

void release_ltedfapeg_array_62(ltedfapeg_array_62_t x){
        x->count--;
        if (x->count <= 0){
                for (int i = 0; i < x->size; i++){release_ltedfapeg_array_61(x->elems[i]);};
        //printf("\nFreeing\n");
        safe_free(x);}
}

void release_ltedfapeg_array_62_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg_array_62((ltedfapeg_array_62_t)x);
}

ltedfapeg_array_62_t copy_ltedfapeg_array_62(ltedfapeg_array_62_t x){
        ltedfapeg_array_62_t tmp = new_ltedfapeg_array_62(x->size);
        tmp->count = 1;
        for (uint32_t i = 0; i < x->size; i++){tmp->elems[i] = x->elems[i];
                x->elems[i]->count++;};
         return tmp;}

bool_t equal_ltedfapeg_array_62(ltedfapeg_array_62_t x, ltedfapeg_array_62_t y){
        bool_t tmp = true;
        uint32_t i = 0;
        while (i < x->size && tmp){tmp = equal_ltedfapeg_array_61(x->elems[i], y->elems[i]); i++;};
        return tmp;}

char * json_ltedfapeg_array_62(ltedfapeg_array_62_t x){
        char ** tmp = (char **)safe_malloc(sizeof(void *) * x->size);
        for (uint32_t i = 0; i < x->size; i++){tmp[i] = json_ltedfapeg_array_61(x->elems[i]);};
        char * result = json_list_with_sep(tmp, x->size, '[', ',', ']');
        for (uint32_t i = 0; i < x->size; i++) free(tmp[i]);
        free(tmp);
        return result;}

bool_t equal_ltedfapeg_array_62_ptr(pointer_t x, pointer_t y, type_actual_t T){
        return equal_ltedfapeg_array_62((ltedfapeg_array_62_t)x, (ltedfapeg_array_62_t)y);
}

char * json_ltedfapeg_array_62_ptr(pointer_t x, type_actual_t T){
        return json_ltedfapeg_array_62((ltedfapeg_array_62_t)x);
}

actual_ltedfapeg_array_62_t actual_ltedfapeg_array_62(){
        actual_ltedfapeg_array_62_t new = (actual_ltedfapeg_array_62_t)safe_malloc(sizeof(struct actual_ltedfapeg_array_62_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg_array_62_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg_array_62_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg_array_62_ptr);
 

 
        return new;
 };

ltedfapeg_array_62_t update_ltedfapeg_array_62(ltedfapeg_array_62_t x, uint32_t i, ltedfapeg_array_61_t v){
         ltedfapeg_array_62_t y;
         if (x->count == 1){y = x;}
                 else {y = copy_ltedfapeg_array_62(x);
                      x->count--;};
        ltedfapeg_array_61_t * yelems = y->elems;
        if (v != NULL){v->count++;}
        if (yelems[i] != NULL){release_ltedfapeg_array_61(yelems[i]);};
         yelems[i] = v;
         return y;}

ltedfapeg_array_62_t upgrade_ltedfapeg_array_62(ltedfapeg_array_62_t x, uint32_t i, ltedfapeg_array_61_t v){
         ltedfapeg_array_62_t y;
         if (x->count == 1 && i < x->max){y = x;}
                 else if (i > x->max){uint32_t newmax = x->max <= UINT32_MAX/2 ? 2*x->max: UINT32_MAX;
                y = safe_realloc(x, sizeof(struct ltedfapeg_array_62_s) + (newmax * sizeof(ltedfapeg_array_61_t)));
                y->count = 1;
                y->size = i+1;
                y->max = newmax;
                release_ltedfapeg_array_62(x);} else {y = copy_ltedfapeg_array_62(x);
                      x->count--;};
        ltedfapeg_array_61_t * yelems = y->elems;
        if (v != NULL){v->count++;}
        if (yelems[i] != NULL){release_ltedfapeg_array_61(yelems[i]);};
         yelems[i] = v;
         return y;}




bool_t f_ltedfapeg_closure_63(struct ltedfapeg_closure_63_s * closure, ltedfapeg_record_9_t bvar){
        uint32_t bvar_1;
        bvar_1 = (uint32_t)bvar->project_1;
        uint8_t bvar_2;
        bvar_2 = (uint8_t)bvar->project_2;
        release_ltedfapeg_record_9(bvar);
        bool_t result = h_ltedfapeg_closure_63(bvar_1, bvar_2, closure->fvar_1, closure->fvar_2); 
        return result;}

bool_t m_ltedfapeg_closure_63(struct ltedfapeg_closure_63_s * closure, uint32_t bvar_1, uint8_t bvar_2){
        return h_ltedfapeg_closure_63(bvar_1, bvar_2, closure->fvar_1, closure->fvar_2);}

extern bool_t h_ltedfapeg_closure_63(uint32_t ivar_5, uint8_t ivar_6, ltedfapeg_array_62_t ivar_2, uint32_t ivar_1){
        bool_t result;
        ltedfapeg__ent_adt_t ivar_18;
        ltedfapeg_array_61_t ivar_10;
        ivar_10 = (ltedfapeg_array_61_t)ivar_2->elems[ivar_5];
        ivar_10->count++;
        ivar_18 = (ltedfapeg__ent_adt_t)ivar_10->elems[ivar_6];
        ivar_18->count++;
        release_ltedfapeg_array_61(ivar_10);
        result = (bool_t)r_ltedfapeg__pushp((ltedfapeg__ent_adt_t)ivar_18);

        return result;
}

ltedfapeg_closure_63_t new_ltedfapeg_closure_63(void){
        static struct ltedfapeg_funtype_60_ftbl_s ftbl = {.fptr = (bool_t (*)(ltedfapeg_funtype_60_t, ltedfapeg_record_9_t))&f_ltedfapeg_closure_63, .mptr = (bool_t (*)(ltedfapeg_funtype_60_t, uint32_t, uint8_t))&m_ltedfapeg_closure_63, .rptr =  (void (*)(ltedfapeg_funtype_60_t))&release_ltedfapeg_closure_63, .cptr = (ltedfapeg_funtype_60_t (*)(ltedfapeg_funtype_60_t))&copy_ltedfapeg_closure_63};
        ltedfapeg_closure_63_t tmp = (ltedfapeg_closure_63_t) safe_malloc(sizeof(struct ltedfapeg_closure_63_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_63(ltedfapeg_funtype_60_t closure){
        ltedfapeg_closure_63_t x = (ltedfapeg_closure_63_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg_array_62(x->fvar_1);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_63_t copy_ltedfapeg_closure_63(ltedfapeg_closure_63_t x){
        ltedfapeg_closure_63_t y = new_ltedfapeg_closure_63();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = (uint32_t)x->fvar_2;
        if (x->htbl != NULL){
            ltedfapeg_funtype_60_htbl_t new_htbl = (ltedfapeg_funtype_60_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_60_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_60_hashentry_t * new_data = (ltedfapeg_funtype_60_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_60_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_60_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


ltedfapeg_record_64_t new_ltedfapeg_record_64(void){
        ltedfapeg_record_64_t tmp = (ltedfapeg_record_64_t) safe_malloc(sizeof(struct ltedfapeg_record_64_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapeg_record_64(ltedfapeg_record_64_t x){
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg__ent_adt(x->project_1);
         release_ltedfapeg__ent_adt(x->project_2);
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_ltedfapeg_record_64_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg_record_64((ltedfapeg_record_64_t)x);
}

ltedfapeg_record_64_t copy_ltedfapeg_record_64(ltedfapeg_record_64_t x){
        ltedfapeg_record_64_t y = new_ltedfapeg_record_64();
        y->project_1 = x->project_1;
        if (y->project_1 != NULL){y->project_1->count++;};
        y->project_2 = x->project_2;
        if (y->project_2 != NULL){y->project_2->count++;};
        y->count = 1;
        return y;}

bool_t equal_ltedfapeg_record_64(ltedfapeg_record_64_t x, ltedfapeg_record_64_t y){
        bool_t tmp = true;
        tmp = tmp && equal_ltedfapeg__ent_adt(x->project_1, y->project_1);
        tmp = tmp && equal_ltedfapeg__ent_adt(x->project_2, y->project_2);
        return tmp;}

char * json_ltedfapeg_record_64(ltedfapeg_record_64_t x){
        char * tmp[2]; 
        char * fld0 = safe_malloc(21);
         sprintf(fld0, "\"project_1\" : ");
        tmp[0] = safe_strcat(fld0, json_ltedfapeg__ent_adt(x->project_1));
        char * fld1 = safe_malloc(21);
         sprintf(fld1, "\"project_2\" : ");
        tmp[1] = safe_strcat(fld1, json_ltedfapeg__ent_adt(x->project_2));
         char * result = json_list_with_sep(tmp, 2,  '{', ',', '}');
         for (uint32_t i = 0; i < 2; i++) free(tmp[i]);
        return result;}

bool_t equal_ltedfapeg_record_64_ptr(pointer_t x, pointer_t y, actual_ltedfapeg_record_64_t T){
        return equal_ltedfapeg_record_64((ltedfapeg_record_64_t)x, (ltedfapeg_record_64_t)y);
}

char * json_ltedfapeg_record_64_ptr(pointer_t x, actual_ltedfapeg_record_64_t T){
        return json_ltedfapeg_record_64((ltedfapeg_record_64_t)x);
}

actual_ltedfapeg_record_64_t actual_ltedfapeg_record_64(){
        actual_ltedfapeg_record_64_t new = (actual_ltedfapeg_record_64_t)safe_malloc(sizeof(struct actual_ltedfapeg_record_64_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg_record_64_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg_record_64_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg_record_64_ptr);
 

 
        return new;
 };

ltedfapeg_record_64_t update_ltedfapeg_record_64_project_1(ltedfapeg_record_64_t x, ltedfapeg__ent_adt_t v){
        ltedfapeg_record_64_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->project_1 != NULL){release_ltedfapeg__ent_adt(x->project_1);};}
        else {y = copy_ltedfapeg_record_64(x); x->count--; y->project_1->count--;};
        y->project_1 = (ltedfapeg__ent_adt_t)v;
        return y;}

ltedfapeg_record_64_t update_ltedfapeg_record_64_project_2(ltedfapeg_record_64_t x, ltedfapeg__ent_adt_t v){
        ltedfapeg_record_64_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->project_2 != NULL){release_ltedfapeg__ent_adt(x->project_2);};}
        else {y = copy_ltedfapeg_record_64(x); x->count--; y->project_2->count--;};
        y->project_2 = (ltedfapeg__ent_adt_t)v;
        return y;}



void release_ltedfapeg_funtype_65(ltedfapeg_funtype_65_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_65_t copy_ltedfapeg_funtype_65(ltedfapeg_funtype_65_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_65(ltedfapeg_funtype_65_t x, ltedfapeg_funtype_65_t y){
        return false;}

char* json_ltedfapeg_funtype_65(ltedfapeg_funtype_65_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_65\""); return result;}


ltedfapeg__lang_spec_t new_ltedfapeg__lang_spec(uint32_t size){
        ltedfapeg__lang_spec_t tmp = (ltedfapeg__lang_spec_t) safe_malloc(sizeof(struct ltedfapeg__lang_spec_s) + (size * sizeof(ltedfapeg__prepeg_adt_t)));
        tmp->count = 1;
        tmp->size = size;
        tmp->max = size;
        return tmp;}

void release_ltedfapeg__lang_spec(ltedfapeg__lang_spec_t x){
        x->count--;
        if (x->count <= 0){
                for (int i = 0; i < x->size; i++){release_ltedfapeg__prepeg_adt(x->elems[i]);};
        //printf("\nFreeing\n");
        safe_free(x);}
}

void release_ltedfapeg__lang_spec_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg__lang_spec((ltedfapeg__lang_spec_t)x);
}

ltedfapeg__lang_spec_t copy_ltedfapeg__lang_spec(ltedfapeg__lang_spec_t x){
        ltedfapeg__lang_spec_t tmp = new_ltedfapeg__lang_spec(x->size);
        tmp->count = 1;
        for (uint32_t i = 0; i < x->size; i++){tmp->elems[i] = x->elems[i];
                x->elems[i]->count++;};
         return tmp;}

bool_t equal_ltedfapeg__lang_spec(ltedfapeg__lang_spec_t x, ltedfapeg__lang_spec_t y){
        bool_t tmp = true;
        uint32_t i = 0;
        while (i < x->size && tmp){tmp = equal_ltedfapeg__prepeg_adt(x->elems[i], y->elems[i]); i++;};
        return tmp;}

char * json_ltedfapeg__lang_spec(ltedfapeg__lang_spec_t x){
        char ** tmp = (char **)safe_malloc(sizeof(void *) * x->size);
        for (uint32_t i = 0; i < x->size; i++){tmp[i] = json_ltedfapeg__prepeg_adt(x->elems[i]);};
        char * result = json_list_with_sep(tmp, x->size, '[', ',', ']');
        for (uint32_t i = 0; i < x->size; i++) free(tmp[i]);
        free(tmp);
        return result;}

bool_t equal_ltedfapeg__lang_spec_ptr(pointer_t x, pointer_t y, type_actual_t T){
        return equal_ltedfapeg__lang_spec((ltedfapeg__lang_spec_t)x, (ltedfapeg__lang_spec_t)y);
}

char * json_ltedfapeg__lang_spec_ptr(pointer_t x, type_actual_t T){
        return json_ltedfapeg__lang_spec((ltedfapeg__lang_spec_t)x);
}

actual_ltedfapeg__lang_spec_t actual_ltedfapeg__lang_spec(){
        actual_ltedfapeg__lang_spec_t new = (actual_ltedfapeg__lang_spec_t)safe_malloc(sizeof(struct actual_ltedfapeg__lang_spec_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg__lang_spec_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg__lang_spec_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg__lang_spec_ptr);
 

 
        return new;
 };

ltedfapeg__lang_spec_t update_ltedfapeg__lang_spec(ltedfapeg__lang_spec_t x, uint32_t i, ltedfapeg__prepeg_adt_t v){
         ltedfapeg__lang_spec_t y;
         if (x->count == 1){y = x;}
                 else {y = copy_ltedfapeg__lang_spec(x);
                      x->count--;};
        ltedfapeg__prepeg_adt_t * yelems = y->elems;
        if (v != NULL){v->count++;}
        if (yelems[i] != NULL){release_ltedfapeg__prepeg_adt(yelems[i]);};
         yelems[i] = v;
         return y;}

ltedfapeg__lang_spec_t upgrade_ltedfapeg__lang_spec(ltedfapeg__lang_spec_t x, uint32_t i, ltedfapeg__prepeg_adt_t v){
         ltedfapeg__lang_spec_t y;
         if (x->count == 1 && i < x->max){y = x;}
                 else if (i > x->max){uint32_t newmax = x->max <= UINT32_MAX/2 ? 2*x->max: UINT32_MAX;
                y = safe_realloc(x, sizeof(struct ltedfapeg__lang_spec_s) + (newmax * sizeof(ltedfapeg__prepeg_adt_t)));
                y->count = 1;
                y->size = i+1;
                y->max = newmax;
                release_ltedfapeg__lang_spec(x);} else {y = copy_ltedfapeg__lang_spec(x);
                      x->count--;};
        ltedfapeg__prepeg_adt_t * yelems = y->elems;
        if (v != NULL){v->count++;}
        if (yelems[i] != NULL){release_ltedfapeg__prepeg_adt(yelems[i]);};
         yelems[i] = v;
         return y;}




bool_t f_ltedfapeg_closure_67(struct ltedfapeg_closure_67_s * closure, ltedfapeg_record_64_t bvar){
        ltedfapeg__ent_adt_t bvar_1;
        bvar_1 = (ltedfapeg__ent_adt_t)bvar->project_1;
        bvar->project_1->count++;
        ltedfapeg__ent_adt_t bvar_2;
        bvar_2 = (ltedfapeg__ent_adt_t)bvar->project_2;
        bvar->project_2->count++;
        release_ltedfapeg_record_64(bvar);
        bool_t result = h_ltedfapeg_closure_67(bvar_1, bvar_2, closure->fvar_1, closure->fvar_2, closure->fvar_3); 
        release_ltedfapeg__ent_adt(bvar_1);
        release_ltedfapeg__ent_adt(bvar_2);
        return result;}

bool_t m_ltedfapeg_closure_67(struct ltedfapeg_closure_67_s * closure, ltedfapeg__ent_adt_t bvar_1, ltedfapeg__ent_adt_t bvar_2){
        return h_ltedfapeg_closure_67(bvar_1, bvar_2, closure->fvar_1, closure->fvar_2, closure->fvar_3);}

extern bool_t h_ltedfapeg_closure_67(ltedfapeg__ent_adt_t ivar_6, ltedfapeg__ent_adt_t ivar_7, ltedfapeg_array_62_t ivar_3, uint32_t ivar_1, ltedfapeg__lang_spec_t ivar_2){
        bool_t result;
        /* p1 */ uint32_t ivar_8;
        ivar_6->count++;
        ivar_8 = (uint32_t)ltedfapeg__ent_adt_pos((ltedfapeg__ent_adt_t)ivar_6);
        /* nt1 */ uint8_t ivar_12;
        ivar_12 = (uint8_t)ltedfapeg__ent_adt_nt((ltedfapeg__ent_adt_t)ivar_6);
        /* p2 */ uint32_t ivar_16;
        ivar_7->count++;
        ivar_16 = (uint32_t)ltedfapeg__ent_adt_pos((ltedfapeg__ent_adt_t)ivar_7);
        /* nt2 */ uint8_t ivar_20;
        ivar_20 = (uint8_t)ltedfapeg__ent_adt_nt((ltedfapeg__ent_adt_t)ivar_7);
        bool_t ivar_24;
        uint8_t ivar_27;
        ivar_27 = (uint8_t)ltedfapeg__num_non_terminals();
        ivar_24 = (ivar_12 >= ivar_27);
        if (ivar_24){ 
             result = (bool_t) true;
} else {
        
             ltedfapeg__prepeg_adt_t ivar_29;
             ivar_29 = (ltedfapeg__prepeg_adt_t)ivar_2->elems[ivar_12];
             ivar_29->count++;
             bool_t ivar_124;
             ivar_29->count++;
             ivar_124 = (bool_t)r_ltedfapeg__ltep((ltedfapeg__prepeg_adt_t)ivar_29);
             if (ivar_124){  
           uint8_t ivar_34;
           ivar_29->count++;
           ivar_34 = (uint8_t)ltedfapeg__prepeg_adt_fst((ltedfapeg__prepeg_adt_t)ivar_29);
           uint8_t ivar_35;
           ivar_29->count++;
           ivar_35 = (uint8_t)ltedfapeg__prepeg_adt_lthen((ltedfapeg__prepeg_adt_t)ivar_29);
           uint8_t ivar_36;
           ivar_36 = (uint8_t)ltedfapeg__prepeg_adt_lelse((ltedfapeg__prepeg_adt_t)ivar_29);
           bool_t ivar_46;
           bool_t ivar_48;
           ivar_48 = (ivar_16 == ivar_8);
           if (ivar_48){   
           ivar_46 = (ivar_20 == ivar_34);
} else {
           
           ivar_46 = (bool_t) false;
};
           if (ivar_46){   
           result = (bool_t) true;
} else {
           
           bool_t ivar_57;
           bool_t ivar_59;
           ltedfapeg__ent_adt_t ivar_72;
           ltedfapeg_array_61_t ivar_64;
           ivar_64 = (ltedfapeg_array_61_t)ivar_3->elems[ivar_8];
           ivar_64->count++;
           ivar_72 = (ltedfapeg__ent_adt_t)ivar_64->elems[ivar_34];
           ivar_72->count++;
           release_ltedfapeg_array_61(ivar_64);
           ivar_59 = (bool_t)r_ltedfapeg__goodp((ltedfapeg__ent_adt_t)ivar_72);
           if (ivar_59){    
            bool_t ivar_73;
            ivar_73 = (ivar_20 == ivar_35);
            if (ivar_73){     
             mpq_ptr_t ivar_79;
             uint32_t ivar_81;
             ltedfapeg__ent_adt_t ivar_93;
             ltedfapeg_array_61_t ivar_85;
             ivar_85 = (ltedfapeg_array_61_t)ivar_3->elems[ivar_8];
             ivar_85->count++;
             ivar_93 = (ltedfapeg__ent_adt_t)ivar_85->elems[ivar_34];
             ivar_93->count++;
             release_ltedfapeg_array_61(ivar_85);
             ivar_81 = (uint32_t)ltedfapeg__ent_adt_span((ltedfapeg__ent_adt_t)ivar_93);
             mpz_t tmp432101;
             mpz_init(tmp432101);
             mpz_set_ui(tmp432101, (uint64_t)ivar_8);
             mpz_add_ui(tmp432101, tmp432101, (uint64_t)ivar_81);
             mpq_mk_set_z(ivar_79, tmp432101);
             mpz_clear(tmp432101);
             int64_t tmp432102 = mpq_cmp_ui(ivar_79, ivar_16, 1);
             ivar_57 = (tmp432102 == 0);
} else {
            
             ivar_57 = (bool_t) false;
};
} else {
           
            ivar_57 = (bool_t) false;
};
           if (ivar_57){    
            result = (bool_t) true;
} else {
           
            bool_t ivar_98;
            ltedfapeg__ent_adt_t ivar_111;
            ltedfapeg_array_61_t ivar_103;
            ivar_103 = (ltedfapeg_array_61_t)ivar_3->elems[ivar_8];
            ivar_103->count++;
            ivar_111 = (ltedfapeg__ent_adt_t)ivar_103->elems[ivar_34];
            ivar_111->count++;
            release_ltedfapeg_array_61(ivar_103);
            ivar_98 = (bool_t)r_ltedfapeg__failp((ltedfapeg__ent_adt_t)ivar_111);
            if (ivar_98){     
             bool_t ivar_112;
             ivar_112 = (ivar_20 == ivar_36);
             if (ivar_112){      
              result = (ivar_16 == ivar_8);
} else {
             
              result = (bool_t) false;
};
} else {
            
             result = (bool_t) false;
};
};
};
} else {
             
           release_ltedfapeg__prepeg_adt(ivar_29);
           result = (bool_t) false;
};
};

        return result;
}

ltedfapeg_closure_67_t new_ltedfapeg_closure_67(void){
        static struct ltedfapeg_funtype_65_ftbl_s ftbl = {.fptr = (bool_t (*)(ltedfapeg_funtype_65_t, ltedfapeg_record_64_t))&f_ltedfapeg_closure_67, .mptr = (bool_t (*)(ltedfapeg_funtype_65_t, ltedfapeg__ent_adt_t, ltedfapeg__ent_adt_t))&m_ltedfapeg_closure_67, .rptr =  (void (*)(ltedfapeg_funtype_65_t))&release_ltedfapeg_closure_67, .cptr = (ltedfapeg_funtype_65_t (*)(ltedfapeg_funtype_65_t))&copy_ltedfapeg_closure_67};
        ltedfapeg_closure_67_t tmp = (ltedfapeg_closure_67_t) safe_malloc(sizeof(struct ltedfapeg_closure_67_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_67(ltedfapeg_funtype_65_t closure){
        ltedfapeg_closure_67_t x = (ltedfapeg_closure_67_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg_array_62(x->fvar_1);
         release_ltedfapeg__lang_spec(x->fvar_3);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_67_t copy_ltedfapeg_closure_67(ltedfapeg_closure_67_t x){
        ltedfapeg_closure_67_t y = new_ltedfapeg_closure_67();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = (uint32_t)x->fvar_2;
        y->fvar_3 = x->fvar_3; x->fvar_3->count++;
        if (x->htbl != NULL){
            ltedfapeg_funtype_65_htbl_t new_htbl = (ltedfapeg_funtype_65_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_65_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_65_hashentry_t * new_data = (ltedfapeg_funtype_65_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_65_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_65_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}

void release_ltedfapeg_funtype_68(ltedfapeg_funtype_68_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_68_t copy_ltedfapeg_funtype_68(ltedfapeg_funtype_68_t x){return x->ftbl->cptr(x);}

uint32_t lookup_ltedfapeg_funtype_68(ltedfapeg_funtype_68_htbl_t htbl, uint32_t i, uint32_t ihash){
        uint32_t mask = htbl->size - 1;
        uint32_t hashindex = ihash & mask;
        ltedfapeg_funtype_68_hashentry_t data = htbl->data[hashindex];
        bool_t keyzero;

        keyzero = (data.key == 0);
        bool_t keymatch;
        keymatch = (data.key == i);
        while ((!keyzero || data.keyhash != 0) &&
                 (data.keyhash != ihash || !keymatch)){
                hashindex++;
                hashindex = hashindex & mask;
                data = htbl->data[hashindex];

                keyzero = (data.key == 0);

                keymatch = (data.key == i);
                }
        return hashindex;
        }

ltedfapeg_funtype_68_t dupdate_ltedfapeg_funtype_68(ltedfapeg_funtype_68_t a, uint32_t i, mpz_ptr_t v){
        ltedfapeg_funtype_68_htbl_t htbl = a->htbl;
        if (htbl == NULL){//construct new htbl
                htbl = (ltedfapeg_funtype_68_htbl_t)safe_malloc(sizeof(struct ltedfapeg_funtype_68_htbl_s));
                htbl->size = HTBL_DEFAULT_SIZE; htbl->num_entries = 0;
                htbl->data = (ltedfapeg_funtype_68_hashentry_t *)safe_malloc(HTBL_DEFAULT_SIZE * sizeof(struct ltedfapeg_funtype_68_hashentry_s));
                for (uint32_t j = 0; j < HTBL_DEFAULT_SIZE; j++){htbl->data[j].key = (uint32_t)0; htbl->data[j].keyhash = 0;
                }
                a->htbl = htbl;
        }
        uint32_t size = htbl->size;
        uint32_t num_entries = htbl->num_entries;
        ltedfapeg_funtype_68_hashentry_t * data = htbl->data;
        if (num_entries/3 >  size/5){//resize data
                uint32_t new_size = 2*size; uint32_t new_mask = new_size - 1;
                if (size >= HTBL_MAX_SIZE) out_of_memory();
                ltedfapeg_funtype_68_hashentry_t * new_data = (ltedfapeg_funtype_68_hashentry_t *)safe_malloc(new_size * sizeof(struct ltedfapeg_funtype_68_hashentry_s));
                for (uint32_t j = 0; j < new_size; j++){
                        new_data[j].key = 0;
                        new_data[j].keyhash = 0;}
                for (uint32_t j = 0; j < size; j++){//transfer entries
                        uint32_t keyhash = data[j].keyhash;
                        bool_t keyzero;
                        keyzero = (data[j].key == 0);
                        if (!keyzero || keyhash != 0){
                                uint32_t new_loc = keyhash ^ new_mask;
                                keyzero = (new_data[new_loc].key == 0);
                                while (keyzero && new_data[new_loc].keyhash == 0){
                                        new_loc++;
                                        new_loc = new_loc ^ new_mask;

                                        keyzero = (new_data[new_loc].key == 0);
                                }
                                new_data[new_loc].key = (uint32_t)data[j].key;
                                new_data[new_loc].keyhash = keyhash;
                                mpz_set(new_data[new_loc].value, data[j].value);
                                }}
                htbl->size = new_size;
                htbl->num_entries = num_entries;
                htbl->data = new_data;
                safe_free(data);}
        uint32_t ihash = uint32_hash(i);
        uint32_t hashindex = lookup_ltedfapeg_funtype_68(htbl, i, ihash);
        ltedfapeg_funtype_68_hashentry_t hentry = htbl->data[hashindex];
        uint32_t hkeyhash = hentry.keyhash;
        bool_t hentrykeyzero;
        hentrykeyzero = (hentry.key == 0);

        if (hentrykeyzero && (hkeyhash == 0))
                {htbl->data[hashindex].key = (uint32_t)i; htbl->data[hashindex].keyhash = ihash; mpz_set(htbl->data[hashindex].value, v); htbl->num_entries++;}
            else {mpz_ptr_t tempvalue;mpz_mk_set(tempvalue, htbl->data[hashindex].value);mpz_set(htbl->data[hashindex].value, v);};
        return a;

}

ltedfapeg_funtype_68_t update_ltedfapeg_funtype_68(ltedfapeg_funtype_68_t a, uint32_t i, mpz_ptr_t v){
        if (a->count == 1){
                return dupdate_ltedfapeg_funtype_68(a, i, v);
            } else {
                ltedfapeg_funtype_68_t x = copy_ltedfapeg_funtype_68(a);
                a->count--;
                return dupdate_ltedfapeg_funtype_68(x, i, v);
            }}

bool_t equal_ltedfapeg_funtype_68(ltedfapeg_funtype_68_t x, ltedfapeg_funtype_68_t y){
        return false;}

char* json_ltedfapeg_funtype_68(ltedfapeg_funtype_68_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_68\""); return result;}


ltedfapeg_array_69_t new_ltedfapeg_array_69(uint32_t size){
        ltedfapeg_array_69_t tmp = (ltedfapeg_array_69_t) safe_malloc(sizeof(struct ltedfapeg_array_69_s) + (size * sizeof(mpz_ptr_t)));
        tmp->count = 1;
        tmp->size = size;;
        tmp->max = size;
         return tmp;}

void release_ltedfapeg_array_69(ltedfapeg_array_69_t x){
        x->count--;
         if (x->count <= 0){safe_free(x);}
}

void release_ltedfapeg_array_69_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg_array_69((ltedfapeg_array_69_t)x);
}

ltedfapeg_array_69_t copy_ltedfapeg_array_69(ltedfapeg_array_69_t x){
        ltedfapeg_array_69_t tmp = new_ltedfapeg_array_69(x->size);
        tmp->count = 1;
        for (uint32_t i = 0; i < x->size; i++){ tmp->elems[i] = (mpz_ptr_t)safe_malloc(sizeof(mpz_t));
                mpz_init(tmp->elems[i]);
                mpz_set(tmp->elems[i], x->elems[i]);};
         return tmp;}

bool_t equal_ltedfapeg_array_69(ltedfapeg_array_69_t x, ltedfapeg_array_69_t y){
        bool_t tmp = true;
        uint32_t i = 0;
        tmp = (mpz_cmp(x->elems[i], y->elems[i]) == 0);
        return tmp;}

char * json_ltedfapeg_array_69(ltedfapeg_array_69_t x){
        char ** tmp = (char **)safe_malloc(sizeof(void *) * x->size);
        for (uint32_t i = 0; i < x->size; i++){tmp[i] = json_mpz(x->elems[i]);};
        char * result = json_list_with_sep(tmp, x->size, '[', ',', ']');
        for (uint32_t i = 0; i < x->size; i++) free(tmp[i]);
        free(tmp);
        return result;}

bool_t equal_ltedfapeg_array_69_ptr(pointer_t x, pointer_t y, type_actual_t T){
        return equal_ltedfapeg_array_69((ltedfapeg_array_69_t)x, (ltedfapeg_array_69_t)y);
}

char * json_ltedfapeg_array_69_ptr(pointer_t x, type_actual_t T){
        return json_ltedfapeg_array_69((ltedfapeg_array_69_t)x);
}

actual_ltedfapeg_array_69_t actual_ltedfapeg_array_69(){
        actual_ltedfapeg_array_69_t new = (actual_ltedfapeg_array_69_t)safe_malloc(sizeof(struct actual_ltedfapeg_array_69_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg_array_69_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg_array_69_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg_array_69_ptr);
 

 
        return new;
 };

ltedfapeg_array_69_t update_ltedfapeg_array_69(ltedfapeg_array_69_t x, uint32_t i, mpz_t v){
        ltedfapeg_array_69_t y; 
         if (x->count == 1){y = x;}
           else {y = copy_ltedfapeg_array_69(x );
                x->count--;};
        mpz_set(y->elems[i], v);
        return y;}

ltedfapeg_array_69_t upgrade_ltedfapeg_array_69(ltedfapeg_array_69_t x, uint32_t i, mpz_t v){
        ltedfapeg_array_69_t y; 
         if (x->count == 1 && i < x->max){y = x;}
           else if (i > x->max){uint32_t newmax = x->max <= UINT32_MAX/2 ? 2*x->max: UINT32_MAX;
                y = safe_realloc(x, sizeof(struct ltedfapeg_array_69_s) + (newmax * sizeof(mpz_t)));
                y->count = 1;
                y->size = i+1;
                y->max = newmax;
                release_ltedfapeg_array_69(x);}
           else {y = copy_ltedfapeg_array_69(x );
                x->count--;};
        mpz_set(y->elems[i], v);
        return y;}




mpz_ptr_t f_ltedfapeg_closure_70(struct ltedfapeg_closure_70_s * closure, uint32_t bvar){
if (closure->htbl != NULL){
        ltedfapeg_funtype_68_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_ltedfapeg_funtype_68(htbl, bvar, hash);
        ltedfapeg_funtype_68_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            mpz_ptr_t result;
            mpz_mk_set(result, entry.value);
            return result;}
        

        return h_ltedfapeg_closure_70(bvar, closure->fvar_1, closure->fvar_2);};

return h_ltedfapeg_closure_70(bvar, closure->fvar_1, closure->fvar_2);}

mpz_ptr_t m_ltedfapeg_closure_70(struct ltedfapeg_closure_70_s * closure, uint32_t bvar){
        return h_ltedfapeg_closure_70(bvar, closure->fvar_1, closure->fvar_2);}

extern mpz_ptr_t h_ltedfapeg_closure_70(uint32_t ivar_4, ltedfapeg_array_69_t ivar_2, uint32_t ivar_1){
        mpz_ptr_t result;
        bool_t ivar_5;
        uint8_t ivar_7;
        ivar_7 = (uint8_t)0;
        ivar_5 = (ivar_4 == ivar_7);
        if (ivar_5){ 
             uint32_t ivar_12;
             ivar_12 = (uint32_t)0;
             result = safe_malloc(sizeof(mpz_t));
             mpz_init(result);
             mpz_set(result, ivar_2->elems[ivar_12]);
} else {
        
             mpz_ptr_t ivar_13;
             ivar_13 = safe_malloc(sizeof(mpz_t));
             mpz_init(ivar_13);
             mpz_set(ivar_13, ivar_2->elems[ivar_4]);
             mpz_ptr_t ivar_14;
             ltedfapeg_funtype_68_t ivar_25;
             ivar_2->count++;
             ivar_25 = (ltedfapeg_funtype_68_t)ltedfapeg__sigma((uint32_t)ivar_1, (ltedfapeg_array_69_t)ivar_2);
             int32_t ivar_33;
             uint8_t ivar_21;
             ivar_21 = (uint8_t)1;
             ivar_33 = (int32_t)((uint64_t)ivar_4 - (uint64_t)ivar_21);
             uint32_t ivar_32;
             //copying to uint32 from int32;
             ivar_32 = (uint32_t)ivar_33;
             mpz_mk_set(ivar_14, ivar_25->ftbl->fptr(ivar_25, ivar_32));
             ivar_25->ftbl->rptr(ivar_25);
             mpz_mk_add(result, ivar_14, ivar_13);
};

        return result;
}

ltedfapeg_closure_70_t new_ltedfapeg_closure_70(void){
        static struct ltedfapeg_funtype_68_ftbl_s ftbl = {.fptr = (mpz_ptr_t (*)(ltedfapeg_funtype_68_t, uint32_t))&f_ltedfapeg_closure_70, .mptr = (mpz_ptr_t (*)(ltedfapeg_funtype_68_t, uint32_t))&m_ltedfapeg_closure_70, .rptr =  (void (*)(ltedfapeg_funtype_68_t))&release_ltedfapeg_closure_70, .cptr = (ltedfapeg_funtype_68_t (*)(ltedfapeg_funtype_68_t))&copy_ltedfapeg_closure_70};
        ltedfapeg_closure_70_t tmp = (ltedfapeg_closure_70_t) safe_malloc(sizeof(struct ltedfapeg_closure_70_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_70(ltedfapeg_funtype_68_t closure){
        ltedfapeg_closure_70_t x = (ltedfapeg_closure_70_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg_array_69(x->fvar_1);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_70_t copy_ltedfapeg_closure_70(ltedfapeg_closure_70_t x){
        ltedfapeg_closure_70_t y = new_ltedfapeg_closure_70();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = (uint32_t)x->fvar_2;
        if (x->htbl != NULL){
            ltedfapeg_funtype_68_htbl_t new_htbl = (ltedfapeg_funtype_68_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_68_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_68_hashentry_t * new_data = (ltedfapeg_funtype_68_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_68_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_68_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}

void release_ltedfapeg_funtype_71(ltedfapeg_funtype_71_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_71_t copy_ltedfapeg_funtype_71(ltedfapeg_funtype_71_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_71(ltedfapeg_funtype_71_t x, ltedfapeg_funtype_71_t y){
        return false;}

char* json_ltedfapeg_funtype_71(ltedfapeg_funtype_71_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_71\""); return result;}

void release_ltedfapeg_funtype_72(ltedfapeg_funtype_72_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_72_t copy_ltedfapeg_funtype_72(ltedfapeg_funtype_72_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_72(ltedfapeg_funtype_72_t x, ltedfapeg_funtype_72_t y){
        return false;}

char* json_ltedfapeg_funtype_72(ltedfapeg_funtype_72_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_72\""); return result;}


bool_t f_ltedfapeg_closure_73(struct ltedfapeg_closure_73_s * closure, ltedfapeg__ent_adt_t bvar){
        bool_t result = h_ltedfapeg_closure_73(bvar); 
        return result;}

bool_t m_ltedfapeg_closure_73(struct ltedfapeg_closure_73_s * closure, ltedfapeg__ent_adt_t bvar){
        return h_ltedfapeg_closure_73(bvar);}

extern bool_t h_ltedfapeg_closure_73(ltedfapeg__ent_adt_t ivar_19){
        bool_t result;
        result = (bool_t)r_ltedfapeg__pushp((ltedfapeg__ent_adt_t)ivar_19);

        return result;
}

ltedfapeg_closure_73_t new_ltedfapeg_closure_73(void){
        static struct ltedfapeg_funtype_55_ftbl_s ftbl = {.fptr = (bool_t (*)(ltedfapeg_funtype_55_t, ltedfapeg__ent_adt_t))&f_ltedfapeg_closure_73, .mptr = (bool_t (*)(ltedfapeg_funtype_55_t, ltedfapeg__ent_adt_t))&m_ltedfapeg_closure_73, .rptr =  (void (*)(ltedfapeg_funtype_55_t))&release_ltedfapeg_closure_73, .cptr = (ltedfapeg_funtype_55_t (*)(ltedfapeg_funtype_55_t))&copy_ltedfapeg_closure_73};
        ltedfapeg_closure_73_t tmp = (ltedfapeg_closure_73_t) safe_malloc(sizeof(struct ltedfapeg_closure_73_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_73(ltedfapeg_funtype_55_t closure){
        ltedfapeg_closure_73_t x = (ltedfapeg_closure_73_t)closure;
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_73_t copy_ltedfapeg_closure_73(ltedfapeg_closure_73_t x){
        ltedfapeg_closure_73_t y = new_ltedfapeg_closure_73();
        y->ftbl = x->ftbl;

        if (x->htbl != NULL){
            ltedfapeg_funtype_55_htbl_t new_htbl = (ltedfapeg_funtype_55_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_55_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_55_hashentry_t * new_data = (ltedfapeg_funtype_55_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_55_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_55_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


bool_t f_ltedfapeg_closure_74(struct ltedfapeg_closure_74_s * closure, ltedfapeg__ent_adt_t bvar){
        bool_t result = h_ltedfapeg_closure_74(bvar); 
        return result;}

bool_t m_ltedfapeg_closure_74(struct ltedfapeg_closure_74_s * closure, ltedfapeg__ent_adt_t bvar){
        return h_ltedfapeg_closure_74(bvar);}

extern bool_t h_ltedfapeg_closure_74(ltedfapeg__ent_adt_t ivar_9){
        bool_t result;
        result = (bool_t)ltedfapeg__good_or_failp((ltedfapeg__ent_adt_t)ivar_9);

        return result;
}

ltedfapeg_closure_74_t new_ltedfapeg_closure_74(void){
        static struct ltedfapeg_funtype_55_ftbl_s ftbl = {.fptr = (bool_t (*)(ltedfapeg_funtype_55_t, ltedfapeg__ent_adt_t))&f_ltedfapeg_closure_74, .mptr = (bool_t (*)(ltedfapeg_funtype_55_t, ltedfapeg__ent_adt_t))&m_ltedfapeg_closure_74, .rptr =  (void (*)(ltedfapeg_funtype_55_t))&release_ltedfapeg_closure_74, .cptr = (ltedfapeg_funtype_55_t (*)(ltedfapeg_funtype_55_t))&copy_ltedfapeg_closure_74};
        ltedfapeg_closure_74_t tmp = (ltedfapeg_closure_74_t) safe_malloc(sizeof(struct ltedfapeg_closure_74_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_74(ltedfapeg_funtype_55_t closure){
        ltedfapeg_closure_74_t x = (ltedfapeg_closure_74_t)closure;
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_74_t copy_ltedfapeg_closure_74(ltedfapeg_closure_74_t x){
        ltedfapeg_closure_74_t y = new_ltedfapeg_closure_74();
        y->ftbl = x->ftbl;

        if (x->htbl != NULL){
            ltedfapeg_funtype_55_htbl_t new_htbl = (ltedfapeg_funtype_55_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_55_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_55_hashentry_t * new_data = (ltedfapeg_funtype_55_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_55_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_55_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}

void release_ltedfapeg_funtype_75(ltedfapeg_funtype_75_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_75_t copy_ltedfapeg_funtype_75(ltedfapeg_funtype_75_t x){return x->ftbl->cptr(x);}

uint32_t lookup_ltedfapeg_funtype_75(ltedfapeg_funtype_75_htbl_t htbl, uint64_t i, uint32_t ihash){
        uint32_t mask = htbl->size - 1;
        uint32_t hashindex = ihash & mask;
        ltedfapeg_funtype_75_hashentry_t data = htbl->data[hashindex];
        bool_t keyzero;

        keyzero = (data.key == 0);
        bool_t keymatch;
        keymatch = (data.key == i);
        while ((!keyzero || data.keyhash != 0) &&
                 (data.keyhash != ihash || !keymatch)){
                hashindex++;
                hashindex = hashindex & mask;
                data = htbl->data[hashindex];

                keyzero = (data.key == 0);

                keymatch = (data.key == i);
                }
        return hashindex;
        }

ltedfapeg_funtype_75_t dupdate_ltedfapeg_funtype_75(ltedfapeg_funtype_75_t a, uint64_t i, bool_t v){
        ltedfapeg_funtype_75_htbl_t htbl = a->htbl;
        if (htbl == NULL){//construct new htbl
                htbl = (ltedfapeg_funtype_75_htbl_t)safe_malloc(sizeof(struct ltedfapeg_funtype_75_htbl_s));
                htbl->size = HTBL_DEFAULT_SIZE; htbl->num_entries = 0;
                htbl->data = (ltedfapeg_funtype_75_hashentry_t *)safe_malloc(HTBL_DEFAULT_SIZE * sizeof(struct ltedfapeg_funtype_75_hashentry_s));
                for (uint32_t j = 0; j < HTBL_DEFAULT_SIZE; j++){htbl->data[j].key = (uint64_t)0; htbl->data[j].keyhash = 0;
                }
                a->htbl = htbl;
        }
        uint32_t size = htbl->size;
        uint32_t num_entries = htbl->num_entries;
        ltedfapeg_funtype_75_hashentry_t * data = htbl->data;
        if (num_entries/3 >  size/5){//resize data
                uint32_t new_size = 2*size; uint32_t new_mask = new_size - 1;
                if (size >= HTBL_MAX_SIZE) out_of_memory();
                ltedfapeg_funtype_75_hashentry_t * new_data = (ltedfapeg_funtype_75_hashentry_t *)safe_malloc(new_size * sizeof(struct ltedfapeg_funtype_75_hashentry_s));
                for (uint32_t j = 0; j < new_size; j++){
                        new_data[j].key = 0;
                        new_data[j].keyhash = 0;}
                for (uint32_t j = 0; j < size; j++){//transfer entries
                        uint32_t keyhash = data[j].keyhash;
                        bool_t keyzero;
                        keyzero = (data[j].key == 0);
                        if (!keyzero || keyhash != 0){
                                uint32_t new_loc = keyhash ^ new_mask;
                                keyzero = (new_data[new_loc].key == 0);
                                while (keyzero && new_data[new_loc].keyhash == 0){
                                        new_loc++;
                                        new_loc = new_loc ^ new_mask;

                                        keyzero = (new_data[new_loc].key == 0);
                                }
                                new_data[new_loc].key = (uint64_t)data[j].key;
                                new_data[new_loc].keyhash = keyhash;
                                new_data[new_loc].value = (bool_t)data[j].value;
                                }}
                htbl->size = new_size;
                htbl->num_entries = num_entries;
                htbl->data = new_data;
                safe_free(data);}
        uint32_t ihash = uint64_hash(i);
        uint32_t hashindex = lookup_ltedfapeg_funtype_75(htbl, i, ihash);
        ltedfapeg_funtype_75_hashentry_t hentry = htbl->data[hashindex];
        uint32_t hkeyhash = hentry.keyhash;
        bool_t hentrykeyzero;
        hentrykeyzero = (hentry.key == 0);

        if (hentrykeyzero && (hkeyhash == 0))
                {htbl->data[hashindex].key = (uint64_t)i; htbl->data[hashindex].keyhash = ihash; htbl->data[hashindex].value = (bool_t)v; htbl->num_entries++;}
            else {bool_t tempvalue;tempvalue = (bool_t)htbl->data[hashindex].value;htbl->data[hashindex].value = (bool_t)v;};
        return a;

}

ltedfapeg_funtype_75_t update_ltedfapeg_funtype_75(ltedfapeg_funtype_75_t a, uint64_t i, bool_t v){
        if (a->count == 1){
                return dupdate_ltedfapeg_funtype_75(a, i, v);
            } else {
                ltedfapeg_funtype_75_t x = copy_ltedfapeg_funtype_75(a);
                a->count--;
                return dupdate_ltedfapeg_funtype_75(x, i, v);
            }}

bool_t equal_ltedfapeg_funtype_75(ltedfapeg_funtype_75_t x, ltedfapeg_funtype_75_t y){
        return false;}

char* json_ltedfapeg_funtype_75(ltedfapeg_funtype_75_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_75\""); return result;}


bool_t f_ltedfapeg_closure_76(struct ltedfapeg_closure_76_s * closure, uint64_t bvar){
if (closure->htbl != NULL){
        ltedfapeg_funtype_75_htbl_t htbl = closure->htbl;
        uint32_t hash = uint64_hash(bvar);
        uint32_t hashindex = lookup_ltedfapeg_funtype_75(htbl, bvar, hash);
        ltedfapeg_funtype_75_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            bool_t result;
            result = (bool_t)entry.value;
            return result;}
        

        return h_ltedfapeg_closure_76(bvar, closure->fvar_1, closure->fvar_2);};

return h_ltedfapeg_closure_76(bvar, closure->fvar_1, closure->fvar_2);}

bool_t m_ltedfapeg_closure_76(struct ltedfapeg_closure_76_s * closure, uint64_t bvar){
        return h_ltedfapeg_closure_76(bvar, closure->fvar_1, closure->fvar_2);}

extern bool_t h_ltedfapeg_closure_76(uint64_t ivar_5, ltedfapeg_array_62_t ivar_2, uint32_t ivar_1){
        bool_t result;
        uint64_t ivar_6;
        ivar_2->count++;
        ivar_6 = (uint64_t)ltedfapeg__pushcount((uint32_t)ivar_1, (ltedfapeg_array_62_t)ivar_2);
        result = (ivar_6 == ivar_5);

        return result;
}

ltedfapeg_closure_76_t new_ltedfapeg_closure_76(void){
        static struct ltedfapeg_funtype_75_ftbl_s ftbl = {.fptr = (bool_t (*)(ltedfapeg_funtype_75_t, uint64_t))&f_ltedfapeg_closure_76, .mptr = (bool_t (*)(ltedfapeg_funtype_75_t, uint64_t))&m_ltedfapeg_closure_76, .rptr =  (void (*)(ltedfapeg_funtype_75_t))&release_ltedfapeg_closure_76, .cptr = (ltedfapeg_funtype_75_t (*)(ltedfapeg_funtype_75_t))&copy_ltedfapeg_closure_76};
        ltedfapeg_closure_76_t tmp = (ltedfapeg_closure_76_t) safe_malloc(sizeof(struct ltedfapeg_closure_76_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_76(ltedfapeg_funtype_75_t closure){
        ltedfapeg_closure_76_t x = (ltedfapeg_closure_76_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg_array_62(x->fvar_1);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_76_t copy_ltedfapeg_closure_76(ltedfapeg_closure_76_t x){
        ltedfapeg_closure_76_t y = new_ltedfapeg_closure_76();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = (uint32_t)x->fvar_2;
        if (x->htbl != NULL){
            ltedfapeg_funtype_75_htbl_t new_htbl = (ltedfapeg_funtype_75_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_75_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_75_hashentry_t * new_data = (ltedfapeg_funtype_75_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_75_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_75_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


bool_t f_ltedfapeg_closure_77(struct ltedfapeg_closure_77_s * closure, ltedfapeg__ent_adt_t bvar){
        bool_t result = h_ltedfapeg_closure_77(bvar, closure->fvar_1, closure->fvar_2, closure->fvar_3, closure->fvar_4); 
        return result;}

bool_t m_ltedfapeg_closure_77(struct ltedfapeg_closure_77_s * closure, ltedfapeg__ent_adt_t bvar){
        return h_ltedfapeg_closure_77(bvar, closure->fvar_1, closure->fvar_2, closure->fvar_3, closure->fvar_4);}

extern bool_t h_ltedfapeg_closure_77(ltedfapeg__ent_adt_t ivar_7, ltedfapeg_array_62_t ivar_4, uint32_t ivar_1, ltedfapeg__lang_spec_t ivar_2, uint64_t ivar_3){
        bool_t result;
        bool_t ivar_8;
        uint8_t ivar_9;
        ivar_7->count++;
        ivar_9 = (uint8_t)ltedfapeg__ent_adt_nt((ltedfapeg__ent_adt_t)ivar_7);
        uint8_t ivar_10;
        ivar_10 = (uint8_t)ltedfapeg__num_non_terminals();
        ivar_8 = (ivar_9 >= ivar_10);
        if (ivar_8){ 
             release_ltedfapeg__ent_adt(ivar_7);
             uint8_t ivar_16;
             ivar_16 = (uint8_t)0;
             result = (ivar_3 == ivar_16);
} else {
        
             /* entry */ ltedfapeg__ent_adt_t ivar_18;
             ltedfapeg_array_61_t ivar_24;
             uint32_t ivar_32;
             ivar_7->count++;
             ivar_32 = (uint32_t)ltedfapeg__ent_adt_pos((ltedfapeg__ent_adt_t)ivar_7);
             ivar_24 = (ltedfapeg_array_61_t)ivar_4->elems[ivar_32];
             ivar_24->count++;
             uint8_t ivar_33;
             ivar_7->count++;
             ivar_33 = (uint8_t)ltedfapeg__ent_adt_nt((ltedfapeg__ent_adt_t)ivar_7);
             ivar_18 = (ltedfapeg__ent_adt_t)ivar_24->elems[ivar_33];
             ivar_18->count++;
             release_ltedfapeg_array_61(ivar_24);
             bool_t ivar_34;
             ltedfapeg_funtype_55_t ivar_39;
             ivar_39 = (ltedfapeg_funtype_55_t)ltedfapeg__good_push_entryp((uint32_t)ivar_1);
             ivar_18->count++;
             ivar_34 = (bool_t)ivar_39->ftbl->fptr(ivar_39, ivar_18);
             ivar_39->ftbl->rptr(ivar_39);
             if (ivar_34){  
           bool_t ivar_45;
           bool_t ivar_47;
           uint8_t ivar_49;
           ivar_18->count++;
           ivar_49 = (uint8_t)ltedfapeg__ent_adt_nt((ltedfapeg__ent_adt_t)ivar_18);
           uint8_t ivar_50;
           ivar_50 = (uint8_t)ltedfapeg__num_non_terminals();
           ivar_47 = (ivar_49 == ivar_50);
           if (ivar_47){   
           release_ltedfapeg__ent_adt(ivar_7);
           ivar_45 = (bool_t) true;
} else {
           
           ltedfapeg_funtype_65_t ivar_59;
           ivar_2->count++;
           ivar_4->count++;
           ivar_59 = (ltedfapeg_funtype_65_t)ltedfapeg__successor((uint32_t)ivar_1, (ltedfapeg__lang_spec_t)ivar_2, (ltedfapeg_array_62_t)ivar_4);
           ivar_18->count++;
           ivar_45 = (bool_t)ivar_59->ftbl->mptr(ivar_59, ivar_18, ivar_7);
           ivar_59->ftbl->rptr(ivar_59);
};
           if (ivar_45){   
           bool_t ivar_72;
           uint8_t ivar_75;
           ivar_75 = (uint8_t)0;
           ivar_72 = (ivar_3 > ivar_75);
           if (ivar_72){    
            ltedfapeg_funtype_55_t ivar_80;
            mpz_ptr_t ivar_96;
            uint8_t ivar_87;
            ivar_87 = (uint8_t)1;
            mpz_mk_set_ui(ivar_96, (uint64_t)ivar_3);
            mpz_sub_ui(ivar_96, ivar_96, (uint64_t)ivar_87);
            uint64_t ivar_92;
            //copying to uint64 from mpz;
            ivar_92 = (uint64_t)mpz_get_ui(ivar_96);
            mpz_clear(ivar_96);
            ivar_2->count++;
            ivar_4->count++;
            ivar_80 = (ltedfapeg_funtype_55_t)ltedfapeg__good_stackp((uint32_t)ivar_1, (ltedfapeg__lang_spec_t)ivar_2, (uint64_t)ivar_92, (ltedfapeg_array_62_t)ivar_4);
            result = (bool_t)ivar_80->ftbl->fptr(ivar_80, ivar_18);
            ivar_80->ftbl->rptr(ivar_80);
} else {
           
            release_ltedfapeg__ent_adt(ivar_18);
            result = (bool_t) false;
};
} else {
           
           release_ltedfapeg__ent_adt(ivar_18);
           result = (bool_t) false;
};
} else {
             
           release_ltedfapeg__ent_adt(ivar_18);
           release_ltedfapeg__ent_adt(ivar_7);
           result = (bool_t) false;
};
};

        return result;
}

ltedfapeg_closure_77_t new_ltedfapeg_closure_77(void){
        static struct ltedfapeg_funtype_55_ftbl_s ftbl = {.fptr = (bool_t (*)(ltedfapeg_funtype_55_t, ltedfapeg__ent_adt_t))&f_ltedfapeg_closure_77, .mptr = (bool_t (*)(ltedfapeg_funtype_55_t, ltedfapeg__ent_adt_t))&m_ltedfapeg_closure_77, .rptr =  (void (*)(ltedfapeg_funtype_55_t))&release_ltedfapeg_closure_77, .cptr = (ltedfapeg_funtype_55_t (*)(ltedfapeg_funtype_55_t))&copy_ltedfapeg_closure_77};
        ltedfapeg_closure_77_t tmp = (ltedfapeg_closure_77_t) safe_malloc(sizeof(struct ltedfapeg_closure_77_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_77(ltedfapeg_funtype_55_t closure){
        ltedfapeg_closure_77_t x = (ltedfapeg_closure_77_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg_array_62(x->fvar_1);
         release_ltedfapeg__lang_spec(x->fvar_3);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_77_t copy_ltedfapeg_closure_77(ltedfapeg_closure_77_t x){
        ltedfapeg_closure_77_t y = new_ltedfapeg_closure_77();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = (uint32_t)x->fvar_2;
        y->fvar_3 = x->fvar_3; x->fvar_3->count++;
        y->fvar_4 = (uint64_t)x->fvar_4;
        if (x->htbl != NULL){
            ltedfapeg_funtype_55_htbl_t new_htbl = (ltedfapeg_funtype_55_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_55_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_55_hashentry_t * new_data = (ltedfapeg_funtype_55_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_55_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_55_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


bool_t f_ltedfapeg_closure_78(struct ltedfapeg_closure_78_s * closure, ltedfapeg_record_64_t bvar){
        ltedfapeg__ent_adt_t bvar_1;
        bvar_1 = (ltedfapeg__ent_adt_t)bvar->project_1;
        bvar->project_1->count++;
        ltedfapeg__ent_adt_t bvar_2;
        bvar_2 = (ltedfapeg__ent_adt_t)bvar->project_2;
        bvar->project_2->count++;
        release_ltedfapeg_record_64(bvar);
        bool_t result = h_ltedfapeg_closure_78(bvar_1, bvar_2, closure->fvar_1, closure->fvar_2, closure->fvar_3, closure->fvar_4); 
        release_ltedfapeg__ent_adt(bvar_1);
        release_ltedfapeg__ent_adt(bvar_2);
        return result;}

bool_t m_ltedfapeg_closure_78(struct ltedfapeg_closure_78_s * closure, ltedfapeg__ent_adt_t bvar_1, ltedfapeg__ent_adt_t bvar_2){
        return h_ltedfapeg_closure_78(bvar_1, bvar_2, closure->fvar_1, closure->fvar_2, closure->fvar_3, closure->fvar_4);}

extern bool_t h_ltedfapeg_closure_78(ltedfapeg__ent_adt_t ivar_7, ltedfapeg__ent_adt_t ivar_8, ltedfapeg_array_62_t ivar_4, uint32_t ivar_1, ltedfapeg__lang_spec_t ivar_2, uint64_t ivar_3){
        bool_t result;
        bool_t ivar_9;
        uint8_t ivar_10;
        ivar_8->count++;
        ivar_10 = (uint8_t)ltedfapeg__ent_adt_nt((ltedfapeg__ent_adt_t)ivar_8);
        uint8_t ivar_11;
        ivar_11 = (uint8_t)ltedfapeg__num_non_terminals();
        ivar_9 = (ivar_10 >= ivar_11);
        if (ivar_9){ 
             release_ltedfapeg__ent_adt(ivar_7);
             release_ltedfapeg__ent_adt(ivar_8);
             result = (bool_t) false;
} else {
        
             bool_t ivar_16;
             ivar_7->count++;
             ivar_8->count++;
             ivar_16 = (bool_t) equal_ltedfapeg__ent_adt(ivar_7, ivar_8);
             if (ivar_16){  
           release_ltedfapeg__ent_adt(ivar_7);
           release_ltedfapeg__ent_adt(ivar_8);
           result = (bool_t) true;
} else {
             
           ltedfapeg_funtype_65_t ivar_40;
           mpz_ptr_t ivar_56;
           uint8_t ivar_47;
           ivar_47 = (uint8_t)1;
           mpz_mk_set_ui(ivar_56, (uint64_t)ivar_3);
           mpz_sub_ui(ivar_56, ivar_56, (uint64_t)ivar_47);
           uint64_t ivar_52;
           //copying to uint64 from mpz;
           ivar_52 = (uint64_t)mpz_get_ui(ivar_56);
           mpz_clear(ivar_56);
           ivar_2->count++;
           ivar_4->count++;
           ivar_40 = (ltedfapeg_funtype_65_t)ltedfapeg__mem_stackp((uint32_t)ivar_1, (ltedfapeg__lang_spec_t)ivar_2, (uint64_t)ivar_52, (ltedfapeg_array_62_t)ivar_4);
           ltedfapeg__ent_adt_t ivar_58;
           ltedfapeg_array_61_t ivar_28;
           uint32_t ivar_36;
           ivar_8->count++;
           ivar_36 = (uint32_t)ltedfapeg__ent_adt_pos((ltedfapeg__ent_adt_t)ivar_8);
           ivar_28 = (ltedfapeg_array_61_t)ivar_4->elems[ivar_36];
           ivar_28->count++;
           uint8_t ivar_37;
           ivar_37 = (uint8_t)ltedfapeg__ent_adt_nt((ltedfapeg__ent_adt_t)ivar_8);
           ivar_58 = (ltedfapeg__ent_adt_t)ivar_28->elems[ivar_37];
           ivar_58->count++;
           release_ltedfapeg_array_61(ivar_28);
           result = (bool_t)ivar_40->ftbl->mptr(ivar_40, ivar_7, ivar_58);
           ivar_40->ftbl->rptr(ivar_40);
};
};

        return result;
}

ltedfapeg_closure_78_t new_ltedfapeg_closure_78(void){
        static struct ltedfapeg_funtype_65_ftbl_s ftbl = {.fptr = (bool_t (*)(ltedfapeg_funtype_65_t, ltedfapeg_record_64_t))&f_ltedfapeg_closure_78, .mptr = (bool_t (*)(ltedfapeg_funtype_65_t, ltedfapeg__ent_adt_t, ltedfapeg__ent_adt_t))&m_ltedfapeg_closure_78, .rptr =  (void (*)(ltedfapeg_funtype_65_t))&release_ltedfapeg_closure_78, .cptr = (ltedfapeg_funtype_65_t (*)(ltedfapeg_funtype_65_t))&copy_ltedfapeg_closure_78};
        ltedfapeg_closure_78_t tmp = (ltedfapeg_closure_78_t) safe_malloc(sizeof(struct ltedfapeg_closure_78_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_78(ltedfapeg_funtype_65_t closure){
        ltedfapeg_closure_78_t x = (ltedfapeg_closure_78_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg_array_62(x->fvar_1);
         release_ltedfapeg__lang_spec(x->fvar_3);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_78_t copy_ltedfapeg_closure_78(ltedfapeg_closure_78_t x){
        ltedfapeg_closure_78_t y = new_ltedfapeg_closure_78();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = (uint32_t)x->fvar_2;
        y->fvar_3 = x->fvar_3; x->fvar_3->count++;
        y->fvar_4 = (uint64_t)x->fvar_4;
        if (x->htbl != NULL){
            ltedfapeg_funtype_65_htbl_t new_htbl = (ltedfapeg_funtype_65_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_65_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_65_hashentry_t * new_data = (ltedfapeg_funtype_65_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_65_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_65_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


bool_t f_ltedfapeg_closure_79(struct ltedfapeg_closure_79_s * closure, ltedfapeg__ent_adt_t bvar){
        bool_t result = h_ltedfapeg_closure_79(bvar, closure->fvar_1, closure->fvar_2, closure->fvar_3, closure->fvar_4); 
        return result;}

bool_t m_ltedfapeg_closure_79(struct ltedfapeg_closure_79_s * closure, ltedfapeg__ent_adt_t bvar){
        return h_ltedfapeg_closure_79(bvar, closure->fvar_1, closure->fvar_2, closure->fvar_3, closure->fvar_4);}

extern bool_t h_ltedfapeg_closure_79(ltedfapeg__ent_adt_t ivar_7, ltedfapeg_array_62_t ivar_4, uint32_t ivar_1, ltedfapeg__lang_spec_t ivar_2, uint64_t ivar_3){
        bool_t result;
        bool_t ivar_8;
        uint8_t ivar_9;
        ivar_7->count++;
        ivar_9 = (uint8_t)ltedfapeg__ent_adt_nt((ltedfapeg__ent_adt_t)ivar_7);
        uint8_t ivar_10;
        ivar_10 = (uint8_t)ltedfapeg__num_non_terminals();
        ivar_8 = (ivar_9 >= ivar_10);
        if (ivar_8){ 
             release_ltedfapeg__ent_adt(ivar_7);
             result = (bool_t) true;
} else {
        
             /* rest */ ltedfapeg__ent_adt_t ivar_15;
             ltedfapeg_array_61_t ivar_21;
             uint32_t ivar_29;
             ivar_7->count++;
             ivar_29 = (uint32_t)ltedfapeg__ent_adt_pos((ltedfapeg__ent_adt_t)ivar_7);
             ivar_21 = (ltedfapeg_array_61_t)ivar_4->elems[ivar_29];
             ivar_21->count++;
             uint8_t ivar_30;
             ivar_7->count++;
             ivar_30 = (uint8_t)ltedfapeg__ent_adt_nt((ltedfapeg__ent_adt_t)ivar_7);
             ivar_15 = (ltedfapeg__ent_adt_t)ivar_21->elems[ivar_30];
             ivar_15->count++;
             release_ltedfapeg_array_61(ivar_21);
             bool_t ivar_31;
             bool_t ivar_33;
             ltedfapeg_funtype_65_t ivar_38;
             mpz_ptr_t ivar_54;
             uint8_t ivar_45;
             ivar_45 = (uint8_t)1;
             mpz_mk_set_ui(ivar_54, (uint64_t)ivar_3);
             mpz_sub_ui(ivar_54, ivar_54, (uint64_t)ivar_45);
             uint64_t ivar_50;
             //copying to uint64 from mpz;
             ivar_50 = (uint64_t)mpz_get_ui(ivar_54);
             mpz_clear(ivar_54);
             ivar_2->count++;
             ivar_4->count++;
             ivar_38 = (ltedfapeg_funtype_65_t)ltedfapeg__mem_stackp((uint32_t)ivar_1, (ltedfapeg__lang_spec_t)ivar_2, (uint64_t)ivar_50, (ltedfapeg_array_62_t)ivar_4);
             ivar_7->count++;
             ivar_33 = (bool_t)ivar_38->ftbl->mptr(ivar_38, ivar_7, ivar_15);
             ivar_38->ftbl->rptr(ivar_38);
             ivar_31 = !ivar_33;
             if (ivar_31){  
           ltedfapeg_funtype_55_t ivar_76;
           mpz_ptr_t ivar_92;
           uint8_t ivar_83;
           ivar_83 = (uint8_t)1;
           mpz_mk_set_ui(ivar_92, (uint64_t)ivar_3);
           mpz_sub_ui(ivar_92, ivar_92, (uint64_t)ivar_83);
           uint64_t ivar_88;
           //copying to uint64 from mpz;
           ivar_88 = (uint64_t)mpz_get_ui(ivar_92);
           mpz_clear(ivar_92);
           ivar_2->count++;
           ivar_4->count++;
           ivar_76 = (ltedfapeg_funtype_55_t)ltedfapeg__fine_stackp((uint32_t)ivar_1, (ltedfapeg__lang_spec_t)ivar_2, (uint64_t)ivar_88, (ltedfapeg_array_62_t)ivar_4);
           ltedfapeg__ent_adt_t ivar_93;
           ltedfapeg_array_61_t ivar_64;
           uint32_t ivar_72;
           ivar_7->count++;
           ivar_72 = (uint32_t)ltedfapeg__ent_adt_pos((ltedfapeg__ent_adt_t)ivar_7);
           ivar_64 = (ltedfapeg_array_61_t)ivar_4->elems[ivar_72];
           ivar_64->count++;
           uint8_t ivar_73;
           ivar_73 = (uint8_t)ltedfapeg__ent_adt_nt((ltedfapeg__ent_adt_t)ivar_7);
           ivar_93 = (ltedfapeg__ent_adt_t)ivar_64->elems[ivar_73];
           ivar_93->count++;
           release_ltedfapeg_array_61(ivar_64);
           result = (bool_t)ivar_76->ftbl->fptr(ivar_76, ivar_93);
           ivar_76->ftbl->rptr(ivar_76);
} else {
             
           release_ltedfapeg__ent_adt(ivar_7);
           result = (bool_t) false;
};
};

        return result;
}

ltedfapeg_closure_79_t new_ltedfapeg_closure_79(void){
        static struct ltedfapeg_funtype_55_ftbl_s ftbl = {.fptr = (bool_t (*)(ltedfapeg_funtype_55_t, ltedfapeg__ent_adt_t))&f_ltedfapeg_closure_79, .mptr = (bool_t (*)(ltedfapeg_funtype_55_t, ltedfapeg__ent_adt_t))&m_ltedfapeg_closure_79, .rptr =  (void (*)(ltedfapeg_funtype_55_t))&release_ltedfapeg_closure_79, .cptr = (ltedfapeg_funtype_55_t (*)(ltedfapeg_funtype_55_t))&copy_ltedfapeg_closure_79};
        ltedfapeg_closure_79_t tmp = (ltedfapeg_closure_79_t) safe_malloc(sizeof(struct ltedfapeg_closure_79_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_79(ltedfapeg_funtype_55_t closure){
        ltedfapeg_closure_79_t x = (ltedfapeg_closure_79_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg_array_62(x->fvar_1);
         release_ltedfapeg__lang_spec(x->fvar_3);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_79_t copy_ltedfapeg_closure_79(ltedfapeg_closure_79_t x){
        ltedfapeg_closure_79_t y = new_ltedfapeg_closure_79();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = (uint32_t)x->fvar_2;
        y->fvar_3 = x->fvar_3; x->fvar_3->count++;
        y->fvar_4 = (uint64_t)x->fvar_4;
        if (x->htbl != NULL){
            ltedfapeg_funtype_55_htbl_t new_htbl = (ltedfapeg_funtype_55_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_55_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_55_hashentry_t * new_data = (ltedfapeg_funtype_55_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_55_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_55_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


ltedfapeg_record_80_t new_ltedfapeg_record_80(void){
        ltedfapeg_record_80_t tmp = (ltedfapeg_record_80_t) safe_malloc(sizeof(struct ltedfapeg_record_80_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapeg_record_80(ltedfapeg_record_80_t x){
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg_array_62(x->project_1);
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_ltedfapeg_record_80_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg_record_80((ltedfapeg_record_80_t)x);
}

ltedfapeg_record_80_t copy_ltedfapeg_record_80(ltedfapeg_record_80_t x){
        ltedfapeg_record_80_t y = new_ltedfapeg_record_80();
        y->project_1 = x->project_1;
        if (y->project_1 != NULL){y->project_1->count++;};
        y->project_2 = (uint32_t)x->project_2;
        y->project_3 = (uint8_t)x->project_3;
        y->project_4 = (uint64_t)x->project_4;
        y->count = 1;
        return y;}

bool_t equal_ltedfapeg_record_80(ltedfapeg_record_80_t x, ltedfapeg_record_80_t y){
        bool_t tmp = true;
        tmp = tmp && equal_ltedfapeg_array_62(x->project_1, y->project_1);
        tmp = tmp && x->project_2 == y->project_2;
        tmp = tmp && x->project_3 == y->project_3;
        tmp = tmp && x->project_4 == y->project_4;
        return tmp;}

char * json_ltedfapeg_record_80(ltedfapeg_record_80_t x){
        char * tmp[4]; 
        char * fld0 = safe_malloc(21);
         sprintf(fld0, "\"project_1\" : ");
        tmp[0] = safe_strcat(fld0, json_ltedfapeg_array_62(x->project_1));
        char * fld1 = safe_malloc(21);
         sprintf(fld1, "\"project_2\" : ");
        tmp[1] = safe_strcat(fld1, json_uint32(x->project_2));
        char * fld2 = safe_malloc(21);
         sprintf(fld2, "\"project_3\" : ");
        tmp[2] = safe_strcat(fld2, json_uint8(x->project_3));
        char * fld3 = safe_malloc(21);
         sprintf(fld3, "\"project_4\" : ");
        tmp[3] = safe_strcat(fld3, json_uint64(x->project_4));
         char * result = json_list_with_sep(tmp, 4,  '{', ',', '}');
         for (uint32_t i = 0; i < 4; i++) free(tmp[i]);
        return result;}

bool_t equal_ltedfapeg_record_80_ptr(pointer_t x, pointer_t y, actual_ltedfapeg_record_80_t T){
        return equal_ltedfapeg_record_80((ltedfapeg_record_80_t)x, (ltedfapeg_record_80_t)y);
}

char * json_ltedfapeg_record_80_ptr(pointer_t x, actual_ltedfapeg_record_80_t T){
        return json_ltedfapeg_record_80((ltedfapeg_record_80_t)x);
}

actual_ltedfapeg_record_80_t actual_ltedfapeg_record_80(){
        actual_ltedfapeg_record_80_t new = (actual_ltedfapeg_record_80_t)safe_malloc(sizeof(struct actual_ltedfapeg_record_80_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg_record_80_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg_record_80_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg_record_80_ptr);
 

 
        return new;
 };

ltedfapeg_record_80_t update_ltedfapeg_record_80_project_1(ltedfapeg_record_80_t x, ltedfapeg_array_62_t v){
        ltedfapeg_record_80_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->project_1 != NULL){release_ltedfapeg_array_62(x->project_1);};}
        else {y = copy_ltedfapeg_record_80(x); x->count--; y->project_1->count--;};
        y->project_1 = (ltedfapeg_array_62_t)v;
        return y;}

ltedfapeg_record_80_t update_ltedfapeg_record_80_project_2(ltedfapeg_record_80_t x, uint32_t v){
        ltedfapeg_record_80_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_80(x); x->count--;};
        y->project_2 = (uint32_t)v;
        return y;}

ltedfapeg_record_80_t update_ltedfapeg_record_80_project_3(ltedfapeg_record_80_t x, uint8_t v){
        ltedfapeg_record_80_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_80(x); x->count--;};
        y->project_3 = (uint8_t)v;
        return y;}

ltedfapeg_record_80_t update_ltedfapeg_record_80_project_4(ltedfapeg_record_80_t x, uint64_t v){
        ltedfapeg_record_80_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_80(x); x->count--;};
        y->project_4 = (uint64_t)v;
        return y;}



void release_ltedfapeg_funtype_81(ltedfapeg_funtype_81_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_81_t copy_ltedfapeg_funtype_81(ltedfapeg_funtype_81_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_81(ltedfapeg_funtype_81_t x, ltedfapeg_funtype_81_t y){
        return false;}

char* json_ltedfapeg_funtype_81(ltedfapeg_funtype_81_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_81\""); return result;}


ltedfapeg_array_82_t new_ltedfapeg_array_82(uint32_t size){
        ltedfapeg_array_82_t tmp = (ltedfapeg_array_82_t) safe_malloc(sizeof(struct ltedfapeg_array_82_s) + (size * sizeof(uint8_t)));
        tmp->count = 1;
        tmp->size = size;;
        tmp->max = size;
         return tmp;}

void release_ltedfapeg_array_82(ltedfapeg_array_82_t x){
        x->count--;
         if (x->count <= 0){safe_free(x);}
}

void release_ltedfapeg_array_82_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg_array_82((ltedfapeg_array_82_t)x);
}

ltedfapeg_array_82_t copy_ltedfapeg_array_82(ltedfapeg_array_82_t x){
        ltedfapeg_array_82_t tmp = new_ltedfapeg_array_82(x->size);
        tmp->count = 1;
        for (uint32_t i = 0; i < x->size; i++){tmp->elems[i] = (uint8_t)x->elems[i];};
         return tmp;}

bool_t equal_ltedfapeg_array_82(ltedfapeg_array_82_t x, ltedfapeg_array_82_t y){
        bool_t tmp = true;
        uint32_t i = 0;
        while (i < x->size && tmp){tmp = (x->elems[i] == y->elems[i]); i++;};
        return tmp;}

char * json_ltedfapeg_array_82(ltedfapeg_array_82_t x){
        char ** tmp = (char **)safe_malloc(sizeof(void *) * x->size);
        for (uint32_t i = 0; i < x->size; i++){tmp[i] = json_uint8(x->elems[i]);};
        char * result = json_list_with_sep(tmp, x->size, '[', ',', ']');
        for (uint32_t i = 0; i < x->size; i++) free(tmp[i]);
        free(tmp);
        return result;}

bool_t equal_ltedfapeg_array_82_ptr(pointer_t x, pointer_t y, type_actual_t T){
        return equal_ltedfapeg_array_82((ltedfapeg_array_82_t)x, (ltedfapeg_array_82_t)y);
}

char * json_ltedfapeg_array_82_ptr(pointer_t x, type_actual_t T){
        return json_ltedfapeg_array_82((ltedfapeg_array_82_t)x);
}

actual_ltedfapeg_array_82_t actual_ltedfapeg_array_82(){
        actual_ltedfapeg_array_82_t new = (actual_ltedfapeg_array_82_t)safe_malloc(sizeof(struct actual_ltedfapeg_array_82_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg_array_82_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg_array_82_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg_array_82_ptr);
 

 
        return new;
 };

ltedfapeg_array_82_t update_ltedfapeg_array_82(ltedfapeg_array_82_t x, uint32_t i, uint8_t v){
        ltedfapeg_array_82_t y; 
         if (x->count == 1){y = x;}
           else {y = copy_ltedfapeg_array_82(x );
                x->count--;};
        y->elems[i] = (uint8_t)v;
        return y;}

ltedfapeg_array_82_t upgrade_ltedfapeg_array_82(ltedfapeg_array_82_t x, uint32_t i, uint8_t v){
        ltedfapeg_array_82_t y; 
         if (x->count == 1 && i < x->max){y = x;}
           else if (i > x->max){uint32_t newmax = x->max <= UINT32_MAX/2 ? 2*x->max: UINT32_MAX;
                y = safe_realloc(x, sizeof(struct ltedfapeg_array_82_s) + (newmax * sizeof(uint8_t)));
                y->count = 1;
                y->size = i+1;
                y->max = newmax;
                release_ltedfapeg_array_82(x);}
           else {y = copy_ltedfapeg_array_82(x );
                x->count--;};
        y->elems[i] = (uint8_t)v;
        return y;}




bool_t f_ltedfapeg_closure_83(struct ltedfapeg_closure_83_s * closure, ltedfapeg_record_80_t bvar){
        ltedfapeg_array_62_t bvar_1;
        bvar_1 = (ltedfapeg_array_62_t)bvar->project_1;
        bvar->project_1->count++;
        uint32_t bvar_2;
        bvar_2 = (uint32_t)bvar->project_2;
        uint8_t bvar_3;
        bvar_3 = (uint8_t)bvar->project_3;
        uint64_t bvar_4;
        bvar_4 = (uint64_t)bvar->project_4;
        release_ltedfapeg_record_80(bvar);
        bool_t result = h_ltedfapeg_closure_83(bvar_1, bvar_2, bvar_3, bvar_4, closure->fvar_1, closure->fvar_2, closure->fvar_3); 
        release_ltedfapeg_array_62(bvar_1);
        return result;}

bool_t m_ltedfapeg_closure_83(struct ltedfapeg_closure_83_s * closure, ltedfapeg_array_62_t bvar_1, uint32_t bvar_2, uint8_t bvar_3, uint64_t bvar_4){
        return h_ltedfapeg_closure_83(bvar_1, bvar_2, bvar_3, bvar_4, closure->fvar_1, closure->fvar_2, closure->fvar_3);}

extern bool_t h_ltedfapeg_closure_83(ltedfapeg_array_62_t ivar_6, uint32_t ivar_8, uint8_t ivar_9, uint64_t ivar_10, ltedfapeg_array_82_t ivar_3, uint32_t ivar_1, ltedfapeg__lang_spec_t ivar_2){
        bool_t result;
        ltedfapeg__prepeg_adt_t ivar_11;
        ivar_11 = (ltedfapeg__prepeg_adt_t)ivar_2->elems[ivar_9];
        ivar_11->count++;
        bool_t ivar_44;
        ivar_11->count++;
        ivar_44 = (bool_t)r_ltedfapeg__anyp((ltedfapeg__prepeg_adt_t)ivar_11);
        if (ivar_44){ 
             release_ltedfapeg_array_62(ivar_6);
             dfa__dfa_t ivar_16;
             ivar_16 = (dfa__dfa_t)ltedfapeg__prepeg_adt_dfa((ltedfapeg__prepeg_adt_t)ivar_11);
             bool_t ivar_20;
             bool_t ivar_22;
             ivar_22 = (ivar_8 == ivar_1);
             if (ivar_22){  
           release_dfa__dfa(ivar_16);
           ivar_20 = (bool_t) true;
} else {
             
           dfa__dfaResult_adt_t ivar_38;
           ivar_3->count++;
           ivar_38 = (dfa__dfaResult_adt_t)dfa__DfaParse((dfa__dfa_t)ivar_16, (uint32_t)ivar_1, (dfa_array_20_t)ivar_3, (uint32_t)ivar_8);
           ivar_20 = (bool_t)r_dfa__failedp((dfa__dfaResult_adt_t)ivar_38);
};
             if (ivar_20){  
           uint8_t ivar_41;
           ivar_41 = (uint8_t)0;
           result = (ivar_10 == ivar_41);
} else {
             
           result = (bool_t) false;
};
} else {
        
             bool_t ivar_71;
             ivar_11->count++;
             ivar_71 = (bool_t)r_ltedfapeg__terminalp((ltedfapeg__prepeg_adt_t)ivar_11);
             if (ivar_71){  
           release_ltedfapeg_array_62(ivar_6);
           uint8_t ivar_48;
           ivar_48 = (uint8_t)ltedfapeg__prepeg_adt_a((ltedfapeg__prepeg_adt_t)ivar_11);
           bool_t ivar_52;
           bool_t ivar_54;
           ivar_54 = (ivar_8 == ivar_1);
           if (ivar_54){   
           ivar_52 = (bool_t) true;
} else {
           
           uint8_t ivar_60;
           ivar_60 = (uint8_t)ivar_3->elems[ivar_8];
           ivar_52 = (ivar_48 != ivar_60);
};
           if (ivar_52){   
           uint8_t ivar_68;
           ivar_68 = (uint8_t)0;
           result = (ivar_10 == ivar_68);
} else {
           
           result = (bool_t) false;
};
} else {
             
           bool_t ivar_258;
           ivar_11->count++;
           ivar_258 = (bool_t)r_ltedfapeg__ltep((ltedfapeg__prepeg_adt_t)ivar_11);
           if (ivar_258){   
           uint8_t ivar_75;
           ivar_11->count++;
           ivar_75 = (uint8_t)ltedfapeg__prepeg_adt_fst((ltedfapeg__prepeg_adt_t)ivar_11);
           uint8_t ivar_76;
           ivar_11->count++;
           ivar_76 = (uint8_t)ltedfapeg__prepeg_adt_lthen((ltedfapeg__prepeg_adt_t)ivar_11);
           uint8_t ivar_77;
           ivar_77 = (uint8_t)ltedfapeg__prepeg_adt_lelse((ltedfapeg__prepeg_adt_t)ivar_11);
           bool_t ivar_87;
           bool_t ivar_89;
           ltedfapeg__ent_adt_t ivar_102;
           ltedfapeg_array_61_t ivar_94;
           ivar_94 = (ltedfapeg_array_61_t)ivar_6->elems[ivar_8];
           ivar_94->count++;
           ivar_102 = (ltedfapeg__ent_adt_t)ivar_94->elems[ivar_75];
           ivar_102->count++;
           release_ltedfapeg_array_61(ivar_94);
           ivar_89 = (bool_t)r_ltedfapeg__failp((ltedfapeg__ent_adt_t)ivar_102);
           if (ivar_89){    
            bool_t ivar_103;
            ltedfapeg__ent_adt_t ivar_116;
            ltedfapeg_array_61_t ivar_108;
            ivar_108 = (ltedfapeg_array_61_t)ivar_6->elems[ivar_8];
            ivar_108->count++;
            ivar_116 = (ltedfapeg__ent_adt_t)ivar_108->elems[ivar_77];
            ivar_116->count++;
            release_ltedfapeg_array_61(ivar_108);
            ivar_103 = (bool_t)r_ltedfapeg__failp((ltedfapeg__ent_adt_t)ivar_116);
            if (ivar_103){     
             mpz_ptr_t ivar_118;
             uint8_t ivar_119;
             ivar_119 = (uint8_t)1;
             mpq_ptr_t ivar_120;
             uint64_t ivar_153;
             ltedfapeg__ent_adt_t ivar_134;
             ltedfapeg_array_61_t ivar_126;
             ivar_126 = (ltedfapeg_array_61_t)ivar_6->elems[ivar_8];
             ivar_126->count++;
             ivar_134 = (ltedfapeg__ent_adt_t)ivar_126->elems[ivar_75];
             ivar_134->count++;
             release_ltedfapeg_array_61(ivar_126);
             ivar_153 = (uint64_t)ltedfapeg__ent_adt_dep((ltedfapeg__ent_adt_t)ivar_134);
             mpq_ptr_t ivar_148;
             //copying to mpq from uint64;
             mpq_mk_set_ui(ivar_148, ivar_153);
             uint64_t ivar_152;
             ltedfapeg__ent_adt_t ivar_146;
             ltedfapeg_array_61_t ivar_138;
             ivar_138 = (ltedfapeg_array_61_t)ivar_6->elems[ivar_8];
             ivar_138->count++;
             ivar_146 = (ltedfapeg__ent_adt_t)ivar_138->elems[ivar_77];
             ivar_146->count++;
             release_ltedfapeg_array_61(ivar_138);
             ivar_152 = (uint64_t)ltedfapeg__ent_adt_dep((ltedfapeg__ent_adt_t)ivar_146);
             mpq_ptr_t ivar_149;
             //copying to mpq from uint64;
             mpq_mk_set_ui(ivar_149, ivar_152);
             ivar_120 = (mpq_ptr_t)real_defs__max((mpq_ptr_t)ivar_148, (mpq_ptr_t)ivar_149);
             mpz_mk_set_q(ivar_118, ivar_120);
             mpz_add_ui(ivar_118, ivar_118, ivar_119);
             int64_t tmp432620 = mpz_cmp_ui(ivar_118, ivar_10);
             ivar_87 = (tmp432620 == 0);
} else {
            
             ivar_87 = (bool_t) false;
};
} else {
           
            ivar_87 = (bool_t) false;
};
           if (ivar_87){    
            release_ltedfapeg_array_62(ivar_6);
            result = (bool_t) true;
} else {
           
            bool_t ivar_158;
            ltedfapeg__ent_adt_t ivar_171;
            ltedfapeg_array_61_t ivar_163;
            ivar_163 = (ltedfapeg_array_61_t)ivar_6->elems[ivar_8];
            ivar_163->count++;
            ivar_171 = (ltedfapeg__ent_adt_t)ivar_163->elems[ivar_75];
            ivar_171->count++;
            release_ltedfapeg_array_61(ivar_163);
            ivar_158 = (bool_t)r_ltedfapeg__goodp((ltedfapeg__ent_adt_t)ivar_171);
            if (ivar_158){     
             bool_t ivar_172;
             ltedfapeg__ent_adt_t ivar_200;
             ltedfapeg_array_61_t ivar_177;
             uint32_t ivar_197;
             uint32_t ivar_180;
             ltedfapeg__ent_adt_t ivar_192;
             ltedfapeg_array_61_t ivar_184;
             ivar_184 = (ltedfapeg_array_61_t)ivar_6->elems[ivar_8];
             ivar_184->count++;
             ivar_192 = (ltedfapeg__ent_adt_t)ivar_184->elems[ivar_75];
             ivar_192->count++;
             release_ltedfapeg_array_61(ivar_184);
             ivar_180 = (uint32_t)ltedfapeg__ent_adt_span((ltedfapeg__ent_adt_t)ivar_192);
             ivar_197 = (uint32_t)(ivar_8 + ivar_180);
             ivar_177 = (ltedfapeg_array_61_t)ivar_6->elems[ivar_197];
             ivar_177->count++;
             ivar_200 = (ltedfapeg__ent_adt_t)ivar_177->elems[ivar_76];
             ivar_200->count++;
             release_ltedfapeg_array_61(ivar_177);
             ivar_172 = (bool_t)r_ltedfapeg__failp((ltedfapeg__ent_adt_t)ivar_200);
             if (ivar_172){      
              mpz_ptr_t ivar_202;
              uint8_t ivar_203;
              ivar_203 = (uint8_t)1;
              mpq_ptr_t ivar_204;
              uint64_t ivar_252;
              ltedfapeg__ent_adt_t ivar_218;
              ltedfapeg_array_61_t ivar_210;
              ivar_210 = (ltedfapeg_array_61_t)ivar_6->elems[ivar_8];
              ivar_210->count++;
              ivar_218 = (ltedfapeg__ent_adt_t)ivar_210->elems[ivar_75];
              ivar_218->count++;
              release_ltedfapeg_array_61(ivar_210);
              ivar_252 = (uint64_t)ltedfapeg__ent_adt_dep((ltedfapeg__ent_adt_t)ivar_218);
              mpq_ptr_t ivar_247;
              //copying to mpq from uint64;
              mpq_mk_set_ui(ivar_247, ivar_252);
              uint64_t ivar_251;
              ltedfapeg__ent_adt_t ivar_245;
              ltedfapeg_array_61_t ivar_222;
              uint32_t ivar_242;
              uint32_t ivar_225;
              ltedfapeg__ent_adt_t ivar_237;
              ltedfapeg_array_61_t ivar_229;
              ivar_229 = (ltedfapeg_array_61_t)ivar_6->elems[ivar_8];
              ivar_229->count++;
              ivar_237 = (ltedfapeg__ent_adt_t)ivar_229->elems[ivar_75];
              ivar_237->count++;
              release_ltedfapeg_array_61(ivar_229);
              ivar_225 = (uint32_t)ltedfapeg__ent_adt_span((ltedfapeg__ent_adt_t)ivar_237);
              ivar_242 = (uint32_t)(ivar_8 + ivar_225);
              ivar_222 = (ltedfapeg_array_61_t)ivar_6->elems[ivar_242];
              ivar_222->count++;
              release_ltedfapeg_array_62(ivar_6);
              ivar_245 = (ltedfapeg__ent_adt_t)ivar_222->elems[ivar_76];
              ivar_245->count++;
              release_ltedfapeg_array_61(ivar_222);
              ivar_251 = (uint64_t)ltedfapeg__ent_adt_dep((ltedfapeg__ent_adt_t)ivar_245);
              mpq_ptr_t ivar_248;
              //copying to mpq from uint64;
              mpq_mk_set_ui(ivar_248, ivar_251);
              ivar_204 = (mpq_ptr_t)real_defs__max((mpq_ptr_t)ivar_247, (mpq_ptr_t)ivar_248);
              mpz_mk_set_q(ivar_202, ivar_204);
              mpz_add_ui(ivar_202, ivar_202, ivar_203);
              int64_t tmp432666 = mpz_cmp_ui(ivar_202, ivar_10);
              result = (tmp432666 == 0);
} else {
             
              release_ltedfapeg_array_62(ivar_6);
              result = (bool_t) false;
};
} else {
            
             release_ltedfapeg_array_62(ivar_6);
             result = (bool_t) false;
};
};
} else {
           
           release_ltedfapeg_array_62(ivar_6);
           bool_t ivar_265;
           ivar_265 = (bool_t)r_ltedfapeg__failurep((ltedfapeg__prepeg_adt_t)ivar_11);
           if (ivar_265){    
            uint8_t ivar_263;
            ivar_263 = (uint8_t)0;
            result = (ivar_10 == ivar_263);
} else {
           
            result = (bool_t) false;
};
};
};
};

        return result;
}

ltedfapeg_closure_83_t new_ltedfapeg_closure_83(void){
        static struct ltedfapeg_funtype_81_ftbl_s ftbl = {.fptr = (bool_t (*)(ltedfapeg_funtype_81_t, ltedfapeg_record_80_t))&f_ltedfapeg_closure_83, .mptr = (bool_t (*)(ltedfapeg_funtype_81_t, ltedfapeg_array_62_t, uint32_t, uint8_t, uint64_t))&m_ltedfapeg_closure_83, .rptr =  (void (*)(ltedfapeg_funtype_81_t))&release_ltedfapeg_closure_83, .cptr = (ltedfapeg_funtype_81_t (*)(ltedfapeg_funtype_81_t))&copy_ltedfapeg_closure_83};
        ltedfapeg_closure_83_t tmp = (ltedfapeg_closure_83_t) safe_malloc(sizeof(struct ltedfapeg_closure_83_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_83(ltedfapeg_funtype_81_t closure){
        ltedfapeg_closure_83_t x = (ltedfapeg_closure_83_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg_array_82(x->fvar_1);
         release_ltedfapeg__lang_spec(x->fvar_3);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_83_t copy_ltedfapeg_closure_83(ltedfapeg_closure_83_t x){
        ltedfapeg_closure_83_t y = new_ltedfapeg_closure_83();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = (uint32_t)x->fvar_2;
        y->fvar_3 = x->fvar_3; x->fvar_3->count++;
        if (x->htbl != NULL){
            ltedfapeg_funtype_81_htbl_t new_htbl = (ltedfapeg_funtype_81_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_81_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_81_hashentry_t * new_data = (ltedfapeg_funtype_81_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_81_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_81_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


ltedfapeg_record_84_t new_ltedfapeg_record_84(void){
        ltedfapeg_record_84_t tmp = (ltedfapeg_record_84_t) safe_malloc(sizeof(struct ltedfapeg_record_84_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapeg_record_84(ltedfapeg_record_84_t x){
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg_array_62(x->project_1);
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_ltedfapeg_record_84_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg_record_84((ltedfapeg_record_84_t)x);
}

ltedfapeg_record_84_t copy_ltedfapeg_record_84(ltedfapeg_record_84_t x){
        ltedfapeg_record_84_t y = new_ltedfapeg_record_84();
        y->project_1 = x->project_1;
        if (y->project_1 != NULL){y->project_1->count++;};
        y->project_2 = (uint32_t)x->project_2;
        y->project_3 = (uint8_t)x->project_3;
        y->count = 1;
        return y;}

bool_t equal_ltedfapeg_record_84(ltedfapeg_record_84_t x, ltedfapeg_record_84_t y){
        bool_t tmp = true;
        tmp = tmp && equal_ltedfapeg_array_62(x->project_1, y->project_1);
        tmp = tmp && x->project_2 == y->project_2;
        tmp = tmp && x->project_3 == y->project_3;
        return tmp;}

char * json_ltedfapeg_record_84(ltedfapeg_record_84_t x){
        char * tmp[3]; 
        char * fld0 = safe_malloc(21);
         sprintf(fld0, "\"project_1\" : ");
        tmp[0] = safe_strcat(fld0, json_ltedfapeg_array_62(x->project_1));
        char * fld1 = safe_malloc(21);
         sprintf(fld1, "\"project_2\" : ");
        tmp[1] = safe_strcat(fld1, json_uint32(x->project_2));
        char * fld2 = safe_malloc(21);
         sprintf(fld2, "\"project_3\" : ");
        tmp[2] = safe_strcat(fld2, json_uint8(x->project_3));
         char * result = json_list_with_sep(tmp, 3,  '{', ',', '}');
         for (uint32_t i = 0; i < 3; i++) free(tmp[i]);
        return result;}

bool_t equal_ltedfapeg_record_84_ptr(pointer_t x, pointer_t y, actual_ltedfapeg_record_84_t T){
        return equal_ltedfapeg_record_84((ltedfapeg_record_84_t)x, (ltedfapeg_record_84_t)y);
}

char * json_ltedfapeg_record_84_ptr(pointer_t x, actual_ltedfapeg_record_84_t T){
        return json_ltedfapeg_record_84((ltedfapeg_record_84_t)x);
}

actual_ltedfapeg_record_84_t actual_ltedfapeg_record_84(){
        actual_ltedfapeg_record_84_t new = (actual_ltedfapeg_record_84_t)safe_malloc(sizeof(struct actual_ltedfapeg_record_84_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg_record_84_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg_record_84_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg_record_84_ptr);
 

 
        return new;
 };

ltedfapeg_record_84_t update_ltedfapeg_record_84_project_1(ltedfapeg_record_84_t x, ltedfapeg_array_62_t v){
        ltedfapeg_record_84_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->project_1 != NULL){release_ltedfapeg_array_62(x->project_1);};}
        else {y = copy_ltedfapeg_record_84(x); x->count--; y->project_1->count--;};
        y->project_1 = (ltedfapeg_array_62_t)v;
        return y;}

ltedfapeg_record_84_t update_ltedfapeg_record_84_project_2(ltedfapeg_record_84_t x, uint32_t v){
        ltedfapeg_record_84_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_84(x); x->count--;};
        y->project_2 = (uint32_t)v;
        return y;}

ltedfapeg_record_84_t update_ltedfapeg_record_84_project_3(ltedfapeg_record_84_t x, uint8_t v){
        ltedfapeg_record_84_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_84(x); x->count--;};
        y->project_3 = (uint8_t)v;
        return y;}



void release_ltedfapeg_funtype_85(ltedfapeg_funtype_85_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_85_t copy_ltedfapeg_funtype_85(ltedfapeg_funtype_85_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_85(ltedfapeg_funtype_85_t x, ltedfapeg_funtype_85_t y){
        return false;}

char* json_ltedfapeg_funtype_85(ltedfapeg_funtype_85_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_85\""); return result;}


bool_t f_ltedfapeg_closure_86(struct ltedfapeg_closure_86_s * closure, ltedfapeg_record_84_t bvar){
        ltedfapeg_array_62_t bvar_1;
        bvar_1 = (ltedfapeg_array_62_t)bvar->project_1;
        bvar->project_1->count++;
        uint32_t bvar_2;
        bvar_2 = (uint32_t)bvar->project_2;
        uint8_t bvar_3;
        bvar_3 = (uint8_t)bvar->project_3;
        release_ltedfapeg_record_84(bvar);
        bool_t result = h_ltedfapeg_closure_86(bvar_1, bvar_2, bvar_3, closure->fvar_1, closure->fvar_2); 
        release_ltedfapeg_array_62(bvar_1);
        return result;}

bool_t m_ltedfapeg_closure_86(struct ltedfapeg_closure_86_s * closure, ltedfapeg_array_62_t bvar_1, uint32_t bvar_2, uint8_t bvar_3){
        return h_ltedfapeg_closure_86(bvar_1, bvar_2, bvar_3, closure->fvar_1, closure->fvar_2);}

extern bool_t h_ltedfapeg_closure_86(ltedfapeg_array_62_t ivar_5, uint32_t ivar_7, uint8_t ivar_8, uint32_t ivar_1, ltedfapeg__lang_spec_t ivar_2){
        bool_t result;
        ltedfapeg__prepeg_adt_t ivar_9;
        ivar_9 = (ltedfapeg__prepeg_adt_t)ivar_2->elems[ivar_8];
        ivar_9->count++;
        bool_t ivar_113;
        ivar_9->count++;
        ivar_113 = (bool_t)r_ltedfapeg__ltep((ltedfapeg__prepeg_adt_t)ivar_9);
        if (ivar_113){ 
             uint8_t ivar_14;
             ivar_9->count++;
             ivar_14 = (uint8_t)ltedfapeg__prepeg_adt_fst((ltedfapeg__prepeg_adt_t)ivar_9);
             uint8_t ivar_15;
             ivar_9->count++;
             ivar_15 = (uint8_t)ltedfapeg__prepeg_adt_lthen((ltedfapeg__prepeg_adt_t)ivar_9);
             bool_t ivar_26;
             ltedfapeg__ent_adt_t ivar_39;
             ltedfapeg_array_61_t ivar_31;
             ivar_31 = (ltedfapeg_array_61_t)ivar_5->elems[ivar_7];
             ivar_31->count++;
             ivar_39 = (ltedfapeg__ent_adt_t)ivar_31->elems[ivar_14];
             ivar_39->count++;
             release_ltedfapeg_array_61(ivar_31);
             ivar_26 = (bool_t)r_ltedfapeg__loopp((ltedfapeg__ent_adt_t)ivar_39);
             if (ivar_26){  
           release_ltedfapeg_array_62(ivar_5);
           result = (bool_t) true;
} else {
             
           bool_t ivar_40;
           bool_t ivar_42;
           ltedfapeg__ent_adt_t ivar_55;
           ltedfapeg_array_61_t ivar_47;
           ivar_47 = (ltedfapeg_array_61_t)ivar_5->elems[ivar_7];
           ivar_47->count++;
           ivar_55 = (ltedfapeg__ent_adt_t)ivar_47->elems[ivar_14];
           ivar_55->count++;
           release_ltedfapeg_array_61(ivar_47);
           ivar_42 = (bool_t)r_ltedfapeg__goodp((ltedfapeg__ent_adt_t)ivar_55);
           if (ivar_42){   
           ltedfapeg__ent_adt_t ivar_82;
           ltedfapeg_array_61_t ivar_59;
           uint32_t ivar_79;
           uint32_t ivar_62;
           ltedfapeg__ent_adt_t ivar_74;
           ltedfapeg_array_61_t ivar_66;
           ivar_66 = (ltedfapeg_array_61_t)ivar_5->elems[ivar_7];
           ivar_66->count++;
           ivar_74 = (ltedfapeg__ent_adt_t)ivar_66->elems[ivar_14];
           ivar_74->count++;
           release_ltedfapeg_array_61(ivar_66);
           ivar_62 = (uint32_t)ltedfapeg__ent_adt_span((ltedfapeg__ent_adt_t)ivar_74);
           ivar_79 = (uint32_t)(ivar_7 + ivar_62);
           ivar_59 = (ltedfapeg_array_61_t)ivar_5->elems[ivar_79];
           ivar_59->count++;
           ivar_82 = (ltedfapeg__ent_adt_t)ivar_59->elems[ivar_15];
           ivar_82->count++;
           release_ltedfapeg_array_61(ivar_59);
           ivar_40 = (bool_t)r_ltedfapeg__loopp((ltedfapeg__ent_adt_t)ivar_82);
} else {
           
           ivar_40 = (bool_t) false;
};
           if (ivar_40){   
           release_ltedfapeg_array_62(ivar_5);
           result = (bool_t) true;
} else {
           
           bool_t ivar_84;
           ltedfapeg__ent_adt_t ivar_97;
           ltedfapeg_array_61_t ivar_89;
           ivar_89 = (ltedfapeg_array_61_t)ivar_5->elems[ivar_7];
           ivar_89->count++;
           ivar_97 = (ltedfapeg__ent_adt_t)ivar_89->elems[ivar_14];
           ivar_97->count++;
           release_ltedfapeg_array_61(ivar_89);
           ivar_84 = (bool_t)r_ltedfapeg__failp((ltedfapeg__ent_adt_t)ivar_97);
           if (ivar_84){    
            ltedfapeg__ent_adt_t ivar_109;
            ltedfapeg_array_61_t ivar_101;
            ivar_101 = (ltedfapeg_array_61_t)ivar_5->elems[ivar_7];
            ivar_101->count++;
            release_ltedfapeg_array_62(ivar_5);
            ivar_109 = (ltedfapeg__ent_adt_t)ivar_101->elems[ivar_15];
            ivar_109->count++;
            release_ltedfapeg_array_61(ivar_101);
            result = (bool_t)r_ltedfapeg__loopp((ltedfapeg__ent_adt_t)ivar_109);
} else {
           
            release_ltedfapeg_array_62(ivar_5);
            result = (bool_t) false;
};
};
};
} else {
        
             release_ltedfapeg_array_62(ivar_5);
             release_ltedfapeg__prepeg_adt(ivar_9);
             result = (bool_t) false;
};

        return result;
}

ltedfapeg_closure_86_t new_ltedfapeg_closure_86(void){
        static struct ltedfapeg_funtype_85_ftbl_s ftbl = {.fptr = (bool_t (*)(ltedfapeg_funtype_85_t, ltedfapeg_record_84_t))&f_ltedfapeg_closure_86, .mptr = (bool_t (*)(ltedfapeg_funtype_85_t, ltedfapeg_array_62_t, uint32_t, uint8_t))&m_ltedfapeg_closure_86, .rptr =  (void (*)(ltedfapeg_funtype_85_t))&release_ltedfapeg_closure_86, .cptr = (ltedfapeg_funtype_85_t (*)(ltedfapeg_funtype_85_t))&copy_ltedfapeg_closure_86};
        ltedfapeg_closure_86_t tmp = (ltedfapeg_closure_86_t) safe_malloc(sizeof(struct ltedfapeg_closure_86_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_86(ltedfapeg_funtype_85_t closure){
        ltedfapeg_closure_86_t x = (ltedfapeg_closure_86_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg__lang_spec(x->fvar_2);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_86_t copy_ltedfapeg_closure_86(ltedfapeg_closure_86_t x){
        ltedfapeg_closure_86_t y = new_ltedfapeg_closure_86();
        y->ftbl = x->ftbl;

        y->fvar_1 = (uint32_t)x->fvar_1;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        if (x->htbl != NULL){
            ltedfapeg_funtype_85_htbl_t new_htbl = (ltedfapeg_funtype_85_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_85_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_85_hashentry_t * new_data = (ltedfapeg_funtype_85_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_85_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_85_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


ltedfapeg_record_87_t new_ltedfapeg_record_87(void){
        ltedfapeg_record_87_t tmp = (ltedfapeg_record_87_t) safe_malloc(sizeof(struct ltedfapeg_record_87_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapeg_record_87(ltedfapeg_record_87_t x){
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg_array_62(x->project_1);
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_ltedfapeg_record_87_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg_record_87((ltedfapeg_record_87_t)x);
}

ltedfapeg_record_87_t copy_ltedfapeg_record_87(ltedfapeg_record_87_t x){
        ltedfapeg_record_87_t y = new_ltedfapeg_record_87();
        y->project_1 = x->project_1;
        if (y->project_1 != NULL){y->project_1->count++;};
        y->project_2 = (uint32_t)x->project_2;
        y->project_3 = (uint8_t)x->project_3;
        y->project_4 = (uint64_t)x->project_4;
        mpz_set(y->project_5, x->project_5);
        y->count = 1;
        return y;}

bool_t equal_ltedfapeg_record_87(ltedfapeg_record_87_t x, ltedfapeg_record_87_t y){
        bool_t tmp = true;
        tmp = tmp && equal_ltedfapeg_array_62(x->project_1, y->project_1);
        tmp = tmp && x->project_2 == y->project_2;
        tmp = tmp && x->project_3 == y->project_3;
        tmp = tmp && x->project_4 == y->project_4;tmp = tmp && (mpz_cmp(x->project_5, y->project_5) == 0);
        return tmp;}

char * json_ltedfapeg_record_87(ltedfapeg_record_87_t x){
        char * tmp[5]; 
        char * fld0 = safe_malloc(21);
         sprintf(fld0, "\"project_1\" : ");
        tmp[0] = safe_strcat(fld0, json_ltedfapeg_array_62(x->project_1));
        char * fld1 = safe_malloc(21);
         sprintf(fld1, "\"project_2\" : ");
        tmp[1] = safe_strcat(fld1, json_uint32(x->project_2));
        char * fld2 = safe_malloc(21);
         sprintf(fld2, "\"project_3\" : ");
        tmp[2] = safe_strcat(fld2, json_uint8(x->project_3));
        char * fld3 = safe_malloc(21);
         sprintf(fld3, "\"project_4\" : ");
        tmp[3] = safe_strcat(fld3, json_uint64(x->project_4));
        char * fld4 = safe_malloc(21);
         sprintf(fld4, "\"project_5\" : ");
        tmp[4] = safe_strcat(fld4, json_mpz(x->project_5));
         char * result = json_list_with_sep(tmp, 5,  '{', ',', '}');
         for (uint32_t i = 0; i < 5; i++) free(tmp[i]);
        return result;}

bool_t equal_ltedfapeg_record_87_ptr(pointer_t x, pointer_t y, actual_ltedfapeg_record_87_t T){
        return equal_ltedfapeg_record_87((ltedfapeg_record_87_t)x, (ltedfapeg_record_87_t)y);
}

char * json_ltedfapeg_record_87_ptr(pointer_t x, actual_ltedfapeg_record_87_t T){
        return json_ltedfapeg_record_87((ltedfapeg_record_87_t)x);
}

actual_ltedfapeg_record_87_t actual_ltedfapeg_record_87(){
        actual_ltedfapeg_record_87_t new = (actual_ltedfapeg_record_87_t)safe_malloc(sizeof(struct actual_ltedfapeg_record_87_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg_record_87_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg_record_87_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg_record_87_ptr);
 

 
        return new;
 };

ltedfapeg_record_87_t update_ltedfapeg_record_87_project_1(ltedfapeg_record_87_t x, ltedfapeg_array_62_t v){
        ltedfapeg_record_87_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->project_1 != NULL){release_ltedfapeg_array_62(x->project_1);};}
        else {y = copy_ltedfapeg_record_87(x); x->count--; y->project_1->count--;};
        y->project_1 = (ltedfapeg_array_62_t)v;
        return y;}

ltedfapeg_record_87_t update_ltedfapeg_record_87_project_2(ltedfapeg_record_87_t x, uint32_t v){
        ltedfapeg_record_87_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_87(x); x->count--;};
        y->project_2 = (uint32_t)v;
        return y;}

ltedfapeg_record_87_t update_ltedfapeg_record_87_project_3(ltedfapeg_record_87_t x, uint8_t v){
        ltedfapeg_record_87_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_87(x); x->count--;};
        y->project_3 = (uint8_t)v;
        return y;}

ltedfapeg_record_87_t update_ltedfapeg_record_87_project_4(ltedfapeg_record_87_t x, uint64_t v){
        ltedfapeg_record_87_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_87(x); x->count--;};
        y->project_4 = (uint64_t)v;
        return y;}

ltedfapeg_record_87_t update_ltedfapeg_record_87_project_5(ltedfapeg_record_87_t x, mpz_ptr_t v){
        ltedfapeg_record_87_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_87(x); x->count--;};
        mpz_set(y->project_5, v);
        return y;}



void release_ltedfapeg_funtype_88(ltedfapeg_funtype_88_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_88_t copy_ltedfapeg_funtype_88(ltedfapeg_funtype_88_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_88(ltedfapeg_funtype_88_t x, ltedfapeg_funtype_88_t y){
        return false;}

char* json_ltedfapeg_funtype_88(ltedfapeg_funtype_88_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_88\""); return result;}


bool_t f_ltedfapeg_closure_89(struct ltedfapeg_closure_89_s * closure, ltedfapeg_record_87_t bvar){
        ltedfapeg_array_62_t bvar_1;
        bvar_1 = (ltedfapeg_array_62_t)bvar->project_1;
        bvar->project_1->count++;
        uint32_t bvar_2;
        bvar_2 = (uint32_t)bvar->project_2;
        uint8_t bvar_3;
        bvar_3 = (uint8_t)bvar->project_3;
        uint64_t bvar_4;
        bvar_4 = (uint64_t)bvar->project_4;
        mpz_t bvar_5;
        mpz_init(bvar_5);
        mpz_set(bvar_5, bvar->project_5);
        release_ltedfapeg_record_87(bvar);
        bool_t result = h_ltedfapeg_closure_89(bvar_1, bvar_2, bvar_3, bvar_4, bvar_5, closure->fvar_1, closure->fvar_2, closure->fvar_3); 
        release_ltedfapeg_array_62(bvar_1);
        release_mpz(bvar_5);
        return result;}

bool_t m_ltedfapeg_closure_89(struct ltedfapeg_closure_89_s * closure, ltedfapeg_array_62_t bvar_1, uint32_t bvar_2, uint8_t bvar_3, uint64_t bvar_4, mpz_ptr_t bvar_5){
        return h_ltedfapeg_closure_89(bvar_1, bvar_2, bvar_3, bvar_4, bvar_5, closure->fvar_1, closure->fvar_2, closure->fvar_3);}

extern bool_t h_ltedfapeg_closure_89(ltedfapeg_array_62_t ivar_9, uint32_t ivar_11, uint8_t ivar_12, uint64_t ivar_13, mpz_ptr_t ivar_14, ltedfapeg_array_82_t ivar_3, uint32_t ivar_1, ltedfapeg__lang_spec_t ivar_2){
        bool_t result;
        ltedfapeg__prepeg_adt_t ivar_18;
        ivar_18 = (ltedfapeg__prepeg_adt_t)ivar_2->elems[ivar_12];
        ivar_18->count++;
        bool_t ivar_32;
        ivar_18->count++;
        ivar_32 = (bool_t)r_ltedfapeg__epsilonp((ltedfapeg__prepeg_adt_t)ivar_18);
        if (ivar_32){ 
             release_ltedfapeg_array_62(ivar_9);
             release_ltedfapeg__prepeg_adt(ivar_18);
             bool_t ivar_23;
             uint8_t ivar_26;
             ivar_26 = (uint8_t)0;
             int64_t tmp432864 = mpz_cmp_ui(ivar_14, ivar_26);
             ivar_23 = (tmp432864 == 0);
             if (ivar_23){  
           uint8_t ivar_29;
           ivar_29 = (uint8_t)0;
           result = (ivar_13 == ivar_29);
} else {
             
           result = (bool_t) false;
};
} else {
        
             bool_t ivar_68;
             ivar_18->count++;
             ivar_68 = (bool_t)r_ltedfapeg__anyp((ltedfapeg__prepeg_adt_t)ivar_18);
             if (ivar_68){  
           release_ltedfapeg_array_62(ivar_9);
           dfa__dfa_t ivar_36;
           ivar_36 = (dfa__dfa_t)ltedfapeg__prepeg_adt_dfa((ltedfapeg__prepeg_adt_t)ivar_18);
           /* res */ dfa__dfaResult_adt_t ivar_40;
           ivar_3->count++;
           ivar_40 = (dfa__dfaResult_adt_t)dfa__DfaParse((dfa__dfa_t)ivar_36, (uint32_t)ivar_1, (dfa_array_20_t)ivar_3, (uint32_t)ivar_11);
           bool_t ivar_50;
           ivar_40->count++;
           ivar_50 = (bool_t)r_dfa__successp((dfa__dfaResult_adt_t)ivar_40);
           if (ivar_50){   
           bool_t ivar_55;
           uint32_t ivar_58;
           ivar_58 = (uint32_t)dfa__dfaResult_adt_span((dfa__dfaResult_adt_t)ivar_40);
           int64_t tmp432879 = mpz_cmp_ui(ivar_14, ivar_58);
           ivar_55 = (tmp432879 == 0);
           if (ivar_55){    
            uint8_t ivar_64;
            ivar_64 = (uint8_t)0;
            result = (ivar_13 == ivar_64);
} else {
           
            result = (bool_t) false;
};
} else {
           
           release_dfa__dfaResult_adt(ivar_40);
           result = (bool_t) false;
};
} else {
             
           bool_t ivar_95;
           ivar_18->count++;
           ivar_95 = (bool_t)r_ltedfapeg__terminalp((ltedfapeg__prepeg_adt_t)ivar_18);
           if (ivar_95){   
           release_ltedfapeg_array_62(ivar_9);
           uint8_t ivar_72;
           ivar_72 = (uint8_t)ltedfapeg__prepeg_adt_a((ltedfapeg__prepeg_adt_t)ivar_18);
           bool_t ivar_76;
           uint8_t ivar_79;
           ivar_79 = (uint8_t)1;
           int64_t tmp432884 = mpz_cmp_ui(ivar_14, ivar_79);
           ivar_76 = (tmp432884 == 0);
           if (ivar_76){    
            bool_t ivar_81;
            uint8_t ivar_83;
            ivar_83 = (uint8_t)ivar_3->elems[ivar_11];
            ivar_81 = (ivar_83 == ivar_72);
            if (ivar_81){     
             uint8_t ivar_91;
             ivar_91 = (uint8_t)0;
             result = (ivar_13 == ivar_91);
} else {
            
             result = (bool_t) false;
};
} else {
           
            result = (bool_t) false;
};
} else {
           
           bool_t ivar_282;
           ivar_18->count++;
           ivar_282 = (bool_t)r_ltedfapeg__ltep((ltedfapeg__prepeg_adt_t)ivar_18);
           if (ivar_282){    
            uint8_t ivar_99;
            ivar_18->count++;
            ivar_99 = (uint8_t)ltedfapeg__prepeg_adt_fst((ltedfapeg__prepeg_adt_t)ivar_18);
            uint8_t ivar_100;
            ivar_18->count++;
            ivar_100 = (uint8_t)ltedfapeg__prepeg_adt_lthen((ltedfapeg__prepeg_adt_t)ivar_18);
            uint8_t ivar_101;
            ivar_101 = (uint8_t)ltedfapeg__prepeg_adt_lelse((ltedfapeg__prepeg_adt_t)ivar_18);
            bool_t ivar_111;
            bool_t ivar_113;
            ltedfapeg__ent_adt_t ivar_126;
            ltedfapeg_array_61_t ivar_118;
            ivar_118 = (ltedfapeg_array_61_t)ivar_9->elems[ivar_11];
            ivar_118->count++;
            ivar_126 = (ltedfapeg__ent_adt_t)ivar_118->elems[ivar_99];
            ivar_126->count++;
            release_ltedfapeg_array_61(ivar_118);
            ivar_113 = (bool_t)r_ltedfapeg__goodp((ltedfapeg__ent_adt_t)ivar_126);
            if (ivar_113){     
             bool_t ivar_127;
             ltedfapeg__ent_adt_t ivar_155;
             ltedfapeg_array_61_t ivar_132;
             uint32_t ivar_152;
             uint32_t ivar_135;
             ltedfapeg__ent_adt_t ivar_147;
             ltedfapeg_array_61_t ivar_139;
             ivar_139 = (ltedfapeg_array_61_t)ivar_9->elems[ivar_11];
             ivar_139->count++;
             ivar_147 = (ltedfapeg__ent_adt_t)ivar_139->elems[ivar_99];
             ivar_147->count++;
             release_ltedfapeg_array_61(ivar_139);
             ivar_135 = (uint32_t)ltedfapeg__ent_adt_span((ltedfapeg__ent_adt_t)ivar_147);
             ivar_152 = (uint32_t)(ivar_11 + ivar_135);
             ivar_132 = (ltedfapeg_array_61_t)ivar_9->elems[ivar_152];
             ivar_132->count++;
             ivar_155 = (ltedfapeg__ent_adt_t)ivar_132->elems[ivar_100];
             ivar_155->count++;
             release_ltedfapeg_array_61(ivar_132);
             ivar_127 = (bool_t)r_ltedfapeg__goodp((ltedfapeg__ent_adt_t)ivar_155);
             if (ivar_127){      
              mpz_ptr_t ivar_157;
              uint8_t ivar_158;
              ivar_158 = (uint8_t)1;
              mpq_ptr_t ivar_159;
              uint64_t ivar_207;
              ltedfapeg__ent_adt_t ivar_173;
              ltedfapeg_array_61_t ivar_165;
              ivar_165 = (ltedfapeg_array_61_t)ivar_9->elems[ivar_11];
              ivar_165->count++;
              ivar_173 = (ltedfapeg__ent_adt_t)ivar_165->elems[ivar_99];
              ivar_173->count++;
              release_ltedfapeg_array_61(ivar_165);
              ivar_207 = (uint64_t)ltedfapeg__ent_adt_dep((ltedfapeg__ent_adt_t)ivar_173);
              mpq_ptr_t ivar_202;
              //copying to mpq from uint64;
              mpq_mk_set_ui(ivar_202, ivar_207);
              uint64_t ivar_206;
              ltedfapeg__ent_adt_t ivar_200;
              ltedfapeg_array_61_t ivar_177;
              uint32_t ivar_197;
              uint32_t ivar_180;
              ltedfapeg__ent_adt_t ivar_192;
              ltedfapeg_array_61_t ivar_184;
              ivar_184 = (ltedfapeg_array_61_t)ivar_9->elems[ivar_11];
              ivar_184->count++;
              ivar_192 = (ltedfapeg__ent_adt_t)ivar_184->elems[ivar_99];
              ivar_192->count++;
              release_ltedfapeg_array_61(ivar_184);
              ivar_180 = (uint32_t)ltedfapeg__ent_adt_span((ltedfapeg__ent_adt_t)ivar_192);
              ivar_197 = (uint32_t)(ivar_11 + ivar_180);
              ivar_177 = (ltedfapeg_array_61_t)ivar_9->elems[ivar_197];
              ivar_177->count++;
              ivar_200 = (ltedfapeg__ent_adt_t)ivar_177->elems[ivar_100];
              ivar_200->count++;
              release_ltedfapeg_array_61(ivar_177);
              ivar_206 = (uint64_t)ltedfapeg__ent_adt_dep((ltedfapeg__ent_adt_t)ivar_200);
              mpq_ptr_t ivar_203;
              //copying to mpq from uint64;
              mpq_mk_set_ui(ivar_203, ivar_206);
              ivar_159 = (mpq_ptr_t)real_defs__max((mpq_ptr_t)ivar_202, (mpq_ptr_t)ivar_203);
              mpz_mk_set_q(ivar_157, ivar_159);
              mpz_add_ui(ivar_157, ivar_157, ivar_158);
              int64_t tmp432929 = mpz_cmp_ui(ivar_157, ivar_13);
              ivar_111 = (tmp432929 == 0);
} else {
             
              ivar_111 = (bool_t) false;
};
} else {
            
             ivar_111 = (bool_t) false;
};
            if (ivar_111){     
             release_ltedfapeg_array_62(ivar_9);
             result = (bool_t) true;
} else {
            
             bool_t ivar_212;
             ltedfapeg__ent_adt_t ivar_225;
             ltedfapeg_array_61_t ivar_217;
             ivar_217 = (ltedfapeg_array_61_t)ivar_9->elems[ivar_11];
             ivar_217->count++;
             ivar_225 = (ltedfapeg__ent_adt_t)ivar_217->elems[ivar_99];
             ivar_225->count++;
             release_ltedfapeg_array_61(ivar_217);
             ivar_212 = (bool_t)r_ltedfapeg__failp((ltedfapeg__ent_adt_t)ivar_225);
             if (ivar_212){      
              bool_t ivar_226;
              ltedfapeg__ent_adt_t ivar_239;
              ltedfapeg_array_61_t ivar_231;
              ivar_231 = (ltedfapeg_array_61_t)ivar_9->elems[ivar_11];
              ivar_231->count++;
              ivar_239 = (ltedfapeg__ent_adt_t)ivar_231->elems[ivar_101];
              ivar_239->count++;
              release_ltedfapeg_array_61(ivar_231);
              ivar_226 = (bool_t)r_ltedfapeg__goodp((ltedfapeg__ent_adt_t)ivar_239);
              if (ivar_226){       
               mpz_ptr_t ivar_241;
               uint8_t ivar_242;
               ivar_242 = (uint8_t)1;
               mpq_ptr_t ivar_243;
               uint64_t ivar_276;
               ltedfapeg__ent_adt_t ivar_257;
               ltedfapeg_array_61_t ivar_249;
               ivar_249 = (ltedfapeg_array_61_t)ivar_9->elems[ivar_11];
               ivar_249->count++;
               ivar_257 = (ltedfapeg__ent_adt_t)ivar_249->elems[ivar_99];
               ivar_257->count++;
               release_ltedfapeg_array_61(ivar_249);
               ivar_276 = (uint64_t)ltedfapeg__ent_adt_dep((ltedfapeg__ent_adt_t)ivar_257);
               mpq_ptr_t ivar_271;
               //copying to mpq from uint64;
               mpq_mk_set_ui(ivar_271, ivar_276);
               uint64_t ivar_275;
               ltedfapeg__ent_adt_t ivar_269;
               ltedfapeg_array_61_t ivar_261;
               ivar_261 = (ltedfapeg_array_61_t)ivar_9->elems[ivar_11];
               ivar_261->count++;
               release_ltedfapeg_array_62(ivar_9);
               ivar_269 = (ltedfapeg__ent_adt_t)ivar_261->elems[ivar_101];
               ivar_269->count++;
               release_ltedfapeg_array_61(ivar_261);
               ivar_275 = (uint64_t)ltedfapeg__ent_adt_dep((ltedfapeg__ent_adt_t)ivar_269);
               mpq_ptr_t ivar_272;
               //copying to mpq from uint64;
               mpq_mk_set_ui(ivar_272, ivar_275);
               ivar_243 = (mpq_ptr_t)real_defs__max((mpq_ptr_t)ivar_271, (mpq_ptr_t)ivar_272);
               mpz_mk_set_q(ivar_241, ivar_243);
               mpz_add_ui(ivar_241, ivar_241, ivar_242);
               int64_t tmp432961 = mpz_cmp_ui(ivar_241, ivar_13);
               result = (tmp432961 == 0);
} else {
              
               release_ltedfapeg_array_62(ivar_9);
               result = (bool_t) false;
};
} else {
             
              release_ltedfapeg_array_62(ivar_9);
              result = (bool_t) false;
};
};
} else {
           
            release_ltedfapeg_array_62(ivar_9);
            release_ltedfapeg__prepeg_adt(ivar_18);
            result = (bool_t) false;
};
};
};
};

        return result;
}

ltedfapeg_closure_89_t new_ltedfapeg_closure_89(void){
        static struct ltedfapeg_funtype_88_ftbl_s ftbl = {.fptr = (bool_t (*)(ltedfapeg_funtype_88_t, ltedfapeg_record_87_t))&f_ltedfapeg_closure_89, .mptr = (bool_t (*)(ltedfapeg_funtype_88_t, ltedfapeg_array_62_t, uint32_t, uint8_t, uint64_t, mpz_ptr_t))&m_ltedfapeg_closure_89, .rptr =  (void (*)(ltedfapeg_funtype_88_t))&release_ltedfapeg_closure_89, .cptr = (ltedfapeg_funtype_88_t (*)(ltedfapeg_funtype_88_t))&copy_ltedfapeg_closure_89};
        ltedfapeg_closure_89_t tmp = (ltedfapeg_closure_89_t) safe_malloc(sizeof(struct ltedfapeg_closure_89_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_89(ltedfapeg_funtype_88_t closure){
        ltedfapeg_closure_89_t x = (ltedfapeg_closure_89_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg_array_82(x->fvar_1);
         release_ltedfapeg__lang_spec(x->fvar_3);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_89_t copy_ltedfapeg_closure_89(ltedfapeg_closure_89_t x){
        ltedfapeg_closure_89_t y = new_ltedfapeg_closure_89();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = (uint32_t)x->fvar_2;
        y->fvar_3 = x->fvar_3; x->fvar_3->count++;
        if (x->htbl != NULL){
            ltedfapeg_funtype_88_htbl_t new_htbl = (ltedfapeg_funtype_88_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_88_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_88_hashentry_t * new_data = (ltedfapeg_funtype_88_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_88_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_88_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


ltedfapeg_record_90_t new_ltedfapeg_record_90(void){
        ltedfapeg_record_90_t tmp = (ltedfapeg_record_90_t) safe_malloc(sizeof(struct ltedfapeg_record_90_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapeg_record_90(ltedfapeg_record_90_t x){
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg_array_62(x->project_1);
         release_ltedfapeg__ent_adt(x->project_4);
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_ltedfapeg_record_90_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg_record_90((ltedfapeg_record_90_t)x);
}

ltedfapeg_record_90_t copy_ltedfapeg_record_90(ltedfapeg_record_90_t x){
        ltedfapeg_record_90_t y = new_ltedfapeg_record_90();
        y->project_1 = x->project_1;
        if (y->project_1 != NULL){y->project_1->count++;};
        y->project_2 = (uint32_t)x->project_2;
        y->project_3 = (uint8_t)x->project_3;
        y->project_4 = x->project_4;
        if (y->project_4 != NULL){y->project_4->count++;};
        y->count = 1;
        return y;}

bool_t equal_ltedfapeg_record_90(ltedfapeg_record_90_t x, ltedfapeg_record_90_t y){
        bool_t tmp = true;
        tmp = tmp && equal_ltedfapeg_array_62(x->project_1, y->project_1);
        tmp = tmp && x->project_2 == y->project_2;
        tmp = tmp && x->project_3 == y->project_3;
        tmp = tmp && equal_ltedfapeg__ent_adt(x->project_4, y->project_4);
        return tmp;}

char * json_ltedfapeg_record_90(ltedfapeg_record_90_t x){
        char * tmp[4]; 
        char * fld0 = safe_malloc(21);
         sprintf(fld0, "\"project_1\" : ");
        tmp[0] = safe_strcat(fld0, json_ltedfapeg_array_62(x->project_1));
        char * fld1 = safe_malloc(21);
         sprintf(fld1, "\"project_2\" : ");
        tmp[1] = safe_strcat(fld1, json_uint32(x->project_2));
        char * fld2 = safe_malloc(21);
         sprintf(fld2, "\"project_3\" : ");
        tmp[2] = safe_strcat(fld2, json_uint8(x->project_3));
        char * fld3 = safe_malloc(21);
         sprintf(fld3, "\"project_4\" : ");
        tmp[3] = safe_strcat(fld3, json_ltedfapeg__ent_adt(x->project_4));
         char * result = json_list_with_sep(tmp, 4,  '{', ',', '}');
         for (uint32_t i = 0; i < 4; i++) free(tmp[i]);
        return result;}

bool_t equal_ltedfapeg_record_90_ptr(pointer_t x, pointer_t y, actual_ltedfapeg_record_90_t T){
        return equal_ltedfapeg_record_90((ltedfapeg_record_90_t)x, (ltedfapeg_record_90_t)y);
}

char * json_ltedfapeg_record_90_ptr(pointer_t x, actual_ltedfapeg_record_90_t T){
        return json_ltedfapeg_record_90((ltedfapeg_record_90_t)x);
}

actual_ltedfapeg_record_90_t actual_ltedfapeg_record_90(){
        actual_ltedfapeg_record_90_t new = (actual_ltedfapeg_record_90_t)safe_malloc(sizeof(struct actual_ltedfapeg_record_90_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg_record_90_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg_record_90_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg_record_90_ptr);
 

 
        return new;
 };

ltedfapeg_record_90_t update_ltedfapeg_record_90_project_1(ltedfapeg_record_90_t x, ltedfapeg_array_62_t v){
        ltedfapeg_record_90_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->project_1 != NULL){release_ltedfapeg_array_62(x->project_1);};}
        else {y = copy_ltedfapeg_record_90(x); x->count--; y->project_1->count--;};
        y->project_1 = (ltedfapeg_array_62_t)v;
        return y;}

ltedfapeg_record_90_t update_ltedfapeg_record_90_project_2(ltedfapeg_record_90_t x, uint32_t v){
        ltedfapeg_record_90_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_90(x); x->count--;};
        y->project_2 = (uint32_t)v;
        return y;}

ltedfapeg_record_90_t update_ltedfapeg_record_90_project_3(ltedfapeg_record_90_t x, uint8_t v){
        ltedfapeg_record_90_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_90(x); x->count--;};
        y->project_3 = (uint8_t)v;
        return y;}

ltedfapeg_record_90_t update_ltedfapeg_record_90_project_4(ltedfapeg_record_90_t x, ltedfapeg__ent_adt_t v){
        ltedfapeg_record_90_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->project_4 != NULL){release_ltedfapeg__ent_adt(x->project_4);};}
        else {y = copy_ltedfapeg_record_90(x); x->count--; y->project_4->count--;};
        y->project_4 = (ltedfapeg__ent_adt_t)v;
        return y;}



void release_ltedfapeg_funtype_91(ltedfapeg_funtype_91_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_91_t copy_ltedfapeg_funtype_91(ltedfapeg_funtype_91_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_91(ltedfapeg_funtype_91_t x, ltedfapeg_funtype_91_t y){
        return false;}

char* json_ltedfapeg_funtype_91(ltedfapeg_funtype_91_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_91\""); return result;}


bool_t f_ltedfapeg_closure_92(struct ltedfapeg_closure_92_s * closure, ltedfapeg_record_90_t bvar){
        ltedfapeg_array_62_t bvar_1;
        bvar_1 = (ltedfapeg_array_62_t)bvar->project_1;
        bvar->project_1->count++;
        uint32_t bvar_2;
        bvar_2 = (uint32_t)bvar->project_2;
        uint8_t bvar_3;
        bvar_3 = (uint8_t)bvar->project_3;
        ltedfapeg__ent_adt_t bvar_4;
        bvar_4 = (ltedfapeg__ent_adt_t)bvar->project_4;
        bvar->project_4->count++;
        release_ltedfapeg_record_90(bvar);
        bool_t result = h_ltedfapeg_closure_92(bvar_1, bvar_2, bvar_3, bvar_4, closure->fvar_1, closure->fvar_2, closure->fvar_3); 
        release_ltedfapeg_array_62(bvar_1);
        release_ltedfapeg__ent_adt(bvar_4);
        return result;}

bool_t m_ltedfapeg_closure_92(struct ltedfapeg_closure_92_s * closure, ltedfapeg_array_62_t bvar_1, uint32_t bvar_2, uint8_t bvar_3, ltedfapeg__ent_adt_t bvar_4){
        return h_ltedfapeg_closure_92(bvar_1, bvar_2, bvar_3, bvar_4, closure->fvar_1, closure->fvar_2, closure->fvar_3);}

extern bool_t h_ltedfapeg_closure_92(ltedfapeg_array_62_t ivar_6, uint32_t ivar_8, uint8_t ivar_9, ltedfapeg__ent_adt_t ivar_10, uint32_t ivar_1, ltedfapeg__lang_spec_t ivar_2, ltedfapeg_array_82_t ivar_3){
        bool_t result;
        bool_t ivar_37;
        ivar_10->count++;
        ivar_37 = (bool_t)r_ltedfapeg__failp((ltedfapeg__ent_adt_t)ivar_10);
        if (ivar_37){ 
             uint64_t ivar_12;
             ivar_12 = (uint64_t)ltedfapeg__ent_adt_dep((ltedfapeg__ent_adt_t)ivar_10);
             ltedfapeg_funtype_81_t ivar_23;
             ivar_2->count++;
             ivar_3->count++;
             ivar_23 = (ltedfapeg_funtype_81_t)ltedfapeg__good_failp((uint32_t)ivar_1, (ltedfapeg__lang_spec_t)ivar_2, (ltedfapeg_array_82_t)ivar_3);
             result = (bool_t)ivar_23->ftbl->mptr(ivar_23, ivar_6, ivar_8, ivar_9, ivar_12);
             ivar_23->ftbl->rptr(ivar_23);
} else {
        
             bool_t ivar_53;
             ivar_10->count++;
             ivar_53 = (bool_t)r_ltedfapeg__loopp((ltedfapeg__ent_adt_t)ivar_10);
             if (ivar_53){  
           release_ltedfapeg__ent_adt(ivar_10);
           ivar_2->count++;
           result = (bool_t)ltedfapeg__loop_readyp((uint32_t)ivar_1, (ltedfapeg__lang_spec_t)ivar_2, (ltedfapeg_array_62_t)ivar_6, (uint32_t)ivar_8, (uint8_t)ivar_9);
} else {
             
           bool_t ivar_103;
           ivar_10->count++;
           ivar_103 = (bool_t)r_ltedfapeg__goodp((ltedfapeg__ent_adt_t)ivar_10);
           if (ivar_103){   
           uint64_t ivar_57;
           ivar_10->count++;
           ivar_57 = (uint64_t)ltedfapeg__ent_adt_dep((ltedfapeg__ent_adt_t)ivar_10);
           uint32_t ivar_58;
           ivar_58 = (uint32_t)ltedfapeg__ent_adt_span((ltedfapeg__ent_adt_t)ivar_10);
           bool_t ivar_65;
           int32_t ivar_68;
           ivar_68 = (int32_t)((uint64_t)ivar_1 - (uint64_t)ivar_8);
           if ((ivar_68 < 0)){    
            ivar_65 = false;
} else {
           
            ivar_65 = (ivar_58 <= (uint32_t)ivar_68);
};
           if (ivar_65){    
            ltedfapeg_funtype_88_t ivar_84;
            ivar_2->count++;
            ivar_3->count++;
            ivar_84 = (ltedfapeg_funtype_88_t)ltedfapeg__good_goodp((uint32_t)ivar_1, (ltedfapeg__lang_spec_t)ivar_2, (ltedfapeg_array_82_t)ivar_3);
            mpz_ptr_t ivar_101;
            //copying to mpz from uint32;
            mpz_mk_set_ui(ivar_101, ivar_58);
            result = (bool_t)ivar_84->ftbl->mptr(ivar_84, ivar_6, ivar_8, ivar_9, ivar_57, ivar_101);
            ivar_84->ftbl->rptr(ivar_84);
} else {
           
            release_ltedfapeg_array_62(ivar_6);
            result = (bool_t) false;
};
} else {
           
           release_ltedfapeg_array_62(ivar_6);
           release_ltedfapeg__ent_adt(ivar_10);
           result = (bool_t) true;
};
};
};

        return result;
}

ltedfapeg_closure_92_t new_ltedfapeg_closure_92(void){
        static struct ltedfapeg_funtype_91_ftbl_s ftbl = {.fptr = (bool_t (*)(ltedfapeg_funtype_91_t, ltedfapeg_record_90_t))&f_ltedfapeg_closure_92, .mptr = (bool_t (*)(ltedfapeg_funtype_91_t, ltedfapeg_array_62_t, uint32_t, uint8_t, ltedfapeg__ent_adt_t))&m_ltedfapeg_closure_92, .rptr =  (void (*)(ltedfapeg_funtype_91_t))&release_ltedfapeg_closure_92, .cptr = (ltedfapeg_funtype_91_t (*)(ltedfapeg_funtype_91_t))&copy_ltedfapeg_closure_92};
        ltedfapeg_closure_92_t tmp = (ltedfapeg_closure_92_t) safe_malloc(sizeof(struct ltedfapeg_closure_92_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_92(ltedfapeg_funtype_91_t closure){
        ltedfapeg_closure_92_t x = (ltedfapeg_closure_92_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg__lang_spec(x->fvar_2);
         release_ltedfapeg_array_82(x->fvar_3);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_92_t copy_ltedfapeg_closure_92(ltedfapeg_closure_92_t x){
        ltedfapeg_closure_92_t y = new_ltedfapeg_closure_92();
        y->ftbl = x->ftbl;

        y->fvar_1 = (uint32_t)x->fvar_1;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        y->fvar_3 = x->fvar_3; x->fvar_3->count++;
        if (x->htbl != NULL){
            ltedfapeg_funtype_91_htbl_t new_htbl = (ltedfapeg_funtype_91_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_91_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_91_hashentry_t * new_data = (ltedfapeg_funtype_91_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_91_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_91_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


bool_t f_ltedfapeg_closure_93(struct ltedfapeg_closure_93_s * closure, ltedfapeg_record_90_t bvar){
        ltedfapeg_array_62_t bvar_1;
        bvar_1 = (ltedfapeg_array_62_t)bvar->project_1;
        bvar->project_1->count++;
        uint32_t bvar_2;
        bvar_2 = (uint32_t)bvar->project_2;
        uint8_t bvar_3;
        bvar_3 = (uint8_t)bvar->project_3;
        ltedfapeg__ent_adt_t bvar_4;
        bvar_4 = (ltedfapeg__ent_adt_t)bvar->project_4;
        bvar->project_4->count++;
        release_ltedfapeg_record_90(bvar);
        bool_t result = h_ltedfapeg_closure_93(bvar_1, bvar_2, bvar_3, bvar_4, closure->fvar_1, closure->fvar_2, closure->fvar_3); 
        release_ltedfapeg_array_62(bvar_1);
        release_ltedfapeg__ent_adt(bvar_4);
        return result;}

bool_t m_ltedfapeg_closure_93(struct ltedfapeg_closure_93_s * closure, ltedfapeg_array_62_t bvar_1, uint32_t bvar_2, uint8_t bvar_3, ltedfapeg__ent_adt_t bvar_4){
        return h_ltedfapeg_closure_93(bvar_1, bvar_2, bvar_3, bvar_4, closure->fvar_1, closure->fvar_2, closure->fvar_3);}

extern bool_t h_ltedfapeg_closure_93(ltedfapeg_array_62_t ivar_6, uint32_t ivar_8, uint8_t ivar_9, ltedfapeg__ent_adt_t ivar_10, uint32_t ivar_1, ltedfapeg__lang_spec_t ivar_2, ltedfapeg_array_82_t ivar_3){
        bool_t result;
        bool_t ivar_37;
        ivar_10->count++;
        ivar_37 = (bool_t)r_ltedfapeg__failp((ltedfapeg__ent_adt_t)ivar_10);
        if (ivar_37){ 
             uint64_t ivar_12;
             ivar_12 = (uint64_t)ltedfapeg__ent_adt_dep((ltedfapeg__ent_adt_t)ivar_10);
             ltedfapeg_funtype_81_t ivar_23;
             ivar_2->count++;
             ivar_3->count++;
             ivar_23 = (ltedfapeg_funtype_81_t)ltedfapeg__good_failp((uint32_t)ivar_1, (ltedfapeg__lang_spec_t)ivar_2, (ltedfapeg_array_82_t)ivar_3);
             result = (bool_t)ivar_23->ftbl->mptr(ivar_23, ivar_6, ivar_8, ivar_9, ivar_12);
             ivar_23->ftbl->rptr(ivar_23);
} else {
        
             bool_t ivar_53;
             ivar_10->count++;
             ivar_53 = (bool_t)r_ltedfapeg__loopp((ltedfapeg__ent_adt_t)ivar_10);
             if (ivar_53){  
           release_ltedfapeg__ent_adt(ivar_10);
           release_ltedfapeg__ent_adt(ivar_10);
           ivar_2->count++;
           result = (bool_t)ltedfapeg__loop_readyp((uint32_t)ivar_1, (ltedfapeg__lang_spec_t)ivar_2, (ltedfapeg_array_62_t)ivar_6, (uint32_t)ivar_8, (uint8_t)ivar_9);
} else {
             
           bool_t ivar_103;
           ivar_10->count++;
           ivar_103 = (bool_t)r_ltedfapeg__goodp((ltedfapeg__ent_adt_t)ivar_10);
           if (ivar_103){   
           uint64_t ivar_57;
           ivar_10->count++;
           ivar_57 = (uint64_t)ltedfapeg__ent_adt_dep((ltedfapeg__ent_adt_t)ivar_10);
           uint32_t ivar_58;
           ivar_58 = (uint32_t)ltedfapeg__ent_adt_span((ltedfapeg__ent_adt_t)ivar_10);
           bool_t ivar_65;
           int32_t ivar_68;
           ivar_68 = (int32_t)((uint64_t)ivar_1 - (uint64_t)ivar_8);
           if ((ivar_68 < 0)){    
            ivar_65 = false;
} else {
           
            ivar_65 = (ivar_58 <= (uint32_t)ivar_68);
};
           if (ivar_65){    
            ltedfapeg_funtype_88_t ivar_84;
            ivar_2->count++;
            ivar_3->count++;
            ivar_84 = (ltedfapeg_funtype_88_t)ltedfapeg__good_goodp((uint32_t)ivar_1, (ltedfapeg__lang_spec_t)ivar_2, (ltedfapeg_array_82_t)ivar_3);
            mpz_ptr_t ivar_101;
            //copying to mpz from uint32;
            mpz_mk_set_ui(ivar_101, ivar_58);
            result = (bool_t)ivar_84->ftbl->mptr(ivar_84, ivar_6, ivar_8, ivar_9, ivar_57, ivar_101);
            ivar_84->ftbl->rptr(ivar_84);
} else {
           
            release_ltedfapeg_array_62(ivar_6);
            result = (bool_t) false;
};
} else {
           
           bool_t ivar_107;
           ivar_107 = (bool_t)r_ltedfapeg__pushp((ltedfapeg__ent_adt_t)ivar_10);
           if (ivar_107){    
            ltedfapeg__ent_adt_t ivar_123;
            ltedfapeg_array_61_t ivar_115;
            ivar_115 = (ltedfapeg_array_61_t)ivar_6->elems[ivar_8];
            ivar_115->count++;
            release_ltedfapeg_array_62(ivar_6);
            ivar_123 = (ltedfapeg__ent_adt_t)ivar_115->elems[ivar_9];
            ivar_123->count++;
            release_ltedfapeg_array_61(ivar_115);
            result = (bool_t)r_ltedfapeg__pendingp((ltedfapeg__ent_adt_t)ivar_123);
} else {
           
            release_ltedfapeg_array_62(ivar_6);
            result = (bool_t) false;
};
};
};
};

        return result;
}

ltedfapeg_closure_93_t new_ltedfapeg_closure_93(void){
        static struct ltedfapeg_funtype_91_ftbl_s ftbl = {.fptr = (bool_t (*)(ltedfapeg_funtype_91_t, ltedfapeg_record_90_t))&f_ltedfapeg_closure_93, .mptr = (bool_t (*)(ltedfapeg_funtype_91_t, ltedfapeg_array_62_t, uint32_t, uint8_t, ltedfapeg__ent_adt_t))&m_ltedfapeg_closure_93, .rptr =  (void (*)(ltedfapeg_funtype_91_t))&release_ltedfapeg_closure_93, .cptr = (ltedfapeg_funtype_91_t (*)(ltedfapeg_funtype_91_t))&copy_ltedfapeg_closure_93};
        ltedfapeg_closure_93_t tmp = (ltedfapeg_closure_93_t) safe_malloc(sizeof(struct ltedfapeg_closure_93_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_93(ltedfapeg_funtype_91_t closure){
        ltedfapeg_closure_93_t x = (ltedfapeg_closure_93_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg__lang_spec(x->fvar_2);
         release_ltedfapeg_array_82(x->fvar_3);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_93_t copy_ltedfapeg_closure_93(ltedfapeg_closure_93_t x){
        ltedfapeg_closure_93_t y = new_ltedfapeg_closure_93();
        y->ftbl = x->ftbl;

        y->fvar_1 = (uint32_t)x->fvar_1;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        y->fvar_3 = x->fvar_3; x->fvar_3->count++;
        if (x->htbl != NULL){
            ltedfapeg_funtype_91_htbl_t new_htbl = (ltedfapeg_funtype_91_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_91_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_91_hashentry_t * new_data = (ltedfapeg_funtype_91_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_91_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_91_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}

void release_ltedfapeg_funtype_94(ltedfapeg_funtype_94_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_94_t copy_ltedfapeg_funtype_94(ltedfapeg_funtype_94_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_94(ltedfapeg_funtype_94_t x, ltedfapeg_funtype_94_t y){
        return false;}

char* json_ltedfapeg_funtype_94(ltedfapeg_funtype_94_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_94\""); return result;}


bool_t f_ltedfapeg_closure_95(struct ltedfapeg_closure_95_s * closure, ltedfapeg_array_62_t bvar){
        bool_t result = h_ltedfapeg_closure_95(bvar, closure->fvar_1); 
        return result;}

bool_t m_ltedfapeg_closure_95(struct ltedfapeg_closure_95_s * closure, ltedfapeg_array_62_t bvar){
        return h_ltedfapeg_closure_95(bvar, closure->fvar_1);}

extern bool_t h_ltedfapeg_closure_95(ltedfapeg_array_62_t ivar_6, uint32_t ivar_1){
        bool_t result;
        result = (bool_t)u_undef_quant_expr();

        return result;
}

ltedfapeg_closure_95_t new_ltedfapeg_closure_95(void){
        static struct ltedfapeg_funtype_94_ftbl_s ftbl = {.fptr = (bool_t (*)(ltedfapeg_funtype_94_t, ltedfapeg_array_62_t))&f_ltedfapeg_closure_95, .mptr = (bool_t (*)(ltedfapeg_funtype_94_t, ltedfapeg_array_62_t))&m_ltedfapeg_closure_95, .rptr =  (void (*)(ltedfapeg_funtype_94_t))&release_ltedfapeg_closure_95, .cptr = (ltedfapeg_funtype_94_t (*)(ltedfapeg_funtype_94_t))&copy_ltedfapeg_closure_95};
        ltedfapeg_closure_95_t tmp = (ltedfapeg_closure_95_t) safe_malloc(sizeof(struct ltedfapeg_closure_95_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_95(ltedfapeg_funtype_94_t closure){
        ltedfapeg_closure_95_t x = (ltedfapeg_closure_95_t)closure;
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_95_t copy_ltedfapeg_closure_95(ltedfapeg_closure_95_t x){
        ltedfapeg_closure_95_t y = new_ltedfapeg_closure_95();
        y->ftbl = x->ftbl;

        y->fvar_1 = (uint32_t)x->fvar_1;
        if (x->htbl != NULL){
            ltedfapeg_funtype_94_htbl_t new_htbl = (ltedfapeg_funtype_94_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_94_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_94_hashentry_t * new_data = (ltedfapeg_funtype_94_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_94_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_94_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


bool_t f_ltedfapeg_closure_96(struct ltedfapeg_closure_96_s * closure, ltedfapeg_record_9_t bvar){
        uint32_t bvar_1;
        bvar_1 = (uint32_t)bvar->project_1;
        uint8_t bvar_2;
        bvar_2 = (uint8_t)bvar->project_2;
        release_ltedfapeg_record_9(bvar);
        bool_t result = h_ltedfapeg_closure_96(bvar_1, bvar_2, closure->fvar_1, closure->fvar_2); 
        return result;}

bool_t m_ltedfapeg_closure_96(struct ltedfapeg_closure_96_s * closure, uint32_t bvar_1, uint8_t bvar_2){
        return h_ltedfapeg_closure_96(bvar_1, bvar_2, closure->fvar_1, closure->fvar_2);}

extern bool_t h_ltedfapeg_closure_96(uint32_t ivar_5, uint8_t ivar_6, ltedfapeg_array_62_t ivar_2, uint32_t ivar_1){
        bool_t result;
        bool_t ivar_7;
        ltedfapeg__ent_adt_t ivar_19;
        ltedfapeg_array_61_t ivar_11;
        ivar_11 = (ltedfapeg_array_61_t)ivar_2->elems[ivar_5];
        ivar_11->count++;
        ivar_19 = (ltedfapeg__ent_adt_t)ivar_11->elems[ivar_6];
        ivar_19->count++;
        release_ltedfapeg_array_61(ivar_11);
        ivar_7 = (bool_t)r_ltedfapeg__pendingp((ltedfapeg__ent_adt_t)ivar_19);
        result = !ivar_7;

        return result;
}

ltedfapeg_closure_96_t new_ltedfapeg_closure_96(void){
        static struct ltedfapeg_funtype_60_ftbl_s ftbl = {.fptr = (bool_t (*)(ltedfapeg_funtype_60_t, ltedfapeg_record_9_t))&f_ltedfapeg_closure_96, .mptr = (bool_t (*)(ltedfapeg_funtype_60_t, uint32_t, uint8_t))&m_ltedfapeg_closure_96, .rptr =  (void (*)(ltedfapeg_funtype_60_t))&release_ltedfapeg_closure_96, .cptr = (ltedfapeg_funtype_60_t (*)(ltedfapeg_funtype_60_t))&copy_ltedfapeg_closure_96};
        ltedfapeg_closure_96_t tmp = (ltedfapeg_closure_96_t) safe_malloc(sizeof(struct ltedfapeg_closure_96_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_96(ltedfapeg_funtype_60_t closure){
        ltedfapeg_closure_96_t x = (ltedfapeg_closure_96_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg_array_62(x->fvar_1);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_96_t copy_ltedfapeg_closure_96(ltedfapeg_closure_96_t x){
        ltedfapeg_closure_96_t y = new_ltedfapeg_closure_96();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = (uint32_t)x->fvar_2;
        if (x->htbl != NULL){
            ltedfapeg_funtype_60_htbl_t new_htbl = (ltedfapeg_funtype_60_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_60_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_60_hashentry_t * new_data = (ltedfapeg_funtype_60_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_60_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_60_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}

void release_ltedfapeg_funtype_97(ltedfapeg_funtype_97_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_97_t copy_ltedfapeg_funtype_97(ltedfapeg_funtype_97_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_97(ltedfapeg_funtype_97_t x, ltedfapeg_funtype_97_t y){
        return false;}

char* json_ltedfapeg_funtype_97(ltedfapeg_funtype_97_t x){char * result = safe_malloc(30); sprintf(result, "%s", "\"ltedfapeg_funtype_97\""); return result;}


ltedfapeg_funtype_94_t f_ltedfapeg_closure_98(struct ltedfapeg_closure_98_s * closure, ltedfapeg_record_9_t bvar){
        uint32_t bvar_1;
        bvar_1 = (uint32_t)bvar->project_1;
        uint8_t bvar_2;
        bvar_2 = (uint8_t)bvar->project_2;
        release_ltedfapeg_record_9(bvar);
        ltedfapeg_funtype_94_t result = h_ltedfapeg_closure_98(bvar_1, bvar_2, closure->fvar_1, closure->fvar_2, closure->fvar_3); 
        return result;}

ltedfapeg_funtype_94_t m_ltedfapeg_closure_98(struct ltedfapeg_closure_98_s * closure, uint32_t bvar_1, uint8_t bvar_2){
        return h_ltedfapeg_closure_98(bvar_1, bvar_2, closure->fvar_1, closure->fvar_2, closure->fvar_3);}

extern ltedfapeg_funtype_94_t h_ltedfapeg_closure_98(uint32_t ivar_7, uint8_t ivar_8, ltedfapeg_array_82_t ivar_3, ltedfapeg__lang_spec_t ivar_2, uint32_t ivar_1){
        ltedfapeg_funtype_94_t result;
        ltedfapeg_closure_99_t cl433362;
        cl433362 = new_ltedfapeg_closure_99();
        cl433362->fvar_1 = (uint32_t)ivar_7;
        cl433362->fvar_2 = (uint32_t)ivar_1;
        cl433362->fvar_3 = (uint8_t)ivar_8;
        cl433362->fvar_4 = (ltedfapeg__lang_spec_t)ivar_2;
        if (cl433362->fvar_4 != NULL) cl433362->fvar_4->count++;
        cl433362->fvar_5 = (ltedfapeg_array_82_t)ivar_3;
        if (cl433362->fvar_5 != NULL) cl433362->fvar_5->count++;
        result = (ltedfapeg_funtype_94_t)cl433362;

        return result;
}

ltedfapeg_closure_98_t new_ltedfapeg_closure_98(void){
        static struct ltedfapeg_funtype_97_ftbl_s ftbl = {.fptr = (ltedfapeg_funtype_94_t (*)(ltedfapeg_funtype_97_t, ltedfapeg_record_9_t))&f_ltedfapeg_closure_98, .mptr = (ltedfapeg_funtype_94_t (*)(ltedfapeg_funtype_97_t, uint32_t, uint8_t))&m_ltedfapeg_closure_98, .rptr =  (void (*)(ltedfapeg_funtype_97_t))&release_ltedfapeg_closure_98, .cptr = (ltedfapeg_funtype_97_t (*)(ltedfapeg_funtype_97_t))&copy_ltedfapeg_closure_98};
        ltedfapeg_closure_98_t tmp = (ltedfapeg_closure_98_t) safe_malloc(sizeof(struct ltedfapeg_closure_98_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_98(ltedfapeg_funtype_97_t closure){
        ltedfapeg_closure_98_t x = (ltedfapeg_closure_98_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg_array_82(x->fvar_1);
         release_ltedfapeg__lang_spec(x->fvar_2);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_98_t copy_ltedfapeg_closure_98(ltedfapeg_closure_98_t x){
        ltedfapeg_closure_98_t y = new_ltedfapeg_closure_98();
        y->ftbl = x->ftbl;

        y->fvar_1 = x->fvar_1; x->fvar_1->count++;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        y->fvar_3 = (uint32_t)x->fvar_3;
        if (x->htbl != NULL){
            ltedfapeg_funtype_97_htbl_t new_htbl = (ltedfapeg_funtype_97_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_97_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_97_hashentry_t * new_data = (ltedfapeg_funtype_97_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_97_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_97_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


bool_t f_ltedfapeg_closure_99(struct ltedfapeg_closure_99_s * closure, ltedfapeg_array_62_t bvar){
        bool_t result = h_ltedfapeg_closure_99(bvar, closure->fvar_1, closure->fvar_2, closure->fvar_3, closure->fvar_4, closure->fvar_5); 
        return result;}

bool_t m_ltedfapeg_closure_99(struct ltedfapeg_closure_99_s * closure, ltedfapeg_array_62_t bvar){
        return h_ltedfapeg_closure_99(bvar, closure->fvar_1, closure->fvar_2, closure->fvar_3, closure->fvar_4, closure->fvar_5);}

extern bool_t h_ltedfapeg_closure_99(ltedfapeg_array_62_t ivar_11, uint32_t ivar_7, uint32_t ivar_1, uint8_t ivar_8, ltedfapeg__lang_spec_t ivar_2, ltedfapeg_array_82_t ivar_3){
        bool_t result;
        bool_t ivar_13;
        ltedfapeg_funtype_60_t ivar_19;
        ivar_11->count++;
        ivar_19 = (ltedfapeg_funtype_60_t)ltedfapeg__good_rootp((uint32_t)ivar_1, (ltedfapeg_array_62_t)ivar_11);
        ivar_13 = (bool_t)ivar_19->ftbl->mptr(ivar_19, ivar_7, ivar_8);
        ivar_19->ftbl->rptr(ivar_19);
        if (ivar_13){ 
             ltedfapeg_funtype_94_t ivar_33;
             ivar_2->count++;
             ivar_3->count++;
             ivar_33 = (ltedfapeg_funtype_94_t)ltedfapeg__good_tscaffoldp((uint32_t)ivar_1, (ltedfapeg__lang_spec_t)ivar_2, (ltedfapeg_array_82_t)ivar_3);
             result = (bool_t)ivar_33->ftbl->fptr(ivar_33, ivar_11);
             ivar_33->ftbl->rptr(ivar_33);
} else {
        
             release_ltedfapeg_array_62(ivar_11);
             result = (bool_t) false;
};

        return result;
}

ltedfapeg_closure_99_t new_ltedfapeg_closure_99(void){
        static struct ltedfapeg_funtype_94_ftbl_s ftbl = {.fptr = (bool_t (*)(ltedfapeg_funtype_94_t, ltedfapeg_array_62_t))&f_ltedfapeg_closure_99, .mptr = (bool_t (*)(ltedfapeg_funtype_94_t, ltedfapeg_array_62_t))&m_ltedfapeg_closure_99, .rptr =  (void (*)(ltedfapeg_funtype_94_t))&release_ltedfapeg_closure_99, .cptr = (ltedfapeg_funtype_94_t (*)(ltedfapeg_funtype_94_t))&copy_ltedfapeg_closure_99};
        ltedfapeg_closure_99_t tmp = (ltedfapeg_closure_99_t) safe_malloc(sizeof(struct ltedfapeg_closure_99_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_99(ltedfapeg_funtype_94_t closure){
        ltedfapeg_closure_99_t x = (ltedfapeg_closure_99_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg__lang_spec(x->fvar_4);
         release_ltedfapeg_array_82(x->fvar_5);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_99_t copy_ltedfapeg_closure_99(ltedfapeg_closure_99_t x){
        ltedfapeg_closure_99_t y = new_ltedfapeg_closure_99();
        y->ftbl = x->ftbl;

        y->fvar_1 = (uint32_t)x->fvar_1;
        y->fvar_2 = (uint32_t)x->fvar_2;
        y->fvar_3 = (uint8_t)x->fvar_3;
        y->fvar_4 = x->fvar_4; x->fvar_4->count++;
        y->fvar_5 = x->fvar_5; x->fvar_5->count++;
        if (x->htbl != NULL){
            ltedfapeg_funtype_94_htbl_t new_htbl = (ltedfapeg_funtype_94_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_94_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_94_hashentry_t * new_data = (ltedfapeg_funtype_94_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_94_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_94_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


ltedfapeg_record_100_t new_ltedfapeg_record_100(void){
        ltedfapeg_record_100_t tmp = (ltedfapeg_record_100_t) safe_malloc(sizeof(struct ltedfapeg_record_100_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapeg_record_100(ltedfapeg_record_100_t x){
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg_array_62(x->scaf);
         release_ltedfapeg__ent_adt(x->stack);
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_ltedfapeg_record_100_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg_record_100((ltedfapeg_record_100_t)x);
}

ltedfapeg_record_100_t copy_ltedfapeg_record_100(ltedfapeg_record_100_t x){
        ltedfapeg_record_100_t y = new_ltedfapeg_record_100();
        y->scaf = x->scaf;
        if (y->scaf != NULL){y->scaf->count++;};
        y->depth = (uint64_t)x->depth;
        y->stack = x->stack;
        if (y->stack != NULL){y->stack->count++;};
        y->lflag = (bool_t)x->lflag;
        y->count = 1;
        return y;}

bool_t equal_ltedfapeg_record_100(ltedfapeg_record_100_t x, ltedfapeg_record_100_t y){
        bool_t tmp = true;
        tmp = tmp && equal_ltedfapeg_array_62(x->scaf, y->scaf);
        tmp = tmp && x->depth == y->depth;
        tmp = tmp && equal_ltedfapeg__ent_adt(x->stack, y->stack);
        tmp = tmp && x->lflag == y->lflag;
        return tmp;}

char * json_ltedfapeg_record_100(ltedfapeg_record_100_t x){
        char * tmp[4]; 
        char * fld0 = safe_malloc(16);
         sprintf(fld0, "\"scaf\" : ");
        tmp[0] = safe_strcat(fld0, json_ltedfapeg_array_62(x->scaf));
        char * fld1 = safe_malloc(17);
         sprintf(fld1, "\"depth\" : ");
        tmp[1] = safe_strcat(fld1, json_uint64(x->depth));
        char * fld2 = safe_malloc(17);
         sprintf(fld2, "\"stack\" : ");
        tmp[2] = safe_strcat(fld2, json_ltedfapeg__ent_adt(x->stack));
        char * fld3 = safe_malloc(17);
         sprintf(fld3, "\"lflag\" : ");
        tmp[3] = safe_strcat(fld3, json_bool(x->lflag));
         char * result = json_list_with_sep(tmp, 4,  '{', ',', '}');
         for (uint32_t i = 0; i < 4; i++) free(tmp[i]);
        return result;}

bool_t equal_ltedfapeg_record_100_ptr(pointer_t x, pointer_t y, actual_ltedfapeg_record_100_t T){
        return equal_ltedfapeg_record_100((ltedfapeg_record_100_t)x, (ltedfapeg_record_100_t)y);
}

char * json_ltedfapeg_record_100_ptr(pointer_t x, actual_ltedfapeg_record_100_t T){
        return json_ltedfapeg_record_100((ltedfapeg_record_100_t)x);
}

actual_ltedfapeg_record_100_t actual_ltedfapeg_record_100(){
        actual_ltedfapeg_record_100_t new = (actual_ltedfapeg_record_100_t)safe_malloc(sizeof(struct actual_ltedfapeg_record_100_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg_record_100_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg_record_100_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg_record_100_ptr);
 

 
        return new;
 };

ltedfapeg_record_100_t update_ltedfapeg_record_100_scaf(ltedfapeg_record_100_t x, ltedfapeg_array_62_t v){
        ltedfapeg_record_100_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->scaf != NULL){release_ltedfapeg_array_62(x->scaf);};}
        else {y = copy_ltedfapeg_record_100(x); x->count--; y->scaf->count--;};
        y->scaf = (ltedfapeg_array_62_t)v;
        return y;}

ltedfapeg_record_100_t update_ltedfapeg_record_100_depth(ltedfapeg_record_100_t x, uint64_t v){
        ltedfapeg_record_100_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_100(x); x->count--;};
        y->depth = (uint64_t)v;
        return y;}

ltedfapeg_record_100_t update_ltedfapeg_record_100_stack(ltedfapeg_record_100_t x, ltedfapeg__ent_adt_t v){
        ltedfapeg_record_100_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->stack != NULL){release_ltedfapeg__ent_adt(x->stack);};}
        else {y = copy_ltedfapeg_record_100(x); x->count--; y->stack->count--;};
        y->stack = (ltedfapeg__ent_adt_t)v;
        return y;}

ltedfapeg_record_100_t update_ltedfapeg_record_100_lflag(ltedfapeg_record_100_t x, bool_t v){
        ltedfapeg_record_100_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_100(x); x->count--;};
        y->lflag = (bool_t)v;
        return y;}



void release_ltedfapeg_funtype_101(ltedfapeg_funtype_101_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_101_t copy_ltedfapeg_funtype_101(ltedfapeg_funtype_101_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_101(ltedfapeg_funtype_101_t x, ltedfapeg_funtype_101_t y){
        return false;}

char* json_ltedfapeg_funtype_101(ltedfapeg_funtype_101_t x){char * result = safe_malloc(31); sprintf(result, "%s", "\"ltedfapeg_funtype_101\""); return result;}


ltedfapeg_record_100_t f_ltedfapeg_closure_102(struct ltedfapeg_closure_102_s * closure, ltedfapeg_record_100_t bvar){
        ltedfapeg_record_100_t result = h_ltedfapeg_closure_102(bvar, closure->fvar_1, closure->fvar_2, closure->fvar_3); 
        return result;}

ltedfapeg_record_100_t m_ltedfapeg_closure_102(struct ltedfapeg_closure_102_s * closure, ltedfapeg_record_100_t bvar){
        return h_ltedfapeg_closure_102(bvar, closure->fvar_1, closure->fvar_2, closure->fvar_3);}

extern ltedfapeg_record_100_t h_ltedfapeg_closure_102(ltedfapeg_record_100_t ivar_9, uint32_t ivar_1, ltedfapeg_array_82_t ivar_3, ltedfapeg__lang_spec_t ivar_2){
        ltedfapeg_record_100_t result;
        /* scaf */ ltedfapeg_array_62_t ivar_12;
        ivar_12 = (ltedfapeg_array_62_t)ivar_9->scaf;
        ivar_12->count++;
        /* stack */ ltedfapeg__ent_adt_t ivar_17;
        ivar_17 = (ltedfapeg__ent_adt_t)ivar_9->stack;
        ivar_17->count++;
        /* depth */ uint64_t ivar_20;
        ivar_20 = (uint64_t)ivar_9->depth;
        bool_t ivar_26;
        ivar_17->count++;
        ivar_26 = (bool_t)ltedfapeg__emptyp((ltedfapeg__ent_adt_t)ivar_17);
        if (ivar_26){ 
             release_ltedfapeg_array_62(ivar_12);
             release_ltedfapeg__ent_adt(ivar_17);
             //copying to ltedfapeg_record_100 from ltedfapeg_record_100;
             result = (ltedfapeg_record_100_t)ivar_9;
             if (result != NULL) result->count++;
             release_ltedfapeg_record_100(ivar_9);
} else {
        
             /* pos */ uint32_t ivar_31;
             ivar_17->count++;
             ivar_31 = (uint32_t)ltedfapeg__ent_adt_pos((ltedfapeg__ent_adt_t)ivar_17);
             /* cur */ uint8_t ivar_35;
             ivar_17->count++;
             ivar_35 = (uint8_t)ltedfapeg__ent_adt_nt((ltedfapeg__ent_adt_t)ivar_17);
             /* rest */ ltedfapeg__ent_adt_t ivar_39;
             ltedfapeg_array_61_t ivar_42;
             ivar_42 = (ltedfapeg_array_61_t)ivar_12->elems[ivar_31];
             ivar_42->count++;
             ivar_39 = (ltedfapeg__ent_adt_t)ivar_42->elems[ivar_35];
             ivar_39->count++;
             release_ltedfapeg_array_61(ivar_42);
             ltedfapeg__prepeg_adt_t ivar_49;
             ivar_49 = (ltedfapeg__prepeg_adt_t)ivar_2->elems[ivar_35];
             ivar_49->count++;
             bool_t ivar_95;
             ivar_49->count++;
             ivar_95 = (bool_t)r_ltedfapeg__epsilonp((ltedfapeg__prepeg_adt_t)ivar_49);
             if (ivar_95){  
           release_ltedfapeg__prepeg_adt(ivar_49);
           release_ltedfapeg_array_62(ivar_12);
           release_ltedfapeg__ent_adt(ivar_17);
           ltedfapeg__ent_adt_t ivar_55;
           uint8_t ivar_66;
           ivar_66 = (uint8_t)0;
           uint64_t ivar_61;
           //copying to uint64 from uint8;
           ivar_61 = (uint64_t)ivar_66;
           uint8_t ivar_65;
           ivar_65 = (uint8_t)0;
           uint32_t ivar_62;
           //copying to uint32 from uint8;
           ivar_62 = (uint32_t)ivar_65;
           ivar_55 = (ltedfapeg__ent_adt_t)ltedfapeg__good((uint64_t)ivar_61, (uint32_t)ivar_62);
           uint64_t ivar_57;
           uint8_t ivar_68;
           ivar_68 = (uint8_t)1;
           ivar_57 = (uint64_t)(ivar_20 - ivar_68);
           ltedfapeg_record_100_t ivar_85;
           ltedfapeg_array_62_t ivar_71;
           ivar_71 = (ltedfapeg_array_62_t)ivar_9->scaf;
           ivar_71->count++;
           ltedfapeg_record_100_t ivar_82;
           ltedfapeg_array_62_t ivar_84;
           ivar_84 = NULL;
           ivar_82 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_scaf(ivar_9, ivar_84);
           if (ivar_84 != NULL) ivar_84->count--;
           ltedfapeg_array_62_t ivar_83;
           ltedfapeg_array_61_t ivar_72;
           ivar_72 = (ltedfapeg_array_61_t)ivar_71->elems[ivar_31];
           ivar_72->count++;
           ltedfapeg_array_62_t ivar_79;
           ltedfapeg_array_61_t ivar_81;
           ivar_81 = NULL;
           ivar_79 = (ltedfapeg_array_62_t)update_ltedfapeg_array_62(ivar_71, ivar_31, ivar_81);
           if (ivar_81 != NULL) ivar_81->count--;
           ltedfapeg_array_61_t ivar_80;
           ltedfapeg_array_61_t ivar_75;
           ltedfapeg__ent_adt_t ivar_77;
           ivar_77 = NULL;
           ivar_75 = (ltedfapeg_array_61_t)update_ltedfapeg_array_61(ivar_72, ivar_35, ivar_77);
           if (ivar_77 != NULL) ivar_77->count--;
           ivar_80 = (ltedfapeg_array_61_t)update_ltedfapeg_array_61(ivar_75, ivar_35, ivar_55);
           if (ivar_55 != NULL) ivar_55->count--;
           ivar_83 = (ltedfapeg_array_62_t)update_ltedfapeg_array_62(ivar_79, ivar_31, ivar_80);
           if (ivar_80 != NULL) ivar_80->count--;
           ivar_85 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_scaf(ivar_82, ivar_83);
           if (ivar_83 != NULL) ivar_83->count--;
           ltedfapeg_record_100_t ivar_90;
           ltedfapeg_record_100_t ivar_87;
           ltedfapeg__ent_adt_t ivar_89;
           ivar_89 = NULL;
           ivar_87 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_stack(ivar_85, ivar_89);
           if (ivar_89 != NULL) ivar_89->count--;
           ivar_90 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_stack(ivar_87, ivar_39);
           if (ivar_39 != NULL) ivar_39->count--;
           result = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_depth(ivar_90, ivar_57);
} else {
             
           bool_t ivar_136;
           ivar_49->count++;
           ivar_136 = (bool_t)r_ltedfapeg__failurep((ltedfapeg__prepeg_adt_t)ivar_49);
           if (ivar_136){   
           release_ltedfapeg__prepeg_adt(ivar_49);
           release_ltedfapeg_array_62(ivar_12);
           release_ltedfapeg__ent_adt(ivar_17);
           ltedfapeg__ent_adt_t ivar_100;
           uint8_t ivar_107;
           ivar_107 = (uint8_t)0;
           uint64_t ivar_105;
           //copying to uint64 from uint8;
           ivar_105 = (uint64_t)ivar_107;
           ivar_100 = (ltedfapeg__ent_adt_t)ltedfapeg__fail((uint64_t)ivar_105);
           uint64_t ivar_102;
           uint8_t ivar_109;
           ivar_109 = (uint8_t)1;
           ivar_102 = (uint64_t)(ivar_20 - ivar_109);
           ltedfapeg_record_100_t ivar_126;
           ltedfapeg_array_62_t ivar_112;
           ivar_112 = (ltedfapeg_array_62_t)ivar_9->scaf;
           ivar_112->count++;
           ltedfapeg_record_100_t ivar_123;
           ltedfapeg_array_62_t ivar_125;
           ivar_125 = NULL;
           ivar_123 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_scaf(ivar_9, ivar_125);
           if (ivar_125 != NULL) ivar_125->count--;
           ltedfapeg_array_62_t ivar_124;
           ltedfapeg_array_61_t ivar_113;
           ivar_113 = (ltedfapeg_array_61_t)ivar_112->elems[ivar_31];
           ivar_113->count++;
           ltedfapeg_array_62_t ivar_120;
           ltedfapeg_array_61_t ivar_122;
           ivar_122 = NULL;
           ivar_120 = (ltedfapeg_array_62_t)update_ltedfapeg_array_62(ivar_112, ivar_31, ivar_122);
           if (ivar_122 != NULL) ivar_122->count--;
           ltedfapeg_array_61_t ivar_121;
           ltedfapeg_array_61_t ivar_116;
           ltedfapeg__ent_adt_t ivar_118;
           ivar_118 = NULL;
           ivar_116 = (ltedfapeg_array_61_t)update_ltedfapeg_array_61(ivar_113, ivar_35, ivar_118);
           if (ivar_118 != NULL) ivar_118->count--;
           ivar_121 = (ltedfapeg_array_61_t)update_ltedfapeg_array_61(ivar_116, ivar_35, ivar_100);
           if (ivar_100 != NULL) ivar_100->count--;
           ivar_124 = (ltedfapeg_array_62_t)update_ltedfapeg_array_62(ivar_120, ivar_31, ivar_121);
           if (ivar_121 != NULL) ivar_121->count--;
           ivar_126 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_scaf(ivar_123, ivar_124);
           if (ivar_124 != NULL) ivar_124->count--;
           ltedfapeg_record_100_t ivar_131;
           ltedfapeg_record_100_t ivar_128;
           ltedfapeg__ent_adt_t ivar_130;
           ivar_130 = NULL;
           ivar_128 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_stack(ivar_126, ivar_130);
           if (ivar_130 != NULL) ivar_130->count--;
           ivar_131 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_stack(ivar_128, ivar_39);
           if (ivar_39 != NULL) ivar_39->count--;
           result = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_depth(ivar_131, ivar_102);
} else {
           
           bool_t ivar_206;
           ivar_49->count++;
           ivar_206 = (bool_t)r_ltedfapeg__anyp((ltedfapeg__prepeg_adt_t)ivar_49);
           if (ivar_206){    
            release_ltedfapeg_array_62(ivar_12);
            release_ltedfapeg__ent_adt(ivar_17);
            dfa__dfa_t ivar_140;
            ivar_140 = (dfa__dfa_t)ltedfapeg__prepeg_adt_dfa((ltedfapeg__prepeg_adt_t)ivar_49);
            /* res */ dfa__dfaResult_adt_t ivar_144;
            ivar_3->count++;
            ivar_144 = (dfa__dfaResult_adt_t)dfa__DfaParse((dfa__dfa_t)ivar_140, (uint32_t)ivar_1, (dfa_array_20_t)ivar_3, (uint32_t)ivar_31);
            /* v */ ltedfapeg__ent_adt_t ivar_154;
            bool_t ivar_155;
            ivar_144->count++;
            ivar_155 = (bool_t)r_dfa__failedp((dfa__dfaResult_adt_t)ivar_144);
            if (ivar_155){     
             release_dfa__dfaResult_adt(ivar_144);
             uint8_t ivar_163;
             ivar_163 = (uint8_t)0;
             uint64_t ivar_161;
             //copying to uint64 from uint8;
             ivar_161 = (uint64_t)ivar_163;
             ivar_154 = (ltedfapeg__ent_adt_t)ltedfapeg__fail((uint64_t)ivar_161);
} else {
            
             uint8_t ivar_173;
             ivar_173 = (uint8_t)0;
             uint64_t ivar_170;
             //copying to uint64 from uint8;
             ivar_170 = (uint64_t)ivar_173;
             uint32_t ivar_171;
             ivar_171 = (uint32_t)dfa__dfaResult_adt_span((dfa__dfaResult_adt_t)ivar_144);
             ivar_154 = (ltedfapeg__ent_adt_t)ltedfapeg__good((uint64_t)ivar_170, (uint32_t)ivar_171);
};
            uint64_t ivar_177;
            uint8_t ivar_179;
            ivar_179 = (uint8_t)1;
            ivar_177 = (uint64_t)(ivar_20 - ivar_179);
            ltedfapeg_record_100_t ivar_196;
            ltedfapeg_array_62_t ivar_182;
            ivar_182 = (ltedfapeg_array_62_t)ivar_9->scaf;
            ivar_182->count++;
            ltedfapeg_record_100_t ivar_193;
            ltedfapeg_array_62_t ivar_195;
            ivar_195 = NULL;
            ivar_193 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_scaf(ivar_9, ivar_195);
            if (ivar_195 != NULL) ivar_195->count--;
            ltedfapeg_array_62_t ivar_194;
            ltedfapeg_array_61_t ivar_183;
            ivar_183 = (ltedfapeg_array_61_t)ivar_182->elems[ivar_31];
            ivar_183->count++;
            ltedfapeg_array_62_t ivar_190;
            ltedfapeg_array_61_t ivar_192;
            ivar_192 = NULL;
            ivar_190 = (ltedfapeg_array_62_t)update_ltedfapeg_array_62(ivar_182, ivar_31, ivar_192);
            if (ivar_192 != NULL) ivar_192->count--;
            ltedfapeg_array_61_t ivar_191;
            ltedfapeg_array_61_t ivar_186;
            ltedfapeg__ent_adt_t ivar_188;
            ivar_188 = NULL;
            ivar_186 = (ltedfapeg_array_61_t)update_ltedfapeg_array_61(ivar_183, ivar_35, ivar_188);
            if (ivar_188 != NULL) ivar_188->count--;
            ivar_191 = (ltedfapeg_array_61_t)update_ltedfapeg_array_61(ivar_186, ivar_35, ivar_154);
            if (ivar_154 != NULL) ivar_154->count--;
            ivar_194 = (ltedfapeg_array_62_t)update_ltedfapeg_array_62(ivar_190, ivar_31, ivar_191);
            if (ivar_191 != NULL) ivar_191->count--;
            ivar_196 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_scaf(ivar_193, ivar_194);
            if (ivar_194 != NULL) ivar_194->count--;
            ltedfapeg_record_100_t ivar_201;
            ltedfapeg_record_100_t ivar_198;
            ltedfapeg__ent_adt_t ivar_200;
            ivar_200 = NULL;
            ivar_198 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_stack(ivar_196, ivar_200);
            if (ivar_200 != NULL) ivar_200->count--;
            ivar_201 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_stack(ivar_198, ivar_39);
            if (ivar_39 != NULL) ivar_39->count--;
            result = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_depth(ivar_201, ivar_177);
} else {
           
            bool_t ivar_275;
            ivar_49->count++;
            ivar_275 = (bool_t)r_ltedfapeg__terminalp((ltedfapeg__prepeg_adt_t)ivar_49);
            if (ivar_275){     
             release_ltedfapeg_array_62(ivar_12);
             release_ltedfapeg__ent_adt(ivar_17);
             uint8_t ivar_210;
             ivar_210 = (uint8_t)ltedfapeg__prepeg_adt_a((ltedfapeg__prepeg_adt_t)ivar_49);
             /* v */ ltedfapeg__ent_adt_t ivar_214;
             bool_t ivar_215;
             bool_t ivar_216;
             ivar_216 = (ivar_31 == ivar_1);
             if (ivar_216){      
              ivar_215 = (bool_t) true;
} else {
             
              uint8_t ivar_222;
              ivar_222 = (uint8_t)ivar_3->elems[ivar_31];
              ivar_215 = (ivar_210 != ivar_222);
};
             if (ivar_215){      
              uint8_t ivar_233;
              ivar_233 = (uint8_t)0;
              uint64_t ivar_231;
              //copying to uint64 from uint8;
              ivar_231 = (uint64_t)ivar_233;
              ivar_214 = (ltedfapeg__ent_adt_t)ltedfapeg__fail((uint64_t)ivar_231);
} else {
             
              uint8_t ivar_242;
              ivar_242 = (uint8_t)0;
              uint64_t ivar_237;
              //copying to uint64 from uint8;
              ivar_237 = (uint64_t)ivar_242;
              uint8_t ivar_241;
              ivar_241 = (uint8_t)1;
              uint32_t ivar_238;
              //copying to uint32 from uint8;
              ivar_238 = (uint32_t)ivar_241;
              ivar_214 = (ltedfapeg__ent_adt_t)ltedfapeg__good((uint64_t)ivar_237, (uint32_t)ivar_238);
};
             uint64_t ivar_246;
             uint8_t ivar_248;
             ivar_248 = (uint8_t)1;
             ivar_246 = (uint64_t)(ivar_20 - ivar_248);
             ltedfapeg_record_100_t ivar_265;
             ltedfapeg_array_62_t ivar_251;
             ivar_251 = (ltedfapeg_array_62_t)ivar_9->scaf;
             ivar_251->count++;
             ltedfapeg_record_100_t ivar_262;
             ltedfapeg_array_62_t ivar_264;
             ivar_264 = NULL;
             ivar_262 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_scaf(ivar_9, ivar_264);
             if (ivar_264 != NULL) ivar_264->count--;
             ltedfapeg_array_62_t ivar_263;
             ltedfapeg_array_61_t ivar_252;
             ivar_252 = (ltedfapeg_array_61_t)ivar_251->elems[ivar_31];
             ivar_252->count++;
             ltedfapeg_array_62_t ivar_259;
             ltedfapeg_array_61_t ivar_261;
             ivar_261 = NULL;
             ivar_259 = (ltedfapeg_array_62_t)update_ltedfapeg_array_62(ivar_251, ivar_31, ivar_261);
             if (ivar_261 != NULL) ivar_261->count--;
             ltedfapeg_array_61_t ivar_260;
             ltedfapeg_array_61_t ivar_255;
             ltedfapeg__ent_adt_t ivar_257;
             ivar_257 = NULL;
             ivar_255 = (ltedfapeg_array_61_t)update_ltedfapeg_array_61(ivar_252, ivar_35, ivar_257);
             if (ivar_257 != NULL) ivar_257->count--;
             ivar_260 = (ltedfapeg_array_61_t)update_ltedfapeg_array_61(ivar_255, ivar_35, ivar_214);
             if (ivar_214 != NULL) ivar_214->count--;
             ivar_263 = (ltedfapeg_array_62_t)update_ltedfapeg_array_62(ivar_259, ivar_31, ivar_260);
             if (ivar_260 != NULL) ivar_260->count--;
             ivar_265 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_scaf(ivar_262, ivar_263);
             if (ivar_263 != NULL) ivar_263->count--;
             ltedfapeg_record_100_t ivar_270;
             ltedfapeg_record_100_t ivar_267;
             ltedfapeg__ent_adt_t ivar_269;
             ivar_269 = NULL;
             ivar_267 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_stack(ivar_265, ivar_269);
             if (ivar_269 != NULL) ivar_269->count--;
             ivar_270 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_stack(ivar_267, ivar_39);
             if (ivar_39 != NULL) ivar_39->count--;
             result = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_depth(ivar_270, ivar_246);
} else {
            
             uint8_t ivar_279;
             ivar_49->count++;
             ivar_279 = (uint8_t)ltedfapeg__prepeg_adt_fst((ltedfapeg__prepeg_adt_t)ivar_49);
             uint8_t ivar_280;
             ivar_49->count++;
             ivar_280 = (uint8_t)ltedfapeg__prepeg_adt_lthen((ltedfapeg__prepeg_adt_t)ivar_49);
             uint8_t ivar_281;
             ivar_281 = (uint8_t)ltedfapeg__prepeg_adt_lelse((ltedfapeg__prepeg_adt_t)ivar_49);
             ltedfapeg__ent_adt_t ivar_291;
             ltedfapeg_array_61_t ivar_294;
             ltedfapeg_array_62_t ivar_298;
             ivar_298 = (ltedfapeg_array_62_t)ivar_9->scaf;
             ivar_298->count++;
             ivar_294 = (ltedfapeg_array_61_t)ivar_298->elems[ivar_31];
             ivar_294->count++;
             release_ltedfapeg_array_62(ivar_298);
             ivar_291 = (ltedfapeg__ent_adt_t)ivar_294->elems[ivar_279];
             ivar_291->count++;
             release_ltedfapeg_array_61(ivar_294);
             bool_t ivar_507;
             ivar_291->count++;
             ivar_507 = (bool_t)r_ltedfapeg__failp((ltedfapeg__ent_adt_t)ivar_291);
             if (ivar_507){      
              uint64_t ivar_303;
              ivar_303 = (uint64_t)ltedfapeg__ent_adt_dep((ltedfapeg__ent_adt_t)ivar_291);
              ltedfapeg__ent_adt_t ivar_307;
              ltedfapeg_array_61_t ivar_310;
              ivar_310 = (ltedfapeg_array_61_t)ivar_12->elems[ivar_31];
              ivar_310->count++;
              release_ltedfapeg_array_62(ivar_12);
              ivar_307 = (ltedfapeg__ent_adt_t)ivar_310->elems[ivar_281];
              ivar_307->count++;
              release_ltedfapeg_array_61(ivar_310);
              bool_t ivar_366;
              ivar_307->count++;
              ivar_366 = (bool_t)r_ltedfapeg__failp((ltedfapeg__ent_adt_t)ivar_307);
              if (ivar_366){       
               release_ltedfapeg__ent_adt(ivar_17);
               uint64_t ivar_317;
               ivar_317 = (uint64_t)ltedfapeg__ent_adt_dep((ltedfapeg__ent_adt_t)ivar_307);
               ltedfapeg__ent_adt_t ivar_322;
               mpz_ptr_t ivar_337;
               mpq_ptr_t ivar_326;
               mpq_ptr_t ivar_331;
               //copying to mpq from uint64;
               mpq_mk_set_ui(ivar_331, ivar_303);
               mpq_ptr_t ivar_332;
               //copying to mpq from uint64;
               mpq_mk_set_ui(ivar_332, ivar_317);
               ivar_326 = (mpq_ptr_t)real_defs__max((mpq_ptr_t)ivar_331, (mpq_ptr_t)ivar_332);
               uint8_t ivar_327;
               ivar_327 = (uint8_t)1;
               mpz_mk_set_q(ivar_337, ivar_326);
               mpz_add_ui(ivar_337, ivar_337, (uint64_t)ivar_327);
               uint64_t ivar_335;
               //copying to uint64 from mpz;
               ivar_335 = (uint64_t)mpz_get_ui(ivar_337);
               mpz_clear(ivar_337);
               ivar_322 = (ltedfapeg__ent_adt_t)ltedfapeg__fail((uint64_t)ivar_335);
               uint64_t ivar_324;
               uint8_t ivar_339;
               ivar_339 = (uint8_t)1;
               ivar_324 = (uint64_t)(ivar_20 - ivar_339);
               ltedfapeg_record_100_t ivar_356;
               ltedfapeg_array_62_t ivar_342;
               ivar_342 = (ltedfapeg_array_62_t)ivar_9->scaf;
               ivar_342->count++;
               ltedfapeg_record_100_t ivar_353;
               ltedfapeg_array_62_t ivar_355;
               ivar_355 = NULL;
               ivar_353 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_scaf(ivar_9, ivar_355);
               if (ivar_355 != NULL) ivar_355->count--;
               ltedfapeg_array_62_t ivar_354;
               ltedfapeg_array_61_t ivar_343;
               ivar_343 = (ltedfapeg_array_61_t)ivar_342->elems[ivar_31];
               ivar_343->count++;
               ltedfapeg_array_62_t ivar_350;
               ltedfapeg_array_61_t ivar_352;
               ivar_352 = NULL;
               ivar_350 = (ltedfapeg_array_62_t)update_ltedfapeg_array_62(ivar_342, ivar_31, ivar_352);
               if (ivar_352 != NULL) ivar_352->count--;
               ltedfapeg_array_61_t ivar_351;
               ltedfapeg_array_61_t ivar_346;
               ltedfapeg__ent_adt_t ivar_348;
               ivar_348 = NULL;
               ivar_346 = (ltedfapeg_array_61_t)update_ltedfapeg_array_61(ivar_343, ivar_35, ivar_348);
               if (ivar_348 != NULL) ivar_348->count--;
               ivar_351 = (ltedfapeg_array_61_t)update_ltedfapeg_array_61(ivar_346, ivar_35, ivar_322);
               if (ivar_322 != NULL) ivar_322->count--;
               ivar_354 = (ltedfapeg_array_62_t)update_ltedfapeg_array_62(ivar_350, ivar_31, ivar_351);
               if (ivar_351 != NULL) ivar_351->count--;
               ivar_356 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_scaf(ivar_353, ivar_354);
               if (ivar_354 != NULL) ivar_354->count--;
               ltedfapeg_record_100_t ivar_361;
               ltedfapeg_record_100_t ivar_358;
               ltedfapeg__ent_adt_t ivar_360;
               ivar_360 = NULL;
               ivar_358 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_stack(ivar_356, ivar_360);
               if (ivar_360 != NULL) ivar_360->count--;
               ivar_361 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_stack(ivar_358, ivar_39);
               if (ivar_39 != NULL) ivar_39->count--;
               result = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_depth(ivar_361, ivar_324);
} else {
              
               bool_t ivar_425;
               ivar_307->count++;
               ivar_425 = (bool_t)r_ltedfapeg__goodp((ltedfapeg__ent_adt_t)ivar_307);
               if (ivar_425){        
                release_ltedfapeg__ent_adt(ivar_17);
                uint64_t ivar_370;
                ivar_307->count++;
                ivar_370 = (uint64_t)ltedfapeg__ent_adt_dep((ltedfapeg__ent_adt_t)ivar_307);
                uint32_t ivar_371;
                ivar_371 = (uint32_t)ltedfapeg__ent_adt_span((ltedfapeg__ent_adt_t)ivar_307);
                ltedfapeg__ent_adt_t ivar_379;
                mpz_ptr_t ivar_396;
                mpq_ptr_t ivar_384;
                mpq_ptr_t ivar_389;
                //copying to mpq from uint64;
                mpq_mk_set_ui(ivar_389, ivar_303);
                mpq_ptr_t ivar_390;
                //copying to mpq from uint64;
                mpq_mk_set_ui(ivar_390, ivar_370);
                ivar_384 = (mpq_ptr_t)real_defs__max((mpq_ptr_t)ivar_389, (mpq_ptr_t)ivar_390);
                uint8_t ivar_385;
                ivar_385 = (uint8_t)1;
                mpz_mk_set_q(ivar_396, ivar_384);
                mpz_add_ui(ivar_396, ivar_396, (uint64_t)ivar_385);
                uint64_t ivar_393;
                //copying to uint64 from mpz;
                ivar_393 = (uint64_t)mpz_get_ui(ivar_396);
                mpz_clear(ivar_396);
                ivar_379 = (ltedfapeg__ent_adt_t)ltedfapeg__good((uint64_t)ivar_393, (uint32_t)ivar_371);
                uint64_t ivar_381;
                uint8_t ivar_398;
                ivar_398 = (uint8_t)1;
                ivar_381 = (uint64_t)(ivar_20 - ivar_398);
                ltedfapeg_record_100_t ivar_415;
                ltedfapeg_array_62_t ivar_401;
                ivar_401 = (ltedfapeg_array_62_t)ivar_9->scaf;
                ivar_401->count++;
                ltedfapeg_record_100_t ivar_412;
                ltedfapeg_array_62_t ivar_414;
                ivar_414 = NULL;
                ivar_412 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_scaf(ivar_9, ivar_414);
                if (ivar_414 != NULL) ivar_414->count--;
                ltedfapeg_array_62_t ivar_413;
                ltedfapeg_array_61_t ivar_402;
                ivar_402 = (ltedfapeg_array_61_t)ivar_401->elems[ivar_31];
                ivar_402->count++;
                ltedfapeg_array_62_t ivar_409;
                ltedfapeg_array_61_t ivar_411;
                ivar_411 = NULL;
                ivar_409 = (ltedfapeg_array_62_t)update_ltedfapeg_array_62(ivar_401, ivar_31, ivar_411);
                if (ivar_411 != NULL) ivar_411->count--;
                ltedfapeg_array_61_t ivar_410;
                ltedfapeg_array_61_t ivar_405;
                ltedfapeg__ent_adt_t ivar_407;
                ivar_407 = NULL;
                ivar_405 = (ltedfapeg_array_61_t)update_ltedfapeg_array_61(ivar_402, ivar_35, ivar_407);
                if (ivar_407 != NULL) ivar_407->count--;
                ivar_410 = (ltedfapeg_array_61_t)update_ltedfapeg_array_61(ivar_405, ivar_35, ivar_379);
                if (ivar_379 != NULL) ivar_379->count--;
                ivar_413 = (ltedfapeg_array_62_t)update_ltedfapeg_array_62(ivar_409, ivar_31, ivar_410);
                if (ivar_410 != NULL) ivar_410->count--;
                ivar_415 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_scaf(ivar_412, ivar_413);
                if (ivar_413 != NULL) ivar_413->count--;
                ltedfapeg_record_100_t ivar_420;
                ltedfapeg_record_100_t ivar_417;
                ltedfapeg__ent_adt_t ivar_419;
                ivar_419 = NULL;
                ivar_417 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_stack(ivar_415, ivar_419);
                if (ivar_419 != NULL) ivar_419->count--;
                ivar_420 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_stack(ivar_417, ivar_39);
                if (ivar_39 != NULL) ivar_39->count--;
                result = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_depth(ivar_420, ivar_381);
} else {
               
                bool_t ivar_466;
                ivar_466 = (bool_t)r_ltedfapeg__pendingp((ltedfapeg__ent_adt_t)ivar_307);
                if (ivar_466){         
                 release_ltedfapeg__ent_adt(ivar_39);
                 ltedfapeg__ent_adt_t ivar_430;
                 ivar_430 = (ltedfapeg__ent_adt_t)ltedfapeg__push((uint32_t)ivar_31, (uint8_t)ivar_281);
                 uint64_t ivar_431;
                 uint8_t ivar_439;
                 ivar_439 = (uint8_t)1;
                 ivar_431 = (uint64_t)(ivar_20 + ivar_439);
                 ltedfapeg_record_100_t ivar_446;
                 ltedfapeg_record_100_t ivar_443;
                 ltedfapeg__ent_adt_t ivar_445;
                 ivar_445 = NULL;
                 ivar_443 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_stack(ivar_9, ivar_445);
                 if (ivar_445 != NULL) ivar_445->count--;
                 ivar_446 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_stack(ivar_443, ivar_430);
                 if (ivar_430 != NULL) ivar_430->count--;
                 ltedfapeg_record_100_t ivar_450;
                 ivar_450 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_depth(ivar_446, ivar_431);
                 ltedfapeg_array_62_t ivar_451;
                 ivar_451 = (ltedfapeg_array_62_t)ivar_450->scaf;
                 ivar_451->count++;
                 ltedfapeg_record_100_t ivar_462;
                 ltedfapeg_array_62_t ivar_464;
                 ivar_464 = NULL;
                 ivar_462 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_scaf(ivar_450, ivar_464);
                 if (ivar_464 != NULL) ivar_464->count--;
                 ltedfapeg_array_62_t ivar_463;
                 ltedfapeg_array_61_t ivar_452;
                 ivar_452 = (ltedfapeg_array_61_t)ivar_451->elems[ivar_31];
                 ivar_452->count++;
                 ltedfapeg_array_62_t ivar_459;
                 ltedfapeg_array_61_t ivar_461;
                 ivar_461 = NULL;
                 ivar_459 = (ltedfapeg_array_62_t)update_ltedfapeg_array_62(ivar_451, ivar_31, ivar_461);
                 if (ivar_461 != NULL) ivar_461->count--;
                 ltedfapeg_array_61_t ivar_460;
                 ltedfapeg_array_61_t ivar_455;
                 ltedfapeg__ent_adt_t ivar_457;
                 ivar_457 = NULL;
                 ivar_455 = (ltedfapeg_array_61_t)update_ltedfapeg_array_61(ivar_452, ivar_281, ivar_457);
                 if (ivar_457 != NULL) ivar_457->count--;
                 ivar_460 = (ltedfapeg_array_61_t)update_ltedfapeg_array_61(ivar_455, ivar_281, ivar_17);
                 if (ivar_17 != NULL) ivar_17->count--;
                 ivar_463 = (ltedfapeg_array_62_t)update_ltedfapeg_array_62(ivar_459, ivar_31, ivar_460);
                 if (ivar_460 != NULL) ivar_460->count--;
                 result = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_scaf(ivar_462, ivar_463);
                 if (ivar_463 != NULL) ivar_463->count--;
} else {
                
                 release_ltedfapeg__ent_adt(ivar_17);
                 ltedfapeg__ent_adt_t ivar_471;
                 ivar_471 = (ltedfapeg__ent_adt_t)ltedfapeg__loop();
                 if (ivar_471 != NULL) ivar_471->count++;
                 uint64_t ivar_472;
                 uint8_t ivar_476;
                 ivar_476 = (uint8_t)1;
                 ivar_472 = (uint64_t)(ivar_20 - ivar_476);
                 bool_t ivar_474;
                 ivar_474 = (bool_t) true;
                 ltedfapeg_record_100_t ivar_493;
                 ltedfapeg_array_62_t ivar_479;
                 ivar_479 = (ltedfapeg_array_62_t)ivar_9->scaf;
                 ivar_479->count++;
                 ltedfapeg_record_100_t ivar_490;
                 ltedfapeg_array_62_t ivar_492;
                 ivar_492 = NULL;
                 ivar_490 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_scaf(ivar_9, ivar_492);
                 if (ivar_492 != NULL) ivar_492->count--;
                 ltedfapeg_array_62_t ivar_491;
                 ltedfapeg_array_61_t ivar_480;
                 ivar_480 = (ltedfapeg_array_61_t)ivar_479->elems[ivar_31];
                 ivar_480->count++;
                 ltedfapeg_array_62_t ivar_487;
                 ltedfapeg_array_61_t ivar_489;
                 ivar_489 = NULL;
                 ivar_487 = (ltedfapeg_array_62_t)update_ltedfapeg_array_62(ivar_479, ivar_31, ivar_489);
                 if (ivar_489 != NULL) ivar_489->count--;
                 ltedfapeg_array_61_t ivar_488;
                 ltedfapeg_array_61_t ivar_483;
                 ltedfapeg__ent_adt_t ivar_485;
                 ivar_485 = NULL;
                 ivar_483 = (ltedfapeg_array_61_t)update_ltedfapeg_array_61(ivar_480, ivar_35, ivar_485);
                 if (ivar_485 != NULL) ivar_485->count--;
                 ivar_488 = (ltedfapeg_array_61_t)update_ltedfapeg_array_61(ivar_483, ivar_35, ivar_471);
                 if (ivar_471 != NULL) ivar_471->count--;
                 ivar_491 = (ltedfapeg_array_62_t)update_ltedfapeg_array_62(ivar_487, ivar_31, ivar_488);
                 if (ivar_488 != NULL) ivar_488->count--;
                 ivar_493 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_scaf(ivar_490, ivar_491);
                 if (ivar_491 != NULL) ivar_491->count--;
                 ltedfapeg_record_100_t ivar_497;
                 ivar_497 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_depth(ivar_493, ivar_472);
                 ltedfapeg_record_100_t ivar_502;
                 ltedfapeg_record_100_t ivar_499;
                 ltedfapeg__ent_adt_t ivar_501;
                 ivar_501 = NULL;
                 ivar_499 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_stack(ivar_497, ivar_501);
                 if (ivar_501 != NULL) ivar_501->count--;
                 ivar_502 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_stack(ivar_499, ivar_39);
                 if (ivar_39 != NULL) ivar_39->count--;
                 result = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_lflag(ivar_502, ivar_474);
};
};
};
} else {
             
              release_ltedfapeg_array_62(ivar_12);
              bool_t ivar_741;
              ivar_291->count++;
              ivar_741 = (bool_t)r_ltedfapeg__goodp((ltedfapeg__ent_adt_t)ivar_291);
              if (ivar_741){       
               release_ltedfapeg__ent_adt(ivar_17);
               uint64_t ivar_511;
               ivar_291->count++;
               ivar_511 = (uint64_t)ltedfapeg__ent_adt_dep((ltedfapeg__ent_adt_t)ivar_291);
               uint32_t ivar_512;
               ivar_512 = (uint32_t)ltedfapeg__ent_adt_span((ltedfapeg__ent_adt_t)ivar_291);
               ltedfapeg__ent_adt_t ivar_519;
               ltedfapeg_array_61_t ivar_522;
               ltedfapeg_array_62_t ivar_529;
               ivar_529 = (ltedfapeg_array_62_t)ivar_9->scaf;
               ivar_529->count++;
               uint32_t ivar_532;
               ivar_532 = (uint32_t)(ivar_31 + ivar_512);
               ivar_522 = (ltedfapeg_array_61_t)ivar_529->elems[ivar_532];
               ivar_522->count++;
               release_ltedfapeg_array_62(ivar_529);
               ivar_519 = (ltedfapeg__ent_adt_t)ivar_522->elems[ivar_280];
               ivar_519->count++;
               release_ltedfapeg_array_61(ivar_522);
               bool_t ivar_583;
               ivar_519->count++;
               ivar_583 = (bool_t)r_ltedfapeg__failp((ltedfapeg__ent_adt_t)ivar_519);
               if (ivar_583){        
                uint64_t ivar_534;
                ivar_534 = (uint64_t)ltedfapeg__ent_adt_dep((ltedfapeg__ent_adt_t)ivar_519);
                ltedfapeg__ent_adt_t ivar_539;
                mpz_ptr_t ivar_554;
                uint8_t ivar_543;
                ivar_543 = (uint8_t)1;
                mpq_ptr_t ivar_544;
                mpq_ptr_t ivar_548;
                //copying to mpq from uint64;
                mpq_mk_set_ui(ivar_548, ivar_511);
                mpq_ptr_t ivar_549;
                //copying to mpq from uint64;
                mpq_mk_set_ui(ivar_549, ivar_534);
                ivar_544 = (mpq_ptr_t)real_defs__max((mpq_ptr_t)ivar_548, (mpq_ptr_t)ivar_549);
                mpz_mk_set_q(ivar_554, ivar_544);
                mpz_add_ui(ivar_554, ivar_554, ivar_543);
                uint64_t ivar_552;
                //copying to uint64 from mpz;
                ivar_552 = (uint64_t)mpz_get_ui(ivar_554);
                mpz_clear(ivar_554);
                ivar_539 = (ltedfapeg__ent_adt_t)ltedfapeg__fail((uint64_t)ivar_552);
                uint64_t ivar_541;
                uint8_t ivar_556;
                ivar_556 = (uint8_t)1;
                ivar_541 = (uint64_t)(ivar_20 - ivar_556);
                ltedfapeg_record_100_t ivar_573;
                ltedfapeg_array_62_t ivar_559;
                ivar_559 = (ltedfapeg_array_62_t)ivar_9->scaf;
                ivar_559->count++;
                ltedfapeg_record_100_t ivar_570;
                ltedfapeg_array_62_t ivar_572;
                ivar_572 = NULL;
                ivar_570 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_scaf(ivar_9, ivar_572);
                if (ivar_572 != NULL) ivar_572->count--;
                ltedfapeg_array_62_t ivar_571;
                ltedfapeg_array_61_t ivar_560;
                ivar_560 = (ltedfapeg_array_61_t)ivar_559->elems[ivar_31];
                ivar_560->count++;
                ltedfapeg_array_62_t ivar_567;
                ltedfapeg_array_61_t ivar_569;
                ivar_569 = NULL;
                ivar_567 = (ltedfapeg_array_62_t)update_ltedfapeg_array_62(ivar_559, ivar_31, ivar_569);
                if (ivar_569 != NULL) ivar_569->count--;
                ltedfapeg_array_61_t ivar_568;
                ltedfapeg_array_61_t ivar_563;
                ltedfapeg__ent_adt_t ivar_565;
                ivar_565 = NULL;
                ivar_563 = (ltedfapeg_array_61_t)update_ltedfapeg_array_61(ivar_560, ivar_35, ivar_565);
                if (ivar_565 != NULL) ivar_565->count--;
                ivar_568 = (ltedfapeg_array_61_t)update_ltedfapeg_array_61(ivar_563, ivar_35, ivar_539);
                if (ivar_539 != NULL) ivar_539->count--;
                ivar_571 = (ltedfapeg_array_62_t)update_ltedfapeg_array_62(ivar_567, ivar_31, ivar_568);
                if (ivar_568 != NULL) ivar_568->count--;
                ivar_573 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_scaf(ivar_570, ivar_571);
                if (ivar_571 != NULL) ivar_571->count--;
                ltedfapeg_record_100_t ivar_578;
                ltedfapeg_record_100_t ivar_575;
                ltedfapeg__ent_adt_t ivar_577;
                ivar_577 = NULL;
                ivar_575 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_stack(ivar_573, ivar_577);
                if (ivar_577 != NULL) ivar_577->count--;
                ivar_578 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_stack(ivar_575, ivar_39);
                if (ivar_39 != NULL) ivar_39->count--;
                result = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_depth(ivar_578, ivar_541);
} else {
               
                bool_t ivar_647;
                ivar_519->count++;
                ivar_647 = (bool_t)r_ltedfapeg__goodp((ltedfapeg__ent_adt_t)ivar_519);
                if (ivar_647){         
                 uint64_t ivar_587;
                 ivar_519->count++;
                 ivar_587 = (uint64_t)ltedfapeg__ent_adt_dep((ltedfapeg__ent_adt_t)ivar_519);
                 uint32_t ivar_588;
                 ivar_588 = (uint32_t)ltedfapeg__ent_adt_span((ltedfapeg__ent_adt_t)ivar_519);
                 ltedfapeg__ent_adt_t ivar_596;
                 mpz_ptr_t ivar_618;
                 uint8_t ivar_601;
                 ivar_601 = (uint8_t)1;
                 mpq_ptr_t ivar_602;
                 mpq_ptr_t ivar_606;
                 //copying to mpq from uint64;
                 mpq_mk_set_ui(ivar_606, ivar_511);
                 mpq_ptr_t ivar_607;
                 //copying to mpq from uint64;
                 mpq_mk_set_ui(ivar_607, ivar_587);
                 ivar_602 = (mpq_ptr_t)real_defs__max((mpq_ptr_t)ivar_606, (mpq_ptr_t)ivar_607);
                 mpz_mk_set_q(ivar_618, ivar_602);
                 mpz_add_ui(ivar_618, ivar_618, ivar_601);
                 uint64_t ivar_613;
                 //copying to uint64 from mpz;
                 ivar_613 = (uint64_t)mpz_get_ui(ivar_618);
                 mpz_clear(ivar_618);
                 mpq_ptr_t ivar_617;
                 mpz_t tmp434706;
                 mpz_init(tmp434706);
                 mpz_set_ui(tmp434706, (uint64_t)ivar_512);
                 mpz_add_ui(tmp434706, tmp434706, (uint64_t)ivar_588);
                 mpq_mk_set_z(ivar_617, tmp434706);
                 mpz_clear(tmp434706);
                 uint32_t ivar_614;
                 //copying to uint32 from mpq;
                 ivar_614 = (uint32_t)mpq_get_ui(ivar_617);
                 mpq_clear(ivar_617);
                 ivar_596 = (ltedfapeg__ent_adt_t)ltedfapeg__good((uint64_t)ivar_613, (uint32_t)ivar_614);
                 uint64_t ivar_598;
                 uint8_t ivar_620;
                 ivar_620 = (uint8_t)1;
                 ivar_598 = (uint64_t)(ivar_20 - ivar_620);
                 ltedfapeg_record_100_t ivar_637;
                 ltedfapeg_array_62_t ivar_623;
                 ivar_623 = (ltedfapeg_array_62_t)ivar_9->scaf;
                 ivar_623->count++;
                 ltedfapeg_record_100_t ivar_634;
                 ltedfapeg_array_62_t ivar_636;
                 ivar_636 = NULL;
                 ivar_634 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_scaf(ivar_9, ivar_636);
                 if (ivar_636 != NULL) ivar_636->count--;
                 ltedfapeg_array_62_t ivar_635;
                 ltedfapeg_array_61_t ivar_624;
                 ivar_624 = (ltedfapeg_array_61_t)ivar_623->elems[ivar_31];
                 ivar_624->count++;
                 ltedfapeg_array_62_t ivar_631;
                 ltedfapeg_array_61_t ivar_633;
                 ivar_633 = NULL;
                 ivar_631 = (ltedfapeg_array_62_t)update_ltedfapeg_array_62(ivar_623, ivar_31, ivar_633);
                 if (ivar_633 != NULL) ivar_633->count--;
                 ltedfapeg_array_61_t ivar_632;
                 ltedfapeg_array_61_t ivar_627;
                 ltedfapeg__ent_adt_t ivar_629;
                 ivar_629 = NULL;
                 ivar_627 = (ltedfapeg_array_61_t)update_ltedfapeg_array_61(ivar_624, ivar_35, ivar_629);
                 if (ivar_629 != NULL) ivar_629->count--;
                 ivar_632 = (ltedfapeg_array_61_t)update_ltedfapeg_array_61(ivar_627, ivar_35, ivar_596);
                 if (ivar_596 != NULL) ivar_596->count--;
                 ivar_635 = (ltedfapeg_array_62_t)update_ltedfapeg_array_62(ivar_631, ivar_31, ivar_632);
                 if (ivar_632 != NULL) ivar_632->count--;
                 ivar_637 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_scaf(ivar_634, ivar_635);
                 if (ivar_635 != NULL) ivar_635->count--;
                 ltedfapeg_record_100_t ivar_642;
                 ltedfapeg_record_100_t ivar_639;
                 ltedfapeg__ent_adt_t ivar_641;
                 ivar_641 = NULL;
                 ivar_639 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_stack(ivar_637, ivar_641);
                 if (ivar_641 != NULL) ivar_641->count--;
                 ivar_642 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_stack(ivar_639, ivar_39);
                 if (ivar_39 != NULL) ivar_39->count--;
                 result = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_depth(ivar_642, ivar_598);
} else {
                
                 bool_t ivar_700;
                 ivar_700 = (bool_t)r_ltedfapeg__pendingp((ltedfapeg__ent_adt_t)ivar_519);
                 if (ivar_700){          
                  release_ltedfapeg__ent_adt(ivar_39);
                  ltedfapeg__ent_adt_t ivar_652;
                  mpq_ptr_t ivar_664;
                  mpz_t tmp434814;
                  mpz_init(tmp434814);
                  mpz_set_ui(tmp434814, (uint64_t)ivar_31);
                  mpz_add_ui(tmp434814, tmp434814, (uint64_t)ivar_512);
                  mpq_mk_set_z(ivar_664, tmp434814);
                  mpz_clear(tmp434814);
                  uint32_t ivar_661;
                  //copying to uint32 from mpq;
                  ivar_661 = (uint32_t)mpq_get_ui(ivar_664);
                  mpq_clear(ivar_664);
                  ivar_652 = (ltedfapeg__ent_adt_t)ltedfapeg__push((uint32_t)ivar_661, (uint8_t)ivar_280);
                  uint64_t ivar_653;
                  uint64_t ivar_665;
                  ivar_665 = (uint64_t)ivar_9->depth;
                  uint8_t ivar_666;
                  ivar_666 = (uint8_t)1;
                  ivar_653 = (uint64_t)(ivar_665 + ivar_666);
                  ltedfapeg__ent_adt_t ivar_654;
                  ivar_654 = (ltedfapeg__ent_adt_t)ivar_9->stack;
                  ivar_654->count++;
                  ltedfapeg_record_100_t ivar_677;
                  ltedfapeg_record_100_t ivar_674;
                  ltedfapeg__ent_adt_t ivar_676;
                  ivar_676 = NULL;
                  ivar_674 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_stack(ivar_9, ivar_676);
                  if (ivar_676 != NULL) ivar_676->count--;
                  ivar_677 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_stack(ivar_674, ivar_652);
                  if (ivar_652 != NULL) ivar_652->count--;
                  ltedfapeg_record_100_t ivar_681;
                  ivar_681 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_depth(ivar_677, ivar_653);
                  ltedfapeg_array_62_t ivar_682;
                  ivar_682 = (ltedfapeg_array_62_t)ivar_681->scaf;
                  ivar_682->count++;
                  ltedfapeg_record_100_t ivar_696;
                  ltedfapeg_array_62_t ivar_698;
                  ivar_698 = NULL;
                  ivar_696 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_scaf(ivar_681, ivar_698);
                  if (ivar_698 != NULL) ivar_698->count--;
                  ltedfapeg_array_62_t ivar_697;
                  uint32_t ivar_689;
                  ivar_689 = (uint32_t)(ivar_31 + ivar_512);
                  ltedfapeg_array_61_t ivar_683;
                  ivar_683 = (ltedfapeg_array_61_t)ivar_682->elems[ivar_689];
                  ivar_683->count++;
                  ltedfapeg_array_62_t ivar_693;
                  ltedfapeg_array_61_t ivar_695;
                  ivar_695 = NULL;
                  ivar_693 = (ltedfapeg_array_62_t)update_ltedfapeg_array_62(ivar_682, ivar_689, ivar_695);
                  if (ivar_695 != NULL) ivar_695->count--;
                  ltedfapeg_array_61_t ivar_694;
                  ltedfapeg_array_61_t ivar_686;
                  ltedfapeg__ent_adt_t ivar_688;
                  ivar_688 = NULL;
                  ivar_686 = (ltedfapeg_array_61_t)update_ltedfapeg_array_61(ivar_683, ivar_280, ivar_688);
                  if (ivar_688 != NULL) ivar_688->count--;
                  ivar_694 = (ltedfapeg_array_61_t)update_ltedfapeg_array_61(ivar_686, ivar_280, ivar_654);
                  if (ivar_654 != NULL) ivar_654->count--;
                  ivar_697 = (ltedfapeg_array_62_t)update_ltedfapeg_array_62(ivar_693, ivar_689, ivar_694);
                  if (ivar_694 != NULL) ivar_694->count--;
                  result = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_scaf(ivar_696, ivar_697);
                  if (ivar_697 != NULL) ivar_697->count--;
} else {
                 
                  ltedfapeg__ent_adt_t ivar_705;
                  ivar_705 = (ltedfapeg__ent_adt_t)ltedfapeg__loop();
                  if (ivar_705 != NULL) ivar_705->count++;
                  uint64_t ivar_706;
                  uint8_t ivar_710;
                  ivar_710 = (uint8_t)1;
                  ivar_706 = (uint64_t)(ivar_20 - ivar_710);
                  bool_t ivar_708;
                  ivar_708 = (bool_t) true;
                  ltedfapeg_record_100_t ivar_727;
                  ltedfapeg_array_62_t ivar_713;
                  ivar_713 = (ltedfapeg_array_62_t)ivar_9->scaf;
                  ivar_713->count++;
                  ltedfapeg_record_100_t ivar_724;
                  ltedfapeg_array_62_t ivar_726;
                  ivar_726 = NULL;
                  ivar_724 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_scaf(ivar_9, ivar_726);
                  if (ivar_726 != NULL) ivar_726->count--;
                  ltedfapeg_array_62_t ivar_725;
                  ltedfapeg_array_61_t ivar_714;
                  ivar_714 = (ltedfapeg_array_61_t)ivar_713->elems[ivar_31];
                  ivar_714->count++;
                  ltedfapeg_array_62_t ivar_721;
                  ltedfapeg_array_61_t ivar_723;
                  ivar_723 = NULL;
                  ivar_721 = (ltedfapeg_array_62_t)update_ltedfapeg_array_62(ivar_713, ivar_31, ivar_723);
                  if (ivar_723 != NULL) ivar_723->count--;
                  ltedfapeg_array_61_t ivar_722;
                  ltedfapeg_array_61_t ivar_717;
                  ltedfapeg__ent_adt_t ivar_719;
                  ivar_719 = NULL;
                  ivar_717 = (ltedfapeg_array_61_t)update_ltedfapeg_array_61(ivar_714, ivar_35, ivar_719);
                  if (ivar_719 != NULL) ivar_719->count--;
                  ivar_722 = (ltedfapeg_array_61_t)update_ltedfapeg_array_61(ivar_717, ivar_35, ivar_705);
                  if (ivar_705 != NULL) ivar_705->count--;
                  ivar_725 = (ltedfapeg_array_62_t)update_ltedfapeg_array_62(ivar_721, ivar_31, ivar_722);
                  if (ivar_722 != NULL) ivar_722->count--;
                  ivar_727 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_scaf(ivar_724, ivar_725);
                  if (ivar_725 != NULL) ivar_725->count--;
                  ltedfapeg_record_100_t ivar_731;
                  ivar_731 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_depth(ivar_727, ivar_706);
                  ltedfapeg_record_100_t ivar_736;
                  ltedfapeg_record_100_t ivar_733;
                  ltedfapeg__ent_adt_t ivar_735;
                  ivar_735 = NULL;
                  ivar_733 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_stack(ivar_731, ivar_735);
                  if (ivar_735 != NULL) ivar_735->count--;
                  ivar_736 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_stack(ivar_733, ivar_39);
                  if (ivar_39 != NULL) ivar_39->count--;
                  result = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_lflag(ivar_736, ivar_708);
};
};
};
} else {
              
               bool_t ivar_782;
               ivar_782 = (bool_t)r_ltedfapeg__pendingp((ltedfapeg__ent_adt_t)ivar_291);
               if (ivar_782){        
                release_ltedfapeg__ent_adt(ivar_39);
                ltedfapeg__ent_adt_t ivar_746;
                ivar_746 = (ltedfapeg__ent_adt_t)ltedfapeg__push((uint32_t)ivar_31, (uint8_t)ivar_279);
                uint64_t ivar_747;
                uint8_t ivar_755;
                ivar_755 = (uint8_t)1;
                ivar_747 = (uint64_t)(ivar_20 + ivar_755);
                ltedfapeg_record_100_t ivar_762;
                ltedfapeg_record_100_t ivar_759;
                ltedfapeg__ent_adt_t ivar_761;
                ivar_761 = NULL;
                ivar_759 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_stack(ivar_9, ivar_761);
                if (ivar_761 != NULL) ivar_761->count--;
                ivar_762 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_stack(ivar_759, ivar_746);
                if (ivar_746 != NULL) ivar_746->count--;
                ltedfapeg_record_100_t ivar_766;
                ivar_766 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_depth(ivar_762, ivar_747);
                ltedfapeg_array_62_t ivar_767;
                ivar_767 = (ltedfapeg_array_62_t)ivar_766->scaf;
                ivar_767->count++;
                ltedfapeg_record_100_t ivar_778;
                ltedfapeg_array_62_t ivar_780;
                ivar_780 = NULL;
                ivar_778 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_scaf(ivar_766, ivar_780);
                if (ivar_780 != NULL) ivar_780->count--;
                ltedfapeg_array_62_t ivar_779;
                ltedfapeg_array_61_t ivar_768;
                ivar_768 = (ltedfapeg_array_61_t)ivar_767->elems[ivar_31];
                ivar_768->count++;
                ltedfapeg_array_62_t ivar_775;
                ltedfapeg_array_61_t ivar_777;
                ivar_777 = NULL;
                ivar_775 = (ltedfapeg_array_62_t)update_ltedfapeg_array_62(ivar_767, ivar_31, ivar_777);
                if (ivar_777 != NULL) ivar_777->count--;
                ltedfapeg_array_61_t ivar_776;
                ltedfapeg_array_61_t ivar_771;
                ltedfapeg__ent_adt_t ivar_773;
                ivar_773 = NULL;
                ivar_771 = (ltedfapeg_array_61_t)update_ltedfapeg_array_61(ivar_768, ivar_279, ivar_773);
                if (ivar_773 != NULL) ivar_773->count--;
                ivar_776 = (ltedfapeg_array_61_t)update_ltedfapeg_array_61(ivar_771, ivar_279, ivar_17);
                if (ivar_17 != NULL) ivar_17->count--;
                ivar_779 = (ltedfapeg_array_62_t)update_ltedfapeg_array_62(ivar_775, ivar_31, ivar_776);
                if (ivar_776 != NULL) ivar_776->count--;
                result = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_scaf(ivar_778, ivar_779);
                if (ivar_779 != NULL) ivar_779->count--;
} else {
               
                release_ltedfapeg__ent_adt(ivar_17);
                ltedfapeg__ent_adt_t ivar_787;
                ivar_787 = (ltedfapeg__ent_adt_t)ltedfapeg__loop();
                if (ivar_787 != NULL) ivar_787->count++;
                uint64_t ivar_788;
                uint8_t ivar_792;
                ivar_792 = (uint8_t)1;
                ivar_788 = (uint64_t)(ivar_20 - ivar_792);
                bool_t ivar_790;
                ivar_790 = (bool_t) true;
                ltedfapeg_record_100_t ivar_809;
                ltedfapeg_array_62_t ivar_795;
                ivar_795 = (ltedfapeg_array_62_t)ivar_9->scaf;
                ivar_795->count++;
                ltedfapeg_record_100_t ivar_806;
                ltedfapeg_array_62_t ivar_808;
                ivar_808 = NULL;
                ivar_806 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_scaf(ivar_9, ivar_808);
                if (ivar_808 != NULL) ivar_808->count--;
                ltedfapeg_array_62_t ivar_807;
                ltedfapeg_array_61_t ivar_796;
                ivar_796 = (ltedfapeg_array_61_t)ivar_795->elems[ivar_31];
                ivar_796->count++;
                ltedfapeg_array_62_t ivar_803;
                ltedfapeg_array_61_t ivar_805;
                ivar_805 = NULL;
                ivar_803 = (ltedfapeg_array_62_t)update_ltedfapeg_array_62(ivar_795, ivar_31, ivar_805);
                if (ivar_805 != NULL) ivar_805->count--;
                ltedfapeg_array_61_t ivar_804;
                ltedfapeg_array_61_t ivar_799;
                ltedfapeg__ent_adt_t ivar_801;
                ivar_801 = NULL;
                ivar_799 = (ltedfapeg_array_61_t)update_ltedfapeg_array_61(ivar_796, ivar_35, ivar_801);
                if (ivar_801 != NULL) ivar_801->count--;
                ivar_804 = (ltedfapeg_array_61_t)update_ltedfapeg_array_61(ivar_799, ivar_35, ivar_787);
                if (ivar_787 != NULL) ivar_787->count--;
                ivar_807 = (ltedfapeg_array_62_t)update_ltedfapeg_array_62(ivar_803, ivar_31, ivar_804);
                if (ivar_804 != NULL) ivar_804->count--;
                ivar_809 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_scaf(ivar_806, ivar_807);
                if (ivar_807 != NULL) ivar_807->count--;
                ltedfapeg_record_100_t ivar_813;
                ivar_813 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_depth(ivar_809, ivar_788);
                ltedfapeg_record_100_t ivar_818;
                ltedfapeg_record_100_t ivar_815;
                ltedfapeg__ent_adt_t ivar_817;
                ivar_817 = NULL;
                ivar_815 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_stack(ivar_813, ivar_817);
                if (ivar_817 != NULL) ivar_817->count--;
                ivar_818 = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_stack(ivar_815, ivar_39);
                if (ivar_39 != NULL) ivar_39->count--;
                result = (ltedfapeg_record_100_t)update_ltedfapeg_record_100_lflag(ivar_818, ivar_790);
};
};
};
};
};
};
};
};

        return result;
}

ltedfapeg_closure_102_t new_ltedfapeg_closure_102(void){
        static struct ltedfapeg_funtype_101_ftbl_s ftbl = {.fptr = (ltedfapeg_record_100_t (*)(ltedfapeg_funtype_101_t, ltedfapeg_record_100_t))&f_ltedfapeg_closure_102, .mptr = (ltedfapeg_record_100_t (*)(ltedfapeg_funtype_101_t, ltedfapeg_record_100_t))&m_ltedfapeg_closure_102, .rptr =  (void (*)(ltedfapeg_funtype_101_t))&release_ltedfapeg_closure_102, .cptr = (ltedfapeg_funtype_101_t (*)(ltedfapeg_funtype_101_t))&copy_ltedfapeg_closure_102};
        ltedfapeg_closure_102_t tmp = (ltedfapeg_closure_102_t) safe_malloc(sizeof(struct ltedfapeg_closure_102_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_102(ltedfapeg_funtype_101_t closure){
        ltedfapeg_closure_102_t x = (ltedfapeg_closure_102_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg_array_82(x->fvar_2);
         release_ltedfapeg__lang_spec(x->fvar_3);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_102_t copy_ltedfapeg_closure_102(ltedfapeg_closure_102_t x){
        ltedfapeg_closure_102_t y = new_ltedfapeg_closure_102();
        y->ftbl = x->ftbl;

        y->fvar_1 = (uint32_t)x->fvar_1;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        y->fvar_3 = x->fvar_3; x->fvar_3->count++;
        if (x->htbl != NULL){
            ltedfapeg_funtype_101_htbl_t new_htbl = (ltedfapeg_funtype_101_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_101_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_101_hashentry_t * new_data = (ltedfapeg_funtype_101_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_101_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_101_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


ltedfapeg_array_103_t new_ltedfapeg_array_103(uint32_t size){
        ltedfapeg_array_103_t tmp = (ltedfapeg_array_103_t) safe_malloc(sizeof(struct ltedfapeg_array_103_s) + (size * sizeof(ltedfapeg__ent_adt_t)));
        tmp->count = 1;
        tmp->size = size;
        tmp->max = size;
        return tmp;}

void release_ltedfapeg_array_103(ltedfapeg_array_103_t x){
        x->count--;
        if (x->count <= 0){
                for (int i = 0; i < x->size; i++){release_ltedfapeg__ent_adt(x->elems[i]);};
        //printf("\nFreeing\n");
        safe_free(x);}
}

void release_ltedfapeg_array_103_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg_array_103((ltedfapeg_array_103_t)x);
}

ltedfapeg_array_103_t copy_ltedfapeg_array_103(ltedfapeg_array_103_t x){
        ltedfapeg_array_103_t tmp = new_ltedfapeg_array_103(x->size);
        tmp->count = 1;
        for (uint32_t i = 0; i < x->size; i++){tmp->elems[i] = x->elems[i];
                x->elems[i]->count++;};
         return tmp;}

bool_t equal_ltedfapeg_array_103(ltedfapeg_array_103_t x, ltedfapeg_array_103_t y){
        bool_t tmp = true;
        uint32_t i = 0;
        while (i < x->size && tmp){tmp = equal_ltedfapeg__ent_adt(x->elems[i], y->elems[i]); i++;};
        return tmp;}

char * json_ltedfapeg_array_103(ltedfapeg_array_103_t x){
        char ** tmp = (char **)safe_malloc(sizeof(void *) * x->size);
        for (uint32_t i = 0; i < x->size; i++){tmp[i] = json_ltedfapeg__ent_adt(x->elems[i]);};
        char * result = json_list_with_sep(tmp, x->size, '[', ',', ']');
        for (uint32_t i = 0; i < x->size; i++) free(tmp[i]);
        free(tmp);
        return result;}

bool_t equal_ltedfapeg_array_103_ptr(pointer_t x, pointer_t y, type_actual_t T){
        return equal_ltedfapeg_array_103((ltedfapeg_array_103_t)x, (ltedfapeg_array_103_t)y);
}

char * json_ltedfapeg_array_103_ptr(pointer_t x, type_actual_t T){
        return json_ltedfapeg_array_103((ltedfapeg_array_103_t)x);
}

actual_ltedfapeg_array_103_t actual_ltedfapeg_array_103(){
        actual_ltedfapeg_array_103_t new = (actual_ltedfapeg_array_103_t)safe_malloc(sizeof(struct actual_ltedfapeg_array_103_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg_array_103_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg_array_103_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg_array_103_ptr);
 

 
        return new;
 };

ltedfapeg_array_103_t update_ltedfapeg_array_103(ltedfapeg_array_103_t x, uint32_t i, ltedfapeg__ent_adt_t v){
         ltedfapeg_array_103_t y;
         if (x->count == 1){y = x;}
                 else {y = copy_ltedfapeg_array_103(x);
                      x->count--;};
        ltedfapeg__ent_adt_t * yelems = y->elems;
        if (v != NULL){v->count++;}
        if (yelems[i] != NULL){release_ltedfapeg__ent_adt(yelems[i]);};
         yelems[i] = v;
         return y;}

ltedfapeg_array_103_t upgrade_ltedfapeg_array_103(ltedfapeg_array_103_t x, uint32_t i, ltedfapeg__ent_adt_t v){
         ltedfapeg_array_103_t y;
         if (x->count == 1 && i < x->max){y = x;}
                 else if (i > x->max){uint32_t newmax = x->max <= UINT32_MAX/2 ? 2*x->max: UINT32_MAX;
                y = safe_realloc(x, sizeof(struct ltedfapeg_array_103_s) + (newmax * sizeof(ltedfapeg__ent_adt_t)));
                y->count = 1;
                y->size = i+1;
                y->max = newmax;
                release_ltedfapeg_array_103(x);} else {y = copy_ltedfapeg_array_103(x);
                      x->count--;};
        ltedfapeg__ent_adt_t * yelems = y->elems;
        if (v != NULL){v->count++;}
        if (yelems[i] != NULL){release_ltedfapeg__ent_adt(yelems[i]);};
         yelems[i] = v;
         return y;}



void release_ltedfapeg_funtype_104(ltedfapeg_funtype_104_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_104_t copy_ltedfapeg_funtype_104(ltedfapeg_funtype_104_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapeg_funtype_104(ltedfapeg_funtype_104_t x, ltedfapeg_funtype_104_t y){
        return false;}

char* json_ltedfapeg_funtype_104(ltedfapeg_funtype_104_t x){char * result = safe_malloc(31); sprintf(result, "%s", "\"ltedfapeg_funtype_104\""); return result;}


ordstruct_adt__ordstruct_adt_t f_ltedfapeg_closure_105(struct ltedfapeg_closure_105_s * closure, ltedfapeg_record_100_t bvar){
        ordstruct_adt__ordstruct_adt_t result = h_ltedfapeg_closure_105(bvar, closure->fvar_1); 
        return result;}

ordstruct_adt__ordstruct_adt_t m_ltedfapeg_closure_105(struct ltedfapeg_closure_105_s * closure, ltedfapeg_record_100_t bvar){
        return h_ltedfapeg_closure_105(bvar, closure->fvar_1);}

extern ordstruct_adt__ordstruct_adt_t h_ltedfapeg_closure_105(ltedfapeg_record_100_t ivar_8, uint32_t ivar_1){
        ordstruct_adt__ordstruct_adt_t result;
        uint64_t ivar_45;
        ltedfapeg_array_62_t ivar_25;
        ivar_25 = (ltedfapeg_array_62_t)ivar_8->scaf;
        ivar_25->count++;
        ltedfapeg_funtype_55_t ivar_27;
        ltedfapeg_closure_106_t cl435387;
        cl435387 = new_ltedfapeg_closure_106();
        ivar_27 = (ltedfapeg_funtype_55_t)cl435387;
        ivar_45 = (uint64_t)ltedfapeg__scafcount((uint32_t)ivar_1, (ltedfapeg_array_62_t)ivar_25, (ltedfapeg_funtype_55_t)ivar_27, (uint32_t)ivar_1);
        mpz_ptr_t ivar_42;
        //copying to mpz from uint64;
        mpz_mk_set_ui(ivar_42, ivar_45);
        mpz_ptr_t ivar_43;
        uint64_t ivar_30;
        uint32_t ivar_32;
        uint8_t ivar_35;
        ivar_35 = (uint8_t)1;
        ivar_32 = (uint32_t)(ivar_1 + ivar_35);
        uint8_t ivar_33;
        ivar_33 = (uint8_t)ltedfapeg__num_non_terminals();
        ivar_30 = (uint64_t)((uint64_t)ivar_32 * (uint64_t)ivar_33);
        uint64_t ivar_31;
        ivar_31 = (uint64_t)ivar_8->depth;
        release_ltedfapeg_record_100(ivar_8);
        mpz_mk_set_ui(ivar_43, (uint64_t)ivar_30);
        mpz_sub_ui(ivar_43, ivar_43, (uint64_t)ivar_31);
        result = (ordstruct_adt__ordstruct_adt_t)lex2__lex2((mpz_ptr_t)ivar_42, (mpz_ptr_t)ivar_43);

        return result;
}

ltedfapeg_closure_105_t new_ltedfapeg_closure_105(void){
        static struct ltedfapeg_funtype_104_ftbl_s ftbl = {.fptr = (ordstruct_adt__ordstruct_adt_t (*)(ltedfapeg_funtype_104_t, ltedfapeg_record_100_t))&f_ltedfapeg_closure_105, .mptr = (ordstruct_adt__ordstruct_adt_t (*)(ltedfapeg_funtype_104_t, ltedfapeg_record_100_t))&m_ltedfapeg_closure_105, .rptr =  (void (*)(ltedfapeg_funtype_104_t))&release_ltedfapeg_closure_105, .cptr = (ltedfapeg_funtype_104_t (*)(ltedfapeg_funtype_104_t))&copy_ltedfapeg_closure_105};
        ltedfapeg_closure_105_t tmp = (ltedfapeg_closure_105_t) safe_malloc(sizeof(struct ltedfapeg_closure_105_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_105(ltedfapeg_funtype_104_t closure){
        ltedfapeg_closure_105_t x = (ltedfapeg_closure_105_t)closure;
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_105_t copy_ltedfapeg_closure_105(ltedfapeg_closure_105_t x){
        ltedfapeg_closure_105_t y = new_ltedfapeg_closure_105();
        y->ftbl = x->ftbl;

        y->fvar_1 = (uint32_t)x->fvar_1;
        if (x->htbl != NULL){
            ltedfapeg_funtype_104_htbl_t new_htbl = (ltedfapeg_funtype_104_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_104_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_104_hashentry_t * new_data = (ltedfapeg_funtype_104_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_104_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_104_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


bool_t f_ltedfapeg_closure_106(struct ltedfapeg_closure_106_s * closure, ltedfapeg__ent_adt_t bvar){
        bool_t result = h_ltedfapeg_closure_106(bvar); 
        return result;}

bool_t m_ltedfapeg_closure_106(struct ltedfapeg_closure_106_s * closure, ltedfapeg__ent_adt_t bvar){
        return h_ltedfapeg_closure_106(bvar);}

extern bool_t h_ltedfapeg_closure_106(ltedfapeg__ent_adt_t ivar_19){
        bool_t result;
        result = (bool_t)ltedfapeg__push_or_pendingp((ltedfapeg__ent_adt_t)ivar_19);

        return result;
}

ltedfapeg_closure_106_t new_ltedfapeg_closure_106(void){
        static struct ltedfapeg_funtype_55_ftbl_s ftbl = {.fptr = (bool_t (*)(ltedfapeg_funtype_55_t, ltedfapeg__ent_adt_t))&f_ltedfapeg_closure_106, .mptr = (bool_t (*)(ltedfapeg_funtype_55_t, ltedfapeg__ent_adt_t))&m_ltedfapeg_closure_106, .rptr =  (void (*)(ltedfapeg_funtype_55_t))&release_ltedfapeg_closure_106, .cptr = (ltedfapeg_funtype_55_t (*)(ltedfapeg_funtype_55_t))&copy_ltedfapeg_closure_106};
        ltedfapeg_closure_106_t tmp = (ltedfapeg_closure_106_t) safe_malloc(sizeof(struct ltedfapeg_closure_106_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_106(ltedfapeg_funtype_55_t closure){
        ltedfapeg_closure_106_t x = (ltedfapeg_closure_106_t)closure;
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_106_t copy_ltedfapeg_closure_106(ltedfapeg_closure_106_t x){
        ltedfapeg_closure_106_t y = new_ltedfapeg_closure_106();
        y->ftbl = x->ftbl;

        if (x->htbl != NULL){
            ltedfapeg_funtype_55_htbl_t new_htbl = (ltedfapeg_funtype_55_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_55_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_55_hashentry_t * new_data = (ltedfapeg_funtype_55_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_55_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_55_hashentry_s)));
            new_htbl->data = new_data;;
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}

void release_ltedfapeg_funtype_107(ltedfapeg_funtype_107_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_107_t copy_ltedfapeg_funtype_107(ltedfapeg_funtype_107_t x){return x->ftbl->cptr(x);}

uint32_t lookup_ltedfapeg_funtype_107(ltedfapeg_funtype_107_htbl_t htbl, uint8_t i, uint32_t ihash){
        uint32_t mask = htbl->size - 1;
        uint32_t hashindex = ihash & mask;
        ltedfapeg_funtype_107_hashentry_t data = htbl->data[hashindex];
        bool_t keyzero;

        keyzero = (data.key == 0);
        bool_t keymatch;
        keymatch = (data.key == i);
        while ((!keyzero || data.keyhash != 0) &&
                 (data.keyhash != ihash || !keymatch)){
                hashindex++;
                hashindex = hashindex & mask;
                data = htbl->data[hashindex];

                keyzero = (data.key == 0);

                keymatch = (data.key == i);
                }
        return hashindex;
        }

ltedfapeg_funtype_107_t dupdate_ltedfapeg_funtype_107(ltedfapeg_funtype_107_t a, uint8_t i, ltedfapeg__ent_adt_t v){
        ltedfapeg_funtype_107_htbl_t htbl = a->htbl;
        if (htbl == NULL){//construct new htbl
                htbl = (ltedfapeg_funtype_107_htbl_t)safe_malloc(sizeof(struct ltedfapeg_funtype_107_htbl_s));
                htbl->size = HTBL_DEFAULT_SIZE; htbl->num_entries = 0;
                htbl->data = (ltedfapeg_funtype_107_hashentry_t *)safe_malloc(HTBL_DEFAULT_SIZE * sizeof(struct ltedfapeg_funtype_107_hashentry_s));
                for (uint32_t j = 0; j < HTBL_DEFAULT_SIZE; j++){htbl->data[j].key = (uint8_t)0; htbl->data[j].keyhash = 0;
                }
                a->htbl = htbl;
        }
        uint32_t size = htbl->size;
        uint32_t num_entries = htbl->num_entries;
        ltedfapeg_funtype_107_hashentry_t * data = htbl->data;
        if (num_entries/3 >  size/5){//resize data
                uint32_t new_size = 2*size; uint32_t new_mask = new_size - 1;
                if (size >= HTBL_MAX_SIZE) out_of_memory();
                ltedfapeg_funtype_107_hashentry_t * new_data = (ltedfapeg_funtype_107_hashentry_t *)safe_malloc(new_size * sizeof(struct ltedfapeg_funtype_107_hashentry_s));
                for (uint32_t j = 0; j < new_size; j++){
                        new_data[j].key = 0;
                        new_data[j].keyhash = 0;}
                for (uint32_t j = 0; j < size; j++){//transfer entries
                        uint32_t keyhash = data[j].keyhash;
                        bool_t keyzero;
                        keyzero = (data[j].key == 0);
                        if (!keyzero || keyhash != 0){
                                uint32_t new_loc = keyhash ^ new_mask;
                                keyzero = (new_data[new_loc].key == 0);
                                while (keyzero && new_data[new_loc].keyhash == 0){
                                        new_loc++;
                                        new_loc = new_loc ^ new_mask;

                                        keyzero = (new_data[new_loc].key == 0);
                                }
                                new_data[new_loc].key = (uint8_t)data[j].key;
                                new_data[new_loc].keyhash = keyhash;
                                new_data[new_loc].value = (ltedfapeg__ent_adt_t)data[j].value;
                                }}
                htbl->size = new_size;
                htbl->num_entries = num_entries;
                htbl->data = new_data;
                safe_free(data);}
        uint32_t ihash = uint32_hash(i);
        uint32_t hashindex = lookup_ltedfapeg_funtype_107(htbl, i, ihash);
        ltedfapeg_funtype_107_hashentry_t hentry = htbl->data[hashindex];
        uint32_t hkeyhash = hentry.keyhash;
        bool_t hentrykeyzero;
        hentrykeyzero = (hentry.key == 0);

        if (hentrykeyzero && (hkeyhash == 0))
                {htbl->data[hashindex].key = (uint8_t)i; htbl->data[hashindex].keyhash = ihash; htbl->data[hashindex].value = (ltedfapeg__ent_adt_t)v; htbl->num_entries++;}
            else {ltedfapeg__ent_adt_t tempvalue;tempvalue = (ltedfapeg__ent_adt_t)htbl->data[hashindex].value;htbl->data[hashindex].value = (ltedfapeg__ent_adt_t)v;if (v != NULL) v->count++;if (tempvalue != NULL)release_ltedfapeg__ent_adt(tempvalue);};
        return a;

}

ltedfapeg_funtype_107_t update_ltedfapeg_funtype_107(ltedfapeg_funtype_107_t a, uint8_t i, ltedfapeg__ent_adt_t v){
        if (a->count == 1){
                return dupdate_ltedfapeg_funtype_107(a, i, v);
            } else {
                ltedfapeg_funtype_107_t x = copy_ltedfapeg_funtype_107(a);
                a->count--;
                return dupdate_ltedfapeg_funtype_107(x, i, v);
            }}

bool_t equal_ltedfapeg_funtype_107(ltedfapeg_funtype_107_t x, ltedfapeg_funtype_107_t y){
        return false;}

char* json_ltedfapeg_funtype_107(ltedfapeg_funtype_107_t x){char * result = safe_malloc(31); sprintf(result, "%s", "\"ltedfapeg_funtype_107\""); return result;}


ltedfapeg__ent_adt_t f_ltedfapeg_closure_108(struct ltedfapeg_closure_108_s * closure, uint8_t bvar){
if (closure->htbl != NULL){
        ltedfapeg_funtype_107_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_ltedfapeg_funtype_107(htbl, bvar, hash);
        ltedfapeg_funtype_107_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            ltedfapeg__ent_adt_t result;
            result = (ltedfapeg__ent_adt_t)entry.value;
            if (result != NULL) result->count++;
            return result;}
        

        return h_ltedfapeg_closure_108(bvar);};

return h_ltedfapeg_closure_108(bvar);}

ltedfapeg__ent_adt_t m_ltedfapeg_closure_108(struct ltedfapeg_closure_108_s * closure, uint8_t bvar){
        return h_ltedfapeg_closure_108(bvar);}

extern ltedfapeg__ent_adt_t h_ltedfapeg_closure_108(uint8_t ivar_9){
        ltedfapeg__ent_adt_t result;
        result = (ltedfapeg__ent_adt_t)ltedfapeg__pending();
        if (result != NULL) result->count++;

        return result;
}

ltedfapeg_closure_108_t new_ltedfapeg_closure_108(void){
        static struct ltedfapeg_funtype_107_ftbl_s ftbl = {.fptr = (ltedfapeg__ent_adt_t (*)(ltedfapeg_funtype_107_t, uint8_t))&f_ltedfapeg_closure_108, .mptr = (ltedfapeg__ent_adt_t (*)(ltedfapeg_funtype_107_t, uint8_t))&m_ltedfapeg_closure_108, .rptr =  (void (*)(ltedfapeg_funtype_107_t))&release_ltedfapeg_closure_108, .cptr = (ltedfapeg_funtype_107_t (*)(ltedfapeg_funtype_107_t))&copy_ltedfapeg_closure_108};
        ltedfapeg_closure_108_t tmp = (ltedfapeg_closure_108_t) safe_malloc(sizeof(struct ltedfapeg_closure_108_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_108(ltedfapeg_funtype_107_t closure){
        ltedfapeg_closure_108_t x = (ltedfapeg_closure_108_t)closure;
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_108_t copy_ltedfapeg_closure_108(ltedfapeg_closure_108_t x){
        ltedfapeg_closure_108_t y = new_ltedfapeg_closure_108();
        y->ftbl = x->ftbl;

        if (x->htbl != NULL){
            ltedfapeg_funtype_107_htbl_t new_htbl = (ltedfapeg_funtype_107_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_107_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_107_hashentry_t * new_data = (ltedfapeg_funtype_107_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_107_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_107_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}

void release_ltedfapeg_funtype_109(ltedfapeg_funtype_109_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapeg_funtype_109_t copy_ltedfapeg_funtype_109(ltedfapeg_funtype_109_t x){return x->ftbl->cptr(x);}

uint32_t lookup_ltedfapeg_funtype_109(ltedfapeg_funtype_109_htbl_t htbl, uint32_t i, uint32_t ihash){
        uint32_t mask = htbl->size - 1;
        uint32_t hashindex = ihash & mask;
        ltedfapeg_funtype_109_hashentry_t data = htbl->data[hashindex];
        bool_t keyzero;

        keyzero = (data.key == 0);
        bool_t keymatch;
        keymatch = (data.key == i);
        while ((!keyzero || data.keyhash != 0) &&
                 (data.keyhash != ihash || !keymatch)){
                hashindex++;
                hashindex = hashindex & mask;
                data = htbl->data[hashindex];

                keyzero = (data.key == 0);

                keymatch = (data.key == i);
                }
        return hashindex;
        }

ltedfapeg_funtype_109_t dupdate_ltedfapeg_funtype_109(ltedfapeg_funtype_109_t a, uint32_t i, ltedfapeg_funtype_107_t v){
        ltedfapeg_funtype_109_htbl_t htbl = a->htbl;
        if (htbl == NULL){//construct new htbl
                htbl = (ltedfapeg_funtype_109_htbl_t)safe_malloc(sizeof(struct ltedfapeg_funtype_109_htbl_s));
                htbl->size = HTBL_DEFAULT_SIZE; htbl->num_entries = 0;
                htbl->data = (ltedfapeg_funtype_109_hashentry_t *)safe_malloc(HTBL_DEFAULT_SIZE * sizeof(struct ltedfapeg_funtype_109_hashentry_s));
                for (uint32_t j = 0; j < HTBL_DEFAULT_SIZE; j++){htbl->data[j].key = (uint32_t)0; htbl->data[j].keyhash = 0;
                }
                a->htbl = htbl;
        }
        uint32_t size = htbl->size;
        uint32_t num_entries = htbl->num_entries;
        ltedfapeg_funtype_109_hashentry_t * data = htbl->data;
        if (num_entries/3 >  size/5){//resize data
                uint32_t new_size = 2*size; uint32_t new_mask = new_size - 1;
                if (size >= HTBL_MAX_SIZE) out_of_memory();
                ltedfapeg_funtype_109_hashentry_t * new_data = (ltedfapeg_funtype_109_hashentry_t *)safe_malloc(new_size * sizeof(struct ltedfapeg_funtype_109_hashentry_s));
                for (uint32_t j = 0; j < new_size; j++){
                        new_data[j].key = 0;
                        new_data[j].keyhash = 0;}
                for (uint32_t j = 0; j < size; j++){//transfer entries
                        uint32_t keyhash = data[j].keyhash;
                        bool_t keyzero;
                        keyzero = (data[j].key == 0);
                        if (!keyzero || keyhash != 0){
                                uint32_t new_loc = keyhash ^ new_mask;
                                keyzero = (new_data[new_loc].key == 0);
                                while (keyzero && new_data[new_loc].keyhash == 0){
                                        new_loc++;
                                        new_loc = new_loc ^ new_mask;

                                        keyzero = (new_data[new_loc].key == 0);
                                }
                                new_data[new_loc].key = (uint32_t)data[j].key;
                                new_data[new_loc].keyhash = keyhash;
                                new_data[new_loc].value = (ltedfapeg_funtype_107_t)data[j].value;
                                }}
                htbl->size = new_size;
                htbl->num_entries = num_entries;
                htbl->data = new_data;
                safe_free(data);}
        uint32_t ihash = uint32_hash(i);
        uint32_t hashindex = lookup_ltedfapeg_funtype_109(htbl, i, ihash);
        ltedfapeg_funtype_109_hashentry_t hentry = htbl->data[hashindex];
        uint32_t hkeyhash = hentry.keyhash;
        bool_t hentrykeyzero;
        hentrykeyzero = (hentry.key == 0);

        if (hentrykeyzero && (hkeyhash == 0))
                {htbl->data[hashindex].key = (uint32_t)i; htbl->data[hashindex].keyhash = ihash; htbl->data[hashindex].value = (ltedfapeg_funtype_107_t)v; htbl->num_entries++;}
            else {ltedfapeg_funtype_107_t tempvalue;tempvalue = (ltedfapeg_funtype_107_t)htbl->data[hashindex].value;htbl->data[hashindex].value = (ltedfapeg_funtype_107_t)v;if (v != NULL) v->count++;if (tempvalue != NULL)release_ltedfapeg_funtype_107(tempvalue);};
        return a;

}

ltedfapeg_funtype_109_t update_ltedfapeg_funtype_109(ltedfapeg_funtype_109_t a, uint32_t i, ltedfapeg_funtype_107_t v){
        if (a->count == 1){
                return dupdate_ltedfapeg_funtype_109(a, i, v);
            } else {
                ltedfapeg_funtype_109_t x = copy_ltedfapeg_funtype_109(a);
                a->count--;
                return dupdate_ltedfapeg_funtype_109(x, i, v);
            }}

bool_t equal_ltedfapeg_funtype_109(ltedfapeg_funtype_109_t x, ltedfapeg_funtype_109_t y){
        return false;}

char* json_ltedfapeg_funtype_109(ltedfapeg_funtype_109_t x){char * result = safe_malloc(31); sprintf(result, "%s", "\"ltedfapeg_funtype_109\""); return result;}


ltedfapeg_record_110_t new_ltedfapeg_record_110(void){
        ltedfapeg_record_110_t tmp = (ltedfapeg_record_110_t) safe_malloc(sizeof(struct ltedfapeg_record_110_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapeg_record_110(ltedfapeg_record_110_t x){
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg_funtype_109(x->scaf);
         release_ltedfapeg__ent_adt(x->stack);
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_ltedfapeg_record_110_ptr(pointer_t x, type_actual_t T){
        release_ltedfapeg_record_110((ltedfapeg_record_110_t)x);
}

ltedfapeg_record_110_t copy_ltedfapeg_record_110(ltedfapeg_record_110_t x){
        ltedfapeg_record_110_t y = new_ltedfapeg_record_110();
        y->depth = (uint8_t)x->depth;
        y->lflag = (bool_t)x->lflag;
        y->scaf = x->scaf;
        if (y->scaf != NULL){y->scaf->count++;};
        y->stack = x->stack;
        if (y->stack != NULL){y->stack->count++;};
        y->count = 1;
        return y;}

bool_t equal_ltedfapeg_record_110(ltedfapeg_record_110_t x, ltedfapeg_record_110_t y){
        bool_t tmp = true;
        tmp = tmp && x->depth == y->depth;
        tmp = tmp && x->lflag == y->lflag;
        tmp = tmp && equal_ltedfapeg_funtype_109(x->scaf, y->scaf);
        tmp = tmp && equal_ltedfapeg__ent_adt(x->stack, y->stack);
        return tmp;}

char * json_ltedfapeg_record_110(ltedfapeg_record_110_t x){
        char * tmp[4]; 
        char * fld0 = safe_malloc(17);
         sprintf(fld0, "\"depth\" : ");
        tmp[0] = safe_strcat(fld0, json_uint8(x->depth));
        char * fld1 = safe_malloc(17);
         sprintf(fld1, "\"lflag\" : ");
        tmp[1] = safe_strcat(fld1, json_bool(x->lflag));
        char * fld2 = safe_malloc(16);
         sprintf(fld2, "\"scaf\" : ");
        tmp[2] = safe_strcat(fld2, json_ltedfapeg_funtype_109(x->scaf));
        char * fld3 = safe_malloc(17);
         sprintf(fld3, "\"stack\" : ");
        tmp[3] = safe_strcat(fld3, json_ltedfapeg__ent_adt(x->stack));
         char * result = json_list_with_sep(tmp, 4,  '{', ',', '}');
         for (uint32_t i = 0; i < 4; i++) free(tmp[i]);
        return result;}

bool_t equal_ltedfapeg_record_110_ptr(pointer_t x, pointer_t y, actual_ltedfapeg_record_110_t T){
        return equal_ltedfapeg_record_110((ltedfapeg_record_110_t)x, (ltedfapeg_record_110_t)y);
}

char * json_ltedfapeg_record_110_ptr(pointer_t x, actual_ltedfapeg_record_110_t T){
        return json_ltedfapeg_record_110((ltedfapeg_record_110_t)x);
}

actual_ltedfapeg_record_110_t actual_ltedfapeg_record_110(){
        actual_ltedfapeg_record_110_t new = (actual_ltedfapeg_record_110_t)safe_malloc(sizeof(struct actual_ltedfapeg_record_110_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapeg_record_110_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapeg_record_110_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapeg_record_110_ptr);
 

 
        return new;
 };

ltedfapeg_record_110_t update_ltedfapeg_record_110_depth(ltedfapeg_record_110_t x, uint8_t v){
        ltedfapeg_record_110_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_110(x); x->count--;};
        y->depth = (uint8_t)v;
        return y;}

ltedfapeg_record_110_t update_ltedfapeg_record_110_lflag(ltedfapeg_record_110_t x, bool_t v){
        ltedfapeg_record_110_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapeg_record_110(x); x->count--;};
        y->lflag = (bool_t)v;
        return y;}

ltedfapeg_record_110_t update_ltedfapeg_record_110_scaf(ltedfapeg_record_110_t x, ltedfapeg_funtype_109_t v){
        ltedfapeg_record_110_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->scaf != NULL){release_ltedfapeg_funtype_109(x->scaf);};}
        else {y = copy_ltedfapeg_record_110(x); x->count--; y->scaf->count--;};
        y->scaf = (ltedfapeg_funtype_109_t)v;
        return y;}

ltedfapeg_record_110_t update_ltedfapeg_record_110_stack(ltedfapeg_record_110_t x, ltedfapeg__ent_adt_t v){
        ltedfapeg_record_110_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->stack != NULL){release_ltedfapeg__ent_adt(x->stack);};}
        else {y = copy_ltedfapeg_record_110(x); x->count--; y->stack->count--;};
        y->stack = (ltedfapeg__ent_adt_t)v;
        return y;}




ltedfapeg_funtype_107_t f_ltedfapeg_closure_111(struct ltedfapeg_closure_111_s * closure, uint32_t bvar){
if (closure->htbl != NULL){
        ltedfapeg_funtype_109_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_ltedfapeg_funtype_109(htbl, bvar, hash);
        ltedfapeg_funtype_109_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            ltedfapeg_funtype_107_t result;
            result = (ltedfapeg_funtype_107_t)entry.value;
            if (result != NULL) result->count++;
            return result;}
        

        return h_ltedfapeg_closure_111(bvar, closure->fvar_1, closure->fvar_2);};

return h_ltedfapeg_closure_111(bvar, closure->fvar_1, closure->fvar_2);}

ltedfapeg_funtype_107_t m_ltedfapeg_closure_111(struct ltedfapeg_closure_111_s * closure, uint32_t bvar){
        return h_ltedfapeg_closure_111(bvar, closure->fvar_1, closure->fvar_2);}

extern ltedfapeg_funtype_107_t h_ltedfapeg_closure_111(uint32_t ivar_22, uint32_t ivar_1, ltedfapeg_funtype_107_t ivar_5){
        ltedfapeg_funtype_107_t result;
        //copying to ltedfapeg_funtype_107 from ltedfapeg_funtype_107;
        result = (ltedfapeg_funtype_107_t)ivar_5;
        if (result != NULL) result->count++;

        return result;
}

ltedfapeg_closure_111_t new_ltedfapeg_closure_111(void){
        static struct ltedfapeg_funtype_109_ftbl_s ftbl = {.fptr = (ltedfapeg_funtype_107_t (*)(ltedfapeg_funtype_109_t, uint32_t))&f_ltedfapeg_closure_111, .mptr = (ltedfapeg_funtype_107_t (*)(ltedfapeg_funtype_109_t, uint32_t))&m_ltedfapeg_closure_111, .rptr =  (void (*)(ltedfapeg_funtype_109_t))&release_ltedfapeg_closure_111, .cptr = (ltedfapeg_funtype_109_t (*)(ltedfapeg_funtype_109_t))&copy_ltedfapeg_closure_111};
        ltedfapeg_closure_111_t tmp = (ltedfapeg_closure_111_t) safe_malloc(sizeof(struct ltedfapeg_closure_111_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapeg_closure_111(ltedfapeg_funtype_109_t closure){
        ltedfapeg_closure_111_t x = (ltedfapeg_closure_111_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapeg_funtype_107(x->fvar_2);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapeg_closure_111_t copy_ltedfapeg_closure_111(ltedfapeg_closure_111_t x){
        ltedfapeg_closure_111_t y = new_ltedfapeg_closure_111();
        y->ftbl = x->ftbl;

        y->fvar_1 = (uint32_t)x->fvar_1;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        if (x->htbl != NULL){
            ltedfapeg_funtype_109_htbl_t new_htbl = (ltedfapeg_funtype_109_htbl_t) safe_malloc(sizeof(struct ltedfapeg_funtype_109_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapeg_funtype_109_hashentry_t * new_data = (ltedfapeg_funtype_109_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapeg_funtype_109_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapeg_funtype_109_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}

extern uint8_t ltedfapeg__num_non_terminals(void){
        uint8_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    result = (uint8_t)255;

        defined = true;};
        
        return result;
}

extern bool_t r_ltedfapeg__failp(ltedfapeg__ent_adt_t ivar_1){
        bool_t  result;
        uint8_t ivar_3;
        ivar_3 = (uint8_t)0;
        uint8_t ivar_2;
        ivar_2 = (uint8_t)ivar_1->ltedfapeg__ent_adt_index;
        release_ltedfapeg__ent_adt(ivar_1);
        result = (ivar_2 == ivar_3);

        
        return result;
}

extern bool_t r_ltedfapeg__pendingp(ltedfapeg__ent_adt_t ivar_1){
        bool_t  result;
        uint8_t ivar_3;
        ivar_3 = (uint8_t)1;
        uint8_t ivar_2;
        ivar_2 = (uint8_t)ivar_1->ltedfapeg__ent_adt_index;
        release_ltedfapeg__ent_adt(ivar_1);
        result = (ivar_2 == ivar_3);

        
        return result;
}

extern bool_t r_ltedfapeg__loopp(ltedfapeg__ent_adt_t ivar_1){
        bool_t  result;
        uint8_t ivar_3;
        ivar_3 = (uint8_t)2;
        uint8_t ivar_2;
        ivar_2 = (uint8_t)ivar_1->ltedfapeg__ent_adt_index;
        release_ltedfapeg__ent_adt(ivar_1);
        result = (ivar_2 == ivar_3);

        
        return result;
}

extern bool_t r_ltedfapeg__goodp(ltedfapeg__ent_adt_t ivar_1){
        bool_t  result;
        uint8_t ivar_3;
        ivar_3 = (uint8_t)3;
        uint8_t ivar_2;
        ivar_2 = (uint8_t)ivar_1->ltedfapeg__ent_adt_index;
        release_ltedfapeg__ent_adt(ivar_1);
        result = (ivar_2 == ivar_3);

        
        return result;
}

extern bool_t r_ltedfapeg__pushp(ltedfapeg__ent_adt_t ivar_1){
        bool_t  result;
        uint8_t ivar_3;
        ivar_3 = (uint8_t)4;
        uint8_t ivar_2;
        ivar_2 = (uint8_t)ivar_1->ltedfapeg__ent_adt_index;
        release_ltedfapeg__ent_adt(ivar_1);
        result = (ivar_2 == ivar_3);

        
        return result;
}

extern ltedfapeg__ent_adt_t update_ltedfapeg__ent_adt_dep(ltedfapeg__ent_adt_t ivar_1, uint64_t ivar_7){
        ltedfapeg__ent_adt_t  result;
        bool_t ivar_9;
        uint32_t ivar_10;
        ivar_10 = (uint32_t)ivar_1->ltedfapeg__ent_adt_index;
        uint32_t ivar_11;
        ivar_11 = (uint32_t)0;
        ivar_9 = (ivar_10 == ivar_11);
        if (ivar_9){ 
             ltedfapeg__fail_t ivar_8;
             //copying to ltedfapeg__fail from ltedfapeg__ent_adt;
             ivar_8 = (ltedfapeg__fail_t)ivar_1;
             if (ivar_8 != NULL) ivar_8->count++;
             release_ltedfapeg__ent_adt(ivar_1);
             result = (ltedfapeg__ent_adt_t)update_ltedfapeg__fail_dep(ivar_8, ivar_7);
} else {
        
             ltedfapeg__good_t ivar_12;
             //copying to ltedfapeg__good from ltedfapeg__ent_adt;
             ivar_12 = (ltedfapeg__good_t)ivar_1;
             if (ivar_12 != NULL) ivar_12->count++;
             release_ltedfapeg__ent_adt(ivar_1);
             result = (ltedfapeg__ent_adt_t)update_ltedfapeg__good_dep(ivar_12, ivar_7);
};

        
        return result;
}

extern uint64_t ltedfapeg__ent_adt_dep(ltedfapeg__ent_adt_t ivar_1){
        uint64_t  result;
        bool_t ivar_3;
        uint32_t ivar_4;
        ivar_4 = (uint32_t)ivar_1->ltedfapeg__ent_adt_index;
        uint32_t ivar_5;
        ivar_5 = (uint32_t)0;
        ivar_3 = (ivar_4 == ivar_5);
        if (ivar_3){ 
             ltedfapeg__fail_t ivar_2;
             //copying to ltedfapeg__fail from ltedfapeg__ent_adt;
             ivar_2 = (ltedfapeg__fail_t)ivar_1;
             if (ivar_2 != NULL) ivar_2->count++;
             release_ltedfapeg__ent_adt(ivar_1);
             result = (uint64_t)ivar_2->dep;
             release_ltedfapeg__fail(ivar_2);
} else {
        
             ltedfapeg__good_t ivar_6;
             //copying to ltedfapeg__good from ltedfapeg__ent_adt;
             ivar_6 = (ltedfapeg__good_t)ivar_1;
             if (ivar_6 != NULL) ivar_6->count++;
             release_ltedfapeg__ent_adt(ivar_1);
             result = (uint64_t)ivar_6->dep;
             release_ltedfapeg__good(ivar_6);
};

        
        return result;
}

extern ltedfapeg__good_t update_ltedfapeg__ent_adt_span(ltedfapeg__ent_adt_t ivar_1, uint32_t ivar_3){
        ltedfapeg__good_t  result;
        ltedfapeg__good_t ivar_2;
        //copying to ltedfapeg__good from ltedfapeg__ent_adt;
        ivar_2 = (ltedfapeg__good_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_ltedfapeg__ent_adt(ivar_1);
        result = (ltedfapeg__good_t)update_ltedfapeg__good_span(ivar_2, ivar_3);

        
        return result;
}

extern uint32_t ltedfapeg__ent_adt_span(ltedfapeg__ent_adt_t ivar_1){
        uint32_t  result;
        ltedfapeg__good_t ivar_2;
        //copying to ltedfapeg__good from ltedfapeg__ent_adt;
        ivar_2 = (ltedfapeg__good_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_ltedfapeg__ent_adt(ivar_1);
        result = (uint32_t)ivar_2->span;
        release_ltedfapeg__good(ivar_2);

        
        return result;
}

extern ltedfapeg__push_t update_ltedfapeg__ent_adt_pos(ltedfapeg__ent_adt_t ivar_1, uint32_t ivar_3){
        ltedfapeg__push_t  result;
        ltedfapeg__push_t ivar_2;
        //copying to ltedfapeg__push from ltedfapeg__ent_adt;
        ivar_2 = (ltedfapeg__push_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_ltedfapeg__ent_adt(ivar_1);
        result = (ltedfapeg__push_t)update_ltedfapeg__push_pos(ivar_2, ivar_3);

        
        return result;
}

extern uint32_t ltedfapeg__ent_adt_pos(ltedfapeg__ent_adt_t ivar_1){
        uint32_t  result;
        ltedfapeg__push_t ivar_2;
        //copying to ltedfapeg__push from ltedfapeg__ent_adt;
        ivar_2 = (ltedfapeg__push_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_ltedfapeg__ent_adt(ivar_1);
        result = (uint32_t)ivar_2->pos;
        release_ltedfapeg__push(ivar_2);

        
        return result;
}

extern ltedfapeg__push_t update_ltedfapeg__ent_adt_nt(ltedfapeg__ent_adt_t ivar_1, uint8_t ivar_3){
        ltedfapeg__push_t  result;
        ltedfapeg__push_t ivar_2;
        //copying to ltedfapeg__push from ltedfapeg__ent_adt;
        ivar_2 = (ltedfapeg__push_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_ltedfapeg__ent_adt(ivar_1);
        result = (ltedfapeg__push_t)update_ltedfapeg__push_nt(ivar_2, ivar_3);

        
        return result;
}

extern uint8_t ltedfapeg__ent_adt_nt(ltedfapeg__ent_adt_t ivar_1){
        uint8_t  result;
        ltedfapeg__push_t ivar_2;
        //copying to ltedfapeg__push from ltedfapeg__ent_adt;
        ivar_2 = (ltedfapeg__push_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_ltedfapeg__ent_adt(ivar_1);
        result = (uint8_t)ivar_2->nt;
        release_ltedfapeg__push(ivar_2);

        
        return result;
}

extern ltedfapeg__ent_adt_t ltedfapeg__fail(uint64_t ivar_2){
        ltedfapeg__ent_adt_t  result;
        uint8_t ivar_1;
        ivar_1 = (uint8_t)0;
        ltedfapeg__fail_t tmp430078 = new_ltedfapeg__fail();;
        result = (ltedfapeg__ent_adt_t)tmp430078;
        tmp430078->ltedfapeg__ent_adt_index = (uint8_t)ivar_1;
        tmp430078->dep = (uint64_t)ivar_2;

        
        return result;
}

extern ltedfapeg__ent_adt_t ltedfapeg__pending(void){
        ltedfapeg__ent_adt_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    uint8_t ivar_1;
        ivar_1 = (uint8_t)1;
        ltedfapeg__ent_adt_t tmp430084 = new_ltedfapeg__ent_adt();;
        result = (ltedfapeg__ent_adt_t)tmp430084;
        tmp430084->ltedfapeg__ent_adt_index = (uint8_t)ivar_1;

        defined = true;};
        
        return result;
}

extern ltedfapeg__ent_adt_t ltedfapeg__loop(void){
        ltedfapeg__ent_adt_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    uint8_t ivar_1;
        ivar_1 = (uint8_t)2;
        ltedfapeg__ent_adt_t tmp430090 = new_ltedfapeg__ent_adt();;
        result = (ltedfapeg__ent_adt_t)tmp430090;
        tmp430090->ltedfapeg__ent_adt_index = (uint8_t)ivar_1;

        defined = true;};
        
        return result;
}

extern ltedfapeg__ent_adt_t ltedfapeg__good(uint64_t ivar_2, uint32_t ivar_3){
        ltedfapeg__ent_adt_t  result;
        uint8_t ivar_1;
        ivar_1 = (uint8_t)3;
        ltedfapeg__good_t tmp430100 = new_ltedfapeg__good();;
        result = (ltedfapeg__ent_adt_t)tmp430100;
        tmp430100->ltedfapeg__ent_adt_index = (uint8_t)ivar_1;
        tmp430100->dep = (uint64_t)ivar_2;
        tmp430100->span = (uint32_t)ivar_3;

        
        return result;
}

extern ltedfapeg__ent_adt_t ltedfapeg__push(uint32_t ivar_2, uint8_t ivar_3){
        ltedfapeg__ent_adt_t  result;
        uint8_t ivar_1;
        ivar_1 = (uint8_t)4;
        ltedfapeg__push_t tmp430110 = new_ltedfapeg__push();;
        result = (ltedfapeg__ent_adt_t)tmp430110;
        tmp430110->ltedfapeg__ent_adt_index = (uint8_t)ivar_1;
        tmp430110->pos = (uint32_t)ivar_2;
        tmp430110->nt = (uint8_t)ivar_3;

        
        return result;
}

extern ltedfapeg_funtype_4_t ltedfapeg__ent_ord(void){
        ltedfapeg_funtype_4_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    pvs2cerror("Missing definition", PVS2C_EXIT_ERROR);

        defined = true;};
        
        return result;
}

extern uint8_t ltedfapeg__ord__1(ltedfapeg__ent_adt_t ivar_1){
        uint8_t  result;
        bool_t ivar_7;
        ivar_1->count++;
        ivar_7 = (bool_t)r_ltedfapeg__failp((ltedfapeg__ent_adt_t)ivar_1);
        if (ivar_7){ 
             result = (uint8_t)0;
} else {
        
             bool_t ivar_11;
             ivar_1->count++;
             ivar_11 = (bool_t)r_ltedfapeg__pendingp((ltedfapeg__ent_adt_t)ivar_1);
             if (ivar_11){  
           release_ltedfapeg__ent_adt(ivar_1);
           result = (uint8_t)1;
} else {
             
           bool_t ivar_15;
           ivar_1->count++;
           ivar_15 = (bool_t)r_ltedfapeg__loopp((ltedfapeg__ent_adt_t)ivar_1);
           if (ivar_15){   
           release_ltedfapeg__ent_adt(ivar_1);
           result = (uint8_t)2;
} else {
           
           bool_t ivar_27;
           ivar_1->count++;
           ivar_27 = (bool_t)r_ltedfapeg__goodp((ltedfapeg__ent_adt_t)ivar_1);
           if (ivar_27){    
            result = (uint8_t)3;
} else {
           
            result = (uint8_t)4;
};
};
};
};

        
        return result;
}

extern bool_t ltedfapeg__subterm__1(ltedfapeg__ent_adt_t ivar_1, ltedfapeg__ent_adt_t ivar_2){
        bool_t  result;
        result = (bool_t) equal_ltedfapeg__ent_adt(ivar_1, ivar_2);

        
        return result;
}

extern bool_t ltedfapeg__doublelessp__1(ltedfapeg__ent_adt_t ivar_1, ltedfapeg__ent_adt_t ivar_2){
        bool_t  result;
        result = (bool_t) false;

        
        return result;
}

extern ltedfapeg_funtype_5_t ltedfapeg__reduce_nat__1(ltedfapeg_funtype_6_t ivar_1, mpz_ptr_t ivar_3, mpz_ptr_t ivar_4, ltedfapeg_funtype_8_t ivar_5, ltedfapeg_funtype_10_t ivar_7){
        ltedfapeg_funtype_5_t  result;
        ltedfapeg_closure_11_t cl430188;
        cl430188 = new_ltedfapeg_closure_11();
        cl430188->fvar_1 = (ltedfapeg_funtype_8_t)ivar_5;
        if (cl430188->fvar_1 != NULL) cl430188->fvar_1->count++;
        cl430188->fvar_2 = (ltedfapeg_funtype_10_t)ivar_7;
        if (cl430188->fvar_2 != NULL) cl430188->fvar_2->count++;
        mpz_set(cl430188->fvar_3, ivar_4);
        mpz_set(cl430188->fvar_4, ivar_3);
        cl430188->fvar_5 = (ltedfapeg_funtype_6_t)ivar_1;
        if (cl430188->fvar_5 != NULL) cl430188->fvar_5->count++;
        release_ltedfapeg_funtype_8(ivar_5);
        release_ltedfapeg_funtype_10(ivar_7);
        release_ltedfapeg_funtype_6(ivar_1);
        result = (ltedfapeg_funtype_5_t)cl430188;

        
        return result;
}

extern ltedfapeg_funtype_5_t ltedfapeg__REDUCE_nat__1(ltedfapeg_funtype_13_t ivar_1, ltedfapeg_funtype_5_t ivar_3, ltedfapeg_funtype_5_t ivar_5, ltedfapeg_funtype_15_t ivar_7, ltedfapeg_funtype_17_t ivar_9){
        ltedfapeg_funtype_5_t  result;
        ltedfapeg_closure_18_t cl430335;
        cl430335 = new_ltedfapeg_closure_18();
        cl430335->fvar_1 = (ltedfapeg_funtype_15_t)ivar_7;
        if (cl430335->fvar_1 != NULL) cl430335->fvar_1->count++;
        cl430335->fvar_2 = (ltedfapeg_funtype_17_t)ivar_9;
        if (cl430335->fvar_2 != NULL) cl430335->fvar_2->count++;
        cl430335->fvar_3 = (ltedfapeg_funtype_5_t)ivar_5;
        if (cl430335->fvar_3 != NULL) cl430335->fvar_3->count++;
        cl430335->fvar_4 = (ltedfapeg_funtype_5_t)ivar_3;
        if (cl430335->fvar_4 != NULL) cl430335->fvar_4->count++;
        cl430335->fvar_5 = (ltedfapeg_funtype_13_t)ivar_1;
        if (cl430335->fvar_5 != NULL) cl430335->fvar_5->count++;
        release_ltedfapeg_funtype_15(ivar_7);
        release_ltedfapeg_funtype_17(ivar_9);
        release_ltedfapeg_funtype_5(ivar_5);
        release_ltedfapeg_funtype_5(ivar_3);
        release_ltedfapeg_funtype_13(ivar_1);
        result = (ltedfapeg_funtype_5_t)cl430335;

        
        return result;
}

extern ltedfapeg_funtype_19_t ltedfapeg__reduce_ordinal__1(ltedfapeg_funtype_20_t ivar_1, ordstruct_adt__ordstruct_adt_t ivar_3, ordstruct_adt__ordstruct_adt_t ivar_4, ltedfapeg_funtype_21_t ivar_5, ltedfapeg_funtype_22_t ivar_7){
        ltedfapeg_funtype_19_t  result;
        ltedfapeg_closure_23_t cl430486;
        cl430486 = new_ltedfapeg_closure_23();
        cl430486->fvar_1 = (ltedfapeg_funtype_21_t)ivar_5;
        if (cl430486->fvar_1 != NULL) cl430486->fvar_1->count++;
        cl430486->fvar_2 = (ltedfapeg_funtype_22_t)ivar_7;
        if (cl430486->fvar_2 != NULL) cl430486->fvar_2->count++;
        cl430486->fvar_3 = (ordstruct_adt__ordstruct_adt_t)ivar_4;
        if (cl430486->fvar_3 != NULL) cl430486->fvar_3->count++;
        cl430486->fvar_4 = (ordstruct_adt__ordstruct_adt_t)ivar_3;
        if (cl430486->fvar_4 != NULL) cl430486->fvar_4->count++;
        cl430486->fvar_5 = (ltedfapeg_funtype_20_t)ivar_1;
        if (cl430486->fvar_5 != NULL) cl430486->fvar_5->count++;
        release_ltedfapeg_funtype_21(ivar_5);
        release_ltedfapeg_funtype_22(ivar_7);
        release_ordstruct_adt__ordstruct_adt(ivar_4);
        release_ordstruct_adt__ordstruct_adt(ivar_3);
        release_ltedfapeg_funtype_20(ivar_1);
        result = (ltedfapeg_funtype_19_t)cl430486;

        
        return result;
}

extern ltedfapeg_funtype_19_t ltedfapeg__REDUCE_ordinal__1(ltedfapeg_funtype_24_t ivar_1, ltedfapeg_funtype_19_t ivar_3, ltedfapeg_funtype_19_t ivar_5, ltedfapeg_funtype_25_t ivar_7, ltedfapeg_funtype_26_t ivar_9){
        ltedfapeg_funtype_19_t  result;
        ltedfapeg_closure_27_t cl430701;
        cl430701 = new_ltedfapeg_closure_27();
        cl430701->fvar_1 = (ltedfapeg_funtype_25_t)ivar_7;
        if (cl430701->fvar_1 != NULL) cl430701->fvar_1->count++;
        cl430701->fvar_2 = (ltedfapeg_funtype_26_t)ivar_9;
        if (cl430701->fvar_2 != NULL) cl430701->fvar_2->count++;
        cl430701->fvar_3 = (ltedfapeg_funtype_19_t)ivar_5;
        if (cl430701->fvar_3 != NULL) cl430701->fvar_3->count++;
        cl430701->fvar_4 = (ltedfapeg_funtype_19_t)ivar_3;
        if (cl430701->fvar_4 != NULL) cl430701->fvar_4->count++;
        cl430701->fvar_5 = (ltedfapeg_funtype_24_t)ivar_1;
        if (cl430701->fvar_5 != NULL) cl430701->fvar_5->count++;
        release_ltedfapeg_funtype_25(ivar_7);
        release_ltedfapeg_funtype_26(ivar_9);
        release_ltedfapeg_funtype_19(ivar_5);
        release_ltedfapeg_funtype_19(ivar_3);
        release_ltedfapeg_funtype_24(ivar_1);
        result = (ltedfapeg_funtype_19_t)cl430701;

        
        return result;
}

extern bool_t r_ltedfapeg__epsilonp(ltedfapeg__prepeg_adt_t ivar_1){
        bool_t  result;
        uint8_t ivar_3;
        ivar_3 = (uint8_t)0;
        uint8_t ivar_2;
        ivar_2 = (uint8_t)ivar_1->ltedfapeg__prepeg_adt_index;
        release_ltedfapeg__prepeg_adt(ivar_1);
        result = (ivar_2 == ivar_3);

        
        return result;
}

extern bool_t r_ltedfapeg__failurep(ltedfapeg__prepeg_adt_t ivar_1){
        bool_t  result;
        uint8_t ivar_3;
        ivar_3 = (uint8_t)1;
        uint8_t ivar_2;
        ivar_2 = (uint8_t)ivar_1->ltedfapeg__prepeg_adt_index;
        release_ltedfapeg__prepeg_adt(ivar_1);
        result = (ivar_2 == ivar_3);

        
        return result;
}

extern bool_t r_ltedfapeg__anyp(ltedfapeg__prepeg_adt_t ivar_1){
        bool_t  result;
        uint8_t ivar_3;
        ivar_3 = (uint8_t)2;
        uint8_t ivar_2;
        ivar_2 = (uint8_t)ivar_1->ltedfapeg__prepeg_adt_index;
        release_ltedfapeg__prepeg_adt(ivar_1);
        result = (ivar_2 == ivar_3);

        
        return result;
}

extern bool_t r_ltedfapeg__terminalp(ltedfapeg__prepeg_adt_t ivar_1){
        bool_t  result;
        uint8_t ivar_3;
        ivar_3 = (uint8_t)3;
        uint8_t ivar_2;
        ivar_2 = (uint8_t)ivar_1->ltedfapeg__prepeg_adt_index;
        release_ltedfapeg__prepeg_adt(ivar_1);
        result = (ivar_2 == ivar_3);

        
        return result;
}

extern bool_t r_ltedfapeg__ltep(ltedfapeg__prepeg_adt_t ivar_1){
        bool_t  result;
        uint8_t ivar_3;
        ivar_3 = (uint8_t)4;
        uint8_t ivar_2;
        ivar_2 = (uint8_t)ivar_1->ltedfapeg__prepeg_adt_index;
        release_ltedfapeg__prepeg_adt(ivar_1);
        result = (ivar_2 == ivar_3);

        
        return result;
}

extern ltedfapeg__any_t update_ltedfapeg__prepeg_adt_dfa(ltedfapeg__prepeg_adt_t ivar_1, dfa__dfa_t ivar_3){
        ltedfapeg__any_t  result;
        ltedfapeg__any_t ivar_2;
        //copying to ltedfapeg__any from ltedfapeg__prepeg_adt;
        ivar_2 = (ltedfapeg__any_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_ltedfapeg__prepeg_adt(ivar_1);
        result = (ltedfapeg__any_t)update_ltedfapeg__any_dfa(ivar_2, ivar_3);

        
        return result;
}

extern dfa__dfa_t ltedfapeg__prepeg_adt_dfa(ltedfapeg__prepeg_adt_t ivar_1){
        dfa__dfa_t  result;
        ltedfapeg__any_t ivar_2;
        //copying to ltedfapeg__any from ltedfapeg__prepeg_adt;
        ivar_2 = (ltedfapeg__any_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_ltedfapeg__prepeg_adt(ivar_1);
        result = (dfa__dfa_t)ivar_2->dfa;
        result->count++;
        release_ltedfapeg__any(ivar_2);

        
        return result;
}

extern ltedfapeg__terminal_t update_ltedfapeg__prepeg_adt_a(ltedfapeg__prepeg_adt_t ivar_1, uint8_t ivar_3){
        ltedfapeg__terminal_t  result;
        ltedfapeg__terminal_t ivar_2;
        //copying to ltedfapeg__terminal from ltedfapeg__prepeg_adt;
        ivar_2 = (ltedfapeg__terminal_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_ltedfapeg__prepeg_adt(ivar_1);
        result = (ltedfapeg__terminal_t)update_ltedfapeg__terminal_a(ivar_2, ivar_3);

        
        return result;
}

extern uint8_t ltedfapeg__prepeg_adt_a(ltedfapeg__prepeg_adt_t ivar_1){
        uint8_t  result;
        ltedfapeg__terminal_t ivar_2;
        //copying to ltedfapeg__terminal from ltedfapeg__prepeg_adt;
        ivar_2 = (ltedfapeg__terminal_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_ltedfapeg__prepeg_adt(ivar_1);
        result = (uint8_t)ivar_2->a;
        release_ltedfapeg__terminal(ivar_2);

        
        return result;
}

extern ltedfapeg__lte_t update_ltedfapeg__prepeg_adt_fst(ltedfapeg__prepeg_adt_t ivar_1, uint8_t ivar_3){
        ltedfapeg__lte_t  result;
        ltedfapeg__lte_t ivar_2;
        //copying to ltedfapeg__lte from ltedfapeg__prepeg_adt;
        ivar_2 = (ltedfapeg__lte_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_ltedfapeg__prepeg_adt(ivar_1);
        result = (ltedfapeg__lte_t)update_ltedfapeg__lte_fst(ivar_2, ivar_3);

        
        return result;
}

extern uint8_t ltedfapeg__prepeg_adt_fst(ltedfapeg__prepeg_adt_t ivar_1){
        uint8_t  result;
        ltedfapeg__lte_t ivar_2;
        //copying to ltedfapeg__lte from ltedfapeg__prepeg_adt;
        ivar_2 = (ltedfapeg__lte_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_ltedfapeg__prepeg_adt(ivar_1);
        result = (uint8_t)ivar_2->fst;
        release_ltedfapeg__lte(ivar_2);

        
        return result;
}

extern ltedfapeg__lte_t update_ltedfapeg__prepeg_adt_lthen(ltedfapeg__prepeg_adt_t ivar_1, uint8_t ivar_3){
        ltedfapeg__lte_t  result;
        ltedfapeg__lte_t ivar_2;
        //copying to ltedfapeg__lte from ltedfapeg__prepeg_adt;
        ivar_2 = (ltedfapeg__lte_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_ltedfapeg__prepeg_adt(ivar_1);
        result = (ltedfapeg__lte_t)update_ltedfapeg__lte_lthen(ivar_2, ivar_3);

        
        return result;
}

extern uint8_t ltedfapeg__prepeg_adt_lthen(ltedfapeg__prepeg_adt_t ivar_1){
        uint8_t  result;
        ltedfapeg__lte_t ivar_2;
        //copying to ltedfapeg__lte from ltedfapeg__prepeg_adt;
        ivar_2 = (ltedfapeg__lte_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_ltedfapeg__prepeg_adt(ivar_1);
        result = (uint8_t)ivar_2->lthen;
        release_ltedfapeg__lte(ivar_2);

        
        return result;
}

extern ltedfapeg__lte_t update_ltedfapeg__prepeg_adt_lelse(ltedfapeg__prepeg_adt_t ivar_1, uint8_t ivar_3){
        ltedfapeg__lte_t  result;
        ltedfapeg__lte_t ivar_2;
        //copying to ltedfapeg__lte from ltedfapeg__prepeg_adt;
        ivar_2 = (ltedfapeg__lte_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_ltedfapeg__prepeg_adt(ivar_1);
        result = (ltedfapeg__lte_t)update_ltedfapeg__lte_lelse(ivar_2, ivar_3);

        
        return result;
}

extern uint8_t ltedfapeg__prepeg_adt_lelse(ltedfapeg__prepeg_adt_t ivar_1){
        uint8_t  result;
        ltedfapeg__lte_t ivar_2;
        //copying to ltedfapeg__lte from ltedfapeg__prepeg_adt;
        ivar_2 = (ltedfapeg__lte_t)ivar_1;
        if (ivar_2 != NULL) ivar_2->count++;
        release_ltedfapeg__prepeg_adt(ivar_1);
        result = (uint8_t)ivar_2->lelse;
        release_ltedfapeg__lte(ivar_2);

        
        return result;
}

extern ltedfapeg__prepeg_adt_t ltedfapeg__epsilon(void){
        ltedfapeg__prepeg_adt_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    uint8_t ivar_1;
        ivar_1 = (uint8_t)0;
        ltedfapeg__prepeg_adt_t tmp431047 = new_ltedfapeg__prepeg_adt();;
        result = (ltedfapeg__prepeg_adt_t)tmp431047;
        tmp431047->ltedfapeg__prepeg_adt_index = (uint8_t)ivar_1;

        defined = true;};
        
        return result;
}

extern ltedfapeg__prepeg_adt_t ltedfapeg__failure(void){
        ltedfapeg__prepeg_adt_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    uint8_t ivar_1;
        ivar_1 = (uint8_t)1;
        ltedfapeg__prepeg_adt_t tmp431053 = new_ltedfapeg__prepeg_adt();;
        result = (ltedfapeg__prepeg_adt_t)tmp431053;
        tmp431053->ltedfapeg__prepeg_adt_index = (uint8_t)ivar_1;

        defined = true;};
        
        return result;
}

extern ltedfapeg__prepeg_adt_t ltedfapeg__any(dfa__dfa_t ivar_2){
        ltedfapeg__prepeg_adt_t  result;
        uint8_t ivar_1;
        ivar_1 = (uint8_t)2;
        ltedfapeg__any_t tmp431077 = new_ltedfapeg__any();;
        result = (ltedfapeg__prepeg_adt_t)tmp431077;
        tmp431077->ltedfapeg__prepeg_adt_index = (uint8_t)ivar_1;
        tmp431077->dfa = (dfa__dfa_t)ivar_2;

        
        return result;
}

extern ltedfapeg__prepeg_adt_t ltedfapeg__terminal(uint8_t ivar_2){
        ltedfapeg__prepeg_adt_t  result;
        uint8_t ivar_1;
        ivar_1 = (uint8_t)3;
        ltedfapeg__terminal_t tmp431093 = new_ltedfapeg__terminal();;
        result = (ltedfapeg__prepeg_adt_t)tmp431093;
        tmp431093->ltedfapeg__prepeg_adt_index = (uint8_t)ivar_1;
        tmp431093->a = (uint8_t)ivar_2;

        
        return result;
}

extern ltedfapeg__prepeg_adt_t ltedfapeg__lte(uint8_t ivar_2, uint8_t ivar_3, uint8_t ivar_4){
        ltedfapeg__prepeg_adt_t  result;
        uint8_t ivar_1;
        ivar_1 = (uint8_t)4;
        ltedfapeg__lte_t tmp431105 = new_ltedfapeg__lte();;
        result = (ltedfapeg__prepeg_adt_t)tmp431105;
        tmp431105->ltedfapeg__prepeg_adt_index = (uint8_t)ivar_1;
        tmp431105->fst = (uint8_t)ivar_2;
        tmp431105->lthen = (uint8_t)ivar_3;
        tmp431105->lelse = (uint8_t)ivar_4;

        
        return result;
}

extern ltedfapeg_funtype_32_t ltedfapeg__prepeg_ord(void){
        ltedfapeg_funtype_32_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    pvs2cerror("Missing definition", PVS2C_EXIT_ERROR);

        defined = true;};
        
        return result;
}

extern uint8_t ltedfapeg__ord__2(ltedfapeg__prepeg_adt_t ivar_1){
        uint8_t  result;
        bool_t ivar_3;
        ivar_1->count++;
        ivar_3 = (bool_t)r_ltedfapeg__epsilonp((ltedfapeg__prepeg_adt_t)ivar_1);
        if (ivar_3){ 
             release_ltedfapeg__prepeg_adt(ivar_1);
             result = (uint8_t)0;
} else {
        
             bool_t ivar_7;
             ivar_1->count++;
             ivar_7 = (bool_t)r_ltedfapeg__failurep((ltedfapeg__prepeg_adt_t)ivar_1);
             if (ivar_7){  
           release_ltedfapeg__prepeg_adt(ivar_1);
           result = (uint8_t)1;
} else {
             
           bool_t ivar_15;
           ivar_1->count++;
           ivar_15 = (bool_t)r_ltedfapeg__anyp((ltedfapeg__prepeg_adt_t)ivar_1);
           if (ivar_15){   
           result = (uint8_t)2;
} else {
           
           bool_t ivar_23;
           ivar_1->count++;
           ivar_23 = (bool_t)r_ltedfapeg__terminalp((ltedfapeg__prepeg_adt_t)ivar_1);
           if (ivar_23){    
            result = (uint8_t)3;
} else {
           
            result = (uint8_t)4;
};
};
};
};

        
        return result;
}

extern bool_t ltedfapeg__subterm__2(ltedfapeg__prepeg_adt_t ivar_1, ltedfapeg__prepeg_adt_t ivar_2){
        bool_t  result;
        result = (bool_t) equal_ltedfapeg__prepeg_adt(ivar_1, ivar_2);

        
        return result;
}

extern bool_t ltedfapeg__doublelessp__2(ltedfapeg__prepeg_adt_t ivar_1, ltedfapeg__prepeg_adt_t ivar_2){
        bool_t  result;
        result = (bool_t) false;

        
        return result;
}

extern ltedfapeg_funtype_33_t ltedfapeg__reduce_nat__2(mpz_ptr_t ivar_1, mpz_ptr_t ivar_2, ltedfapeg_funtype_34_t ivar_3, ltedfapeg_funtype_35_t ivar_5, ltedfapeg_funtype_37_t ivar_7){
        ltedfapeg_funtype_33_t  result;
        ltedfapeg_closure_38_t cl431212;
        cl431212 = new_ltedfapeg_closure_38();
        cl431212->fvar_1 = (ltedfapeg_funtype_35_t)ivar_5;
        if (cl431212->fvar_1 != NULL) cl431212->fvar_1->count++;
        cl431212->fvar_2 = (ltedfapeg_funtype_37_t)ivar_7;
        if (cl431212->fvar_2 != NULL) cl431212->fvar_2->count++;
        cl431212->fvar_3 = (ltedfapeg_funtype_34_t)ivar_3;
        if (cl431212->fvar_3 != NULL) cl431212->fvar_3->count++;
        mpz_set(cl431212->fvar_4, ivar_2);
        mpz_set(cl431212->fvar_5, ivar_1);
        release_ltedfapeg_funtype_35(ivar_5);
        release_ltedfapeg_funtype_37(ivar_7);
        release_ltedfapeg_funtype_34(ivar_3);
        result = (ltedfapeg_funtype_33_t)cl431212;

        
        return result;
}

extern ltedfapeg_funtype_33_t ltedfapeg__REDUCE_nat__2(ltedfapeg_funtype_33_t ivar_1, ltedfapeg_funtype_33_t ivar_3, ltedfapeg_funtype_40_t ivar_5, ltedfapeg_funtype_42_t ivar_7, ltedfapeg_funtype_44_t ivar_9){
        ltedfapeg_funtype_33_t  result;
        ltedfapeg_closure_45_t cl431408;
        cl431408 = new_ltedfapeg_closure_45();
        cl431408->fvar_1 = (ltedfapeg_funtype_42_t)ivar_7;
        if (cl431408->fvar_1 != NULL) cl431408->fvar_1->count++;
        cl431408->fvar_2 = (ltedfapeg_funtype_44_t)ivar_9;
        if (cl431408->fvar_2 != NULL) cl431408->fvar_2->count++;
        cl431408->fvar_3 = (ltedfapeg_funtype_40_t)ivar_5;
        if (cl431408->fvar_3 != NULL) cl431408->fvar_3->count++;
        cl431408->fvar_4 = (ltedfapeg_funtype_33_t)ivar_3;
        if (cl431408->fvar_4 != NULL) cl431408->fvar_4->count++;
        cl431408->fvar_5 = (ltedfapeg_funtype_33_t)ivar_1;
        if (cl431408->fvar_5 != NULL) cl431408->fvar_5->count++;
        release_ltedfapeg_funtype_42(ivar_7);
        release_ltedfapeg_funtype_44(ivar_9);
        release_ltedfapeg_funtype_40(ivar_5);
        release_ltedfapeg_funtype_33(ivar_3);
        release_ltedfapeg_funtype_33(ivar_1);
        result = (ltedfapeg_funtype_33_t)cl431408;

        
        return result;
}

extern ltedfapeg_funtype_46_t ltedfapeg__reduce_ordinal__2(ordstruct_adt__ordstruct_adt_t ivar_1, ordstruct_adt__ordstruct_adt_t ivar_2, ltedfapeg_funtype_47_t ivar_3, ltedfapeg_funtype_48_t ivar_5, ltedfapeg_funtype_49_t ivar_7){
        ltedfapeg_funtype_46_t  result;
        ltedfapeg_closure_50_t cl431600;
        cl431600 = new_ltedfapeg_closure_50();
        cl431600->fvar_1 = (ltedfapeg_funtype_48_t)ivar_5;
        if (cl431600->fvar_1 != NULL) cl431600->fvar_1->count++;
        cl431600->fvar_2 = (ltedfapeg_funtype_49_t)ivar_7;
        if (cl431600->fvar_2 != NULL) cl431600->fvar_2->count++;
        cl431600->fvar_3 = (ltedfapeg_funtype_47_t)ivar_3;
        if (cl431600->fvar_3 != NULL) cl431600->fvar_3->count++;
        cl431600->fvar_4 = (ordstruct_adt__ordstruct_adt_t)ivar_2;
        if (cl431600->fvar_4 != NULL) cl431600->fvar_4->count++;
        cl431600->fvar_5 = (ordstruct_adt__ordstruct_adt_t)ivar_1;
        if (cl431600->fvar_5 != NULL) cl431600->fvar_5->count++;
        release_ltedfapeg_funtype_48(ivar_5);
        release_ltedfapeg_funtype_49(ivar_7);
        release_ltedfapeg_funtype_47(ivar_3);
        release_ordstruct_adt__ordstruct_adt(ivar_2);
        release_ordstruct_adt__ordstruct_adt(ivar_1);
        result = (ltedfapeg_funtype_46_t)cl431600;

        
        return result;
}

extern ltedfapeg_funtype_46_t ltedfapeg__REDUCE_ordinal__2(ltedfapeg_funtype_46_t ivar_1, ltedfapeg_funtype_46_t ivar_3, ltedfapeg_funtype_51_t ivar_5, ltedfapeg_funtype_52_t ivar_7, ltedfapeg_funtype_53_t ivar_9){
        ltedfapeg_funtype_46_t  result;
        ltedfapeg_closure_54_t cl431864;
        cl431864 = new_ltedfapeg_closure_54();
        cl431864->fvar_1 = (ltedfapeg_funtype_52_t)ivar_7;
        if (cl431864->fvar_1 != NULL) cl431864->fvar_1->count++;
        cl431864->fvar_2 = (ltedfapeg_funtype_53_t)ivar_9;
        if (cl431864->fvar_2 != NULL) cl431864->fvar_2->count++;
        cl431864->fvar_3 = (ltedfapeg_funtype_51_t)ivar_5;
        if (cl431864->fvar_3 != NULL) cl431864->fvar_3->count++;
        cl431864->fvar_4 = (ltedfapeg_funtype_46_t)ivar_3;
        if (cl431864->fvar_4 != NULL) cl431864->fvar_4->count++;
        cl431864->fvar_5 = (ltedfapeg_funtype_46_t)ivar_1;
        if (cl431864->fvar_5 != NULL) cl431864->fvar_5->count++;
        release_ltedfapeg_funtype_52(ivar_7);
        release_ltedfapeg_funtype_53(ivar_9);
        release_ltedfapeg_funtype_51(ivar_5);
        release_ltedfapeg_funtype_46(ivar_3);
        release_ltedfapeg_funtype_46(ivar_1);
        result = (ltedfapeg_funtype_46_t)cl431864;

        
        return result;
}

extern ltedfapeg_funtype_55_t ltedfapeg__good_good_entryp(uint32_t ivar_1, uint32_t ivar_2){
        ltedfapeg_funtype_55_t  result;
        ltedfapeg_closure_56_t cl431942;
        cl431942 = new_ltedfapeg_closure_56();
        cl431942->fvar_1 = (uint32_t)ivar_2;
        cl431942->fvar_2 = (uint32_t)ivar_1;
        result = (ltedfapeg_funtype_55_t)cl431942;

        
        return result;
}

extern ltedfapeg_funtype_55_t ltedfapeg__good_push_entryp(uint32_t ivar_1){
        ltedfapeg_funtype_55_t  result;
        ltedfapeg_closure_57_t cl431954;
        cl431954 = new_ltedfapeg_closure_57();
        cl431954->fvar_1 = (uint32_t)ivar_1;
        result = (ltedfapeg_funtype_55_t)cl431954;

        
        return result;
}

extern ltedfapeg_funtype_55_t ltedfapeg__fine_push_entryp(uint32_t ivar_1){
        ltedfapeg_funtype_55_t  result;
        ltedfapeg_closure_58_t cl431966;
        cl431966 = new_ltedfapeg_closure_58();
        cl431966->fvar_1 = (uint32_t)ivar_1;
        result = (ltedfapeg_funtype_55_t)cl431966;

        
        return result;
}

extern ltedfapeg_funtype_55_t ltedfapeg__nice_entryp(uint32_t ivar_1, uint32_t ivar_2){
        ltedfapeg_funtype_55_t  result;
        ltedfapeg_closure_59_t cl431984;
        cl431984 = new_ltedfapeg_closure_59();
        cl431984->fvar_1 = (uint32_t)ivar_2;
        cl431984->fvar_2 = (uint32_t)ivar_1;
        result = (ltedfapeg_funtype_55_t)cl431984;

        
        return result;
}

extern bool_t ltedfapeg__loop_or_pushp(ltedfapeg__ent_adt_t ivar_1){
        bool_t  result;
        bool_t ivar_2;
        ivar_1->count++;
        ivar_2 = (bool_t)r_ltedfapeg__loopp((ltedfapeg__ent_adt_t)ivar_1);
        if (ivar_2){ 
             release_ltedfapeg__ent_adt(ivar_1);
             result = (bool_t) true;
} else {
        
             result = (bool_t)r_ltedfapeg__pushp((ltedfapeg__ent_adt_t)ivar_1);
};

        
        return result;
}

extern ltedfapeg_funtype_60_t ltedfapeg__instack(uint32_t ivar_1, ltedfapeg_array_62_t ivar_2){
        ltedfapeg_funtype_60_t  result;
        ltedfapeg_closure_63_t cl432025;
        cl432025 = new_ltedfapeg_closure_63();
        cl432025->fvar_1 = (ltedfapeg_array_62_t)ivar_2;
        if (cl432025->fvar_1 != NULL) cl432025->fvar_1->count++;
        cl432025->fvar_2 = (uint32_t)ivar_1;
        release_ltedfapeg_array_62(ivar_2);
        result = (ltedfapeg_funtype_60_t)cl432025;

        
        return result;
}

extern ltedfapeg_funtype_65_t ltedfapeg__successor(uint32_t ivar_1, ltedfapeg__lang_spec_t ivar_2, ltedfapeg_array_62_t ivar_3){
        ltedfapeg_funtype_65_t  result;
        ltedfapeg_closure_67_t cl432112;
        cl432112 = new_ltedfapeg_closure_67();
        cl432112->fvar_1 = (ltedfapeg_array_62_t)ivar_3;
        if (cl432112->fvar_1 != NULL) cl432112->fvar_1->count++;
        cl432112->fvar_2 = (uint32_t)ivar_1;
        cl432112->fvar_3 = (ltedfapeg__lang_spec_t)ivar_2;
        if (cl432112->fvar_3 != NULL) cl432112->fvar_3->count++;
        release_ltedfapeg_array_62(ivar_3);
        release_ltedfapeg__lang_spec(ivar_2);
        result = (ltedfapeg_funtype_65_t)cl432112;

        
        return result;
}

extern ltedfapeg_funtype_68_t ltedfapeg__sigma(uint32_t ivar_1, ltedfapeg_array_69_t ivar_2){
        ltedfapeg_funtype_68_t  result;
        ltedfapeg_closure_70_t cl432127;
        cl432127 = new_ltedfapeg_closure_70();
        cl432127->fvar_1 = (ltedfapeg_array_69_t)ivar_2;
        if (cl432127->fvar_1 != NULL) cl432127->fvar_1->count++;
        cl432127->fvar_2 = (uint32_t)ivar_1;
        release_ltedfapeg_array_69(ivar_2);
        result = (ltedfapeg_funtype_68_t)cl432127;

        
        return result;
}

extern uint64_t ltedfapeg__scafcount(uint32_t ivar_1, ltedfapeg_array_62_t ivar_2, ltedfapeg_funtype_55_t ivar_4, uint32_t ivar_6){
        uint64_t  result;
        type_actual_t ivar_36;
        ivar_36 = (type_actual_t)actual_ltedfapeg__ent_adt();
        ltedfapeg_funtype_68_t ivar_10;
        ltedfapeg_array_69_t ivar_46;
        uint32_t size432160;
        //copying to uint32 from uint32;
        size432160 = (uint32_t)ivar_1;
        size432160 += 1;
        ivar_46 = new_ltedfapeg_array_69(size432160);
        uint32_t ivar_14;
        for (uint32_t index432142 = 0; index432142 < size432160; index432142++){
             ivar_14 = (uint32_t)index432142;
             ltedfapeg_funtype_71_t ivar_23;
             ltedfapeg_funtype_72_t ivar_30;
             uint8_t ivar_39;
             ivar_39 = (uint8_t)ltedfapeg__num_non_terminals();
             uint32_t ivar_38;
             //copying to uint32 from uint8;
             ivar_38 = (uint32_t)ivar_39;
             ivar_30 = (ltedfapeg_funtype_72_t)arrayCount__count((type_actual_t)ivar_36, (uint32_t)ivar_38);
             ivar_4->count++;
             ivar_23 = (ltedfapeg_funtype_71_t)ivar_30->ftbl->fptr(ivar_30, ivar_4);
             ivar_30->ftbl->rptr(ivar_30);
             ltedfapeg_array_61_t ivar_41;
             ivar_41 = (ltedfapeg_array_61_t)ivar_2->elems[ivar_14];
             ivar_41->count++;
             mpz_mk_set_ui(ivar_46->elems[index432142], ivar_23->ftbl->fptr(ivar_23, ivar_41));
             ivar_23->ftbl->rptr(ivar_23);
        };
        release_ltedfapeg_funtype_55(ivar_4);
        release_ltedfapeg_array_62(ivar_2);
        ivar_10 = (ltedfapeg_funtype_68_t)ltedfapeg__sigma((uint32_t)ivar_1, (ltedfapeg_array_69_t)ivar_46);
        result = (uint64_t)mpz_get_ui(ivar_10->ftbl->fptr(ivar_10, ivar_6));
        ivar_10->ftbl->rptr(ivar_10);
        safe_free(ivar_36);

        
        return result;
}

extern uint64_t ltedfapeg__pushcount(uint32_t ivar_1, ltedfapeg_array_62_t ivar_2){
        uint64_t  result;
        ltedfapeg_funtype_55_t ivar_15;
        ltedfapeg_closure_73_t cl432172;
        cl432172 = new_ltedfapeg_closure_73();
        ivar_15 = (ltedfapeg_funtype_55_t)cl432172;
        result = (uint64_t)ltedfapeg__scafcount((uint32_t)ivar_1, (ltedfapeg_array_62_t)ivar_2, (ltedfapeg_funtype_55_t)ivar_15, (uint32_t)ivar_1);

        
        return result;
}

extern bool_t ltedfapeg__good_or_failp(ltedfapeg__ent_adt_t ivar_1){
        bool_t  result;
        bool_t ivar_2;
        ivar_1->count++;
        ivar_2 = (bool_t)r_ltedfapeg__goodp((ltedfapeg__ent_adt_t)ivar_1);
        if (ivar_2){ 
             release_ltedfapeg__ent_adt(ivar_1);
             result = (bool_t) true;
} else {
        
             result = (bool_t)r_ltedfapeg__failp((ltedfapeg__ent_adt_t)ivar_1);
};

        
        return result;
}

extern uint64_t ltedfapeg__gfcount(uint32_t ivar_1, ltedfapeg_array_62_t ivar_2){
        uint64_t  result;
        ltedfapeg_funtype_55_t ivar_16;
        ltedfapeg_closure_74_t cl432188;
        cl432188 = new_ltedfapeg_closure_74();
        ivar_16 = (ltedfapeg_funtype_55_t)cl432188;
        result = (uint64_t)ltedfapeg__scafcount((uint32_t)ivar_1, (ltedfapeg_array_62_t)ivar_2, (ltedfapeg_funtype_55_t)ivar_16, (uint32_t)ivar_1);

        
        return result;
}

extern ltedfapeg_funtype_75_t ltedfapeg__good_depthp(uint32_t ivar_1, ltedfapeg_array_62_t ivar_2){
        ltedfapeg_funtype_75_t  result;
        ltedfapeg_closure_76_t cl432198;
        cl432198 = new_ltedfapeg_closure_76();
        cl432198->fvar_1 = (ltedfapeg_array_62_t)ivar_2;
        if (cl432198->fvar_1 != NULL) cl432198->fvar_1->count++;
        cl432198->fvar_2 = (uint32_t)ivar_1;
        release_ltedfapeg_array_62(ivar_2);
        result = (ltedfapeg_funtype_75_t)cl432198;

        
        return result;
}

extern ltedfapeg_funtype_55_t ltedfapeg__good_stackp(uint32_t ivar_1, ltedfapeg__lang_spec_t ivar_2, uint64_t ivar_3, ltedfapeg_array_62_t ivar_4){
        ltedfapeg_funtype_55_t  result;
        ltedfapeg_closure_77_t cl432265;
        cl432265 = new_ltedfapeg_closure_77();
        cl432265->fvar_1 = (ltedfapeg_array_62_t)ivar_4;
        if (cl432265->fvar_1 != NULL) cl432265->fvar_1->count++;
        cl432265->fvar_2 = (uint32_t)ivar_1;
        cl432265->fvar_3 = (ltedfapeg__lang_spec_t)ivar_2;
        if (cl432265->fvar_3 != NULL) cl432265->fvar_3->count++;
        cl432265->fvar_4 = (uint64_t)ivar_3;
        release_ltedfapeg_array_62(ivar_4);
        release_ltedfapeg__lang_spec(ivar_2);
        result = (ltedfapeg_funtype_55_t)cl432265;

        
        return result;
}

extern ltedfapeg_funtype_65_t ltedfapeg__mem_stackp(uint32_t ivar_1, ltedfapeg__lang_spec_t ivar_2, uint64_t ivar_3, ltedfapeg_array_62_t ivar_4){
        ltedfapeg_funtype_65_t  result;
        ltedfapeg_closure_78_t cl432354;
        cl432354 = new_ltedfapeg_closure_78();
        cl432354->fvar_1 = (ltedfapeg_array_62_t)ivar_4;
        if (cl432354->fvar_1 != NULL) cl432354->fvar_1->count++;
        cl432354->fvar_2 = (uint32_t)ivar_1;
        cl432354->fvar_3 = (ltedfapeg__lang_spec_t)ivar_2;
        if (cl432354->fvar_3 != NULL) cl432354->fvar_3->count++;
        cl432354->fvar_4 = (uint64_t)ivar_3;
        release_ltedfapeg_array_62(ivar_4);
        release_ltedfapeg__lang_spec(ivar_2);
        result = (ltedfapeg_funtype_65_t)cl432354;

        
        return result;
}

extern bool_t ltedfapeg__push_or_pendingp(ltedfapeg__ent_adt_t ivar_1){
        bool_t  result;
        bool_t ivar_2;
        ivar_1->count++;
        ivar_2 = (bool_t)r_ltedfapeg__pushp((ltedfapeg__ent_adt_t)ivar_1);
        if (ivar_2){ 
             release_ltedfapeg__ent_adt(ivar_1);
             result = (bool_t) true;
} else {
        
             result = (bool_t)r_ltedfapeg__pendingp((ltedfapeg__ent_adt_t)ivar_1);
};

        
        return result;
}

extern ltedfapeg_funtype_55_t ltedfapeg__fine_stackp(uint32_t ivar_1, ltedfapeg__lang_spec_t ivar_2, uint64_t ivar_3, ltedfapeg_array_62_t ivar_4){
        ltedfapeg_funtype_55_t  result;
        ltedfapeg_closure_79_t cl432426;
        cl432426 = new_ltedfapeg_closure_79();
        cl432426->fvar_1 = (ltedfapeg_array_62_t)ivar_4;
        if (cl432426->fvar_1 != NULL) cl432426->fvar_1->count++;
        cl432426->fvar_2 = (uint32_t)ivar_1;
        cl432426->fvar_3 = (ltedfapeg__lang_spec_t)ivar_2;
        if (cl432426->fvar_3 != NULL) cl432426->fvar_3->count++;
        cl432426->fvar_4 = (uint64_t)ivar_3;
        release_ltedfapeg_array_62(ivar_4);
        release_ltedfapeg__lang_spec(ivar_2);
        result = (ltedfapeg_funtype_55_t)cl432426;

        
        return result;
}

extern bool_t ltedfapeg__loop_readyp(uint32_t ivar_1, ltedfapeg__lang_spec_t ivar_2, ltedfapeg_array_62_t ivar_3, uint32_t ivar_5, uint8_t ivar_6){
        bool_t  result;
        ltedfapeg__prepeg_adt_t ivar_7;
        ivar_7 = (ltedfapeg__prepeg_adt_t)ivar_2->elems[ivar_6];
        ivar_7->count++;
        release_ltedfapeg__lang_spec(ivar_2);
        bool_t ivar_111;
        ivar_7->count++;
        ivar_111 = (bool_t)r_ltedfapeg__ltep((ltedfapeg__prepeg_adt_t)ivar_7);
        if (ivar_111){ 
             uint8_t ivar_12;
             ivar_7->count++;
             ivar_12 = (uint8_t)ltedfapeg__prepeg_adt_fst((ltedfapeg__prepeg_adt_t)ivar_7);
             uint8_t ivar_13;
             ivar_7->count++;
             ivar_13 = (uint8_t)ltedfapeg__prepeg_adt_lthen((ltedfapeg__prepeg_adt_t)ivar_7);
             uint8_t ivar_14;
             ivar_14 = (uint8_t)ltedfapeg__prepeg_adt_lelse((ltedfapeg__prepeg_adt_t)ivar_7);
             bool_t ivar_24;
             ltedfapeg__ent_adt_t ivar_37;
             ltedfapeg_array_61_t ivar_29;
             ivar_29 = (ltedfapeg_array_61_t)ivar_3->elems[ivar_5];
             ivar_29->count++;
             ivar_37 = (ltedfapeg__ent_adt_t)ivar_29->elems[ivar_12];
             ivar_37->count++;
             release_ltedfapeg_array_61(ivar_29);
             ivar_24 = (bool_t)ltedfapeg__loop_or_pushp((ltedfapeg__ent_adt_t)ivar_37);
             if (ivar_24){  
           release_ltedfapeg_array_62(ivar_3);
           result = (bool_t) true;
} else {
             
           bool_t ivar_38;
           bool_t ivar_40;
           ltedfapeg__ent_adt_t ivar_53;
           ltedfapeg_array_61_t ivar_45;
           ivar_45 = (ltedfapeg_array_61_t)ivar_3->elems[ivar_5];
           ivar_45->count++;
           ivar_53 = (ltedfapeg__ent_adt_t)ivar_45->elems[ivar_12];
           ivar_53->count++;
           release_ltedfapeg_array_61(ivar_45);
           ivar_40 = (bool_t)r_ltedfapeg__goodp((ltedfapeg__ent_adt_t)ivar_53);
           if (ivar_40){   
           ltedfapeg__ent_adt_t ivar_80;
           ltedfapeg_array_61_t ivar_57;
           uint32_t ivar_77;
           uint32_t ivar_60;
           ltedfapeg__ent_adt_t ivar_72;
           ltedfapeg_array_61_t ivar_64;
           ivar_64 = (ltedfapeg_array_61_t)ivar_3->elems[ivar_5];
           ivar_64->count++;
           ivar_72 = (ltedfapeg__ent_adt_t)ivar_64->elems[ivar_12];
           ivar_72->count++;
           release_ltedfapeg_array_61(ivar_64);
           ivar_60 = (uint32_t)ltedfapeg__ent_adt_span((ltedfapeg__ent_adt_t)ivar_72);
           ivar_77 = (uint32_t)(ivar_5 + ivar_60);
           ivar_57 = (ltedfapeg_array_61_t)ivar_3->elems[ivar_77];
           ivar_57->count++;
           ivar_80 = (ltedfapeg__ent_adt_t)ivar_57->elems[ivar_13];
           ivar_80->count++;
           release_ltedfapeg_array_61(ivar_57);
           ivar_38 = (bool_t)ltedfapeg__loop_or_pushp((ltedfapeg__ent_adt_t)ivar_80);
} else {
           
           ivar_38 = (bool_t) false;
};
           if (ivar_38){   
           release_ltedfapeg_array_62(ivar_3);
           result = (bool_t) true;
} else {
           
           bool_t ivar_82;
           ltedfapeg__ent_adt_t ivar_95;
           ltedfapeg_array_61_t ivar_87;
           ivar_87 = (ltedfapeg_array_61_t)ivar_3->elems[ivar_5];
           ivar_87->count++;
           ivar_95 = (ltedfapeg__ent_adt_t)ivar_87->elems[ivar_12];
           ivar_95->count++;
           release_ltedfapeg_array_61(ivar_87);
           ivar_82 = (bool_t)r_ltedfapeg__failp((ltedfapeg__ent_adt_t)ivar_95);
           if (ivar_82){    
            ltedfapeg__ent_adt_t ivar_107;
            ltedfapeg_array_61_t ivar_99;
            ivar_99 = (ltedfapeg_array_61_t)ivar_3->elems[ivar_5];
            ivar_99->count++;
            release_ltedfapeg_array_62(ivar_3);
            ivar_107 = (ltedfapeg__ent_adt_t)ivar_99->elems[ivar_14];
            ivar_107->count++;
            release_ltedfapeg_array_61(ivar_99);
            result = (bool_t)ltedfapeg__loop_or_pushp((ltedfapeg__ent_adt_t)ivar_107);
} else {
           
            release_ltedfapeg_array_62(ivar_3);
            result = (bool_t) false;
};
};
};
} else {
        
             release_ltedfapeg__prepeg_adt(ivar_7);
             release_ltedfapeg_array_62(ivar_3);
             result = (bool_t) false;
};

        
        return result;
}

extern ltedfapeg_funtype_81_t ltedfapeg__good_failp(uint32_t ivar_1, ltedfapeg__lang_spec_t ivar_2, ltedfapeg_array_82_t ivar_3){
        ltedfapeg_funtype_81_t  result;
        ltedfapeg_closure_83_t cl432673;
        cl432673 = new_ltedfapeg_closure_83();
        cl432673->fvar_1 = (ltedfapeg_array_82_t)ivar_3;
        if (cl432673->fvar_1 != NULL) cl432673->fvar_1->count++;
        cl432673->fvar_2 = (uint32_t)ivar_1;
        cl432673->fvar_3 = (ltedfapeg__lang_spec_t)ivar_2;
        if (cl432673->fvar_3 != NULL) cl432673->fvar_3->count++;
        release_ltedfapeg_array_82(ivar_3);
        release_ltedfapeg__lang_spec(ivar_2);
        result = (ltedfapeg_funtype_81_t)cl432673;

        
        return result;
}

extern ltedfapeg_funtype_85_t ltedfapeg__good_loopp(uint32_t ivar_1, ltedfapeg__lang_spec_t ivar_2){
        ltedfapeg_funtype_85_t  result;
        ltedfapeg_closure_86_t cl432782;
        cl432782 = new_ltedfapeg_closure_86();
        cl432782->fvar_1 = (uint32_t)ivar_1;
        cl432782->fvar_2 = (ltedfapeg__lang_spec_t)ivar_2;
        if (cl432782->fvar_2 != NULL) cl432782->fvar_2->count++;
        release_ltedfapeg__lang_spec(ivar_2);
        result = (ltedfapeg_funtype_85_t)cl432782;

        
        return result;
}

extern ltedfapeg_funtype_88_t ltedfapeg__good_goodp(uint32_t ivar_1, ltedfapeg__lang_spec_t ivar_2, ltedfapeg_array_82_t ivar_3){
        ltedfapeg_funtype_88_t  result;
        ltedfapeg_closure_89_t cl432970;
        cl432970 = new_ltedfapeg_closure_89();
        cl432970->fvar_1 = (ltedfapeg_array_82_t)ivar_3;
        if (cl432970->fvar_1 != NULL) cl432970->fvar_1->count++;
        cl432970->fvar_2 = (uint32_t)ivar_1;
        cl432970->fvar_3 = (ltedfapeg__lang_spec_t)ivar_2;
        if (cl432970->fvar_3 != NULL) cl432970->fvar_3->count++;
        release_ltedfapeg_array_82(ivar_3);
        release_ltedfapeg__lang_spec(ivar_2);
        result = (ltedfapeg_funtype_88_t)cl432970;

        
        return result;
}

extern ltedfapeg_funtype_91_t ltedfapeg__good_entryp(uint32_t ivar_1, ltedfapeg__lang_spec_t ivar_2, ltedfapeg_array_82_t ivar_3){
        ltedfapeg_funtype_91_t  result;
        ltedfapeg_closure_92_t cl433099;
        cl433099 = new_ltedfapeg_closure_92();
        cl433099->fvar_1 = (uint32_t)ivar_1;
        cl433099->fvar_2 = (ltedfapeg__lang_spec_t)ivar_2;
        if (cl433099->fvar_2 != NULL) cl433099->fvar_2->count++;
        cl433099->fvar_3 = (ltedfapeg_array_82_t)ivar_3;
        if (cl433099->fvar_3 != NULL) cl433099->fvar_3->count++;
        release_ltedfapeg__lang_spec(ivar_2);
        release_ltedfapeg_array_82(ivar_3);
        result = (ltedfapeg_funtype_91_t)cl433099;

        
        return result;
}

extern ltedfapeg_funtype_91_t ltedfapeg__fine_entryp(uint32_t ivar_1, ltedfapeg__lang_spec_t ivar_2, ltedfapeg_array_82_t ivar_3){
        ltedfapeg_funtype_91_t  result;
        ltedfapeg_closure_93_t cl433231;
        cl433231 = new_ltedfapeg_closure_93();
        cl433231->fvar_1 = (uint32_t)ivar_1;
        cl433231->fvar_2 = (ltedfapeg__lang_spec_t)ivar_2;
        if (cl433231->fvar_2 != NULL) cl433231->fvar_2->count++;
        cl433231->fvar_3 = (ltedfapeg_array_82_t)ivar_3;
        if (cl433231->fvar_3 != NULL) cl433231->fvar_3->count++;
        release_ltedfapeg__lang_spec(ivar_2);
        release_ltedfapeg_array_82(ivar_3);
        result = (ltedfapeg_funtype_91_t)cl433231;

        
        return result;
}

extern ltedfapeg_funtype_94_t ltedfapeg__good_tscaffoldp(uint32_t ivar_1, ltedfapeg__lang_spec_t ivar_2, ltedfapeg_array_82_t ivar_3){
        ltedfapeg_funtype_94_t  result;
        ltedfapeg_closure_95_t cl433266;
        cl433266 = new_ltedfapeg_closure_95();
        cl433266->fvar_1 = (uint32_t)ivar_1;
        result = (ltedfapeg_funtype_94_t)cl433266;

        
        return result;
}

extern ltedfapeg_funtype_60_t ltedfapeg__good_rootp(uint32_t ivar_1, ltedfapeg_array_62_t ivar_2){
        ltedfapeg_funtype_60_t  result;
        ltedfapeg_closure_96_t cl433297;
        cl433297 = new_ltedfapeg_closure_96();
        cl433297->fvar_1 = (ltedfapeg_array_62_t)ivar_2;
        if (cl433297->fvar_1 != NULL) cl433297->fvar_1->count++;
        cl433297->fvar_2 = (uint32_t)ivar_1;
        release_ltedfapeg_array_62(ivar_2);
        result = (ltedfapeg_funtype_60_t)cl433297;

        
        return result;
}

extern ltedfapeg_funtype_97_t ltedfapeg__fine_scaffoldp(uint32_t ivar_1, ltedfapeg__lang_spec_t ivar_2, ltedfapeg_array_82_t ivar_3){
        ltedfapeg_funtype_97_t  result;
        ltedfapeg_closure_98_t cl433364;
        cl433364 = new_ltedfapeg_closure_98();
        cl433364->fvar_1 = (ltedfapeg_array_82_t)ivar_3;
        if (cl433364->fvar_1 != NULL) cl433364->fvar_1->count++;
        cl433364->fvar_2 = (ltedfapeg__lang_spec_t)ivar_2;
        if (cl433364->fvar_2 != NULL) cl433364->fvar_2->count++;
        cl433364->fvar_3 = (uint32_t)ivar_1;
        release_ltedfapeg_array_82(ivar_3);
        release_ltedfapeg__lang_spec(ivar_2);
        result = (ltedfapeg_funtype_97_t)cl433364;

        
        return result;
}

extern bool_t ltedfapeg__emptyp(ltedfapeg__ent_adt_t ivar_1){
        bool_t  result;
        uint8_t ivar_2;
        ivar_2 = (uint8_t)ltedfapeg__ent_adt_nt((ltedfapeg__ent_adt_t)ivar_1);
        uint8_t ivar_3;
        ivar_3 = (uint8_t)ltedfapeg__num_non_terminals();
        result = (ivar_2 == ivar_3);

        
        return result;
}

extern ltedfapeg_funtype_101_t ltedfapeg__step(uint32_t ivar_1, ltedfapeg__lang_spec_t ivar_2, ltedfapeg_array_82_t ivar_3, uint32_t ivar_4, uint8_t ivar_5){
        ltedfapeg_funtype_101_t  result;
        ltedfapeg_closure_102_t cl435293;
        cl435293 = new_ltedfapeg_closure_102();
        cl435293->fvar_1 = (uint32_t)ivar_1;
        cl435293->fvar_2 = (ltedfapeg_array_82_t)ivar_3;
        if (cl435293->fvar_2 != NULL) cl435293->fvar_2->count++;
        cl435293->fvar_3 = (ltedfapeg__lang_spec_t)ivar_2;
        if (cl435293->fvar_3 != NULL) cl435293->fvar_3->count++;
        release_ltedfapeg_array_82(ivar_3);
        release_ltedfapeg__lang_spec(ivar_2);
        result = (ltedfapeg_funtype_101_t)cl435293;

        
        return result;
}

extern ltedfapeg_funtype_104_t ltedfapeg__size(uint32_t ivar_1, ltedfapeg__lang_spec_t ivar_2, ltedfapeg_array_82_t ivar_3, uint32_t ivar_4, uint8_t ivar_5){
        ltedfapeg_funtype_104_t  result;
        ltedfapeg_closure_105_t cl435395;
        cl435395 = new_ltedfapeg_closure_105();
        cl435395->fvar_1 = (uint32_t)ivar_1;
        result = (ltedfapeg_funtype_104_t)cl435395;

        
        return result;
}

extern ltedfapeg_record_100_t ltedfapeg__parse(uint32_t ivar_1, ltedfapeg__lang_spec_t ivar_2, ltedfapeg_array_82_t ivar_3, uint32_t ivar_4, uint8_t ivar_5, ltedfapeg_record_100_t ivar_6){
        ltedfapeg_record_100_t  result;
        bool_t ivar_9;
        uint64_t ivar_10;
        ivar_10 = (uint64_t)ivar_6->depth;
        uint8_t ivar_11;
        ivar_11 = (uint8_t)0;
        ivar_9 = (ivar_10 == ivar_11);
        if (ivar_9){ 
             release_ltedfapeg_array_82(ivar_3);
             release_ltedfapeg__lang_spec(ivar_2);
             //copying to ltedfapeg_record_100 from ltedfapeg_record_100;
             result = (ltedfapeg_record_100_t)ivar_6;
             if (result != NULL) result->count++;
             release_ltedfapeg_record_100(ivar_6);
} else {
        
             ltedfapeg_record_100_t ivar_52;
             ltedfapeg_funtype_101_t ivar_29;
             ivar_2->count++;
             ivar_3->count++;
             ivar_29 = (ltedfapeg_funtype_101_t)ltedfapeg__step((uint32_t)ivar_1, (ltedfapeg__lang_spec_t)ivar_2, (ltedfapeg_array_82_t)ivar_3, (uint32_t)ivar_4, (uint8_t)ivar_5);
             ivar_52 = (ltedfapeg_record_100_t)ivar_29->ftbl->fptr(ivar_29, ivar_6);
             ivar_29->ftbl->rptr(ivar_29);
             result = (ltedfapeg_record_100_t)ltedfapeg__parse((uint32_t)ivar_1, (ltedfapeg__lang_spec_t)ivar_2, (ltedfapeg_array_82_t)ivar_3, (uint32_t)ivar_4, (uint8_t)ivar_5, (ltedfapeg_record_100_t)ivar_52);
};

        
        return result;
}

extern ltedfapeg__ent_adt_t ltedfapeg__doparse(uint32_t ivar_1, ltedfapeg__lang_spec_t ivar_2, ltedfapeg_array_82_t ivar_3, uint8_t ivar_4){
        ltedfapeg__ent_adt_t  result;
        /* pend */ ltedfapeg_funtype_107_t ivar_5;
        ltedfapeg_closure_108_t cl435618;
        cl435618 = new_ltedfapeg_closure_108();
        ivar_5 = (ltedfapeg_funtype_107_t)cl435618;
        ltedfapeg_record_110_t ivar_82;
        uint8_t ivar_16;
        ivar_16 = (uint8_t)1;
        bool_t ivar_17;
        ivar_17 = (bool_t) false;
        ltedfapeg_funtype_109_t ivar_45;
        ltedfapeg__ent_adt_t ivar_25;
        uint8_t ivar_32;
        ivar_32 = (uint8_t)0;
        uint32_t ivar_29;
        //copying to uint32 from uint8;
        ivar_29 = (uint32_t)ivar_32;
        uint8_t ivar_30;
        ivar_30 = (uint8_t)ltedfapeg__num_non_terminals();
        ivar_25 = (ltedfapeg__ent_adt_t)ltedfapeg__push((uint32_t)ivar_29, (uint8_t)ivar_30);
        ltedfapeg_funtype_109_t ivar_33;
        ltedfapeg_closure_111_t cl435640;
        cl435640 = new_ltedfapeg_closure_111();
        cl435640->fvar_1 = (uint32_t)ivar_1;
        cl435640->fvar_2 = (ltedfapeg_funtype_107_t)ivar_5;
        if (cl435640->fvar_2 != NULL) cl435640->fvar_2->count++;
        release_ltedfapeg_funtype_107(ivar_5);
        ivar_33 = (ltedfapeg_funtype_109_t)cl435640;
        uint32_t ivar_40;
        ivar_40 = (uint32_t)0;
        ltedfapeg_funtype_107_t ivar_34;
        ivar_34 = (ltedfapeg_funtype_107_t)ivar_33->ftbl->fptr(ivar_33, ivar_40);
        ltedfapeg_funtype_109_t ivar_41;
        ltedfapeg_funtype_107_t ivar_43;
        ivar_43 = NULL;
        ivar_41 = (ltedfapeg_funtype_109_t)update_ltedfapeg_funtype_109(ivar_33, ivar_40, ivar_43);
        if (ivar_43 != NULL) ivar_43->count--;
        ltedfapeg_funtype_107_t ivar_42;
        ltedfapeg_funtype_107_t ivar_37;
        ltedfapeg__ent_adt_t ivar_39;
        ivar_39 = NULL;
        ivar_37 = (ltedfapeg_funtype_107_t)update_ltedfapeg_funtype_107(ivar_34, ivar_4, ivar_39);
        if (ivar_39 != NULL) ivar_39->count--;
        ivar_42 = (ltedfapeg_funtype_107_t)update_ltedfapeg_funtype_107(ivar_37, ivar_4, ivar_25);
        if (ivar_25 != NULL) ivar_25->count--;
        ivar_45 = (ltedfapeg_funtype_109_t)update_ltedfapeg_funtype_109(ivar_41, ivar_40, ivar_42);
        if (ivar_42 != NULL) ivar_42->count--;
        ltedfapeg__ent_adt_t ivar_53;
        uint8_t ivar_52;
        ivar_52 = (uint8_t)0;
        uint32_t ivar_49;
        //copying to uint32 from uint8;
        ivar_49 = (uint32_t)ivar_52;
        ivar_53 = (ltedfapeg__ent_adt_t)ltedfapeg__push((uint32_t)ivar_49, (uint8_t)ivar_4);
        ltedfapeg_record_110_t tmp435674 = new_ltedfapeg_record_110();;
        ivar_82 = (ltedfapeg_record_110_t)tmp435674;
        tmp435674->depth = (uint8_t)ivar_16;
        tmp435674->lflag = (bool_t)ivar_17;
        tmp435674->scaf = (ltedfapeg_funtype_109_t)ivar_45;
        tmp435674->stack = (ltedfapeg__ent_adt_t)ivar_53;
        /* St */ ltedfapeg_record_100_t ivar_10;
        //copying to ltedfapeg_record_100 from ltedfapeg_record_110;
        {
         ivar_10 = new_ltedfapeg_record_100();
         uint32_t tmp435691;
         //copying to uint32 from uint32;
         tmp435691 = (uint32_t)ivar_1;
         tmp435691 += 1;
         ivar_10->scaf = new_ltedfapeg_array_62(tmp435691);
         for (uint32_t index_83 = 0; index_83 < tmp435691; index_83++){
                 uint32_t tmp435693;
                 tmp435693 = (uint32_t)255;
                 ivar_10->scaf->elems[index_83] = new_ltedfapeg_array_61(tmp435693);
                 for (uint32_t index_84 = 0; index_84 < tmp435693; index_84++){
                  ivar_10->scaf->elems[index_83]->elems[index_84] = (ltedfapeg__ent_adt_t)ivar_82->scaf->ftbl->fptr(ivar_82->scaf, index_83)->ftbl->fptr(ivar_82->scaf->ftbl->fptr(ivar_82->scaf, index_83), index_84);
                  if (ivar_10->scaf->elems[index_83]->elems[index_84] != NULL) ivar_10->scaf->elems[index_83]->elems[index_84]->count++;
                 };
         };
         ivar_10->depth = (uint64_t)ivar_82->depth;
         ivar_10->stack = (ltedfapeg__ent_adt_t)ivar_82->stack;
         if (ivar_10->stack != NULL) ivar_10->stack->count++;
         ivar_10->lflag = (bool_t)ivar_82->lflag;
        };
        release_ltedfapeg_record_110(ivar_82);
        ltedfapeg_array_61_t ivar_56;
        ltedfapeg_array_62_t ivar_60;
        ltedfapeg_record_100_t ivar_78;
        uint8_t ivar_77;
        ivar_77 = (uint8_t)0;
        uint32_t ivar_72;
        //copying to uint32 from uint8;
        ivar_72 = (uint32_t)ivar_77;
        ivar_78 = (ltedfapeg_record_100_t)ltedfapeg__parse((uint32_t)ivar_1, (ltedfapeg__lang_spec_t)ivar_2, (ltedfapeg_array_82_t)ivar_3, (uint32_t)ivar_72, (uint8_t)ivar_4, (ltedfapeg_record_100_t)ivar_10);
        ivar_60 = (ltedfapeg_array_62_t)ivar_78->scaf;
        ivar_60->count++;
        release_ltedfapeg_record_100(ivar_78);
        uint32_t ivar_80;
        ivar_80 = (uint32_t)0;
        ivar_56 = (ltedfapeg_array_61_t)ivar_60->elems[ivar_80];
        ivar_56->count++;
        release_ltedfapeg_array_62(ivar_60);
        result = (ltedfapeg__ent_adt_t)ivar_56->elems[ivar_4];
        result->count++;
        release_ltedfapeg_array_61(ivar_56);

        
        return result;
}