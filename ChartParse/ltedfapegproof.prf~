(|ltedfapegproof|
 (|inqstack_TCC1| 0
  (|inqstack_TCC1-1| |nil| 3888202986 ("" (TERMINATION-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[qstack])" |ltedfapegproof| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|inqstack| TERMINATION
    "ltedfapegproof.inqstack(ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.T)"
    "NIL")))
 (|stacksize_TCC1| 0
  (|stacksize_TCC1-1| |nil| 3888202986 ("" (TERMINATION-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[qstack])" |ltedfapegproof| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|stacksize| TERMINATION "ltedfapegproof.stacksize(ltedfapegproof.T)"
    "NIL")))
 (|good_parsetree?_TCC1| 0
  (|good_parsetree?_TCC1-1| |nil| 3909630056 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|DfaParse| CONST-DECL "(goodDfaResult?(len, startpos))" |dfa| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|goodDfaResult?| CONST-DECL "bool" |dfa| NIL)
    (|dfaResult| TYPE-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL (|good_parsetree?| SUBTYPE "dfa.span(ltedfapegproof.res)" "uint32")))
 (|good_parsetree?_TCC2| 0
  (|good_parsetree?_TCC1-1| |nil| 3888202986 ("" (TERMINATION-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[parsetree])" |ltedfapegproof| NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_parsetree?| TERMINATION
    "ltedfapegproof.good_parsetree?(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s)(ltedfapegproof.qpush(ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.S), ltedfapegproof.n1, ltedfapegproof.i, ltedfapegproof.Q)"
    "NIL")))
 (|good_parsetree?_TCC3| 0
  (|good_parsetree?_TCC6-1| |nil| 3888202986 ("" (TERMINATION-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[parsetree])" |ltedfapegproof| NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_parsetree?| TERMINATION
    "ltedfapegproof.good_parsetree?(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s)(ltedfapegproof.qpush(ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.S), ltedfapegproof.n1, ltedfapegproof.i, ltedfapegproof.Q)"
    "NIL")))
 (|good_parsetree?_TCC4| 0
  (|good_parsetree?_TCC7-1| |nil| 3888202986 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_parsetree?| SUBTYPE
    "(number_fields.+)(ltedfapegproof.i, ltedfapeg.span(ltedfapegproof.entry(ltedfapegproof.Q)))"
    "{i: uint32 | reals.<=(i, ltedfapegproof.len)}")))
 (|good_parsetree?_TCC5| 0
  (|good_parsetree?_TCC11-1| |nil| 3888202986 ("" (TERMINATION-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[parsetree])" |ltedfapegproof| NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_parsetree?| TERMINATION
    "ltedfapegproof.good_parsetree?(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s)(ltedfapegproof.qpush(ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.S), ltedfapegproof.n2, (number_fields.+)(ltedfapegproof.i, ltedfapeg.span(ltedfapegproof.entry(ltedfapegproof.Q))), ltedfapegproof.R)"
    "NIL")))
 (|good_parsetree?_TCC6| 0
  (|good_parsetree?_TCC2-1| |nil| 3888202986 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_parsetree?| SUBTYPE "ltedfapegproof.E"
    "{x: ltedfapeg.ent | booleans.OR(ltedfapeg.fail?(x), ltedfapeg.good?(x))}")))
 (|good_parsetree?_TCC7| 0
  (|good_parsetree?_TCC3-1| |nil| 3888202986 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_parsetree?| SUBTYPE "ltedfapegproof.entry(ltedfapegproof.Q)"
    "{x: ltedfapeg.ent | booleans.OR(ltedfapeg.fail?(x), ltedfapeg.good?(x))}")))
 (|good_parsetree?_TCC8| 0
  (|good_parsetree?_TCC22-1| |nil| 3888202986 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_parsetree?| SUBTYPE "ltedfapegproof.entry(ltedfapegproof.R)"
    "{x: ltedfapeg.ent | booleans.OR(ltedfapeg.fail?(x), ltedfapeg.good?(x))}")))
 (|good_parsetree?_TCC9| 0
  (|good_parsetree?_TCC4-1| |nil| 3888202986 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_parsetree?| SUBTYPE "ltedfapegproof.E"
    "{x: ltedfapeg.ent | booleans.OR(ltedfapeg.fail?(x), ltedfapeg.good?(x))}")))
 (|good_parsetree?_TCC10| 0
  (|good_parsetree?_TCC5-1| |nil| 3888202986 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_parsetree?| SUBTYPE "ltedfapegproof.entry(ltedfapegproof.Q)"
    "{x: ltedfapeg.ent | booleans.OR(ltedfapeg.fail?(x), ltedfapeg.good?(x))}")))
 (|good_parsetree?_TCC11| 0
  (|good_parsetree?_TCC27-1| |nil| 3888202986 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_parsetree?| SUBTYPE "ltedfapegproof.entry(ltedfapegproof.R)"
    "{x: ltedfapeg.ent | booleans.OR(ltedfapeg.fail?(x), ltedfapeg.good?(x))}")))
 (|good_parsetree?_TCC12| 0
  (|good_parsetree?_TCC14-1| |nil| 3888202986 ("" (TERMINATION-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[parsetree])" |ltedfapegproof| NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_parsetree?| TERMINATION
    "ltedfapegproof.good_parsetree?(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s)(ltedfapegproof.qpush(ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.S), ltedfapegproof.n3, ltedfapegproof.i, ltedfapegproof.R)"
    "NIL")))
 (|good_parsetree?_TCC13| 0
  (|good_parsetree?_TCC12-1| |nil| 3888202986 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_parsetree?| SUBTYPE "ltedfapegproof.E"
    "{x: ltedfapeg.ent | booleans.OR(ltedfapeg.fail?(x), ltedfapeg.good?(x))}")))
 (|good_parsetree?_TCC14| 0
  (|good_parsetree?_TCC13-1| |nil| 3888202986 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_parsetree?| SUBTYPE "ltedfapegproof.entry(ltedfapegproof.Q)"
    "{x: ltedfapeg.ent | booleans.OR(ltedfapeg.fail?(x), ltedfapeg.good?(x))}")))
 (|good_parsetree?_TCC15| 0
  (|good_parsetree?_TCC32-1| |nil| 3888202986 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_parsetree?| SUBTYPE "ltedfapegproof.entry(ltedfapegproof.R)"
    "{x: ltedfapeg.ent | booleans.OR(ltedfapeg.fail?(x), ltedfapeg.good?(x))}")))
 (|good_parsetree?_TCC16| 0
  (|good_parsetree?_TCC15-1| |nil| 3888202986 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_parsetree?| SUBTYPE "ltedfapegproof.E"
    "{x: ltedfapeg.ent | booleans.OR(ltedfapeg.fail?(x), ltedfapeg.good?(x))}")))
 (|good_parsetree?_TCC17| 0
  (|good_parsetree?_TCC16-1| |nil| 3888202986 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_parsetree?| SUBTYPE "ltedfapegproof.entry(ltedfapegproof.Q)"
    "{x: ltedfapeg.ent | booleans.OR(ltedfapeg.fail?(x), ltedfapeg.good?(x))}")))
 (|good_parsetree?_TCC18| 0
  (|good_parsetree?_TCC36-1| |nil| 3888202986 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|good_parsetree?| SUBTYPE "ltedfapegproof.entry(ltedfapegproof.R)"
    "{x: ltedfapeg.ent | booleans.OR(ltedfapeg.fail?(x), ltedfapeg.good?(x))}")))
 (|buildtree_TCC1| 0
  (|buildtree_TCC1-1| |nil| 3888202986 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|buildtree| SUBTYPE
    "ltedfapegproof.st`scaf(ltedfapegproof.i)(ltedfapegproof.n)"
    "{x: ltedfapeg.ent | booleans.OR(ltedfapeg.fail?(x), ltedfapeg.good?(x))}")))
 (|buildtree_TCC2| 0
  (|buildtree_TCC2-1| |nil| 3888202986
   ("" (SKEEP :PREDS? T) (("" (TYPEPRED "z`9") (("" (GRIND) NIL NIL)) NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|qstack| TYPE-DECL NIL |ltedfapegproof| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildtree| SUBTYPE
    "ltedfapegproof.z`6`scaf(ltedfapegproof.z`9)(ltedfapegproof.z`8)"
    "{x: ltedfapeg.ent | booleans.OR(ltedfapeg.fail?(x), ltedfapeg.good?(x))}")))
 (|buildtree_TCC3| 0
  (|buildtree_TCC5-1| |nil| 3888202986
   ("" (SKEEP :PREDS? T)
    (("" (TYPEPRED "st`scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (FLATTEN)
          (("" (EXPAND GOOD_TSCAFFOLD?)
            (("" (ASSERT) (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildtree| SUBTYPE "ltedfapegproof.i"
    "{i: uint32 | booleans.AND(reals.<=(i, ltedfapegproof.len), ltedfapeg.good_or_fail?(ltedfapegproof.st`scaf(i)(ltedfapegproof.n1)))}")))
 (|buildtree_TCC4| 0
  (|buildtree_TCC21-1| |nil| 3888202986
   ("" (SKEEP :PREDS? T)
    (("" (TYPEPRED "st`scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (FLATTEN)
          (("" (EXPAND GOOD_TSCAFFOLD?)
            (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|good_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildtree| TERMINATION
    "ltedfapegproof.buildtree(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s, ltedfapegproof.rootpos, ltedfapegproof.rootnt, ltedfapegproof.st, ltedfapegproof.qpush(ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.S), ltedfapegproof.n1, ltedfapegproof.i)"
    "NIL")))
 (|buildtree_TCC5| 0
  (|buildtree_TCC3-1| |nil| 3888202986
   ("" (SKEEP* :PREDS? T)
    (("" (TYPEPRED "st`scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (EXPAND "good_tscaffold?")
          (("" (FLATTEN)
            (("" (INST-CP - "i" "n")
              (("" (INST - "i" "n1") (("" (GRIND) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|minus_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|sigma| DEF-DECL "nat" |ltedfapeg| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|DfaParse| CONST-DECL "(goodDfaResult?(len, startpos))" |dfa| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|good_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildtree| SUBTYPE
    "(number_fields.+)(ltedfapegproof.i, ltedfapeg.span(ltedfapegproof.st`scaf(ltedfapegproof.i)(ltedfapegproof.n1)))"
    "{i: uint32 | booleans.AND(reals.<=(i, ltedfapegproof.len), ltedfapeg.good_or_fail?(ltedfapegproof.st`scaf(i)(ltedfapegproof.n2)))}")))
 (|buildtree_TCC6| 0
  (|buildtree_TCC27-1| |nil| 3888202986
   ("" (SKEEP :PREDS? T)
    (("" (TYPEPRED "st`scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("" (EXPAND "good_tscaffold?")
            (("" (INST - "i" "n") (("" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|entry| SHARED-ADT-ACCESSOR-DECL "[parsetree -> defent]" |ltedfapegproof|
     NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|qpush| ADT-CONSTRUCTOR-DECL
     "[[non_terminal, uint32, qstack] -> (qpush?)]" |ltedfapegproof| NIL)
    (|qpush?| ADT-RECOGNIZER-DECL "[qstack -> boolean]" |ltedfapegproof| NIL)
    (|good_parsetree?| DEF-DECL "bool" |ltedfapegproof| NIL)
    (|parsetree| TYPE-DECL NIL |ltedfapegproof| NIL)
    (|qstack| TYPE-DECL NIL |ltedfapegproof| NIL)
    (|good_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildtree| TERMINATION
    "ltedfapegproof.buildtree(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s, ltedfapegproof.rootpos, ltedfapegproof.rootnt, ltedfapegproof.st, ltedfapegproof.qpush(ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.S), ltedfapegproof.n2, (number_fields.+)(ltedfapegproof.i, ltedfapeg.span(ltedfapegproof.st`scaf(ltedfapegproof.i)(ltedfapegproof.n1))))"
    "NIL")))
 (|buildtree_TCC7| 0
  (|buildtree_TCC4-1| |nil| 3888202986 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|qstack| TYPE-DECL NIL |ltedfapegproof| NIL)
    (|parsetree| TYPE-DECL NIL |ltedfapegproof| NIL)
    (|good_parsetree?| DEF-DECL "bool" |ltedfapegproof| NIL)
    (|qpush?| ADT-RECOGNIZER-DECL "[qstack -> boolean]" |ltedfapegproof| NIL)
    (|qpush| ADT-CONSTRUCTOR-DECL
     "[[non_terminal, uint32, qstack] -> (qpush?)]" |ltedfapegproof| NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|entry| SHARED-ADT-ACCESSOR-DECL "[parsetree -> defent]" |ltedfapegproof|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|good?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|span| ADT-ACCESSOR-DECL "[(good?) -> uint32]" |ltedfapeg| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|buildtree| SUBTYPE
    "ltedfapegproof.st`scaf(ltedfapegproof.i)(ltedfapegproof.n)" "defent")))
 (|buildtree_TCC8| 0
  (|buildtree_TCC10-1| |nil| 3888202986
   ("" (SKEEP* :PREDS? T)
    (("" (TYPEPRED "st`scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("" (EXPAND "good_tscaffold?")
            (("" (INST-CP - "i" "n")
              (("" (INST - "i" "n1") (("" (GRIND) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|sigma| DEF-DECL "nat" |ltedfapeg| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|plus_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|DfaParse| CONST-DECL "(goodDfaResult?(len, startpos))" |dfa| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|good_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|good_parsetree?| DEF-DECL "bool" |ltedfapegproof| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildtree| SUBTYPE
    "ltedfapegproof.two(ltedfapegproof.n, ltedfapegproof.st`scaf(ltedfapegproof.i)(ltedfapegproof.n), ltedfapegproof.E1, ltedfapegproof.E2)"
    "{P | booleans.AND(ltedfapegproof.good_parsetree?(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s)(ltedfapegproof.S, ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.P), ltedfapegproof.entry(ltedfapegproof.P) = ltedfapegproof.st`scaf(ltedfapegproof.i)(ltedfapegproof.n))}")))
 (|buildtree_TCC9| 0
  (|buildtree_TCC13-1| |nil| 3888202986
   ("" (SKEEP :PREDS? T)
    (("" (TYPEPRED "st`scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("" (EXPAND "good_tscaffold?")
            (("" (INST - "i" "n") (("" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|good_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildtree| SUBTYPE "ltedfapegproof.i"
    "{i: uint32 | booleans.AND(reals.<=(i, ltedfapegproof.len), ltedfapeg.good_or_fail?(ltedfapegproof.st`scaf(i)(ltedfapegproof.n1)))}")))
 (|buildtree_TCC10| 0
  (|buildtree_TCC23-1| |nil| 3888202986
   ("" (SKEEP :PREDS? T)
    (("" (TYPEPRED "st`scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("" (EXPAND "good_tscaffold?")
            (("" (INST?) (("" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|good_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildtree| TERMINATION
    "ltedfapegproof.buildtree(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s, ltedfapegproof.rootpos, ltedfapegproof.rootnt, ltedfapegproof.st, ltedfapegproof.qpush(ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.S), ltedfapegproof.n1, ltedfapegproof.i)"
    "NIL")))
 (|buildtree_TCC11| 0
  (|buildtree_TCC9-1| |nil| 3888202986
   ("" (SKEEP :PREDS? T)
    (("" (TYPEPRED "st`scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("" (EXPAND "good_tscaffold?")
            (("" (INST - "i" "n") (("" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|entry| SHARED-ADT-ACCESSOR-DECL "[parsetree -> defent]" |ltedfapegproof|
     NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|qpush| ADT-CONSTRUCTOR-DECL
     "[[non_terminal, uint32, qstack] -> (qpush?)]" |ltedfapegproof| NIL)
    (|qpush?| ADT-RECOGNIZER-DECL "[qstack -> boolean]" |ltedfapegproof| NIL)
    (|good_parsetree?| DEF-DECL "bool" |ltedfapegproof| NIL)
    (|parsetree| TYPE-DECL NIL |ltedfapegproof| NIL)
    (|qstack| TYPE-DECL NIL |ltedfapegproof| NIL)
    (|good_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildtree| SUBTYPE "ltedfapegproof.i"
    "{i: uint32 | booleans.AND(reals.<=(i, ltedfapegproof.len), ltedfapeg.good_or_fail?(ltedfapegproof.st`scaf(i)(ltedfapegproof.n3)))}")))
 (|buildtree_TCC12| 0
  (|buildtree_TCC29-1| |nil| 3888202986
   ("" (SKEEP :PREDS? T)
    (("" (TYPEPRED "st`scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("" (EXPAND "good_tscaffold?")
            (("" (INST - "i" "n") (("" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|entry| SHARED-ADT-ACCESSOR-DECL "[parsetree -> defent]" |ltedfapegproof|
     NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|qpush| ADT-CONSTRUCTOR-DECL
     "[[non_terminal, uint32, qstack] -> (qpush?)]" |ltedfapegproof| NIL)
    (|qpush?| ADT-RECOGNIZER-DECL "[qstack -> boolean]" |ltedfapegproof| NIL)
    (|good_parsetree?| DEF-DECL "bool" |ltedfapegproof| NIL)
    (|parsetree| TYPE-DECL NIL |ltedfapegproof| NIL)
    (|qstack| TYPE-DECL NIL |ltedfapegproof| NIL)
    (|good_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildtree| TERMINATION
    "ltedfapegproof.buildtree(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s, ltedfapegproof.rootpos, ltedfapegproof.rootnt, ltedfapegproof.st, ltedfapegproof.qpush(ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.S), ltedfapegproof.n3, ltedfapegproof.i)"
    "NIL")))
 (|buildtree_TCC13| 0
  (|buildtree_TCC17-1| |nil| 3888202986
   ("" (SKEEP :PREDS? T)
    (("" (TYPEPRED "st`scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("" (EXPAND "good_tscaffold?")
            (("" (INST - I N) (("" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|qstack| TYPE-DECL NIL |ltedfapegproof| NIL)
    (|parsetree| TYPE-DECL NIL |ltedfapegproof| NIL)
    (|good_parsetree?| DEF-DECL "bool" |ltedfapegproof| NIL)
    (|qpush?| ADT-RECOGNIZER-DECL "[qstack -> boolean]" |ltedfapegproof| NIL)
    (|qpush| ADT-CONSTRUCTOR-DECL
     "[[non_terminal, uint32, qstack] -> (qpush?)]" |ltedfapegproof| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|entry| SHARED-ADT-ACCESSOR-DECL "[parsetree -> defent]" |ltedfapegproof|
     NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildtree| SUBTYPE
    "ltedfapegproof.st`scaf(ltedfapegproof.i)(ltedfapegproof.n)" "defent")))
 (|buildtree_TCC14| 0
  (|buildtree_TCC31-1| |nil| 3888202986
   ("" (SKEEP :PREDS? T)
    (("" (TYPEPRED "st`scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("" (EXPAND "good_tscaffold?")
            (("" (INST - "i" "n") (("" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|good_parsetree?| DEF-DECL "bool" |ltedfapegproof| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|qstack| TYPE-DECL NIL |ltedfapegproof| NIL)
    (|parsetree| TYPE-DECL NIL |ltedfapegproof| NIL)
    (|qpush?| ADT-RECOGNIZER-DECL "[qstack -> boolean]" |ltedfapegproof| NIL)
    (|qpush| ADT-CONSTRUCTOR-DECL
     "[[non_terminal, uint32, qstack] -> (qpush?)]" |ltedfapegproof| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|entry| SHARED-ADT-ACCESSOR-DECL "[parsetree -> defent]" |ltedfapegproof|
     NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildtree| SUBTYPE
    "ltedfapegproof.two(ltedfapegproof.n, ltedfapegproof.st`scaf(ltedfapegproof.i)(ltedfapegproof.n), ltedfapegproof.E1, ltedfapegproof.E2)"
    "{P | booleans.AND(ltedfapegproof.good_parsetree?(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s)(ltedfapegproof.S, ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.P), ltedfapegproof.entry(ltedfapegproof.P) = ltedfapegproof.st`scaf(ltedfapegproof.i)(ltedfapegproof.n))}")))
 (|buildtree_TCC15| 0
  (|buildtree_TCC32-1| |nil| 3888202986
   ("" (SKEEP* :PREDS? T)
    (("" (TYPEPRED "st`scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (EXPAND "good_tscaffold?")
          (("" (FLATTEN)
            (("" (INST-CP - I N)
              (("" (INST - I N1) (("" (GRIND) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildtree| SUBTYPE
    "ltedfapegproof.st`scaf(ltedfapegproof.i)(ltedfapegproof.n)" "defent")))
 (|buildtree_TCC16| 0
  (|buildtree_TCC15-1| |nil| 3888202986
   ("" (SKEEP :PREDS? T)
    (("" (TYPEPRED "st`scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("" (EXPAND "good_tscaffold?")
            (("" (INST - I N) (("" (GRIND-WITH-EXT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_parsetree?| DEF-DECL "bool" |ltedfapegproof| NIL)
    (|good| ADT-CONSTRUCTOR-DECL "[[uint64, uint32] -> (good?)]" |ltedfapeg|
     NIL)
    (|sigma| DEF-DECL "nat" |ltedfapeg| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|ent_good_extensionality| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|good?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|dfaResult| TYPE-DECL NIL |dfa| NIL)
    (|success?| ADT-RECOGNIZER-DECL "[dfaResult -> boolean]" |dfa| NIL)
    (|span| ADT-ACCESSOR-DECL "[(success?) -> index]" |dfa| NIL)
    (|dfa| TYPE-EQ-DECL NIL |dfa| NIL) (|offset| CONST-DECL "uint8" |dfa| NIL)
    (|subrange| TYPE-EQ-DECL NIL |integers| NIL)
    (|goodDfaResult?| CONST-DECL "bool" |dfa| NIL)
    (|dfaparse| DEF-DECL "(goodDfaResult?(len, startpos))" |dfa| NIL)
    (|any?| ADT-RECOGNIZER-DECL "[prepeg -> boolean]" |ltedfapeg| NIL)
    (|dfa| ADT-ACCESSOR-DECL "[(any?) -> dfa]" |ltedfapeg| NIL)
    (|DfaParse| CONST-DECL "(goodDfaResult?(len, startpos))" |dfa| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|fail| ADT-CONSTRUCTOR-DECL "[uint64 -> (fail?)]" |ltedfapeg| NIL)
    (|ent_fail_extensionality| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|fail?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|good_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildtree| SUBTYPE
    "ltedfapegproof.zero(ltedfapegproof.n, ltedfapegproof.st`scaf(ltedfapegproof.i)(ltedfapegproof.n))"
    "{P | booleans.AND(ltedfapegproof.good_parsetree?(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s)(ltedfapegproof.S, ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.P), ltedfapegproof.entry(ltedfapegproof.P) = ltedfapegproof.st`scaf(ltedfapegproof.i)(ltedfapegproof.n))}")))
 (|no_push_endstate| 0
  (|no_push_endstate-1| |nil| 3888892615
   ("" (SKEEP :PREDS? T)
    (("" (TYPEPRED "st`depth")
      (("" (TYPEPRED "st")
        (("" (EXPAND "good_depth?")
          (("" (TYPEPRED "st`stack")
            (("" (GRIND)
              (("" (USE "sigma_pos")
                (("1" (GROUND)
                  (("1" (USE "nonempty_card[below(255)]")
                    (("1" (GRIND) NIL NIL)
                     ("2"
                      (INST + 255
                       "id[{i_2: below(255) | push?(st`scaf(i)(i_2))}]")
                      (("2" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (SKEEP*)
                  (("2"
                    (INST + 255
                     "id[{i_2: below(255) | push?(st`scaf(i!1)(i_2))}]")
                    (("2" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|endstate| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|pushcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|i| SKOLEM-CONST-DECL "upto(len)" |ltedfapegproof| NIL)
    (|nonempty_card| FORMULA-DECL NIL |finite_sets| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|st| SKOLEM-CONST-DECL "endstate(len, G, s, start, root)" |ltedfapegproof|
     NIL)
    (|root| SKOLEM-CONST-DECL "non_terminal" |ltedfapegproof| NIL)
    (|start| SKOLEM-CONST-DECL "upto(len)" |ltedfapegproof| NIL)
    (|s| SKOLEM-CONST-DECL "strings(len)" |ltedfapegproof| NIL)
    (G SKOLEM-CONST-DECL "lang_spec" |ltedfapegproof| NIL)
    (|len| SKOLEM-CONST-DECL "index" |ltedfapegproof| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|sigma_pos| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL))
   SHOSTAK))
 (|buildloop_TCC1| 0
  (|buildloop_TCC1-1| |nil| 3888290026 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) NIL
   (|buildloop| SUBTYPE "ltedfapegproof.len" "upto(ltedfapegproof.len)")))
 (|buildloop_TCC2| 0
  (|buildloop_TCC2-1| |nil| 3888290026
   ("" (SKEEP) (("" (USE "scafcount_max") (("" (ASSERT) NIL NIL)) NIL)) NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|scafcount_max| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildloop| SUBTYPE
    "(number_fields.-)(exp2.exp2(40), ltedfapeg.scafcount(ltedfapegproof.len, ltedfapegproof.A, ltedfapeg.loop?, ltedfapegproof.len))"
    "naturalnumber")))
 (|buildloop_TCC3| 0
  (|buildloop_TCC3-1| |nil| 3888290026 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|buildloop| SUBTYPE "ltedfapegproof.z`1" "upto(ltedfapegproof.z`1)")))
 (|buildloop_TCC4| 0
  (|buildloop_TCC4-1| |nil| 3888290026 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|buildloop| SUBTYPE "ltedfapegproof.len" "upto(ltedfapegproof.len)")))
 (|buildloop_TCC5| 0
  (|buildloop_TCC5-1| |nil| 3888290026
   ("" (GRIND)
    (("1" (TYPEPRED "st!1`scaf")
      (("1" (EXPAND "fine_scaffold?")
        (("1" (GROUND) (("1" (INST - I!1 N!1) (("1" (GROUND) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("2" (TYPEPRED "st!1`scaf")
      (("2" (EXPAND "fine_scaffold?")
        (("2" (GROUND) (("2" (INST - I!1 N!1) (("2" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("3" (TYPEPRED "st!1`scaf")
      (("3" (EXPAND "fine_scaffold?")
        (("3" (GROUND) (("3" (INST - I!1 N!1) (("3" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("4" (TYPEPRED "st!1`scaf")
      (("4" (EXPAND "fine_scaffold?")
        (("4" (GROUND) (("4" (INST - I!1 N!1) (("4" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL))
   NIL (|buildloop| SUBTYPE "ltedfapeg.loop" "defent")))
 (|buildloop_TCC6| 0
  (|buildloop_TCC7-1| |nil| 3888290026
   ("" (GRIND)
    (("1" (TYPEPRED "st!1`scaf")
      (("1" (EXPAND "fine_scaffold?")
        (("1" (GROUND)
          (("1" (INST - "i!1" "n!1") (("1" (GROUND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL)
     ("2" (TYPEPRED "st!1`scaf")
      (("2" (EXPAND "fine_scaffold?")
        (("2" (GROUND) (("2" (INST - "i!1" "n!1") (("2" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("3" (TYPEPRED "st!1`scaf")
      (("3" (EXPAND "fine_scaffold?")
        (("3" (GROUND) (("3" (INST - "i!1" "n!1") (("3" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL)
     ("4" (TYPEPRED "st!1`scaf")
      (("4" (EXPAND "fine_scaffold?")
        (("4" (GROUND) (("4" (INST - "i!1" "n!1") (("4" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|DfaParse| CONST-DECL "(goodDfaResult?(len, startpos))" |dfa| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|endstate| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|qstack| TYPE-DECL NIL |ltedfapegproof| NIL)
    (|good_qstack?| DEF-DECL "bool" |ltedfapegproof| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|loop| ADT-CONSTRUCTOR-DECL "(loop?)" |ltedfapeg| NIL)
    (|inqstack| DEF-DECL "bool" |ltedfapegproof| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|good_parsetree?| DEF-DECL "bool" |ltedfapegproof| NIL))
   NIL
   (|buildloop| SUBTYPE "ltedfapegproof.zero(ltedfapegproof.n, ltedfapeg.loop)"
    "{P | booleans.AND(ltedfapegproof.good_parsetree?(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s)(ltedfapegproof.S, ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.P), ltedfapeg.loop?(ltedfapegproof.entry(ltedfapegproof.P)))}")))
 (|buildloop_TCC7| 0
  (|buildloop_TCC8-1| |nil| 3888290026 ("" (SUBTYPE-TCC) NIL NIL)
   ((|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL (|buildloop| SUBTYPE "ltedfapeg.loop" "defent")))
 (|buildloop_TCC8| 0
  (|buildloop_TCC9-1| |nil| 3888290026 ("" (SUBTYPE-TCC) NIL NIL)
   ((|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildloop| SUBTYPE "ltedfapeg.loop"
    "(ltedfapeg.nice_entry?(ltedfapegproof.len, ltedfapegproof.i))")))
 (|buildloop_TCC9| 0
  (|buildloop_TCC12-1| |nil| 3888290026
   ("" (SKEEP* :PREDS? T) (("" (LAZY-GRIND) NIL NIL)) NIL)
   ((|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|endstate| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|inqstack| DEF-DECL "bool" |ltedfapegproof| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|good_qstack?| DEF-DECL "bool" |ltedfapegproof| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildloop| SUBTYPE
    "ltedfapegproof.qpush(ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.S)"
    "{S: ltedfapegproof.qstack | booleans.AND(ltedfapegproof.good_qstack?(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s, ltedfapegproof.st`scaf)(S), FORALL (i_1: naturalnumbers.upto(ltedfapegproof.len)), (n_1: non_terminal): booleans.IFF(ltedfapegproof.A WITH [(ltedfapegproof.i)(ltedfapegproof.n) := ltedfapeg.loop](i_1)(n_1) = ltedfapeg.loop, ltedfapegproof.inqstack(n_1, i_1, S)))}")))
 (|buildloop_TCC10| 0
  (|buildloop_TCC13-1| |nil| 3888290026
   ("" (GRIND :IF-MATCH NIL)
    (("" (TYPEPRED "st!1`scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("" (INST - I!1 N!1)
            (("" (GRIND) (("" (USE NO_PUSH_ENDSTATE) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|endstate| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|qstack| TYPE-DECL NIL |ltedfapegproof| NIL)
    (|good_qstack?| DEF-DECL "bool" |ltedfapegproof| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|loop| ADT-CONSTRUCTOR-DECL "(loop?)" |ltedfapeg| NIL)
    (|inqstack| DEF-DECL "bool" |ltedfapegproof| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildloop| SUBTYPE "ltedfapegproof.i"
    "{i: uint32 | booleans.AND(reals.<=(i, ltedfapegproof.len), ltedfapeg.loop?(ltedfapegproof.st`scaf(i)(ltedfapegproof.n1)))}")))
 (|buildloop_TCC11| 0
  (|buildloop_TCC14-1| |nil| 3888290026
   ("" (SKEEP* :PREDS? T)
    (("" (REWRITE "scafcount_update") (("" (GRIND :EXCLUDE "exp2") NIL NIL))
      NIL))
    NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|scafcount_update| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|endstate| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop| ADT-CONSTRUCTOR-DECL "(loop?)" |ltedfapeg| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildloop| TERMINATION
    "ltedfapegproof.buildloop(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s, ltedfapegproof.rootpos, ltedfapegproof.rootnt, ltedfapegproof.st, ltedfapegproof.A WITH [(ltedfapegproof.i)(ltedfapegproof.n) := ltedfapeg.loop], ltedfapegproof.qpush(ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.S), ltedfapegproof.n1, ltedfapegproof.i)"
    "NIL")))
 (|buildloop_TCC12| 0
  (|buildloop_TCC10-1| |nil| 3888290026
   ("" (SKEEP* :PREDS? T)
    ((""
      (TYPEPRED
       "v(len, G, s, rootpos, rootnt, st, A WITH [(i)(n) := loop], qpush(n, i, S), n1, i)")
      (("1" (GRIND) NIL NIL)
       ("2" (REWRITE "scafcount_update")
        (("2" (GRIND :EXCLUDE "exp2") NIL NIL)) NIL)
       ("3" (PROPAX) NIL NIL)
       ("4" (TYPEPRED "st`scaf")
        (("4" (EXPAND "fine_scaffold?")
          (("4" (GROUND)
            (("1" (INST - I N) (("1" (LAZY-GRIND) NIL NIL)) NIL)
             ("2" (LAZY-GRIND) NIL NIL))
            NIL))
          NIL))
        NIL)
       ("5" (GRIND) NIL NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|qstack| TYPE-DECL NIL |ltedfapegproof| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|parsetree| TYPE-DECL NIL |ltedfapegproof| NIL)
    (|good_parsetree?| DEF-DECL "bool" |ltedfapegproof| NIL)
    (|qpush?| ADT-RECOGNIZER-DECL "[qstack -> boolean]" |ltedfapegproof| NIL)
    (|qpush| ADT-CONSTRUCTOR-DECL
     "[[non_terminal, uint32, qstack] -> (qpush?)]" |ltedfapegproof| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|endstate| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_qstack?| DEF-DECL "bool" |ltedfapegproof| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|loop| ADT-CONSTRUCTOR-DECL "(loop?)" |ltedfapeg| NIL)
    (|inqstack| DEF-DECL "bool" |ltedfapegproof| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|entry| SHARED-ADT-ACCESSOR-DECL "[parsetree -> defent]" |ltedfapegproof|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|scafcount_update| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildloop| SUBTYPE
    "ltedfapegproof.one(ltedfapegproof.n, ltedfapeg.loop, ltedfapegproof.buildloop(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s, ltedfapegproof.rootpos, ltedfapegproof.rootnt, ltedfapegproof.st, ltedfapegproof.A WITH [(ltedfapegproof.i)(ltedfapegproof.n) := ltedfapeg.loop], ltedfapegproof.qpush(ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.S), ltedfapegproof.n1, ltedfapegproof.i))"
    "{P | booleans.AND(ltedfapegproof.good_parsetree?(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s)(ltedfapegproof.S, ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.P), ltedfapeg.loop?(ltedfapegproof.entry(ltedfapegproof.P)))}")))
 (|buildloop_TCC13| 0
  (|buildloop_TCC11-1| |nil| 3888290026 ("" (SUBTYPE-TCC) NIL NIL)
   ((|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL (|buildloop| SUBTYPE "ltedfapeg.loop" "defent")))
 (|buildloop_TCC14| 0
  (|buildloop_TCC22-1| |nil| 3888290026
   ("" (GRIND)
    (("" (TYPEPRED "st!1`scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("" (INST - I!1 N!1)
            (("" (GRIND) (("" (USE NO_PUSH_ENDSTATE) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|endstate| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|qstack| TYPE-DECL NIL |ltedfapegproof| NIL)
    (|good_qstack?| DEF-DECL "bool" |ltedfapegproof| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|loop| ADT-CONSTRUCTOR-DECL "(loop?)" |ltedfapeg| NIL)
    (|inqstack| DEF-DECL "bool" |ltedfapegproof| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildloop| SUBTYPE "ltedfapegproof.i"
    "{i: uint32 | booleans.AND(reals.<=(i, ltedfapegproof.len), ltedfapeg.good_or_fail?(ltedfapegproof.st`scaf(i)(ltedfapegproof.n1)))}")))
 (|buildloop_TCC15| 0
  (|buildloop_TCC30-1| |nil| 3888290026
   ("" (SKEEP* :PREDS? T) (("" (LAZY-GRIND) NIL NIL)) NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildloop| SUBTYPE "ltedfapeg.loop"
    "(ltedfapeg.nice_entry?(ltedfapegproof.len, ltedfapegproof.i))")))
 (|buildloop_TCC16| 0
  (|buildloop_TCC21-1| |nil| 3888290026
   ("" (SKEEP* :PREDS? T) (("" (LAZY-GRIND) NIL NIL)) NIL)
   ((|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|endstate| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|inqstack| DEF-DECL "bool" |ltedfapegproof| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|good_qstack?| DEF-DECL "bool" |ltedfapegproof| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildloop| SUBTYPE
    "ltedfapegproof.qpush(ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.S)"
    "{S: ltedfapegproof.qstack | booleans.AND(ltedfapegproof.good_qstack?(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s, ltedfapegproof.st`scaf)(S), FORALL (i_1: naturalnumbers.upto(ltedfapegproof.len)), (n_1: non_terminal): booleans.IFF(ltedfapegproof.A WITH [(ltedfapegproof.i)(ltedfapegproof.n) := ltedfapeg.loop](i_1)(n_1) = ltedfapeg.loop, ltedfapegproof.inqstack(n_1, i_1, S)))}")))
 (|buildloop_TCC17| 0
  (|buildloop_TCC15-1| |nil| 3888290026
   ("" (SKEEP* :PREDS? T)
    (("" (TYPEPRED "st`scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (EXPAND "good_tscaffold?")
          (("" (FLATTEN)
            (("" (INST - "i" "n")
              (("" (TYPEPRED "st`scaf(i)(n1)")
                (("" (GRIND)
                  (("1" (USE "no_push_endstate") NIL NIL)
                   ("2" (USE "no_push_endstate") NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|endstate| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|no_push_endstate| FORMULA-DECL NIL |ltedfapegproof| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|good?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|span| ADT-ACCESSOR-DECL "[(good?) -> uint32]" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildloop| SUBTYPE
    "((number_fields.+)(ltedfapegproof.i, ltedfapeg.span(ltedfapegproof.st`scaf(ltedfapegproof.i)(ltedfapegproof.n1))))"
    "{i: uint32 | booleans.AND(reals.<=(i, ltedfapegproof.len), ltedfapeg.loop?(ltedfapegproof.st`scaf(i)(ltedfapegproof.n2)))}")))
 (|buildloop_TCC18| 0
  (|buildloop_TCC23-1| |nil| 3888290026
   ("" (SKEEP* :PREDS? T)
    (("" (REWRITE "scafcount_update") (("" (GRIND :EXCLUDE "exp2") NIL NIL))
      NIL))
    NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|scafcount_update| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|endstate| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop| ADT-CONSTRUCTOR-DECL "(loop?)" |ltedfapeg| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildloop| TERMINATION
    "ltedfapegproof.buildloop(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s, ltedfapegproof.rootpos, ltedfapegproof.rootnt, ltedfapegproof.st, ltedfapegproof.A WITH [(ltedfapegproof.i)(ltedfapegproof.n) := ltedfapeg.loop], ltedfapegproof.qpush(ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.S), ltedfapegproof.n2, ((number_fields.+)(ltedfapegproof.i, ltedfapeg.span(ltedfapegproof.st`scaf(ltedfapegproof.i)(ltedfapegproof.n1)))))"
    "NIL")))
 (|buildloop_TCC19| 0
  (|buildloop_TCC16-1| |nil| 3888290026
   ("" (SKEEP* :PREDS? T)
    ((""
      (TYPEPRED
       "v(len, G, s, rootpos, rootnt, st, A WITH [(i)(n) := loop], qpush(n, i, S), n2, (i + span(st`scaf(i)(n1))))")
      (("1" (GRIND :IF-MATCH NIL)
        (("1" (TYPEPRED "st`scaf(i)(n1)") (("1" (GRIND) NIL NIL)) NIL)) NIL)
       ("2" (REWRITE "scafcount_update")
        (("2" (HIDE 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)
       ("3" (HIDE 4)
        (("3" (TYPEPRED "st`scaf(i)(n1)")
          (("3" (TYPEPRED "st`scaf")
            (("3" (EXPAND "fine_scaffold?")
              (("3" (FLATTEN)
                (("3" (EXPAND "good_tscaffold?")
                  (("3" (INST - "i" "n")
                    (("3" (GRIND)
                      (("1" (USE "no_push_endstate") NIL NIL)
                       ("2" (USE "no_push_endstate") NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("4" (PROPAX) NIL NIL) ("5" (HIDE 4) (("5" (LAZY-GRIND) NIL NIL)) NIL)
       ("6" (HIDE 4) (("6" (GRIND) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|qstack| TYPE-DECL NIL |ltedfapegproof| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|parsetree| TYPE-DECL NIL |ltedfapegproof| NIL)
    (|good_parsetree?| DEF-DECL "bool" |ltedfapegproof| NIL)
    (|qpush?| ADT-RECOGNIZER-DECL "[qstack -> boolean]" |ltedfapegproof| NIL)
    (|qpush| ADT-CONSTRUCTOR-DECL
     "[[non_terminal, uint32, qstack] -> (qpush?)]" |ltedfapegproof| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|endstate| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_qstack?| DEF-DECL "bool" |ltedfapegproof| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|loop| ADT-CONSTRUCTOR-DECL "(loop?)" |ltedfapeg| NIL)
    (|inqstack| DEF-DECL "bool" |ltedfapegproof| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|good?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|span| ADT-ACCESSOR-DECL "[(good?) -> uint32]" |ltedfapeg| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|entry| SHARED-ADT-ACCESSOR-DECL "[parsetree -> defent]" |ltedfapegproof|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|scafcount_update| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|no_push_endstate| FORMULA-DECL NIL |ltedfapegproof| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildloop| SUBTYPE
    "ltedfapegproof.two(ltedfapegproof.n, ltedfapeg.loop, ltedfapegproof.buildtree(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s, ltedfapegproof.rootpos, ltedfapegproof.rootnt, ltedfapegproof.st, ltedfapegproof.qpush(ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.S), ltedfapegproof.n1, ltedfapegproof.i), ltedfapegproof.buildloop(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s, ltedfapegproof.rootpos, ltedfapegproof.rootnt, ltedfapegproof.st, ltedfapegproof.A WITH [(ltedfapegproof.i)(ltedfapegproof.n) := ltedfapeg.loop], ltedfapegproof.qpush(ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.S), ltedfapegproof.n2, ((number_fields.+)(ltedfapegproof.i, ltedfapeg.span(ltedfapegproof.st`scaf(ltedfapegproof.i)(ltedfapegproof.n1))))))"
    "{P | booleans.AND(ltedfapegproof.good_parsetree?(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s)(ltedfapegproof.S, ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.P), ltedfapeg.loop?(ltedfapegproof.entry(ltedfapegproof.P)))}")))
 (|buildloop_TCC20| 0
  (|buildloop_TCC35-1| |nil| 3888290026
   ("" (SKEEP* :PREDS? T)
    (("" (TYPEPRED "st`scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("" (EXPAND "good_tscaffold?")
            (("" (INST - I N)
              (("" (GRIND)
                (("1" (USE NO_PUSH_ENDSTATE) NIL NIL)
                 ("2" (USE NO_PUSH_ENDSTATE) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|endstate| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL (|buildloop| SUBTYPE "ltedfapeg.loop" "defent")))
 (|buildloop_TCC21| 0
  (|buildloop_TCC34-1| |nil| 3888290026
   ("" (SKEEP* :PREDS? T)
    (("" (TYPEPRED "st`scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("" (EXPAND "good_tscaffold?")
            (("" (INST - "i" "n")
              (("" (GRIND)
                (("1" (USE "no_push_endstate") NIL NIL)
                 ("2" (USE "no_push_endstate") NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|endstate| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|no_push_endstate| FORMULA-DECL NIL |ltedfapegproof| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildloop| SUBTYPE "ltedfapegproof.i"
    "{i: uint32 | booleans.AND(reals.<=(i, ltedfapegproof.len), ltedfapeg.good_or_fail?(ltedfapegproof.st`scaf(i)(ltedfapegproof.n1)))}")))
 (|buildloop_TCC22| 0
  (|buildloop_TCC17-1| |nil| 3888290026
   ("" (SKEEP* :PREDS? T)
    (("" (TYPEPRED "st`scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (EXPAND "good_tscaffold?")
          (("" (FLATTEN)
            (("" (INST - I N)
              (("" (TYPEPRED "st`scaf(i)(n1)")
                (("" (GRIND)
                  (("1" (USE "no_push_endstate") NIL NIL)
                   ("2" (USE "no_push_endstate") NIL NIL)
                   ("3" (USE "no_push_endstate") NIL NIL)
                   ("4" (USE "no_push_endstate") NIL NIL)
                   ("5" (USE "no_push_endstate") NIL NIL)
                   ("6" (USE "no_push_endstate") NIL NIL)
                   ("7" (USE "no_push_endstate") NIL NIL)
                   ("8" (USE "no_push_endstate") NIL NIL)
                   ("9" (USE "no_push_endstate") NIL NIL)
                   ("10" (USE "no_push_endstate") NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|endstate| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildloop| SUBTYPE "ltedfapeg.loop"
    "(ltedfapeg.nice_entry?(ltedfapegproof.len, ltedfapegproof.i))")))
 (|buildloop_TCC23| 0
  (|buildloop_TCC43-1| |nil| 3888290026
   ("" (SKEEP* :PREDS? T) (("" (LAZY-GRIND) NIL NIL)) NIL)
   ((|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|endstate| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|inqstack| DEF-DECL "bool" |ltedfapegproof| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|good_qstack?| DEF-DECL "bool" |ltedfapegproof| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildloop| SUBTYPE
    "ltedfapegproof.qpush(ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.S)"
    "{S: ltedfapegproof.qstack | booleans.AND(ltedfapegproof.good_qstack?(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s, ltedfapegproof.st`scaf)(S), FORALL (i_1: naturalnumbers.upto(ltedfapegproof.len)), (n_1: non_terminal): booleans.IFF(ltedfapegproof.A WITH [(ltedfapegproof.i)(ltedfapegproof.n) := ltedfapeg.loop](i_1)(n_1) = ltedfapeg.loop, ltedfapegproof.inqstack(n_1, i_1, S)))}")))
 (|buildloop_TCC24| 0
  (|buildloop_TCC31-1| |nil| 3888290026
   ("" (SKEEP* :PREDS? T)
    (("" (TYPEPRED "st`scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (EXPAND "good_tscaffold?")
          (("" (FLATTEN)
            (("" (INST - "i" "n")
              (("" (TYPEPRED "st`scaf(i)(n1)")
                (("" (GRIND)
                  (("1" (USE "no_push_endstate") NIL NIL)
                   ("2" (USE "no_push_endstate") NIL NIL)
                   ("3" (USE "no_push_endstate") NIL NIL)
                   ("4" (USE "no_push_endstate") NIL NIL)
                   ("5" (USE "no_push_endstate") NIL NIL)
                   ("6" (USE "no_push_endstate") NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|endstate| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|no_push_endstate| FORMULA-DECL NIL |ltedfapegproof| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildloop| SUBTYPE "ltedfapegproof.i"
    "{i: uint32 | booleans.AND(reals.<=(i, ltedfapegproof.len), ltedfapeg.loop?(ltedfapegproof.st`scaf(i)(ltedfapegproof.n3)))}")))
 (|buildloop_TCC25| 0
  (|buildloop_TCC32-1| |nil| 3888290026
   ("" (SKEEP* :PREDS? T)
    (("" (REWRITE "scafcount_update") (("" (GRIND :EXCLUDE "exp2") NIL NIL))
      NIL))
    NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|scafcount_update| FORMULA-DECL NIL |ltedfapeg| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|endstate| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop| ADT-CONSTRUCTOR-DECL "(loop?)" |ltedfapeg| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildloop| TERMINATION
    "ltedfapegproof.buildloop(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s, ltedfapegproof.rootpos, ltedfapegproof.rootnt, ltedfapegproof.st, ltedfapegproof.A WITH [(ltedfapegproof.i)(ltedfapegproof.n) := ltedfapeg.loop], ltedfapegproof.qpush(ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.S), ltedfapegproof.n3, ltedfapegproof.i)"
    "NIL")))
 (|buildloop_TCC26| 0
  (|buildloop_TCC18-1| |nil| 3888290026
   ("" (SKEEP* :PREDS? T)
    (("" (GRIND :IF-MATCH NIL)
      (("" (TYPEPRED "st`scaf(i)(n1)")
        (("" (GRIND)
          (("1" (USE "no_push_endstate") NIL NIL)
           ("2" (TYPEPRED "st`scaf")
            (("2" (EXPAND "fine_scaffold?")
              (("2" (GROUND)
                (("2" (INST - "i" "n") (("2" (GRIND) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|good_parsetree?| DEF-DECL "bool" |ltedfapegproof| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|no_push_endstate| FORMULA-DECL NIL |ltedfapegproof| NIL)
    (|loop_or_push?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|endstate| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildloop| SUBTYPE
    "ltedfapegproof.two(ltedfapegproof.n, ltedfapeg.loop, ltedfapegproof.buildtree(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s, ltedfapegproof.rootpos, ltedfapegproof.rootnt, ltedfapegproof.st, ltedfapegproof.qpush(ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.S), ltedfapegproof.n1, ltedfapegproof.i), ltedfapegproof.buildloop(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s, ltedfapegproof.rootpos, ltedfapegproof.rootnt, ltedfapegproof.st, ltedfapegproof.A WITH [(ltedfapegproof.i)(ltedfapegproof.n) := ltedfapeg.loop], ltedfapegproof.qpush(ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.S), ltedfapegproof.n3, ltedfapegproof.i))"
    "{P | booleans.AND(ltedfapegproof.good_parsetree?(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s)(ltedfapegproof.S, ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.P), ltedfapeg.loop?(ltedfapegproof.entry(ltedfapegproof.P)))}")))
 (|buildloop_TCC27| 0
  (|buildloop_TCC65-1| |nil| 3888290026
   ("" (SKEEP* :PREDS? T)
    (("" (TYPEPRED "st`scaf")
      (("" (GRIND :IF-MATCH NIL)
        (("1" (INST - "i" "n") (("1" (GRIND) NIL NIL)) NIL)
         ("2" (INST - "i" "n") (("2" (GRIND) NIL NIL)) NIL)
         ("3" (INST - "i" "n") (("3" (GRIND) NIL NIL)) NIL)
         ("4" (INST - "i" "n") (("4" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|endstate| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildloop| CASES "ltedfapegproof.G(ltedfapegproof.n)" "prepeg: DATATYPE
 BEGIN
  epsilon: epsilon?
  failure: failure?
  any(dfa: dfa): any?
  terminal(a: byte): terminal?
  lte(fst: non_terminal, lthen: non_terminal, lelse: non_terminal): lte?
 END prepeg")))
 (|buildproof_TCC1| 0
  (|buildproof_TCC1-1| |nil| 3893983722 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|good_good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|endstate| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|buildproof| SUBTYPE "ltedfapegproof.A" "scaffold(ltedfapegproof.len)")))
 (|buildproof_TCC2| 0
  (|buildproof_TCC2-1| |nil| 3893983722 ("" (GRIND) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|inqstack| DEF-DECL "bool" |ltedfapegproof| NIL)
    (|good_qstack?| DEF-DECL "bool" |ltedfapegproof| NIL))
   NIL
   (|buildproof| SUBTYPE "ltedfapegproof.qempty"
    "{S: ltedfapegproof.qstack | booleans.AND(ltedfapegproof.good_qstack?(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s, ltedfapegproof.st`scaf)(S), FORALL (i: naturalnumbers.upto(ltedfapegproof.len)), (n: non_terminal): (booleans.NOT)(ltedfapegproof.inqstack(n, i, S)))}")))
 (|buildproof_TCC3| 0
  (|buildproof_TCC3-1| |nil| 3893983722 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|endstate| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|buildproof| SUBTYPE "ltedfapegproof.i"
    "{i: uint32 | booleans.AND(reals.<=(i, ltedfapegproof.len), ltedfapeg.loop?(ltedfapegproof.st`scaf(i)(ltedfapegproof.n)))}")))
 (|buildproof_TCC4| 0
  (|buildproof_TCC4-1| |nil| 3893983722
   ("" (SKEEP*) (("" (GROUND) NIL NIL)) NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildproof| SUBTYPE
    "ltedfapegproof.buildloop(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s, ltedfapegproof.rootpos, ltedfapegproof.rootnt, ltedfapegproof.st, ltedfapegproof.A, ltedfapegproof.qempty, ltedfapegproof.n, ltedfapegproof.i)"
    "{P | booleans.AND(ltedfapegproof.good_parsetree?(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s)(ltedfapegproof.qempty, ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.P), ltedfapegproof.entry(ltedfapegproof.P) = ltedfapegproof.st`scaf(ltedfapegproof.i)(ltedfapegproof.n))}")))
 (|buildproof_TCC5| 0
  (|buildproof_TCC5-1| |nil| 3893983722 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|endstate| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|empty?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|buildproof| SUBTYPE "ltedfapegproof.i"
    "{i: uint32 | booleans.AND(reals.<=(i, ltedfapegproof.len), ltedfapeg.good_or_fail?(ltedfapegproof.st`scaf(i)(ltedfapegproof.n)))}")))
 (|allgoodentries?_TCC1| 0
  (|allgoodentries?_TCC1-1| |nil| 3909630056 ("" (TERMINATION-TCC) NIL NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[parsetree])" |ltedfapegproof| NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|allgoodentries?| TERMINATION
    "ltedfapegproof.allgoodentries?(ltedfapegproof.subone)" "NIL")))
 (|allgoodentries?_TCC2| 0
  (|allgoodentries?_TCC2-1| |nil| 3909630056 ("" (TERMINATION-TCC) NIL NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[parsetree])" |ltedfapegproof| NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|allgoodentries?| TERMINATION
    "ltedfapegproof.allgoodentries?(ltedfapegproof.subone)" "NIL")))
 (|allgoodentries?_TCC3| 0
  (|allgoodentries?_TCC3-1| |nil| 3909630056 ("" (TERMINATION-TCC) NIL NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[parsetree])" |ltedfapegproof| NIL)
    (|defent| TYPE-EQ-DECL NIL |ltedfapegproof| NIL)
    (|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|allgoodentries?| TERMINATION
    "ltedfapegproof.allgoodentries?(ltedfapegproof.subtwo)" "NIL")))
 (|buildast_TCC1| 0
  (|buildast_TCC3-1| |nil| 3909630056 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) NIL
   (|buildast| SUBTYPE
    "ltedfapegproof.st`scaf(ltedfapegproof.i)(ltedfapegproof.n)"
    "{x: ltedfapeg.ent | booleans.OR(ltedfapeg.fail?(x), ltedfapeg.good?(x))}")))
 (|buildast_TCC2| 0
  (|buildast_TCC2-1| |nil| 3909669627 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)) NIL
   (|buildast| SUBTYPE
    "ltedfapegproof.z`6`scaf(ltedfapegproof.z`9)(ltedfapegproof.z`8)"
    "{x: ltedfapeg.ent | booleans.OR(ltedfapeg.fail?(x), ltedfapeg.good?(x))}")))
 (|buildast_TCC3| 0
  (|buildast_TCC5-1| |nil| 3909630056 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|good?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|buildast| SUBTYPE "ltedfapegproof.i"
    "{i: uint32 | booleans.AND(reals.<=(i, ltedfapegproof.len), ltedfapeg.good?(ltedfapegproof.st`scaf(i)(ltedfapegproof.n1)))}")))
 (|buildast_TCC4| 0
  (|buildast_TCC4-1| |nil| 3909669627
   ("" (SKEEP :PREDS? T)
    (("" (TYPEPRED "st`scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("" (EXPAND "good_tscaffold?")
            (("" (INST - "i" "n") (("" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|good?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildast| TERMINATION
    "ltedfapegproof.buildast(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s, ltedfapegproof.rootpos, ltedfapegproof.rootnt, ltedfapegproof.st, ltedfapegproof.qpush(ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.S), ltedfapegproof.n1, ltedfapegproof.i)"
    "NIL")))
 (|buildast_TCC5| 0
  (|buildast_TCC1-1| |nil| 3909630056
   ("" (SKEEP* :PREDS? T)
    (("" (TYPEPRED "st`scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (EXPAND "good_tscaffold?")
          (("" (FLATTEN)
            (("" (INST-CP - "i" "n")
              (("" (INST - "i" "n1") (("" (GRIND) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|good?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildast| SUBTYPE
    "(number_fields.+)(ltedfapegproof.i, ltedfapeg.span(ltedfapegproof.st`scaf(ltedfapegproof.i)(ltedfapegproof.n1)))"
    "{i: uint32 | booleans.AND(reals.<=(i, ltedfapegproof.len), ltedfapeg.good?(ltedfapegproof.st`scaf(i)(ltedfapegproof.n2)))}")))
 (|buildast_TCC6| 0
  (|buildast_TCC2-1| |nil| 3909630056
   ("" (SKEEP :PREDS? T)
    (("" (TYPEPRED "st`scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("" (EXPAND "good_tscaffold?")
            (("" (INST - "i" "n") (("" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|good?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|parsetree| TYPE-DECL NIL |ltedfapegproof| NIL)
    (|allgoodentries?| DEF-DECL "bool" |ltedfapegproof| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildast| TERMINATION
    "ltedfapegproof.buildast(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s, ltedfapegproof.rootpos, ltedfapegproof.rootnt, ltedfapegproof.st, ltedfapegproof.qpush(ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.S), ltedfapegproof.n2, (number_fields.+)(ltedfapegproof.i, ltedfapeg.span(ltedfapegproof.st`scaf(ltedfapegproof.i)(ltedfapegproof.n1))))"
    "NIL")))
 (|buildast_TCC7| 0
  (|buildast_TCC7-1| |nil| 3909669627 ("" (SUBTYPE-TCC) NIL NIL)
   ((|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildast| SUBTYPE
    "ltedfapegproof.st`scaf(ltedfapegproof.i)(ltedfapegproof.n)" "defent")))
 (|buildast_TCC8| 0
  (|buildast_TCC4-1| |nil| 3909630056
   ("" (SKEEP* :PREDS? T)
    (("" (EXPAND "allgoodentries?" +)
      (("" (TYPEPRED "st`scaf")
        (("" (EXPAND "fine_scaffold?")
          (("" (GROUND)
            (("" (EXPAND "good_tscaffold?")
              (("" (INST - I N)
                (("" (GRIND)
                  (("1" (POSTPONE) NIL NIL) ("2" (POSTPONE) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|allgoodentries?| DEF-DECL "bool" |ltedfapegproof| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildast| SUBTYPE
    "ltedfapegproof.two(ltedfapegproof.n, ltedfapegproof.st`scaf(ltedfapegproof.i)(ltedfapegproof.n), ltedfapegproof.E1, ltedfapegproof.E2)"
    "(ltedfapegproof.allgoodentries?)")))
 (|buildast_TCC9| 0
  (|buildast_TCC9-1| |nil| 3909669627
   ("" (SKEEP :PREDS? T)
    (("" (TYPEPRED "st`scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("" (EXPAND "good_tscaffold?")
            (("" (INST - "i" "n") (("" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|good?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildast| SUBTYPE "ltedfapegproof.i"
    "{i: uint32 | booleans.AND(reals.<=(i, ltedfapegproof.len), ltedfapeg.good?(ltedfapegproof.st`scaf(i)(ltedfapegproof.n3)))}")))
 (|buildast_TCC10| 0
  (|buildast_TCC6-1| |nil| 3909630056
   ("" (SKEEP :PREDS? T)
    (("" (TYPEPRED "st`scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("" (EXPAND "good_tscaffold?")
            (("" (INST - I N) (("" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|gfcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|scafcount| CONST-DECL "uint64" |ltedfapeg| NIL)
    (|count| CONST-DECL "upto(len)" |arrayCount| NIL)
    (|good_or_fail?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_good?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|plus_u32_u32| APPLICATION-JUDGEMENT "uint64" |integertypes| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs|
     NIL)
    (|nonneg_rat_max| APPLICATION-JUDGEMENT
     "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|good?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL))
   NIL
   (|buildast| TERMINATION
    "ltedfapegproof.buildast(ltedfapegproof.len, ltedfapegproof.G, ltedfapegproof.s, ltedfapegproof.rootpos, ltedfapegproof.rootnt, ltedfapegproof.st, ltedfapegproof.qpush(ltedfapegproof.n, ltedfapegproof.i, ltedfapegproof.S), ltedfapegproof.n3, ltedfapegproof.i)"
    "NIL")))
 (|buildast_TCC11| 0
  (|buildast_TCC11-1| |nil| 3909669627 ("" (SUBTYPE-TCC) NIL NIL)
   ((|defent?| CONST-DECL "bool" |ltedfapegproof| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildast| SUBTYPE
    "ltedfapegproof.st`scaf(ltedfapegproof.i)(ltedfapegproof.n)" "defent")))
 (|buildast_TCC12| 0
  (|buildast_TCC7-1| |nil| 3909630056
   ("" (SKEEP :PREDS? T)
    (("" (TYPEPRED "st`scaf")
      (("" (EXPAND "fine_scaffold?")
        (("" (GROUND)
          (("" (EXPAND "good_tscaffold?")
            (("" (INST - I N) (("" (GRIND-WITH-EXT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|byte| TYPE-EQ-DECL NIL |dfa| NIL)
    (|num_non_terminals| CONST-DECL "byte" |ltedfapeg| NIL)
    (|non_terminal| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|prepeg| TYPE-DECL NIL |ltedfapeg| NIL)
    (|lang_spec| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|strings| TYPE-EQ-DECL NIL |dfa| NIL) (<= CONST-DECL "bool" |reals| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ent| TYPE-DECL NIL |ltedfapeg| NIL)
    (|nice_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|scaffold| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|fine_scaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|good_depth?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_push_entry?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (|fine_stack?| DEF-DECL "bool" |ltedfapeg| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|push?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nt| ADT-ACCESSOR-DECL "[(push?) -> uint8]" |ltedfapeg| NIL)
    (|loop_ready?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|pos| ADT-ACCESSOR-DECL "[(push?) -> uint32]" |ltedfapeg| NIL)
    (|loop?| ADT-RECOGNIZER-DECL "[ent -> boolean]" |ltedfapeg| NIL)
    (|state| TYPE-EQ-DECL NIL |ltedfapeg| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|allgoodentries?| DEF-DECL "bool" |ltedfapegproof| NIL)
    (|good_root?| CONST-DECL "bool" |ltedfapeg| NIL)
    (|good_tscaffold?| CONST-DECL "bool" |ltedfapeg| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|buildast| SUBTYPE
    "ltedfapegproof.zero(ltedfapegproof.n, ltedfapegproof.st`scaf(ltedfapegproof.i)(ltedfapegproof.n))"
    "(ltedfapegproof.allgoodentries?)"))))

