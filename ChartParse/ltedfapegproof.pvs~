ltedfapegproof  % [ parameters ]
		: THEORY

  BEGIN

IMPORTING ltedfapeg

len, max: VAR index %the length of the input
m, n: VAR non_terminal
G: VAR lang_spec
depth: VAR uint64

root, stack: VAR (push?)


  defent?(entry: ent) : bool =  fail?(entry) OR loop?(entry) OR good?(entry);
  defent: TYPE = (defent?)

     
  parsetree: DATATYPE
  BEGIN
    zero(nt: non_terminal, entry: defent): zero?
    one(nt: non_terminal, entry: defent, subone: parsetree): one?
    two(nt: non_terminal, entry: defent, subone: parsetree, subtwo : parsetree): two?
  END parsetree

  qstack: DATATYPE
  BEGIN
    qempty: qempty?
    qpush(nonterm: non_terminal, pos: uint32, qpop: qstack): qpush?
  END qstack

  P, Q, R: VAR parsetree

  S, T: VAR qstack
  i: VAR uint32
  inqstack(n, i, S): RECURSIVE bool =
   (CASES S OF
    qpush(n1, j, T): (n = n1 AND i = j ) OR inqstack(n, i, T),
    qempty: FALSE
    ENDCASES)
    MEASURE S BY <<

  stacksize(S): RECURSIVE nat =
   (CASES S OF
    qpush(n1, j, T): stacksize(T) + 1, 
    qempty: 0
    ENDCASES)
    MEASURE S BY <<


  good_qstack?(len, G, (s: strings(len)), (A : scaffold(len)))(S): RECURSIVE bool
  = (CASES S OF
    qpush(n1, j, T): j <= len AND
		     NOT inqstack(n1, j, T) AND %initialize with rootnt and rootpos
		     loop?(A(j)(n1)) AND 
		     good_qstack?(len, G, s, A)(T),
    qempty: TRUE
    ENDCASES)
    MEASURE S BY <<

    % good_qstack_size: LEMMA
    % (FORALL len, G, (s: strings(len)), (rootpos: upto(len)), (rootnt: non_terminal), (st: endstate(len, G, s, rootpos, rootnt)), S: 
    %   good_qstack?(len, G, s, rootpos, rootnt, st)(S) IMPLIES
    %   stacksize(S) <= scafcount(len, st`scaf, loop?, len))
      

    good_parsetree?(len, G, (s: strings(len)))(S, n, (i | i <= len), P): RECURSIVE bool =
    CASES P OF
     zero(m, E): m = n AND
                  (CASES G(n) OF
                      epsilon: E = good(0, 0),
		      failure:  E = fail(0),
		      any(d): (LET res = DfaParse(d, len, s, i) 
		                IN (IF success?(res) THEN E = good(0, span(res)) ELSE E = fail(0) ENDIF)),
		      terminal(a): (IF i < len AND s(i) = a THEN E = good(0, 1) ELSE E = fail(0) ENDIF)
		      ELSE loop?(E) AND inqstack(n, i, S)
		      ENDCASES),
     one(m, E, Q): (CASES G(n) OF
                  lte(n1, n2, n3): good_parsetree?(len, G, s)(qpush(n, i, S), n1, i, Q)  AND
				    loop?(E) AND loop?(entry(Q)) AND m = n
                  ELSE FALSE
                ENDCASES),
     two(m, E, Q, R): (CASES G(n) OF
                     lte(n1, n2, n3):
		       good_parsetree?(len, G, s)(qpush(n, i, S), n1, i, Q)  AND
		       (IF good?(entry(Q))
		         THEN
			    good_good_entry?(len, i)(entry(Q)) AND
			    good_parsetree?(len, G, s)(qpush(n, i, S), n2, i + span(entry(Q)), R)  AND
			    (IF good?(entry(R))
			      THEN (good?(E) AND dep(E) = 1 + max(dep(entry(Q)), dep(entry(R))))
			      ELSIF fail?(entry(R))
			      THEN  (fail?(E) AND dep(E) = 1 + max(dep(entry(Q)), dep(entry(R))))
			      ELSE (loop?(entry(R)) AND loop?(E))
			     ENDIF)
		         ELSIF fail?(entry(Q))
			   THEN good_parsetree?(len, G, s)(qpush(n, i, S), n3, i, R)  AND
   			        (IF good?(entry(R))
			          THEN (good?(E) AND dep(E) = 1 + max(dep(entry(Q)), dep(entry(R))))
			          ELSIF fail?(entry(R))
			          THEN  (fail?(E) AND dep(E) = 1 + max(dep(entry(Q)), dep(entry(R))))
			          ELSE (loop?(entry(R)) AND loop?(E))
			         ENDIF)
			   ELSE (loop?(entry(Q)) AND loop?(E))
			   ENDIF) AND m = n 
			 ELSE FALSE
             ENDCASES)
	   ENDCASES
       MEASURE P BY <<

   buildtree(len, G, (s: strings(len)), (rootpos: upto(len)), (rootnt: non_terminal), st: state(len, G, s, rootpos, rootnt),  S, n, (i | i <= len AND good_or_fail?(st`scaf(i)(n)))): RECURSIVE {P | good_parsetree?(len, G, s)(S, n, i, P) AND entry(P) = st`scaf(i)(n)}
    = CASES G(n) OF
	  lte(n1, n2, n3): (IF good?(st`scaf(i)(n1))
	                       THEN (LET E1 = buildtree(len, G, s, rootpos, rootnt, st, qpush(n, i, S), n1, i),
			                 E2 = buildtree(len, G, s, rootpos, rootnt, st, qpush(n, i, S), n2, i + span(st`scaf(i)(n1)))
		                     IN two(n, st`scaf(i)(n), E1, E2))
			       ELSE (LET E1 = buildtree(len, G, s, rootpos, rootnt, st, qpush(n, i, S), n1, i),
			                 E2 = buildtree(len, G, s, rootpos, rootnt, st, qpush(n, i, S), n3, i)
		                     IN two(n, st`scaf(i)(n), E1, E2))
				ENDIF)
	 ELSE zero(st`scaf(i)(n))
        ENDCASES
     MEASURE dep(st`scaf(i)(n))

no_push_endstate: LEMMA
 (FORALL len, G, (s: strings(len)), (start: upto(len)), (root: non_terminal), (st: endstate(len, G, s, start, root)), (i : upto(len)), n:
  NOT push?(st`scaf(i)(n)))
    


  buildloop(len, G, (s: strings(len)), (rootpos: upto(len)), (rootnt: non_terminal), st: endstate(len, G, s, rootpos, rootnt), (A: scaffold(len)), (S | good_qstack?(len, G, s, st`scaf)(S) AND (FORALL (i: upto(len)), n: A(i)(n) = loop IFF inqstack(n, i, S))), n, (i | i <= len AND loop?(st`scaf(i)(n)))): RECURSIVE {P | good_parsetree?(len, G, s)(S, n, i, P) and loop?(entry(P))}
    = (IF inqstack(n, i, S)
       THEN zero(loop)
       ELSE CASES G(n) OF
	  lte(n1, n2, n3): (IF loop?(st`scaf(i)(n1))
	                    THEN one(n, loop, buildloop(len, G, s, rootpos, rootnt, st, A WITH [(i)(n) := loop],
			                                                        qpush(n, i, S), n1, i))

	                    ELSIF good?(st`scaf(i)(n1))
			    THEN two(n, loop, buildtree(len, G, s, rootpos, rootnt, st, qpush(n, i, S),  n1, i),
			            buildloop(len, G, s, rootpos, rootnt, st, A WITH [(i)(n) := loop],
				                                          qpush(n, i, S), n2, (i + span(st`scaf(i)(n1)))))
          		    ELSE two(n, loop, buildtree(len, G, s, rootpos, rootnt, st, qpush(n, i, S),  n1, i),
			            buildloop(len, G, s, rootpos, rootnt, st, A WITH [(i)(n) := loop],
				                                          qpush(n, i, S), n3, i))
                            ENDIF)
        ENDCASES
     ENDIF)
     MEASURE exp2(40) - scafcount(len, A, loop?, len)

   
    buildproof(len, G, (s: strings(len)), (rootpos: upto(len)), (rootnt: non_terminal))(st: endstate(len, G, s, rootpos, rootnt),  n, (i | i <= len  AND defent?(st`scaf(i)(n)))): 
       {P | good_parsetree?(len, G, s)(qempty, n, i, P) AND entry(P) = st`scaf(i)(n)}
      = (IF loop?(st`scaf(i)(n))
          THEN  (LET pendfun = (LAMBDA (n: non_terminal): pending),
	             A = (LAMBDA (i: upto(len)): pendfun)
		  IN buildloop(len, G, s, rootpos, rootnt, st, A, qempty, n, i))
          ELSE buildtree(len, G, s, rootpos, rootnt, st, qempty, n, i)
	  ENDIF)


    allgoodentries?(P)  : RECURSIVE bool
    = (CASES P OF
        zero(m, entry): good?(entry),
        one(m, entry, subone): good?(entry) AND allgoodentries?(subone),
        two(m, entry, subone, subtwo): good?(entry) AND allgoodentries?(subone) AND allgoodentries?(subtwo)
       ENDCASES)
       MEASURE P BY <<

  END ltedfapegproof
