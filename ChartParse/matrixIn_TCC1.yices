(define exp2_1::(-> real int)) 
(define even?_2::(-> real bool)) 
(define odd?_3::(-> real bool)) 
(define S!1_4::int) 
(define T!1_5::int) 
(define tag!1_6::int) 
(assert (odd?_3  18446744073709551615)) 
(assert (>  18446744073709551615 0)) 
(assert (>  (+  (+  (+  2 (*  2 S!1_4)) T!1_5) (*  S!1_4 T!1_5)) 0)) 
(assert (<=  (*  S!1_4 T!1_5) (-  (exp2_1  32) 1))) 
(assert (>  (+  (+  2 (*  2 S!1_4)) T!1_5) 0)) 
(assert (>  (+  2 (*  2 S!1_4)) 0)) 
(assert (even?_2  (+  2 (*  2 S!1_4)))) 
(assert (even?_2  (*  2 S!1_4))) 
(assert (even?_2  2)) 
(assert (>  2 0)) 
(assert (<=  tag!1_6 (-  (exp2_1  32) 1))) 
(assert (<=  T!1_5 (-  (exp2_1  16) 1))) 
(assert (odd?_3  65535)) 
(assert (>  65535 0)) 
(assert (<=  65535 (-  (exp2_1  32) 1))) 
(assert (<=  S!1_4 (-  (exp2_1  16) 1))) 
(assert (>  (exp2_1  16) 16)) 
(assert (even?_2  16)) 
(assert (>  16 0)) 
(assert (odd?_3  4294967295)) 
(assert (>  4294967295 0)) 
(assert (<=  4294967295 (-  (exp2_1  64) 1))) 
(assert (>  (exp2_1  64) 64)) 
(assert (even?_2  64)) 
(assert (>  64 0)) 
(assert (even?_2  1936682102)) 
(assert (>  1936682102 0)) 
(assert (<=  1936682102 (-  (exp2_1  32) 1))) 
(assert (odd?_3  1)) 
(assert (>  1 0)) 
(assert (>  (exp2_1  32) 32)) 
(assert (even?_2  32)) 
(assert (>  32 0)) 
(assert (even?_2  0)) 
(assert (<=  1936682102 4294967295)) 
(assert (<=  S!1_4 65535)) 
(assert (<=  T!1_5 65535)) 
(assert (=  tag!1_6 1936682102)) 
(assert (not (<=  (+  (+  (+  2 (*  2 S!1_4)) T!1_5) (*  S!1_4 T!1_5)) 18446744073709551615))) 
(check)
