(define tag!1_1::int) 
(define exp2_2::(-> real int)) 
(define even?_3::(-> real bool)) 
(define odd?_4::(-> real bool)) 
(define S!1_5::int) 
(define T!1_6::int) 
(assert (odd?_4  18446744073709551615)) 
(assert (>  18446744073709551615 0)) 
(assert (>  (+  (+  (+  1 S!1_5) T!1_6) (*  S!1_5 T!1_6)) 0)) 
(assert (<=  (*  S!1_5 T!1_6) (-  (exp2_2  32) 1))) 
(assert (>  (+  (+  1 S!1_5) T!1_6) 0)) 
(assert (>  (+  1 S!1_5) 0)) 
(assert (even?_3  1936682102)) 
(assert (>  1936682102 0)) 
(assert (<=  1936682102 (-  (exp2_2  32) 1))) 
(assert (<=  T!1_6 (-  (exp2_2  16) 1))) 
(assert (odd?_4  65535)) 
(assert (>  65535 0)) 
(assert (<=  65535 (-  (exp2_2  32) 1))) 
(assert (<=  S!1_5 (-  (exp2_2  16) 1))) 
(assert (>  (exp2_2  16) 16)) 
(assert (even?_3  16)) 
(assert (>  16 0)) 
(assert (odd?_4  4294967295)) 
(assert (>  4294967295 0)) 
(assert (<=  4294967295 (-  (exp2_2  64) 1))) 
(assert (>  (exp2_2  64) 64)) 
(assert (even?_3  64)) 
(assert (>  64 0)) 
(assert (<=  tag!1_1 (-  (exp2_2  32) 1))) 
(assert (odd?_4  1)) 
(assert (>  1 0)) 
(assert (>  (exp2_2  32) 32)) 
(assert (even?_3  32)) 
(assert (>  32 0)) 
(assert (even?_3  0)) 
(assert (<=  tag!1_1 4294967295)) 
(assert (<=  S!1_5 65535)) 
(assert (<=  T!1_6 65535)) 
(assert (not (=  tag!1_1 1936682102))) 
(assert (not (<=  (+  (+  (+  1 S!1_5) T!1_6) (*  S!1_5 T!1_6)) 18446744073709551615))) 
(check)
