("scaf" scaf membership_update_TCC1 0 (membership_update_TCC1-1 nil 3799377796 ("" (subtype-tcc) nil nil) nil nil (membership_update subtype "scaf.cmember(list_adt[non_terminal].cons(scaf.a, scaf.l))" "arrayCount[booleans.bool].arr(scaf.len)")))("scaf" scaf membership_update_TCC2 0 (membership_update_TCC2-1 nil 3799377796 ("" (subtype-tcc) nil nil) nil nil (membership_update subtype "scaf.cmember(scaf.l)" "arrayCount[booleans.bool].arr(scaf.len)")))("scaf" scaf membership_update_TCC3 0 (membership_update_TCC3-1 nil 3799377796 ("" (subtype-tcc) nil nil) nil nil (membership_update subtype "scaf.a" "naturalnumbers.below(scaf.len)")))("cstring" cstring substr_TCC1 0 (substr_TCC1-1 nil 3802124209 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (string nonempty-type-decl nil cstring nil) (length const-decl "nat" cstring nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (subrange type-eq-decl nil integers nil) (below type-eq-decl nil naturalnumbers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil)) nil (substr subtype "cstring.k" "naturalnumbers.below(cstring.length(cstring.s1))")))("cstring" cstring substr_TCC2 0 (substr_TCC2-1 nil 3802124209 ("" (subtype-tcc) nil nil) nil nil (substr subtype "(number_fields.+)(cstring.k, cstring.i)" "naturalnumbers.below(cstring.length(cstring.s))")))("cstring" cstring substr_TCC3 0 (substr_TCC3-1 nil 3802124209 ("" (existence-tcc) nil nil) nil nil (substr existence "" "[d: [s: cstring.string, i: naturalnumbers.upto(cstring.length(s)), integers.subrange(i, cstring.length(s))] -> {s1 | booleans.AND(cstring.length(cstring.s1) = (number_fields.-)(d`3, d`2), FORALL (k: naturalnumbers.below((number_fields.-)(d`3, d`2))): cstring.char(cstring.s1, k) = cstring.char(d`1, (number_fields.+)(k, d`2)))}]")))("cstring" cstring substr_eq_TCC1 0 (substr_eq_TCC1-1 nil 3802126770 ("" (skeep* :preds? t) (("" (rewrite "substr_length") nil nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (substr_length formula-decl nil cstring nil) (string nonempty-type-decl nil cstring nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (length const-decl "nat" cstring nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (subrange type-eq-decl nil integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil)) nil (substr_eq subtype "cstring.k" "naturalnumbers.below(cstring.length(cstring.substr(cstring.s, cstring.i, cstring.j)))")))("cstring" cstring substr_eq_TCC2 0 (substr_eq_TCC2-1 nil 3802126770 ("" (subtype-tcc) nil nil) nil nil (substr_eq subtype "(number_fields.+)(cstring.k, cstring.i)" "naturalnumbers.below(cstring.length(cstring.s))")))("cstring" cstring prefix_TCC1 0 (prefix_TCC1-1 nil 3802124209 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (string nonempty-type-decl nil cstring nil) (length const-decl "nat" cstring nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil)) nil (prefix subtype "cstring.k" "naturalnumbers.below(cstring.length(cstring.s1))")))("cstring" cstring prefix_TCC2 0 (prefix_TCC2-1 nil 3802127274 ("" (subtype-tcc) nil nil) nil nil (prefix subtype "cstring.k" "naturalnumbers.below(cstring.length(cstring.s))")))("cstring" cstring prefix_TCC3 0 (prefix_TCC2-1 nil 3802124209 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil (prefix subtype "0" "naturalnumbers.upto(cstring.length(cstring.s))")))("cstring" cstring prefix_TCC4 0 (prefix_TCC3-1 nil 3802124209 ("" (subtype-tcc) nil nil) nil nil (prefix subtype "cstring.i" "integers.subrange(0, cstring.length(cstring.s))")))("cstring" cstring prefix_TCC5 0 (prefix_TCC4-1 nil 3802124209 ("" (skeep*) (("" (rewrite "substr_length") (("" (skeep* :preds? t) (("" (rewrite "substr_eq") nil nil)) nil)) nil)) nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (substr_length formula-decl nil cstring nil) (string nonempty-type-decl nil cstring nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (length const-decl "nat" cstring nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (subrange type-eq-decl nil integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (substr_eq formula-decl nil cstring nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil)) nil (prefix subtype "cstring.substr(cstring.s, 0, cstring.i)" "{s1 | booleans.AND(cstring.length(cstring.s1) = cstring.i, FORALL (k: naturalnumbers.below(cstring.i)): cstring.char(cstring.s1, k) = cstring.char(cstring.s, k))}")))("cstring" cstring suffix_TCC1 0 (suffix_TCC1-1 nil 3802127274 ("" (subtype-tcc) nil nil) nil nil (suffix subtype "cstring.k" "naturalnumbers.below(cstring.length(cstring.s1))")))("cstring" cstring suffix_TCC2 0 (suffix_TCC2-1 nil 3802127274 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (string nonempty-type-decl nil cstring nil) (length const-decl "nat" cstring nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (below type-eq-decl nil naturalnumbers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (< const-decl "bool" reals nil)) nil (suffix subtype "(number_fields.+)(cstring.i, cstring.k)" "naturalnumbers.below(cstring.length(cstring.s))")))("cstring" cstring suffix_TCC3 0 (suffix_TCC1-1 nil 3802124209 ("" (subtype-tcc) nil nil) nil nil (suffix subtype "cstring.length(cstring.s)" "integers.subrange(cstring.i, cstring.length(cstring.s))")))("cstring" cstring suffix_TCC4 0 (suffix_TCC2-1 nil 3802124209 ("" (skeep* :preds? t) (("" (rewrite "substr_length") (("" (skeep*) (("" (rewrite "substr_eq") (("" (typepred "k") (("" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (suffix subtype "cstring.substr(cstring.s, cstring.i, cstring.length(cstring.s))" "{s1 | booleans.AND(cstring.length(cstring.s1) = (number_fields.-)(cstring.length(cstring.s), cstring.i), FORALL (k: naturalnumbers.below((number_fields.-)(cstring.length(cstring.s1), cstring.i))): cstring.char(cstring.s1, k) = cstring.char(cstring.s, (number_fields.+)(cstring.i, k)))}")))("cstring" cstring strdiff_TCC1 0 (strdiff_TCC1-1 nil 3802275130 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint16 type-eq-decl nil integertypes nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nat_min application-judgement "{k: nat | k <= i AND k <= j}" real_defs nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nil application-judgement "above(n)" exp2 nil)) nil (strdiff subtype "cstring.j" "naturalnumbers.below(cstring.length(cstring.s1))")))("cstring" cstring strdiff_TCC2 0 (strdiff_TCC2-1 nil 3802275130 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint16 type-eq-decl nil integertypes nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nat_min application-judgement "{k: nat | k <= i AND k <= j}" real_defs nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nil application-judgement "above(n)" exp2 nil)) nil (strdiff subtype "cstring.j" "naturalnumbers.below(cstring.length(cstring.s2))")))("cstring" cstring strdiff_TCC3 0 (strdiff_TCC3-1 nil 3802275130 ("" (existence-tcc) nil nil) nil nil (strdiff existence "" "[d: [string, string] -> {i: integertypes.uint16 | booleans.AND(reals.<=(i, real_defs.min(cstring.length(d`1), cstring.length(d`2))), FORALL (j: naturalnumbers.below(i)): cstring.char(d`1, j) = cstring.char(d`2, j))}]")))("cstring" cstring segment_eq_TCC1 0 (segment_eq_TCC1-1 nil 3802275130 ("" (subtype-tcc) nil nil) nil nil (segment_eq subtype "cstring.k" "naturalnumbers.below(cstring.length(stdstr.substr(cstring.s, cstring.i, cstring.j)))")))("cstring" cstring segment_eq_TCC2 0 (segment_eq_TCC2-1 nil 3802275130 ("" (subtype-tcc) nil nil) nil nil (segment_eq subtype "(number_fields.+)(cstring.k, cstring.i)" "naturalnumbers.below(cstring.length(cstring.s))")))("cstring" cstring substr_TCC1 0 (substr_TCC1-1 nil 3802275130 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil nat_types nil) (character type-decl nil character_adt nil) (char? adt-recognizer-decl "[character -> boolean]" character_adt nil) (char type-eq-decl nil strings nil) (string type-eq-decl nil strings nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint16 type-eq-decl nil integertypes nil) (length const-decl "uint16" cstring nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil)) nil (substr subtype "(number_fields.+)(cstring.i, cstring.length(cstring.s1))" "integers.subrange(cstring.i, cstring.length(cstring.s2))")))("cstring" cstring substr_TCC2 0 (substr_TCC2-1 nil 3802275130 ("" (existence-tcc) nil nil) nil nil (substr existence "" "[d: [string, string] -> {i: naturalnumbers.upto(cstring.length(d`2)) | booleans.=>(reals.<=((number_fields.+)(i, cstring.length(d`1)), cstring.length(d`2)), d`1 = cstring.segment(d`2, i, (number_fields.+)(i, cstring.length(d`1))))}]")))("cstopdown" cstopdown fine_tdstack_scaffold?_TCC1 0 (fine_tdstack_scaffold?_TCC1-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (fine_tdstack_scaffold? subtype "cstopdown.stack" "(cstopdown.good_stack?(cstopdown.len, cstopdown.G, cstopdown.depth, cstopdown.A))")))("cstopdown" cstopdown tdstack_scaffold?_TCC1 0 (tdstack_scaffold?_TCC1-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((instack const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (tdstack_scaffold? subtype "cstopdown.pos" "uint32")))("cstopdown" cstopdown tdstack_scaffold?_TCC2 0 (tdstack_scaffold?_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (tdstack_scaffold? subtype "cstopdown.push(cstopdown.pos, cstopdown.m)" "(cstopdown.good_push_entry?(cstopdown.len))")))("cstopdown" cstopdown full_stack?_TCC1 0 (full_stack?_TCC2-1 nil 3804534082 ("" (skeep* :preds? t) (("" (grind) nil nil)) nil) ((exp2 def-decl "posnat" exp2 nil) (num_non_terminals const-decl "byte" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (instack const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (full_stack? subtype "cstopdown.push(cstopdown.pos, cstopdown.m)" "(cstopdown.good_push_entry?(cstopdown.len))")))("cstopdown" cstopdown fine_stack?_TCC1 0 (fine_stack?_TCC1-1 nil 3804564519 ("" (subtype-tcc) nil nil) nil nil (fine_stack? subtype "cstopdown.stack" "(cstopdown.good_push_entry?(cstopdown.len))")))("cstopdown" cstopdown putstack_TCC1 0 (putstack_TCC3-1 nil 3804455654 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (ent type-decl nil cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (state type-eq-decl nil cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (num_non_terminals const-decl "byte" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (putstack subtype "cstopdown.push(cstopdown.pos, cstopdown.n)" "(cstopdown.good_push_entry?(cstopdown.len))")))("cstopdown" cstopdown putstack_TCC2 0 (putstack_TCC4-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((instack const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (putstack subtype "cstopdown.loop" "(cstopdown.good_entry?(cstopdown.len, cstopdown.pos))")))("cstopdown" cstopdown putstack_TCC3 0 (putstack_TCC5-1 nil 3804455654 ("" (skeep* :preds? t) (("" (typepred "St`scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -3) (("1" (grind) nil nil)) nil) ("2" (hide -2) (("2" (grind) nil nil)) nil) ("3" (hide -3) (("3" (grind) nil nil)) nil) ("4" (hide -2) (("4" (expand "good_tscaffold?" +) (("4" (skeep*) (("4" (expand "good_tscaffold?") (("4" (lift-if) (("4" (ground) (("1" (lift-if) (("1" (ground) (("1" (expand "instack") (("1" (hide -4) (("1" (expand "loop_ready?") (("1" (postpone) nil nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((instack const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (putstack subtype "cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n) := cstopdown.loop]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(cstopdown.start, cstopdown.root))")))("cstopdown" cstopdown putstack_TCC4 0 (putstack_TCC7-1 nil 3804542663 ("" (subtype-tcc) nil nil) ((instack const-decl "bool" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (count const-decl "upto(len)" arrayCount nil) (good_depth? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (putstack subtype "cstopdown.St`depth" "(cstopdown.good_depth?(cstopdown.len, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n) := cstopdown.loop]))")))("cstopdown" cstopdown putstack_TCC5 0 (putstack_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((instack const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (putstack subtype "cstopdown.St`stack" "(cstopdown.good_stack?(cstopdown.len, cstopdown.G, cstopdown.St`depth, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n) := cstopdown.loop]))")))("cstopdown" cstopdown putstack_TCC6 0 (putstack_TCC8-1 nil 3804455654 ("" (skeep* :preds? t) (("" (typepred "St`scaf") (("" (grind) nil nil)) nil)) nil) ((empty? const-decl "bool" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (good_root? const-decl "bool" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (instack const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (putstack subtype "cstopdown.St`stack" "(cstopdown.good_entry?(cstopdown.len, cstopdown.pos))")))("cstopdown" cstopdown putstack_TCC7 0 (putstack_TCC6-1 nil 3804542663 ("" (skeep* :preds? t) (("" (typepred "St`scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (expand "good_root?") (("1" (hide -2 -3) (("1" (grind) nil nil)) nil)) nil) ("2" (hide -1 -3) (("2" (expand "good_tscaffold?") (("2" (skeep*) (("2" (inst - "i" "n_1") (("2" (lift-if +) (("2" (ground) (("1" (lift-if +) (("1" (ground) (("1" (lift-if) (("1" (ground) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (lift-if) (("2" (ground) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((empty? const-decl "bool" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (instack const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (good_fail? const-decl "bool" cstopdown nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (/= const-decl "boolean" notequal nil) (loop_ready? const-decl "bool" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (good_good? const-decl "bool" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (putstack subtype "cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n) := cstopdown.St`stack]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(cstopdown.start, cstopdown.root))")))("cstopdown" cstopdown putstack_TCC8 0 (putstack_TCC7-1 nil 3804455654 ("" (skeep* :preds? t) (("" (typepred "St`depth") (("" (expand "good_depth?") (("" (ground) (("1" (use "sigma_bound[upto(len)]" :subst ("B" "num_non_terminals")) (("1" (ground) (("1" (grind) nil nil) ("2" (skeep*) (("2" (typepred "count(num_non_terminals)(push?)(St`scaf(i_1))") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                   count(num_non_terminals)(push?)
                        (St`scaf WITH [(pos!1)(n) := St`stack](i))) = (LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))) WITH [(pos!1) := count(num_non_terminals)(push?)(St`scaf(pos!1)) + 1]") (("1" (hide -1) (("1" (use "sigma_with[upto(len)]" :where +) (("1" (ground) nil nil)) nil)) nil) ("2" (apply-extensionality) (("1" (hide 2 3) (("1" (case "x!1 = pos!1") (("1" (assert) (("1" (rewrite "count_update0") (("1" (assert) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (lemma "count_update[ent]") (("2" (inst - "push?" num_non_terminals "St`stack" "n" "St`scaf(pos!1)") (("2" (ground) nil nil)) nil)) nil) ("3" (hide -2 2 3) (("3" (grind) nil nil)) nil)) nil) ("3" (lemma "count_update[ent]") (("3" (inst - "push?" num_non_terminals "St`stack" "n" "St`scaf(pos!1)") (("3" (ground) nil nil)) nil)) nil) ("4" (hide -2 2) (("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((empty? const-decl "bool" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (uint32 type-eq-decl nil integertypes nil) (<= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (sigma_nat application-judgement "nat" sigma reals) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (int_times_int_is_int application-judgement "int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (instack const-decl "bool" cstopdown nil) (sigma def-decl "real" sigma reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals) (AND const-decl "[bool, bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (sigma_bound formula-decl nil sigma reals) nil nil nil nil nil nil nil (count_update0 formula-decl nil arrayCount nil) (count_update formula-decl nil arrayCount nil) (good_good_entry? const-decl "bool" cstopdown nil) (sigma_with formula-decl nil sigma reals) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (= const-decl "[T, T -> boolean]" equalities nil) (pending? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (putstack subtype "(number_fields.+)(cstopdown.St`depth, 1)" "(cstopdown.good_depth?(cstopdown.len, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n) := cstopdown.St`stack]))")))("cstopdown" cstopdown putstack_TCC9 0 (putstack_TCC9-1 nil 3804696633 ("" (subtype-tcc) nil nil) nil nil (putstack subtype "cstopdown.push(cstopdown.pos, cstopdown.n)" "(cstopdown.good_stack?(cstopdown.len, cstopdown.G, (number_fields.+)(cstopdown.St`depth, 1), cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n) := cstopdown.St`stack]))")))("cstopdowntest" cstopdowntest dict1_TCC1 0 (dict1_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (dict1 subtype "22" "uint32")))("cstopdowntest" cstopdowntest dict1_TCC2 0 (dict1_TCC2-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil)) nil (dict1 subtype "6" "uint8")))("cstopdowntest" cstopdowntest dict1_TCC3 0 (dict1_TCC3-1 nil 3805067364 ("" (subtype-tcc) nil nil) nil nil (dict1 subtype "3" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 6))")))("cstopdowntest" cstopdowntest dict1_TCC4 0 (dict1_TCC4-1 nil 3805067364 ("" (subtype-tcc) nil nil) nil nil (dict1 subtype "9" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 3))")))("cstopdowntest" cstopdowntest dict1_TCC5 0 (dict1_TCC5-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil)) nil (dict1 subtype "7" "uint8")))("cstopdowntest" cstopdowntest dict1_TCC6 0 (dict1_TCC6-1 nil 3805067364 ("" (subtype-tcc) nil nil) nil nil (dict1 subtype "12" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 7))")))("cstopdowntest" cstopdowntest dict1_TCC7 0 (dict1_TCC7-1 nil 3805067364 ("" (subtype-tcc) nil nil) nil nil (dict1 subtype "19" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 3))")))("cstopdowntest" cstopdowntest test2_TCC1 0 (test2_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (test2 subtype "0" "non_terminal")))("cstopdown" cstopdown good_entry?_TCC1 0 (good_entry?_TCC1-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil (good_entry? subtype "cstopdown.d" "uint32")))("cstopdown" cstopdown good_depth?_TCC1 0 (good_depth?_TCC1-1 nil 3804542663 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (good_depth? subtype "0" "T_low[upto(len)]")))("cstopdown" cstopdown good_depth?_TCC2 0 (good_depth?_TCC2-1 nil 3804542663 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (good_depth? subtype "cstopdown.len" "T_high[upto(len)]")))("cstopdown" cstopdown good_depth?_TCC3 0 (good_depth?_TCC4-1 nil 3804542663 ("" (assuming-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (integer nonempty-type-from-decl nil integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_depth? assuming "reals@sigma[naturalnumbers.upto(cstopdown.len)].sigma" "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))("cstopdown" cstopdown sigma_max_TCC1 0 (sigma_max_TCC1-1 nil 3806372916 ("" (subtype-tcc) nil nil) nil nil (sigma_max subtype "0" "T_low[upto(j)]")))("cstopdown" cstopdown sigma_max_TCC2 0 (sigma_max_TCC2-1 nil 3806372916 ("" (subtype-tcc) nil nil) nil nil (sigma_max subtype "cstopdown.j" "T_high[upto(j)]")))("cstopdown" cstopdown sigma_max_TCC3 0 (sigma_max_TCC3-1 nil 3806372916 ("" (subtype-tcc) nil nil) nil nil (sigma_max subtype "cstopdown.i" "naturalnumbers.upto(cstopdown.len)")))("cstopdown" cstopdown sigma_max_TCC4 0 (sigma_max_TCC4-1 nil 3806372916 ("" (assuming-tcc) nil nil) nil nil (sigma_max assuming "reals@sigma[naturalnumbers.upto(cstopdown.j)].sigma" "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))("cstopdown" cstopdown good_good_tscaffold_TCC1 0 (good_good_tscaffold_TCC2-1 nil 3804991042 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_good_tscaffold subtype "(cstopdown.pos(cstopdown.entry))" "naturalnumbers.upto(cstopdown.len)")))("cstopdown" cstopdown dgood?_TCC1 0 (dgood?_TCC1-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil (dgood? subtype "cstopdown.u" "{x: cstopdown.ent | booleans.OR(cstopdown.fail?(x), cstopdown.good?(x))}")))("cstopdown" cstopdown dfail?_TCC1 0 (dfail?_TCC1-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil (dfail? subtype "cstopdown.u" "{x: cstopdown.ent | booleans.OR(cstopdown.fail?(x), cstopdown.good?(x))}")))("cstopdown" cstopdown scafcount_update_TCC1 0 (scafcount_update_TCC1-1 nil 3806936723 ("" (subtype-tcc) nil nil) nil nil (scafcount_update subtype "cstopdown.u" "(cstopdown.good_entry?(cstopdown.len, cstopdown.i))")))("cstopdown" cstopdown good_mem_stack_TCC1 0 (good_mem_stack_TCC1-1 nil 3804823614 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_mem_stack subtype "(cstopdown.pos(cstopdown.entry))" "naturalnumbers.upto(cstopdown.len)")))("string" string substr_TCC1 0 (substr_TCC1-1 nil 3815798626 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (string nonempty-type-decl nil string nil) (length const-decl "nat" string nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "lstring(length(s) - i)" string nil)) nil (substr subtype "(number_fields.-)(string.i, string.j)" "naturalnumbers.upto(string.length(string.suffix(string.s)(string.j)))")))("string" string substr_TCC2 0 (substr_TCC2-1 nil 3815798626 ("" (subtype-tcc) nil nil) nil nil (substr subtype "string.j" "naturalnumbers.upto(string.length(string.s))")))("byte" byte nthbit_TCC1 0 (nthbit_TCC1-1 nil 3820632280 ("" (subtype-tcc) nil nil) nil nil (nthbit subtype "integertypes.u8pow2(byte.i)" "posnat")))("byte" byte nthbit_TCC2 0 (nthbit_TCC2-1 nil 3820632280 ("" (inst + "lambda b: lambda i: nrem(ndiv(b, u8pow2(i)), 2) = 1") (("" (skeep) (("" (expand u8pow2) (("" (assert) nil nil)) nil)) nil)) nil) ((nil application-judgement "above(n)" exp2 nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (u8pow2 const-decl "uint8" integertypes nil) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (below type-eq-decl nil naturalnumbers nil) (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}" modulo_arithmetic nil) (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (nrem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (mod nonempty-type-eq-decl nil euclidean_division nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (bindex type-eq-decl nil byte nil) (byte type-eq-decl nil byte nil) (int_times_int_is_int application-judgement "int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nil application-judgement "upto(n)" modulo_arithmetic nil)) nil (nthbit existence "" "[b: byte.byte -> [i: byte.bindex -> {B: booleans.bool | B = (modulo_arithmetic.nrem(modulo_arithmetic.ndiv(b, integertypes.u8pow2(i)), 2) = 1)}]]")))("byte" byte rshift_TCC1 0 (rshift_TCC1-1 nil 3820632280 ("" (existence-tcc) nil nil) nil nil (rshift existence "" "[d: [byte, bindex] -> {b | IF reals.<(d`2, 8) THEN byte.b = modulo_arithmetic.nrem(d`1, exp2.exp2(d`2)) ELSE byte.b = 0 ENDIF}]")))("byte" byte lshift_TCC1 0 (lshift_TCC2-1 nil 3820632280 ("" (existence-tcc) nil nil) nil nil (lshift existence "" "[d: [byte, bindex] -> {b | IF reals.<(d`2, 8) THEN byte.b = modulo_arithmetic.nrem(number_fields.*(d`1, exp2.exp2(d`2)), exp2.exp2(8)) ELSE byte.b = 0 ENDIF}]")))("rotate" rotate u8not_TCC1 0 (u8not_TCC1-1 nil 3827347997 ("" (subtype-tcc) nil nil) nil nil (u8not subtype "(bv_bitwise[8].NOT)((bv_nat[8].nat2bv(rotate.x8)))" "(sets[naturalnumbers.below(8)].singleton?)")))("rotate" rotate u8not_TCC2 0 (u8not_TCC2-1 nil 3827347997 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (NOT const-decl "bvec[N]" bv_bitwise nil) (member const-decl "bool" sets nil) (singleton_elt const-decl "T" sets nil)) nil (u8not subtype "sets[naturalnumbers.below(8)].singleton_elt((bv_bitwise[8].NOT)((bv_nat[8].nat2bv(rotate.x8))))" "uint8")))("rotate" rotate u16xor_TCC1 0 (u16xor_TCC1-1 nil 3825170640 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (u16xor subtype "rotate.x16" "naturalnumbers.below(exp2.exp2(16))")))("rotate" rotate u16xor_TCC2 0 (u16xor_TCC2-1 nil 3825170640 ("" (skeep*) (("" (typepred "bv2nat[16]((XOR[16](nat2bv[16](x16), nat2bv[16](y16))))") (("" (grind :exclude ("bv2nat" "nat2bv")) nil nil)) nil)) nil) ((uint16 type-eq-decl nil integertypes nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil) (= const-decl "[T, T -> boolean]" equalities nil) (XOR const-decl "bvec[N]" bv_bitwise nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (u16xor subtype "bv_nat[16].bv2nat((bv_bitwise[16].XOR(bv_nat[16].nat2bv(rotate.x16), bv_nat[16].nat2bv(rotate.y16))))" "uint16")))("rotate" rotate u32xor_TCC1 0 (u32xor_TCC1-1 nil 3825170640 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (u32xor subtype "rotate.x32" "naturalnumbers.below(exp2.exp2(32))")))("rotate" rotate u32xor_TCC2 0 (u32xor_TCC2-1 nil 3825170640 ("" (skeep*) (("" (typepred "bv2nat[32]((XOR[32](nat2bv[32](x32), nat2bv[32](y32))))") (("" (grind :exclude ("bv2nat" "nat2bv")) nil nil)) nil)) nil) ((uint32 type-eq-decl nil integertypes nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil) (= const-decl "[T, T -> boolean]" equalities nil) (XOR const-decl "bvec[N]" bv_bitwise nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (u32xor subtype "bv_nat[32].bv2nat((bv_bitwise[32].XOR(bv_nat[32].nat2bv(rotate.x32), bv_nat[32].nat2bv(rotate.y32))))" "uint32")))("rotate" rotate u64xor_TCC1 0 (u64xor_TCC1-1 nil 3825170640 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (u64xor subtype "rotate.x64" "naturalnumbers.below(exp2.exp2(64))")))("rotate" rotate u64xor_TCC2 0 (u64xor_TCC2-1 nil 3825170640 ("" (skeep*) (("" (typepred "bv2nat[64]((XOR[64](nat2bv[64](x64), nat2bv[64](y64))))") (("" (grind :defs nil) nil nil)) nil)) nil) ((uint64 type-eq-decl nil integertypes nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil) (= const-decl "[T, T -> boolean]" equalities nil) (XOR const-decl "bvec[N]" bv_bitwise nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (u64xor subtype "bv_nat[64].bv2nat((bv_bitwise[64].XOR(bv_nat[64].nat2bv(rotate.x64), bv_nat[64].nat2bv(rotate.y64))))" "uint64")))("rotate" rotate u16and_TCC1 0 (u16and_TCC1-1 nil 3827347997 ("" (skeep*) (("" (typepred "bv2nat[16]((AND[16](nat2bv[16](x16), nat2bv[16](y16))))") (("" (ground) nil nil)) nil)) nil) ((uint16 type-eq-decl nil integertypes nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "bvec[N]" bv_bitwise nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (u16and subtype "bv_nat[16].bv2nat((bv_bitwise[16].AND(bv_nat[16].nat2bv(rotate.x16), bv_nat[16].nat2bv(rotate.y16))))" "uint16")))("rotate" rotate u32and_TCC1 0 (u32and_TCC1-1 nil 3827347997 ("" (skeep*) (("" (typepred "bv2nat[32]((AND[32](nat2bv[32](x32), nat2bv[32](y32))))") (("" (ground) nil nil)) nil)) nil) ((uint32 type-eq-decl nil integertypes nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "bvec[N]" bv_bitwise nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (u32and subtype "bv_nat[32].bv2nat((bv_bitwise[32].AND(bv_nat[32].nat2bv(rotate.x32), bv_nat[32].nat2bv(rotate.y32))))" "uint32")))("rotate" rotate u64and_TCC1 0 (u64and_TCC1-1 nil 3827347997 ("" (skeep*) (("" (typepred "bv2nat[64]((AND[64](nat2bv[64](x64), nat2bv[64](y64))))") (("" (ground) nil nil)) nil)) nil) ((uint64 type-eq-decl nil integertypes nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil) (= const-decl "[T, T -> boolean]" equalities nil) (AND const-decl "bvec[N]" bv_bitwise nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (u64and subtype "bv_nat[64].bv2nat((bv_bitwise[64].AND(bv_nat[64].nat2bv(rotate.x64), bv_nat[64].nat2bv(rotate.y64))))" "uint64")))("rotate" rotate u16not_TCC1 0 (u16not_TCC1-1 nil 3827347997 ("" (skeep*) (("" (typepred "bv2nat[16](NOT nat2bv[16](x16))") (("" (ground) nil nil)) nil)) nil) ((uint16 type-eq-decl nil integertypes nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil) (= const-decl "[T, T -> boolean]" equalities nil) (NOT const-decl "bvec[N]" bv_bitwise nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (u16not subtype "bv_nat[16].bv2nat((bv_bitwise[16].NOT)(bv_nat[16].nat2bv(rotate.x16)))" "uint16")))("rotate" rotate u32not_TCC1 0 (u32not_TCC1-1 nil 3827347997 ("" (skeep*) (("" (typepred "bv2nat[32](NOT (nat2bv[32](x32)))") (("" (ground) nil nil)) nil)) nil) ((uint32 type-eq-decl nil integertypes nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil) (= const-decl "[T, T -> boolean]" equalities nil) (NOT const-decl "bvec[N]" bv_bitwise nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (u32not subtype "bv_nat[32].bv2nat((bv_bitwise[32].NOT)((bv_nat[32].nat2bv(rotate.x32))))" "uint32")))("rotate" rotate u64not_TCC1 0 (u64not_TCC1-1 nil 3827347997 ("" (skeep*) (("" (typepred "bv2nat[64](NOT (nat2bv[64](x64)))") (("" (ground) nil nil)) nil)) nil) ((uint64 type-eq-decl nil integertypes nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat nil) (= const-decl "[T, T -> boolean]" equalities nil) (NOT const-decl "bvec[N]" bv_bitwise nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (bvec type-eq-decl nil bv nil) (bit type-eq-decl nil bit nil) (below type-eq-decl nil naturalnumbers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (u64not subtype "bv_nat[64].bv2nat((bv_bitwise[64].NOT)((bv_nat[64].nat2bv(rotate.x64))))" "uint64")))("HMAC" HMAC XOR_TCC1 0 (XOR_TCC1-1 nil 3821408737 ("" (subtype-tcc) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (XOR subtype "0" "naturalnumbers.below(bytestring.length(HMAC.B1))")))("HMAC" HMAC XOR_TCC2 0 (XOR_TCC2-1 nil 3821408737 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (XOR subtype "1" "naturalnumbers.upto(bytestring.length(HMAC.B1))")))("HMAC" HMAC XOR_TCC3 0 (XOR_TCC3-1 nil 3821408737 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (XOR subtype "1" "naturalnumbers.upto(bytestring.length(HMAC.B2))")))("HMAC" HMAC XOR_TCC4 0 (XOR_TCC4-1 nil 3821408737 ("" (termination-tcc) nil nil) nil nil (XOR termination "(HMAC.XOR(bytestring.suffix(HMAC.B1, 1), bytestring.suffix(HMAC.B2, 1)))" "nil")))("SHA256" SHA256 h2_TCC1 0 (h2_TCC1-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil (h2 subtype "0x3c6ef372" "uint32")))("SHA256" SHA256 h4_TCC1 0 (h4_TCC1-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil (h4 subtype "0x510e527f" "uint32")))("SHA256" SHA256 h6_TCC1 0 (h6_TCC1-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil (h6 subtype "0x1f83d9ab" "uint32")))("SHA256" SHA256 h7_TCC1 0 (h7_TCC1-1 nil 3827348879 ("" (subtype-tcc) nil nil) nil nil (h7 subtype "0x5be0cd19" "uint32")))("SHA256" SHA256 printW_TCC1 0 (printW_TCC1-1 nil 3831690310 ("" (subtype-tcc) nil nil) nil nil (printW subtype "(number_fields.-)(16, SHA256.i)" "naturalnumber")))("SHA256" SHA256 printW_TCC2 0 (printW_TCC2-1 nil 3831690310 ("" (subtype-tcc) nil nil) nil nil (printW subtype "(number_fields.+)(SHA256.i, 1)" "naturalnumbers.upto(16)")))("SHA256" SHA256 printW_TCC3 0 (printW_TCC3-1 nil 3831690310 ("" (termination-tcc) nil nil) nil nil (printW termination "SHA256.printW(SHA256.w, (number_fields.+)(SHA256.i, 1))" "nil")))("SHA256" SHA256 printW_TCC4 0 (printW_TCC4-1 nil 3831690310 ("" (subtype-tcc) nil nil) nil nil (printW subtype "SHA256.i" "naturalnumbers.below(16)")))("SHA256" SHA256 printV_TCC1 0 (printV_TCC1-1 nil 3831690310 ("" (subtype-tcc) nil nil) nil nil (printV subtype "(number_fields.+)(SHA256.i, 1)" "naturalnumbers.upto(64)")))("SHA256" SHA256 printV_TCC2 0 (printV_TCC2-1 nil 3831690310 ("" (termination-tcc) nil nil) nil nil (printV termination "SHA256.printV(SHA256.v, (number_fields.+)(SHA256.i, 1))" "nil")))("SHA256" SHA256 printV_TCC3 0 (printV_TCC3-1 nil 3831690310 ("" (subtype-tcc) nil nil) nil nil (printV subtype "SHA256.i" "naturalnumbers.below(64)")))("rotate" rotate test_u64tobytestring_2_TCC1 0 (test_u64tobytestring_2_TCC1-1 nil 3833902925 ("" (grind) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (exp2 def-decl "posnat" exp2 nil)) nil (test_u64tobytestring_2 subtype "0xf00ff00ff00ff00f" "uint64")))("rotate" rotate test_u64rightrotate_0_TCC1 0 (test_u64rightrotate_0_TCC1-1 nil 3833902925 ("" (grind) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (exp2 def-decl "posnat" exp2 nil)) nil (test_u64rightrotate_0 subtype "0xffffffffffffffff" "uint64")))("rotate" rotate test_u64rightrotate_1_TCC1 0 (test_u64rightrotate_1_TCC1-1 nil 3833902925 ("" (grind) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (exp2 def-decl "posnat" exp2 nil)) nil (test_u64rightrotate_1 subtype "0xf0f0f0f0f0f0f0f0" "uint64")))("sigmatopdown" sigmatopdown sigma_restrict_TCC1 0 (sigma_restrict_TCC1-1 nil 3806355895 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "0" "T_low[upto(j)]")))("sigmatopdown" sigmatopdown sigma_restrict_TCC2 0 (sigma_restrict_TCC2-1 nil 3806355895 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "sigmatopdown.j" "T_high[upto(j)]")))("sigmatopdown" sigmatopdown sigma_restrict_TCC3 0 (sigma_restrict_TCC3-1 nil 3806355895 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "sigmatopdown.i" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown sigma_restrict_TCC4 0 (sigma_restrict_TCC4-1 nil 3806355895 ("" (assuming-tcc) nil nil) nil nil (sigma_restrict assuming "reals@sigma[naturalnumbers.upto(sigmatopdown.j)].sigma" "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))("sigmatopdown" sigmatopdown sigma_restrict_TCC5 0 (sigma_restrict_TCC5-1 nil 3806360457 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "0" "T_low[upto(k)]")))("sigmatopdown" sigmatopdown sigma_restrict_TCC6 0 (sigma_restrict_TCC5-1 nil 3806358823 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "sigmatopdown.j" "T_high[upto(k)]")))("sigmatopdown" sigmatopdown sigma_restrict_TCC7 0 (sigma_restrict_TCC7-1 nil 3806360457 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "sigmatopdown.i" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown sigma_restrict_TCC8 0 (sigma_restrict_TCC8-1 nil 3806360457 ("" (assuming-tcc) nil nil) nil nil (sigma_restrict assuming "reals@sigma[naturalnumbers.upto(sigmatopdown.k)].sigma" "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))("sigmatopdown" sigmatopdown sigma_restrict 0 (sigma_restrict-1 nil 3806355895 ("" (skolem + ("len" "A" "_" "_")) (("" (induct j) (("1" (grind) nil nil) ("2" (skeep*) (("2" (expand "sigma" +) (("2" (inst-cp - k) (("2" (inst - "jt + 1") (("1" (ground) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (grind) nil nil)) nil)) nil)) nil) ((T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals) (sigma def-decl "real" sigma reals) (arr type-eq-decl nil arrayCount nil) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) shostak))("sigmatopdown" sigmatopdown sigma_restrict_len_TCC1 0 (sigma_restrict_len_TCC1-1 nil 3806360811 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict_len subtype "0" "T_low[upto(j)]")))("sigmatopdown" sigmatopdown sigma_restrict_len_TCC2 0 (sigma_restrict_len_TCC2-1 nil 3806360811 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict_len subtype "sigmatopdown.j" "T_high[upto(j)]")))("sigmatopdown" sigmatopdown sigma_restrict_len_TCC3 0 (sigma_restrict_len_TCC3-1 nil 3806360811 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict_len subtype "sigmatopdown.i" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown sigma_restrict_len_TCC4 0 (sigma_restrict_len_TCC4-1 nil 3806360811 ("" (assuming-tcc) nil nil) nil nil (sigma_restrict_len assuming "reals@sigma[naturalnumbers.upto(sigmatopdown.j)].sigma" "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))("sigmatopdown" sigmatopdown sigma_restrict_len_TCC5 0 (sigma_restrict_len_TCC5-1 nil 3806936723 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict_len subtype "0" "T_low[upto(len)]")))("sigmatopdown" sigmatopdown sigma_restrict_len_TCC6 0 (sigma_restrict_len_TCC6-1 nil 3806936723 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict_len subtype "sigmatopdown.j" "T_high[upto(len)]")))("sigmatopdown" sigmatopdown sigma_restrict_len_TCC7 0 (sigma_restrict_len_TCC7-1 nil 3806936723 ("" (assuming-tcc) nil nil) nil nil (sigma_restrict_len assuming "reals@sigma[naturalnumbers.upto(sigmatopdown.len)].sigma" "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))("sigmatopdown" sigmatopdown sigma_restrict_len 0 (sigma_restrict_len-1 nil 3806360812 ("" (skeep*) (("" (lemma "sigma_restrict") (("" (inst - len A j len) (("" (ground) nil nil)) nil)) nil)) nil) nil shostak))("sigmatopdown" sigmatopdown sigma_nat_TCC1 0 (sigma_nat_TCC1-1 nil 3804912405 ("" (subtype-tcc) nil nil) nil nil (sigma_nat subtype "0" "T_low[upto(len)]")))("sigmatopdown" sigmatopdown sigma_nat_TCC2 0 (sigma_nat_TCC2-1 nil 3804912405 ("" (subtype-tcc) nil nil) nil nil (sigma_nat subtype "sigmatopdown.i" "T_high[upto(len)]")))("sigmatopdown" sigmatopdown sigma_nat 0 (sigma_nat-1 nil 3804912406 ("" (skolem + ("len" _ _)) (("" (induct-and-simplify i) nil nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)) shostak))("sigmatopdown" sigmatopdown sigma_pos_TCC1 0 (sigma_pos_TCC1-1 nil 3804912405 ("" (subtype-tcc) nil nil) nil nil (sigma_pos subtype "sigmatopdown.j" "T_high[upto(len)]")))("sigmatopdown" sigmatopdown sigma_pos 0 (sigma_pos-1 nil 3804912491 ("" (skolem + ("len" _ _ _)) (("" (induct-and-simplify j) nil nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)) shostak))("sigmatopdown" sigmatopdown sigma_dec_TCC1 0 (sigma_dec_TCC1-1 nil 3804994284 ("" (subtype-tcc) nil nil) nil nil (sigma_dec subtype "sigmatopdown.j" "T_high[upto(len)]")))("sigmatopdown" sigmatopdown sigma_dec 0 (sigma_dec-1 nil 3804993479 ("" (skolem + ("len" _ _ _)) (("" (induct "j") (("1" (grind) nil nil) ("2" (skeep*) (("2" (expand sigma +) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ((T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) shostak))("sigmatopdown" sigmatopdown sigma_inc_TCC1 0 (sigma_inc_TCC1-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil (sigma_inc subtype "sigmatopdown.j" "T_high[upto(len)]")))("sigmatopdown" sigmatopdown sigma_inc_TCC2 0 (sigma_inc_TCC2-1 nil 3805854734 ("" (subtype-tcc) nil nil) nil nil (sigma_inc subtype "sigmatopdown.j" "T_high[upto(len)]")))("sigmatopdown" sigmatopdown sigma_inc 0 (sigma_inc-1 nil 3804994355 ("" (skolem + ("len" _ _ _)) (("" (induct "j") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil) ((T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) shostak))("HMAC" HMAC nbytes_TCC1 0 (nbytes_TCC1-1 nil 3821408737 ("" (rewrite "length_empty") (("" (grind) nil nil)) nil) ((nil application-judgement "above(n)" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (byte type-eq-decl nil byte nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (length_empty formula-decl nil bytestring nil)) nil (nbytes subtype "bytestring.empty" "HMAC.lbytes(HMAC.n)")))("HMAC" HMAC nbytes_TCC2 0 (nbytes_TCC2-1 nil 3821408737 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (byte type-eq-decl nil byte nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (uint32 type-eq-decl nil integertypes nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil)) nil (nbytes subtype "(number_fields.-)(HMAC.n, 1)" "uint32")))("HMAC" HMAC nbytes_TCC3 0 (nbytes_TCC3-1 nil 3821408737 ("" (termination-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (nbytes termination "HMAC.nbytes(HMAC.b, (number_fields.-)(HMAC.n, 1))" "nil")))("HMAC" HMAC nbytes_TCC4 0 (nbytes_TCC4-1 nil 3821408737 ("" (skeep :preds? t) (("" (rewrite "length_concat") (("" (typepred "v(b, n - 1)") (("" (rewrite "length_unit") (("" (ground) nil nil)) nil)) nil)) nil)) nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (length_concat formula-decl nil bytestring nil) (bytestring nonempty-type-decl nil bytestring nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (byte type-eq-decl nil byte nil) (unit const-decl "bytestring" bytestring nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (uint32 type-eq-decl nil integertypes nil) (= const-decl "[T, T -> boolean]" equalities nil) (length const-decl "uint32" bytestring nil) (lbytes type-eq-decl nil HMAC nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (length_unit formula-decl nil bytestring nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (nbytes subtype "(bytestring.+)(bytestring.unit(HMAC.b), HMAC.nbytes(HMAC.b, (number_fields.-)(HMAC.n, 1)))" "HMAC.lbytes(HMAC.n)")))("HMAC" HMAC padright_TCC1 0 (padright_TCC1-1 nil 3821408737 ("" (subtype-tcc) nil nil) nil nil (padright subtype "(number_fields.+)(bytestring.length(HMAC.B), HMAC.n)" "uint32")))("HMAC" HMAC padright_TCC2 0 (padright_TCC2-1 nil 3821408737 ("" (subtype-tcc) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil)) nil (padright subtype "0" "byte")))("HMAC" HMAC padright_TCC3 0 (padright_TCC3-1 nil 3821408737 ("" (subtype-tcc) nil nil) nil nil (padright subtype "(bytestring.+)(HMAC.B, HMAC.nbytes(0, HMAC.n))" "HMAC.lbytes((number_fields.+)(HMAC.n, bytestring.length(HMAC.B)))")))("bytevectors" bytevectors byvrightrotate_TCC1 0 (byvrightrotate_TCC1-1 nil 3848272197 ("" (subtype-tcc) nil nil) ((even_times_int_is_even application-judgement "even_int" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (index type-eq-decl nil integertypes nil) (n formal-const-decl "index" bytevectors nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "upto(n)" modulo_arithmetic nil) (int_times_int_is_int application-judgement "int" integers nil)) nil (byvrightrotate subtype "modulo_arithmetic.ndiv(bytevectors.i, 8)" "naturalnumbers.upto(bytevectors.n)")))("bytevectors" bytevectors byvrightrotate_TCC2 0 (byvrightrotate_TCC2-1 nil 3848272197 ("" (subtype-tcc) nil nil) ((even_times_int_is_even application-judgement "even_int" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (index type-eq-decl nil integertypes nil) (n formal-const-decl "index" bytevectors nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_times_int_is_int application-judgement "int" integers nil)) nil (byvrightrotate subtype "modulo_arithmetic.nrem(bytevectors.i, 8)" "naturalnumbers.upto(8)")))("bytevectors" bytevectors byvand_TCC1 0 (byvand_TCC1-1 nil 3848116047 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (index type-eq-decl nil integertypes nil) (n formal-const-decl "index" bytevectors nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (exp2 def-decl "posnat" exp2 nil)) nil (byvand subtype "bytevectors.X(bytevectors.i)" "uint8")))("bytevectors" bytevectors byvand_TCC2 0 (byvand_TCC2-1 nil 3848116047 ("" (skeep*) (("" (typepred "u8and(X(i), Y(i))") (("" (grind :defs nil) (("" (grind :exclude "u8and") nil nil)) nil)) nil)) nil) ((byv type-eq-decl nil bytevectors nil) (byte nonempty-type-eq-decl nil bytestrings nil) (below type-eq-decl nil naturalnumbers nil) (n formal-const-decl "index" bytevectors nil) (index type-eq-decl nil integertypes nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (u8and const-decl "uint8" integer_bv_ops nil) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil)) nil (byvand subtype "integer_bv_ops.u8and(bytevectors.X(bytevectors.i), bytevectors.Y(bytevectors.i))" "byte")))("bytevectors" bytevectors byvor_TCC1 0 (byvor_TCC1-1 nil 3848116047 ("" (skeep*) (("" (typepred "u8or(X(i), Y(i))") (("" (grind :exclude "u8or") nil nil)) nil)) nil) ((byv type-eq-decl nil bytevectors nil) (byte nonempty-type-eq-decl nil bytestrings nil) (below type-eq-decl nil naturalnumbers nil) (n formal-const-decl "index" bytevectors nil) (index type-eq-decl nil integertypes nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (u8or const-decl "uint8" integer_bv_ops nil) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil)) nil (byvor subtype "integer_bv_ops.u8or(bytevectors.X(bytevectors.i), bytevectors.Y(bytevectors.i))" "byte")))("bytevectors" bytevectors byvxor_TCC1 0 (byvxor_TCC1-1 nil 3848116047 ("" (skeep*) (("" (typepred "u8xor(X(i), Y(i))") (("" (grind :exclude "u8xor") nil nil)) nil)) nil) ((byv type-eq-decl nil bytevectors nil) (byte nonempty-type-eq-decl nil bytestrings nil) (below type-eq-decl nil naturalnumbers nil) (n formal-const-decl "index" bytevectors nil) (index type-eq-decl nil integertypes nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (u8xor const-decl "uint8" integer_bv_ops nil) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil)) nil (byvxor subtype "integer_bv_ops.u8xor(bytevectors.X(bytevectors.i), bytevectors.Y(bytevectors.i))" "byte")))("bytevectors" bytevectors byvnot_TCC1 0 (byvnot_TCC1-1 nil 3848116047 ("" (skeep*) (("" (typepred "u8not(X(i))") (("" (grind :exclude "u8not") nil nil)) nil)) nil) ((byv type-eq-decl nil bytevectors nil) (byte nonempty-type-eq-decl nil bytestrings nil) (below type-eq-decl nil naturalnumbers nil) (n formal-const-decl "index" bytevectors nil) (index type-eq-decl nil integertypes nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (u8not const-decl "uint8" integer_bv_ops nil) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil)) nil (byvnot subtype "integer_bv_ops.u8not(bytevectors.X(bytevectors.i))" "byte")))("bytevectors" bytevectors byvbitrightrot_TCC1 0 (byvbitrightrot_TCC1-1 nil 3848116047 ("" (skeep*) (("" (typepred "X(nextindex(j))") (("" (grind) nil nil)) nil)) nil) ((nextindex const-decl "below(n)" bytevectors nil) (byv type-eq-decl nil bytevectors nil) (byte nonempty-type-eq-decl nil bytestrings nil) (below type-eq-decl nil naturalnumbers nil) (n formal-const-decl "index" bytevectors nil) (index type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (odd_plus_even_is_odd application-judgement "odd_int" integers nil) (odd_minus_even_is_odd application-judgement "odd_int" integers nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (precindex const-decl "below(n)" bytevectors nil) (u32minus const-decl "uint32" integertypes nil) (u32plus const-decl "uint32" integertypes nil) (max32 const-decl "uint32" integertypes nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil)) nil (byvbitrightrot subtype "bytevectors.X(bytevectors.precindex(bytevectors.j))" "uint8")))("bytevectors" bytevectors byvbitrightrot_TCC2 0 (byvbitrightrot_TCC2-1 nil 3848116047 ("" (skeep*) (("" (typepred "u8plus(u8lshift(X(j), i), u8rshift(X(precindex(j)), u8minus(8, i)))") (("" (grind) nil nil)) nil)) nil) ((u8minus const-decl "uint8" integertypes nil) (precindex const-decl "below(n)" bytevectors nil) (u8rshift const-decl "uint8" integertypes nil) (byv type-eq-decl nil bytevectors nil) (byte nonempty-type-eq-decl nil bytestrings nil) (below type-eq-decl nil naturalnumbers nil) (n formal-const-decl "index" bytevectors nil) (index type-eq-decl nil integertypes nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (u8lshift const-decl "uint8" integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (u8plus const-decl "uint8" integertypes nil) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (u8lshift_bound application-judgement "upto(exp2(8) - exp2(n))" integertypes nil) (int_minus_int_is_int application-judgement "int" integers nil) (int_times_int_is_int application-judgement "int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (u8rshift_bound application-judgement "below(exp2(8 - n))" integertypes nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "upto(n)" modulo_arithmetic nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (u32minus const-decl "uint32" integertypes nil) (max32 const-decl "uint32" integertypes nil) (max8 const-decl "uint8" integertypes nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil)) nil (byvbitrightrot subtype "integertypes.u8plus(integertypes.u8lshift(bytevectors.X(bytevectors.j), bytevectors.i), integertypes.u8rshift(bytevectors.X(bytevectors.precindex(bytevectors.j)), integertypes.u8minus(8, bytevectors.i)))" "byte")))("hex" hex hex2byte_TCC1 0 (hex2byte_TCC1-1 nil 3845476905 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (byte nonempty-type-eq-decl nil bytestrings nil) (hexdigit? const-decl "bool" hex nil) (int_minus_int_is_int application-judgement "int" integers nil) (hexvalue const-decl "byte" hex nil) (hexalpha? const-decl "bool" hex nil) (digit? const-decl "bool" hex nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil (hex2byte subtype "hex.hexvalue(hex.hd1)" "uint8")))("hex" hex hex2byte_TCC2 0 (hex2byte_TCC2-1 nil 3845476905 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (byte nonempty-type-eq-decl nil bytestrings nil) (hexdigit? const-decl "bool" hex nil) (int_minus_int_is_int application-judgement "int" integers nil) (hexvalue const-decl "byte" hex nil) (hexalpha? const-decl "bool" hex nil) (digit? const-decl "bool" hex nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil (hex2byte subtype "hex.hexvalue(hex.hd2)" "uint8")))("hex" hex hex2byte_TCC3 0 (hex2byte_TCC3-1 nil 3845476905 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (byte nonempty-type-eq-decl nil bytestrings nil) (hexdigit? const-decl "bool" hex nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (digit? const-decl "bool" hex nil) (hexalpha? const-decl "bool" hex nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (even_minus_even_is_even application-judgement "even_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (odd_minus_even_is_odd application-judgement "odd_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (int_times_int_is_int application-judgement "int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (hexvalue const-decl "byte" hex nil) (exp2 def-decl "posnat" exp2 nil) (u8lshift const-decl "uint8" integertypes nil) (max8 const-decl "uint8" integertypes nil) (u8plus const-decl "uint8" integertypes nil) (nil application-judgement "above(n)" exp2 nil)) nil (hex2byte subtype "integertypes.u8plus(integertypes.u8lshift(hex.hexvalue(hex.hd1), 4), hex.hexvalue(hex.hd2))" "byte")))("hex" hex bytes2uint8_TCC1 0 (bytes2uint8_TCC1-1 nil 3845476905 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (byte nonempty-type-eq-decl nil bytestrings nil) (bytestring type-eq-decl nil bytestrings nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (get const-decl "byte" bytestrings nil) (exp2 def-decl "posnat" exp2 nil)) nil (bytes2uint8 subtype "bytestrings.get(hex.X, hex.i)" "uint8")))("Rijndael" Rijndael T3_TCC1 0 (T3_TCC1-1 nil 3848945954 ("" (skeep*) (("" (typepred "T2(b)") (("" (grind) nil nil)) nil)) nil) ((T2 const-decl "byte" Rijndael nil) (byte nonempty-type-eq-decl nil bytestrings nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nil application-judgement "above(n)" exp2 nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (max8 const-decl "uint8" integertypes nil) (u8plus const-decl "uint8" integertypes nil) (exp2 def-decl "posnat" exp2 nil) (/= const-decl "boolean" notequal nil) (XOR const-decl "bool" xor_def nil) (XOR const-decl "bvec[N]" bv_bitwise nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (u8xor const-decl "uint8" integer_bv_ops nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil)) nil (T3 subtype "Rijndael.T2(Rijndael.b)" "uint8")))("Rijndael" Rijndael T3_TCC2 0 (T3_TCC2-1 nil 3848945954 ("" (grind) nil nil) ((exp2 def-decl "posnat" exp2 nil)) nil (T3 subtype "Rijndael.b" "uint8")))("Rijndael" Rijndael T3_TCC3 0 (T3_TCC3-1 nil 3848945954 ("" (skeep*) (("" (typepred "u8xor(T2(b), b)") (("" (grind :exclude ("T2" "u8xor")) nil nil)) nil)) nil) ((T2 const-decl "byte" Rijndael nil) (byte nonempty-type-eq-decl nil bytestrings nil) (u8xor const-decl "uint8" integer_bv_ops nil) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil)) nil (T3 subtype "integer_bv_ops.u8xor(Rijndael.T2(Rijndael.b), Rijndael.b)" "byte")))("rotate" rotate u8tobytestring_TCC1 0 (u8tobytestring_TCC1-1 nil 3827347997 ("" (skeep*) (("" (typepred "x8") (("" (grind) nil nil)) nil)) nil) ((uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil)) nil (u8tobytestring subtype "rotate.x8" "byte")))("Milenage" Milenage nbyv_TCC1 0 (nbyv_TCC1-1 nil 3848419886 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (index type-eq-decl nil integertypes nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (nbyv subtype "Milenage.x" "byte")))("Milenage" Milenage mkOUT1_TCC1 0 (mkOUT1_TCC1-1 nil 3848419886 ("" (subtype-tcc) nil nil) nil nil (mkOUT1 subtype "Milenage.r1" "naturalnumbers.below(16)")))("Milenage" Milenage mkOUT2_TCC1 0 (mkOUT2_TCC1-1 nil 3848419886 ("" (subtype-tcc) nil nil) ((r2 const-decl "uint8" Milenage nil)) nil (mkOUT2 subtype "Milenage.r2" "naturalnumbers.below(16)")))("Milenage" Milenage mkOUT3_TCC1 0 (mkOUT3_TCC1-1 nil 3848419886 ("" (subtype-tcc) nil nil) nil nil (mkOUT3 subtype "Milenage.r3" "naturalnumbers.below(16)")))("Milenage" Milenage mkOUT4_TCC1 0 (mkOUT4_TCC1-1 nil 3848419886 ("" (subtype-tcc) nil nil) nil nil (mkOUT4 subtype "Milenage.r4" "naturalnumbers.below(16)")))("Milenage" Milenage mkOUT5_TCC1 0 (mkOUT5_TCC1-1 nil 3848419886 ("" (subtype-tcc) nil nil) nil nil (mkOUT5 subtype "Milenage.r5" "naturalnumbers.below(16)")))("Milenage" Milenage mkIN1_TCC1 0 (mkIN1_TCC1-1 nil 3848419886 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (mkIN1 subtype "8" "index")))("Milenage" Milenage mkIN1_TCC2 0 (mkIN1_TCC2-1 nil 3848419886 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (mkIN1 subtype "14" "index")))("Milenage" Milenage mkf1_TCC1 0 (mkf1_TCC1-1 nil 3848419886 ("" (subtype-tcc) nil nil) ((mkIN1 const-decl "byv[16]" Milenage nil) (mkOPC const-decl "byv[16]" Milenage nil) (mkTEMP const-decl "byv[16]" Milenage nil) (r1 const-decl "uint8" Milenage nil) (byvrightrotate const-decl "byv" bytevectors nil) (c1 const-decl "byv[16]" Milenage nil) (mkOUT1 const-decl "byv[16]" Milenage nil) (even_times_int_is_even application-judgement "even_int" integers nil)) nil (mkf1 subtype "Milenage.j" "naturalnumbers.below(16)")))("Milenage" Milenage mkf1star_TCC1 0 (mkf1star_TCC1-1 nil 3848419886 ("" (subtype-tcc) nil nil) ((mkIN1 const-decl "byv[16]" Milenage nil) (mkOPC const-decl "byv[16]" Milenage nil) (mkTEMP const-decl "byv[16]" Milenage nil) (r1 const-decl "uint8" Milenage nil) (byvrightrotate const-decl "byv" bytevectors nil) (c1 const-decl "byv[16]" Milenage nil) (mkOUT1 const-decl "byv[16]" Milenage nil) (even_times_int_is_even application-judgement "even_int" integers nil)) nil (mkf1star subtype "(number_fields.+)(Milenage.j, 8)" "naturalnumbers.below(16)")))("Milenage" Milenage mkf2_TCC1 0 (mkf2_TCC1-1 nil 3848419886 ("" (subtype-tcc) nil nil) ((mkTEMP const-decl "byv[16]" Milenage nil) (mkOPC const-decl "byv[16]" Milenage nil) (r2 const-decl "uint8" Milenage nil) (byvrightrotate const-decl "byv" bytevectors nil) (c1 const-decl "byv[16]" Milenage nil) (c2 const-decl "byv[16]" Milenage nil) (mkOUT2 const-decl "byv[16]" Milenage nil) (even_times_int_is_even application-judgement "even_int" integers nil)) nil (mkf2 subtype "(number_fields.+)(Milenage.j, 8)" "naturalnumbers.below(16)")))("Milenage" Milenage mkf5_TCC1 0 (mkf5_TCC1-1 nil 3848419886 ("" (subtype-tcc) nil nil) ((mkTEMP const-decl "byv[16]" Milenage nil) (mkOPC const-decl "byv[16]" Milenage nil) (r2 const-decl "uint8" Milenage nil) (byvrightrotate const-decl "byv" bytevectors nil) (c1 const-decl "byv[16]" Milenage nil) (c2 const-decl "byv[16]" Milenage nil) (mkOUT2 const-decl "byv[16]" Milenage nil) (even_times_int_is_even application-judgement "even_int" integers nil)) nil (mkf5 subtype "Milenage.j" "naturalnumbers.below(16)")))("Milenage" Milenage mkf5_TCC2 0 (mkf5_TCC2-1 nil 3848419886 ("" (subtype-tcc) nil nil) nil nil (mkf5 subtype "(LAMBDA (j: naturalnumbers.below(6)): Milenage.OUT2(j))" "byv[8]")))("Milenage" Milenage mkf5star_TCC1 0 (mkf5star_TCC1-1 nil 3848419886 ("" (subtype-tcc) nil nil) ((mkTEMP const-decl "byv[16]" Milenage nil) (mkOPC const-decl "byv[16]" Milenage nil) (r5 const-decl "uint8" Milenage nil) (byvrightrotate const-decl "byv" bytevectors nil) (c1 const-decl "byv[16]" Milenage nil) (c5 const-decl "byv[16]" Milenage nil) (mkOUT5 const-decl "byv[16]" Milenage nil) (even_times_int_is_even application-judgement "even_int" integers nil)) nil (mkf5star subtype "Milenage.j" "naturalnumbers.below(16)")))("Milenage" Milenage mkf5star_TCC2 0 (mkf5star_TCC2-1 nil 3848419886 ("" (subtype-tcc) nil nil) nil nil (mkf5star subtype "(LAMBDA (j: naturalnumbers.below(6)): Milenage.OUT5(j))" "byv[16]")))("bytevectors" bytevectors byv2bytestring_TCC1 0 (byv2bytestring_TCC1-1 nil 3849969158 ("" (typepred n) (("" (grind) nil nil)) nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (index type-eq-decl nil integertypes nil) (n formal-const-decl "index" bytevectors nil)) nil (byv2bytestring subtype "bytevectors.n" "naturalnumbers.below(0x100000000)")))("iccMax2c" iccMax2c test2_TCC1 0 (test2_TCC1-1 nil 3850179737 ("" (subtype-tcc) nil nil) nil nil (test2 subtype "iccMax2c.iccteststring2`length" "naturalnumbers.upto(modulo_arithmetic.ndiv(iccMax2c.iccteststring2`length, 8))")))("iccMax2c" iccMax2c test2_TCC2 0 (test2_TCC2-1 nil 3850179737 ("" (subtype-tcc) nil nil) ((nil application-judgement "upto(n)" modulo_arithmetic nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (list2finseq const-decl "finseq[T]" list2finseq nil) (get const-decl "char" gen_strings nil) (mk_bytestring const-decl "bytestring" bytestrings nil) (max32 const-decl "uint32" integertypes nil) (u32div const-decl "uint32" integertypes nil) (u32times const-decl "uint32" integertypes nil) (get const-decl "byte" bytestrings nil) (u8lshift const-decl "uint8" integertypes nil) (hexvalue const-decl "byte" hex nil) (max8 const-decl "uint8" integertypes nil) (hex2byte const-decl "byte" hex nil) (hex2bytestring const-decl "bytestring" hex nil) (iccteststring2 const-decl "bytestring" iccMax2c nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nil application-judgement "above(n)" exp2 nil) (int_times_int_is_int application-judgement "int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil)) nil (test2 subtype "0" "naturalnumbers.upto(iccMax2c.iccteststring2`length)")))("iccMax2c" iccMax2c test3_TCC1 0 (test3_TCC1-1 nil 3850179737 ("" (subtype-tcc) nil nil) nil nil (test3 subtype "iccMax2c.iccteststring3`length" "naturalnumbers.upto(modulo_arithmetic.ndiv(iccMax2c.iccteststring3`length, 8))")))("iccMax2c" iccMax2c test3_TCC2 0 (test3_TCC2-1 nil 3850179737 ("" (subtype-tcc) nil nil) ((nil application-judgement "upto(n)" modulo_arithmetic nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (list2finseq const-decl "finseq[T]" list2finseq nil) (get const-decl "char" gen_strings nil) (mk_bytestring const-decl "bytestring" bytestrings nil) (max32 const-decl "uint32" integertypes nil) (u32div const-decl "uint32" integertypes nil) (u32times const-decl "uint32" integertypes nil) (get const-decl "byte" bytestrings nil) (u8lshift const-decl "uint8" integertypes nil) (hexvalue const-decl "byte" hex nil) (max8 const-decl "uint8" integertypes nil) (hex2byte const-decl "byte" hex nil) (hex2bytestring const-decl "bytestring" hex nil) (iccteststring3 const-decl "bytestring" iccMax2c nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nil application-judgement "above(n)" exp2 nil) (int_times_int_is_int application-judgement "int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil)) nil (test3 subtype "0" "naturalnumbers.upto(iccMax2c.iccteststring3`length)")))("iccMax2c" iccMax2c test4_TCC1 0 (test4_TCC1-1 nil 3850179737 ("" (subtype-tcc) nil nil) nil nil (test4 subtype "iccMax2c.iccteststring4`length" "naturalnumbers.upto(modulo_arithmetic.ndiv(iccMax2c.iccteststring4`length, 8))")))("iccMax2c" iccMax2c test4_TCC2 0 (test4_TCC2-1 nil 3850179737 ("" (subtype-tcc) nil nil) ((nil application-judgement "upto(n)" modulo_arithmetic nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (list2finseq const-decl "finseq[T]" list2finseq nil) (get const-decl "char" gen_strings nil) (mk_bytestring const-decl "bytestring" bytestrings nil) (max32 const-decl "uint32" integertypes nil) (u32div const-decl "uint32" integertypes nil) (u32times const-decl "uint32" integertypes nil) (get const-decl "byte" bytestrings nil) (u8lshift const-decl "uint8" integertypes nil) (hexvalue const-decl "byte" hex nil) (max8 const-decl "uint8" integertypes nil) (hex2byte const-decl "byte" hex nil) (hex2bytestring const-decl "bytestring" hex nil) (iccteststring4 const-decl "bytestring" iccMax2c nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nil application-judgement "above(n)" exp2 nil) (int_times_int_is_int application-judgement "int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil)) nil (test4 subtype "0" "naturalnumbers.upto(iccMax2c.iccteststring4`length)")))("iccMax2c" iccMax2c test1_TCC1 0 (test1_TCC1-1 nil 3850179737 ("" (assert) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil (test1 subtype "iccMax2c.iccteststring1`length" "naturalnumbers.upto(iccMax2c.iccteststring1`length)")))("iccMax2c" iccMax2c test1_TCC2 0 (test1_TCC2-1 nil 3850179737 ("" (assert) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil (test1 subtype "0" "naturalnumbers.upto(iccMax2c.iccteststring1`length)")))("iccMax2c" iccMax2c test2_TCC1 0 (test2_TCC1-1 nil 3850179737 ("" (subtype-tcc) nil nil) ((nil application-judgement "upto(n)" modulo_arithmetic nil) (list2finseq const-decl "finseq[T]" list2finseq nil) (get const-decl "char" gen_strings nil) (mk_bytestring const-decl "bytestring" bytestrings nil) (max32 const-decl "uint32" integertypes nil) (u32div const-decl "uint32" integertypes nil) (u32times const-decl "uint32" integertypes nil) (get const-decl "byte" bytestrings nil) (u8lshift const-decl "uint8" integertypes nil) (hexvalue const-decl "byte" hex nil) (max8 const-decl "uint8" integertypes nil) (hex2byte const-decl "byte" hex nil) (hex2bytestring const-decl "bytestring" hex nil) (iccteststring2 const-decl "bytestring" iccMax2c nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nil application-judgement "above(n)" exp2 nil) (int_times_int_is_int application-judgement "int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil)) nil (test2 subtype "iccMax2c.iccteststring2`length" "naturalnumbers.upto(iccMax2c.iccteststring2`length)")))("iccMax2c" iccMax2c test3_TCC1 0 (test3_TCC1-1 nil 3850179737 ("" (assert) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil (test3 subtype "iccMax2c.iccteststring3`length" "naturalnumbers.upto(iccMax2c.iccteststring3`length)")))("iccMax2c" iccMax2c test3_TCC2 0 (test3_TCC2-1 nil 3850179737 ("" (assert) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil (test3 subtype "0" "naturalnumbers.upto(iccMax2c.iccteststring3`length)")))("iccMax2c" iccMax2c test4_TCC1 0 (test4_TCC1-1 nil 3850179737 ("" (subtype-tcc) nil nil) ((nil application-judgement "upto(n)" modulo_arithmetic nil) (list2finseq const-decl "finseq[T]" list2finseq nil) (get const-decl "char" gen_strings nil) (mk_bytestring const-decl "bytestring" bytestrings nil) (max32 const-decl "uint32" integertypes nil) (u32div const-decl "uint32" integertypes nil) (u32times const-decl "uint32" integertypes nil) (get const-decl "byte" bytestrings nil) (u8lshift const-decl "uint8" integertypes nil) (hexvalue const-decl "byte" hex nil) (max8 const-decl "uint8" integertypes nil) (hex2byte const-decl "byte" hex nil) (hex2bytestring const-decl "bytestring" hex nil) (iccteststring4 const-decl "bytestring" iccMax2c nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (nil application-judgement "above(n)" exp2 nil) (int_times_int_is_int application-judgement "int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil)) nil (test4 subtype "iccMax2c.iccteststring4`length" "naturalnumbers.upto(iccMax2c.iccteststring4`length)")))("SHA256" SHA256 hex2byte_TCC1 0 (hex2byte_TCC1-1 nil 3842832575 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (byte nonempty-type-eq-decl nil bytestrings nil) (hexdigit? const-decl "bool" SHA256 nil) (int_minus_int_is_int application-judgement "int" integers nil) (hexvalue const-decl "byte" SHA256 nil) (hexalpha? const-decl "bool" SHA256 nil) (digit? const-decl "bool" SHA256 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil (hex2byte subtype "SHA256.hexvalue(SHA256.hd1)" "uint8")))("SHA256" SHA256 hex2byte_TCC2 0 (hex2byte_TCC2-1 nil 3842832575 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (byte nonempty-type-eq-decl nil bytestrings nil) (hexdigit? const-decl "bool" SHA256 nil) (int_minus_int_is_int application-judgement "int" integers nil) (hexvalue const-decl "byte" SHA256 nil) (hexalpha? const-decl "bool" SHA256 nil) (digit? const-decl "bool" SHA256 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil (hex2byte subtype "SHA256.hexvalue(SHA256.hd2)" "uint8")))("SHA256" SHA256 hex2byte_TCC3 0 (hex2byte_TCC3-1 nil 3842832575 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (byte nonempty-type-eq-decl nil bytestrings nil) (hexdigit? const-decl "bool" SHA256 nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (digit? const-decl "bool" SHA256 nil) (hexalpha? const-decl "bool" SHA256 nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (even_minus_even_is_even application-judgement "even_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (odd_minus_even_is_odd application-judgement "odd_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (int_times_int_is_int application-judgement "int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (hexvalue const-decl "byte" SHA256 nil) (exp2 def-decl "posnat" exp2 nil) (u8lshift const-decl "uint8" integertypes nil) (max8 const-decl "uint8" integertypes nil) (u8plus const-decl "uint8" integertypes nil) (nil application-judgement "above(n)" exp2 nil)) nil (hex2byte subtype "integertypes.u8plus(integertypes.u8lshift(SHA256.hexvalue(SHA256.hd1), 4), SHA256.hexvalue(SHA256.hd2))" "byte")))("SHA256" SHA256 w0_TCC1 0 (w0_TCC1-1 nil 3827348879 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil)) nil (w0 subtype "0x0" "uint32")))("KDF" KDF XRESstar_TCC1 0 (XRESstar_TCC1-1 nil 3851185468 ("" (subtype-tcc) nil nil) nil nil (XRESstar subtype "16" "naturalnumbers.upto(length(KDF.Rstar))")))("KDF" KDF XRESstar_TCC2 0 (XRESstar_TCC2-1 nil 3851185468 ("" (subtype-tcc) nil nil) ((get const-decl "byte" bytestrings nil) (suffix const-decl "bytestring" bytestrings nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil (XRESstar subtype "bytestrings.suffix(KDF.Rstar, 16)" "rotate.lbytes(16)")))("Rijndael" Rijndael hex16_TCC1 0 (hex16_TCC1-1 nil 3850231577 ("" (grind) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_times_even_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (exp2 def-decl "posnat" exp2 nil)) nil (hex16 subtype "(# length := 16, seq := Rijndael.X #)" "{X | reals.<(number_fields.*(2, hex.X`length), exp2.exp2(28))}")))("iccMax2c" iccMax2c mapParseArray_TCC1 0 (mapParseArray_TCC1-1 nil 3853112539 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (index type-eq-decl nil integertypes nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil)) nil (mapParseArray subtype "iccMax2c.length" "uint32")))("Milenage" Milenage testK_TCC1 0 (testK_TCC1-1 nil 3849360635 ("" (grind) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (exp2 def-decl "posnat" exp2 nil)) nil (testK subtype "173" "uint8")))("Milenage" Milenage SQN_TCC1 0 (SQN_TCC1-1 nil 3848419886 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (SQN subtype "6" "index")))("Milenage" Milenage AMF_TCC1 0 (AMF_TCC1-1 nil 3848419886 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (AMF subtype "2" "index")))("arrayCount" arrayCount count_TCC1 0 (count_TCC1-1 nil 3798315575 ("" (skeep) (("" (expand "is_finite") (("" (inst + "len" "id") (("" (typepred "id") (("" (expand "bijective?") (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ((is_finite const-decl "bool" finite_sets nil) (NOT const-decl "[bool -> bool]" booleans nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (below type-eq-decl nil nat_types nil) (arr type-eq-decl nil arrayCount nil) (T formal-type-decl nil arrayCount nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) nil (count subtype "{i: naturalnumbers.below(arrayCount.len) | arrayCount.P(arrayCount.A(i))}" "finite_set[below(len)]")))("arrayCount" arrayCount count_TCC2 0 (count_TCC2-1 nil 3798315575 ("" (skeep) (("" (typepred "card[below(len)]({i: below(len) | P(A(i))})") (("1" (replace -1 :hide? t) (("1" (rewrite "Card_injection") (("1" (inst + "id") (("1" (typepred "id") (("1" (expand "bijective?") (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (use "count_TCC1") nil nil)) nil)) nil) ((arr type-eq-decl nil arrayCount nil) (T formal-type-decl nil arrayCount nil) (card const-decl "{n: nat | n = Card(S)}" finite_sets nil) (Card const-decl "nat" finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (set type-eq-decl nil sets nil) (finite_set type-eq-decl nil finite_sets nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil) (Card_injection formula-decl nil finite_sets nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (below type-eq-decl nil nat_types nil) (bijective? const-decl "bool" functions nil) (id const-decl "(bijective?[T, T])" identity nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (count subtype "finite_sets[naturalnumbers.below(arrayCount.len)].card({i: naturalnumbers.below(arrayCount.len) | arrayCount.P(arrayCount.A(i))})" "naturalnumbers.upto(arrayCount.len)")))("arrayCount" arrayCount count_update0 0 (count_update0-1 nil 3804561128 ("" (skeep) (("" (expand "count") (("" (case "{i_1: below(len) | P(A WITH [(i) := u](i_1))} = add(i, {i: below(len) | P(A(i))})") (("1" (replace -1 :hide? t) (("1" (rewrite "card_add") (("1" (grind) nil nil) ("2" (rewrite "finite_subset" :subst ("A" "{i: below(len) | TRUE}")) (("1" (grind) nil nil) ("2" (hide-all-but 1) (("2" (expand "is_finite") (("2" (inst + "len" "LAMBDA (i: below(len)): i") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 3) (("2" (grind-with-ext) nil nil)) nil)) nil)) nil)) nil) ((add const-decl "(nonempty?)" sets nil) (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil) (arr type-eq-decl nil arrayCount nil) (T formal-type-decl nil arrayCount nil) (= const-decl "[T, T -> boolean]" equalities nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (card_add formula-decl nil finite_sets nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (below type-eq-decl nil nat_types nil) (NOT const-decl "[bool -> bool]" booleans nil) (injective? const-decl "bool" functions nil) (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (finite_subset formula-decl nil finite_sets nil) (TRUE const-decl "bool" booleans nil) (count const-decl "upto(len)" arrayCount nil)) shostak))("arrayCount" arrayCount count_update 0 (count_update-1 nil 3798315577 ("" (skeep) (("" (expand "count") (("" (case "{i_1: below(len) | P(A WITH [(i) := u](i_1))} = add(i, {i: below(len) | P(A(i))})") (("1" (replace -1 :hide? t) (("1" (rewrite "card_add") (("1" (grind) nil nil) ("2" (rewrite "finite_subset" :subst ("A" "{i: below(len) | TRUE}")) (("1" (grind) nil nil) ("2" (hide-all-but 1) (("2" (expand "is_finite") (("2" (inst + "len" "LAMBDA (i: below(len)): i") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 3) (("2" (grind-with-ext) nil nil)) nil)) nil)) nil)) nil) ((count const-decl "upto(len)" arrayCount nil) (TRUE const-decl "bool" booleans nil) (finite_subset formula-decl nil finite_sets nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (injective? const-decl "bool" functions nil) (NOT const-decl "[bool -> bool]" booleans nil) (below type-eq-decl nil nat_types nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (card_add formula-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (T formal-type-decl nil arrayCount nil) (arr type-eq-decl nil arrayCount nil) (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil) (add const-decl "(nonempty?)" sets nil)) shostak))("arrayCount" arrayCount count_update00 0 (count_update00-1 nil 3806985200 ("" (skeep) (("" (lift-if) (("" (ground) (("1" (expand count) (("1" (case-replace "{i_1: below(len) | P(A WITH [(i) := u](i_1))} = {i: below(len) | P(A(i))}") (("1" (hide 2) (("1" (grind-with-ext) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (case-replace "{i_1: below(len) | P(A WITH [(i) := u](i_1))} = remove(i, {i: below(len) | P(A(i))})") (("1" (rewrite card_remove) (("1" (use count_TCC1) nil nil)) nil) ("2" (grind-with-ext) nil nil)) nil)) nil) ("3" (expand count) (("3" (case-replace "{i_1: below(len) | P(A WITH [(i) := u](i_1))} = add(i, {i: below(len) | P(A(i))})") (("1" (rewrite card_add) (("1" (use count_TCC1) nil nil)) nil) ("2" (grind-with-ext) nil nil)) nil)) nil) ("4" (expand count) (("4" (case-replace "{i_1: below(len) | P(A WITH [(i) := u](i_1))} = {i: below(len) | P(A(i))}") (("4" (grind-with-ext) nil nil)) nil)) nil)) nil)) nil)) nil) ((card_add formula-decl nil finite_sets nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (add const-decl "(nonempty?)" sets nil) (nonempty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil) (card_remove formula-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (count_TCC1 subtype-tcc nil arrayCount nil) (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (T formal-type-decl nil arrayCount nil) (= const-decl "[T, T -> boolean]" equalities nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) shostak))("arrayCount" arrayCount count_update1 0 (count_update1-1 nil 3799389970 ("" (skeep) (("" (expand "count") (("" (case "{i_1: below(len) | P(A WITH [(i) := u](i_1))} = add(i, {i: below(len) | P(A(i))})") (("1" (replace -1 :hide? t) (("1" (rewrite "card_add") (("1" (grind) nil nil) ("2" (rewrite "finite_subset" :subst ("A" "{i: below(len) | TRUE}")) (("1" (grind) nil nil) ("2" (hide-all-but 1) (("2" (expand "is_finite") (("2" (inst + "len" "LAMBDA (i: below(len)): i") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 3) (("2" (grind-with-ext) nil nil)) nil)) nil)) nil)) nil) ((count const-decl "upto(len)" arrayCount nil) (TRUE const-decl "bool" booleans nil) (finite_subset formula-decl nil finite_sets nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (injective? const-decl "bool" functions nil) (NOT const-decl "[bool -> bool]" booleans nil) (below type-eq-decl nil nat_types nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (card_add formula-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (T formal-type-decl nil arrayCount nil) (arr type-eq-decl nil arrayCount nil) (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil) (add const-decl "(nonempty?)" sets nil)) shostak))("arrayCount" arrayCount count_update2 0 (count_update2-1 nil 3799389749 ("" (skeep) (("" (expand "count") (("" (case "{i_1: below(len) | P(A WITH [(i) := u](i_1))} = remove(i, {i: below(len) | P(A(i))})") (("1" (replace -1 :hide? t) (("1" (rewrite "card_remove") (("1" (grind) nil nil) ("2" (rewrite "finite_subset" :subst ("A" "{i: below(len) | TRUE}")) (("1" (grind) nil nil) ("2" (hide-all-but 1) (("2" (expand "is_finite") (("2" (inst + "len" "LAMBDA (i: below(len)): i") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 3) (("2" (grind-with-ext) nil nil)) nil)) nil)) nil)) nil) ((count const-decl "upto(len)" arrayCount nil) (/= const-decl "boolean" notequal nil) (TRUE const-decl "bool" booleans nil) (finite_subset formula-decl nil finite_sets nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (injective? const-decl "bool" functions nil) (NOT const-decl "[bool -> bool]" booleans nil) (below type-eq-decl nil nat_types nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (card_remove formula-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (T formal-type-decl nil arrayCount nil) (arr type-eq-decl nil arrayCount nil) (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)) shostak))("arrayCount" arrayCount count_update3 0 (count_update3-1 nil 3799420828 ("" (skeep) (("" (expand "count") (("" (case "{i_1: below(len) | P(A WITH [(i) := u](i_1))} = remove(i, {i: below(len) | P(A(i))})") (("1" (replace -1 :hide? t) (("1" (rewrite "card_remove") (("1" (grind) nil nil) ("2" (rewrite "finite_subset" :subst ("A" "{i: below(len) | TRUE}")) (("1" (grind) nil nil) ("2" (hide-all-but 1) (("2" (expand "is_finite") (("2" (inst + "len" "LAMBDA (i: below(len)): i") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 3) (("2" (grind-with-ext) nil nil)) nil)) nil)) nil)) nil) ((count const-decl "upto(len)" arrayCount nil) (/= const-decl "boolean" notequal nil) (TRUE const-decl "bool" booleans nil) (finite_subset formula-decl nil finite_sets nil) (subset_is_partial_order name-judgement "(partial_order?[set[T]])" sets_lemmas nil) (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (injective? const-decl "bool" functions nil) (NOT const-decl "[bool -> bool]" booleans nil) (below type-eq-decl nil nat_types nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (card_remove formula-decl nil finite_sets nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (below type-eq-decl nil naturalnumbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (T formal-type-decl nil arrayCount nil) (arr type-eq-decl nil arrayCount nil) (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)) shostak))("cstopdowntest" cstopdowntest test11_TCC1 0 (test11_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (test11 subtype "9" "uint32")))("testlist" testlist nthrev32_TCC1 0 (nthrev32_TCC1-1 nil 3875481316 ("" (grind :rewrites "length_reverse") nil nil) ((length_reverse formula-decl nil list_props nil)) nil (nthrev32 subtype "testlist.i" "below[length[uint32](reverse[uint32](l32))]")))("testlist" testlist nthrevnat_TCC1 0 (nthrevnat_TCC1-1 nil 3875481316 ("" (grind :rewrites "length_reverse") nil nil) ((length_reverse formula-decl nil list_props nil)) nil (nthrevnat subtype "testlist.i" "below[length[nat](reverse[nat](lnat))]")))("testlist" testlist nthrevreal_TCC1 0 (nthrevreal_TCC1-1 nil 3875481316 ("" (grind :rewrites "length_reverse") nil nil) ((length_reverse formula-decl nil list_props nil)) nil (nthrevreal subtype "testlist.i" "below[length[real](reverse[real](lreal))]")))("testlist" testlist nthrevreal_TCC2 0 (nthrevreal_TCC2-1 nil 3875481316 ("" (subtype-tcc) nil nil) nil nil (nthrevreal subtype "list_props[real].nth(list_props[real].reverse(testlist.lreal), testlist.i)" "nat")))("testlist" testlist nthrevfin_TCC1 0 (nthrevfin_TCC1-1 nil 3875481316 ("" (subtype-tcc) nil nil) nil nil (nthrevfin subtype "testlist.i" "below[length[finseq[uint32]](reverse[finseq[uint32]](lfin))]")))("testlist" testlist nthrevfin_TCC2 0 (nthrevfin_TCC2-1 nil 3875481316 ("" (subtype-tcc) nil nil) nil nil (nthrevfin subtype "list_props[finseq[uint32]].nth(list_props[finseq[uint32]].reverse(testlist.lfin), testlist.i)" "{fs | fs`length = 1}")))("cstopdown" cstopdown subtype_TCC1 0 (subtype_TCC1-1 nil 3804536638 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (exp2 def-decl "posnat" exp2 nil) (nil application-judgement "above(n)" exp2 nil)) nil (subtype_ subtype "cstopdown.x" "uint32")))("cstopdown" cstopdown subtype_TCC2 0 (subtype_TCC2-1 nil 3804564519 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (exp2 def-decl "posnat" exp2 nil)) nil (subtype_ subtype "cstopdown.x" "uint8")))("cstopdown" cstopdown fine_push_entry?_TCC1 0 (fine_push_entry?_TCC1-1 nil 3807728459 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (num_non_terminals const-decl "byte" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (fine_push_entry? subtype "cstopdown.x" "(cstopdown.push?)")))("cstopdown" cstopdown successor_TCC1 0 (successor_TCC1-1 nil 3804904050 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (successor subtype "cstopdown.entry1" "(cstopdown.push?)")))("cstopdown" cstopdown successor_TCC2 0 (successor_TCC2-1 nil 3804904050 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (uint8 type-eq-decl nil integertypes nil) (num_non_terminals const-decl "byte" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil)) nil (successor subtype "cstopdown.entry2" "(cstopdown.push?)")))("cstopdown" cstopdown successor_TCC3 0 (successor_TCC1-1 nil 3804547853 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (uint8 type-eq-decl nil integertypes nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (num_non_terminals const-decl "byte" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (successor subtype "cstopdown.nt1" "non_terminal")))("cstopdown" cstopdown successor_TCC4 0 (successor_TCC1-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (uint8 type-eq-decl nil integertypes nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (successor subtype "cstopdown.p1" "naturalnumbers.upto(cstopdown.len)")))("cstopdown" cstopdown successor_TCC5 0 (successor_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (uint8 type-eq-decl nil integertypes nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (successor subtype "cstopdown.p1" "naturalnumbers.upto(cstopdown.len)")))("cstopdown" cstopdown sigma_restrict_TCC1 0 (sigma_restrict_TCC1-1 nil 3806355895 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (sigma_restrict subtype "0" "T_low[upto(j)]")))("cstopdown" cstopdown sigma_restrict_TCC2 0 (sigma_restrict_TCC2-1 nil 3806355895 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (sigma_restrict subtype "cstopdown.j" "T_high[upto(j)]")))("cstopdown" cstopdown sigma_restrict_TCC3 0 (sigma_restrict_TCC3-1 nil 3806355895 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (sigma_restrict subtype "cstopdown.i" "naturalnumbers.upto(cstopdown.len)")))("cstopdown" cstopdown sigma_restrict_TCC4 0 (sigma_restrict_TCC4-1 nil 3806355895 ("" (assuming-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (integer nonempty-type-from-decl nil integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (sigma_restrict assuming "reals@sigma[naturalnumbers.upto(cstopdown.j)].sigma" "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))("cstopdown" cstopdown sigma_restrict_TCC5 0 (sigma_restrict_TCC5-1 nil 3806360457 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (sigma_restrict subtype "0" "T_low[upto(k)]")))("cstopdown" cstopdown sigma_restrict_TCC6 0 (sigma_restrict_TCC5-1 nil 3806358823 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nil application-judgement "above(n)" exp2 nil)) nil (sigma_restrict subtype "cstopdown.j" "T_high[upto(k)]")))("cstopdown" cstopdown sigma_restrict_TCC7 0 (sigma_restrict_TCC7-1 nil 3806360457 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (sigma_restrict subtype "cstopdown.i" "naturalnumbers.upto(cstopdown.len)")))("cstopdown" cstopdown sigma_restrict_TCC8 0 (sigma_restrict_TCC8-1 nil 3806360457 ("" (assuming-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (integer nonempty-type-from-decl nil integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (sigma_restrict assuming "reals@sigma[naturalnumbers.upto(cstopdown.k)].sigma" "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))("cstopdown" cstopdown sigma_restrict 0 (sigma_restrict-1 nil 3806355895 ("" (skolem + ("len" "A" "_" "_")) (("" (induct j) (("1" (grind) nil nil) ("2" (skeep*) (("2" (expand "sigma" +) (("2" (inst-cp - k) (("2" (inst - "jt + 1") (("1" (ground) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (grind) nil nil)) nil)) nil)) nil) ((T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals) (sigma def-decl "real" sigma reals) (arr type-eq-decl nil arrayCount nil) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) shostak))("cstopdown" cstopdown sigma_restrict_len_TCC1 0 (sigma_restrict_len_TCC1-1 nil 3806360811 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (sigma_restrict_len subtype "0" "T_low[upto(j)]")))("cstopdown" cstopdown sigma_restrict_len_TCC2 0 (sigma_restrict_len_TCC2-1 nil 3806360811 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (sigma_restrict_len subtype "cstopdown.j" "T_high[upto(j)]")))("cstopdown" cstopdown sigma_restrict_len_TCC3 0 (sigma_restrict_len_TCC3-1 nil 3806360811 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (sigma_restrict_len subtype "cstopdown.i" "naturalnumbers.upto(cstopdown.len)")))("cstopdown" cstopdown sigma_restrict_len_TCC4 0 (sigma_restrict_len_TCC4-1 nil 3806360811 ("" (assuming-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (integer nonempty-type-from-decl nil integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil)) nil (sigma_restrict_len assuming "reals@sigma[naturalnumbers.upto(cstopdown.j)].sigma" "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))("cstopdown" cstopdown sigma_restrict_len_TCC5 0 (sigma_restrict_len_TCC5-1 nil 3806936723 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (sigma_restrict_len subtype "0" "T_low[upto(len)]")))("cstopdown" cstopdown sigma_restrict_len_TCC6 0 (sigma_restrict_len_TCC6-1 nil 3806936723 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (sigma_restrict_len subtype "cstopdown.j" "T_high[upto(len)]")))("cstopdown" cstopdown sigma_restrict_len_TCC7 0 (sigma_restrict_len_TCC7-1 nil 3806936723 ("" (assuming-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (integer nonempty-type-from-decl nil integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil)) nil (sigma_restrict_len assuming "reals@sigma[naturalnumbers.upto(cstopdown.len)].sigma" "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))("cstopdown" cstopdown sigma_restrict_len 0 (sigma_restrict_len-1 nil 3806360812 ("" (skeep*) (("" (lemma "sigma_restrict") (("" (inst - len A j len) (("" (ground) nil nil)) nil)) nil)) nil) nil shostak))("cstopdown" cstopdown sigma_nat_TCC1 0 (sigma_nat_TCC1-1 nil 3804912405 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (sigma_nat subtype "0" "T_low[upto(len)]")))("cstopdown" cstopdown sigma_nat_TCC2 0 (sigma_nat_TCC2-1 nil 3804912405 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (sigma_nat subtype "cstopdown.i" "T_high[upto(len)]")))("cstopdown" cstopdown sigma_nat 0 (sigma_nat-1 nil 3804912406 ("" (skolem + ("len" _ _)) (("" (induct-and-simplify i) nil nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)) shostak))("cstopdown" cstopdown sigma_pos_TCC1 0 (sigma_pos_TCC1-1 nil 3804912405 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (sigma_pos subtype "cstopdown.j" "T_high[upto(len)]")))("cstopdown" cstopdown sigma_pos 0 (sigma_pos-1 nil 3804912491 ("" (skolem + ("len" _ _ _)) (("" (induct-and-simplify j) nil nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)) shostak))("cstopdown" cstopdown sigma_dec_TCC1 0 (sigma_dec_TCC1-1 nil 3804994284 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (sigma_dec subtype "cstopdown.j" "T_high[upto(len)]")))("cstopdown" cstopdown sigma_dec 0 (sigma_dec-1 nil 3804993479 ("" (skolem + ("len" _ _ _)) (("" (induct "j") (("1" (grind) nil nil) ("2" (skeep*) (("2" (expand sigma +) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ((T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) shostak))("cstopdown" cstopdown sigma_inc_TCC1 0 (sigma_inc_TCC1-1 nil 3804991042 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (sigma_inc subtype "cstopdown.j" "T_high[upto(len)]")))("cstopdown" cstopdown sigma_inc_TCC2 0 (sigma_inc_TCC2-1 nil 3805854734 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (sigma_inc subtype "cstopdown.j" "T_high[upto(len)]")))("cstopdown" cstopdown sigma_inc 0 (sigma_inc-1 nil 3804994355 ("" (skolem + ("len" _ _ _)) (("" (induct "j") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil) ((T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) shostak))("cstopdown" cstopdown scafcount_TCC1 0 (scafcount_TCC4-1 nil 3806632141 ("" (skolem + (len A P "_")) (("" (case "FORALL ((j: upto(len))):
        sigma[upto(len)]
            (0, j,
             LAMBDA (i: upto(len)): count[ent](num_non_terminals)(P)(A(i)))
         <= (j + 1) * num_non_terminals") (("1" (skeep) (("1" (inst?) (("1" (case "(j + 1) * num_non_terminals <= exp2(64) - 1") (("1" (assert) nil nil) ("2" (hide -1 2) (("2" (use le_times_le_pos :subst (nnx "j + 1" y "exp2(32)" nnz num_non_terminals w "exp2(8)")) (("2" (ground) (("1" (rewrite exp2_sum :dir RL) (("1" (grind) nil nil)) nil) ("2" (assert) (("2" (typepred "num_non_terminals") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (induct-and-simplify j :exclude count) nil nil)) nil)) nil)) nil) ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (below type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (ent type-decl nil cstopdown nil) (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals) (AND const-decl "[bool, bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (uint32 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (even_plus_even_is_even application-judgement "even_int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (exp2_sum formula-decl nil exp2 nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (le_times_le_pos formula-decl nil real_props nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (sigma_nat application-judgement "nat" sigma reals) (pred type-eq-decl nil defined_types nil) (upto_induction formula-decl nil bounded_nat_inductions nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (even_plus_odd_is_odd application-judgement "odd_int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (scafcount subtype "sigma[naturalnumbers.upto(cstopdown.len)].sigma(0, cstopdown.j, LAMBDA (i: naturalnumbers.upto(cstopdown.len)): arrayCount[cstopdown.ent].count(cstopdown.num_non_terminals)(cstopdown.P)(cstopdown.A(i)))" "uint64")))("cstopdown" cstopdown sigma_max 0 (sigma_max-1 nil 3806353166 ("" (induct j) (("1" (skeep) (("1" (expand scafcount) (("1" (expand "sigma" +) (("1" (expand "sigma" +) (("1" (typepred "count(num_non_terminals)(push?)(A(0))") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skeep*) (("2" (expand scafcount) (("2" (expand "sigma" +) (("2" (inst - len A P) (("2" (ground) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (arr type-eq-decl nil arrayCount nil) (count const-decl "upto(len)" arrayCount nil)) shostak))("cstopdown" cstopdown scafcount_max 0 (scafcount_max-1 nil 3807566158 ("" (skeep*) (("" (use sigma_max) (("" (use "le_times_le_pos" :subst (y "exp2(32)" w "exp2(8)")) (("" (ground) (("1" (rewrite exp2_sum :dir RL) (("1" (assert) nil nil)) nil) ("2" (assert) (("2" (typepred num_non_terminals) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil)) shostak))("cstopdown" cstopdown scafcount0_TCC1 0 (scafcount0_TCC1-1 nil 3806988426 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (scafcount0 subtype "0" "naturalnumbers.upto(cstopdown.len)")))("cstopdown" cstopdown scafcount0 0 (scafcount0-1 nil 3806988426 ("" (grind :rewrites count_update00) nil nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil)) shostak))("cstopdown" cstopdown scafcount_step_TCC1 0 (scafcount_step_TCC1-1 nil 3806977775 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil (scafcount_step subtype "(number_fields.+)(cstopdown.j, 1)" "naturalnumbers.upto(cstopdown.len)")))("cstopdown" cstopdown scafcount_step_TCC2 0 (scafcount_step_TCC2-1 nil 3806977775 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (scafcount_step subtype "cstopdown.j" "naturalnumbers.upto(cstopdown.len)")))("cstopdown" cstopdown scafcount_step 0 (scafcount_step-1 nil 3806977775 ("" (skolem + (len "_" "_" "_")) (("" (induct "j") (("1" (grind) nil nil) ("2" (skeep*) (("2" (expand "scafcount" +) (("2" (inst?) (("2" (inst?) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((arr type-eq-decl nil arrayCount nil) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) shostak))("cstopdown" cstopdown scafcount_update 0 (scafcount_update-1 nil 3806936723 ("" (skolem + (len "_" "_" "_" "_" "_" "_")) (("" (induct j) (("1" (skeep*) (("1" (rewrite scafcount0) (("1" (lift-if :updates? nil) (("1" (ground) (("1" (grind) nil nil) ("2" (case "i  = 0") (("1" (assert) (("1" (rewrite count_update00) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("3" (case "i  = 0") (("1" (assert) (("1" (rewrite count_update00) (("1" (grind) nil nil)) nil)) nil) ("2" (case "i  = 0") (("1" (propax) nil nil) ("2" (assert) nil nil)) nil)) nil) ("4" (case "i  = 0") (("1" (assert) (("1" (rewrite count_update00) (("1" (grind) nil nil)) nil)) nil) ("2" (case "i  = 0") (("1" (propax) nil nil) ("2" (grind) nil nil)) nil)) nil) ("5" (case "i  = 0") (("1" (assert) (("1" (rewrite count_update00) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skeep*) (("2" (rewrite scafcount_step) (("2" (rewrite -2) (("2" (hide -2) (("2" (case "i = 1 + jt") (("1" (assert) (("1" (rewrite count_update00) (("1" (grind :rewrites scafcount_step :exclude count) nil nil)) nil)) nil) ("2" (assert) (("2" (grind :rewrites scafcount_step :exclude count) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (count_update00 formula-decl nil arrayCount nil) (arr type-eq-decl nil arrayCount nil)) shostak))("cstopdown" cstopdown pushcount_TCC1 0 (pushcount_TCC1-1 nil 3806632141 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (pushcount subtype "cstopdown.len" "naturalnumbers.upto(cstopdown.len)")))("cstopdown" cstopdown good_stack?_TCC1 0 (good_stack?_TCC1-1 nil 3804904050 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_stack? subtype "cstopdown.stack" "(cstopdown.push?)")))("cstopdown" cstopdown good_stack?_TCC2 0 (good_stack?_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (num_non_terminals const-decl "byte" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_stack? subtype "cstopdown.entry" "(cstopdown.push?)")))("cstopdown" cstopdown good_stack?_TCC3 0 (good_stack?_TCC3-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (uint64 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil (good_stack? subtype "(number_fields.-)(cstopdown.depth, 1)" "uint64")))("cstopdown" cstopdown good_stack?_TCC4 0 (good_stack?_TCC4-1 nil 3804455654 ("" (termination-tcc) nil nil) ((num_non_terminals const-decl "byte" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_stack? termination "cstopdown.good_stack?(cstopdown.len, cstopdown.G, (number_fields.-)(cstopdown.depth, 1), cstopdown.A)" "nil")))("cstopdown" cstopdown good_stack?_TCC5 0 (good_stack?_TCC5-1 nil 3804547853 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (num_non_terminals const-decl "byte" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_stack? subtype "cstopdown.nt(cstopdown.stack)" "non_terminal")))("cstopdown" cstopdown good_stack?_TCC6 0 (good_stack?_TCC5-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (num_non_terminals const-decl "byte" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_stack? subtype "cstopdown.pos(cstopdown.stack)" "naturalnumbers.upto(cstopdown.len)")))("cstopdown" cstopdown mem_stack?_TCC1 0 (mem_stack?_TCC1-1 nil 3804455654 ("" (skeep* :preds? t) (("" (expand "good_stack?") (("" (ground) nil nil)) nil)) nil) ((minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (good_stack? def-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (mem_stack? subtype "(number_fields.-)(cstopdown.depth, 1)" "uint64")))("cstopdown" cstopdown mem_stack?_TCC2 0 (mem_stack?_TCC2-1 nil 3804455654 ("" (termination-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (num_non_terminals const-decl "byte" cstopdown nil)) nil (mem_stack? termination "cstopdown.mem_stack?(cstopdown.len, cstopdown.G, (number_fields.-)(cstopdown.depth, 1), cstopdown.A)" "nil")))("cstopdown" cstopdown mem_stack?_TCC3 0 (mem_stack?_TCC3-1 nil 3804455654 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (uint64 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (fine_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (successor const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (nil application-judgement "above(n)" exp2 nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil (mem_stack? subtype "cstopdown.A(cstopdown.pos(cstopdown.stack))(cstopdown.nt(cstopdown.stack))" "(cstopdown.good_stack?(cstopdown.len, cstopdown.G, (number_fields.-)(cstopdown.depth, 1), cstopdown.A))")))("cstopdown" cstopdown mem_stack_push_TCC1 0 (mem_stack_push_TCC2-1 nil 3807675826 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint64 type-eq-decl nil integertypes nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (fine_push_entry? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil)) nil (mem_stack_push subtype "cstopdown.entry" "(cstopdown.push?)")))("cstopdown" cstopdown mem_stack_push_TCC2 0 (mem_stack_push_TCC1-1 nil 3807675826 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint64 type-eq-decl nil integertypes nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (fine_push_entry? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil)) nil (mem_stack_push subtype "(cstopdown.pos(cstopdown.entry))" "naturalnumbers.upto(cstopdown.len)")))("cstopdown" cstopdown mem_stack_push_TCC3 0 (mem_stack_push_TCC3-1 nil 3807675826 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint64 type-eq-decl nil integertypes nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (fine_push_entry? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (good_good_entry? const-decl "bool" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (mem_stack_push subtype "cstopdown.nt(cstopdown.entry)" "non_terminal")))("cstopdown" cstopdown mem_stack_push 0 (mem_stack_push-1 nil 3807675827 ("" (induct depth) (("1" (lazy-grind :defs nil) nil nil) ("2" (skeep*) (("2" (expand mem_stack?) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (skeep*) (("3" (expand mem_stack? -4) (("3" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (inst?) (("2" (inst?) (("1" (ground) nil nil) ("2" (typepred entry) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (skeep*) (("4" (typepred entry) (("4" (grind) nil nil)) nil)) nil)) nil) ("5" (hide 2) (("5" (skeep*) (("5" (typepred entry) (("5" (grind) nil nil)) nil)) nil)) nil) ("6" (hide 2) (("6" (skeep*) (("6" (typepred entry) (("6" (grind) nil nil)) nil)) nil)) nil) ("7" (hide 2) (("7" (skeep*) (("7" (typepred entry) (("7" (grind) nil nil)) nil)) nil)) nil) ("8" (hide 2) (("8" (skeep*) (("8" (typepred entry) (("8" (grind) nil nil)) nil)) nil)) nil) ("9" (hide 2) (("9" (grind) nil nil)) nil)) nil) nil shostak))("cstopdown" cstopdown good_mem_stack_TCC1 0 (good_mem_stack_TCC1-1 nil 3807728459 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_mem_stack subtype "(cstopdown.pos(cstopdown.entry))" "naturalnumbers.upto(cstopdown.len)")))("cstopdown" cstopdown good_mem_stack_TCC2 0 (good_mem_stack_TCC2-1 nil 3807728459 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint64 type-eq-decl nil integertypes nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (fine_push_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_mem_stack subtype "cstopdown.nt(cstopdown.entry)" "non_terminal")))("cstopdown" cstopdown good_mem_stack 0 (good_mem_stack-1 nil 3804823624 ("" (induct "depth") (("1" (grind) (("1" (expand "good_stack?") (("1" (propax) nil nil)) nil) ("2" (grind) (("2" (expand "good_stack?") (("2" (propax) nil nil)) nil)) nil) ("3" (expand "good_stack?") (("3" (propax) nil nil)) nil) ("4" (expand good_stack?) (("4" (propax) nil nil)) nil) ("5" (expand good_stack?) (("5" (propax) nil nil)) nil) ("6" (expand good_stack?) (("6" (propax) nil nil)) nil)) nil) ("2" (skeep*) (("2" (expand "mem_stack?" +) (("2" (ground) (("1" (typepred stack) (("1" (grind :if-match nil) nil nil)) nil) ("2" (expand "good_stack?" :fnum (-3 4)) (("2" (ground) (("1" (hide -3 4) (("1" (grind) (("1" (typepred entry) (("1" (grind) (("1" (typepred stack) (("1" (grind) (("1" (extensionality "(push?)") (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (extensionality "(push?)") (("2" (inst?) (("2" (ground) nil nil)) nil)) nil) ("3" (extensionality "(push?)") (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -3 2 5) (("2" (lift-if) (("2" (ground) (("2" (lift-if) (("2" (ground) (("2" (extensionality "(push?)") (("2" (inst?) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (inst?) (("3" (ground) (("1" (hide 2) (("1" (lift-if) (("1" (typepred entry) (("1" (grind) (("1" (extensionality "(push?)") (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lift-if) (("2" (ground) (("2" (ground) (("2" (extensionality "(push?)") (("2" (inst?) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide -3 4) (("4" (hide -1) (("4" (lift-if) (("4" (ground) (("4" (ground) (("4" (extensionality "(push?)") (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (hide -3 5) (("5" (case "pos(stack) = pos(entry)") (("1" (case "nt(stack) = nt(entry)") (("1" (extensionality "(push?)") (("1" (assert) (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (typepred u) (("2" (grind) nil nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("6" (inst? :polarity? t) (("6" (ground) (("1" (hide 2) (("1" (lift-if) (("1" (ground) (("1" (ground) (("1" (extensionality "(push?)") (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lift-if) (("2" (ground) (("2" (ground) (("2" (extensionality "(push?)") (("2" (inst?) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (grind) nil nil)) nil) ("5" (hide 2) (("5" (grind) nil nil)) nil) ("6" (hide 2) (("6" (grind) nil nil)) nil) ("7" (hide 2) (("7" (grind) nil nil)) nil) ("8" (hide 2) (("8" (grind) nil nil)) nil) ("9" (hide 2) (("9" (grind) nil nil)) nil) ("10" (hide 2) (("10" (grind) nil nil)) nil) ("11" (hide 2) (("11" (grind) nil nil)) nil)) nil) nil shostak))("cstopdown" cstopdown mem_mem_stack_TCC1 0 (mem_mem_stack_TCC1-1 nil 3804967699 ("" (skeep*) (("" (lemma good_mem_stack) (("" (inst?) (("" (ground) nil nil)) nil)) nil)) nil) ((good_mem_stack formula-decl nil cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (uint32 type-eq-decl nil integertypes nil) (uint64 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (mem_mem_stack subtype "cstopdown.stack" "(cstopdown.good_stack?(cstopdown.len, cstopdown.G, cstopdown.depth, cstopdown.A WITH [(cstopdown.pos(cstopdown.entry))(cstopdown.nt(cstopdown.entry)) := cstopdown.u]))")))("cstopdown" cstopdown mem_mem_stack 0 (mem_mem_stack-2 "" 3807748697 ("" (induct depth) (("1" (skeep*) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil) ("2" (skeep*) (("2" (expand mem_stack? +) (("2" (lift-if) (("2" (ground) (("2" (case "v = stack") (("1" (assert) nil nil) ("2" (assert) (("2" (inst?) (("2" (ground) (("1" (lift-if -) (("1" (ground) (("1" (lift-if -) (("1" (ground) (("1" (extensionality "(push?)") (("1" (forward-chain -) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand good_stack? -) (("2" (ground) (("1" (case "pos(stack) = pos(entry)") (("1" (case "nt(stack) = nt(entry)") (("1" (assert) (("1" (extensionality "(push?)") (("1" (inst - stack entry) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil) ("2" (case "pos(stack) = pos(entry)") (("1" (case "nt(stack) = nt(entry)") (("1" (assert) (("1" (extensionality "(push?)") (("1" (inst - stack entry) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("3" (case "pos(stack) = pos(entry)") (("1" (case "nt(stack) = nt(entry)") (("1" (extensionality "(push?)") (("1" (inst - stack entry) (("1" (ground) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (grind) nil nil)) nil) ("5" (hide 2) (("5" (grind) nil nil)) nil) ("6" (hide 2) (("6" (skeep*) (("6" (use good_mem_stack) (("6" (ground) nil nil)) nil)) nil)) nil) ("7" (hide 2) (("7" (skeep*) (("7" (typepred entry) (("7" (grind) nil nil)) nil)) nil)) nil) ("8" (hide 2) (("8" (grind) nil nil)) nil) ("9" (hide 2) (("9" (grind) nil nil)) nil) ("10" (hide 2) (("10" (grind) nil nil)) nil) ("11" (hide 2) (("11" (grind) nil nil)) nil) ("12" (hide 2) (("12" (grind) nil nil)) nil)) nil) nil shostak) (mem_mem_stack-1 nil 3804967700 ("" (induct depth) (("1" (skeep*) (("1" (inst?) (("1" (ground) nil nil)) nil)) nil) ("2" (skeep*) (("2" (expand good_stack?) (("2" (grind) nil nil)) nil)) nil) ("3" (skeep*) (("3" (expand mem_stack? +) (("3" (lift-if) (("3" (ground) (("3" (case "v = stack") (("1" (assert) nil nil) ("2" (assert) (("2" (inst?) (("2" (ground) (("1" (lift-if -) (("1" (ground) (("1" (lift-if -) (("1" (ground) (("1" (extensionality "(push?)") (("1" (forward-chain -) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand good_stack? -) (("2" (ground) (("1" (grind) nil nil) ("2" (lift-if 1) (("2" (ground) (("2" (ground) (("2" (extensionality "(push?)") (("2" (forward-chain -) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (lift-if -) (("3" (ground) (("3" (lift-if -) (("3" (ground) (("3" (extensionality "(push?)") (("3" (forward-chain -) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (grind) nil nil)) nil) ("5" (hide 2) (("5" (grind) nil nil)) nil) ("6" (hide 2) (("6" (skeep*) (("6" (lemma good_mem_stack) (("6" (inst?) (("6" (ground) nil nil)) nil)) nil)) nil)) nil) ("7" (hide 2) (("7" (grind) nil nil)) nil) ("8" (hide 2) (("8" (grind) nil nil)) nil) ("9" (hide 2) (("9" (grind) nil nil)) nil) ("10" (hide 2) (("10" (grind) nil nil)) nil) ("11" (hide 2) (("11" (grind) nil nil)) nil) ("12" (hide 2) (("12" (grind) nil nil)) nil)) nil) nil shostak))("cstopdown" cstopdown good_mem_stack_push_TCC1 0 (good_mem_stack_push_TCC2-1 nil 3807665403 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint64 type-eq-decl nil integertypes nil) (uint32 type-eq-decl nil integertypes nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (ent type-decl nil cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (num_non_terminals const-decl "byte" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_mem_stack_push subtype "cstopdown.push(cstopdown.pos, cstopdown.n)" "(cstopdown.good_push_entry?(cstopdown.len))")))("cstopdown" cstopdown good_mem_stack_push_TCC2 0 (good_mem_stack_push_TCC3-1 nil 3807665403 ("" (skeep*) (("" (use exp2_lt :subst (n 41 m 64)) (("" (grind) nil nil)) nil)) nil) ((exp2_lt formula-decl nil exp2 nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (num_non_terminals const-decl "byte" cstopdown nil) (successor const-decl "bool" cstopdown nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_mem_stack_push subtype "(number_fields.+)(cstopdown.depth, 1)" "uint64")))("cstopdown" cstopdown good_mem_stack_push_TCC3 0 (good_mem_stack_push_TCC4-1 nil 3807665403 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint64 type-eq-decl nil integertypes nil) (uint32 type-eq-decl nil integertypes nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (num_non_terminals const-decl "byte" cstopdown nil) (successor const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_mem_stack_push subtype "cstopdown.stack" "(cstopdown.nice_entry?(cstopdown.len, cstopdown.pos))")))("cstopdown" cstopdown good_mem_stack_push 0 (good_mem_stack_push-2 "" 3807671734 ("" (skeep*) (("" (expand good_stack? +) (("" (ground) (("1" (grind) nil nil) ("2" (use good_mem_stack :subst (len len entry "push(pos!1, n)")) (("1" (ground) (("1" (grind) nil nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil shostak) (good_mem_stack_push-1 nil 3807665405 ("" (skeep*) (("" (expand good_stack? +) (("" (ground) (("1" (postpone) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil)) nil)) nil)) nil) nil shostak))("cstopdown" cstopdown fine_stack?_TCC1 0 (fine_stack?_TCC1-1 nil 3807728459 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (uint64 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (fine_push_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (fine_stack? subtype "cstopdown.stack" "(cstopdown.fine_push_entry?(cstopdown.len))")))("cstopdown" cstopdown fine_stack?_TCC2 0 (fine_stack?_TCC1-1 nil 3804908888 ("" (skeep*) (("" (typepred stack) (("" (grind) nil nil)) nil)) nil) ((good_stack? def-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (uint64 type-eq-decl nil integertypes nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (good_push_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (fine_stack? subtype "cstopdown.rest" "(cstopdown.good_stack?(cstopdown.len, cstopdown.G, (number_fields.-)(cstopdown.depth, 1), cstopdown.A))")))("cstopdown" cstopdown fine_stack?_TCC3 0 (fine_stack?_TCC2-1 nil 3804908888 ("" (skeep*) (("" (ground) (("" (typepred stack) (("" (grind) nil nil)) nil)) nil)) nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (fine_stack? subtype "(number_fields.-)(cstopdown.depth, 1)" "uint64")))("cstopdown" cstopdown fine_stack?_TCC4 0 (fine_stack?_TCC3-1 nil 3804908888 ("" (skeep*) (("" (ground) (("1" (typepred "stack") (("1" (grind) nil nil)) nil) ("2" (typepred "stack") (("2" (grind) nil nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (fine_stack? subtype "cstopdown.A(cstopdown.pos(cstopdown.stack))(cstopdown.nt(cstopdown.stack))" "(cstopdown.good_stack?(cstopdown.len, cstopdown.G, (number_fields.-)(cstopdown.depth, 1), cstopdown.A))")))("cstopdown" cstopdown fine_stack?_TCC5 0 (fine_stack?_TCC4-1 nil 3804908888 ("" (termination-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (num_non_terminals const-decl "byte" cstopdown nil)) nil (fine_stack? termination "cstopdown.fine_stack?(cstopdown.len, cstopdown.G, (number_fields.-)(cstopdown.depth, 1), cstopdown.A)" "nil")))("cstopdown" cstopdown fine_mem_stack_TCC1 0 (fine_mem_stack_TCC1-1 nil 3804969900 ("" (skeep*) (("" (rewrite good_mem_stack) (("" (grind) nil nil)) nil)) nil) ((good_mem_stack formula-decl nil cstopdown nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint64 type-eq-decl nil integertypes nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (ent type-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (fine_mem_stack subtype "cstopdown.stack" "(cstopdown.good_stack?(cstopdown.len, cstopdown.G, cstopdown.depth, cstopdown.A WITH [(cstopdown.pos(cstopdown.entry))(cstopdown.nt(cstopdown.entry)) := cstopdown.u]))")))("cstopdown" cstopdown fine_mem_stack 0 (fine_mem_stack-1 nil 3804969200 ("" (induct "depth") (("1" (skeep*) (("1" (expand fine_stack?) (("1" (expand good_stack? -) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (skeep*) (("2" (expand fine_stack? +) (("2" (expand good_stack? -3) (("2" (ground) (("1" (rewrite mem_mem_stack) (("1" (expand mem_stack? 2) (("1" (ground) (("1" (lift-if +) (("1" (ground) (("1" (lift-if +) (("1" (ground) (("1" (extensionality "(push?)") (("1" (forward-chain -) (("1" (assert) nil nil)) nil)) nil) ("2" (inst?) (("2" (ground) (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -5 4) (("2" (lift-if +) (("2" (ground) (("2" (ground) (("2" (expand mem_stack? +) (("2" (ground) (("2" (extensionality "(push?)") (("2" (forward-chain -) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -5 4) (("3" (grind) nil nil)) nil) ("4" (hide -6 3) (("4" (grind) (("4" (extensionality "(push?)") (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil) ("5" (hide -5 4) (("5" (grind) (("1" (extensionality "(push?)") (("1" (inst?) (("1" (ground) nil nil)) nil)) nil) ("2" (extensionality "(push?)") (("2" (inst?) (("2" (ground) nil nil)) nil)) nil) ("3" (extensionality "(push?)") (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite mem_mem_stack) (("1" (expand mem_stack? 2) (("1" (ground) (("1" (lift-if +) (("1" (ground) (("1" (lift-if +) (("1" (ground) (("1" (extensionality "(push?)") (("1" (forward-chain -) (("1" (assert) nil nil)) nil)) nil) ("2" (inst?) (("2" (ground) (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -5 4) (("2" (hide -1) (("2" (grind) (("2" (extensionality "(push?)") (("2" (inst?) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -5 4) (("3" (hide -1) (("3" (grind) nil nil)) nil)) nil) ("4" (hide -6 3) (("4" (hide -2) (("4" (grind) (("4" (extensionality "(push?)") (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (hide -5 4) (("5" (hide -1) (("5" (grind) (("1" (hide -5 4) (("1" (hide -1) (("1" (grind) (("1" (extensionality "(push?)") (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (extensionality "(push?)") (("2" (inst?) (("2" (ground) nil nil)) nil)) nil) ("3" (extensionality "(push?)") (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (grind) nil nil)) nil) ("5" (hide 2) (("5" (grind) nil nil)) nil) ("6" (hide 2) (("6" (skeep*) (("6" (use good_mem_stack) (("6" (ground) nil nil)) nil)) nil)) nil) ("7" (grind) nil nil) ("8" (hide 2) (("8" (grind) nil nil)) nil) ("9" (hide 2) (("9" (grind) nil nil)) nil) ("10" (hide 2) (("10" (grind) nil nil)) nil) ("11" (hide 2) (("11" (grind) nil nil)) nil) ("12" (hide 2) (("12" (grind) nil nil)) nil)) nil) nil shostak))("cstopdown" cstopdown loop_ready?_TCC1 0 (loop_ready?_TCC1-1 nil 3804455654 ("" (skeep* :preds? t) (("" (typepred "A(i)(n1)") (("" (grind) nil nil)) nil)) nil) ((scaffold type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (loop_or_push? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (loop_ready? subtype "(number_fields.+)(cstopdown.i, cstopdown.span(cstopdown.A(cstopdown.i)(cstopdown.n1)))" "naturalnumbers.upto(cstopdown.len)")))("cstopdown" cstopdown good_fail?_TCC1 0 (good_fail?_TCC1-1 nil 3804455654 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_fail? subtype "cstopdown.i" "naturalnumbers.below(cstopdown.len)")))("cstopdown" cstopdown good_fail?_TCC2 0 (good_fail?_TCC2-1 nil 3804455654 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_fail? subtype "cstopdown.i" "naturalnumbers.below(cstopdown.len)")))("cstopdown" cstopdown good_fail?_TCC3 0 (good_fail?_TCC3-1 nil 3804991042 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_fail? subtype "cstopdown.A(cstopdown.i)(cstopdown.n1)" "{x: cstopdown.ent | booleans.OR(cstopdown.fail?(x), cstopdown.good?(x))}")))("cstopdown" cstopdown good_fail?_TCC4 0 (good_fail?_TCC3-1 nil 3804455654 ("" (grind) (("" (typepred "A!1(i!1)(n1!1)") (("" (grind) nil nil)) nil)) nil) ((ent type-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_fail? subtype "(number_fields.+)(cstopdown.i, cstopdown.span(cstopdown.A(cstopdown.i)(cstopdown.n1)))" "naturalnumbers.upto(cstopdown.len)")))("cstopdown" cstopdown good_fail?_TCC5 0 (good_fail?_TCC5-1 nil 3806878024 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (nil application-judgement "above(n)" exp2 nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil (good_fail? subtype "cstopdown.A(cstopdown.i)(cstopdown.n1)" "{x: cstopdown.ent | booleans.OR(cstopdown.fail?(x), cstopdown.good?(x))}")))("cstopdown" cstopdown good_fail?_TCC6 0 (good_fail?_TCC6-1 nil 3806878024 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (nil application-judgement "above(n)" exp2 nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil (good_fail? subtype "cstopdown.A((number_fields.+)(cstopdown.i, cstopdown.span(cstopdown.A(cstopdown.i)(cstopdown.n1))))(cstopdown.n2)" "{x: cstopdown.ent | booleans.OR(cstopdown.fail?(x), cstopdown.good?(x))}")))("cstopdown" cstopdown good_fail?_TCC7 0 (good_fail?_TCC7-1 nil 3806878024 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_fail? subtype "cstopdown.A(cstopdown.i)(cstopdown.n1)" "{x: cstopdown.ent | booleans.OR(cstopdown.fail?(x), cstopdown.good?(x))}")))("cstopdown" cstopdown good_fail?_TCC8 0 (good_fail?_TCC8-1 nil 3806878024 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_fail? subtype "cstopdown.A(cstopdown.i)(cstopdown.n2)" "{x: cstopdown.ent | booleans.OR(cstopdown.fail?(x), cstopdown.good?(x))}")))("cstopdown" cstopdown good_fail?_TCC9 0 (good_fail?_TCC9-1 nil 3806878024 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_fail? subtype "cstopdown.A(cstopdown.i)(cstopdown.n1)" "{x: cstopdown.ent | booleans.OR(cstopdown.fail?(x), cstopdown.good?(x))}")))("cstopdown" cstopdown good_fail?_TCC10 0 (good_fail?_TCC10-1 nil 3806878024 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_fail? subtype "cstopdown.A(cstopdown.i)(cstopdown.n1)" "{x: cstopdown.ent | booleans.OR(cstopdown.fail?(x), cstopdown.good?(x))}")))("cstopdown" cstopdown good_loop?_TCC1 0 (good_loop?_TCC1-1 nil 3804455654 ("" (skeep* :preds? t) (("" (typepred "A(i)(n1)") (("" (grind) nil nil)) nil)) nil) ((scaffold type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_loop? subtype "(number_fields.+)(cstopdown.i, cstopdown.span(cstopdown.A(cstopdown.i)(cstopdown.n1)))" "naturalnumbers.upto(cstopdown.len)")))("cstopdown" cstopdown good_good?_TCC1 0 (good_good?_TCC1-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (good_good? subtype "(number_fields.-)(cstopdown.len, cstopdown.i)" "nat")))("cstopdown" cstopdown good_good?_TCC2 0 (good_good?_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_u32_u32 application-judgement "int64" integertypes nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_good? subtype "cstopdown.i" "naturalnumbers.below(cstopdown.len)")))("cstopdown" cstopdown good_good?_TCC3 0 (good_good?_TCC3-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_u32_u32 application-judgement "int64" integertypes nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_good? subtype "cstopdown.i" "naturalnumbers.below(cstopdown.len)")))("cstopdown" cstopdown good_good?_TCC4 0 (good_good?_TCC4-1 nil 3804455654 ("" (skeep* :preds? t) (("" (typepred "A(i)(n1)") (("" (grind) nil nil)) nil)) nil) ((scaffold type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_good? subtype "(number_fields.+)(cstopdown.i, cstopdown.span(cstopdown.A(cstopdown.i)(cstopdown.n1)))" "naturalnumbers.upto(cstopdown.len)")))("cstopdown" cstopdown good_good?_TCC5 0 (good_good?_TCC5-1 nil 3804991042 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_good? subtype "cstopdown.A(cstopdown.i)(cstopdown.n1)" "{x: cstopdown.ent | booleans.OR(cstopdown.fail?(x), cstopdown.good?(x))}")))("cstopdown" cstopdown good_good?_TCC6 0 (good_good?_TCC6-1 nil 3806878024 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_good? subtype "cstopdown.A((number_fields.+)(cstopdown.i, cstopdown.span(cstopdown.A(cstopdown.i)(cstopdown.n1))))(cstopdown.n2)" "{x: cstopdown.ent | booleans.OR(cstopdown.fail?(x), cstopdown.good?(x))}")))("cstopdown" cstopdown good_good?_TCC7 0 (good_good?_TCC7-1 nil 3806878024 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_good? subtype "cstopdown.A(cstopdown.i)(cstopdown.n1)" "{x: cstopdown.ent | booleans.OR(cstopdown.fail?(x), cstopdown.good?(x))}")))("cstopdown" cstopdown good_good?_TCC8 0 (good_good?_TCC8-1 nil 3806878024 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (nil application-judgement "above(n)" exp2 nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil (good_good? subtype "cstopdown.A(cstopdown.i)(cstopdown.n1)" "{x: cstopdown.ent | booleans.OR(cstopdown.fail?(x), cstopdown.good?(x))}")))("cstopdown" cstopdown good_good?_TCC9 0 (good_good?_TCC9-1 nil 3806878024 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (nil application-judgement "above(n)" exp2 nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil (good_good? subtype "cstopdown.A(cstopdown.i)(cstopdown.n2)" "{x: cstopdown.ent | booleans.OR(cstopdown.fail?(x), cstopdown.good?(x))}")))("cstopdown" cstopdown good_good?_TCC10 0 (good_good?_TCC10-1 nil 3806878024 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_good? subtype "cstopdown.A(cstopdown.i)(cstopdown.n1)" "{x: cstopdown.ent | booleans.OR(cstopdown.fail?(x), cstopdown.good?(x))}")))("cstopdown" cstopdown good_good?_TCC11 0 (good_good?_TCC11-1 nil 3806878024 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_good? subtype "cstopdown.A(cstopdown.i)(cstopdown.n1)" "{x: cstopdown.ent | booleans.OR(cstopdown.fail?(x), cstopdown.good?(x))}")))("cstopdown" cstopdown good_tscaffold?_TCC1 0 (good_tscaffold?_TCC1-1 nil 3806632141 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (good_or_fail? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (good_tscaffold? subtype "cstopdown.A(cstopdown.i)(cstopdown.n)" "{x: cstopdown.ent | booleans.OR(cstopdown.fail?(x), cstopdown.good?(x))}")))("cstopdown" cstopdown good_good_tscaffold 0 (good_good_tscaffold-2 "updated with depth bound" 3806872130 ("" (skeep*) (("" (expand "good_tscaffold?") (("" (skeep*) (("" (inst - i n) (("" (expand good_entry?) (("" (lift-if + :updates? nil) (("" (ground) (("1" (case "i = pos!1" "n = nt!1") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (assert) (("2" (expand "good_fail?") (("2" (lift-if) (("2" (ground) (("1" (grind) nil nil) ("2" (hide -11) (("2" (grind :exclude gfcount) nil nil)) nil) ("3" (hide -11) (("3" (grind :exclude gfcount) nil nil)) nil) ("4" (hide -10) (("4" (grind :exclude gfcount) nil nil)) nil) ("5" (hide -10) (("5" (grind :exclude gfcount) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -6) (("3" (grind :exclude gfcount) nil nil)) nil)) nil) ("2" (hide -5) (("2" (expand "gfcount" +) (("2" (rewrite "scafcount_update") (("2" (hide -6) (("2" (reveal -3) (("2" (lazy-grind :if-match all :exclude scafcount) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (inst? -) (("3" (grind :exclude gfcount) nil nil)) nil) ("4" (hide -7) (("4" (reveal -2) (("4" (lazy-grind :if-match all :exclude scafcount) nil nil)) nil)) nil) ("5" (typepred u) (("5" (hide -5 -7) (("5" (typepred "A(i)(n)") (("5" (grind :exclude gfcount) nil nil)) nil)) nil)) nil) ("6" (hide -6) (("6" (hide -2) (("6" (lift-if) (("6" (ground) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (lift-if) (("3" (ground) (("1" (expand good_good?) (("1" (lift-if) (("1" (ground) (("1" (ground) (("1" (grind) nil nil) ("2" (grind :exclude max) nil nil)) nil) ("2" (grind :exclude max) nil nil) ("3" (grind :exclude max) nil nil) ("4" (grind :exclude max) nil nil) ("5" (grind :exclude max) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil)) nil)) nil)) nil) ("2" (grind :exclude (max gfcount)) nil nil)) nil)) nil) ("4" (grind :exclude max) nil nil) ("5" (grind :exclude max) nil nil)) nil)) nil)) nil)) nil) ("7" (hide -5 -7) (("7" (typepred "A(i)(n)") (("7" (expand "gfcount" +) (("7" (rewrite scafcount_update) (("7" (reveal -3) (("7" (lazy-grind :if-match all :exclude scafcount) nil nil)) nil)) nil)) nil)) nil)) nil) ("8" (hide -4 -6) (("8" (reveal -3) (("8" (lazy-grind :if-match all :exclude scafcount) nil nil)) nil)) nil) ("9" (hide -5) (("9" (grind :exclude max) nil nil)) nil) ("10" (hide -6) (("10" (expand gfcount) (("10" (reveal -2) (("10" (hide -5) (("10" (rewrite "scafcount_update") (("10" (lift-if) (("10" (ground) (("10" (lift-if) (("10" (ground) (("10" (expand fine_entry?) (("10" (expand "good_fail?") (("10" (lift-if) (("10" (ground) (("1" (inst?) (("1" (grind :exclude scafcount) nil nil)) nil) ("2" (inst? :copy? t) (("2" (inst - "span(A(pos!1)(e1(G(nt!1)))) + pos!1" "e2(G(nt!1))") (("2" (grind :exclude scafcount) nil nil)) nil)) nil) ("3" (inst? :copy? t) (("3" (inst - "pos!1" "e2(G(nt!1))") (("3" (grind :exclude scafcount) nil nil)) nil)) nil) ("4" (inst?) (("4" (grind :exclude scafcount) nil nil)) nil) ("5" (inst?) (("5" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("11" (inst?) (("11" (grind :exclude (max gfcount)) nil nil)) nil) ("12" (hide -4 -6) (("12" (expand gfcount) (("12" (rewrite scafcount_update) (("12" (reveal -3) (("12" (lazy-grind :if-match all :exclude (max scafcount)) nil nil)) nil)) nil)) nil)) nil) ("13" (typepred "A(i)(n)") (("13" (typepred "u") (("13" (hide -5 -7) (("13" (grind :exclude (max gfcount)) nil nil)) nil)) nil)) nil) ("14" (hide -5) (("14" (typepred "A(i)(n)") (("14" (typepred "u") (("14" (grind :exclude (max gfcount)) nil nil)) nil)) nil)) nil) ("15" (hide -6) (("15" (reveal -2) (("15" (expand gfcount) (("15" (rewrite scafcount_update) (("15" (lift-if) (("15" (ground) (("1" (lift-if) (("1" (ground) (("1" (hide -15) (("1" (grind :exclude (max scafcount)) nil nil)) nil)) nil)) nil) ("2" (lift-if) (("2" (ground) (("2" (hide -15) (("2" (grind :exclude (max scafcount)) nil nil)) nil)) nil)) nil) ("3" (lift-if) (("3" (ground) (("3" (hide -16) (("3" (grind :exclude (max scafcount)) nil nil)) nil)) nil)) nil) ("4" (lift-if) (("4" (ground) (("4" (expand fine_entry?) (("4" (ground) (("4" (expand "good_good?") (("4" (lift-if) (("4" (ground) (("1" (inst? :copy? t) (("1" (inst - "span(A(pos!1)(e1(G(nt!1)))) + pos!1" "e2(G(nt!1))") (("1" (grind :exclude scafcount) nil nil)) nil)) nil) ("2" (inst?) (("2" (grind :exclude scafcount) nil nil)) nil) ("3" (inst? :copy? t) (("3" (inst - "pos!1" "e2(G(nt!1))") (("3" (grind :exclude scafcount) nil nil)) nil)) nil) ("4" (inst?) (("4" (grind :exclude scafcount) nil nil)) nil) ("5" (inst?) (("5" (grind :exclude scafcount) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("16" (expand "gfcount" +) (("16" (rewrite scafcount_update) (("16" (hide -5) (("16" (reveal -2) (("16" (lazy-grind :if-match all :exclude (max scafcount)) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals)) shostak) (good_good_tscaffold-1 nil 3804994419 ("" (skeep*) (("" (expand "good_tscaffold?") (("" (skeep*) (("" (inst - i n) (("" (expand good_entry?) (("" (lift-if + :updates? nil) (("" (ground) (("1" (case "i = pos(entry)" "n = nt(entry)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (assert) (("2" (hide -7 -8) (("2" (grind) nil nil)) nil)) nil) ("3" (hide -6 -7) (("3" (grind) nil nil)) nil)) nil) ("2" (case "i = pos(entry)" "n = nt(entry)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (assert) (("2" (forward-chain -) (("2" (grind) nil nil)) nil)) nil) ("3" (assert) (("3" (forward-chain -) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("cstopdown" cstopdown state_TCC1 0 (state_TCC1-1 nil 3804904050 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (ent type-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (good_root? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (good_or_fail? const-decl "bool" cstopdown nil) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (scafcount const-decl "uint64" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (pushcount const-decl "uint64" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (state subtype "cstopdown.stack" "(cstopdown.push?)")))("cstopdown" cstopdown state_TCC2 0 (state_TCC1-1 nil 3804730988 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (ent type-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (sigma_nat application-judgement "nat" sigma reals) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (good_root? const-decl "bool" cstopdown nil) (good_or_fail? const-decl "bool" cstopdown nil) (count const-decl "upto(len)" arrayCount nil) (scafcount const-decl "uint64" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (pushcount const-decl "uint64" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (state subtype "cstopdown.pos(cstopdown.stack)" "naturalnumbers.upto(cstopdown.len)")))("cstopdown" cstopdown state_TCC3 0 (state_TCC2-1 nil 3804730988 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (ent type-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (sigma_nat application-judgement "nat" sigma reals) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (good_root? const-decl "bool" cstopdown nil) (good_or_fail? const-decl "bool" cstopdown nil) (count const-decl "upto(len)" arrayCount nil) (scafcount const-decl "uint64" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (pushcount const-decl "uint64" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (state subtype "cstopdown.nt(cstopdown.stack)" "non_terminal")))("cstopdown" cstopdown step_TCC1 0 (step_TCC66-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (ent type-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (pushcount const-decl "uint64" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (count const-decl "upto(len)" arrayCount nil) (good_or_fail? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.stack" "(cstopdown.push?)")))("cstopdown" cstopdown step_TCC2 0 (step_TCC1-1 nil 3804547853 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (ent type-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (sigma_nat application-judgement "nat" sigma reals) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (good_root? const-decl "bool" cstopdown nil) (good_or_fail? const-decl "bool" cstopdown nil) (count const-decl "upto(len)" arrayCount nil) (scafcount const-decl "uint64" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (pushcount const-decl "uint64" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.cur" "non_terminal")))("cstopdown" cstopdown step_TCC3 0 (step_TCC10-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (ent type-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (sigma_nat application-judgement "nat" sigma reals) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (good_root? const-decl "bool" cstopdown nil) (good_or_fail? const-decl "bool" cstopdown nil) (count const-decl "upto(len)" arrayCount nil) (scafcount const-decl "uint64" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (pushcount const-decl "uint64" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.pos" "naturalnumbers.upto(cstopdown.len)")))("cstopdown" cstopdown step_TCC4 0 (step_TCC4-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (ent type-decl nil cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (sigma_nat application-judgement "nat" sigma reals) (plus_u32_u32 application-judgement "uint64" integertypes nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (good_root? const-decl "bool" cstopdown nil) (good_or_fail? const-decl "bool" cstopdown nil) (count const-decl "upto(len)" arrayCount nil) (scafcount const-decl "uint64" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (pushcount const-decl "uint64" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.good(0, 0)" "(cstopdown.nice_entry?(cstopdown.len, cstopdown.pos))")))("cstopdown" cstopdown step_TCC5 0 (step_TCC5-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (skeep*) (("3" (typepred lflag) (("3" (ground) (("1" (inst?) nil nil) ("2" (hide 2) (("2" (grind) nil nil)) nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (empty? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good? const-decl "bool" cstopdown nil) (good_fail? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (good_tscaffold? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (good_or_fail? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (fine_entry? const-decl "bool" cstopdown nil) (minus_u32_u32 application-judgement "int64" integertypes nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (len skolem-const-decl "uint32" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_good_tscaffold formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good(0, 0)]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(cstopdown.start, cstopdown.rootnt))")))("cstopdown" cstopdown step_TCC6 0 (step_TCC1-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred pos (stack)) (("1" (grind) nil nil)) nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                       count(num_non_terminals)(push?)
                            (St`scaf WITH [(pos!1)(cur) := good(0, 0)](i))) = ((LAMBDA (i: upto(len)):
                       count(num_non_terminals)(push?)(St`scaf(i)))
                      WITH [(pos!1)
                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                  1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                            push?(St`scaf(x!1) WITH [(cur) := good(0, 0)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (ground) (("1" (expand nonempty?) (("1" (expand empty?) (("1" (inst - cur) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (hide -1 3) (("3" (expand count) (("3" (lemma "nonempty_card[below(num_non_terminals)]") (("3" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (pushcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_dec formula-decl nil cstopdown nil) (arr type-eq-decl nil arrayCount nil) (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" cstopdown nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (member const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil) (x!1 skolem-const-decl "upto(len)" cstopdown nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (card_remove formula-decl nil finite_sets nil) (count_TCC1 subtype-tcc nil arrayCount nil) (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil) (nonempty? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty_card formula-decl nil finite_sets nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.-)(cstopdown.depth, 1)" "(cstopdown.good_depth?(cstopdown.len, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good(0, 0)]))")))("cstopdown" cstopdown step_TCC7 0 (step_TCC2-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest "good(0, 0)") (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "good(0, 0)") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (good_stack? def-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (good_push_entry? const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (uint32 type-eq-decl nil integertypes nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (ent type-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (depth skolem-const-decl "(good_depth?(len, St`scaf))" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" cstopdown nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (successor const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (fine_push_entry? const-decl "bool" cstopdown nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (good_mem_stack formula-decl nil cstopdown nil) (fine_mem_stack formula-decl nil cstopdown nil) (mem_stack? def-decl "bool" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.rest" "(cstopdown.fine_stack?(cstopdown.len, cstopdown.G, (number_fields.-)(cstopdown.depth, 1), cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good(0, 0)]))")))("cstopdown" cstopdown step_TCC8 0 (step_TCC83-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (ent type-decl nil cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(cstopdown.nt(cstopdown.rest) = cstopdown.num_non_terminals, cstopdown.loop_ready?(cstopdown.len, cstopdown.G, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good(0, 0)], cstopdown.pos(cstopdown.rest), cstopdown.nt(cstopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(cstopdown.len)), n: (booleans.NOT)(cstopdown.loop?(cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good(0, 0)](i)(cstopdown.n))) ENDIF}")))("cstopdown" cstopdown step_TCC9 0 (step_TCC8-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.fail(0)" "(cstopdown.nice_entry?(cstopdown.len, cstopdown.pos))")))("cstopdown" cstopdown step_TCC10 0 (step_TCC9-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (empty? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_good? const-decl "bool" cstopdown nil) (good_fail? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (good_tscaffold? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (good_or_fail? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (fine_entry? const-decl "bool" cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (len skolem-const-decl "uint32" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (fail adt-constructor-decl "[uint64 -> (fail?)]" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_good_tscaffold formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail(0)]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(cstopdown.start, cstopdown.rootnt))")))("cstopdown" cstopdown step_TCC11 0 (step_TCC6-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred pos (stack)) (("1" (grind) nil nil)) nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                               count(num_non_terminals)(push?)
                                    (St`scaf WITH [(pos!1)(cur) := fail(0)](i))) = ((LAMBDA (i: upto(len)):
                               count(num_non_terminals)(push?)(St`scaf(i)))
                              WITH [(pos!1)
                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                          1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                          push?(St`scaf(x!1) WITH [(cur) := fail(0)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (ground) (("1" (expand nonempty?) (("1" (expand empty?) (("1" (inst - cur) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (hide -1 3) (("3" (expand count) (("3" (lemma "nonempty_card[below(num_non_terminals)]") (("3" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (pushcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_dec formula-decl nil cstopdown nil) (arr type-eq-decl nil arrayCount nil) (fail adt-constructor-decl "[uint64 -> (fail?)]" cstopdown nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (member const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil) (x!1 skolem-const-decl "upto(len)" cstopdown nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (card_remove formula-decl nil finite_sets nil) (count_TCC1 subtype-tcc nil arrayCount nil) (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil) (nonempty? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty_card formula-decl nil finite_sets nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.-)(cstopdown.depth, 1)" "(cstopdown.good_depth?(cstopdown.len, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail(0)]))")))("cstopdown" cstopdown step_TCC12 0 (step_TCC7-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest "fail(0)") (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "fail(0)") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (good_stack? def-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (good_push_entry? const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (uint32 type-eq-decl nil integertypes nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (ent type-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (depth skolem-const-decl "(good_depth?(len, St`scaf))" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (fail adt-constructor-decl "[uint64 -> (fail?)]" cstopdown nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (successor const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (fine_push_entry? const-decl "bool" cstopdown nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (fine_mem_stack formula-decl nil cstopdown nil) (good_mem_stack formula-decl nil cstopdown nil) (mem_stack? def-decl "bool" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.rest" "(cstopdown.fine_stack?(cstopdown.len, cstopdown.G, (number_fields.-)(cstopdown.depth, 1), cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail(0)]))")))("cstopdown" cstopdown step_TCC13 0 (step_TCC84-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (ent type-decl nil cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(cstopdown.nt(cstopdown.rest) = cstopdown.num_non_terminals, cstopdown.loop_ready?(cstopdown.len, cstopdown.G, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail(0)], cstopdown.pos(cstopdown.rest), cstopdown.nt(cstopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(cstopdown.len)), n: (booleans.NOT)(cstopdown.loop?(cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail(0)](i)(cstopdown.n))) ENDIF}")))("cstopdown" cstopdown step_TCC14 0 (step_TCC16-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (ent type-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (sigma_nat application-judgement "nat" sigma reals) (plus_u32_u32 application-judgement "uint64" integertypes nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (good_or_fail? const-decl "bool" cstopdown nil) (count const-decl "upto(len)" arrayCount nil) (scafcount const-decl "uint64" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (pushcount const-decl "uint64" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.pos" "naturalnumbers.below(cstopdown.len)")))("cstopdown" cstopdown step_TCC15 0 (step_TCC14-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (ent type-decl nil cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (good_good? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (minus_u32_u32 application-judgement "int64" integertypes nil) (pushcount const-decl "uint64" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (count const-decl "upto(len)" arrayCount nil) (good_or_fail? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (sigma_nat application-judgement "nat" sigma reals) (num_non_terminals const-decl "byte" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.v" "(cstopdown.nice_entry?(cstopdown.len, cstopdown.pos))")))("cstopdown" cstopdown step_TCC16 0 (step_TCC15-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (empty? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good? const-decl "bool" cstopdown nil) (good_fail? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (good_tscaffold? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (good_or_fail? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (mem_stack? def-decl "bool" cstopdown nil) (fine_entry? const-decl "bool" cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (len skolem-const-decl "uint32" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (v skolem-const-decl "ent" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_good_tscaffold formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.v]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(cstopdown.start, cstopdown.rootnt))")))("cstopdown" cstopdown step_TCC17 0 (step_TCC12-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                       count(num_non_terminals)(push?)
                                                            (St`scaf WITH [(pos!1)(cur) := v](i))) = ((LAMBDA (i: upto(len)):
                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                      WITH [(pos!1)
                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                  1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                    push?(St`scaf(x!1) WITH [(cur) := v](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (ground) (("1" (expand nonempty?) (("1" (expand empty?) (("1" (inst - cur) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (hide -1 3) (("3" (expand count) (("3" (lemma "nonempty_card[below(num_non_terminals)]") (("3" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (successor const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (pushcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_dec formula-decl nil cstopdown nil) (arr type-eq-decl nil arrayCount nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (v skolem-const-decl "ent" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (member const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil) (x!1 skolem-const-decl "upto(len)" cstopdown nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (card_remove formula-decl nil finite_sets nil) (count_TCC1 subtype-tcc nil arrayCount nil) (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil) (nonempty? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty_card formula-decl nil finite_sets nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.-)(cstopdown.depth, 1)" "(cstopdown.good_depth?(cstopdown.len, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.v]))")))("cstopdown" cstopdown step_TCC18 0 (step_TCC13-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest v) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "stack") (("2" (grind) nil nil)) nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "v") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (good_stack? def-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (good_push_entry? const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (uint32 type-eq-decl nil integertypes nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (ent type-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (depth skolem-const-decl "(good_depth?(len, St`scaf))" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (v skolem-const-decl "ent" cstopdown nil) (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (fine_push_entry? const-decl "bool" cstopdown nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (good_mem_stack formula-decl nil cstopdown nil) (fine_mem_stack formula-decl nil cstopdown nil) (mem_stack? def-decl "bool" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.rest" "(cstopdown.fine_stack?(cstopdown.len, cstopdown.G, (number_fields.-)(cstopdown.depth, 1), cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.v]))")))("cstopdown" cstopdown step_TCC19 0 (step_TCC89-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) ((empty? const-decl "bool" cstopdown nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (ent type-decl nil cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(cstopdown.nt(cstopdown.rest) = cstopdown.num_non_terminals, cstopdown.loop_ready?(cstopdown.len, cstopdown.G, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.v], cstopdown.pos(cstopdown.rest), cstopdown.nt(cstopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(cstopdown.len)), n: (booleans.NOT)(cstopdown.loop?(cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.v](i)(cstopdown.n))) ENDIF}")))("cstopdown" cstopdown step_TCC20 0 (step_TCC44-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (ent type-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (sigma_nat application-judgement "nat" sigma reals) (plus_u32_u32 application-judgement "uint64" integertypes nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (good_or_fail? const-decl "bool" cstopdown nil) (count const-decl "upto(len)" arrayCount nil) (scafcount const-decl "uint64" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (pushcount const-decl "uint64" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.pos" "naturalnumbers.below(cstopdown.len)")))("cstopdown" cstopdown step_TCC21 0 (step_TCC20-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (ent type-decl nil cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (good_good? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (minus_u32_u32 application-judgement "int64" integertypes nil) (pushcount const-decl "uint64" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (count const-decl "upto(len)" arrayCount nil) (good_or_fail? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (sigma_nat application-judgement "nat" sigma reals) (num_non_terminals const-decl "byte" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (/= const-decl "boolean" notequal nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.v" "(cstopdown.nice_entry?(cstopdown.len, cstopdown.pos))")))("cstopdown" cstopdown step_TCC22 0 (step_TCC21-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (/= const-decl "boolean" notequal nil) (empty? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good? const-decl "bool" cstopdown nil) (good_fail? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (good_tscaffold? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (good_or_fail? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (mem_stack? def-decl "bool" cstopdown nil) (fine_entry? const-decl "bool" cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (len skolem-const-decl "uint32" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (v skolem-const-decl "ent" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_good_tscaffold formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.v]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(cstopdown.start, cstopdown.rootnt))")))("cstopdown" cstopdown step_TCC23 0 (step_TCC18-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                       count(num_non_terminals)(push?)
                                                            (St`scaf WITH [(pos!1)(cur) := v](i))) = ((LAMBDA (i: upto(len)):
                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                      WITH [(pos!1)
                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                  1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                    push?(St`scaf(x!1) WITH [(cur) := v](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (ground) (("1" (expand nonempty?) (("1" (expand empty?) (("1" (inst - cur) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (hide -1 3) (("3" (expand count) (("3" (lemma "nonempty_card[below(num_non_terminals)]") (("3" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (successor const-decl "bool" cstopdown nil) (/= const-decl "boolean" notequal nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (pushcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_dec formula-decl nil cstopdown nil) (arr type-eq-decl nil arrayCount nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (v skolem-const-decl "ent" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (member const-decl "bool" sets nil) (x!1 skolem-const-decl "upto(len)" cstopdown nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (card_remove formula-decl nil finite_sets nil) (count_TCC1 subtype-tcc nil arrayCount nil) (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil) (nonempty? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty_card formula-decl nil finite_sets nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.-)(cstopdown.depth, 1)" "(cstopdown.good_depth?(cstopdown.len, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.v]))")))("cstopdown" cstopdown step_TCC24 0 (step_TCC19-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest v) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "stack") (("2" (grind) nil nil)) nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "v") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (good_stack? def-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (good_push_entry? const-decl "bool" cstopdown nil) (/= const-decl "boolean" notequal nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (uint32 type-eq-decl nil integertypes nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (ent type-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (depth skolem-const-decl "(good_depth?(len, St`scaf))" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (v skolem-const-decl "ent" cstopdown nil) (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (fine_push_entry? const-decl "bool" cstopdown nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (good_mem_stack formula-decl nil cstopdown nil) (fine_mem_stack formula-decl nil cstopdown nil) (mem_stack? def-decl "bool" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.rest" "(cstopdown.fine_stack?(cstopdown.len, cstopdown.G, (number_fields.-)(cstopdown.depth, 1), cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.v]))")))("cstopdown" cstopdown step_TCC25 0 (step_TCC90-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) ((empty? const-decl "bool" cstopdown nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (ent type-decl nil cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (/= const-decl "boolean" notequal nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(cstopdown.nt(cstopdown.rest) = cstopdown.num_non_terminals, cstopdown.loop_ready?(cstopdown.len, cstopdown.G, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.v], cstopdown.pos(cstopdown.rest), cstopdown.nt(cstopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(cstopdown.len)), n: (booleans.NOT)(cstopdown.loop?(cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.v](i)(cstopdown.n))) ENDIF}")))("cstopdown" cstopdown step_TCC26 0 (step_TCC42-1 nil 3804455654 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst - pos!1 n1) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (gfcount const-decl "uint64" cstopdown nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (lt_times_lt_pos1 formula-decl nil real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (empty? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (good_fail? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (dep shared-adt-accessor-decl "[{x: ent | fail?(x) OR good?(x)} -> uint64]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (good_or_fail? const-decl "bool" cstopdown nil) (sigma_max formula-decl nil cstopdown nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (good_tscaffold? const-decl "bool" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.+)(cstopdown.d1, 1)" "uint64")))("cstopdown" cstopdown step_TCC27 0 (step_TCC43-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.fail((number_fields.+)(cstopdown.d1, 1))" "(cstopdown.nice_entry?(cstopdown.len, cstopdown.pos))")))("cstopdown" cstopdown step_TCC28 0 (step_TCC55-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (empty? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_good? const-decl "bool" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (good_fail? const-decl "bool" cstopdown nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (successor const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (good_tscaffold? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (good_or_fail? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (fine_entry? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (len skolem-const-decl "uint32" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (fail adt-constructor-decl "[uint64 -> (fail?)]" cstopdown nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (d1 skolem-const-decl "uint64" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_good_tscaffold formula-decl nil cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail((number_fields.+)(cstopdown.d1, 1))]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(cstopdown.start, cstopdown.rootnt))")))("cstopdown" cstopdown step_TCC29 0 (step_TCC22-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                                       count(num_non_terminals)(push?)
                                                                            (St`scaf WITH [(pos!1)(cur) := fail(1 + d1)](i))) = ((LAMBDA (i: upto(len)):
                                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                                      WITH [(pos!1)
                                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                  1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                                                push?(St`scaf(x!1) WITH [(cur) := fail(1 + d1)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil) ("3" (skeep*) (("3" (use step_TCC26) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -6 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (skeep*) (("4" (use step_TCC26) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count +) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (ground) (("1" (expand nonempty?) (("1" (expand empty?) (("1" (inst - "nt(stack)") (("1" (grind) nil nil) ("2" (assert) (("2" (typepred "nt(stack)") (("2" (expand "good_push_entry?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "count_TCC1") nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (use step_TCC26) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -1) (("3" (expand count) (("3" (use "nonempty_card[below(num_non_terminals)]") (("1" (ground) (("1" (hide -5 5) (("1" (grind) nil nil)) nil)) nil) ("2" (rewrite "count_TCC1") nil nil)) nil)) nil)) nil) ("4" (hide -1 3) (("4" (grind) nil nil)) nil) ("5" (use step_TCC26) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (pushcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_dec formula-decl nil cstopdown nil) (arr type-eq-decl nil arrayCount nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (fail adt-constructor-decl "[uint64 -> (fail?)]" cstopdown nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (d1 skolem-const-decl "uint64" cstopdown nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (step_TCC26 subtype-tcc nil cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (member const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil) (x!1 skolem-const-decl "upto(len)" cstopdown nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (card_remove formula-decl nil finite_sets nil) (count_TCC1 subtype-tcc nil arrayCount nil) (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil) (empty? const-decl "bool" sets nil) (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))" cstopdown nil) (nonempty? const-decl "bool" sets nil) (nonempty_card formula-decl nil finite_sets nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.-)(cstopdown.depth, 1)" "(cstopdown.good_depth?(cstopdown.len, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail((number_fields.+)(cstopdown.d1, 1))]))")))("cstopdown" cstopdown step_TCC30 0 (step_TCC23-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest "fail(1 + d1)") (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (expand nice_entry?) (("2" (propax) nil nil)) nil)) nil) ("3" (typepred "stack") (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "fail(1 + d1)") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (good_stack? def-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (good_push_entry? const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (uint32 type-eq-decl nil integertypes nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (ent type-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (depth skolem-const-decl "(good_depth?(len, St`scaf))" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (d1 skolem-const-decl "uint64" cstopdown nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (fail adt-constructor-decl "[uint64 -> (fail?)]" cstopdown nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (successor const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (fine_push_entry? const-decl "bool" cstopdown nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (good_mem_stack formula-decl nil cstopdown nil) (fine_mem_stack formula-decl nil cstopdown nil) (mem_stack? def-decl "bool" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.rest" "(cstopdown.fine_stack?(cstopdown.len, cstopdown.G, (number_fields.-)(cstopdown.depth, 1), cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail((number_fields.+)(cstopdown.d1, 1))]))")))("cstopdown" cstopdown step_TCC31 0 (step_TCC95-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (empty? const-decl "bool" cstopdown nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (loop_or_push? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (ent type-decl nil cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(cstopdown.nt(cstopdown.rest) = cstopdown.num_non_terminals, cstopdown.loop_ready?(cstopdown.len, cstopdown.G, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail((number_fields.+)(1, cstopdown.d1))], cstopdown.pos(cstopdown.rest), cstopdown.nt(cstopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(cstopdown.len)), n: (booleans.NOT)(cstopdown.loop?(cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail((number_fields.+)(1, cstopdown.d1))](i)(cstopdown.n))) ENDIF}")))("cstopdown" cstopdown step_TCC32 0 (step_TCC30-1 nil 3804455654 ("" (skeep*) (("" (typepred "St`scaf(pos!1)(n1)") (("" (grind) nil nil)) nil)) nil) ((state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (good_good_entry? const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.+)(cstopdown.pos, cstopdown.sp)" "naturalnumbers.upto(cstopdown.len)")))("cstopdown" cstopdown step_TCC33 0 (step_TCC75-1 nil 3804455654 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst-cp - pos!1 n1) (("" (inst - pos!1+sp n2) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1 + sp)(n2)) = d2") (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) (("1" (expand max) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (sigma_max formula-decl nil cstopdown nil) (good_or_fail? const-decl "bool" cstopdown nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (dep shared-adt-accessor-decl "[{x: ent | fail?(x) OR good?(x)} -> uint64]" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (empty? const-decl "bool" cstopdown nil) (good_good? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (good_fail? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_u32_u32 application-judgement "int64" integertypes nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_times_lt_pos1 formula-decl nil real_props nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (gfcount const-decl "uint64" cstopdown nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (good_tscaffold? const-decl "bool" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.+)(1, real_defs.max(cstopdown.d1, cstopdown.d2))" "uint64")))("cstopdown" cstopdown step_TCC34 0 (step_TCC56-1 nil 3804455654 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (expand nice_entry?) (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (good_tscaffold? const-decl "bool" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.fail((number_fields.+)(1, real_defs.max(cstopdown.d1, cstopdown.d2)))" "(cstopdown.nice_entry?(cstopdown.len, cstopdown.pos))")))("cstopdown" cstopdown step_TCC35 0 (step_TCC63-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (empty? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_plus_real_is_real application-judgement "real" reals nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_good? const-decl "bool" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (good_fail? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (good_tscaffold? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (good_or_fail? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (minus_u32_u32 application-judgement "int64" integertypes nil) (mem_stack? def-decl "bool" cstopdown nil) (fine_entry? const-decl "bool" cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (len skolem-const-decl "uint32" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (fail adt-constructor-decl "[uint64 -> (fail?)]" cstopdown nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (d1 skolem-const-decl "uint64" cstopdown nil) (d2 skolem-const-decl "uint64" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_good_tscaffold formula-decl nil cstopdown nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail((number_fields.+)(1, real_defs.max(cstopdown.d1, cstopdown.d2)))]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(cstopdown.start, cstopdown.rootnt))")))("cstopdown" cstopdown step_TCC36 0 (step_TCC31-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (rewrite scafcount_update) (("1" (grind :exclude scafcount) nil nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (pushcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_plus_real_is_real application-judgement "real" reals nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (fail adt-constructor-decl "[uint64 -> (fail?)]" cstopdown nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (scafcount_update formula-decl nil cstopdown nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.-)(cstopdown.depth, 1)" "(cstopdown.good_depth?(cstopdown.len, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail((number_fields.+)(1, real_defs.max(cstopdown.d1, cstopdown.d2)))]))")))("cstopdown" cstopdown step_TCC37 0 (step_TCC32-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest "fail(1 + max(d1, d2))") (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (expand nice_entry?) (("2" (propax) nil nil)) nil)) nil) ("3" (typepred "stack") (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "fail(1 + max(d1, d2))") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (good_stack? def-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (good_push_entry? const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (uint32 type-eq-decl nil integertypes nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (ent type-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (depth skolem-const-decl "(good_depth?(len, St`scaf))" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (d2 skolem-const-decl "uint64" cstopdown nil) (d1 skolem-const-decl "uint64" cstopdown nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (fail adt-constructor-decl "[uint64 -> (fail?)]" cstopdown nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_plus_real_is_real application-judgement "real" reals nil) (successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (fine_push_entry? const-decl "bool" cstopdown nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (good_mem_stack formula-decl nil cstopdown nil) (fine_mem_stack formula-decl nil cstopdown nil) (mem_stack? def-decl "bool" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.rest" "(cstopdown.fine_stack?(cstopdown.len, cstopdown.G, (number_fields.-)(cstopdown.depth, 1), cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail((number_fields.+)(1, real_defs.max(cstopdown.d1, cstopdown.d2)))]))")))("cstopdown" cstopdown step_TCC38 0 (step_TCC117-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) ((plus_u32_u32 application-judgement "uint64" integertypes nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (empty? const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (loop_or_push? const-decl "bool" cstopdown nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (ent type-decl nil cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(cstopdown.nt(cstopdown.rest) = cstopdown.num_non_terminals, cstopdown.loop_ready?(cstopdown.len, cstopdown.G, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail((number_fields.+)(1, real_defs.max(cstopdown.d1, cstopdown.d2)))], cstopdown.pos(cstopdown.rest), cstopdown.nt(cstopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(cstopdown.len)), n: (booleans.NOT)(cstopdown.loop?(cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail((number_fields.+)(1, real_defs.max(cstopdown.d1, cstopdown.d2)))](i)(cstopdown.n))) ENDIF}")))("cstopdown" cstopdown step_TCC39 0 (step_TCC64-1 nil 3804455654 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst-cp - pos!1 n1) (("" (inst - pos!1+sp n2) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1 + sp)(n2)) = d2") (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) (("1" (expand max) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (sigma_max formula-decl nil cstopdown nil) (good_or_fail? const-decl "bool" cstopdown nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (dep shared-adt-accessor-decl "[{x: ent | fail?(x) OR good?(x)} -> uint64]" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (empty? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (good_good? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_times_int_is_int application-judgement "int" integers nil) (minus_u32_u32 application-judgement "int64" integertypes nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_times_lt_pos1 formula-decl nil real_props nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (gfcount const-decl "uint64" cstopdown nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (good_tscaffold? const-decl "bool" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.+)(1, real_defs.max(cstopdown.d1, cstopdown.d2))" "uint64")))("cstopdown" cstopdown step_TCC40 0 (step_TCC41-1 nil 3804455654 ("" (skeep*) (("" (typepred "St`scaf(pos!1)(n1)") (("" (typepred "St`scaf(pos!1 + sp)(n2)") (("" (typepred len) (("" (grind) nil nil)) nil)) nil)) nil)) nil) ((state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (good_good_entry? const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.+)(cstopdown.sp, cstopdown.sp2)" "uint32")))("cstopdown" cstopdown step_TCC41 0 (step_TCC76-1 nil 3804455654 ("" (skeep*) (("" (typepred "St`scaf(pos!1)(n1)") (("" (typepred "St`scaf(pos!1 + sp)(n2)") (("" (grind) nil nil)) nil)) nil)) nil) ((state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_plus_real_is_real application-judgement "real" reals nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.good((number_fields.+)(1, real_defs.max(cstopdown.d1, cstopdown.d2)), (number_fields.+)(cstopdown.sp, cstopdown.sp2))" "(cstopdown.nice_entry?(cstopdown.len, cstopdown.pos))")))("cstopdown" cstopdown step_TCC42 0 (step_TCC83-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (ground) (("1" (typepred "St`scaf(pos!1 + sp)(n2)") (("1" (grind) nil nil)) nil) ("2" (expand good_good?) (("2" (grind :exclude (max gfcount)) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "St`scaf(pos!1 + sp)(n2)") (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (empty? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_plus_real_is_real application-judgement "real" reals nil) (good_good? const-decl "bool" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (good_fail? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (good_tscaffold? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (good_or_fail? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (minus_u32_u32 application-judgement "int64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (fine_entry? const-decl "bool" cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (len skolem-const-decl "uint32" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" cstopdown nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (d1 skolem-const-decl "uint64" cstopdown nil) (d2 skolem-const-decl "uint64" cstopdown nil) (sp2 skolem-const-decl "uint32" cstopdown nil) (sp skolem-const-decl "uint32" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_good_tscaffold formula-decl nil cstopdown nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good((number_fields.+)(1, real_defs.max(cstopdown.d1, cstopdown.d2)), (number_fields.+)(cstopdown.sp, cstopdown.sp2))]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(cstopdown.start, cstopdown.rootnt))")))("cstopdown" cstopdown step_TCC43 0 (step_TCC39-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)
                                                                                    (St`scaf WITH [(pos!1)(cur) := good(1 + max(d1, d2), sp2 + sp)](i))) = ((LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                                              WITH [(pos!1)
                                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                          1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                                                              push?(St`scaf(x!1) WITH [(cur) := good(1 + max(d1, d2), sp2 + sp)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "St`scaf(pos!1 + sp)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (skeep*) (("3" (use step_TCC40) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide -6 2) (("4" (typepred "St`scaf(pos!1)(n1)") (("4" (typepred "St`scaf(pos!1 + sp)(n2)") (("4" (skeep*) (("4" (use step_TCC39) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (skeep*) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1 + sp)(n2)") (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (skeep*) (("4" (use step_TCC40) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (skeep*) (("5" (use step_TCC39) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil) ("3" (hide 2) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1 + sp)(n2)") (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (use step_TCC40) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (hide 2) (("5" (use step_TCC39) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -1 3) (("3" (expand count) (("3" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil) ("4" (hide -1 3) (("4" (typepred "St`scaf(pos!1)(n1)") (("4" (typepred "St`scaf(pos!1 + sp)(n2)") (("4" (grind) nil nil)) nil)) nil)) nil) ("5" (hide -1 3) (("5" (use step_TCC40) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("6" (hide -1 3) (("6" (use step_TCC39) (("6" (ground) (("6" (inst?) (("6" (inst?) (("6" (inst?) (("6" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (pushcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_dec formula-decl nil cstopdown nil) (arr type-eq-decl nil arrayCount nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" cstopdown nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (sp skolem-const-decl "uint32" cstopdown nil) (sp2 skolem-const-decl "uint32" cstopdown nil) (d2 skolem-const-decl "uint64" cstopdown nil) (d1 skolem-const-decl "uint64" cstopdown nil) (step_TCC39 subtype-tcc nil cstopdown nil) (step_TCC40 subtype-tcc nil cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_plus_real_is_real application-judgement "real" reals nil) (member const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil) (x!1 skolem-const-decl "upto(len)" cstopdown nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (card_remove formula-decl nil finite_sets nil) (count_TCC1 subtype-tcc nil arrayCount nil) (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil) (nonempty_card formula-decl nil finite_sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.-)(cstopdown.depth, 1)" "(cstopdown.good_depth?(cstopdown.len, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good((number_fields.+)(1, real_defs.max(cstopdown.d1, cstopdown.d2)), (number_fields.+)(cstopdown.sp, cstopdown.sp2))]))")))("cstopdown" cstopdown step_TCC44 0 (step_TCC40-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest "good(1 + max(d1, d2), sp2 + sp)") (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "stack") (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "St`scaf(pos!1 + sp)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("3" (use step_TCC43) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "good(1 + max(d1, d2), sp2 + sp)") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "St`scaf(pos!1 + sp)(n2)") (("2" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (good_stack? def-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (good_push_entry? const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (uint32 type-eq-decl nil integertypes nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (ent type-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (depth skolem-const-decl "(good_depth?(len, St`scaf))" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (sp skolem-const-decl "uint32" cstopdown nil) (sp2 skolem-const-decl "uint32" cstopdown nil) (d2 skolem-const-decl "uint64" cstopdown nil) (d1 skolem-const-decl "uint64" cstopdown nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" cstopdown nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_plus_real_is_real application-judgement "real" reals nil) (successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (fine_push_entry? const-decl "bool" cstopdown nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (step_TCC43 subtype-tcc nil cstopdown nil) (good_mem_stack formula-decl nil cstopdown nil) (fine_mem_stack formula-decl nil cstopdown nil) (mem_stack? def-decl "bool" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.rest" "(cstopdown.fine_stack?(cstopdown.len, cstopdown.G, (number_fields.-)(cstopdown.depth, 1), cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good((number_fields.+)(1, real_defs.max(cstopdown.d1, cstopdown.d2)), (number_fields.+)(cstopdown.sp, cstopdown.sp2))]))")))("cstopdown" cstopdown step_TCC45 0 (step_TCC81-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) ((plus_u32_u32 application-judgement "uint64" integertypes nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (empty? const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (loop_or_push? const-decl "bool" cstopdown nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (ent type-decl nil cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(cstopdown.nt(cstopdown.rest) = cstopdown.num_non_terminals, cstopdown.loop_ready?(cstopdown.len, cstopdown.G, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good((number_fields.+)(1, real_defs.max(cstopdown.d1, cstopdown.d2)), (number_fields.+)(cstopdown.sp2, cstopdown.sp))], cstopdown.pos(cstopdown.rest), cstopdown.nt(cstopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(cstopdown.len)), n: (booleans.NOT)(cstopdown.loop?(cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good((number_fields.+)(1, real_defs.max(cstopdown.d1, cstopdown.d2)), (number_fields.+)(cstopdown.sp2, cstopdown.sp))](i)(cstopdown.n))) ENDIF}")))("cstopdown" cstopdown step_TCC46 0 (step_TCC45-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (ent type-decl nil cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (sigma_nat application-judgement "nat" sigma reals) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (good_root? const-decl "bool" cstopdown nil) (good_or_fail? const-decl "bool" cstopdown nil) (count const-decl "upto(len)" arrayCount nil) (scafcount const-decl "uint64" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (pushcount const-decl "uint64" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (plus_u32_u32 application-judgement "uint64" integertypes nil)) nil (step subtype "cstopdown.St`stack" "(cstopdown.nice_entry?(cstopdown.len, (number_fields.+)(cstopdown.pos, cstopdown.sp)))")))("cstopdown" cstopdown step_TCC47 0 (step_TCC46-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (typepred "St`scaf(pos!1 + sp)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (ground) (("1" (grind) nil nil) ("2" (hide -5) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (hide -1) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (hide -2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (empty? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (push_or_pending? const-decl "bool" cstopdown nil) (sigma_nat application-judgement "nat" sigma reals) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (good_or_fail? const-decl "bool" cstopdown nil) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (scafcount const-decl "uint64" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (fine_entry? const-decl "bool" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (sp skolem-const-decl "uint32" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (len skolem-const-decl "uint32" cstopdown nil) (good_good_tscaffold formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`scaf WITH [((number_fields.+)(cstopdown.pos, cstopdown.sp))(cstopdown.n2) := cstopdown.St`stack]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(cstopdown.start, cstopdown.rootnt))")))("cstopdown" cstopdown step_TCC48 0 (step_TCC49-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred depth) (("1" (expand good_depth?) (("1" (expand pushcount) (("1" (use scafcount_max) (("1" (assert) (("1" (use exp2_lt :subst (n 41 m 64)) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "good_depth?") (("2" (expand pushcount) (("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude (max scafcount)) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((scafcount_max formula-decl nil cstopdown nil) (exp2_lt formula-decl nil exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (pushcount const-decl "uint64" cstopdown nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint64 type-eq-decl nil integertypes nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (ent type-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (good_good_entry? const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (scafcount_update formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.+)(cstopdown.St`depth, 1)" "(cstopdown.good_depth?(cstopdown.len, cstopdown.St`scaf WITH [((number_fields.+)(cstopdown.pos, cstopdown.sp))(cstopdown.n2) := cstopdown.St`stack]))")))("cstopdown" cstopdown step_TCC49 0 (step_TCC50-1 nil 3804455654 ("" (skeep*) (("" (typepred "St`scaf(pos!1)(n1)") (("" (typepred "St`scaf(pos!1 + sp)(n2)") (("" (typepred len) (("" (grind) nil nil)) nil)) nil)) nil)) nil) ((state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (good_good_entry? const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.+)(cstopdown.pos, cstopdown.sp)" "uint32")))("cstopdown" cstopdown step_TCC50 0 (step_TCC65-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil)) nil) ("2" (lemma good_mem_stack) (("2" (expand good_stack? +) (("2" (ground) (("1" (hide -1) (("1" (grind) nil nil)) nil) ("2" (inst - G "depth" len scaf "push(pos!1 + sp, n2)" "stack" stack) (("1" (ground) (("1" (hide 2) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil)) nil)) nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil) ("3" (hide 2) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (grind) nil nil)) nil)) nil) ("4" (typepred "St`scaf(pos!1)(n1)") (("4" (typepred len) (("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand fine_stack? +) (("3" (ground) (("1" (lemma mem_mem_stack) (("1" (inst - G depth len scaf _ _ _ _) (("1" (inst - "push(pos!1 + sp, n2)" "push(pos!1 + sp, n2)" stack stack) (("1" (ground) (("1" (use mem_stack_push) (("1" (ground) nil nil)) nil) ("2" (typepred "St`scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos!1)(n1)") (("3" (grind) nil nil)) nil) ("4" (use mem_stack_push) (("4" (ground) nil nil)) nil) ("5" (typepred "St`scaf(pos!1)(n1)") (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos!1)(n1)") (("3" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (use fine_mem_stack :subst (len len entry "push(pos!1 + sp, n2)")) (("1" (ground) (("1" (hide 2) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil)) nil)) nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos!1)(n1)") (("3" (grind) nil nil)) nil) ("4" (typepred "St`scaf(pos!1)(n1)") (("4" (typepred len) (("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((posint_plus_nnint_is_posint application-judgement "posint" integers nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (uint32 type-eq-decl nil integertypes nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (ent type-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (sp skolem-const-decl "uint32" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (n2 skolem-const-decl "non_terminal" cstopdown nil) (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (mem_stack_push formula-decl nil cstopdown nil) (fine_push_entry? const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (successor const-decl "bool" cstopdown nil) (good_mem_stack formula-decl nil cstopdown nil) (mem_mem_stack formula-decl nil cstopdown nil) (fine_mem_stack formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.push((number_fields.+)(cstopdown.pos, cstopdown.sp), cstopdown.n2)" "(cstopdown.fine_stack?(cstopdown.len, cstopdown.G, (number_fields.+)(cstopdown.St`depth, 1), cstopdown.St`scaf WITH [((number_fields.+)(cstopdown.pos, cstopdown.sp))(cstopdown.n2) := cstopdown.St`stack]))")))("cstopdown" cstopdown step_TCC51 0 (step_TCC82-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (skeep*) (("2" (lift-if) (("2" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((plus_u32_u32 application-judgement "uint64" integertypes nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (ent type-decl nil cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(cstopdown.n2 = cstopdown.num_non_terminals, cstopdown.loop_ready?(cstopdown.len, cstopdown.G, cstopdown.St`scaf WITH [((number_fields.+)(cstopdown.pos, cstopdown.sp))(cstopdown.n2) := cstopdown.St`stack], (number_fields.+)(cstopdown.pos, cstopdown.sp), cstopdown.n2)) ELSE FORALL (i: naturalnumbers.upto(cstopdown.len)), n: (booleans.NOT)(cstopdown.loop?(cstopdown.St`scaf WITH [((number_fields.+)(cstopdown.pos, cstopdown.sp))(cstopdown.n2) := cstopdown.St`stack](i)(cstopdown.n))) ENDIF}")))("cstopdown" cstopdown step_TCC52 0 (step_TCC28-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.loop" "(cstopdown.nice_entry?(cstopdown.len, cstopdown.pos))")))("cstopdown" cstopdown step_TCC53 0 (step_TCC29-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (typepred "St`scaf(pos!1 + sp)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -5) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (empty? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (good_good? const-decl "bool" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (good_fail? const-decl "bool" cstopdown nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (successor const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (good_tscaffold? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (good_or_fail? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (good_good_entry? const-decl "bool" cstopdown nil) (fine_entry? const-decl "bool" cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (len skolem-const-decl "uint32" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (loop adt-constructor-decl "(loop?)" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_good_tscaffold formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(cstopdown.start, cstopdown.rootnt))")))("cstopdown" cstopdown step_TCC54 0 (step_TCC26-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind :exclude sigma) nil nil)) nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)
                                                                                    (St`scaf WITH [(pos!1)(cur) := loop](i))) = ((LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                                              WITH [(pos!1)
                                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                          1])") (("1" (hide -1) (("1" (replace -1 :hide? t) (("1" (assert) nil nil)) nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality :hide? t) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                                                              push?(St`scaf(x!1) WITH [(cur) := loop](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil) ("3" (expand count) (("3" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (pushcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_dec formula-decl nil cstopdown nil) (arr type-eq-decl nil arrayCount nil) (loop adt-constructor-decl "(loop?)" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil) (count_TCC1 subtype-tcc nil arrayCount nil) (card_remove formula-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (finite_set type-eq-decl nil finite_sets nil) (x!1 skolem-const-decl "upto(len)" cstopdown nil) (/= const-decl "boolean" notequal nil) (member const-decl "bool" sets nil) (nonempty_card formula-decl nil finite_sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.-)(cstopdown.depth, 1)" "(cstopdown.good_depth?(cstopdown.len, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop]))")))("cstopdown" cstopdown step_TCC55 0 (step_TCC27-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" loop) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`stack") (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind :exclude mem_stack) nil nil) ("2" (hide -1) (("2" (replace -8) (("2" (replace -9) (("2" (replace -5) (("2" (case-replace "push(pos(St`stack), nt(St`stack)) = St`stack") (("1" (case-replace "St`scaf(pos(St`stack))(nt(St`stack)) = rest") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil) ("2" (apply-extensionality 1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil) ("3" (lemma fine_mem_stack) (("3" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" loop) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand "fine_stack?") (("4" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (case-replace "St`scaf(pos(stack))(nt(stack)) = rest") (("1" (case-replace "push(pos!1, cur) = St`stack") (("1" (assert) nil nil) ("2" (apply-extensionality 1) (("2" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (good_good_entry? const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (uint32 type-eq-decl nil integertypes nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (ent type-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (depth skolem-const-decl "(good_depth?(len, St`scaf))" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (cur skolem-const-decl "uint8" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" cstopdown nil) (loop adt-constructor-decl "(loop?)" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (ent_push_extensionality formula-decl nil cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (fine_push_entry? const-decl "bool" cstopdown nil) (good_mem_stack formula-decl nil cstopdown nil) (fine_mem_stack formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.rest" "(cstopdown.fine_stack?(cstopdown.len, cstopdown.G, (number_fields.-)(cstopdown.depth, 1), cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop]))")))("cstopdown" cstopdown step_TCC56 0 (step_TCC103-1 nil 3804706560 ("" (skeep*) (("" (typepred stack) (("" (grind :exclude mem_stack?) nil nil)) nil)) nil) ((state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (good_stack? def-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (uint64 type-eq-decl nil integertypes nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (good_push_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (loop_or_push? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "booleans.TRUE" "{b: booleans.bool | IF b THEN booleans.OR(cstopdown.nt(cstopdown.rest) = cstopdown.num_non_terminals, cstopdown.loop_ready?(cstopdown.len, cstopdown.G, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop], cstopdown.pos(cstopdown.rest), cstopdown.nt(cstopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(cstopdown.len)), n: (booleans.NOT)(cstopdown.loop?(cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop](i)(cstopdown.n))) ENDIF}")))("cstopdown" cstopdown step_TCC57 0 (step_TCC95-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (ent type-decl nil cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (sigma_nat application-judgement "nat" sigma reals) (plus_u32_u32 application-judgement "uint64" integertypes nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (good_root? const-decl "bool" cstopdown nil) (good_or_fail? const-decl "bool" cstopdown nil) (count const-decl "upto(len)" arrayCount nil) (scafcount const-decl "uint64" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (pushcount const-decl "uint64" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.stack" "(cstopdown.nice_entry?(cstopdown.len, cstopdown.pos))")))("cstopdown" cstopdown step_TCC58 0 (step_TCC77-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (empty? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (successor const-decl "bool" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (good_or_fail? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (sigma_nat application-judgement "nat" sigma reals) (fine_entry? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (loop_or_push? const-decl "bool" cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_push_entry? const-decl "bool" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (good_good_tscaffold formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n1) := cstopdown.stack]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(cstopdown.start, cstopdown.rootnt))")))("cstopdown" cstopdown step_TCC59 0 (step_TCC78-1 nil 3804455654 ("" (skeep*) (("" (split) (("1" (typepred stack) (("1" (typepred depth) (("1" (expand good_depth?) (("1" (expand pushcount) (("1" (use scafcount_max) (("1" (assert) (("1" (use exp2_lt :subst (n 41 m 64)) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "good_depth?") (("2" (expand pushcount) (("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((pushcount const-decl "uint64" cstopdown nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (scafcount const-decl "uint64" cstopdown nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (exp2_lt formula-decl nil exp2 nil) (scafcount_max formula-decl nil cstopdown nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (scafcount_update formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.+)(cstopdown.depth, 1)" "(cstopdown.good_depth?(cstopdown.len, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n1) := cstopdown.stack]))")))("cstopdown" cstopdown step_TCC60 0 (step_TCC94-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (expand "good_stack?" +) (("2" (ground) (("1" (grind) nil nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth" len scaf "push(pos!1, n1)" "stack" stack) (("1" (ground) (("1" (grind) nil nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand fine_stack? +) (("3" (ground) (("1" (lemma mem_mem_stack) (("1" (inst - G depth len scaf _ _ _ _) (("1" (inst - "push(pos!1, n1)" "push(pos!1, n1)" stack stack) (("1" (ground) (("1" (hide -2) (("1" (use mem_stack_push) (("1" (ground) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil) ("4" (use mem_stack_push) (("4" (ground) nil nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (use fine_mem_stack :subst (len len entry "push(pos!1, n1)" u stack stack stack)) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((posint_plus_nnint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_mem_stack formula-decl nil cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (fine_push_entry? const-decl "bool" cstopdown nil) (mem_stack_push formula-decl nil cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))" cstopdown nil) (n1 skolem-const-decl "non_terminal" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (successor const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (mem_mem_stack formula-decl nil cstopdown nil) (fine_mem_stack formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.push(cstopdown.pos, cstopdown.n1)" "(cstopdown.fine_stack?(cstopdown.len, cstopdown.G, (number_fields.+)(cstopdown.depth, 1), cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n1) := cstopdown.stack]))")))("cstopdown" cstopdown step_TCC61 0 (step_TCC104-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (skeep*) (("2" (lift-if) (("2" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (loop_or_push? const-decl "bool" cstopdown nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (ent type-decl nil cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(cstopdown.n1 = cstopdown.num_non_terminals, cstopdown.loop_ready?(cstopdown.len, cstopdown.G, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n1) := cstopdown.stack], cstopdown.pos, cstopdown.n1)) ELSE FORALL (i: naturalnumbers.upto(cstopdown.len)), n: (booleans.NOT)(cstopdown.loop?(cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n1) := cstopdown.stack](i)(cstopdown.n))) ENDIF}")))("cstopdown" cstopdown step_TCC62 0 (step_TCC37-1 nil 3804455654 ("" (grind) nil nil) ((num_non_terminals const-decl "byte" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.loop" "(cstopdown.nice_entry?(cstopdown.len, cstopdown.pos))")))("cstopdown" cstopdown step_TCC63 0 (step_TCC38-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (empty? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_good? const-decl "bool" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (good_fail? const-decl "bool" cstopdown nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (successor const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (good_tscaffold? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (good_or_fail? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (plus_u32_u32 application-judgement "uint64" integertypes nil) (fine_entry? const-decl "bool" cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (len skolem-const-decl "uint32" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (loop adt-constructor-decl "(loop?)" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_good_tscaffold formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(cstopdown.start, cstopdown.rootnt))")))("cstopdown" cstopdown step_TCC64 0 (step_TCC35-1 nil 3804455654 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (good_stack? def-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (uint64 type-eq-decl nil integertypes nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (good_push_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (scafcount_max formula-decl nil cstopdown nil) (exp2_lt formula-decl nil exp2 nil) (loop adt-constructor-decl "(loop?)" cstopdown nil) (scafcount_update formula-decl nil cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (pushcount const-decl "uint64" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.-)(cstopdown.depth, 1)" "(cstopdown.good_depth?(cstopdown.len, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop]))")))("cstopdown" cstopdown step_TCC65 0 (step_TCC36-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" loop) (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u loop stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_mem_stack formula-decl nil cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (fine_push_entry? const-decl "bool" cstopdown nil) (ent_push_extensionality formula-decl nil cstopdown nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (push_or_pending? const-decl "bool" cstopdown nil) (loop adt-constructor-decl "(loop?)" cstopdown nil) (cur skolem-const-decl "uint8" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (depth skolem-const-decl "(good_depth?(len, St`scaf))" cstopdown nil) (fine_mem_stack formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.rest" "(cstopdown.fine_stack?(cstopdown.len, cstopdown.G, (number_fields.-)(cstopdown.depth, 1), cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop]))")))("cstopdown" cstopdown step_TCC66 0 (step_TCC98-1 nil 3804455654 ("" (skeep*) (("" (typepred stack) (("" (expand good_stack?) (("" (ground) (("1" (grind) nil nil) ("2" (grind :exclude (good_stack? fine_stack? mem_stack?)) nil nil)) nil)) nil)) nil)) nil) ((state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (good_stack? def-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (uint64 type-eq-decl nil integertypes nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (good_push_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (successor const-decl "bool" cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "booleans.TRUE" "{b: booleans.bool | IF b THEN booleans.OR(cstopdown.nt(cstopdown.rest) = cstopdown.num_non_terminals, cstopdown.loop_ready?(cstopdown.len, cstopdown.G, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop], cstopdown.pos(cstopdown.rest), cstopdown.nt(cstopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(cstopdown.len)), n: (booleans.NOT)(cstopdown.loop?(cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop](i)(cstopdown.n))) ENDIF}")))("cstopdown" cstopdown step_TCC67 0 (step_TCC84-1 nil 3804455654 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst-cp - pos!1 n1) (("" (inst - pos!1 n2) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n2)) = d2") (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (sigma_max formula-decl nil cstopdown nil) (good_or_fail? const-decl "bool" cstopdown nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (dep shared-adt-accessor-decl "[{x: ent | fail?(x) OR good?(x)} -> uint64]" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (scafcount const-decl "uint64" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (good_fail? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (real_plus_real_is_real application-judgement "real" reals nil) (/= const-decl "boolean" notequal nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_times_lt_pos1 formula-decl nil real_props nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (gfcount const-decl "uint64" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.+)(real_defs.max(cstopdown.d1, cstopdown.d2), 1)" "uint64")))("cstopdown" cstopdown step_TCC68 0 (step_TCC92-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.fail((number_fields.+)(real_defs.max(cstopdown.d1, cstopdown.d2), 1))" "(cstopdown.nice_entry?(cstopdown.len, cstopdown.pos))")))("cstopdown" cstopdown step_TCC69 0 (step_TCC93-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (empty? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_plus_real_is_real application-judgement "real" reals nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_good? const-decl "bool" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (good_fail? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (good_tscaffold? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (good_or_fail? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (fine_entry? const-decl "bool" cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (len skolem-const-decl "uint32" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (fail adt-constructor-decl "[uint64 -> (fail?)]" cstopdown nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (d1 skolem-const-decl "uint64" cstopdown nil) (d2 skolem-const-decl "uint64" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_good_tscaffold formula-decl nil cstopdown nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail((number_fields.+)(real_defs.max(cstopdown.d1, cstopdown.d2), 1))]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(cstopdown.start, cstopdown.rootnt))")))("cstopdown" cstopdown step_TCC70 0 (step_TCC53-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)
                                                                                            (St`scaf WITH [(pos!1)(cur) := fail(1 + max(d1, d2))](i))) = ((LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                                                      WITH [(pos!1)
                                                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                                  1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                                                                            push?(St`scaf(x!1) WITH [(cur) := fail(1 + max(d1, d2))](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil)) nil) ("3" (skeep*) (("3" (use step_TCC67) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -6 2) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1)(n2)") (("3" (skeep*) (("3" (use step_TCC68) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1)(n2)") (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (skeep*) (("4" (use step_TCC67) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil) ("3" (hide 2) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1)(n2)") (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (use step_TCC67) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand count) (("3" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil) ("4" (use step_TCC68) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (hide -1 3) (("5" (use step_TCC67) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (pushcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_dec formula-decl nil cstopdown nil) (arr type-eq-decl nil arrayCount nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (fail adt-constructor-decl "[uint64 -> (fail?)]" cstopdown nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (d2 skolem-const-decl "uint64" cstopdown nil) (d1 skolem-const-decl "uint64" cstopdown nil) (step_TCC68 subtype-tcc nil cstopdown nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (step_TCC67 subtype-tcc nil cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_plus_real_is_real application-judgement "real" reals nil) (member const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil) (x!1 skolem-const-decl "upto(len)" cstopdown nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (card_remove formula-decl nil finite_sets nil) (count_TCC1 subtype-tcc nil arrayCount nil) (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil) (nonempty_card formula-decl nil finite_sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.-)(cstopdown.depth, 1)" "(cstopdown.good_depth?(cstopdown.len, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail((number_fields.+)(real_defs.max(cstopdown.d1, cstopdown.d2), 1))]))")))("cstopdown" cstopdown step_TCC71 0 (step_TCC54-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest "fail(1 + max(d1, d2))") (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "stack") (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "St`scaf(pos!1)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "fail(1 + max(d1, d2))") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "St`scaf(pos!1)(n2)") (("2" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (good_stack? def-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (good_push_entry? const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (uint32 type-eq-decl nil integertypes nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (ent type-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (depth skolem-const-decl "(good_depth?(len, St`scaf))" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (d2 skolem-const-decl "uint64" cstopdown nil) (d1 skolem-const-decl "uint64" cstopdown nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (fail adt-constructor-decl "[uint64 -> (fail?)]" cstopdown nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_plus_real_is_real application-judgement "real" reals nil) (successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (fine_push_entry? const-decl "bool" cstopdown nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (good_mem_stack formula-decl nil cstopdown nil) (fine_mem_stack formula-decl nil cstopdown nil) (mem_stack? def-decl "bool" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.rest" "(cstopdown.fine_stack?(cstopdown.len, cstopdown.G, (number_fields.-)(cstopdown.depth, 1), cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail((number_fields.+)(real_defs.max(cstopdown.d1, cstopdown.d2), 1))]))")))("cstopdown" cstopdown step_TCC72 0 (step_TCC96-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) ((nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (empty? const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (loop_or_push? const-decl "bool" cstopdown nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (ent type-decl nil cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(cstopdown.nt(cstopdown.rest) = cstopdown.num_non_terminals, cstopdown.loop_ready?(cstopdown.len, cstopdown.G, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail((number_fields.+)(1, real_defs.max(cstopdown.d1, cstopdown.d2)))], cstopdown.pos(cstopdown.rest), cstopdown.nt(cstopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(cstopdown.len)), n: (booleans.NOT)(cstopdown.loop?(cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail((number_fields.+)(1, real_defs.max(cstopdown.d1, cstopdown.d2)))](i)(cstopdown.n))) ENDIF}")))("cstopdown" cstopdown step_TCC73 0 (step_TCC101-1 nil 3804455654 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst-cp - pos!1 n1) (("" (inst - pos!1 n2) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n2)) = d2") (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (sigma_max formula-decl nil cstopdown nil) (good_or_fail? const-decl "bool" cstopdown nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (dep shared-adt-accessor-decl "[{x: ent | fail?(x) OR good?(x)} -> uint64]" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (minus_u32_u32 application-judgement "int64" integertypes nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (scafcount const-decl "uint64" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (good_good? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (good_fail? const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (real_plus_real_is_real application-judgement "real" reals nil) (/= const-decl "boolean" notequal nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (lt_times_lt_pos1 formula-decl nil real_props nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (posreal nonempty-type-eq-decl nil real_types nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (gfcount const-decl "uint64" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.+)(real_defs.max(cstopdown.d1, cstopdown.d2), 1)" "uint64")))("cstopdown" cstopdown step_TCC74 0 (step_TCC102-1 nil 3804455654 ("" (skeep*) (("" (typepred "St`scaf(pos!1)(n1)") (("" (typepred "St`scaf(pos!1)(n2)") (("" (grind) nil nil)) nil)) nil)) nil) ((state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_plus_real_is_real application-judgement "real" reals nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.good((number_fields.+)(real_defs.max(cstopdown.d1, cstopdown.d2), 1), cstopdown.sp)" "(cstopdown.nice_entry?(cstopdown.len, cstopdown.pos))")))("cstopdown" cstopdown step_TCC75 0 (step_TCC84-1 nil 3808434333 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (typepred "scaf(pos!1)(n1)") (("2" (typepred "scaf(pos!1)(n2)") (("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (typepred "scaf(pos!1)(n1)") (("2" (typepred "scaf(pos!1)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (empty? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_plus_real_is_real application-judgement "real" reals nil) (good_good? const-decl "bool" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (good_fail? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (good_tscaffold? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (good_or_fail? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (minus_u32_u32 application-judgement "int64" integertypes nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (fine_entry? const-decl "bool" cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (len skolem-const-decl "uint32" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" cstopdown nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (d1 skolem-const-decl "uint64" cstopdown nil) (d2 skolem-const-decl "uint64" cstopdown nil) (sp skolem-const-decl "uint32" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_good_tscaffold formula-decl nil cstopdown nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good((number_fields.+)(real_defs.max(cstopdown.d1, cstopdown.d2), 1), cstopdown.sp)]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(cstopdown.start, cstopdown.rootnt))")))("cstopdown" cstopdown step_TCC76 0 (step_TCC57-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                                                               count(num_non_terminals)(push?)
                                                                                                    (St`scaf WITH [(pos!1)(cur) := good(1 + max(d1, d2), sp)](i))) = ((LAMBDA (i: upto(len)):
                                                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                                                              WITH [(pos!1)
                                                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                                          1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                                                                                          push?(St`scaf(x!1) WITH [(cur) := good(1 + max(d1, d2), sp)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "scaf(pos!1)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (skeep*) (("3" (use step_TCC73) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -6 2) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1)(n2)") (("3" (skeep*) (("3" (use step_TCC74) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1)(n2)") (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (skeep*) (("4" (use step_TCC73) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil) ("3" (hide 2) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1)(n2)") (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (use step_TCC73) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand count) (("3" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil) ("4" (use step_TCC74) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (hide -1 3) (("5" (use step_TCC73) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (pushcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_dec formula-decl nil cstopdown nil) (arr type-eq-decl nil arrayCount nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" cstopdown nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (sp skolem-const-decl "uint32" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (d2 skolem-const-decl "uint64" cstopdown nil) (d1 skolem-const-decl "uint64" cstopdown nil) (step_TCC74 subtype-tcc nil cstopdown nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (step_TCC73 subtype-tcc nil cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_plus_real_is_real application-judgement "real" reals nil) (member const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil) (x!1 skolem-const-decl "upto(len)" cstopdown nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (card_remove formula-decl nil finite_sets nil) (count_TCC1 subtype-tcc nil arrayCount nil) (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil) (nonempty_card formula-decl nil finite_sets nil) (empty? const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.-)(cstopdown.depth, 1)" "(cstopdown.good_depth?(cstopdown.len, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good((number_fields.+)(real_defs.max(cstopdown.d1, cstopdown.d2), 1), cstopdown.sp)]))")))("cstopdown" cstopdown step_TCC77 0 (step_TCC58-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest "good(1 + max(d1, d2), sp)") (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "stack") (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "St`scaf(pos!1)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("3" (use step_TCC76) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "good(1 + max(d1, d2), sp)") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "St`scaf(pos!1)(n2)") (("2" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (good_stack? def-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (good_push_entry? const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (uint32 type-eq-decl nil integertypes nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (ent type-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (depth skolem-const-decl "(good_depth?(len, St`scaf))" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (sp skolem-const-decl "uint32" cstopdown nil) (d2 skolem-const-decl "uint64" cstopdown nil) (d1 skolem-const-decl "uint64" cstopdown nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" cstopdown nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_plus_real_is_real application-judgement "real" reals nil) (successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (fine_push_entry? const-decl "bool" cstopdown nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (step_TCC76 subtype-tcc nil cstopdown nil) (good_mem_stack formula-decl nil cstopdown nil) (fine_mem_stack formula-decl nil cstopdown nil) (mem_stack? def-decl "bool" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.rest" "(cstopdown.fine_stack?(cstopdown.len, cstopdown.G, (number_fields.-)(cstopdown.depth, 1), cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good((number_fields.+)(real_defs.max(cstopdown.d1, cstopdown.d2), 1), cstopdown.sp)]))")))("cstopdown" cstopdown step_TCC78 0 (step_TCC99-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) ((nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (empty? const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (loop_or_push? const-decl "bool" cstopdown nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (ent type-decl nil cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(cstopdown.nt(cstopdown.rest) = cstopdown.num_non_terminals, cstopdown.loop_ready?(cstopdown.len, cstopdown.G, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good((number_fields.+)(1, real_defs.max(cstopdown.d1, cstopdown.d2)), cstopdown.sp)], cstopdown.pos(cstopdown.rest), cstopdown.nt(cstopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(cstopdown.len)), n: (booleans.NOT)(cstopdown.loop?(cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good((number_fields.+)(1, real_defs.max(cstopdown.d1, cstopdown.d2)), cstopdown.sp)](i)(cstopdown.n))) ENDIF}")))("cstopdown" cstopdown step_TCC79 0 (step_TCC91-1 nil 3804706560 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (ent type-decl nil cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (sigma_nat application-judgement "nat" sigma reals) (plus_u32_u32 application-judgement "uint64" integertypes nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (good_root? const-decl "bool" cstopdown nil) (good_or_fail? const-decl "bool" cstopdown nil) (count const-decl "upto(len)" arrayCount nil) (scafcount const-decl "uint64" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (pushcount const-decl "uint64" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.stack" "(cstopdown.nice_entry?(cstopdown.len, cstopdown.pos))")))("cstopdown" cstopdown step_TCC80 0 (step_TCC111-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (empty? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (successor const-decl "bool" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (good_or_fail? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (sigma_nat application-judgement "nat" sigma reals) (fine_entry? const-decl "bool" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_push_entry? const-decl "bool" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (good_good_tscaffold formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n2) := cstopdown.stack]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(cstopdown.start, cstopdown.rootnt))")))("cstopdown" cstopdown step_TCC81 0 (step_TCC112-1 nil 3804455654 ("" (skeep*) (("" (split) (("1" (typepred stack) (("1" (typepred depth) (("1" (expand good_depth?) (("1" (expand pushcount) (("1" (use scafcount_max) (("1" (assert) (("1" (use exp2_lt :subst (n 41 m 64)) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "good_depth?") (("2" (expand pushcount) (("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((pushcount const-decl "uint64" cstopdown nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (scafcount const-decl "uint64" cstopdown nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (exp2_lt formula-decl nil exp2 nil) (scafcount_max formula-decl nil cstopdown nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (scafcount_update formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.+)(cstopdown.depth, 1)" "(cstopdown.good_depth?(cstopdown.len, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n2) := cstopdown.stack]))")))("cstopdown" cstopdown step_TCC82 0 (step_TCC78-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (expand "good_stack?" +) (("2" (ground) (("1" (grind) nil nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth" len scaf "push(pos!1, n2)" "stack" stack) (("1" (ground) (("1" (grind) nil nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand fine_stack? +) (("3" (ground) (("1" (lemma mem_mem_stack) (("1" (inst - G depth len scaf _ _ _ _) (("1" (inst - "push(pos!1, n2)" "push(pos!1, n2)" stack stack) (("1" (ground) (("1" (hide -2) (("1" (use mem_stack_push) (("1" (ground) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil) ("4" (use mem_stack_push) (("4" (ground) nil nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (use fine_mem_stack :subst (len len entry "push(pos!1, n2)" u stack stack stack)) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((posint_plus_nnint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_mem_stack formula-decl nil cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (fine_push_entry? const-decl "bool" cstopdown nil) (mem_stack_push formula-decl nil cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))" cstopdown nil) (n2 skolem-const-decl "non_terminal" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (successor const-decl "bool" cstopdown nil) (mem_mem_stack formula-decl nil cstopdown nil) (fine_mem_stack formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.push(cstopdown.pos, cstopdown.n2)" "(cstopdown.fine_stack?(cstopdown.len, cstopdown.G, (number_fields.+)(cstopdown.depth, 1), cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n2) := cstopdown.stack]))")))("cstopdown" cstopdown step_TCC83 0 (step_TCC119-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (skeep*) (("2" (lift-if) (("2" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (loop_or_push? const-decl "bool" cstopdown nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (ent type-decl nil cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(cstopdown.n2 = cstopdown.num_non_terminals, cstopdown.loop_ready?(cstopdown.len, cstopdown.G, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n2) := cstopdown.stack], cstopdown.pos, cstopdown.n2)) ELSE FORALL (i: naturalnumbers.upto(cstopdown.len)), n: (booleans.NOT)(cstopdown.loop?(cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n2) := cstopdown.stack](i)(cstopdown.n))) ENDIF}")))("cstopdown" cstopdown step_TCC84 0 (step_TCC59-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.loop" "(cstopdown.nice_entry?(cstopdown.len, cstopdown.pos))")))("cstopdown" cstopdown step_TCC85 0 (step_TCC60-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (empty? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (good_good_entry? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good? const-decl "bool" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (good_fail? const-decl "bool" cstopdown nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (successor const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (good_tscaffold? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (good_or_fail? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (fine_entry? const-decl "bool" cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (len skolem-const-decl "uint32" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (loop adt-constructor-decl "(loop?)" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_good_tscaffold formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(cstopdown.start, cstopdown.rootnt))")))("cstopdown" cstopdown step_TCC86 0 (step_TCC69-1 nil 3804455654 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (good_stack? def-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (uint64 type-eq-decl nil integertypes nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (good_push_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (scafcount_max formula-decl nil cstopdown nil) (exp2_lt formula-decl nil exp2 nil) (loop adt-constructor-decl "(loop?)" cstopdown nil) (scafcount_update formula-decl nil cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (pushcount const-decl "uint64" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.-)(cstopdown.depth, 1)" "(cstopdown.good_depth?(cstopdown.len, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop]))")))("cstopdown" cstopdown step_TCC87 0 (step_TCC70-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" loop) (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u loop stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_mem_stack formula-decl nil cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (fine_push_entry? const-decl "bool" cstopdown nil) (ent_push_extensionality formula-decl nil cstopdown nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (push_or_pending? const-decl "bool" cstopdown nil) (loop adt-constructor-decl "(loop?)" cstopdown nil) (cur skolem-const-decl "uint8" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (depth skolem-const-decl "(good_depth?(len, St`scaf))" cstopdown nil) (fine_mem_stack formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.rest" "(cstopdown.fine_stack?(cstopdown.len, cstopdown.G, (number_fields.-)(cstopdown.depth, 1), cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop]))")))("cstopdown" cstopdown step_TCC88 0 (step_TCC118-1 nil 3804706560 ("" (skeep*) (("" (typepred stack) (("" (expand good_stack?) (("" (ground) (("1" (grind) nil nil) ("2" (grind :exclude (good_stack? fine_stack? mem_stack?)) nil nil)) nil)) nil)) nil)) nil) ((state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (good_stack? def-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (uint64 type-eq-decl nil integertypes nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (good_push_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (successor const-decl "bool" cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "booleans.TRUE" "{b: booleans.bool | IF b THEN booleans.OR(cstopdown.nt(cstopdown.rest) = cstopdown.num_non_terminals, cstopdown.loop_ready?(cstopdown.len, cstopdown.G, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop], cstopdown.pos(cstopdown.rest), cstopdown.nt(cstopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(cstopdown.len)), n: (booleans.NOT)(cstopdown.loop?(cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop](i)(cstopdown.n))) ENDIF}")))("cstopdown" cstopdown step_TCC89 0 (step_TCC109-1 nil 3804455654 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst - pos!1 n1) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (gfcount const-decl "uint64" cstopdown nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (lt_times_lt_pos1 formula-decl nil real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (empty? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (good_good? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_u32_u32 application-judgement "int64" integertypes nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (dep shared-adt-accessor-decl "[{x: ent | fail?(x) OR good?(x)} -> uint64]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (good_or_fail? const-decl "bool" cstopdown nil) (sigma_max formula-decl nil cstopdown nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (good_tscaffold? const-decl "bool" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.+)(cstopdown.d1, 1)" "uint64")))("cstopdown" cstopdown step_TCC90 0 (step_TCC110-1 nil 3804455654 ("" (skeep*) (("" (typepred "St`scaf(pos!1)(n1)") (("" (grind) nil nil)) nil)) nil) ((state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (good_good_entry? const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.good((number_fields.+)(cstopdown.d1, 1), cstopdown.sp)" "(cstopdown.nice_entry?(cstopdown.len, cstopdown.pos))")))("cstopdown" cstopdown step_TCC91 0 (step_TCC99-1 nil 3804991042 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (ground) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil)) nil) ("2" (expand good_good?) (("2" (grind :exclude (max gfcount)) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (empty? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (good_good? const-decl "bool" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (good_fail? const-decl "bool" cstopdown nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (successor const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (good_tscaffold? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (good_or_fail? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (minus_u32_u32 application-judgement "int64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (fine_entry? const-decl "bool" cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (len skolem-const-decl "uint32" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" cstopdown nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (d1 skolem-const-decl "uint64" cstopdown nil) (sp skolem-const-decl "uint32" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_good_tscaffold formula-decl nil cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good((number_fields.+)(cstopdown.d1, 1), cstopdown.sp)]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(cstopdown.start, cstopdown.rootnt))")))("cstopdown" cstopdown step_TCC92 0 (step_TCC61-1 nil 3804455654 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred "scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (good_stack? def-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (uint64 type-eq-decl nil integertypes nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (good_push_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (scafcount_max formula-decl nil cstopdown nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (exp2_lt formula-decl nil exp2 nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" cstopdown nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (scafcount_update formula-decl nil cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (successor const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (pushcount const-decl "uint64" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.-)(cstopdown.depth, 1)" "(cstopdown.good_depth?(cstopdown.len, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good((number_fields.+)(cstopdown.d1, 1), cstopdown.sp)]))")))("cstopdown" cstopdown step_TCC93 0 (step_TCC62-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" "good(1 + d1, sp)") (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u " good(1 + d1, sp)" stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_mem_stack formula-decl nil cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (fine_push_entry? const-decl "bool" cstopdown nil) (ent_push_extensionality formula-decl nil cstopdown nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (push_or_pending? const-decl "bool" cstopdown nil) (sp skolem-const-decl "uint32" cstopdown nil) (d1 skolem-const-decl "uint64" cstopdown nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" cstopdown nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (cur skolem-const-decl "uint8" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (depth skolem-const-decl "(good_depth?(len, St`scaf))" cstopdown nil) (fine_mem_stack formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.rest" "(cstopdown.fine_stack?(cstopdown.len, cstopdown.G, (number_fields.-)(cstopdown.depth, 1), cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good((number_fields.+)(cstopdown.d1, 1), cstopdown.sp)]))")))("cstopdown" cstopdown step_TCC94 0 (step_TCC116-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (empty? const-decl "bool" cstopdown nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (loop_or_push? const-decl "bool" cstopdown nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (ent type-decl nil cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(cstopdown.nt(cstopdown.rest) = cstopdown.num_non_terminals, cstopdown.loop_ready?(cstopdown.len, cstopdown.G, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good((number_fields.+)(1, cstopdown.d1), cstopdown.sp)], cstopdown.pos(cstopdown.rest), cstopdown.nt(cstopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(cstopdown.len)), n: (booleans.NOT)(cstopdown.loop?(cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good((number_fields.+)(1, cstopdown.d1), cstopdown.sp)](i)(cstopdown.n))) ENDIF}")))("cstopdown" cstopdown step_TCC95 0 (step_TCC112-1 nil 3804706560 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (ent type-decl nil cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (sigma_nat application-judgement "nat" sigma reals) (plus_u32_u32 application-judgement "uint64" integertypes nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (good_root? const-decl "bool" cstopdown nil) (good_or_fail? const-decl "bool" cstopdown nil) (count const-decl "upto(len)" arrayCount nil) (scafcount const-decl "uint64" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (pushcount const-decl "uint64" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.stack" "(cstopdown.nice_entry?(cstopdown.len, cstopdown.pos))")))("cstopdown" cstopdown step_TCC96 0 (step_TCC92-1 nil 3804706560 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (empty? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (successor const-decl "bool" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (good_or_fail? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (sigma_nat application-judgement "nat" sigma reals) (fine_entry? const-decl "bool" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_push_entry? const-decl "bool" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (good_good_tscaffold formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n1) := cstopdown.stack]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(cstopdown.start, cstopdown.rootnt))")))("cstopdown" cstopdown step_TCC97 0 (step_TCC93-1 nil 3804706560 ("" (skeep*) (("" (split) (("1" (typepred stack) (("1" (typepred depth) (("1" (expand good_depth?) (("1" (expand pushcount) (("1" (use scafcount_max) (("1" (assert) (("1" (use exp2_lt :subst (n 41 m 64)) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "good_depth?") (("2" (expand pushcount) (("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((pushcount const-decl "uint64" cstopdown nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (scafcount const-decl "uint64" cstopdown nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (exp2_lt formula-decl nil exp2 nil) (scafcount_max formula-decl nil cstopdown nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (scafcount_update formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.+)(cstopdown.depth, 1)" "(cstopdown.good_depth?(cstopdown.len, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n1) := cstopdown.stack]))")))("cstopdown" cstopdown step_TCC98 0 (step_TCC94-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (expand "good_stack?" +) (("2" (ground) (("1" (grind) nil nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth" len scaf "push(pos!1, n1)" "stack" stack) (("1" (ground) (("1" (grind) nil nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand fine_stack? +) (("3" (ground) (("1" (lemma mem_mem_stack) (("1" (inst - G depth len scaf _ _ _ _) (("1" (inst - "push(pos!1, n1)" "push(pos!1, n1)" stack stack) (("1" (ground) (("1" (hide -2) (("1" (use mem_stack_push) (("1" (ground) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil) ("4" (use mem_stack_push) (("4" (ground) nil nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (use fine_mem_stack :subst (len len entry "push(pos!1, n1)" u stack stack stack)) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((posint_plus_nnint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_mem_stack formula-decl nil cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (fine_push_entry? const-decl "bool" cstopdown nil) (mem_stack_push formula-decl nil cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))" cstopdown nil) (n1 skolem-const-decl "non_terminal" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (successor const-decl "bool" cstopdown nil) (mem_mem_stack formula-decl nil cstopdown nil) (fine_mem_stack formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.push(cstopdown.pos, cstopdown.n1)" "(cstopdown.fine_stack?(cstopdown.len, cstopdown.G, (number_fields.+)(cstopdown.depth, 1), cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n1) := cstopdown.stack]))")))("cstopdown" cstopdown step_TCC99 0 (step_TCC125-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (skeep*) (("2" (lift-if) (("2" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (loop_or_push? const-decl "bool" cstopdown nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (ent type-decl nil cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(cstopdown.n1 = cstopdown.num_non_terminals, cstopdown.loop_ready?(cstopdown.len, cstopdown.G, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n1) := cstopdown.stack], cstopdown.pos, cstopdown.n1)) ELSE FORALL (i: naturalnumbers.upto(cstopdown.len)), n: (booleans.NOT)(cstopdown.loop?(cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n1) := cstopdown.stack](i)(cstopdown.n))) ENDIF}")))("cstopdown" cstopdown step_TCC100 0 (step_TCC71-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.loop" "(cstopdown.nice_entry?(cstopdown.len, cstopdown.pos))")))("cstopdown" cstopdown step_TCC101 0 (step_TCC72-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (empty? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (good_good_entry? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good? const-decl "bool" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (good_fail? const-decl "bool" cstopdown nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (successor const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (good_tscaffold? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (good_or_fail? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (fine_entry? const-decl "bool" cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (len skolem-const-decl "uint32" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (loop adt-constructor-decl "(loop?)" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_good_tscaffold formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(cstopdown.start, cstopdown.rootnt))")))("cstopdown" cstopdown step_TCC102 0 (step_TCC85-1 nil 3804455654 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (good_stack? def-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (uint64 type-eq-decl nil integertypes nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (good_push_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (scafcount_max formula-decl nil cstopdown nil) (exp2_lt formula-decl nil exp2 nil) (loop adt-constructor-decl "(loop?)" cstopdown nil) (scafcount_update formula-decl nil cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (pushcount const-decl "uint64" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.-)(cstopdown.depth, 1)" "(cstopdown.good_depth?(cstopdown.len, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop]))")))("cstopdown" cstopdown step_TCC103 0 (step_TCC86-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" loop) (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u loop stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_mem_stack formula-decl nil cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (fine_push_entry? const-decl "bool" cstopdown nil) (ent_push_extensionality formula-decl nil cstopdown nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (push_or_pending? const-decl "bool" cstopdown nil) (loop adt-constructor-decl "(loop?)" cstopdown nil) (cur skolem-const-decl "uint8" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (depth skolem-const-decl "(good_depth?(len, St`scaf))" cstopdown nil) (fine_mem_stack formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.rest" "(cstopdown.fine_stack?(cstopdown.len, cstopdown.G, (number_fields.-)(cstopdown.depth, 1), cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop]))")))("cstopdown" cstopdown step_TCC104 0 (step_TCC126-1 nil 3804706560 ("" (skeep*) (("" (typepred stack) (("" (expand good_stack?) (("" (ground) (("1" (grind) nil nil) ("2" (grind :exclude (good_stack? fine_stack? mem_stack?)) nil nil)) nil)) nil)) nil)) nil) ((state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (good_stack? def-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (uint64 type-eq-decl nil integertypes nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (good_push_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (successor const-decl "bool" cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "booleans.TRUE" "{b: booleans.bool | IF b THEN booleans.OR(cstopdown.nt(cstopdown.rest) = cstopdown.num_non_terminals, cstopdown.loop_ready?(cstopdown.len, cstopdown.G, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop], cstopdown.pos(cstopdown.rest), cstopdown.nt(cstopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(cstopdown.len)), n: (booleans.NOT)(cstopdown.loop?(cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop](i)(cstopdown.n))) ENDIF}")))("cstopdown" cstopdown step_TCC105 0 (step_TCC113-1 nil 3804991042 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst - pos!1 n1) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (gfcount const-decl "uint64" cstopdown nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (lt_times_lt_pos1 formula-decl nil real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (empty? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (good_fail? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (dep shared-adt-accessor-decl "[{x: ent | fail?(x) OR good?(x)} -> uint64]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (good_or_fail? const-decl "bool" cstopdown nil) (sigma_max formula-decl nil cstopdown nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (good_tscaffold? const-decl "bool" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.+)(cstopdown.d1, 1)" "uint64")))("cstopdown" cstopdown step_TCC106 0 (step_TCC114-1 nil 3804991042 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.fail((number_fields.+)(cstopdown.d1, 1))" "(cstopdown.nice_entry?(cstopdown.len, cstopdown.pos))")))("cstopdown" cstopdown step_TCC107 0 (step_TCC115-1 nil 3804991042 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (empty? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_good? const-decl "bool" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (good_fail? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (good_tscaffold? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (good_or_fail? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (fine_entry? const-decl "bool" cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (len skolem-const-decl "uint32" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (fail adt-constructor-decl "[uint64 -> (fail?)]" cstopdown nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (d1 skolem-const-decl "uint64" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_good_tscaffold formula-decl nil cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail((number_fields.+)(cstopdown.d1, 1))]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(cstopdown.start, cstopdown.rootnt))")))("cstopdown" cstopdown step_TCC108 0 (step_TCC73-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)
                                                                                            (St`scaf WITH [(pos!1)(cur) := fail(1 + d1)](i))) = ((LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                                                      WITH [(pos!1)
                                                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                                  1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                                                                            push?(St`scaf(x!1) WITH [(cur) := fail(1 + d1)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil) ("3" (skeep*) (("3" (use step_TCC105) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -6 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (skeep*) (("4" (use step_TCC105) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count +) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (ground) (("1" (expand nonempty?) (("1" (expand empty?) (("1" (inst - "nt(stack)") (("1" (grind) nil nil) ("2" (assert) (("2" (typepred "nt(stack)") (("2" (expand "good_push_entry?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "count_TCC1") nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (use step_TCC105) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -1) (("3" (expand count) (("3" (use "nonempty_card[below(num_non_terminals)]") (("1" (ground) (("1" (hide -5 5) (("1" (grind) nil nil)) nil)) nil) ("2" (rewrite "count_TCC1") nil nil)) nil)) nil)) nil) ("4" (hide -1 3) (("4" (grind) nil nil)) nil) ("5" (use step_TCC105) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (pushcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_dec formula-decl nil cstopdown nil) (arr type-eq-decl nil arrayCount nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (fail adt-constructor-decl "[uint64 -> (fail?)]" cstopdown nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (d1 skolem-const-decl "uint64" cstopdown nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (step_TCC105 subtype-tcc nil cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (member const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil) (x!1 skolem-const-decl "upto(len)" cstopdown nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (card_remove formula-decl nil finite_sets nil) (count_TCC1 subtype-tcc nil arrayCount nil) (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil) (empty? const-decl "bool" sets nil) (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))" cstopdown nil) (nonempty? const-decl "bool" sets nil) (nonempty_card formula-decl nil finite_sets nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.-)(cstopdown.depth, 1)" "(cstopdown.good_depth?(cstopdown.len, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail((number_fields.+)(cstopdown.d1, 1))]))")))("cstopdown" cstopdown step_TCC109 0 (step_TCC74-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" "fail(1 + d1)") (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u "fail(1 + d1)" stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_mem_stack formula-decl nil cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (fine_push_entry? const-decl "bool" cstopdown nil) (ent_push_extensionality formula-decl nil cstopdown nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (push_or_pending? const-decl "bool" cstopdown nil) (d1 skolem-const-decl "uint64" cstopdown nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (fail adt-constructor-decl "[uint64 -> (fail?)]" cstopdown nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (cur skolem-const-decl "uint8" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (depth skolem-const-decl "(good_depth?(len, St`scaf))" cstopdown nil) (fine_mem_stack formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.rest" "(cstopdown.fine_stack?(cstopdown.len, cstopdown.G, (number_fields.-)(cstopdown.depth, 1), cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail((number_fields.+)(cstopdown.d1, 1))]))")))("cstopdown" cstopdown step_TCC110 0 (step_TCC127-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (empty? const-decl "bool" cstopdown nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (loop_or_push? const-decl "bool" cstopdown nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (ent type-decl nil cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(cstopdown.nt(cstopdown.rest) = cstopdown.num_non_terminals, cstopdown.loop_ready?(cstopdown.len, cstopdown.G, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail((number_fields.+)(1, cstopdown.d1))], cstopdown.pos(cstopdown.rest), cstopdown.nt(cstopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(cstopdown.len)), n: (booleans.NOT)(cstopdown.loop?(cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail((number_fields.+)(1, cstopdown.d1))](i)(cstopdown.n))) ENDIF}")))("cstopdown" cstopdown step_TCC111 0 (step_TCC119-1 nil 3804991042 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst - pos!1 n1) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (gfcount const-decl "uint64" cstopdown nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (lt_times_lt_pos1 formula-decl nil real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (empty? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (good_good? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_u32_u32 application-judgement "int64" integertypes nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (dep shared-adt-accessor-decl "[{x: ent | fail?(x) OR good?(x)} -> uint64]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (good_or_fail? const-decl "bool" cstopdown nil) (sigma_max formula-decl nil cstopdown nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (good_tscaffold? const-decl "bool" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.+)(cstopdown.d1, 1)" "uint64")))("cstopdown" cstopdown step_TCC112 0 (step_TCC121-1 nil 3804991042 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (ent type-decl nil cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (sigma_nat application-judgement "nat" sigma reals) (plus_u32_u32 application-judgement "uint64" integertypes nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (good_root? const-decl "bool" cstopdown nil) (good_or_fail? const-decl "bool" cstopdown nil) (count const-decl "upto(len)" arrayCount nil) (scafcount const-decl "uint64" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (pushcount const-decl "uint64" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil (step subtype "cstopdown.good((number_fields.+)(cstopdown.d1, 1), 0)" "(cstopdown.nice_entry?(cstopdown.len, cstopdown.pos))")))("cstopdown" cstopdown step_TCC113 0 (step_TCC122-1 nil 3804991042 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (ground) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil)) nil) ("2" (expand good_good?) (("2" (grind :exclude (max gfcount)) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (empty? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (good_good? const-decl "bool" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (good_fail? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (good_tscaffold? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (good_or_fail? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (minus_u32_u32 application-judgement "int64" integertypes nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (fine_entry? const-decl "bool" cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (len skolem-const-decl "uint32" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" cstopdown nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (d1 skolem-const-decl "uint64" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_good_tscaffold formula-decl nil cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good((number_fields.+)(cstopdown.d1, 1), 0)]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(cstopdown.start, cstopdown.rootnt))")))("cstopdown" cstopdown step_TCC114 0 (step_TCC107-1 nil 3804455654 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred "scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (good_stack? def-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (uint64 type-eq-decl nil integertypes nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (good_push_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (scafcount_max formula-decl nil cstopdown nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (exp2_lt formula-decl nil exp2 nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" cstopdown nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (scafcount_update formula-decl nil cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (pushcount const-decl "uint64" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.-)(cstopdown.depth, 1)" "(cstopdown.good_depth?(cstopdown.len, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good((number_fields.+)(cstopdown.d1, 1), 0)]))")))("cstopdown" cstopdown step_TCC115 0 (step_TCC108-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" "good(1 + d1, 0)") (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u " good(1 + d1, 0)" stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_mem_stack formula-decl nil cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (fine_push_entry? const-decl "bool" cstopdown nil) (ent_push_extensionality formula-decl nil cstopdown nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (push_or_pending? const-decl "bool" cstopdown nil) (d1 skolem-const-decl "uint64" cstopdown nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" cstopdown nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (cur skolem-const-decl "uint8" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (depth skolem-const-decl "(good_depth?(len, St`scaf))" cstopdown nil) (fine_mem_stack formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.rest" "(cstopdown.fine_stack?(cstopdown.len, cstopdown.G, (number_fields.-)(cstopdown.depth, 1), cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good((number_fields.+)(cstopdown.d1, 1), 0)]))")))("cstopdown" cstopdown step_TCC116 0 (step_TCC128-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (empty? const-decl "bool" cstopdown nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (loop_or_push? const-decl "bool" cstopdown nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (ent type-decl nil cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(cstopdown.nt(cstopdown.rest) = cstopdown.num_non_terminals, cstopdown.loop_ready?(cstopdown.len, cstopdown.G, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good((number_fields.+)(1, cstopdown.d1), 0)], cstopdown.pos(cstopdown.rest), cstopdown.nt(cstopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(cstopdown.len)), n: (booleans.NOT)(cstopdown.loop?(cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good((number_fields.+)(1, cstopdown.d1), 0)](i)(cstopdown.n))) ENDIF}")))("cstopdown" cstopdown step_TCC117 0 (step_TCC133-1 nil 3804706560 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (ent type-decl nil cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (sigma_nat application-judgement "nat" sigma reals) (plus_u32_u32 application-judgement "uint64" integertypes nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (good_root? const-decl "bool" cstopdown nil) (good_or_fail? const-decl "bool" cstopdown nil) (count const-decl "upto(len)" arrayCount nil) (scafcount const-decl "uint64" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (pushcount const-decl "uint64" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.stack" "(cstopdown.nice_entry?(cstopdown.len, cstopdown.pos))")))("cstopdown" cstopdown step_TCC118 0 (step_TCC113-1 nil 3804706560 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (empty? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (successor const-decl "bool" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (good_or_fail? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (sigma_nat application-judgement "nat" sigma reals) (fine_entry? const-decl "bool" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_push_entry? const-decl "bool" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (good_good_tscaffold formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n1) := cstopdown.stack]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(cstopdown.start, cstopdown.rootnt))")))("cstopdown" cstopdown step_TCC119 0 (step_TCC114-1 nil 3804706560 ("" (skeep*) (("" (split) (("1" (typepred stack) (("1" (typepred depth) (("1" (expand good_depth?) (("1" (expand pushcount) (("1" (use scafcount_max) (("1" (assert) (("1" (use exp2_lt :subst (n 41 m 64)) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "good_depth?") (("2" (expand pushcount) (("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((pushcount const-decl "uint64" cstopdown nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (scafcount const-decl "uint64" cstopdown nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (exp2_lt formula-decl nil exp2 nil) (scafcount_max formula-decl nil cstopdown nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (scafcount_update formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.+)(cstopdown.depth, 1)" "(cstopdown.good_depth?(cstopdown.len, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n1) := cstopdown.stack]))")))("cstopdown" cstopdown step_TCC120 0 (step_TCC115-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (expand "good_stack?" +) (("2" (ground) (("1" (grind) nil nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth" len scaf "push(pos!1, n1)" "stack" stack) (("1" (ground) (("1" (grind) nil nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand fine_stack? +) (("3" (ground) (("1" (lemma mem_mem_stack) (("1" (inst - G depth len scaf _ _ _ _) (("1" (inst - "push(pos!1, n1)" "push(pos!1, n1)" stack stack) (("1" (ground) (("1" (hide -2) (("1" (use mem_stack_push) (("1" (ground) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil) ("4" (use mem_stack_push) (("4" (ground) nil nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (use fine_mem_stack :subst (len len entry "push(pos!1, n1)" u stack stack stack)) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((posint_plus_nnint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_mem_stack formula-decl nil cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (fine_push_entry? const-decl "bool" cstopdown nil) (mem_stack_push formula-decl nil cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))" cstopdown nil) (n1 skolem-const-decl "non_terminal" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (successor const-decl "bool" cstopdown nil) (mem_mem_stack formula-decl nil cstopdown nil) (fine_mem_stack formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.push(cstopdown.pos, cstopdown.n1)" "(cstopdown.fine_stack?(cstopdown.len, cstopdown.G, (number_fields.+)(cstopdown.depth, 1), cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n1) := cstopdown.stack]))")))("cstopdown" cstopdown step_TCC121 0 (step_TCC137-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (skeep*) (("2" (lift-if) (("2" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (loop_or_push? const-decl "bool" cstopdown nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (ent type-decl nil cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(cstopdown.n1 = cstopdown.num_non_terminals, cstopdown.loop_ready?(cstopdown.len, cstopdown.G, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n1) := cstopdown.stack], cstopdown.pos, cstopdown.n1)) ELSE FORALL (i: naturalnumbers.upto(cstopdown.len)), n: (booleans.NOT)(cstopdown.loop?(cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n1) := cstopdown.stack](i)(cstopdown.n))) ENDIF}")))("cstopdown" cstopdown step_TCC122 0 (step_TCC87-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.loop" "(cstopdown.nice_entry?(cstopdown.len, cstopdown.pos))")))("cstopdown" cstopdown step_TCC123 0 (step_TCC88-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (empty? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (good_good_entry? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good? const-decl "bool" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (good_fail? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (good_tscaffold? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (good_or_fail? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (fine_entry? const-decl "bool" cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (len skolem-const-decl "uint32" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (loop adt-constructor-decl "(loop?)" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_good_tscaffold formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(cstopdown.start, cstopdown.rootnt))")))("cstopdown" cstopdown step_TCC124 0 (step_TCC103-1 nil 3804455654 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (good_stack? def-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (uint64 type-eq-decl nil integertypes nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (good_push_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (scafcount_max formula-decl nil cstopdown nil) (exp2_lt formula-decl nil exp2 nil) (loop adt-constructor-decl "(loop?)" cstopdown nil) (scafcount_update formula-decl nil cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (pushcount const-decl "uint64" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.-)(cstopdown.depth, 1)" "(cstopdown.good_depth?(cstopdown.len, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop]))")))("cstopdown" cstopdown step_TCC125 0 (step_TCC104-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" loop) (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u loop stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_mem_stack formula-decl nil cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (fine_push_entry? const-decl "bool" cstopdown nil) (ent_push_extensionality formula-decl nil cstopdown nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (push_or_pending? const-decl "bool" cstopdown nil) (loop adt-constructor-decl "(loop?)" cstopdown nil) (cur skolem-const-decl "uint8" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (depth skolem-const-decl "(good_depth?(len, St`scaf))" cstopdown nil) (fine_mem_stack formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.rest" "(cstopdown.fine_stack?(cstopdown.len, cstopdown.G, (number_fields.-)(cstopdown.depth, 1), cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop]))")))("cstopdown" cstopdown step_TCC126 0 (step_TCC138-1 nil 3804706560 ("" (skeep*) (("" (typepred stack) (("" (expand good_stack?) (("" (ground) (("1" (grind) nil nil) ("2" (grind :exclude (good_stack? fine_stack? mem_stack?)) nil nil)) nil)) nil)) nil)) nil) ((state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (good_stack? def-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (uint64 type-eq-decl nil integertypes nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (good_push_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (successor const-decl "bool" cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "booleans.TRUE" "{b: booleans.bool | IF b THEN booleans.OR(cstopdown.nt(cstopdown.rest) = cstopdown.num_non_terminals, cstopdown.loop_ready?(cstopdown.len, cstopdown.G, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop], cstopdown.pos(cstopdown.rest), cstopdown.nt(cstopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(cstopdown.len)), n: (booleans.NOT)(cstopdown.loop?(cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop](i)(cstopdown.n))) ENDIF}")))("cstopdown" cstopdown step_TCC127 0 (step_TCC136-1 nil 3804991042 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst - pos!1 n1) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (gfcount const-decl "uint64" cstopdown nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (lt_times_lt_pos1 formula-decl nil real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (empty? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (good_fail? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (dep shared-adt-accessor-decl "[{x: ent | fail?(x) OR good?(x)} -> uint64]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (good_or_fail? const-decl "bool" cstopdown nil) (sigma_max formula-decl nil cstopdown nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (good_tscaffold? const-decl "bool" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.+)(cstopdown.d1, 1)" "uint64")))("cstopdown" cstopdown step_TCC128 0 (step_TCC138-1 nil 3804991042 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (ent type-decl nil cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (sigma_nat application-judgement "nat" sigma reals) (plus_u32_u32 application-judgement "uint64" integertypes nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (good_root? const-decl "bool" cstopdown nil) (good_or_fail? const-decl "bool" cstopdown nil) (count const-decl "upto(len)" arrayCount nil) (scafcount const-decl "uint64" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (pushcount const-decl "uint64" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil (step subtype "cstopdown.good((number_fields.+)(cstopdown.d1, 1), 0)" "(cstopdown.nice_entry?(cstopdown.len, cstopdown.pos))")))("cstopdown" cstopdown step_TCC129 0 (step_TCC139-1 nil 3804991042 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (ground) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil)) nil) ("2" (expand good_good?) (("2" (grind :exclude (max gfcount)) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand nice_entry?) (("2" (expand good_good_entry?) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (empty? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (good_good? const-decl "bool" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (good_fail? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (good_tscaffold? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (good_or_fail? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (minus_u32_u32 application-judgement "int64" integertypes nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (fine_entry? const-decl "bool" cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (len skolem-const-decl "uint32" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" cstopdown nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (d1 skolem-const-decl "uint64" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_good_tscaffold formula-decl nil cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good((number_fields.+)(cstopdown.d1, 1), 0)]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(cstopdown.start, cstopdown.rootnt))")))("cstopdown" cstopdown step_TCC130 0 (step_TCC110-1 nil 3804706560 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred "scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (good_stack? def-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (uint64 type-eq-decl nil integertypes nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (good_push_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (scafcount_max formula-decl nil cstopdown nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (exp2_lt formula-decl nil exp2 nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" cstopdown nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (scafcount_update formula-decl nil cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (pushcount const-decl "uint64" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.-)(cstopdown.depth, 1)" "(cstopdown.good_depth?(cstopdown.len, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good((number_fields.+)(cstopdown.d1, 1), 0)]))")))("cstopdown" cstopdown step_TCC131 0 (step_TCC111-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" "good(1 + d1, 0)") (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u " good(1 + d1, 0)" stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_mem_stack formula-decl nil cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (fine_push_entry? const-decl "bool" cstopdown nil) (ent_push_extensionality formula-decl nil cstopdown nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (push_or_pending? const-decl "bool" cstopdown nil) (d1 skolem-const-decl "uint64" cstopdown nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" cstopdown nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (cur skolem-const-decl "uint8" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (depth skolem-const-decl "(good_depth?(len, St`scaf))" cstopdown nil) (fine_mem_stack formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.rest" "(cstopdown.fine_stack?(cstopdown.len, cstopdown.G, (number_fields.-)(cstopdown.depth, 1), cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good((number_fields.+)(cstopdown.d1, 1), 0)]))")))("cstopdown" cstopdown step_TCC132 0 (step_TCC139-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (empty? const-decl "bool" cstopdown nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (loop_or_push? const-decl "bool" cstopdown nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (ent type-decl nil cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(cstopdown.nt(cstopdown.rest) = cstopdown.num_non_terminals, cstopdown.loop_ready?(cstopdown.len, cstopdown.G, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good((number_fields.+)(1, cstopdown.d1), 0)], cstopdown.pos(cstopdown.rest), cstopdown.nt(cstopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(cstopdown.len)), n: (booleans.NOT)(cstopdown.loop?(cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.good((number_fields.+)(1, cstopdown.d1), 0)](i)(cstopdown.n))) ENDIF}")))("cstopdown" cstopdown step_TCC133 0 (step_TCC143-1 nil 3804991042 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst - pos!1 n1) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (gfcount const-decl "uint64" cstopdown nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (posreal nonempty-type-eq-decl nil real_types nil) (nonneg_real nonempty-type-eq-decl nil real_types nil) (lt_times_lt_pos1 formula-decl nil real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (empty? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (good_good? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_u32_u32 application-judgement "int64" integertypes nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (dep shared-adt-accessor-decl "[{x: ent | fail?(x) OR good?(x)} -> uint64]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (good_or_fail? const-decl "bool" cstopdown nil) (sigma_max formula-decl nil cstopdown nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (good_tscaffold? const-decl "bool" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.+)(cstopdown.d1, 1)" "uint64")))("cstopdown" cstopdown step_TCC134 0 (step_TCC144-1 nil 3804991042 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.fail((number_fields.+)(cstopdown.d1, 1))" "(cstopdown.nice_entry?(cstopdown.len, cstopdown.pos))")))("cstopdown" cstopdown step_TCC135 0 (step_TCC145-1 nil 3804991042 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (empty? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_good? const-decl "bool" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (good_fail? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (good_tscaffold? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (good_or_fail? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (fine_entry? const-decl "bool" cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (len skolem-const-decl "uint32" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (fail adt-constructor-decl "[uint64 -> (fail?)]" cstopdown nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (d1 skolem-const-decl "uint64" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_good_tscaffold formula-decl nil cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail((number_fields.+)(cstopdown.d1, 1))]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(cstopdown.start, cstopdown.rootnt))")))("cstopdown" cstopdown step_TCC136 0 (step_TCC123-1 nil 3804706560 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                                                               count(num_non_terminals)(push?)
                                                                                                    (St`scaf WITH [(pos!1)(cur) := fail(1 + d1)](i))) = ((LAMBDA (i: upto(len)):
                                                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                                                              WITH [(pos!1)
                                                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                                          1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                                                                                          push?(St`scaf(x!1) WITH [(cur) := fail(1 + d1)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil) ("3" (skeep*) (("3" (use step_TCC133) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -6 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (skeep*) (("4" (use step_TCC133) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count +) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (ground) (("1" (expand nonempty?) (("1" (expand empty?) (("1" (inst - "nt(stack)") (("1" (grind) nil nil) ("2" (assert) (("2" (typepred "nt(stack)") (("2" (expand "good_push_entry?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "count_TCC1") nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (use step_TCC133) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -1) (("3" (expand count) (("3" (use "nonempty_card[below(num_non_terminals)]") (("1" (ground) (("1" (hide -5 5) (("1" (grind) nil nil)) nil)) nil) ("2" (rewrite "count_TCC1") nil nil)) nil)) nil)) nil) ("4" (hide -1 3) (("4" (grind) nil nil)) nil) ("5" (use step_TCC133) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (pushcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_dec formula-decl nil cstopdown nil) (arr type-eq-decl nil arrayCount nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (fail adt-constructor-decl "[uint64 -> (fail?)]" cstopdown nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (d1 skolem-const-decl "uint64" cstopdown nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (step_TCC133 subtype-tcc nil cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (member const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil) (x!1 skolem-const-decl "upto(len)" cstopdown nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (card_remove formula-decl nil finite_sets nil) (count_TCC1 subtype-tcc nil arrayCount nil) (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil) (empty? const-decl "bool" sets nil) (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))" cstopdown nil) (nonempty? const-decl "bool" sets nil) (nonempty_card formula-decl nil finite_sets nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.-)(cstopdown.depth, 1)" "(cstopdown.good_depth?(cstopdown.len, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail((number_fields.+)(cstopdown.d1, 1))]))")))("cstopdown" cstopdown step_TCC137 0 (step_TCC124-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" "fail(1 + d1)") (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u "fail(1 + d1)" stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_mem_stack formula-decl nil cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (fine_push_entry? const-decl "bool" cstopdown nil) (ent_push_extensionality formula-decl nil cstopdown nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (push_or_pending? const-decl "bool" cstopdown nil) (d1 skolem-const-decl "uint64" cstopdown nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (fail adt-constructor-decl "[uint64 -> (fail?)]" cstopdown nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (cur skolem-const-decl "uint8" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (depth skolem-const-decl "(good_depth?(len, St`scaf))" cstopdown nil) (fine_mem_stack formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.rest" "(cstopdown.fine_stack?(cstopdown.len, cstopdown.G, (number_fields.-)(cstopdown.depth, 1), cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail((number_fields.+)(cstopdown.d1, 1))]))")))("cstopdown" cstopdown step_TCC138 0 (step_TCC140-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (empty? const-decl "bool" cstopdown nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (loop_or_push? const-decl "bool" cstopdown nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (ent type-decl nil cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(cstopdown.nt(cstopdown.rest) = cstopdown.num_non_terminals, cstopdown.loop_ready?(cstopdown.len, cstopdown.G, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail((number_fields.+)(1, cstopdown.d1))], cstopdown.pos(cstopdown.rest), cstopdown.nt(cstopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(cstopdown.len)), n: (booleans.NOT)(cstopdown.loop?(cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.fail((number_fields.+)(1, cstopdown.d1))](i)(cstopdown.n))) ENDIF}")))("cstopdown" cstopdown step_TCC139 0 (step_TCC134-1 nil 3804904050 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (ent type-decl nil cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (sigma_nat application-judgement "nat" sigma reals) (plus_u32_u32 application-judgement "uint64" integertypes nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (good_root? const-decl "bool" cstopdown nil) (good_or_fail? const-decl "bool" cstopdown nil) (count const-decl "upto(len)" arrayCount nil) (scafcount const-decl "uint64" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (pushcount const-decl "uint64" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.stack" "(cstopdown.nice_entry?(cstopdown.len, cstopdown.pos))")))("cstopdown" cstopdown step_TCC140 0 (step_TCC134-1 nil 3804706560 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (empty? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (successor const-decl "bool" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (good_or_fail? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (sigma_nat application-judgement "nat" sigma reals) (fine_entry? const-decl "bool" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_push_entry? const-decl "bool" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (good_good_tscaffold formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n1) := cstopdown.stack]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(cstopdown.start, cstopdown.rootnt))")))("cstopdown" cstopdown step_TCC141 0 (step_TCC135-1 nil 3804706560 ("" (skeep*) (("" (split) (("1" (typepred stack) (("1" (typepred depth) (("1" (expand good_depth?) (("1" (expand pushcount) (("1" (use scafcount_max) (("1" (assert) (("1" (use exp2_lt :subst (n 41 m 64)) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "good_depth?") (("2" (expand pushcount) (("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((pushcount const-decl "uint64" cstopdown nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (scafcount const-decl "uint64" cstopdown nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (exp2_lt formula-decl nil exp2 nil) (scafcount_max formula-decl nil cstopdown nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (scafcount_update formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.+)(cstopdown.depth, 1)" "(cstopdown.good_depth?(cstopdown.len, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n1) := cstopdown.stack]))")))("cstopdown" cstopdown step_TCC142 0 (step_TCC136-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (expand "good_stack?" +) (("2" (ground) (("1" (grind) nil nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth" len scaf "push(pos!1, n1)" "stack" stack) (("1" (ground) (("1" (grind) nil nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand fine_stack? +) (("3" (ground) (("1" (lemma mem_mem_stack) (("1" (inst - G depth len scaf _ _ _ _) (("1" (inst - "push(pos!1, n1)" "push(pos!1, n1)" stack stack) (("1" (ground) (("1" (hide -2) (("1" (use mem_stack_push) (("1" (ground) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil) ("4" (use mem_stack_push) (("4" (ground) nil nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (use fine_mem_stack :subst (len len entry "push(pos!1, n1)" u stack stack stack)) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((posint_plus_nnint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_mem_stack formula-decl nil cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (fine_push_entry? const-decl "bool" cstopdown nil) (mem_stack_push formula-decl nil cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))" cstopdown nil) (n1 skolem-const-decl "non_terminal" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (successor const-decl "bool" cstopdown nil) (mem_mem_stack formula-decl nil cstopdown nil) (fine_mem_stack formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.push(cstopdown.pos, cstopdown.n1)" "(cstopdown.fine_stack?(cstopdown.len, cstopdown.G, (number_fields.+)(cstopdown.depth, 1), cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n1) := cstopdown.stack]))")))("cstopdown" cstopdown step_TCC143 0 (step_TCC137-1 nil 3804730988 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (skeep*) (("2" (lift-if) (("2" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (loop_or_push? const-decl "bool" cstopdown nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (= const-decl "[T, T -> boolean]" equalities nil) (ent type-decl nil cstopdown nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(cstopdown.n1 = cstopdown.num_non_terminals, cstopdown.loop_ready?(cstopdown.len, cstopdown.G, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n1) := cstopdown.stack], cstopdown.pos, cstopdown.n1)) ELSE FORALL (i: naturalnumbers.upto(cstopdown.len)), n: (booleans.NOT)(cstopdown.loop?(cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.n1) := cstopdown.stack](i)(cstopdown.n))) ENDIF}")))("cstopdown" cstopdown step_TCC144 0 (step_TCC105-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.loop" "(cstopdown.nice_entry?(cstopdown.len, cstopdown.pos))")))("cstopdown" cstopdown step_TCC145 0 (step_TCC106-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (uint32 type-eq-decl nil integertypes nil) (NOT const-decl "[bool -> bool]" booleans nil) (empty? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (good_good_entry? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good? const-decl "bool" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (good_fail? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (good_tscaffold? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (good_or_fail? const-decl "bool" cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (fine_entry? const-decl "bool" cstopdown nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (len skolem-const-decl "uint32" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (loop adt-constructor-decl "(loop?)" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_good_tscaffold formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(cstopdown.start, cstopdown.rootnt))")))("cstopdown" cstopdown step_TCC146 0 (step_TCC131-1 nil 3804706560 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (good_stack? def-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (uint64 type-eq-decl nil integertypes nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (good_push_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (scafcount_max formula-decl nil cstopdown nil) (exp2_lt formula-decl nil exp2 nil) (loop adt-constructor-decl "(loop?)" cstopdown nil) (scafcount_update formula-decl nil cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (empty? const-decl "bool" cstopdown nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (pushcount const-decl "uint64" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.-)(cstopdown.depth, 1)" "(cstopdown.good_depth?(cstopdown.len, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop]))")))("cstopdown" cstopdown step_TCC147 0 (step_TCC132-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" loop) (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u loop stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) ((int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (good_mem_stack formula-decl nil cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (good_good_entry? const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (fine_push_entry? const-decl "bool" cstopdown nil) (ent_push_extensionality formula-decl nil cstopdown nil) (even_minus_odd_is_odd application-judgement "odd_int" integers nil) (push_or_pending? const-decl "bool" cstopdown nil) (loop adt-constructor-decl "(loop?)" cstopdown nil) (cur skolem-const-decl "uint8" cstopdown nil) (pos!1 skolem-const-decl "uint32" cstopdown nil) (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" cstopdown nil) (len skolem-const-decl "uint32" cstopdown nil) (G skolem-const-decl "lang_spec" cstopdown nil) (s skolem-const-decl "strings(len)" cstopdown nil) (start skolem-const-decl "upto(len)" cstopdown nil) (rootnt skolem-const-decl "non_terminal" cstopdown nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (depth skolem-const-decl "(good_depth?(len, St`scaf))" cstopdown nil) (fine_mem_stack formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "cstopdown.rest" "(cstopdown.fine_stack?(cstopdown.len, cstopdown.G, (number_fields.-)(cstopdown.depth, 1), cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop]))")))("cstopdown" cstopdown step_TCC148 0 (step_TCC142-1 nil 3804730988 ("" (skeep*) (("" (typepred stack) (("" (expand good_stack?) (("" (ground) (("1" (grind) nil nil) ("2" (grind :exclude (good_stack? fine_stack? mem_stack?)) nil nil)) nil)) nil)) nil)) nil) ((state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (good_stack? def-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (uint64 type-eq-decl nil integertypes nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (good_push_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (loop_or_push? const-decl "bool" cstopdown nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (successor const-decl "bool" cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "booleans.TRUE" "{b: booleans.bool | IF b THEN booleans.OR(cstopdown.nt(cstopdown.rest) = cstopdown.num_non_terminals, cstopdown.loop_ready?(cstopdown.len, cstopdown.G, cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop], cstopdown.pos(cstopdown.rest), cstopdown.nt(cstopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(cstopdown.len)), n: (booleans.NOT)(cstopdown.loop?(cstopdown.St`scaf WITH [(cstopdown.pos)(cstopdown.cur) := cstopdown.loop](i)(cstopdown.n))) ENDIF}")))("cstopdown" cstopdown size_TCC1 0 (size_TCC1-1 nil 3808434333 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (size subtype "cstopdown.len" "naturalnumbers.upto(cstopdown.len)")))("cstopdown" cstopdown size_TCC2 0 (size_TCC2-1 nil 3808434333 ("" (skeep*) (("" (typepred "St`depth") (("" (expand good_depth?) (("" (expand pushcount) (("" (use sigma_max) (("" (grind :exclude exp2) nil nil)) nil)) nil)) nil)) nil)) nil) ((state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (uint32 type-eq-decl nil integertypes nil) (<= const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (pushcount const-decl "uint64" cstopdown nil) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (scafcount const-decl "uint64" cstopdown nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (sigma_nat application-judgement "nat" sigma reals) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (sigma_max formula-decl nil cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (size subtype "(number_fields.-)((number_fields.*(((number_fields.+)(cstopdown.len, 1)), cstopdown.num_non_terminals)), cstopdown.St`depth)" "nat")))("cstopdown" cstopdown endstate_TCC1 0 (endstate_TCC1-1 nil 3804455654 ("" (skeep*) (("" (typepred "st`stack") (("" (grind) nil nil)) nil)) nil) ((state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (good_push_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (endstate subtype "cstopdown.st`stack" "(cstopdown.push?)")))("cstopdown" cstopdown parse_TCC1 0 (parse_TCC2-1 nil 3804455654 ("" (use well_founded_le) (("" (grind :exclude <) nil nil)) nil) ((well_founded? const-decl "bool" orders nil) (restrict const-decl "R" restrict nil) (well_founded_le formula-decl nil ordinals nil)) nil (parse well-founded "restrict[[ordstruct_adt.ordstruct, ordstruct_adt.ordstruct], [ordinal, ordinal], booleans.bool].restrict(ordinals.<)" "nil")))("cstopdown" cstopdown parse_TCC2 0 (parse_TCC3-1 nil 3804455654 ("" (skeep*) (("" (typepred "St`stack") (("" (grind) nil nil)) nil)) nil) ((state type-eq-decl nil cstopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (= const-decl "[T, T -> boolean]" equalities nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (fine_stack? def-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (fine_scaffold? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (lang_spec type-eq-decl nil cstopdown nil) (peg type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (good_push_entry? const-decl "bool" cstopdown nil) (ent type-decl nil cstopdown nil) (uint32 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (parse subtype "cstopdown.St" "cstopdown.endstate(cstopdown.len, cstopdown.G, cstopdown.s, cstopdown.start, cstopdown.root)")))("cstopdown" cstopdown parse_TCC3 0 (parse_TCC4-1 nil 3804455654 ("" (skeep*) (("" (expand restrict) (("" (expand size) (("" (rewrite lex2_lt) (("1" (flatten) (("1" (hide 3) (("1" (typepred "St`stack") (("1" (apply (then (expand step) (lift-if) (ground))) (("1" (hide 1) (("1" (grind) nil nil)) nil) ("2" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("3" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("4" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("5" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("6" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("7" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("8" (grind :defs nil) (("8" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil) ("9" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("10" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("11" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("12" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (hide 2) (("2" (expand nice_entry?) (("2" (expand "good_good_entry?") (("2" (typepred "step(len, G, s, start, root)(St)`scaf") (("2" (expand step) (("2" (expand fine_scaffold?) (("2" (ground) (("2" (hide -1) (("2" (expand good_tscaffold?) (("2" (inst - "pos(St`stack)" "nt(St`stack)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("13" (reveal 1) (("13" (hide 2) (("13" (ground) (("1" (expand step) (("1" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("2" (expand step) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("14" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("15" (reveal 1) (("15" (hide 2) (("15" (ground) (("1" (expand step) (("1" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("2" (expand step) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("16" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("17" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("18" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (hide 2) (("2" (typepred "step(len, G, s, start, root)(St)`scaf") (("2" (expand fine_scaffold?) (("2" (ground) (("2" (hide -1) (("2" (expand good_tscaffold?) (("2" (inst - "pos(St`stack)" "nt(St`stack)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("19" (reveal 1) (("19" (hide 2) (("19" (ground) (("1" (expand step) (("1" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("2" (expand step) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("20" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("21" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (typepred "step(len, G, s, start, root)(St)`scaf") (("2" (expand fine_scaffold?) (("2" (ground) (("2" (hide -1) (("2" (expand good_tscaffold?) (("2" (inst - "pos(St`stack)" "nt(St`stack)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("22" (reveal 1) (("22" (hide 2) (("22" (expand step) (("22" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("23" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("24" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("25" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("26" (reveal 1) (("26" (hide 2) (("26" (expand step) (("26" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("27" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("28" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("29" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("30" (reveal 1) (("30" (hide 2) (("30" (expand step) (("30" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("31" (grind :defs nil) (("31" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "St`depth") (("2" (expand good_depth?) (("2" (expand pushcount) (("2" (use sigma_max) (("2" (ground) nil nil)) nil)) nil)) nil)) nil) ("3" (typepred "step(len, G, s, start, root)(St)`depth") (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (use sigma_max) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((restrict const-decl "R" restrict nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_plus_int_is_int application-judgement "int" integers nil) (lex2_lt formula-decl nil lex2 nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (uint32 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (ent type-decl nil cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (uint64 type-eq-decl nil integertypes nil) (scafcount const-decl "uint64" cstopdown nil) (peg type-decl nil cstopdown nil) (lang_spec type-eq-decl nil cstopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (fine_stack? def-decl "bool" cstopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" cstopdown nil) (loop_ready? const-decl "bool" cstopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" cstopdown nil) (NOT const-decl "[bool -> bool]" booleans nil) (loop? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (state type-eq-decl nil cstopdown nil) (step const-decl "state(len, G, s, start, rootnt)" cstopdown nil) (push_or_pending? const-decl "bool" cstopdown nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (* const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (nonneg_rat_max application-judgement "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil) (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (empty? const-decl "bool" cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (good_good_entry? const-decl "bool" cstopdown nil) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (sigma_nat application-judgement "nat" sigma reals) (successor const-decl "bool" cstopdown nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (scafcount_update formula-decl nil cstopdown nil) (good? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" cstopdown nil) (fail? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (fail adt-constructor-decl "[uint64 -> (fail?)]" cstopdown nil) (dep shared-adt-accessor-decl "[{x: ent | fail?(x) OR good?(x)} -> uint64]" cstopdown nil) (concat? adt-recognizer-decl "[peg -> boolean]" cstopdown nil) (or? adt-recognizer-decl "[peg -> boolean]" cstopdown nil) (e1 shared-adt-accessor-decl "[{x: peg | concat?(x) OR or?(x)} -> non_terminal]" cstopdown nil) (real_plus_real_is_real application-judgement "real" reals nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil) (span adt-accessor-decl "[(good?) -> uint32]" cstopdown nil) (e2 shared-adt-accessor-decl "[{x: peg | concat?(x) OR or?(x)} -> non_terminal]" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (minus_u32_u32 application-judgement "int64" integertypes nil) (good_entry? const-decl "bool" cstopdown nil) (good_good? const-decl "bool" cstopdown nil) (loop adt-constructor-decl "(loop?)" cstopdown nil) (good_or_fail? const-decl "bool" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (and? adt-recognizer-decl "[peg -> boolean]" cstopdown nil) (not? adt-recognizer-decl "[peg -> boolean]" cstopdown nil) (e shared-adt-accessor-decl "[{x: peg | and?(x) OR not?(x)} -> non_terminal]" cstopdown nil) (sigma_max formula-decl nil cstopdown nil) (pushcount const-decl "uint64" cstopdown nil) (size const-decl "ordinal" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (parse termination "cstopdown.parse(cstopdown.len, cstopdown.G, cstopdown.s, cstopdown.start, cstopdown.root)(cstopdown.step(cstopdown.len, cstopdown.G, cstopdown.s, cstopdown.start, cstopdown.root)(cstopdown.St))" "nil")))("cstopdown" cstopdown doparse_TCC1 0 (doparse_TCC3-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (plus_u32_u32 application-judgement "uint64" integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (good_good_entry? const-decl "bool" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (doparse subtype "cstopdown.pend" "[non_terminal -> (cstopdown.nice_entry?(cstopdown.len, cstopdown.i))]")))("cstopdown" cstopdown doparse_TCC2 0 (doparse_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (doparse subtype "0" "naturalnumbers.upto(cstopdown.len)")))("cstopdown" cstopdown doparse_TCC3 0 (doparse_TCC4-1 nil 3804547853 ("" (grind) nil nil) ((num_non_terminals const-decl "byte" cstopdown nil) (exp2 def-decl "posnat" exp2 nil) (nil application-judgement "above(n)" exp2 nil)) nil (doparse subtype "cstopdown.num_non_terminals" "uint8")))("cstopdown" cstopdown doparse_TCC4 0 (doparse_TCC4-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (doparse subtype "cstopdown.push(0, cstopdown.num_non_terminals)" "(cstopdown.nice_entry?(cstopdown.len, 0))")))("cstopdown" cstopdown doparse_TCC5 0 (doparse_TCC5-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (num_non_terminals const-decl "byte" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (good_or_fail? const-decl "bool" cstopdown nil) (count const-decl "upto(len)" arrayCount nil) (scafcount const-decl "uint64" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (doparse subtype "(LAMBDA (i: naturalnumbers.upto(cstopdown.len)): cstopdown.pend) WITH [(0)(cstopdown.n) := cstopdown.push(0, cstopdown.num_non_terminals)]" "(cstopdown.fine_scaffold?(cstopdown.len, cstopdown.G, cstopdown.s)(0, cstopdown.n))")))("cstopdown" cstopdown doparse_TCC6 0 (doparse_TCC1-1 nil 3804455654 ("" (skeep*) (("" (grind :exclude good_depth?) (("" (expand good_depth?) (("" (expand pushcount) (("" (rewrite scafcount_update) (("" (use "empty_card[below(255)]") (("1" (ground) (("1" (replace -2 :hide? t) (("1" (rewrite "reals@sigma[upto(len)].sigma_zero") nil nil)) nil)) nil) ("2" (hide 2) (("2" (inst + 255 "id[below(255)]") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((num_non_terminals const-decl "byte" cstopdown nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (pushcount const-decl "uint64" cstopdown nil) (injective? const-decl "bool" functions nil) (is_finite const-decl "bool" finite_sets nil) (below type-eq-decl nil naturalnumbers nil) (empty_card formula-decl nil finite_sets nil) (set type-eq-decl nil sets nil) (finite_set type-eq-decl nil finite_sets nil) (= const-decl "[T, T -> boolean]" equalities nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (below type-eq-decl nil nat_types nil) (FALSE const-decl "bool" booleans nil) (sigma_zero formula-decl nil sigma reals) (OR const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (restrict const-decl "R" restrict nil) (scafcount const-decl "uint64" cstopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" cstopdown nil) (uint8 type-eq-decl nil integertypes nil) (push? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (pending adt-constructor-decl "(pending?)" cstopdown nil) (pending? adt-recognizer-decl "[ent -> boolean]" cstopdown nil) (scaffold type-eq-decl nil cstopdown nil) (ent type-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (byte type-eq-decl nil cstopdown nil) (< const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (uint32 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (<= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (scafcount_update formula-decl nil cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nice_entry? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_depth? const-decl "bool" cstopdown nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (doparse subtype "1" "(cstopdown.good_depth?(cstopdown.len, (LAMBDA (i: naturalnumbers.upto(cstopdown.len)): cstopdown.pend) WITH [(0)(cstopdown.n) := cstopdown.push(0, cstopdown.num_non_terminals)]))")))("cstopdown" cstopdown doparse_TCC7 0 (doparse_TCC6-1 nil 3804534082 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (fine_stack? def-decl "bool" cstopdown nil) (mem_stack? def-decl "bool" cstopdown nil) (good_stack? def-decl "bool" cstopdown nil) (successor const-decl "bool" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (doparse subtype "cstopdown.push(0, cstopdown.n)" "(cstopdown.fine_stack?(cstopdown.len, cstopdown.G, 1, (LAMBDA (i: naturalnumbers.upto(cstopdown.len)): cstopdown.pend) WITH [(0)(cstopdown.n) := cstopdown.push(0, cstopdown.num_non_terminals)]))")))("cstopdown" cstopdown doparse_TCC8 0 (doparse_TCC8-1 nil 3804730988 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (<= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (num_non_terminals const-decl "byte" cstopdown nil) (nil application-judgement "above(n)" exp2 nil)) nil (doparse subtype "booleans.FALSE" "{b: booleans.bool | IF b THEN booleans.OR(cstopdown.n = cstopdown.num_non_terminals, cstopdown.loop_ready?(cstopdown.len, cstopdown.G, (LAMBDA (i: naturalnumbers.upto(cstopdown.len)): cstopdown.pend) WITH [(0)(cstopdown.n) := cstopdown.push(0, cstopdown.num_non_terminals)], 0, cstopdown.n)) ELSE FORALL (i_1: naturalnumbers.upto(cstopdown.len)), (n_1: cstopdown.non_terminal): (booleans.NOT)(cstopdown.loop?((LAMBDA (i: naturalnumbers.upto(cstopdown.len)): cstopdown.pend) WITH [(0)(cstopdown.n) := cstopdown.push(0, cstopdown.num_non_terminals)](i_1)(n_1))) ENDIF}")))("cstopdowntest" cstopdowntest iparse_TCC1 0 (iparse_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (good_good_entry? const-decl "bool" cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil)) nil (iparse subtype "cstopdowntest.pend" "[non_terminal -> (cstopdown.nice_entry?(cstopdowntest.len, cstopdowntest.i))]")))("cstopdowntest" cstopdowntest iparse_TCC2 0 (iparse_TCC2-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (byte type-eq-decl nil cstopdown nil) (num_non_terminals const-decl "byte" cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil)) nil (iparse subtype "0" "uint32")))("cstopdowntest" cstopdowntest iparse_TCC3 0 (iparse_TCC3-1 nil 3805067364 ("" (grind) nil nil) ((num_non_terminals const-decl "byte" cstopdown nil) (exp2 def-decl "posnat" exp2 nil)) nil (iparse subtype "cstopdown.num_non_terminals" "uint8")))("cstopdowntest" cstopdowntest iparse_TCC4 0 (iparse_TCC4-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil)) nil (iparse subtype "cstopdown.push(0, cstopdown.num_non_terminals)" "(cstopdown.nice_entry?(cstopdowntest.len, cstopdowntest.start))")))("cstopdowntest" cstopdowntest iparse_TCC5 0 (iparse_TCC5-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (good_entry? const-decl "bool" cstopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (num_non_terminals const-decl "byte" cstopdown nil) (good_good_entry? const-decl "bool" cstopdown nil) (good_push_entry? const-decl "bool" cstopdown nil) (nice_entry? const-decl "bool" cstopdown nil) (good_root? const-decl "bool" cstopdown nil) (good_or_fail? const-decl "bool" cstopdown nil) (count const-decl "upto(len)" arrayCount nil) (scafcount const-decl "uint64" cstopdown nil) (gfcount const-decl "uint64" cstopdown nil) (good_tscaffold? const-decl "bool" cstopdown nil) (fine_scaffold? const-decl "bool" cstopdown nil)) nil (iparse subtype "(LAMBDA (i: naturalnumbers.upto(cstopdowntest.len)): cstopdowntest.pend) WITH [(cstopdowntest.start)(cstopdowntest.root) := cstopdown.push(0, cstopdown.num_non_terminals)]" "(cstopdown.fine_scaffold?(cstopdowntest.len, cstopdowntest.G, cstopdowntest.s)(cstopdowntest.start, cstopdowntest.root))")))("cstopdowntest" cstopdowntest iparse_TCC6 0 (iparse_TCC6-1 nil 3805067364 ("" (subtype-tcc) nil nil) nil nil (iparse subtype "1" "(cstopdown.good_depth?(cstopdowntest.len, (LAMBDA (i: naturalnumbers.upto(cstopdowntest.len)): cstopdowntest.pend) WITH [(cstopdowntest.start)(cstopdowntest.root) := cstopdown.push(0, cstopdown.num_non_terminals)]))")))("cstopdowntest" cstopdowntest iparse_TCC7 0 (iparse_TCC7-1 nil 3805067364 ("" (subtype-tcc) nil nil) nil nil (iparse subtype "cstopdowntest.start" "uint32")))("cstopdowntest" cstopdowntest iparse_TCC8 0 (iparse_TCC8-1 nil 3805067364 ("" (subtype-tcc) nil nil) nil nil (iparse subtype "cstopdown.push(cstopdowntest.start, cstopdowntest.root)" "(cstopdown.fine_stack?(cstopdowntest.len, cstopdowntest.G, 1, (LAMBDA (i: naturalnumbers.upto(cstopdowntest.len)): cstopdowntest.pend) WITH [(cstopdowntest.start)(cstopdowntest.root) := cstopdown.push(0, cstopdown.num_non_terminals)]))")))("cstopdowntest" cstopdowntest iparse_TCC9 0 (iparse_TCC9-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (byte type-eq-decl nil cstopdown nil) (non_terminal type-eq-decl nil cstopdown nil) (nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (num_non_terminals const-decl "byte" cstopdown nil)) nil (iparse subtype "booleans.FALSE" "{b: booleans.bool | IF b THEN booleans.OR(cstopdowntest.root = cstopdown.num_non_terminals, cstopdown.loop_ready?(cstopdowntest.len, cstopdowntest.G, (LAMBDA (i: naturalnumbers.upto(cstopdowntest.len)): cstopdowntest.pend) WITH [(cstopdowntest.start)(cstopdowntest.root) := cstopdown.push(0, cstopdown.num_non_terminals)], cstopdowntest.start, cstopdowntest.root)) ELSE FORALL (i_1: naturalnumbers.upto(cstopdowntest.len)), n: (booleans.NOT)(cstopdown.loop?((LAMBDA (i: naturalnumbers.upto(cstopdowntest.len)): cstopdowntest.pend) WITH [(cstopdowntest.start)(cstopdowntest.root) := cstopdown.push(0, cstopdown.num_non_terminals)](i_1)(cstopdown.n))) ENDIF}")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC1 0 (pyaml_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "1" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC2 0 (pyaml_TCC2-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "3" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC3 0 (pyaml_TCC3-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "2" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC4 0 (pyaml_TCC4-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "1" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC5 0 (pyaml_TCC5-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "4" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC6 0 (pyaml_TCC6-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "35" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC7 0 (pyaml_TCC7-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "5" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC8 0 (pyaml_TCC8-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "11" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC9 0 (pyaml_TCC9-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "6" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC10 0 (pyaml_TCC10-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC11 0 (pyaml_TCC11-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "8" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC12 0 (pyaml_TCC12-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "10" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC13 0 (pyaml_TCC13-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "9" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC14 0 (pyaml_TCC14-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC15 0 (pyaml_TCC15-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "12" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC16 0 (pyaml_TCC16-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "14" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC17 0 (pyaml_TCC17-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "13" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC18 0 (pyaml_TCC18-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC19 0 (pyaml_TCC19-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "15" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC20 0 (pyaml_TCC20-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "31" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC21 0 (pyaml_TCC21-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "16" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC22 0 (pyaml_TCC22-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "28" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC23 0 (pyaml_TCC23-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "1" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC24 0 (pyaml_TCC24-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "17" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC25 0 (pyaml_TCC25-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "18" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC26 0 (pyaml_TCC26-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC27 0 (pyaml_TCC27-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "19" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC28 0 (pyaml_TCC28-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "25" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC29 0 (pyaml_TCC29-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "21" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC30 0 (pyaml_TCC30-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "25" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC31 0 (pyaml_TCC31-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "22" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC32 0 (pyaml_TCC32-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "20" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC33 0 (pyaml_TCC33-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "23" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC34 0 (pyaml_TCC34-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "19" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC35 0 (pyaml_TCC35-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "19" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC36 0 (pyaml_TCC36-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC37 0 (pyaml_TCC37-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "24" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC38 0 (pyaml_TCC38-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "26" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC39 0 (pyaml_TCC39-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "27" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC40 0 (pyaml_TCC40-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "20" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC41 0 (pyaml_TCC41-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "29" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC42 0 (pyaml_TCC42-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "0" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC43 0 (pyaml_TCC43-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "30" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC44 0 (pyaml_TCC44-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC45 0 (pyaml_TCC45-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "32" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC46 0 (pyaml_TCC46-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "12" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC47 0 (pyaml_TCC47-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "33" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC48 0 (pyaml_TCC48-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "14" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC49 0 (pyaml_TCC49-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "34" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC50 0 (pyaml_TCC50-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC51 0 (pyaml_TCC51-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "36" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC52 0 (pyaml_TCC52-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "38" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC53 0 (pyaml_TCC53-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "37" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC54 0 (pyaml_TCC54-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC55 0 (pyaml_TCC55-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "39" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC56 0 (pyaml_TCC56-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "43" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC57 0 (pyaml_TCC57-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "40" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC58 0 (pyaml_TCC58-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "10" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC59 0 (pyaml_TCC59-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "0" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC60 0 (pyaml_TCC60-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "41" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC61 0 (pyaml_TCC61-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "42" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC62 0 (pyaml_TCC62-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "10" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC63 0 (pyaml_TCC63-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "33" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC64 0 (pyaml_TCC64-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "40" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC65 0 (pyaml_TCC65-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "44" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC66 0 (pyaml_TCC66-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest cat_TCC1 0 (cat_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (cat subtype "(number_fields.-)(exp2.exp2(8), sigmatopdowntest.l1)" "nat")))("sigmatopdowntest" sigmatopdowntest cat_TCC2 0 (cat_TCC2-1 nil 3805067364 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (uint8 type-eq-decl nil integertypes nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (exp2 def-decl "posnat" exp2 nil)) nil (cat subtype "sigmatopdowntest.l1" "uint32")))("sigmatopdowntest" sigmatopdowntest cat_TCC3 0 (cat_TCC3-1 nil 3805067364 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (uint8 type-eq-decl nil integertypes nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (exp2 def-decl "posnat" exp2 nil) (nil application-judgement "above(n)" exp2 nil)) nil (cat subtype "sigmatopdowntest.l2" "uint32")))("sigmatopdowntest" sigmatopdowntest cat_TCC4 0 (cat_TCC4-1 nil 3805067364 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (uint8 type-eq-decl nil integertypes nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (exp2 def-decl "posnat" exp2 nil) (nil application-judgement "above(n)" exp2 nil)) nil (cat subtype "(number_fields.+)(sigmatopdowntest.l1, sigmatopdowntest.l2)" "uint32")))("sigmatopdowntest" sigmatopdowntest cat_TCC5 0 (cat_TCC5-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil)) nil (cat subtype "(number_fields.-)(sigmatopdowntest.i, sigmatopdowntest.l1)" "naturalnumbers.below(sigmatopdowntest.l2)")))("sigmatopdowntest" sigmatopdowntest tok0_TCC1 0 (tok0_TCC1-1 nil 3805067364 ("" (cond-coverage-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (tok0 coverage "COND sigmatopdowntest.i = 0 -> 39, sigmatopdowntest.i = 1 -> 116, sigmatopdowntest.i = 2 -> 111, sigmatopdowntest.i = 3 -> 107, sigmatopdowntest.i = 4 -> 101, sigmatopdowntest.i = 5 -> 110, sigmatopdowntest.i = 6 -> 39 ENDCOND" "nil")))("sigmatopdowntest" sigmatopdowntest tok1_TCC1 0 (tok1_TCC1-1 nil 3805067364 ("" (cond-coverage-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (tok1 coverage "COND sigmatopdowntest.i = 0 -> 39, sigmatopdowntest.i = 1 -> 116, sigmatopdowntest.i = 2 -> 111, sigmatopdowntest.i = 3 -> 107, sigmatopdowntest.i = 4 -> 101, sigmatopdowntest.i = 5 -> 110, sigmatopdowntest.i = 6 -> 92, sigmatopdowntest.i = 7 -> 39, sigmatopdowntest.i = 8 -> 39 ENDCOND" "nil")))("sigmatopdowntest" sigmatopdowntest obrace_TCC1 0 (obrace_TCC1-1 nil 3805067364 ("" (cond-coverage-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (obrace coverage "COND sigmatopdowntest.i = 0 -> 123, sigmatopdowntest.i = 1 -> 32, sigmatopdowntest.i = 2 -> 32 ENDCOND" "nil")))("sigmatopdowntest" sigmatopdowntest emptydict2_TCC1 0 (emptydict2_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (emptydict2 subtype "6" "uint32")))("sigmatopdowntest" sigmatopdowntest emptydict2_TCC2 0 (emptydict2_TCC3-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (emptydict2 subtype "3" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 3))")))("sigmatopdowntest" sigmatopdowntest dict1_TCC1 0 (dict1_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (dict1 subtype "22" "uint32")))("sigmatopdowntest" sigmatopdowntest dict1_TCC2 0 (dict1_TCC3-1 nil 3805067364 ("" (grind) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (exp2 def-decl "posnat" exp2 nil)) nil (dict1 subtype "3" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 6))")))("sigmatopdowntest" sigmatopdowntest dict1_TCC3 0 (dict1_TCC4-1 nil 3805067364 ("" (grind) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (exp2 def-decl "posnat" exp2 nil)) nil (dict1 subtype "9" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 3))")))("sigmatopdowntest" sigmatopdowntest dict1_TCC4 0 (dict1_TCC6-1 nil 3805067364 ("" (grind) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (exp2 def-decl "posnat" exp2 nil)) nil (dict1 subtype "12" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 7))")))("sigmatopdowntest" sigmatopdowntest dict1_TCC5 0 (dict1_TCC7-1 nil 3805067364 ("" (grind) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (exp2 def-decl "posnat" exp2 nil)) nil (dict1 subtype "19" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 3))")))("sigmatopdowntest" sigmatopdowntest test0_TCC1 0 (test0_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (test0 subtype "2" "uint32")))("sigmatopdowntest" sigmatopdowntest test0_TCC2 0 (test0_TCC3-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (test0 subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest test0eval 0 (test0eval-1 nil 3805071593 ("" (auto-rewrite-theory "sigmatopdown") (("" (auto-rewrite-theory "sigmatopdowntest") (("" (assert) (("" (postpone) nil nil)) nil)) nil)) nil) nil shostak))("sigmatopdowntest" sigmatopdowntest test1_TCC1 0 (test1_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (test1 subtype "7" "uint32")))("sigmatopdowntest" sigmatopdowntest test1_TCC2 0 (test1_TCC2-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (test1 subtype "17" "non_terminal")))("sigmatopdowntest" sigmatopdowntest test11_TCC1 0 (test11_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (test11 subtype "9" "uint32")))("sigmatopdowntest" sigmatopdowntest test2_TCC1 0 (test2_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (test2 subtype "0" "non_terminal")))("sigmatopdowntest" sigmatopdowntest iparse_TCC1 0 (iparse_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (byte type-eq-decl nil sigmatopdown nil) (non_terminal type-eq-decl nil sigmatopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (good_good_entry? const-decl "bool" sigmatopdown nil) (num_non_terminals const-decl "byte" sigmatopdown nil) (good_push_entry? const-decl "bool" sigmatopdown nil) (nice_entry? const-decl "bool" sigmatopdown nil)) nil (iparse subtype "sigmatopdowntest.pend" "[non_terminal -> (sigmatopdown.nice_entry?(sigmatopdowntest.len, sigmatopdowntest.i))]")))("sigmatopdowntest" sigmatopdowntest iparse_TCC2 0 (iparse_TCC2-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (byte type-eq-decl nil sigmatopdown nil) (num_non_terminals const-decl "byte" sigmatopdown nil) (non_terminal type-eq-decl nil sigmatopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil)) nil (iparse subtype "0" "uint32")))("sigmatopdowntest" sigmatopdowntest iparse_TCC3 0 (iparse_TCC3-1 nil 3805067364 ("" (grind) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil) (exp2 def-decl "posnat" exp2 nil)) nil (iparse subtype "sigmatopdown.num_non_terminals" "uint8")))("sigmatopdowntest" sigmatopdowntest iparse_TCC4 0 (iparse_TCC4-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil) (good_good_entry? const-decl "bool" sigmatopdown nil) (good_push_entry? const-decl "bool" sigmatopdown nil) (nice_entry? const-decl "bool" sigmatopdown nil)) nil (iparse subtype "sigmatopdown.push(0, sigmatopdown.num_non_terminals)" "(sigmatopdown.nice_entry?(sigmatopdowntest.len, sigmatopdowntest.start))")))("sigmatopdowntest" sigmatopdowntest iparse_TCC5 0 (iparse_TCC5-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (byte type-eq-decl nil sigmatopdown nil) (non_terminal type-eq-decl nil sigmatopdown nil) (good_entry? const-decl "bool" sigmatopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (num_non_terminals const-decl "byte" sigmatopdown nil) (good_good_entry? const-decl "bool" sigmatopdown nil) (good_push_entry? const-decl "bool" sigmatopdown nil) (nice_entry? const-decl "bool" sigmatopdown nil) (good_root? const-decl "bool" sigmatopdown nil) (good_or_fail? const-decl "bool" sigmatopdown nil) (count const-decl "upto(len)" arrayCount nil) (scafcount const-decl "uint64" sigmatopdown nil) (gfcount const-decl "uint64" sigmatopdown nil) (good_tscaffold? const-decl "bool" sigmatopdown nil) (fine_scaffold? const-decl "bool" sigmatopdown nil)) nil (iparse subtype "(LAMBDA (i: naturalnumbers.upto(sigmatopdowntest.len)): sigmatopdowntest.pend) WITH [(sigmatopdowntest.start)(sigmatopdowntest.root) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)]" "(sigmatopdown.fine_scaffold?(sigmatopdowntest.len, sigmatopdowntest.G, sigmatopdowntest.s)(sigmatopdowntest.start, sigmatopdowntest.root))")))("sigmatopdowntest" sigmatopdowntest iparse_TCC6 0 (iparse_TCC6-1 nil 3805067364 ("" (subtype-tcc) nil nil) nil nil (iparse subtype "1" "(sigmatopdown.good_depth?(sigmatopdowntest.len, (LAMBDA (i: naturalnumbers.upto(sigmatopdowntest.len)): sigmatopdowntest.pend) WITH [(sigmatopdowntest.start)(sigmatopdowntest.root) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)]))")))("sigmatopdowntest" sigmatopdowntest iparse_TCC7 0 (iparse_TCC7-1 nil 3805067364 ("" (subtype-tcc) nil nil) nil nil (iparse subtype "sigmatopdowntest.start" "uint32")))("sigmatopdowntest" sigmatopdowntest iparse_TCC8 0 (iparse_TCC8-1 nil 3805067364 ("" (subtype-tcc) nil nil) nil nil (iparse subtype "sigmatopdown.push(sigmatopdowntest.start, sigmatopdowntest.root)" "(sigmatopdown.fine_stack?(sigmatopdowntest.len, sigmatopdowntest.G, 1, (LAMBDA (i: naturalnumbers.upto(sigmatopdowntest.len)): sigmatopdowntest.pend) WITH [(sigmatopdowntest.start)(sigmatopdowntest.root) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)]))")))("sigmatopdowntest" sigmatopdowntest iparse_TCC9 0 (iparse_TCC9-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (byte type-eq-decl nil sigmatopdown nil) (non_terminal type-eq-decl nil sigmatopdown nil) (nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (num_non_terminals const-decl "byte" sigmatopdown nil)) nil (iparse subtype "booleans.FALSE" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdowntest.root = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdowntest.len, sigmatopdowntest.G, (LAMBDA (i: naturalnumbers.upto(sigmatopdowntest.len)): sigmatopdowntest.pend) WITH [(sigmatopdowntest.start)(sigmatopdowntest.root) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)], sigmatopdowntest.start, sigmatopdowntest.root)) ELSE FORALL (i_1: naturalnumbers.upto(sigmatopdowntest.len)), n: (booleans.NOT)(sigmatopdown.loop?((LAMBDA (i: naturalnumbers.upto(sigmatopdowntest.len)): sigmatopdowntest.pend) WITH [(sigmatopdowntest.start)(sigmatopdowntest.root) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)](i_1)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown subtype_TCC1 0 (subtype_TCC1-1 nil 3804536638 ("" (grind) nil nil) nil nil (subtype_ subtype "sigmatopdown.x" "uint32")))("sigmatopdown" sigmatopdown subtype_TCC2 0 (subtype_TCC2-1 nil 3804564519 ("" (grind) nil nil) nil nil (subtype_ subtype "sigmatopdown.x" "uint8")))("sigmatopdown" sigmatopdown fine_push_entry?_TCC1 0 (fine_push_entry?_TCC1-1 nil 3807728459 ("" (subtype-tcc) nil nil) nil nil (fine_push_entry? subtype "sigmatopdown.x" "(sigmatopdown.push?)")))("sigmatopdown" sigmatopdown successor_TCC1 0 (successor_TCC1-1 nil 3804904050 ("" (subtype-tcc) nil nil) nil nil (successor subtype "sigmatopdown.entry1" "(sigmatopdown.push?)")))("sigmatopdown" sigmatopdown successor_TCC2 0 (successor_TCC2-1 nil 3804904050 ("" (subtype-tcc) nil nil) nil nil (successor subtype "sigmatopdown.entry2" "(sigmatopdown.push?)")))("sigmatopdown" sigmatopdown successor_TCC3 0 (successor_TCC1-1 nil 3804547853 ("" (subtype-tcc) nil nil) nil nil (successor subtype "sigmatopdown.nt1" "non_terminal")))("sigmatopdown" sigmatopdown successor_TCC4 0 (successor_TCC1-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (successor subtype "sigmatopdown.p1" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown successor_TCC5 0 (successor_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (successor subtype "sigmatopdown.p1" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown sigma_restrict_TCC1 0 (sigma_restrict_TCC1-1 nil 3806355895 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "0" "T_low[upto(j)]")))("sigmatopdown" sigmatopdown sigma_restrict_TCC2 0 (sigma_restrict_TCC2-1 nil 3806355895 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "sigmatopdown.j" "T_high[upto(j)]")))("sigmatopdown" sigmatopdown sigma_restrict_TCC3 0 (sigma_restrict_TCC3-1 nil 3806355895 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "sigmatopdown.i" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown sigma_restrict_TCC4 0 (sigma_restrict_TCC4-1 nil 3806355895 ("" (assuming-tcc) nil nil) nil nil (sigma_restrict assuming "reals@sigma[naturalnumbers.upto(sigmatopdown.j)].sigma" "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))("sigmatopdown" sigmatopdown sigma_restrict_TCC5 0 (sigma_restrict_TCC5-1 nil 3806360457 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "0" "T_low[upto(k)]")))("sigmatopdown" sigmatopdown sigma_restrict_TCC6 0 (sigma_restrict_TCC5-1 nil 3806358823 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "sigmatopdown.j" "T_high[upto(k)]")))("sigmatopdown" sigmatopdown sigma_restrict_TCC7 0 (sigma_restrict_TCC7-1 nil 3806360457 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "sigmatopdown.i" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown sigma_restrict_TCC8 0 (sigma_restrict_TCC8-1 nil 3806360457 ("" (assuming-tcc) nil nil) nil nil (sigma_restrict assuming "reals@sigma[naturalnumbers.upto(sigmatopdown.k)].sigma" "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))("sigmatopdown" sigmatopdown sigma_restrict 0 (sigma_restrict-1 nil 3806355895 ("" (skolem + ("len" "A" "_" "_")) (("" (induct j) (("1" (grind) nil nil) ("2" (skeep*) (("2" (expand "sigma" +) (("2" (inst-cp - k) (("2" (inst - "jt + 1") (("1" (ground) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (grind) nil nil)) nil)) nil)) nil) ((T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals) (sigma def-decl "real" sigma reals) (arr type-eq-decl nil arrayCount nil) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) shostak))("sigmatopdown" sigmatopdown sigma_restrict_len_TCC1 0 (sigma_restrict_len_TCC1-1 nil 3806360811 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict_len subtype "0" "T_low[upto(j)]")))("sigmatopdown" sigmatopdown sigma_restrict_len_TCC2 0 (sigma_restrict_len_TCC2-1 nil 3806360811 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict_len subtype "sigmatopdown.j" "T_high[upto(j)]")))("sigmatopdown" sigmatopdown sigma_restrict_len_TCC3 0 (sigma_restrict_len_TCC3-1 nil 3806360811 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict_len subtype "sigmatopdown.i" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown sigma_restrict_len_TCC4 0 (sigma_restrict_len_TCC4-1 nil 3806360811 ("" (assuming-tcc) nil nil) nil nil (sigma_restrict_len assuming "reals@sigma[naturalnumbers.upto(sigmatopdown.j)].sigma" "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))("sigmatopdown" sigmatopdown sigma_restrict_len_TCC5 0 (sigma_restrict_len_TCC5-1 nil 3806936723 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict_len subtype "0" "T_low[upto(len)]")))("sigmatopdown" sigmatopdown sigma_restrict_len_TCC6 0 (sigma_restrict_len_TCC6-1 nil 3806936723 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict_len subtype "sigmatopdown.j" "T_high[upto(len)]")))("sigmatopdown" sigmatopdown sigma_restrict_len_TCC7 0 (sigma_restrict_len_TCC7-1 nil 3806936723 ("" (assuming-tcc) nil nil) nil nil (sigma_restrict_len assuming "reals@sigma[naturalnumbers.upto(sigmatopdown.len)].sigma" "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))("sigmatopdown" sigmatopdown sigma_restrict_len 0 (sigma_restrict_len-1 nil 3806360812 ("" (skeep*) (("" (lemma "sigma_restrict") (("" (inst - len A j len) (("" (ground) nil nil)) nil)) nil)) nil) nil shostak))("sigmatopdown" sigmatopdown sigma_nat_TCC1 0 (sigma_nat_TCC1-1 nil 3804912405 ("" (subtype-tcc) nil nil) nil nil (sigma_nat subtype "0" "T_low[upto(len)]")))("sigmatopdown" sigmatopdown sigma_nat_TCC2 0 (sigma_nat_TCC2-1 nil 3804912405 ("" (subtype-tcc) nil nil) nil nil (sigma_nat subtype "sigmatopdown.i" "T_high[upto(len)]")))("sigmatopdown" sigmatopdown sigma_nat 0 (sigma_nat-1 nil 3804912406 ("" (skolem + ("len" _ _)) (("" (induct-and-simplify i) nil nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)) shostak))("sigmatopdown" sigmatopdown sigma_pos_TCC1 0 (sigma_pos_TCC1-1 nil 3804912405 ("" (subtype-tcc) nil nil) nil nil (sigma_pos subtype "sigmatopdown.j" "T_high[upto(len)]")))("sigmatopdown" sigmatopdown sigma_pos 0 (sigma_pos-1 nil 3804912491 ("" (skolem + ("len" _ _ _)) (("" (induct-and-simplify j) nil nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)) shostak))("sigmatopdown" sigmatopdown sigma_dec_TCC1 0 (sigma_dec_TCC1-1 nil 3804994284 ("" (subtype-tcc) nil nil) nil nil (sigma_dec subtype "sigmatopdown.j" "T_high[upto(len)]")))("sigmatopdown" sigmatopdown sigma_dec 0 (sigma_dec-1 nil 3804993479 ("" (skolem + ("len" _ _ _)) (("" (induct "j") (("1" (grind) nil nil) ("2" (skeep*) (("2" (expand sigma +) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ((T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) shostak))("sigmatopdown" sigmatopdown sigma_inc_TCC1 0 (sigma_inc_TCC1-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil (sigma_inc subtype "sigmatopdown.j" "T_high[upto(len)]")))("sigmatopdown" sigmatopdown sigma_inc_TCC2 0 (sigma_inc_TCC2-1 nil 3805854734 ("" (subtype-tcc) nil nil) nil nil (sigma_inc subtype "sigmatopdown.j" "T_high[upto(len)]")))("sigmatopdown" sigmatopdown sigma_inc 0 (sigma_inc-1 nil 3804994355 ("" (skolem + ("len" _ _ _)) (("" (induct "j") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil) ((T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) shostak))("sigmatopdown" sigmatopdown scafcount_TCC1 0 (scafcount_TCC4-1 nil 3806632141 ("" (skolem + (len A P "_")) (("" (case "FORALL ((j: upto(len))):
        sigma[upto(len)]
            (0, j,
             LAMBDA (i: upto(len)): count[ent](num_non_terminals)(P)(A(i)))
         <= (j + 1) * num_non_terminals") (("1" (skeep) (("1" (inst?) (("1" (case "(j + 1) * num_non_terminals <= exp2(64) - 1") (("1" (assert) nil nil) ("2" (hide -1 2) (("2" (use le_times_le_pos :subst (nnx "j + 1" y "exp2(32)" nnz num_non_terminals w "exp2(8)")) (("2" (ground) (("1" (rewrite exp2_sum :dir RL) (("1" (grind) nil nil)) nil) ("2" (assert) (("2" (typepred "num_non_terminals") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (induct-and-simplify j :exclude count) nil nil)) nil)) nil)) nil) ((count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals) (sigma_nat application-judgement "nat" sigma reals)) nil (scafcount subtype "sigma[naturalnumbers.upto(sigmatopdown.len)].sigma(0, sigmatopdown.j, LAMBDA (i: naturalnumbers.upto(sigmatopdown.len)): arrayCount[sigmatopdown.ent].count(sigmatopdown.num_non_terminals)(sigmatopdown.P)(sigmatopdown.A(i)))" "uint64")))("sigmatopdown" sigmatopdown sigma_max 0 (sigma_max-1 nil 3806353166 ("" (induct j) (("1" (skeep) (("1" (expand scafcount) (("1" (expand "sigma" +) (("1" (expand "sigma" +) (("1" (typepred "count(num_non_terminals)(push?)(A(0))") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skeep*) (("2" (expand scafcount) (("2" (expand "sigma" +) (("2" (inst - len A P) (("2" (ground) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (arr type-eq-decl nil arrayCount nil) (count const-decl "upto(len)" arrayCount nil)) shostak))("sigmatopdown" sigmatopdown scafcount_max 0 (scafcount_max-1 nil 3807566158 ("" (skeep*) (("" (use sigma_max) (("" (use "le_times_le_pos" :subst (y "exp2(32)" w "exp2(8)")) (("" (ground) (("1" (rewrite exp2_sum :dir RL) (("1" (assert) nil nil)) nil) ("2" (assert) (("2" (typepred num_non_terminals) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil)) shostak))("sigmatopdown" sigmatopdown scafcount0_TCC1 0 (scafcount0_TCC1-1 nil 3806988426 ("" (subtype-tcc) nil nil) nil nil (scafcount0 subtype "0" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown scafcount0 0 (scafcount0-1 nil 3806988426 ("" (grind :rewrites count_update00) nil nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil)) shostak))("sigmatopdown" sigmatopdown scafcount_step_TCC1 0 (scafcount_step_TCC1-1 nil 3806977775 ("" (subtype-tcc) nil nil) nil nil (scafcount_step subtype "(number_fields.+)(sigmatopdown.j, 1)" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown scafcount_step_TCC2 0 (scafcount_step_TCC2-1 nil 3806977775 ("" (subtype-tcc) nil nil) nil nil (scafcount_step subtype "sigmatopdown.j" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown scafcount_step 0 (scafcount_step-1 nil 3806977775 ("" (skolem + (len "_" "_" "_")) (("" (induct "j") (("1" (grind) nil nil) ("2" (skeep*) (("2" (expand "scafcount" +) (("2" (inst?) (("2" (inst?) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((arr type-eq-decl nil arrayCount nil) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) shostak))("sigmatopdown" sigmatopdown scafcount_update 0 (scafcount_update-1 nil 3806936723 ("" (skolem + (len "_" "_" "_" "_" "_" "_")) (("" (induct j) (("1" (skeep*) (("1" (rewrite scafcount0) (("1" (lift-if :updates? nil) (("1" (ground) (("1" (grind) nil nil) ("2" (case "i  = 0") (("1" (assert) (("1" (rewrite count_update00) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("3" (case "i  = 0") (("1" (assert) (("1" (rewrite count_update00) (("1" (grind) nil nil)) nil)) nil) ("2" (case "i  = 0") (("1" (propax) nil nil) ("2" (assert) nil nil)) nil)) nil) ("4" (case "i  = 0") (("1" (assert) (("1" (rewrite count_update00) (("1" (grind) nil nil)) nil)) nil) ("2" (case "i  = 0") (("1" (propax) nil nil) ("2" (grind) nil nil)) nil)) nil) ("5" (case "i  = 0") (("1" (assert) (("1" (rewrite count_update00) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skeep*) (("2" (rewrite scafcount_step) (("2" (rewrite -2) (("2" (hide -2) (("2" (case "i = 1 + jt") (("1" (assert) (("1" (rewrite count_update00) (("1" (grind :rewrites scafcount_step :exclude count) nil nil)) nil)) nil) ("2" (assert) (("2" (grind :rewrites scafcount_step :exclude count) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (count_update00 formula-decl nil arrayCount nil) (arr type-eq-decl nil arrayCount nil)) shostak))("sigmatopdown" sigmatopdown pushcount_TCC1 0 (pushcount_TCC1-1 nil 3806632141 ("" (subtype-tcc) nil nil) nil nil (pushcount subtype "sigmatopdown.len" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_stack?_TCC1 0 (good_stack?_TCC1-1 nil 3804904050 ("" (subtype-tcc) nil nil) nil nil (good_stack? subtype "sigmatopdown.stack" "(sigmatopdown.push?)")))("sigmatopdown" sigmatopdown good_stack?_TCC2 0 (good_stack?_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (good_stack? subtype "sigmatopdown.entry" "(sigmatopdown.push?)")))("sigmatopdown" sigmatopdown good_stack?_TCC3 0 (good_stack?_TCC3-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (good_stack? subtype "(number_fields.-)(sigmatopdown.depth, 1)" "uint64")))("sigmatopdown" sigmatopdown good_stack?_TCC4 0 (good_stack?_TCC4-1 nil 3804455654 ("" (termination-tcc) nil nil) nil nil (good_stack? termination "sigmatopdown.good_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.A)" "nil")))("sigmatopdown" sigmatopdown good_stack?_TCC5 0 (good_stack?_TCC5-1 nil 3804547853 ("" (subtype-tcc) nil nil) nil nil (good_stack? subtype "sigmatopdown.nt(sigmatopdown.stack)" "non_terminal")))("sigmatopdown" sigmatopdown good_stack?_TCC6 0 (good_stack?_TCC5-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (good_stack? subtype "sigmatopdown.pos(sigmatopdown.stack)" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown mem_stack?_TCC1 0 (mem_stack?_TCC1-1 nil 3804455654 ("" (skeep* :preds? t) (("" (expand "good_stack?") (("" (ground) nil nil)) nil)) nil) nil nil (mem_stack? subtype "(number_fields.-)(sigmatopdown.depth, 1)" "uint64")))("sigmatopdown" sigmatopdown mem_stack?_TCC2 0 (mem_stack?_TCC2-1 nil 3804455654 ("" (termination-tcc) nil nil) nil nil (mem_stack? termination "sigmatopdown.mem_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.A)" "nil")))("sigmatopdown" sigmatopdown mem_stack?_TCC3 0 (mem_stack?_TCC3-1 nil 3804455654 ("" (grind) nil nil) nil nil (mem_stack? subtype "sigmatopdown.A(sigmatopdown.pos(sigmatopdown.stack))(sigmatopdown.nt(sigmatopdown.stack))" "(sigmatopdown.good_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.A))")))("sigmatopdown" sigmatopdown mem_stack_push_TCC1 0 (mem_stack_push_TCC2-1 nil 3807675826 ("" (subtype-tcc) nil nil) nil nil (mem_stack_push subtype "sigmatopdown.entry" "(sigmatopdown.push?)")))("sigmatopdown" sigmatopdown mem_stack_push_TCC2 0 (mem_stack_push_TCC1-1 nil 3807675826 ("" (subtype-tcc) nil nil) nil nil (mem_stack_push subtype "(sigmatopdown.pos(sigmatopdown.entry))" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown mem_stack_push_TCC3 0 (mem_stack_push_TCC3-1 nil 3807675826 ("" (subtype-tcc) nil nil) nil nil (mem_stack_push subtype "sigmatopdown.nt(sigmatopdown.entry)" "non_terminal")))("sigmatopdown" sigmatopdown mem_stack_push 0 (mem_stack_push-1 nil 3807675827 ("" (induct depth) (("1" (lazy-grind :defs nil) nil nil) ("2" (skeep*) (("2" (expand mem_stack?) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (skeep*) (("3" (expand mem_stack? -4) (("3" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (inst?) (("2" (inst?) (("1" (ground) nil nil) ("2" (typepred entry) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (skeep*) (("4" (typepred entry) (("4" (grind) nil nil)) nil)) nil)) nil) ("5" (hide 2) (("5" (skeep*) (("5" (typepred entry) (("5" (grind) nil nil)) nil)) nil)) nil) ("6" (hide 2) (("6" (skeep*) (("6" (typepred entry) (("6" (grind) nil nil)) nil)) nil)) nil) ("7" (hide 2) (("7" (skeep*) (("7" (typepred entry) (("7" (grind) nil nil)) nil)) nil)) nil) ("8" (hide 2) (("8" (skeep*) (("8" (typepred entry) (("8" (grind) nil nil)) nil)) nil)) nil) ("9" (hide 2) (("9" (grind) nil nil)) nil)) nil) nil shostak))("sigmatopdown" sigmatopdown good_mem_stack_TCC1 0 (good_mem_stack_TCC1-1 nil 3807728459 ("" (subtype-tcc) nil nil) nil nil (good_mem_stack subtype "(sigmatopdown.pos(sigmatopdown.entry))" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_mem_stack_TCC2 0 (good_mem_stack_TCC2-1 nil 3807728459 ("" (subtype-tcc) nil nil) nil nil (good_mem_stack subtype "sigmatopdown.nt(sigmatopdown.entry)" "non_terminal")))("sigmatopdown" sigmatopdown good_mem_stack 0 (good_mem_stack-1 nil 3804823624 ("" (induct "depth") (("1" (grind) (("1" (expand "good_stack?") (("1" (propax) nil nil)) nil) ("2" (grind) (("2" (expand "good_stack?") (("2" (propax) nil nil)) nil)) nil) ("3" (expand "good_stack?") (("3" (propax) nil nil)) nil) ("4" (expand good_stack?) (("4" (propax) nil nil)) nil) ("5" (expand good_stack?) (("5" (propax) nil nil)) nil) ("6" (expand good_stack?) (("6" (propax) nil nil)) nil)) nil) ("2" (skeep*) (("2" (expand "mem_stack?" +) (("2" (ground) (("1" (typepred stack) (("1" (grind :if-match nil) nil nil)) nil) ("2" (expand "good_stack?" :fnum (-3 4)) (("2" (ground) (("1" (hide -3 4) (("1" (grind) (("1" (typepred entry) (("1" (grind) (("1" (typepred stack) (("1" (grind) (("1" (extensionality "(push?)") (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (extensionality "(push?)") (("2" (inst?) (("2" (ground) nil nil)) nil)) nil) ("3" (extensionality "(push?)") (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -3 2 5) (("2" (lift-if) (("2" (ground) (("2" (lift-if) (("2" (ground) (("2" (extensionality "(push?)") (("2" (inst?) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (inst?) (("3" (ground) (("1" (hide 2) (("1" (lift-if) (("1" (typepred entry) (("1" (grind) (("1" (extensionality "(push?)") (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lift-if) (("2" (ground) (("2" (ground) (("2" (extensionality "(push?)") (("2" (inst?) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide -3 4) (("4" (hide -1) (("4" (lift-if) (("4" (ground) (("4" (ground) (("4" (extensionality "(push?)") (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (hide -3 5) (("5" (case "pos(stack) = pos(entry)") (("1" (case "nt(stack) = nt(entry)") (("1" (extensionality "(push?)") (("1" (assert) (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (typepred u) (("2" (grind) nil nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("6" (inst? :polarity? t) (("6" (ground) (("1" (hide 2) (("1" (lift-if) (("1" (ground) (("1" (ground) (("1" (extensionality "(push?)") (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lift-if) (("2" (ground) (("2" (ground) (("2" (extensionality "(push?)") (("2" (inst?) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (grind) nil nil)) nil) ("5" (hide 2) (("5" (grind) nil nil)) nil) ("6" (hide 2) (("6" (grind) nil nil)) nil) ("7" (hide 2) (("7" (grind) nil nil)) nil) ("8" (hide 2) (("8" (grind) nil nil)) nil) ("9" (hide 2) (("9" (grind) nil nil)) nil) ("10" (hide 2) (("10" (grind) nil nil)) nil) ("11" (hide 2) (("11" (grind) nil nil)) nil)) nil) nil shostak))("sigmatopdown" sigmatopdown mem_mem_stack_TCC1 0 (mem_mem_stack_TCC1-1 nil 3804967699 ("" (skeep*) (("" (lemma good_mem_stack) (("" (inst?) (("" (ground) nil nil)) nil)) nil)) nil) nil nil (mem_mem_stack subtype "sigmatopdown.stack" "(sigmatopdown.good_stack?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.depth, sigmatopdown.A WITH [(sigmatopdown.pos(sigmatopdown.entry))(sigmatopdown.nt(sigmatopdown.entry)) := sigmatopdown.u]))")))("sigmatopdown" sigmatopdown mem_mem_stack 0 (mem_mem_stack-2 "" 3807748697 ("" (induct depth) (("1" (skeep*) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil) ("2" (skeep*) (("2" (expand mem_stack? +) (("2" (lift-if) (("2" (ground) (("2" (case "v = stack") (("1" (assert) nil nil) ("2" (assert) (("2" (inst?) (("2" (ground) (("1" (lift-if -) (("1" (ground) (("1" (lift-if -) (("1" (ground) (("1" (extensionality "(push?)") (("1" (forward-chain -) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand good_stack? -) (("2" (ground) (("1" (case "pos(stack) = pos(entry)") (("1" (case "nt(stack) = nt(entry)") (("1" (assert) (("1" (extensionality "(push?)") (("1" (inst - stack entry) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil) ("2" (case "pos(stack) = pos(entry)") (("1" (case "nt(stack) = nt(entry)") (("1" (assert) (("1" (extensionality "(push?)") (("1" (inst - stack entry) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("3" (case "pos(stack) = pos(entry)") (("1" (case "nt(stack) = nt(entry)") (("1" (extensionality "(push?)") (("1" (inst - stack entry) (("1" (ground) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (grind) nil nil)) nil) ("5" (hide 2) (("5" (grind) nil nil)) nil) ("6" (hide 2) (("6" (skeep*) (("6" (use good_mem_stack) (("6" (ground) nil nil)) nil)) nil)) nil) ("7" (hide 2) (("7" (skeep*) (("7" (typepred entry) (("7" (grind) nil nil)) nil)) nil)) nil) ("8" (hide 2) (("8" (grind) nil nil)) nil) ("9" (hide 2) (("9" (grind) nil nil)) nil) ("10" (hide 2) (("10" (grind) nil nil)) nil) ("11" (hide 2) (("11" (grind) nil nil)) nil) ("12" (hide 2) (("12" (grind) nil nil)) nil)) nil) nil shostak) (mem_mem_stack-1 nil 3804967700 ("" (induct depth) (("1" (skeep*) (("1" (inst?) (("1" (ground) nil nil)) nil)) nil) ("2" (skeep*) (("2" (expand good_stack?) (("2" (grind) nil nil)) nil)) nil) ("3" (skeep*) (("3" (expand mem_stack? +) (("3" (lift-if) (("3" (ground) (("3" (case "v = stack") (("1" (assert) nil nil) ("2" (assert) (("2" (inst?) (("2" (ground) (("1" (lift-if -) (("1" (ground) (("1" (lift-if -) (("1" (ground) (("1" (extensionality "(push?)") (("1" (forward-chain -) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand good_stack? -) (("2" (ground) (("1" (grind) nil nil) ("2" (lift-if 1) (("2" (ground) (("2" (ground) (("2" (extensionality "(push?)") (("2" (forward-chain -) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (lift-if -) (("3" (ground) (("3" (lift-if -) (("3" (ground) (("3" (extensionality "(push?)") (("3" (forward-chain -) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (grind) nil nil)) nil) ("5" (hide 2) (("5" (grind) nil nil)) nil) ("6" (hide 2) (("6" (skeep*) (("6" (lemma good_mem_stack) (("6" (inst?) (("6" (ground) nil nil)) nil)) nil)) nil)) nil) ("7" (hide 2) (("7" (grind) nil nil)) nil) ("8" (hide 2) (("8" (grind) nil nil)) nil) ("9" (hide 2) (("9" (grind) nil nil)) nil) ("10" (hide 2) (("10" (grind) nil nil)) nil) ("11" (hide 2) (("11" (grind) nil nil)) nil) ("12" (hide 2) (("12" (grind) nil nil)) nil)) nil) nil shostak))("sigmatopdown" sigmatopdown good_mem_stack_push_TCC1 0 (good_mem_stack_push_TCC2-1 nil 3807665403 ("" (subtype-tcc) nil nil) nil nil (good_mem_stack_push subtype "sigmatopdown.push(sigmatopdown.pos, sigmatopdown.n)" "(sigmatopdown.good_push_entry?(sigmatopdown.len))")))("sigmatopdown" sigmatopdown good_mem_stack_push_TCC2 0 (good_mem_stack_push_TCC3-1 nil 3807665403 ("" (skeep*) (("" (use exp2_lt :subst (n 41 m 64)) (("" (grind) nil nil)) nil)) nil) nil nil (good_mem_stack_push subtype "(number_fields.+)(sigmatopdown.depth, 1)" "uint64")))("sigmatopdown" sigmatopdown good_mem_stack_push_TCC3 0 (good_mem_stack_push_TCC4-1 nil 3807665403 ("" (subtype-tcc) nil nil) nil nil (good_mem_stack_push subtype "sigmatopdown.stack" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown good_mem_stack_push 0 (good_mem_stack_push-2 "" 3807671734 ("" (skeep*) (("" (expand good_stack? +) (("" (ground) (("1" (grind) nil nil) ("2" (use good_mem_stack :subst (len len entry "push(pos!1, n)")) (("1" (ground) (("1" (grind) nil nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil shostak) (good_mem_stack_push-1 nil 3807665405 ("" (skeep*) (("" (expand good_stack? +) (("" (ground) (("1" (postpone) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil)) nil)) nil)) nil) nil shostak))("sigmatopdown" sigmatopdown fine_stack?_TCC1 0 (fine_stack?_TCC1-1 nil 3807728459 ("" (subtype-tcc) nil nil) nil nil (fine_stack? subtype "sigmatopdown.stack" "(sigmatopdown.fine_push_entry?(sigmatopdown.len))")))("sigmatopdown" sigmatopdown fine_stack?_TCC2 0 (fine_stack?_TCC1-1 nil 3804908888 ("" (skeep*) (("" (typepred stack) (("" (grind) nil nil)) nil)) nil) nil nil (fine_stack? subtype "sigmatopdown.rest" "(sigmatopdown.good_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.A))")))("sigmatopdown" sigmatopdown fine_stack?_TCC3 0 (fine_stack?_TCC2-1 nil 3804908888 ("" (skeep*) (("" (ground) (("" (typepred stack) (("" (grind) nil nil)) nil)) nil)) nil) nil nil (fine_stack? subtype "(number_fields.-)(sigmatopdown.depth, 1)" "uint64")))("sigmatopdown" sigmatopdown fine_stack?_TCC4 0 (fine_stack?_TCC3-1 nil 3804908888 ("" (skeep*) (("" (ground) (("1" (typepred "stack") (("1" (grind) nil nil)) nil) ("2" (typepred "stack") (("2" (grind) nil nil)) nil)) nil)) nil) nil nil (fine_stack? subtype "sigmatopdown.A(sigmatopdown.pos(sigmatopdown.stack))(sigmatopdown.nt(sigmatopdown.stack))" "(sigmatopdown.good_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.A))")))("sigmatopdown" sigmatopdown fine_stack?_TCC5 0 (fine_stack?_TCC4-1 nil 3804908888 ("" (termination-tcc) nil nil) nil nil (fine_stack? termination "sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.A)" "nil")))("sigmatopdown" sigmatopdown fine_mem_stack_TCC1 0 (fine_mem_stack_TCC1-1 nil 3804969900 ("" (skeep*) (("" (rewrite good_mem_stack) (("" (grind) nil nil)) nil)) nil) nil nil (fine_mem_stack subtype "sigmatopdown.stack" "(sigmatopdown.good_stack?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.depth, sigmatopdown.A WITH [(sigmatopdown.pos(sigmatopdown.entry))(sigmatopdown.nt(sigmatopdown.entry)) := sigmatopdown.u]))")))("sigmatopdown" sigmatopdown fine_mem_stack 0 (fine_mem_stack-1 nil 3804969200 ("" (induct "depth") (("1" (skeep*) (("1" (expand fine_stack?) (("1" (expand good_stack? -) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (skeep*) (("2" (expand fine_stack? +) (("2" (expand good_stack? -3) (("2" (ground) (("1" (rewrite mem_mem_stack) (("1" (expand mem_stack? 2) (("1" (ground) (("1" (lift-if +) (("1" (ground) (("1" (lift-if +) (("1" (ground) (("1" (extensionality "(push?)") (("1" (forward-chain -) (("1" (assert) nil nil)) nil)) nil) ("2" (inst?) (("2" (ground) (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -5 4) (("2" (lift-if +) (("2" (ground) (("2" (ground) (("2" (expand mem_stack? +) (("2" (ground) (("2" (extensionality "(push?)") (("2" (forward-chain -) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -5 4) (("3" (grind) nil nil)) nil) ("4" (hide -6 3) (("4" (grind) (("4" (extensionality "(push?)") (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil) ("5" (hide -5 4) (("5" (grind) (("1" (extensionality "(push?)") (("1" (inst?) (("1" (ground) nil nil)) nil)) nil) ("2" (extensionality "(push?)") (("2" (inst?) (("2" (ground) nil nil)) nil)) nil) ("3" (extensionality "(push?)") (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite mem_mem_stack) (("1" (expand mem_stack? 2) (("1" (ground) (("1" (lift-if +) (("1" (ground) (("1" (lift-if +) (("1" (ground) (("1" (extensionality "(push?)") (("1" (forward-chain -) (("1" (assert) nil nil)) nil)) nil) ("2" (inst?) (("2" (ground) (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -5 4) (("2" (hide -1) (("2" (grind) (("2" (extensionality "(push?)") (("2" (inst?) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -5 4) (("3" (hide -1) (("3" (grind) nil nil)) nil)) nil) ("4" (hide -6 3) (("4" (hide -2) (("4" (grind) (("4" (extensionality "(push?)") (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (hide -5 4) (("5" (hide -1) (("5" (grind) (("1" (hide -5 4) (("1" (hide -1) (("1" (grind) (("1" (extensionality "(push?)") (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (extensionality "(push?)") (("2" (inst?) (("2" (ground) nil nil)) nil)) nil) ("3" (extensionality "(push?)") (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (grind) nil nil)) nil) ("5" (hide 2) (("5" (grind) nil nil)) nil) ("6" (hide 2) (("6" (skeep*) (("6" (use good_mem_stack) (("6" (ground) nil nil)) nil)) nil)) nil) ("7" (grind) nil nil) ("8" (hide 2) (("8" (grind) nil nil)) nil) ("9" (hide 2) (("9" (grind) nil nil)) nil) ("10" (hide 2) (("10" (grind) nil nil)) nil) ("11" (hide 2) (("11" (grind) nil nil)) nil) ("12" (hide 2) (("12" (grind) nil nil)) nil)) nil) nil shostak))("sigmatopdown" sigmatopdown loop_ready?_TCC1 0 (loop_ready?_TCC1-1 nil 3804455654 ("" (skeep* :preds? t) (("" (typepred "A(i)(n1)") (("" (grind) nil nil)) nil)) nil) nil nil (loop_ready? subtype "(number_fields.+)(sigmatopdown.i, sigmatopdown.span(sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)))" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_fail?_TCC1 0 (good_fail?_TCC1-1 nil 3804455654 ("" (grind) nil nil) nil nil (good_fail? subtype "sigmatopdown.i" "naturalnumbers.below(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_fail?_TCC2 0 (good_fail?_TCC2-1 nil 3804455654 ("" (grind) nil nil) nil nil (good_fail? subtype "sigmatopdown.i" "naturalnumbers.below(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_fail?_TCC3 0 (good_fail?_TCC3-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil (good_fail? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_fail?_TCC4 0 (good_fail?_TCC3-1 nil 3804455654 ("" (grind) (("" (typepred "A!1(i!1)(n1!1)") (("" (grind) nil nil)) nil)) nil) nil nil (good_fail? subtype "(number_fields.+)(sigmatopdown.i, sigmatopdown.span(sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)))" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_fail?_TCC5 0 (good_fail?_TCC5-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_fail? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_fail?_TCC6 0 (good_fail?_TCC6-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_fail? subtype "sigmatopdown.A((number_fields.+)(sigmatopdown.i, sigmatopdown.span(sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1))))(sigmatopdown.n2)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_fail?_TCC7 0 (good_fail?_TCC7-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_fail? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_fail?_TCC8 0 (good_fail?_TCC8-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_fail? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n2)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_fail?_TCC9 0 (good_fail?_TCC9-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_fail? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_fail?_TCC10 0 (good_fail?_TCC10-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_fail? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_loop?_TCC1 0 (good_loop?_TCC1-1 nil 3804455654 ("" (skeep* :preds? t) (("" (typepred "A(i)(n1)") (("" (grind) nil nil)) nil)) nil) nil nil (good_loop? subtype "(number_fields.+)(sigmatopdown.i, sigmatopdown.span(sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)))" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_good?_TCC1 0 (good_good?_TCC1-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "(number_fields.-)(sigmatopdown.len, sigmatopdown.i)" "nat")))("sigmatopdown" sigmatopdown good_good?_TCC2 0 (good_good?_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "sigmatopdown.i" "naturalnumbers.below(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_good?_TCC3 0 (good_good?_TCC3-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "sigmatopdown.i" "naturalnumbers.below(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_good?_TCC4 0 (good_good?_TCC4-1 nil 3804455654 ("" (skeep* :preds? t) (("" (typepred "A(i)(n1)") (("" (grind) nil nil)) nil)) nil) nil nil (good_good? subtype "(number_fields.+)(sigmatopdown.i, sigmatopdown.span(sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)))" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_good?_TCC5 0 (good_good?_TCC5-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_good?_TCC6 0 (good_good?_TCC6-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "sigmatopdown.A((number_fields.+)(sigmatopdown.i, sigmatopdown.span(sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1))))(sigmatopdown.n2)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_good?_TCC7 0 (good_good?_TCC7-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_good?_TCC8 0 (good_good?_TCC8-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_good?_TCC9 0 (good_good?_TCC9-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n2)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_good?_TCC10 0 (good_good?_TCC10-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_good?_TCC11 0 (good_good?_TCC11-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_tscaffold?_TCC1 0 (good_tscaffold?_TCC1-1 nil 3806632141 ("" (subtype-tcc) nil nil) nil nil (good_tscaffold? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_good_tscaffold 0 (good_good_tscaffold-2 "updated with depth bound" 3806872130 ("" (skeep*) (("" (expand "good_tscaffold?") (("" (skeep*) (("" (inst - i n) (("" (expand good_entry?) (("" (lift-if + :updates? nil) (("" (ground) (("1" (case "i = pos!1" "n = nt!1") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (assert) (("2" (expand "good_fail?") (("2" (lift-if) (("2" (ground) (("1" (grind) nil nil) ("2" (hide -11) (("2" (grind :exclude gfcount) nil nil)) nil) ("3" (hide -11) (("3" (grind :exclude gfcount) nil nil)) nil) ("4" (hide -10) (("4" (grind :exclude gfcount) nil nil)) nil) ("5" (hide -10) (("5" (grind :exclude gfcount) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -6) (("3" (grind :exclude gfcount) nil nil)) nil)) nil) ("2" (hide -5) (("2" (expand "gfcount" +) (("2" (rewrite "scafcount_update") (("2" (hide -6) (("2" (reveal -3) (("2" (lazy-grind :if-match all :exclude scafcount) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (inst? -) (("3" (grind :exclude gfcount) nil nil)) nil) ("4" (hide -7) (("4" (reveal -2) (("4" (lazy-grind :if-match all :exclude scafcount) nil nil)) nil)) nil) ("5" (typepred u) (("5" (hide -5 -7) (("5" (typepred "A(i)(n)") (("5" (grind :exclude gfcount) nil nil)) nil)) nil)) nil) ("6" (hide -6) (("6" (hide -2) (("6" (lift-if) (("6" (ground) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (lift-if) (("3" (ground) (("1" (expand good_good?) (("1" (lift-if) (("1" (ground) (("1" (ground) (("1" (grind) nil nil) ("2" (grind :exclude max) nil nil)) nil) ("2" (grind :exclude max) nil nil) ("3" (grind :exclude max) nil nil) ("4" (grind :exclude max) nil nil) ("5" (grind :exclude max) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil)) nil)) nil)) nil) ("2" (grind :exclude (max gfcount)) nil nil)) nil)) nil) ("4" (grind :exclude max) nil nil) ("5" (grind :exclude max) nil nil)) nil)) nil)) nil)) nil) ("7" (hide -5 -7) (("7" (typepred "A(i)(n)") (("7" (expand "gfcount" +) (("7" (rewrite scafcount_update) (("7" (reveal -3) (("7" (lazy-grind :if-match all :exclude scafcount) nil nil)) nil)) nil)) nil)) nil)) nil) ("8" (hide -4 -6) (("8" (reveal -3) (("8" (lazy-grind :if-match all :exclude scafcount) nil nil)) nil)) nil) ("9" (hide -5) (("9" (grind :exclude max) nil nil)) nil) ("10" (hide -6) (("10" (expand gfcount) (("10" (reveal -2) (("10" (hide -5) (("10" (rewrite "scafcount_update") (("10" (lift-if) (("10" (ground) (("10" (lift-if) (("10" (ground) (("10" (expand fine_entry?) (("10" (expand "good_fail?") (("10" (lift-if) (("10" (ground) (("1" (inst?) (("1" (grind :exclude scafcount) nil nil)) nil) ("2" (inst? :copy? t) (("2" (inst - "span(A(pos!1)(e1(G(nt!1)))) + pos!1" "e2(G(nt!1))") (("2" (grind :exclude scafcount) nil nil)) nil)) nil) ("3" (inst? :copy? t) (("3" (inst - "pos!1" "e2(G(nt!1))") (("3" (grind :exclude scafcount) nil nil)) nil)) nil) ("4" (inst?) (("4" (grind :exclude scafcount) nil nil)) nil) ("5" (inst?) (("5" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("11" (inst?) (("11" (grind :exclude (max gfcount)) nil nil)) nil) ("12" (hide -4 -6) (("12" (expand gfcount) (("12" (rewrite scafcount_update) (("12" (reveal -3) (("12" (lazy-grind :if-match all :exclude (max scafcount)) nil nil)) nil)) nil)) nil)) nil) ("13" (typepred "A(i)(n)") (("13" (typepred "u") (("13" (hide -5 -7) (("13" (grind :exclude (max gfcount)) nil nil)) nil)) nil)) nil) ("14" (hide -5) (("14" (typepred "A(i)(n)") (("14" (typepred "u") (("14" (grind :exclude (max gfcount)) nil nil)) nil)) nil)) nil) ("15" (hide -6) (("15" (reveal -2) (("15" (expand gfcount) (("15" (rewrite scafcount_update) (("15" (lift-if) (("15" (ground) (("1" (lift-if) (("1" (ground) (("1" (hide -15) (("1" (grind :exclude (max scafcount)) nil nil)) nil)) nil)) nil) ("2" (lift-if) (("2" (ground) (("2" (hide -15) (("2" (grind :exclude (max scafcount)) nil nil)) nil)) nil)) nil) ("3" (lift-if) (("3" (ground) (("3" (hide -16) (("3" (grind :exclude (max scafcount)) nil nil)) nil)) nil)) nil) ("4" (lift-if) (("4" (ground) (("4" (expand fine_entry?) (("4" (ground) (("4" (expand "good_good?") (("4" (lift-if) (("4" (ground) (("1" (inst? :copy? t) (("1" (inst - "span(A(pos!1)(e1(G(nt!1)))) + pos!1" "e2(G(nt!1))") (("1" (grind :exclude scafcount) nil nil)) nil)) nil) ("2" (inst?) (("2" (grind :exclude scafcount) nil nil)) nil) ("3" (inst? :copy? t) (("3" (inst - "pos!1" "e2(G(nt!1))") (("3" (grind :exclude scafcount) nil nil)) nil)) nil) ("4" (inst?) (("4" (grind :exclude scafcount) nil nil)) nil) ("5" (inst?) (("5" (grind :exclude scafcount) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("16" (expand "gfcount" +) (("16" (rewrite scafcount_update) (("16" (hide -5) (("16" (reveal -2) (("16" (lazy-grind :if-match all :exclude (max scafcount)) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals)) shostak) (good_good_tscaffold-1 nil 3804994419 ("" (skeep*) (("" (expand "good_tscaffold?") (("" (skeep*) (("" (inst - i n) (("" (expand good_entry?) (("" (lift-if + :updates? nil) (("" (ground) (("1" (case "i = pos(entry)" "n = nt(entry)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (assert) (("2" (hide -7 -8) (("2" (grind) nil nil)) nil)) nil) ("3" (hide -6 -7) (("3" (grind) nil nil)) nil)) nil) ("2" (case "i = pos(entry)" "n = nt(entry)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (assert) (("2" (forward-chain -) (("2" (grind) nil nil)) nil)) nil) ("3" (assert) (("3" (forward-chain -) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("sigmatopdown" sigmatopdown state_TCC1 0 (state_TCC1-1 nil 3804904050 ("" (grind) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals)) nil (state subtype "sigmatopdown.stack" "(sigmatopdown.push?)")))("sigmatopdown" sigmatopdown state_TCC2 0 (state_TCC1-1 nil 3804730988 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (state subtype "sigmatopdown.pos(sigmatopdown.stack)" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown state_TCC3 0 (state_TCC2-1 nil 3804730988 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (state subtype "sigmatopdown.nt(sigmatopdown.stack)" "non_terminal")))("sigmatopdown" sigmatopdown step_TCC1 0 (step_TCC66-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.stack" "(sigmatopdown.push?)")))("sigmatopdown" sigmatopdown step_TCC2 0 (step_TCC1-1 nil 3804547853 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.cur" "non_terminal")))("sigmatopdown" sigmatopdown step_TCC3 0 (step_TCC10-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.pos" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown step_TCC4 0 (step_TCC3-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "0" "uint64")))("sigmatopdown" sigmatopdown step_TCC5 0 (step_TCC91-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "0" "uint32")))("sigmatopdown" sigmatopdown step_TCC6 0 (step_TCC4-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.good(0, 0)" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC7 0 (step_TCC5-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (skeep*) (("3" (typepred lflag) (("3" (ground) (("1" (inst?) nil nil) ("2" (hide 2) (("2" (grind) nil nil)) nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good(0, 0)]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC8 0 (step_TCC1-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred pos (stack)) (("1" (grind) nil nil)) nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                       count(num_non_terminals)(push?)
                            (St`scaf WITH [(pos!1)(cur) := good(0, 0)](i))) = ((LAMBDA (i: upto(len)):
                       count(num_non_terminals)(push?)(St`scaf(i)))
                      WITH [(pos!1)
                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                  1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                            push?(St`scaf(x!1) WITH [(cur) := good(0, 0)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (ground) (("1" (expand nonempty?) (("1" (expand empty?) (("1" (inst - cur) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (hide -1 3) (("3" (expand count) (("3" (lemma "nonempty_card[below(num_non_terminals)]") (("3" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good(0, 0)]))")))("sigmatopdown" sigmatopdown step_TCC9 0 (step_TCC2-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest "good(0, 0)") (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "good(0, 0)") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good(0, 0)]))")))("sigmatopdown" sigmatopdown step_TCC10 0 (step_TCC83-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good(0, 0)], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good(0, 0)](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC11 0 (step_TCC100-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "0" "uint64")))("sigmatopdown" sigmatopdown step_TCC12 0 (step_TCC8-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.fail(0)" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC13 0 (step_TCC9-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail(0)]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC14 0 (step_TCC6-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred pos (stack)) (("1" (grind) nil nil)) nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                               count(num_non_terminals)(push?)
                                    (St`scaf WITH [(pos!1)(cur) := fail(0)](i))) = ((LAMBDA (i: upto(len)):
                               count(num_non_terminals)(push?)(St`scaf(i)))
                              WITH [(pos!1)
                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                          1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                          push?(St`scaf(x!1) WITH [(cur) := fail(0)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (ground) (("1" (expand nonempty?) (("1" (expand empty?) (("1" (inst - cur) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (hide -1 3) (("3" (expand count) (("3" (lemma "nonempty_card[below(num_non_terminals)]") (("3" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail(0)]))")))("sigmatopdown" sigmatopdown step_TCC15 0 (step_TCC7-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest "fail(0)") (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "fail(0)") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail(0)]))")))("sigmatopdown" sigmatopdown step_TCC16 0 (step_TCC84-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail(0)], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail(0)](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC17 0 (step_TCC16-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.pos" "naturalnumbers.below(sigmatopdown.len)")))("sigmatopdown" sigmatopdown step_TCC18 0 (step_TCC24-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "0" "uint64")))("sigmatopdown" sigmatopdown step_TCC19 0 (step_TCC25-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "0" "uint64")))("sigmatopdown" sigmatopdown step_TCC20 0 (step_TCC11-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "1" "uint32")))("sigmatopdown" sigmatopdown step_TCC21 0 (step_TCC14-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.v" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC22 0 (step_TCC15-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC23 0 (step_TCC12-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                       count(num_non_terminals)(push?)
                                                            (St`scaf WITH [(pos!1)(cur) := v](i))) = ((LAMBDA (i: upto(len)):
                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                      WITH [(pos!1)
                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                  1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                    push?(St`scaf(x!1) WITH [(cur) := v](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (ground) (("1" (expand nonempty?) (("1" (expand empty?) (("1" (inst - cur) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (hide -1 3) (("3" (expand count) (("3" (lemma "nonempty_card[below(num_non_terminals)]") (("3" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (successor const-decl "bool" sigmatopdown nil) (empty? const-decl "bool" sigmatopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil sigmatopdown nil) (good_push_entry? const-decl "bool" sigmatopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatopdown nil) (num_non_terminals const-decl "byte" sigmatopdown nil) (non_terminal type-eq-decl nil sigmatopdown nil) (peg type-decl nil sigmatopdown nil) (lang_spec type-eq-decl nil sigmatopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" sigmatopdown nil) (scaffold type-eq-decl nil sigmatopdown nil) (good_stack? def-decl "bool" sigmatopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil sigmatopdown nil) (fine_scaffold? const-decl "bool" sigmatopdown nil) (good_depth? const-decl "bool" sigmatopdown nil) (fine_stack? def-decl "bool" sigmatopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil) (loop_ready? const-decl "bool" sigmatopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil) (state type-eq-decl nil sigmatopdown nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (pushcount const-decl "uint64" sigmatopdown nil) (scafcount const-decl "uint64" sigmatopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_dec formula-decl nil sigmatopdown nil) (arr type-eq-decl nil arrayCount nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatopdown nil) (rootnt skolem-const-decl "non_terminal" sigmatopdown nil) (start skolem-const-decl "upto(len)" sigmatopdown nil) (s skolem-const-decl "strings(len)" sigmatopdown nil) (G skolem-const-decl "lang_spec" sigmatopdown nil) (v skolem-const-decl "ent" sigmatopdown nil) (pos!1 skolem-const-decl "uint32" sigmatopdown nil) (len skolem-const-decl "uint32" sigmatopdown nil) (good_good_entry? const-decl "bool" sigmatopdown nil) (member const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil) (x!1 skolem-const-decl "upto(len)" sigmatopdown nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (card_remove formula-decl nil finite_sets nil) (count_TCC1 subtype-tcc nil arrayCount nil) (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil) (nonempty? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty_card formula-decl nil finite_sets nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v]))")))("sigmatopdown" sigmatopdown step_TCC24 0 (step_TCC13-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest v) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "stack") (("2" (grind) nil nil)) nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "v") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v]))")))("sigmatopdown" sigmatopdown step_TCC25 0 (step_TCC89-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC26 0 (step_TCC44-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.pos" "naturalnumbers.below(sigmatopdown.len)")))("sigmatopdown" sigmatopdown step_TCC27 0 (step_TCC33-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "0" "uint64")))("sigmatopdown" sigmatopdown step_TCC28 0 (step_TCC34-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "0" "uint64")))("sigmatopdown" sigmatopdown step_TCC29 0 (step_TCC17-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "1" "uint32")))("sigmatopdown" sigmatopdown step_TCC30 0 (step_TCC20-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.v" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC31 0 (step_TCC21-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC32 0 (step_TCC18-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                       count(num_non_terminals)(push?)
                                                            (St`scaf WITH [(pos!1)(cur) := v](i))) = ((LAMBDA (i: upto(len)):
                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                      WITH [(pos!1)
                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                  1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                    push?(St`scaf(x!1) WITH [(cur) := v](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (ground) (("1" (expand nonempty?) (("1" (expand empty?) (("1" (inst - cur) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (hide -1 3) (("3" (expand count) (("3" (lemma "nonempty_card[below(num_non_terminals)]") (("3" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v]))")))("sigmatopdown" sigmatopdown step_TCC33 0 (step_TCC19-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest v) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "stack") (("2" (grind) nil nil)) nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "v") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v]))")))("sigmatopdown" sigmatopdown step_TCC34 0 (step_TCC90-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC35 0 (step_TCC42-1 nil 3804455654 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst - pos!1 n1) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.d1, 1)" "uint64")))("sigmatopdown" sigmatopdown step_TCC36 0 (step_TCC43-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC37 0 (step_TCC55-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC38 0 (step_TCC22-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                               count(num_non_terminals)(push?)
                                                                    (St`scaf WITH [(pos!1)(cur) := fail(1 + d1)](i))) = ((LAMBDA (i: upto(len)):
                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                              WITH [(pos!1)
                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                          1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                                  push?(St`scaf(x!1) WITH [(cur) := fail(1 + d1)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil) ("3" (skeep*) (("3" (use step_TCC35) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -6 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (skeep*) (("4" (use step_TCC35) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count +) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (ground) (("1" (expand nonempty?) (("1" (expand empty?) (("1" (inst - "nt(stack)") (("1" (grind) nil nil) ("2" (assert) (("2" (typepred "nt(stack)") (("2" (expand "good_push_entry?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "count_TCC1") nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (use step_TCC35) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -1) (("3" (expand count) (("3" (use "nonempty_card[below(num_non_terminals)]") (("1" (ground) (("1" (hide -5 5) (("1" (grind) nil nil)) nil)) nil) ("2" (rewrite "count_TCC1") nil nil)) nil)) nil)) nil) ("4" (hide -1 3) (("4" (grind) nil nil)) nil) ("5" (use step_TCC35) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]))")))("sigmatopdown" sigmatopdown step_TCC39 0 (step_TCC23-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest "fail(1 + d1)") (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (expand nice_entry?) (("2" (propax) nil nil)) nil)) nil) ("3" (typepred "stack") (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "fail(1 + d1)") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]))")))("sigmatopdown" sigmatopdown step_TCC40 0 (step_TCC95-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, sigmatopdown.d1))], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, sigmatopdown.d1))](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC41 0 (step_TCC30-1 nil 3804455654 ("" (skeep*) (("" (typepred "St`scaf(pos!1)(n1)") (("" (grind) nil nil)) nil)) nil) nil nil (step subtype "(number_fields.+)(sigmatopdown.pos, sigmatopdown.sp)" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown step_TCC42 0 (step_TCC75-1 nil 3804455654 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst-cp - pos!1 n1) (("" (inst - pos!1+sp n2) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1 + sp)(n2)) = d2") (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) (("1" (expand max) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2))" "uint64")))("sigmatopdown" sigmatopdown step_TCC43 0 (step_TCC56-1 nil 3804455654 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (expand nice_entry?) (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC44 0 (step_TCC63-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC45 0 (step_TCC31-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (rewrite scafcount_update) (("1" (grind :exclude scafcount) nil nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))]))")))("sigmatopdown" sigmatopdown step_TCC46 0 (step_TCC32-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest "fail(1 + max(d1, d2))") (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (expand nice_entry?) (("2" (propax) nil nil)) nil)) nil) ("3" (typepred "stack") (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "fail(1 + max(d1, d2))") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))]))")))("sigmatopdown" sigmatopdown step_TCC47 0 (step_TCC117-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC48 0 (step_TCC64-1 nil 3804455654 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst-cp - pos!1 n1) (("" (inst - pos!1+sp n2) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1 + sp)(n2)) = d2") (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) (("1" (expand max) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2))" "uint64")))("sigmatopdown" sigmatopdown step_TCC49 0 (step_TCC41-1 nil 3804455654 ("" (skeep*) (("" (typepred "St`scaf(pos!1)(n1)") (("" (typepred "St`scaf(pos!1 + sp)(n2)") (("" (typepred len) (("" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "(number_fields.+)(sigmatopdown.sp, sigmatopdown.sp2)" "uint32")))("sigmatopdown" sigmatopdown step_TCC50 0 (step_TCC76-1 nil 3804455654 ("" (skeep*) (("" (typepred "St`scaf(pos!1)(n1)") (("" (typepred "St`scaf(pos!1 + sp)(n2)") (("" (grind) nil nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), (number_fields.+)(sigmatopdown.sp, sigmatopdown.sp2))" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC51 0 (step_TCC83-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (ground) (("1" (typepred "St`scaf(pos!1 + sp)(n2)") (("1" (grind) nil nil)) nil) ("2" (expand good_good?) (("2" (grind :exclude (max gfcount)) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "St`scaf(pos!1 + sp)(n2)") (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), (number_fields.+)(sigmatopdown.sp, sigmatopdown.sp2))]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC52 0 (step_TCC39-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                                       count(num_non_terminals)(push?)
                                                                            (St`scaf WITH [(pos!1)(cur) := good(1 + max(d1, d2), sp2 + sp)](i))) = ((LAMBDA (i: upto(len)):
                                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                                      WITH [(pos!1)
                                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                  1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                                                push?(St`scaf(x!1) WITH [(cur) := good(1 + max(d1, d2), sp2 + sp)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "St`scaf(pos!1 + sp)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (skeep*) (("3" (use step_TCC49) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide -6 2) (("4" (typepred "St`scaf(pos!1)(n1)") (("4" (typepred "St`scaf(pos!1 + sp)(n2)") (("4" (skeep*) (("4" (use step_TCC48) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (skeep*) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1 + sp)(n2)") (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (skeep*) (("4" (use step_TCC49) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (skeep*) (("5" (use step_TCC48) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil) ("3" (hide 2) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1 + sp)(n2)") (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (use step_TCC49) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (hide 2) (("5" (use step_TCC48) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -1 3) (("3" (expand count) (("3" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil) ("4" (hide -1 3) (("4" (typepred "St`scaf(pos!1)(n1)") (("4" (typepred "St`scaf(pos!1 + sp)(n2)") (("4" (grind) nil nil)) nil)) nil)) nil) ("5" (hide -1 3) (("5" (use step_TCC49) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("6" (hide -1 3) (("6" (use step_TCC48) (("6" (ground) (("6" (inst?) (("6" (inst?) (("6" (inst?) (("6" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), (number_fields.+)(sigmatopdown.sp, sigmatopdown.sp2))]))")))("sigmatopdown" sigmatopdown step_TCC53 0 (step_TCC40-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest "good(1 + max(d1, d2), sp2 + sp)") (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "stack") (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "St`scaf(pos!1 + sp)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("3" (use step_TCC52) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "good(1 + max(d1, d2), sp2 + sp)") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "St`scaf(pos!1 + sp)(n2)") (("2" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), (number_fields.+)(sigmatopdown.sp, sigmatopdown.sp2))]))")))("sigmatopdown" sigmatopdown step_TCC54 0 (step_TCC81-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), (number_fields.+)(sigmatopdown.sp2, sigmatopdown.sp))], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), (number_fields.+)(sigmatopdown.sp2, sigmatopdown.sp))](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC55 0 (step_TCC45-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.St`stack" "(sigmatopdown.nice_entry?(sigmatopdown.len, (number_fields.+)(sigmatopdown.pos, sigmatopdown.sp)))")))("sigmatopdown" sigmatopdown step_TCC56 0 (step_TCC46-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (typepred "St`scaf(pos!1 + sp)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (ground) (("1" (grind) nil nil) ("2" (hide -5) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (hide -1) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (hide -2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [((number_fields.+)(sigmatopdown.pos, sigmatopdown.sp))(sigmatopdown.n2) := sigmatopdown.St`stack]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC57 0 (step_TCC49-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred depth) (("1" (expand good_depth?) (("1" (expand pushcount) (("1" (use scafcount_max) (("1" (assert) (("1" (use exp2_lt :subst (n 41 m 64)) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "good_depth?") (("2" (expand pushcount) (("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude (max scafcount)) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "(number_fields.+)(sigmatopdown.St`depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [((number_fields.+)(sigmatopdown.pos, sigmatopdown.sp))(sigmatopdown.n2) := sigmatopdown.St`stack]))")))("sigmatopdown" sigmatopdown step_TCC58 0 (step_TCC50-1 nil 3804455654 ("" (skeep*) (("" (typepred "St`scaf(pos!1)(n1)") (("" (typepred "St`scaf(pos!1 + sp)(n2)") (("" (typepred len) (("" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "(number_fields.+)(sigmatopdown.pos, sigmatopdown.sp)" "uint32")))("sigmatopdown" sigmatopdown step_TCC59 0 (step_TCC65-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil)) nil) ("2" (lemma good_mem_stack) (("2" (expand good_stack? +) (("2" (ground) (("1" (hide -1) (("1" (grind) nil nil)) nil) ("2" (inst - G "depth" len scaf "push(pos!1 + sp, n2)" "stack" stack) (("1" (ground) (("1" (hide 2) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil)) nil)) nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil) ("3" (hide 2) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (grind) nil nil)) nil)) nil) ("4" (typepred "St`scaf(pos!1)(n1)") (("4" (typepred len) (("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand fine_stack? +) (("3" (ground) (("1" (lemma mem_mem_stack) (("1" (inst - G depth len scaf _ _ _ _) (("1" (inst - "push(pos!1 + sp, n2)" "push(pos!1 + sp, n2)" stack stack) (("1" (ground) (("1" (use mem_stack_push) (("1" (ground) nil nil)) nil) ("2" (typepred "St`scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos!1)(n1)") (("3" (grind) nil nil)) nil) ("4" (use mem_stack_push) (("4" (ground) nil nil)) nil) ("5" (typepred "St`scaf(pos!1)(n1)") (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos!1)(n1)") (("3" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (use fine_mem_stack :subst (len len entry "push(pos!1 + sp, n2)")) (("1" (ground) (("1" (hide 2) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil)) nil)) nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos!1)(n1)") (("3" (grind) nil nil)) nil) ("4" (typepred "St`scaf(pos!1)(n1)") (("4" (typepred len) (("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.push((number_fields.+)(sigmatopdown.pos, sigmatopdown.sp), sigmatopdown.n2)" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.+)(sigmatopdown.St`depth, 1), sigmatopdown.St`scaf WITH [((number_fields.+)(sigmatopdown.pos, sigmatopdown.sp))(sigmatopdown.n2) := sigmatopdown.St`stack]))")))("sigmatopdown" sigmatopdown step_TCC60 0 (step_TCC82-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (skeep*) (("2" (lift-if) (("2" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.n2 = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [((number_fields.+)(sigmatopdown.pos, sigmatopdown.sp))(sigmatopdown.n2) := sigmatopdown.St`stack], (number_fields.+)(sigmatopdown.pos, sigmatopdown.sp), sigmatopdown.n2)) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [((number_fields.+)(sigmatopdown.pos, sigmatopdown.sp))(sigmatopdown.n2) := sigmatopdown.St`stack](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC61 0 (step_TCC28-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.loop" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC62 0 (step_TCC29-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (typepred "St`scaf(pos!1 + sp)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -5) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC63 0 (step_TCC26-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind :exclude sigma) nil nil)) nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)
                                                                                    (St`scaf WITH [(pos!1)(cur) := loop](i))) = ((LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                                              WITH [(pos!1)
                                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                          1])") (("1" (hide -1) (("1" (replace -1 :hide? t) (("1" (assert) nil nil)) nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality :hide? t) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                                                              push?(St`scaf(x!1) WITH [(cur) := loop](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil) ("3" (expand count) (("3" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC64 0 (step_TCC27-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" loop) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`stack") (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind :exclude mem_stack) nil nil) ("2" (hide -1) (("2" (replace -8) (("2" (replace -9) (("2" (replace -5) (("2" (case-replace "push(pos(St`stack), nt(St`stack)) = St`stack") (("1" (case-replace "St`scaf(pos(St`stack))(nt(St`stack)) = rest") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil) ("2" (apply-extensionality 1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil) ("3" (lemma fine_mem_stack) (("3" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" loop) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand "fine_stack?") (("4" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (case-replace "St`scaf(pos(stack))(nt(stack)) = rest") (("1" (case-replace "push(pos!1, cur) = St`stack") (("1" (assert) nil nil) ("2" (apply-extensionality 1) (("2" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC65 0 (step_TCC103-1 nil 3804706560 ("" (skeep*) (("" (typepred stack) (("" (grind :exclude mem_stack?) nil nil)) nil)) nil) nil nil (step subtype "booleans.TRUE" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC66 0 (step_TCC95-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.stack" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC67 0 (step_TCC77-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC68 0 (step_TCC78-1 nil 3804455654 ("" (skeep*) (("" (split) (("1" (typepred stack) (("1" (typepred depth) (("1" (expand good_depth?) (("1" (expand pushcount) (("1" (use scafcount_max) (("1" (assert) (("1" (use exp2_lt :subst (n 41 m 64)) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "good_depth?") (("2" (expand pushcount) (("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC69 0 (step_TCC94-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (expand "good_stack?" +) (("2" (ground) (("1" (grind) nil nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth" len scaf "push(pos!1, n1)" "stack" stack) (("1" (ground) (("1" (grind) nil nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand fine_stack? +) (("3" (ground) (("1" (lemma mem_mem_stack) (("1" (inst - G depth len scaf _ _ _ _) (("1" (inst - "push(pos!1, n1)" "push(pos!1, n1)" stack stack) (("1" (ground) (("1" (hide -2) (("1" (use mem_stack_push) (("1" (ground) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil) ("4" (use mem_stack_push) (("4" (ground) nil nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (use fine_mem_stack :subst (len len entry "push(pos!1, n1)" u stack stack stack)) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.push(sigmatopdown.pos, sigmatopdown.n1)" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.+)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC70 0 (step_TCC104-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (skeep*) (("2" (lift-if) (("2" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.n1 = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack], sigmatopdown.pos, sigmatopdown.n1)) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC71 0 (step_TCC37-1 nil 3804455654 ("" (grind) nil nil) nil nil (step subtype "sigmatopdown.loop" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC72 0 (step_TCC38-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC73 0 (step_TCC35-1 nil 3804455654 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC74 0 (step_TCC36-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" loop) (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u loop stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC75 0 (step_TCC98-1 nil 3804455654 ("" (skeep*) (("" (typepred stack) (("" (expand good_stack?) (("" (ground) (("1" (grind) nil nil) ("2" (grind :exclude (good_stack? fine_stack? mem_stack?)) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "booleans.TRUE" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC76 0 (step_TCC84-1 nil 3804455654 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst-cp - pos!1 n1) (("" (inst - pos!1 n2) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n2)) = d2") (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals)) nil (step subtype "(number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1)" "uint64")))("sigmatopdown" sigmatopdown step_TCC77 0 (step_TCC92-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.fail((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1))" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC78 0 (step_TCC93-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1))]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC79 0 (step_TCC53-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)
                                                                                    (St`scaf WITH [(pos!1)(cur) := fail(1 + max(d1, d2))](i))) = ((LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                                              WITH [(pos!1)
                                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                          1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                                                              push?(St`scaf(x!1) WITH [(cur) := fail(1 + max(d1, d2))](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil)) nil) ("3" (skeep*) (("3" (use step_TCC76) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -6 2) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1)(n2)") (("3" (skeep*) (("3" (use step_TCC77) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1)(n2)") (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (skeep*) (("4" (use step_TCC76) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil) ("3" (hide 2) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1)(n2)") (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (use step_TCC76) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand count) (("3" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil) ("4" (use step_TCC77) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (hide -1 3) (("5" (use step_TCC76) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1))]))")))("sigmatopdown" sigmatopdown step_TCC80 0 (step_TCC54-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest "fail(1 + max(d1, d2))") (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "stack") (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "St`scaf(pos!1)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "fail(1 + max(d1, d2))") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "St`scaf(pos!1)(n2)") (("2" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1))]))")))("sigmatopdown" sigmatopdown step_TCC81 0 (step_TCC96-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC82 0 (step_TCC101-1 nil 3804455654 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst-cp - pos!1 n1) (("" (inst - pos!1 n2) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n2)) = d2") (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals)) nil (step subtype "(number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1)" "uint64")))("sigmatopdown" sigmatopdown step_TCC83 0 (step_TCC102-1 nil 3804455654 ("" (skeep*) (("" (typepred "St`scaf(pos!1)(n1)") (("" (typepred "St`scaf(pos!1)(n2)") (("" (grind) nil nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.good((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1), sigmatopdown.sp)" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC84 0 (step_TCC84-1 nil 3808434333 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (typepred "scaf(pos!1)(n1)") (("2" (typepred "scaf(pos!1)(n2)") (("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (typepred "scaf(pos!1)(n1)") (("2" (typepred "scaf(pos!1)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1), sigmatopdown.sp)]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC85 0 (step_TCC57-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)
                                                                                            (St`scaf WITH [(pos!1)(cur) := good(1 + max(d1, d2), sp)](i))) = ((LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                                                      WITH [(pos!1)
                                                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                                  1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                                                                            push?(St`scaf(x!1) WITH [(cur) := good(1 + max(d1, d2), sp)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "scaf(pos!1)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (skeep*) (("3" (use step_TCC82) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -6 2) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1)(n2)") (("3" (skeep*) (("3" (use step_TCC83) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1)(n2)") (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (skeep*) (("4" (use step_TCC82) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil) ("3" (hide 2) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1)(n2)") (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (use step_TCC82) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand count) (("3" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil) ("4" (use step_TCC83) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (hide -1 3) (("5" (use step_TCC82) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1), sigmatopdown.sp)]))")))("sigmatopdown" sigmatopdown step_TCC86 0 (step_TCC58-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest "good(1 + max(d1, d2), sp)") (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "stack") (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "St`scaf(pos!1)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("3" (use step_TCC85) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "good(1 + max(d1, d2), sp)") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "St`scaf(pos!1)(n2)") (("2" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1), sigmatopdown.sp)]))")))("sigmatopdown" sigmatopdown step_TCC87 0 (step_TCC99-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), sigmatopdown.sp)], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), sigmatopdown.sp)](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC88 0 (step_TCC91-1 nil 3804706560 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.stack" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC89 0 (step_TCC111-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n2) := sigmatopdown.stack]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC90 0 (step_TCC112-1 nil 3804455654 ("" (skeep*) (("" (split) (("1" (typepred stack) (("1" (typepred depth) (("1" (expand good_depth?) (("1" (expand pushcount) (("1" (use scafcount_max) (("1" (assert) (("1" (use exp2_lt :subst (n 41 m 64)) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "good_depth?") (("2" (expand pushcount) (("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n2) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC91 0 (step_TCC78-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (expand "good_stack?" +) (("2" (ground) (("1" (grind) nil nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth" len scaf "push(pos!1, n2)" "stack" stack) (("1" (ground) (("1" (grind) nil nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand fine_stack? +) (("3" (ground) (("1" (lemma mem_mem_stack) (("1" (inst - G depth len scaf _ _ _ _) (("1" (inst - "push(pos!1, n2)" "push(pos!1, n2)" stack stack) (("1" (ground) (("1" (hide -2) (("1" (use mem_stack_push) (("1" (ground) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil) ("4" (use mem_stack_push) (("4" (ground) nil nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (use fine_mem_stack :subst (len len entry "push(pos!1, n2)" u stack stack stack)) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.push(sigmatopdown.pos, sigmatopdown.n2)" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.+)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n2) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC92 0 (step_TCC119-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (skeep*) (("2" (lift-if) (("2" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.n2 = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n2) := sigmatopdown.stack], sigmatopdown.pos, sigmatopdown.n2)) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n2) := sigmatopdown.stack](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC93 0 (step_TCC59-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.loop" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC94 0 (step_TCC60-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC95 0 (step_TCC69-1 nil 3804455654 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC96 0 (step_TCC70-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" loop) (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u loop stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC97 0 (step_TCC118-1 nil 3804706560 ("" (skeep*) (("" (typepred stack) (("" (expand good_stack?) (("" (ground) (("1" (grind) nil nil) ("2" (grind :exclude (good_stack? fine_stack? mem_stack?)) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "booleans.TRUE" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC98 0 (step_TCC109-1 nil 3804455654 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst - pos!1 n1) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.d1, 1)" "uint64")))("sigmatopdown" sigmatopdown step_TCC99 0 (step_TCC110-1 nil 3804455654 ("" (skeep*) (("" (typepred "St`scaf(pos!1)(n1)") (("" (grind) nil nil)) nil)) nil) nil nil (step subtype "sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), sigmatopdown.sp)" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC100 0 (step_TCC99-1 nil 3804991042 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (ground) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil)) nil) ("2" (expand good_good?) (("2" (grind :exclude (max gfcount)) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), sigmatopdown.sp)]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC101 0 (step_TCC61-1 nil 3804455654 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred "scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), sigmatopdown.sp)]))")))("sigmatopdown" sigmatopdown step_TCC102 0 (step_TCC62-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" "good(1 + d1, sp)") (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u " good(1 + d1, sp)" stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), sigmatopdown.sp)]))")))("sigmatopdown" sigmatopdown step_TCC103 0 (step_TCC116-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, sigmatopdown.d1), sigmatopdown.sp)], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, sigmatopdown.d1), sigmatopdown.sp)](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC104 0 (step_TCC112-1 nil 3804706560 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.stack" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC105 0 (step_TCC92-1 nil 3804706560 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC106 0 (step_TCC93-1 nil 3804706560 ("" (skeep*) (("" (split) (("1" (typepred stack) (("1" (typepred depth) (("1" (expand good_depth?) (("1" (expand pushcount) (("1" (use scafcount_max) (("1" (assert) (("1" (use exp2_lt :subst (n 41 m 64)) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "good_depth?") (("2" (expand pushcount) (("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC107 0 (step_TCC94-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (expand "good_stack?" +) (("2" (ground) (("1" (grind) nil nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth" len scaf "push(pos!1, n1)" "stack" stack) (("1" (ground) (("1" (grind) nil nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand fine_stack? +) (("3" (ground) (("1" (lemma mem_mem_stack) (("1" (inst - G depth len scaf _ _ _ _) (("1" (inst - "push(pos!1, n1)" "push(pos!1, n1)" stack stack) (("1" (ground) (("1" (hide -2) (("1" (use mem_stack_push) (("1" (ground) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil) ("4" (use mem_stack_push) (("4" (ground) nil nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (use fine_mem_stack :subst (len len entry "push(pos!1, n1)" u stack stack stack)) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.push(sigmatopdown.pos, sigmatopdown.n1)" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.+)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC108 0 (step_TCC125-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (skeep*) (("2" (lift-if) (("2" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.n1 = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack], sigmatopdown.pos, sigmatopdown.n1)) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC109 0 (step_TCC71-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.loop" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC110 0 (step_TCC72-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC111 0 (step_TCC85-1 nil 3804455654 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC112 0 (step_TCC86-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" loop) (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u loop stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC113 0 (step_TCC126-1 nil 3804706560 ("" (skeep*) (("" (typepred stack) (("" (expand good_stack?) (("" (ground) (("1" (grind) nil nil) ("2" (grind :exclude (good_stack? fine_stack? mem_stack?)) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "booleans.TRUE" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC114 0 (step_TCC113-1 nil 3804991042 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst - pos!1 n1) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.d1, 1)" "uint64")))("sigmatopdown" sigmatopdown step_TCC115 0 (step_TCC114-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC116 0 (step_TCC115-1 nil 3804991042 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC117 0 (step_TCC73-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)
                                                                                    (St`scaf WITH [(pos!1)(cur) := fail(1 + d1)](i))) = ((LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                                              WITH [(pos!1)
                                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                          1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                                                              push?(St`scaf(x!1) WITH [(cur) := fail(1 + d1)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil) ("3" (skeep*) (("3" (use step_TCC114) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -6 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (skeep*) (("4" (use step_TCC114) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count +) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (ground) (("1" (expand nonempty?) (("1" (expand empty?) (("1" (inst - "nt(stack)") (("1" (grind) nil nil) ("2" (assert) (("2" (typepred "nt(stack)") (("2" (expand "good_push_entry?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "count_TCC1") nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (use step_TCC114) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -1) (("3" (expand count) (("3" (use "nonempty_card[below(num_non_terminals)]") (("1" (ground) (("1" (hide -5 5) (("1" (grind) nil nil)) nil)) nil) ("2" (rewrite "count_TCC1") nil nil)) nil)) nil)) nil) ("4" (hide -1 3) (("4" (grind) nil nil)) nil) ("5" (use step_TCC114) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]))")))("sigmatopdown" sigmatopdown step_TCC118 0 (step_TCC74-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" "fail(1 + d1)") (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u "fail(1 + d1)" stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]))")))("sigmatopdown" sigmatopdown step_TCC119 0 (step_TCC127-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, sigmatopdown.d1))], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, sigmatopdown.d1))](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC120 0 (step_TCC119-1 nil 3804991042 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst - pos!1 n1) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.d1, 1)" "uint64")))("sigmatopdown" sigmatopdown step_TCC121 0 (step_TCC120-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil (step subtype "0" "uint32")))("sigmatopdown" sigmatopdown step_TCC122 0 (step_TCC121-1 nil 3804991042 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC123 0 (step_TCC122-1 nil 3804991042 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (ground) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil)) nil) ("2" (expand good_good?) (("2" (grind :exclude (max gfcount)) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC124 0 (step_TCC107-1 nil 3804455654 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred "scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)]))")))("sigmatopdown" sigmatopdown step_TCC125 0 (step_TCC108-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" "good(1 + d1, 0)") (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u " good(1 + d1, 0)" stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)]))")))("sigmatopdown" sigmatopdown step_TCC126 0 (step_TCC128-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, sigmatopdown.d1), 0)], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, sigmatopdown.d1), 0)](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC127 0 (step_TCC133-1 nil 3804706560 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.stack" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC128 0 (step_TCC113-1 nil 3804706560 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC129 0 (step_TCC114-1 nil 3804706560 ("" (skeep*) (("" (split) (("1" (typepred stack) (("1" (typepred depth) (("1" (expand good_depth?) (("1" (expand pushcount) (("1" (use scafcount_max) (("1" (assert) (("1" (use exp2_lt :subst (n 41 m 64)) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "good_depth?") (("2" (expand pushcount) (("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC130 0 (step_TCC115-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (expand "good_stack?" +) (("2" (ground) (("1" (grind) nil nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth" len scaf "push(pos!1, n1)" "stack" stack) (("1" (ground) (("1" (grind) nil nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand fine_stack? +) (("3" (ground) (("1" (lemma mem_mem_stack) (("1" (inst - G depth len scaf _ _ _ _) (("1" (inst - "push(pos!1, n1)" "push(pos!1, n1)" stack stack) (("1" (ground) (("1" (hide -2) (("1" (use mem_stack_push) (("1" (ground) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil) ("4" (use mem_stack_push) (("4" (ground) nil nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (use fine_mem_stack :subst (len len entry "push(pos!1, n1)" u stack stack stack)) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.push(sigmatopdown.pos, sigmatopdown.n1)" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.+)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC131 0 (step_TCC137-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (skeep*) (("2" (lift-if) (("2" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.n1 = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack], sigmatopdown.pos, sigmatopdown.n1)) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC132 0 (step_TCC87-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.loop" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC133 0 (step_TCC88-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC134 0 (step_TCC103-1 nil 3804455654 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC135 0 (step_TCC104-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" loop) (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u loop stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC136 0 (step_TCC138-1 nil 3804706560 ("" (skeep*) (("" (typepred stack) (("" (expand good_stack?) (("" (ground) (("1" (grind) nil nil) ("2" (grind :exclude (good_stack? fine_stack? mem_stack?)) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "booleans.TRUE" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC137 0 (step_TCC136-1 nil 3804991042 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst - pos!1 n1) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.d1, 1)" "uint64")))("sigmatopdown" sigmatopdown step_TCC138 0 (step_TCC137-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil (step subtype "0" "uint32")))("sigmatopdown" sigmatopdown step_TCC139 0 (step_TCC138-1 nil 3804991042 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC140 0 (step_TCC139-1 nil 3804991042 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (ground) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil)) nil) ("2" (expand good_good?) (("2" (grind :exclude (max gfcount)) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand nice_entry?) (("2" (expand good_good_entry?) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC141 0 (step_TCC110-1 nil 3804706560 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred "scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)]))")))("sigmatopdown" sigmatopdown step_TCC142 0 (step_TCC111-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" "good(1 + d1, 0)") (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u " good(1 + d1, 0)" stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)]))")))("sigmatopdown" sigmatopdown step_TCC143 0 (step_TCC139-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, sigmatopdown.d1), 0)], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, sigmatopdown.d1), 0)](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC144 0 (step_TCC143-1 nil 3804991042 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst - pos!1 n1) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.d1, 1)" "uint64")))("sigmatopdown" sigmatopdown step_TCC145 0 (step_TCC144-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC146 0 (step_TCC145-1 nil 3804991042 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC147 0 (step_TCC123-1 nil 3804706560 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)
                                                                                            (St`scaf WITH [(pos!1)(cur) := fail(1 + d1)](i))) = ((LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                                                      WITH [(pos!1)
                                                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                                  1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                                                                            push?(St`scaf(x!1) WITH [(cur) := fail(1 + d1)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil) ("3" (skeep*) (("3" (use step_TCC144) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -6 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (skeep*) (("4" (use step_TCC144) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count +) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (ground) (("1" (expand nonempty?) (("1" (expand empty?) (("1" (inst - "nt(stack)") (("1" (grind) nil nil) ("2" (assert) (("2" (typepred "nt(stack)") (("2" (expand "good_push_entry?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "count_TCC1") nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (use step_TCC144) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -1) (("3" (expand count) (("3" (use "nonempty_card[below(num_non_terminals)]") (("1" (ground) (("1" (hide -5 5) (("1" (grind) nil nil)) nil)) nil) ("2" (rewrite "count_TCC1") nil nil)) nil)) nil)) nil) ("4" (hide -1 3) (("4" (grind) nil nil)) nil) ("5" (use step_TCC144) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]))")))("sigmatopdown" sigmatopdown step_TCC148 0 (step_TCC124-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" "fail(1 + d1)") (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u "fail(1 + d1)" stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]))")))("sigmatopdown" sigmatopdown step_TCC149 0 (step_TCC140-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, sigmatopdown.d1))], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, sigmatopdown.d1))](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC150 0 (step_TCC134-1 nil 3804904050 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.stack" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC151 0 (step_TCC134-1 nil 3804706560 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC152 0 (step_TCC135-1 nil 3804706560 ("" (skeep*) (("" (split) (("1" (typepred stack) (("1" (typepred depth) (("1" (expand good_depth?) (("1" (expand pushcount) (("1" (use scafcount_max) (("1" (assert) (("1" (use exp2_lt :subst (n 41 m 64)) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "good_depth?") (("2" (expand pushcount) (("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC153 0 (step_TCC136-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (expand "good_stack?" +) (("2" (ground) (("1" (grind) nil nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth" len scaf "push(pos!1, n1)" "stack" stack) (("1" (ground) (("1" (grind) nil nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand fine_stack? +) (("3" (ground) (("1" (lemma mem_mem_stack) (("1" (inst - G depth len scaf _ _ _ _) (("1" (inst - "push(pos!1, n1)" "push(pos!1, n1)" stack stack) (("1" (ground) (("1" (hide -2) (("1" (use mem_stack_push) (("1" (ground) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil) ("4" (use mem_stack_push) (("4" (ground) nil nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (use fine_mem_stack :subst (len len entry "push(pos!1, n1)" u stack stack stack)) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.push(sigmatopdown.pos, sigmatopdown.n1)" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.+)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC154 0 (step_TCC137-1 nil 3804730988 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (skeep*) (("2" (lift-if) (("2" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.n1 = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack], sigmatopdown.pos, sigmatopdown.n1)) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC155 0 (step_TCC105-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.loop" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC156 0 (step_TCC106-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC157 0 (step_TCC131-1 nil 3804706560 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC158 0 (step_TCC132-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" loop) (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u loop stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC159 0 (step_TCC142-1 nil 3804730988 ("" (skeep*) (("" (typepred stack) (("" (expand good_stack?) (("" (ground) (("1" (grind) nil nil) ("2" (grind :exclude (good_stack? fine_stack? mem_stack?)) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "booleans.TRUE" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown size_TCC1 0 (size_TCC1-1 nil 3808434333 ("" (subtype-tcc) nil nil) nil nil (size subtype "sigmatopdown.len" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown size_TCC2 0 (size_TCC2-1 nil 3808434333 ("" (skeep*) (("" (typepred "St`depth") (("" (expand good_depth?) (("" (expand pushcount) (("" (use sigma_max) (("" (grind :exclude exp2) nil nil)) nil)) nil)) nil)) nil)) nil) ((count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) nil (size subtype "(number_fields.-)((number_fields.*(((number_fields.+)(sigmatopdown.len, 1)), sigmatopdown.num_non_terminals)), sigmatopdown.St`depth)" "nat")))("sigmatopdown" sigmatopdown endstate_TCC1 0 (endstate_TCC1-1 nil 3804455654 ("" (skeep*) (("" (typepred "st`stack") (("" (grind) nil nil)) nil)) nil) nil nil (endstate subtype "sigmatopdown.st`stack" "(sigmatopdown.push?)")))("sigmatopdown" sigmatopdown parse_TCC1 0 (parse_TCC2-1 nil 3804455654 ("" (use well_founded_le) (("" (grind :exclude <) nil nil)) nil) nil nil (parse well-founded "restrict[[ordstruct_adt.ordstruct, ordstruct_adt.ordstruct], [ordinal, ordinal], booleans.bool].restrict(ordinals.<)" "nil")))("sigmatopdown" sigmatopdown parse_TCC2 0 (parse_TCC3-1 nil 3804455654 ("" (skeep*) (("" (typepred "St`stack") (("" (grind) nil nil)) nil)) nil) nil nil (parse subtype "sigmatopdown.St" "sigmatopdown.endstate(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s, sigmatopdown.start, sigmatopdown.root)")))("sigmatopdown" sigmatopdown parse_TCC3 0 (parse_TCC4-1 nil 3804455654 ("" (skeep*) (("" (expand restrict) (("" (expand size) (("" (rewrite lex2_lt) (("1" (flatten) (("1" (hide 3) (("1" (typepred "St`stack") (("1" (apply (then (expand step) (lift-if) (ground))) (("1" (hide 1) (("1" (grind) nil nil)) nil) ("2" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("3" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("4" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("5" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("6" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("7" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("8" (grind :defs nil) (("8" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil) ("9" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("10" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("11" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("12" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (hide 2) (("2" (expand nice_entry?) (("2" (expand "good_good_entry?") (("2" (typepred "step(len, G, s, start, root)(St)`scaf") (("2" (expand step) (("2" (expand fine_scaffold?) (("2" (ground) (("2" (hide -1) (("2" (expand good_tscaffold?) (("2" (inst - "pos(St`stack)" "nt(St`stack)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("13" (reveal 1) (("13" (hide 2) (("13" (ground) (("1" (expand step) (("1" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("2" (expand step) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("14" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("15" (reveal 1) (("15" (hide 2) (("15" (ground) (("1" (expand step) (("1" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("2" (expand step) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("16" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("17" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("18" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (hide 2) (("2" (typepred "step(len, G, s, start, root)(St)`scaf") (("2" (expand fine_scaffold?) (("2" (ground) (("2" (hide -1) (("2" (expand good_tscaffold?) (("2" (inst - "pos(St`stack)" "nt(St`stack)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("19" (reveal 1) (("19" (hide 2) (("19" (ground) (("1" (expand step) (("1" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("2" (expand step) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("20" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("21" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (typepred "step(len, G, s, start, root)(St)`scaf") (("2" (expand fine_scaffold?) (("2" (ground) (("2" (hide -1) (("2" (expand good_tscaffold?) (("2" (inst - "pos(St`stack)" "nt(St`stack)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("22" (reveal 1) (("22" (hide 2) (("22" (expand step) (("22" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("23" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("24" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("25" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("26" (reveal 1) (("26" (hide 2) (("26" (expand step) (("26" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("27" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("28" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("29" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("30" (reveal 1) (("30" (hide 2) (("30" (expand step) (("30" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("31" (grind :defs nil) (("31" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "St`depth") (("2" (expand good_depth?) (("2" (expand pushcount) (("2" (use sigma_max) (("2" (ground) nil nil)) nil)) nil)) nil)) nil) ("3" (typepred "step(len, G, s, start, root)(St)`depth") (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (use sigma_max) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) nil (parse termination "sigmatopdown.parse(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s, sigmatopdown.start, sigmatopdown.root)(sigmatopdown.step(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s, sigmatopdown.start, sigmatopdown.root)(sigmatopdown.St))" "nil")))("sigmatopdown" sigmatopdown doparse_TCC1 0 (doparse_TCC3-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (doparse subtype "sigmatopdown.pend" "[non_terminal -> (sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.i))]")))("sigmatopdown" sigmatopdown doparse_TCC2 0 (doparse_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (doparse subtype "0" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown doparse_TCC3 0 (doparse_TCC3-1 nil 3808434333 ("" (subtype-tcc) nil nil) nil nil (doparse subtype "0" "uint32")))("sigmatopdown" sigmatopdown doparse_TCC4 0 (doparse_TCC4-1 nil 3804547853 ("" (grind) nil nil) nil nil (doparse subtype "sigmatopdown.num_non_terminals" "uint8")))("sigmatopdown" sigmatopdown doparse_TCC5 0 (doparse_TCC4-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (doparse subtype "sigmatopdown.push(0, sigmatopdown.num_non_terminals)" "(sigmatopdown.nice_entry?(sigmatopdown.len, 0))")))("sigmatopdown" sigmatopdown doparse_TCC6 0 (doparse_TCC5-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((count const-decl "upto(len)" arrayCount nil)) nil (doparse subtype "(LAMBDA (i: naturalnumbers.upto(sigmatopdown.len)): sigmatopdown.pend) WITH [(0)(sigmatopdown.n) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(0, sigmatopdown.n))")))("sigmatopdown" sigmatopdown doparse_TCC7 0 (doparse_TCC1-1 nil 3804455654 ("" (skeep*) (("" (grind :exclude good_depth?) (("" (expand good_depth?) (("" (expand pushcount) (("" (rewrite scafcount_update) (("" (use "empty_card[below(255)]") (("1" (ground) (("1" (replace -2 :hide? t) (("1" (rewrite "reals@sigma[upto(len)].sigma_zero") nil nil)) nil)) nil) ("2" (hide 2) (("2" (inst + 255 "id[below(255)]") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_zero formula-decl nil sigma reals) (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (doparse subtype "1" "(sigmatopdown.good_depth?(sigmatopdown.len, (LAMBDA (i: naturalnumbers.upto(sigmatopdown.len)): sigmatopdown.pend) WITH [(0)(sigmatopdown.n) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)]))")))("sigmatopdown" sigmatopdown doparse_TCC8 0 (doparse_TCC6-1 nil 3804534082 ("" (grind) nil nil) nil nil (doparse subtype "sigmatopdown.push(0, sigmatopdown.n)" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, 1, (LAMBDA (i: naturalnumbers.upto(sigmatopdown.len)): sigmatopdown.pend) WITH [(0)(sigmatopdown.n) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)]))")))("sigmatopdown" sigmatopdown doparse_TCC9 0 (doparse_TCC8-1 nil 3804730988 ("" (subtype-tcc) nil nil) nil nil (doparse subtype "booleans.FALSE" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.n = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, (LAMBDA (i: naturalnumbers.upto(sigmatopdown.len)): sigmatopdown.pend) WITH [(0)(sigmatopdown.n) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)], 0, sigmatopdown.n)) ELSE FORALL (i_1: naturalnumbers.upto(sigmatopdown.len)), (n_1: sigmatopdown.non_terminal): (booleans.NOT)(sigmatopdown.loop?((LAMBDA (i: naturalnumbers.upto(sigmatopdown.len)): sigmatopdown.pend) WITH [(0)(sigmatopdown.n) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)](i_1)(n_1))) ENDIF}")))(nil sigmatopdown sigma_restrict_TCC1 0 (sigma_restrict_TCC1-1 nil 3806355895 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "0" "T_low[upto(j)]")))(nil sigmatopdown sigma_restrict_TCC2 0 (sigma_restrict_TCC2-1 nil 3806355895 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "sigmatopdown.j" "T_high[upto(j)]")))(nil sigmatopdown sigma_restrict_TCC3 0 (sigma_restrict_TCC3-1 nil 3806355895 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "sigmatopdown.i" "naturalnumbers.upto(sigmatopdown.len)")))(nil sigmatopdown sigma_restrict_TCC4 0 (sigma_restrict_TCC4-1 nil 3806355895 ("" (assuming-tcc) nil nil) nil nil (sigma_restrict assuming "reals@sigma[naturalnumbers.upto(sigmatopdown.j)].sigma" "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))(nil sigmatopdown sigma_restrict_TCC5 0 (sigma_restrict_TCC5-1 nil 3806360457 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "0" "T_low[upto(k)]")))(nil sigmatopdown sigma_restrict_TCC6 0 (sigma_restrict_TCC5-1 nil 3806358823 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "sigmatopdown.j" "T_high[upto(k)]")))(nil sigmatopdown sigma_restrict_TCC7 0 (sigma_restrict_TCC7-1 nil 3806360457 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "sigmatopdown.i" "naturalnumbers.upto(sigmatopdown.len)")))(nil sigmatopdown sigma_restrict_TCC8 0 (sigma_restrict_TCC8-1 nil 3806360457 ("" (assuming-tcc) nil nil) nil nil (sigma_restrict assuming "reals@sigma[naturalnumbers.upto(sigmatopdown.k)].sigma" "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))(nil sigmatopdown sigma_restrict 0 (sigma_restrict-1 nil 3806355895 ("" (skolem + ("len" "A" "_" "_")) (("" (induct j) (("1" (grind) nil nil) ("2" (skeep*) (("2" (expand "sigma" +) (("2" (inst-cp - k) (("2" (inst - "jt + 1") (("1" (ground) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (grind) nil nil)) nil)) nil)) nil) ((T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals) (sigma def-decl "real" sigma reals) (arr type-eq-decl nil arrayCount nil) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) shostak))(nil sigmatopdown sigma_restrict_len_TCC1 0 (sigma_restrict_len_TCC1-1 nil 3806360811 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict_len subtype "0" "T_low[upto(j)]")))(nil sigmatopdown sigma_restrict_len_TCC2 0 (sigma_restrict_len_TCC2-1 nil 3806360811 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict_len subtype "sigmatopdown.j" "T_high[upto(j)]")))(nil sigmatopdown sigma_restrict_len_TCC3 0 (sigma_restrict_len_TCC3-1 nil 3806360811 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict_len subtype "sigmatopdown.i" "naturalnumbers.upto(sigmatopdown.len)")))(nil sigmatopdown sigma_restrict_len_TCC4 0 (sigma_restrict_len_TCC4-1 nil 3806360811 ("" (assuming-tcc) nil nil) nil nil (sigma_restrict_len assuming "reals@sigma[naturalnumbers.upto(sigmatopdown.j)].sigma" "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))(nil sigmatopdown sigma_restrict_len_TCC5 0 (sigma_restrict_len_TCC5-1 nil 3806936723 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict_len subtype "0" "T_low[upto(len)]")))(nil sigmatopdown sigma_restrict_len_TCC6 0 (sigma_restrict_len_TCC6-1 nil 3806936723 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict_len subtype "sigmatopdown.j" "T_high[upto(len)]")))(nil sigmatopdown sigma_restrict_len_TCC7 0 (sigma_restrict_len_TCC7-1 nil 3806936723 ("" (assuming-tcc) nil nil) nil nil (sigma_restrict_len assuming "reals@sigma[naturalnumbers.upto(sigmatopdown.len)].sigma" "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))(nil sigmatopdown sigma_restrict_len 0 (sigma_restrict_len-1 nil 3806360812 ("" (skeep*) (("" (lemma "sigma_restrict") (("" (inst - len A j len) (("" (ground) nil nil)) nil)) nil)) nil) nil shostak))(nil sigmatopdown sigma_nat_TCC1 0 (sigma_nat_TCC1-1 nil 3804912405 ("" (subtype-tcc) nil nil) nil nil (sigma_nat subtype "0" "T_low[upto(len)]")))(nil sigmatopdown sigma_nat_TCC2 0 (sigma_nat_TCC2-1 nil 3804912405 ("" (subtype-tcc) nil nil) nil nil (sigma_nat subtype "sigmatopdown.i" "T_high[upto(len)]")))(nil sigmatopdown sigma_nat 0 (sigma_nat-1 nil 3804912406 ("" (skolem + ("len" _ _)) (("" (induct-and-simplify i) nil nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)) shostak))(nil sigmatopdown sigma_pos_TCC1 0 (sigma_pos_TCC1-1 nil 3804912405 ("" (subtype-tcc) nil nil) nil nil (sigma_pos subtype "sigmatopdown.j" "T_high[upto(len)]")))(nil sigmatopdown sigma_pos 0 (sigma_pos-1 nil 3804912491 ("" (skolem + ("len" _ _ _)) (("" (induct-and-simplify j) nil nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)) shostak))(nil sigmatopdown sigma_dec_TCC1 0 (sigma_dec_TCC1-1 nil 3804994284 ("" (subtype-tcc) nil nil) nil nil (sigma_dec subtype "sigmatopdown.j" "T_high[upto(len)]")))(nil sigmatopdown sigma_dec 0 (sigma_dec-1 nil 3804993479 ("" (skolem + ("len" _ _ _)) (("" (induct "j") (("1" (grind) nil nil) ("2" (skeep*) (("2" (expand sigma +) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ((T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) shostak))(nil sigmatopdown sigma_inc_TCC1 0 (sigma_inc_TCC1-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil (sigma_inc subtype "sigmatopdown.j" "T_high[upto(len)]")))(nil sigmatopdown sigma_inc_TCC2 0 (sigma_inc_TCC2-1 nil 3805854734 ("" (subtype-tcc) nil nil) nil nil (sigma_inc subtype "sigmatopdown.j" "T_high[upto(len)]")))(nil sigmatopdown sigma_inc 0 (sigma_inc-1 nil 3804994355 ("" (skolem + ("len" _ _ _)) (("" (induct "j") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil) ((T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) shostak))("sigmatopdown" sigmatopdown subtype_TCC1 0 (subtype_TCC1-1 nil 3804536638 ("" (grind) nil nil) nil nil (subtype_ subtype "sigmatopdown.x" "uint32")))("sigmatopdown" sigmatopdown subtype_TCC2 0 (subtype_TCC2-1 nil 3804564519 ("" (grind) nil nil) nil nil (subtype_ subtype "sigmatopdown.x" "uint8")))("sigmatopdown" sigmatopdown fine_push_entry?_TCC1 0 (fine_push_entry?_TCC1-1 nil 3807728459 ("" (subtype-tcc) nil nil) nil nil (fine_push_entry? subtype "sigmatopdown.x" "(sigmatopdown.push?)")))("sigmatopdown" sigmatopdown successor_TCC1 0 (successor_TCC1-1 nil 3804904050 ("" (subtype-tcc) nil nil) nil nil (successor subtype "sigmatopdown.entry1" "(sigmatopdown.push?)")))("sigmatopdown" sigmatopdown successor_TCC2 0 (successor_TCC2-1 nil 3804904050 ("" (subtype-tcc) nil nil) nil nil (successor subtype "sigmatopdown.entry2" "(sigmatopdown.push?)")))("sigmatopdown" sigmatopdown successor_TCC3 0 (successor_TCC1-1 nil 3804547853 ("" (subtype-tcc) nil nil) nil nil (successor subtype "sigmatopdown.nt1" "non_terminal")))("sigmatopdown" sigmatopdown successor_TCC4 0 (successor_TCC1-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (successor subtype "sigmatopdown.p1" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown successor_TCC5 0 (successor_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (successor subtype "sigmatopdown.p1" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown sigma_restrict_TCC1 0 (sigma_restrict_TCC1-1 nil 3806355895 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "0" "T_low[upto(j)]")))("sigmatopdown" sigmatopdown sigma_restrict_TCC2 0 (sigma_restrict_TCC2-1 nil 3806355895 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "sigmatopdown.j" "T_high[upto(j)]")))("sigmatopdown" sigmatopdown sigma_restrict_TCC3 0 (sigma_restrict_TCC3-1 nil 3806355895 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "sigmatopdown.i" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown sigma_restrict_TCC4 0 (sigma_restrict_TCC4-1 nil 3806355895 ("" (assuming-tcc) nil nil) nil nil (sigma_restrict assuming "reals@sigma[naturalnumbers.upto(sigmatopdown.j)].sigma" "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))("sigmatopdown" sigmatopdown sigma_restrict_TCC5 0 (sigma_restrict_TCC5-1 nil 3806360457 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "0" "T_low[upto(k)]")))("sigmatopdown" sigmatopdown sigma_restrict_TCC6 0 (sigma_restrict_TCC5-1 nil 3806358823 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "sigmatopdown.j" "T_high[upto(k)]")))("sigmatopdown" sigmatopdown sigma_restrict_TCC7 0 (sigma_restrict_TCC7-1 nil 3806360457 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "sigmatopdown.i" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown sigma_restrict_TCC8 0 (sigma_restrict_TCC8-1 nil 3806360457 ("" (assuming-tcc) nil nil) nil nil (sigma_restrict assuming "reals@sigma[naturalnumbers.upto(sigmatopdown.k)].sigma" "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))("sigmatopdown" sigmatopdown sigma_restrict 0 (sigma_restrict-1 nil 3806355895 ("" (skolem + ("len" "A" "_" "_")) (("" (induct j) (("1" (grind) nil nil) ("2" (skeep*) (("2" (expand "sigma" +) (("2" (inst-cp - k) (("2" (inst - "jt + 1") (("1" (ground) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (grind) nil nil)) nil)) nil)) nil) ((T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals) (sigma def-decl "real" sigma reals) (arr type-eq-decl nil arrayCount nil) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) shostak))("sigmatopdown" sigmatopdown sigma_restrict_len_TCC1 0 (sigma_restrict_len_TCC1-1 nil 3806360811 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict_len subtype "0" "T_low[upto(j)]")))("sigmatopdown" sigmatopdown sigma_restrict_len_TCC2 0 (sigma_restrict_len_TCC2-1 nil 3806360811 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict_len subtype "sigmatopdown.j" "T_high[upto(j)]")))("sigmatopdown" sigmatopdown sigma_restrict_len_TCC3 0 (sigma_restrict_len_TCC3-1 nil 3806360811 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict_len subtype "sigmatopdown.i" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown sigma_restrict_len_TCC4 0 (sigma_restrict_len_TCC4-1 nil 3806360811 ("" (assuming-tcc) nil nil) nil nil (sigma_restrict_len assuming "reals@sigma[naturalnumbers.upto(sigmatopdown.j)].sigma" "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))("sigmatopdown" sigmatopdown sigma_restrict_len_TCC5 0 (sigma_restrict_len_TCC5-1 nil 3806936723 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict_len subtype "0" "T_low[upto(len)]")))("sigmatopdown" sigmatopdown sigma_restrict_len_TCC6 0 (sigma_restrict_len_TCC6-1 nil 3806936723 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict_len subtype "sigmatopdown.j" "T_high[upto(len)]")))("sigmatopdown" sigmatopdown sigma_restrict_len_TCC7 0 (sigma_restrict_len_TCC7-1 nil 3806936723 ("" (assuming-tcc) nil nil) nil nil (sigma_restrict_len assuming "reals@sigma[naturalnumbers.upto(sigmatopdown.len)].sigma" "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))("sigmatopdown" sigmatopdown sigma_restrict_len 0 (sigma_restrict_len-1 nil 3806360812 ("" (skeep*) (("" (lemma "sigma_restrict") (("" (inst - len A j len) (("" (ground) nil nil)) nil)) nil)) nil) nil shostak))("sigmatopdown" sigmatopdown sigma_nat_TCC1 0 (sigma_nat_TCC1-1 nil 3804912405 ("" (subtype-tcc) nil nil) nil nil (sigma_nat subtype "0" "T_low[upto(len)]")))("sigmatopdown" sigmatopdown sigma_nat_TCC2 0 (sigma_nat_TCC2-1 nil 3804912405 ("" (subtype-tcc) nil nil) nil nil (sigma_nat subtype "sigmatopdown.i" "T_high[upto(len)]")))("sigmatopdown" sigmatopdown sigma_nat 0 (sigma_nat-1 nil 3804912406 ("" (skolem + ("len" _ _)) (("" (induct-and-simplify i) nil nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)) shostak))("sigmatopdown" sigmatopdown sigma_pos_TCC1 0 (sigma_pos_TCC1-1 nil 3804912405 ("" (subtype-tcc) nil nil) nil nil (sigma_pos subtype "sigmatopdown.j" "T_high[upto(len)]")))("sigmatopdown" sigmatopdown sigma_pos 0 (sigma_pos-1 nil 3804912491 ("" (skolem + ("len" _ _ _)) (("" (induct-and-simplify j) nil nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)) shostak))("sigmatopdown" sigmatopdown sigma_dec_TCC1 0 (sigma_dec_TCC1-1 nil 3804994284 ("" (subtype-tcc) nil nil) nil nil (sigma_dec subtype "sigmatopdown.j" "T_high[upto(len)]")))("sigmatopdown" sigmatopdown sigma_dec 0 (sigma_dec-1 nil 3804993479 ("" (skolem + ("len" _ _ _)) (("" (induct "j") (("1" (grind) nil nil) ("2" (skeep*) (("2" (expand sigma +) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ((T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) shostak))("sigmatopdown" sigmatopdown sigma_inc_TCC1 0 (sigma_inc_TCC1-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil (sigma_inc subtype "sigmatopdown.j" "T_high[upto(len)]")))("sigmatopdown" sigmatopdown sigma_inc_TCC2 0 (sigma_inc_TCC2-1 nil 3805854734 ("" (subtype-tcc) nil nil) nil nil (sigma_inc subtype "sigmatopdown.j" "T_high[upto(len)]")))("sigmatopdown" sigmatopdown sigma_inc 0 (sigma_inc-1 nil 3804994355 ("" (skolem + ("len" _ _ _)) (("" (induct "j") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil) ((T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) shostak))("sigmatopdown" sigmatopdown scafcount_TCC1 0 (scafcount_TCC4-1 nil 3806632141 ("" (skolem + (len A P "_")) (("" (case "FORALL ((j: upto(len))):
        sigma[upto(len)]
            (0, j,
             LAMBDA (i: upto(len)): count[ent](num_non_terminals)(P)(A(i)))
         <= (j + 1) * num_non_terminals") (("1" (skeep) (("1" (inst?) (("1" (case "(j + 1) * num_non_terminals <= exp2(64) - 1") (("1" (assert) nil nil) ("2" (hide -1 2) (("2" (use le_times_le_pos :subst (nnx "j + 1" y "exp2(32)" nnz num_non_terminals w "exp2(8)")) (("2" (ground) (("1" (rewrite exp2_sum :dir RL) (("1" (grind) nil nil)) nil) ("2" (assert) (("2" (typepred "num_non_terminals") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (induct-and-simplify j :exclude count) nil nil)) nil)) nil)) nil) ((count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals) (sigma_nat application-judgement "nat" sigma reals)) nil (scafcount subtype "sigma[naturalnumbers.upto(sigmatopdown.len)].sigma(0, sigmatopdown.j, LAMBDA (i: naturalnumbers.upto(sigmatopdown.len)): arrayCount[sigmatopdown.ent].count(sigmatopdown.num_non_terminals)(sigmatopdown.P)(sigmatopdown.A(i)))" "uint64")))("sigmatopdown" sigmatopdown sigma_max 0 (sigma_max-1 nil 3806353166 ("" (induct j) (("1" (skeep) (("1" (expand scafcount) (("1" (expand "sigma" +) (("1" (expand "sigma" +) (("1" (typepred "count(num_non_terminals)(push?)(A(0))") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skeep*) (("2" (expand scafcount) (("2" (expand "sigma" +) (("2" (inst - len A P) (("2" (ground) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (arr type-eq-decl nil arrayCount nil) (count const-decl "upto(len)" arrayCount nil)) shostak))("sigmatopdown" sigmatopdown scafcount_max 0 (scafcount_max-1 nil 3807566158 ("" (skeep*) (("" (use sigma_max) (("" (use "le_times_le_pos" :subst (y "exp2(32)" w "exp2(8)")) (("" (ground) (("1" (rewrite exp2_sum :dir RL) (("1" (assert) nil nil)) nil) ("2" (assert) (("2" (typepred num_non_terminals) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil)) shostak))("sigmatopdown" sigmatopdown scafcount0_TCC1 0 (scafcount0_TCC1-1 nil 3806988426 ("" (subtype-tcc) nil nil) nil nil (scafcount0 subtype "0" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown scafcount0 0 (scafcount0-1 nil 3806988426 ("" (grind :rewrites count_update00) nil nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil)) shostak))("sigmatopdown" sigmatopdown scafcount_step_TCC1 0 (scafcount_step_TCC1-1 nil 3806977775 ("" (subtype-tcc) nil nil) nil nil (scafcount_step subtype "(number_fields.+)(sigmatopdown.j, 1)" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown scafcount_step_TCC2 0 (scafcount_step_TCC2-1 nil 3806977775 ("" (subtype-tcc) nil nil) nil nil (scafcount_step subtype "sigmatopdown.j" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown scafcount_step 0 (scafcount_step-1 nil 3806977775 ("" (skolem + (len "_" "_" "_")) (("" (induct "j") (("1" (grind) nil nil) ("2" (skeep*) (("2" (expand "scafcount" +) (("2" (inst?) (("2" (inst?) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((arr type-eq-decl nil arrayCount nil) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) shostak))("sigmatopdown" sigmatopdown scafcount_update 0 (scafcount_update-1 nil 3806936723 ("" (skolem + (len "_" "_" "_" "_" "_" "_")) (("" (induct j) (("1" (skeep*) (("1" (rewrite scafcount0) (("1" (lift-if :updates? nil) (("1" (ground) (("1" (grind) nil nil) ("2" (case "i  = 0") (("1" (assert) (("1" (rewrite count_update00) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("3" (case "i  = 0") (("1" (assert) (("1" (rewrite count_update00) (("1" (grind) nil nil)) nil)) nil) ("2" (case "i  = 0") (("1" (propax) nil nil) ("2" (assert) nil nil)) nil)) nil) ("4" (case "i  = 0") (("1" (assert) (("1" (rewrite count_update00) (("1" (grind) nil nil)) nil)) nil) ("2" (case "i  = 0") (("1" (propax) nil nil) ("2" (grind) nil nil)) nil)) nil) ("5" (case "i  = 0") (("1" (assert) (("1" (rewrite count_update00) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skeep*) (("2" (rewrite scafcount_step) (("2" (rewrite -2) (("2" (hide -2) (("2" (case "i = 1 + jt") (("1" (assert) (("1" (rewrite count_update00) (("1" (grind :rewrites scafcount_step :exclude count) nil nil)) nil)) nil) ("2" (assert) (("2" (grind :rewrites scafcount_step :exclude count) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (count_update00 formula-decl nil arrayCount nil) (arr type-eq-decl nil arrayCount nil)) shostak))("sigmatopdown" sigmatopdown pushcount_TCC1 0 (pushcount_TCC1-1 nil 3806632141 ("" (subtype-tcc) nil nil) nil nil (pushcount subtype "sigmatopdown.len" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_stack?_TCC1 0 (good_stack?_TCC1-1 nil 3804904050 ("" (subtype-tcc) nil nil) nil nil (good_stack? subtype "sigmatopdown.stack" "(sigmatopdown.push?)")))("sigmatopdown" sigmatopdown good_stack?_TCC2 0 (good_stack?_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (good_stack? subtype "sigmatopdown.entry" "(sigmatopdown.push?)")))("sigmatopdown" sigmatopdown good_stack?_TCC3 0 (good_stack?_TCC3-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (good_stack? subtype "(number_fields.-)(sigmatopdown.depth, 1)" "uint64")))("sigmatopdown" sigmatopdown good_stack?_TCC4 0 (good_stack?_TCC4-1 nil 3804455654 ("" (termination-tcc) nil nil) nil nil (good_stack? termination "sigmatopdown.good_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.A)" "nil")))("sigmatopdown" sigmatopdown good_stack?_TCC5 0 (good_stack?_TCC5-1 nil 3804547853 ("" (subtype-tcc) nil nil) nil nil (good_stack? subtype "sigmatopdown.nt(sigmatopdown.stack)" "non_terminal")))("sigmatopdown" sigmatopdown good_stack?_TCC6 0 (good_stack?_TCC5-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (good_stack? subtype "sigmatopdown.pos(sigmatopdown.stack)" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown mem_stack?_TCC1 0 (mem_stack?_TCC1-1 nil 3804455654 ("" (skeep* :preds? t) (("" (expand "good_stack?") (("" (ground) nil nil)) nil)) nil) nil nil (mem_stack? subtype "(number_fields.-)(sigmatopdown.depth, 1)" "uint64")))("sigmatopdown" sigmatopdown mem_stack?_TCC2 0 (mem_stack?_TCC2-1 nil 3804455654 ("" (termination-tcc) nil nil) nil nil (mem_stack? termination "sigmatopdown.mem_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.A)" "nil")))("sigmatopdown" sigmatopdown mem_stack?_TCC3 0 (mem_stack?_TCC3-1 nil 3804455654 ("" (grind) nil nil) nil nil (mem_stack? subtype "sigmatopdown.A(sigmatopdown.pos(sigmatopdown.stack))(sigmatopdown.nt(sigmatopdown.stack))" "(sigmatopdown.good_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.A))")))("sigmatopdown" sigmatopdown mem_stack_push_TCC1 0 (mem_stack_push_TCC2-1 nil 3807675826 ("" (subtype-tcc) nil nil) nil nil (mem_stack_push subtype "sigmatopdown.entry" "(sigmatopdown.push?)")))("sigmatopdown" sigmatopdown mem_stack_push_TCC2 0 (mem_stack_push_TCC1-1 nil 3807675826 ("" (subtype-tcc) nil nil) nil nil (mem_stack_push subtype "(sigmatopdown.pos(sigmatopdown.entry))" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown mem_stack_push_TCC3 0 (mem_stack_push_TCC3-1 nil 3807675826 ("" (subtype-tcc) nil nil) nil nil (mem_stack_push subtype "sigmatopdown.nt(sigmatopdown.entry)" "non_terminal")))("sigmatopdown" sigmatopdown mem_stack_push 0 (mem_stack_push-1 nil 3807675827 ("" (induct depth) (("1" (lazy-grind :defs nil) nil nil) ("2" (skeep*) (("2" (expand mem_stack?) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (skeep*) (("3" (expand mem_stack? -4) (("3" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (inst?) (("2" (inst?) (("1" (ground) nil nil) ("2" (typepred entry) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (skeep*) (("4" (typepred entry) (("4" (grind) nil nil)) nil)) nil)) nil) ("5" (hide 2) (("5" (skeep*) (("5" (typepred entry) (("5" (grind) nil nil)) nil)) nil)) nil) ("6" (hide 2) (("6" (skeep*) (("6" (typepred entry) (("6" (grind) nil nil)) nil)) nil)) nil) ("7" (hide 2) (("7" (skeep*) (("7" (typepred entry) (("7" (grind) nil nil)) nil)) nil)) nil) ("8" (hide 2) (("8" (skeep*) (("8" (typepred entry) (("8" (grind) nil nil)) nil)) nil)) nil) ("9" (hide 2) (("9" (grind) nil nil)) nil)) nil) nil shostak))("sigmatopdown" sigmatopdown good_mem_stack_TCC1 0 (good_mem_stack_TCC1-1 nil 3807728459 ("" (subtype-tcc) nil nil) nil nil (good_mem_stack subtype "(sigmatopdown.pos(sigmatopdown.entry))" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_mem_stack_TCC2 0 (good_mem_stack_TCC2-1 nil 3807728459 ("" (subtype-tcc) nil nil) nil nil (good_mem_stack subtype "sigmatopdown.nt(sigmatopdown.entry)" "non_terminal")))("sigmatopdown" sigmatopdown good_mem_stack 0 (good_mem_stack-1 nil 3804823624 ("" (induct "depth") (("1" (grind) (("1" (expand "good_stack?") (("1" (propax) nil nil)) nil) ("2" (grind) (("2" (expand "good_stack?") (("2" (propax) nil nil)) nil)) nil) ("3" (expand "good_stack?") (("3" (propax) nil nil)) nil) ("4" (expand good_stack?) (("4" (propax) nil nil)) nil) ("5" (expand good_stack?) (("5" (propax) nil nil)) nil) ("6" (expand good_stack?) (("6" (propax) nil nil)) nil)) nil) ("2" (skeep*) (("2" (expand "mem_stack?" +) (("2" (ground) (("1" (typepred stack) (("1" (grind :if-match nil) nil nil)) nil) ("2" (expand "good_stack?" :fnum (-3 4)) (("2" (ground) (("1" (hide -3 4) (("1" (grind) (("1" (typepred entry) (("1" (grind) (("1" (typepred stack) (("1" (grind) (("1" (extensionality "(push?)") (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (extensionality "(push?)") (("2" (inst?) (("2" (ground) nil nil)) nil)) nil) ("3" (extensionality "(push?)") (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -3 2 5) (("2" (lift-if) (("2" (ground) (("2" (lift-if) (("2" (ground) (("2" (extensionality "(push?)") (("2" (inst?) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (inst?) (("3" (ground) (("1" (hide 2) (("1" (lift-if) (("1" (typepred entry) (("1" (grind) (("1" (extensionality "(push?)") (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lift-if) (("2" (ground) (("2" (ground) (("2" (extensionality "(push?)") (("2" (inst?) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide -3 4) (("4" (hide -1) (("4" (lift-if) (("4" (ground) (("4" (ground) (("4" (extensionality "(push?)") (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (hide -3 5) (("5" (case "pos(stack) = pos(entry)") (("1" (case "nt(stack) = nt(entry)") (("1" (extensionality "(push?)") (("1" (assert) (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (typepred u) (("2" (grind) nil nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("6" (inst? :polarity? t) (("6" (ground) (("1" (hide 2) (("1" (lift-if) (("1" (ground) (("1" (ground) (("1" (extensionality "(push?)") (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lift-if) (("2" (ground) (("2" (ground) (("2" (extensionality "(push?)") (("2" (inst?) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (grind) nil nil)) nil) ("5" (hide 2) (("5" (grind) nil nil)) nil) ("6" (hide 2) (("6" (grind) nil nil)) nil) ("7" (hide 2) (("7" (grind) nil nil)) nil) ("8" (hide 2) (("8" (grind) nil nil)) nil) ("9" (hide 2) (("9" (grind) nil nil)) nil) ("10" (hide 2) (("10" (grind) nil nil)) nil) ("11" (hide 2) (("11" (grind) nil nil)) nil)) nil) nil shostak))("sigmatopdown" sigmatopdown mem_mem_stack_TCC1 0 (mem_mem_stack_TCC1-1 nil 3804967699 ("" (skeep*) (("" (lemma good_mem_stack) (("" (inst?) (("" (ground) nil nil)) nil)) nil)) nil) nil nil (mem_mem_stack subtype "sigmatopdown.stack" "(sigmatopdown.good_stack?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.depth, sigmatopdown.A WITH [(sigmatopdown.pos(sigmatopdown.entry))(sigmatopdown.nt(sigmatopdown.entry)) := sigmatopdown.u]))")))("sigmatopdown" sigmatopdown mem_mem_stack 0 (mem_mem_stack-2 "" 3807748697 ("" (induct depth) (("1" (skeep*) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil) ("2" (skeep*) (("2" (expand mem_stack? +) (("2" (lift-if) (("2" (ground) (("2" (case "v = stack") (("1" (assert) nil nil) ("2" (assert) (("2" (inst?) (("2" (ground) (("1" (lift-if -) (("1" (ground) (("1" (lift-if -) (("1" (ground) (("1" (extensionality "(push?)") (("1" (forward-chain -) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand good_stack? -) (("2" (ground) (("1" (case "pos(stack) = pos(entry)") (("1" (case "nt(stack) = nt(entry)") (("1" (assert) (("1" (extensionality "(push?)") (("1" (inst - stack entry) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil) ("2" (case "pos(stack) = pos(entry)") (("1" (case "nt(stack) = nt(entry)") (("1" (assert) (("1" (extensionality "(push?)") (("1" (inst - stack entry) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("3" (case "pos(stack) = pos(entry)") (("1" (case "nt(stack) = nt(entry)") (("1" (extensionality "(push?)") (("1" (inst - stack entry) (("1" (ground) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (grind) nil nil)) nil) ("5" (hide 2) (("5" (grind) nil nil)) nil) ("6" (hide 2) (("6" (skeep*) (("6" (use good_mem_stack) (("6" (ground) nil nil)) nil)) nil)) nil) ("7" (hide 2) (("7" (skeep*) (("7" (typepred entry) (("7" (grind) nil nil)) nil)) nil)) nil) ("8" (hide 2) (("8" (grind) nil nil)) nil) ("9" (hide 2) (("9" (grind) nil nil)) nil) ("10" (hide 2) (("10" (grind) nil nil)) nil) ("11" (hide 2) (("11" (grind) nil nil)) nil) ("12" (hide 2) (("12" (grind) nil nil)) nil)) nil) nil shostak) (mem_mem_stack-1 nil 3804967700 ("" (induct depth) (("1" (skeep*) (("1" (inst?) (("1" (ground) nil nil)) nil)) nil) ("2" (skeep*) (("2" (expand good_stack?) (("2" (grind) nil nil)) nil)) nil) ("3" (skeep*) (("3" (expand mem_stack? +) (("3" (lift-if) (("3" (ground) (("3" (case "v = stack") (("1" (assert) nil nil) ("2" (assert) (("2" (inst?) (("2" (ground) (("1" (lift-if -) (("1" (ground) (("1" (lift-if -) (("1" (ground) (("1" (extensionality "(push?)") (("1" (forward-chain -) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand good_stack? -) (("2" (ground) (("1" (grind) nil nil) ("2" (lift-if 1) (("2" (ground) (("2" (ground) (("2" (extensionality "(push?)") (("2" (forward-chain -) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (lift-if -) (("3" (ground) (("3" (lift-if -) (("3" (ground) (("3" (extensionality "(push?)") (("3" (forward-chain -) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (grind) nil nil)) nil) ("5" (hide 2) (("5" (grind) nil nil)) nil) ("6" (hide 2) (("6" (skeep*) (("6" (lemma good_mem_stack) (("6" (inst?) (("6" (ground) nil nil)) nil)) nil)) nil)) nil) ("7" (hide 2) (("7" (grind) nil nil)) nil) ("8" (hide 2) (("8" (grind) nil nil)) nil) ("9" (hide 2) (("9" (grind) nil nil)) nil) ("10" (hide 2) (("10" (grind) nil nil)) nil) ("11" (hide 2) (("11" (grind) nil nil)) nil) ("12" (hide 2) (("12" (grind) nil nil)) nil)) nil) nil shostak))("sigmatopdown" sigmatopdown good_mem_stack_push_TCC1 0 (good_mem_stack_push_TCC2-1 nil 3807665403 ("" (subtype-tcc) nil nil) nil nil (good_mem_stack_push subtype "sigmatopdown.push(sigmatopdown.pos, sigmatopdown.n)" "(sigmatopdown.good_push_entry?(sigmatopdown.len))")))("sigmatopdown" sigmatopdown good_mem_stack_push_TCC2 0 (good_mem_stack_push_TCC3-1 nil 3807665403 ("" (skeep*) (("" (use exp2_lt :subst (n 41 m 64)) (("" (grind) nil nil)) nil)) nil) nil nil (good_mem_stack_push subtype "(number_fields.+)(sigmatopdown.depth, 1)" "uint64")))("sigmatopdown" sigmatopdown good_mem_stack_push_TCC3 0 (good_mem_stack_push_TCC4-1 nil 3807665403 ("" (subtype-tcc) nil nil) nil nil (good_mem_stack_push subtype "sigmatopdown.stack" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown good_mem_stack_push 0 (good_mem_stack_push-2 "" 3807671734 ("" (skeep*) (("" (expand good_stack? +) (("" (ground) (("1" (grind) nil nil) ("2" (use good_mem_stack :subst (len len entry "push(pos!1, n)")) (("1" (ground) (("1" (grind) nil nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil shostak) (good_mem_stack_push-1 nil 3807665405 ("" (skeep*) (("" (expand good_stack? +) (("" (ground) (("1" (postpone) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil)) nil)) nil)) nil) nil shostak))("sigmatopdown" sigmatopdown fine_stack?_TCC1 0 (fine_stack?_TCC1-1 nil 3807728459 ("" (subtype-tcc) nil nil) nil nil (fine_stack? subtype "sigmatopdown.stack" "(sigmatopdown.fine_push_entry?(sigmatopdown.len))")))("sigmatopdown" sigmatopdown fine_stack?_TCC2 0 (fine_stack?_TCC1-1 nil 3804908888 ("" (skeep*) (("" (typepred stack) (("" (grind) nil nil)) nil)) nil) nil nil (fine_stack? subtype "sigmatopdown.rest" "(sigmatopdown.good_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.A))")))("sigmatopdown" sigmatopdown fine_stack?_TCC3 0 (fine_stack?_TCC2-1 nil 3804908888 ("" (skeep*) (("" (ground) (("" (typepred stack) (("" (grind) nil nil)) nil)) nil)) nil) nil nil (fine_stack? subtype "(number_fields.-)(sigmatopdown.depth, 1)" "uint64")))("sigmatopdown" sigmatopdown fine_stack?_TCC4 0 (fine_stack?_TCC3-1 nil 3804908888 ("" (skeep*) (("" (ground) (("1" (typepred "stack") (("1" (grind) nil nil)) nil) ("2" (typepred "stack") (("2" (grind) nil nil)) nil)) nil)) nil) nil nil (fine_stack? subtype "sigmatopdown.A(sigmatopdown.pos(sigmatopdown.stack))(sigmatopdown.nt(sigmatopdown.stack))" "(sigmatopdown.good_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.A))")))("sigmatopdown" sigmatopdown fine_stack?_TCC5 0 (fine_stack?_TCC4-1 nil 3804908888 ("" (termination-tcc) nil nil) nil nil (fine_stack? termination "sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.A)" "nil")))("sigmatopdown" sigmatopdown fine_mem_stack_TCC1 0 (fine_mem_stack_TCC1-1 nil 3804969900 ("" (skeep*) (("" (rewrite good_mem_stack) (("" (grind) nil nil)) nil)) nil) nil nil (fine_mem_stack subtype "sigmatopdown.stack" "(sigmatopdown.good_stack?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.depth, sigmatopdown.A WITH [(sigmatopdown.pos(sigmatopdown.entry))(sigmatopdown.nt(sigmatopdown.entry)) := sigmatopdown.u]))")))("sigmatopdown" sigmatopdown fine_mem_stack 0 (fine_mem_stack-1 nil 3804969200 ("" (induct "depth") (("1" (skeep*) (("1" (expand fine_stack?) (("1" (expand good_stack? -) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (skeep*) (("2" (expand fine_stack? +) (("2" (expand good_stack? -3) (("2" (ground) (("1" (rewrite mem_mem_stack) (("1" (expand mem_stack? 2) (("1" (ground) (("1" (lift-if +) (("1" (ground) (("1" (lift-if +) (("1" (ground) (("1" (extensionality "(push?)") (("1" (forward-chain -) (("1" (assert) nil nil)) nil)) nil) ("2" (inst?) (("2" (ground) (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -5 4) (("2" (lift-if +) (("2" (ground) (("2" (ground) (("2" (expand mem_stack? +) (("2" (ground) (("2" (extensionality "(push?)") (("2" (forward-chain -) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -5 4) (("3" (grind) nil nil)) nil) ("4" (hide -6 3) (("4" (grind) (("4" (extensionality "(push?)") (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil) ("5" (hide -5 4) (("5" (grind) (("1" (extensionality "(push?)") (("1" (inst?) (("1" (ground) nil nil)) nil)) nil) ("2" (extensionality "(push?)") (("2" (inst?) (("2" (ground) nil nil)) nil)) nil) ("3" (extensionality "(push?)") (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite mem_mem_stack) (("1" (expand mem_stack? 2) (("1" (ground) (("1" (lift-if +) (("1" (ground) (("1" (lift-if +) (("1" (ground) (("1" (extensionality "(push?)") (("1" (forward-chain -) (("1" (assert) nil nil)) nil)) nil) ("2" (inst?) (("2" (ground) (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -5 4) (("2" (hide -1) (("2" (grind) (("2" (extensionality "(push?)") (("2" (inst?) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -5 4) (("3" (hide -1) (("3" (grind) nil nil)) nil)) nil) ("4" (hide -6 3) (("4" (hide -2) (("4" (grind) (("4" (extensionality "(push?)") (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (hide -5 4) (("5" (hide -1) (("5" (grind) (("1" (hide -5 4) (("1" (hide -1) (("1" (grind) (("1" (extensionality "(push?)") (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (extensionality "(push?)") (("2" (inst?) (("2" (ground) nil nil)) nil)) nil) ("3" (extensionality "(push?)") (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (grind) nil nil)) nil) ("5" (hide 2) (("5" (grind) nil nil)) nil) ("6" (hide 2) (("6" (skeep*) (("6" (use good_mem_stack) (("6" (ground) nil nil)) nil)) nil)) nil) ("7" (grind) nil nil) ("8" (hide 2) (("8" (grind) nil nil)) nil) ("9" (hide 2) (("9" (grind) nil nil)) nil) ("10" (hide 2) (("10" (grind) nil nil)) nil) ("11" (hide 2) (("11" (grind) nil nil)) nil) ("12" (hide 2) (("12" (grind) nil nil)) nil)) nil) nil shostak))("sigmatopdown" sigmatopdown loop_ready?_TCC1 0 (loop_ready?_TCC1-1 nil 3804455654 ("" (skeep* :preds? t) (("" (typepred "A(i)(n1)") (("" (grind) nil nil)) nil)) nil) nil nil (loop_ready? subtype "(number_fields.+)(sigmatopdown.i, sigmatopdown.span(sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)))" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_fail?_TCC1 0 (good_fail?_TCC1-1 nil 3804455654 ("" (grind) nil nil) nil nil (good_fail? subtype "sigmatopdown.i" "naturalnumbers.below(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_fail?_TCC2 0 (good_fail?_TCC2-1 nil 3804455654 ("" (grind) nil nil) nil nil (good_fail? subtype "sigmatopdown.i" "naturalnumbers.below(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_fail?_TCC3 0 (good_fail?_TCC3-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil (good_fail? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_fail?_TCC4 0 (good_fail?_TCC3-1 nil 3804455654 ("" (grind) (("" (typepred "A!1(i!1)(n1!1)") (("" (grind) nil nil)) nil)) nil) nil nil (good_fail? subtype "(number_fields.+)(sigmatopdown.i, sigmatopdown.span(sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)))" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_fail?_TCC5 0 (good_fail?_TCC5-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_fail? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_fail?_TCC6 0 (good_fail?_TCC6-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_fail? subtype "sigmatopdown.A((number_fields.+)(sigmatopdown.i, sigmatopdown.span(sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1))))(sigmatopdown.n2)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_fail?_TCC7 0 (good_fail?_TCC7-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_fail? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_fail?_TCC8 0 (good_fail?_TCC8-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_fail? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n2)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_fail?_TCC9 0 (good_fail?_TCC9-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_fail? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_fail?_TCC10 0 (good_fail?_TCC10-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_fail? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_loop?_TCC1 0 (good_loop?_TCC1-1 nil 3804455654 ("" (skeep* :preds? t) (("" (typepred "A(i)(n1)") (("" (grind) nil nil)) nil)) nil) nil nil (good_loop? subtype "(number_fields.+)(sigmatopdown.i, sigmatopdown.span(sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)))" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_good?_TCC1 0 (good_good?_TCC1-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "(number_fields.-)(sigmatopdown.len, sigmatopdown.i)" "nat")))("sigmatopdown" sigmatopdown good_good?_TCC2 0 (good_good?_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "sigmatopdown.i" "naturalnumbers.below(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_good?_TCC3 0 (good_good?_TCC3-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "sigmatopdown.i" "naturalnumbers.below(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_good?_TCC4 0 (good_good?_TCC4-1 nil 3804455654 ("" (skeep* :preds? t) (("" (typepred "A(i)(n1)") (("" (grind) nil nil)) nil)) nil) nil nil (good_good? subtype "(number_fields.+)(sigmatopdown.i, sigmatopdown.span(sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)))" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_good?_TCC5 0 (good_good?_TCC5-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_good?_TCC6 0 (good_good?_TCC6-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "sigmatopdown.A((number_fields.+)(sigmatopdown.i, sigmatopdown.span(sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1))))(sigmatopdown.n2)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_good?_TCC7 0 (good_good?_TCC7-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_good?_TCC8 0 (good_good?_TCC8-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_good?_TCC9 0 (good_good?_TCC9-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n2)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_good?_TCC10 0 (good_good?_TCC10-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_good?_TCC11 0 (good_good?_TCC11-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_tscaffold?_TCC1 0 (good_tscaffold?_TCC1-1 nil 3806632141 ("" (subtype-tcc) nil nil) nil nil (good_tscaffold? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_good_tscaffold 0 (good_good_tscaffold-2 "updated with depth bound" 3806872130 ("" (skeep*) (("" (expand "good_tscaffold?") (("" (skeep*) (("" (inst - i n) (("" (expand good_entry?) (("" (lift-if + :updates? nil) (("" (ground) (("1" (case "i = pos!1" "n = nt!1") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (assert) (("2" (expand "good_fail?") (("2" (lift-if) (("2" (ground) (("1" (grind) nil nil) ("2" (hide -11) (("2" (grind :exclude gfcount) nil nil)) nil) ("3" (hide -11) (("3" (grind :exclude gfcount) nil nil)) nil) ("4" (hide -10) (("4" (grind :exclude gfcount) nil nil)) nil) ("5" (hide -10) (("5" (grind :exclude gfcount) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -6) (("3" (grind :exclude gfcount) nil nil)) nil)) nil) ("2" (hide -5) (("2" (expand "gfcount" +) (("2" (rewrite "scafcount_update") (("2" (hide -6) (("2" (reveal -3) (("2" (lazy-grind :if-match all :exclude scafcount) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (inst? -) (("3" (grind :exclude gfcount) nil nil)) nil) ("4" (hide -7) (("4" (reveal -2) (("4" (lazy-grind :if-match all :exclude scafcount) nil nil)) nil)) nil) ("5" (typepred u) (("5" (hide -5 -7) (("5" (typepred "A(i)(n)") (("5" (grind :exclude gfcount) nil nil)) nil)) nil)) nil) ("6" (hide -6) (("6" (hide -2) (("6" (lift-if) (("6" (ground) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (lift-if) (("3" (ground) (("1" (expand good_good?) (("1" (lift-if) (("1" (ground) (("1" (ground) (("1" (grind) nil nil) ("2" (grind :exclude max) nil nil)) nil) ("2" (grind :exclude max) nil nil) ("3" (grind :exclude max) nil nil) ("4" (grind :exclude max) nil nil) ("5" (grind :exclude max) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil)) nil)) nil)) nil) ("2" (grind :exclude (max gfcount)) nil nil)) nil)) nil) ("4" (grind :exclude max) nil nil) ("5" (grind :exclude max) nil nil)) nil)) nil)) nil)) nil) ("7" (hide -5 -7) (("7" (typepred "A(i)(n)") (("7" (expand "gfcount" +) (("7" (rewrite scafcount_update) (("7" (reveal -3) (("7" (lazy-grind :if-match all :exclude scafcount) nil nil)) nil)) nil)) nil)) nil)) nil) ("8" (hide -4 -6) (("8" (reveal -3) (("8" (lazy-grind :if-match all :exclude scafcount) nil nil)) nil)) nil) ("9" (hide -5) (("9" (grind :exclude max) nil nil)) nil) ("10" (hide -6) (("10" (expand gfcount) (("10" (reveal -2) (("10" (hide -5) (("10" (rewrite "scafcount_update") (("10" (lift-if) (("10" (ground) (("10" (lift-if) (("10" (ground) (("10" (expand fine_entry?) (("10" (expand "good_fail?") (("10" (lift-if) (("10" (ground) (("1" (inst?) (("1" (grind :exclude scafcount) nil nil)) nil) ("2" (inst? :copy? t) (("2" (inst - "span(A(pos!1)(e1(G(nt!1)))) + pos!1" "e2(G(nt!1))") (("2" (grind :exclude scafcount) nil nil)) nil)) nil) ("3" (inst? :copy? t) (("3" (inst - "pos!1" "e2(G(nt!1))") (("3" (grind :exclude scafcount) nil nil)) nil)) nil) ("4" (inst?) (("4" (grind :exclude scafcount) nil nil)) nil) ("5" (inst?) (("5" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("11" (inst?) (("11" (grind :exclude (max gfcount)) nil nil)) nil) ("12" (hide -4 -6) (("12" (expand gfcount) (("12" (rewrite scafcount_update) (("12" (reveal -3) (("12" (lazy-grind :if-match all :exclude (max scafcount)) nil nil)) nil)) nil)) nil)) nil) ("13" (typepred "A(i)(n)") (("13" (typepred "u") (("13" (hide -5 -7) (("13" (grind :exclude (max gfcount)) nil nil)) nil)) nil)) nil) ("14" (hide -5) (("14" (typepred "A(i)(n)") (("14" (typepred "u") (("14" (grind :exclude (max gfcount)) nil nil)) nil)) nil)) nil) ("15" (hide -6) (("15" (reveal -2) (("15" (expand gfcount) (("15" (rewrite scafcount_update) (("15" (lift-if) (("15" (ground) (("1" (lift-if) (("1" (ground) (("1" (hide -15) (("1" (grind :exclude (max scafcount)) nil nil)) nil)) nil)) nil) ("2" (lift-if) (("2" (ground) (("2" (hide -15) (("2" (grind :exclude (max scafcount)) nil nil)) nil)) nil)) nil) ("3" (lift-if) (("3" (ground) (("3" (hide -16) (("3" (grind :exclude (max scafcount)) nil nil)) nil)) nil)) nil) ("4" (lift-if) (("4" (ground) (("4" (expand fine_entry?) (("4" (ground) (("4" (expand "good_good?") (("4" (lift-if) (("4" (ground) (("1" (inst? :copy? t) (("1" (inst - "span(A(pos!1)(e1(G(nt!1)))) + pos!1" "e2(G(nt!1))") (("1" (grind :exclude scafcount) nil nil)) nil)) nil) ("2" (inst?) (("2" (grind :exclude scafcount) nil nil)) nil) ("3" (inst? :copy? t) (("3" (inst - "pos!1" "e2(G(nt!1))") (("3" (grind :exclude scafcount) nil nil)) nil)) nil) ("4" (inst?) (("4" (grind :exclude scafcount) nil nil)) nil) ("5" (inst?) (("5" (grind :exclude scafcount) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("16" (expand "gfcount" +) (("16" (rewrite scafcount_update) (("16" (hide -5) (("16" (reveal -2) (("16" (lazy-grind :if-match all :exclude (max scafcount)) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals)) shostak) (good_good_tscaffold-1 nil 3804994419 ("" (skeep*) (("" (expand "good_tscaffold?") (("" (skeep*) (("" (inst - i n) (("" (expand good_entry?) (("" (lift-if + :updates? nil) (("" (ground) (("1" (case "i = pos(entry)" "n = nt(entry)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (assert) (("2" (hide -7 -8) (("2" (grind) nil nil)) nil)) nil) ("3" (hide -6 -7) (("3" (grind) nil nil)) nil)) nil) ("2" (case "i = pos(entry)" "n = nt(entry)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (assert) (("2" (forward-chain -) (("2" (grind) nil nil)) nil)) nil) ("3" (assert) (("3" (forward-chain -) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("sigmatopdown" sigmatopdown state_TCC1 0 (state_TCC1-1 nil 3804904050 ("" (grind) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals)) nil (state subtype "sigmatopdown.stack" "(sigmatopdown.push?)")))("sigmatopdown" sigmatopdown state_TCC2 0 (state_TCC1-1 nil 3804730988 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (state subtype "sigmatopdown.pos(sigmatopdown.stack)" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown state_TCC3 0 (state_TCC2-1 nil 3804730988 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (state subtype "sigmatopdown.nt(sigmatopdown.stack)" "non_terminal")))("sigmatopdown" sigmatopdown step_TCC1 0 (step_TCC66-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.stack" "(sigmatopdown.push?)")))("sigmatopdown" sigmatopdown step_TCC2 0 (step_TCC1-1 nil 3804547853 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.cur" "non_terminal")))("sigmatopdown" sigmatopdown step_TCC3 0 (step_TCC10-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.pos" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown step_TCC4 0 (step_TCC3-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "0" "uint64")))("sigmatopdown" sigmatopdown step_TCC5 0 (step_TCC91-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "0" "uint32")))("sigmatopdown" sigmatopdown step_TCC6 0 (step_TCC4-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.good(0, 0)" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC7 0 (step_TCC5-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (skeep*) (("3" (typepred lflag) (("3" (ground) (("1" (inst?) nil nil) ("2" (hide 2) (("2" (grind) nil nil)) nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good(0, 0)]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC8 0 (step_TCC1-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred pos (stack)) (("1" (grind) nil nil)) nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                       count(num_non_terminals)(push?)
                            (St`scaf WITH [(pos!1)(cur) := good(0, 0)](i))) = ((LAMBDA (i: upto(len)):
                       count(num_non_terminals)(push?)(St`scaf(i)))
                      WITH [(pos!1)
                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                  1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                            push?(St`scaf(x!1) WITH [(cur) := good(0, 0)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (ground) (("1" (expand nonempty?) (("1" (expand empty?) (("1" (inst - cur) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (hide -1 3) (("3" (expand count) (("3" (lemma "nonempty_card[below(num_non_terminals)]") (("3" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good(0, 0)]))")))("sigmatopdown" sigmatopdown step_TCC9 0 (step_TCC2-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest "good(0, 0)") (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "good(0, 0)") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good(0, 0)]))")))("sigmatopdown" sigmatopdown step_TCC10 0 (step_TCC83-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good(0, 0)], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good(0, 0)](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC11 0 (step_TCC100-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "0" "uint64")))("sigmatopdown" sigmatopdown step_TCC12 0 (step_TCC8-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.fail(0)" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC13 0 (step_TCC9-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail(0)]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC14 0 (step_TCC6-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred pos (stack)) (("1" (grind) nil nil)) nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                               count(num_non_terminals)(push?)
                                    (St`scaf WITH [(pos!1)(cur) := fail(0)](i))) = ((LAMBDA (i: upto(len)):
                               count(num_non_terminals)(push?)(St`scaf(i)))
                              WITH [(pos!1)
                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                          1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                          push?(St`scaf(x!1) WITH [(cur) := fail(0)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (ground) (("1" (expand nonempty?) (("1" (expand empty?) (("1" (inst - cur) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (hide -1 3) (("3" (expand count) (("3" (lemma "nonempty_card[below(num_non_terminals)]") (("3" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail(0)]))")))("sigmatopdown" sigmatopdown step_TCC15 0 (step_TCC7-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest "fail(0)") (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "fail(0)") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail(0)]))")))("sigmatopdown" sigmatopdown step_TCC16 0 (step_TCC84-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail(0)], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail(0)](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC17 0 (step_TCC16-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.pos" "naturalnumbers.below(sigmatopdown.len)")))("sigmatopdown" sigmatopdown step_TCC18 0 (step_TCC24-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "0" "uint64")))("sigmatopdown" sigmatopdown step_TCC19 0 (step_TCC25-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "0" "uint64")))("sigmatopdown" sigmatopdown step_TCC20 0 (step_TCC11-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "1" "uint32")))("sigmatopdown" sigmatopdown step_TCC21 0 (step_TCC14-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.v" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC22 0 (step_TCC15-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC23 0 (step_TCC12-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                       count(num_non_terminals)(push?)
                                                            (St`scaf WITH [(pos!1)(cur) := v](i))) = ((LAMBDA (i: upto(len)):
                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                      WITH [(pos!1)
                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                  1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                    push?(St`scaf(x!1) WITH [(cur) := v](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (ground) (("1" (expand nonempty?) (("1" (expand empty?) (("1" (inst - cur) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (hide -1 3) (("3" (expand count) (("3" (lemma "nonempty_card[below(num_non_terminals)]") (("3" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (successor const-decl "bool" sigmatopdown nil) (empty? const-decl "bool" sigmatopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil sigmatopdown nil) (good_push_entry? const-decl "bool" sigmatopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatopdown nil) (num_non_terminals const-decl "byte" sigmatopdown nil) (non_terminal type-eq-decl nil sigmatopdown nil) (peg type-decl nil sigmatopdown nil) (lang_spec type-eq-decl nil sigmatopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" sigmatopdown nil) (scaffold type-eq-decl nil sigmatopdown nil) (good_stack? def-decl "bool" sigmatopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil sigmatopdown nil) (fine_scaffold? const-decl "bool" sigmatopdown nil) (good_depth? const-decl "bool" sigmatopdown nil) (fine_stack? def-decl "bool" sigmatopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil) (loop_ready? const-decl "bool" sigmatopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil) (state type-eq-decl nil sigmatopdown nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (pushcount const-decl "uint64" sigmatopdown nil) (scafcount const-decl "uint64" sigmatopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_dec formula-decl nil sigmatopdown nil) (arr type-eq-decl nil arrayCount nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatopdown nil) (rootnt skolem-const-decl "non_terminal" sigmatopdown nil) (start skolem-const-decl "upto(len)" sigmatopdown nil) (s skolem-const-decl "strings(len)" sigmatopdown nil) (G skolem-const-decl "lang_spec" sigmatopdown nil) (v skolem-const-decl "ent" sigmatopdown nil) (pos!1 skolem-const-decl "uint32" sigmatopdown nil) (len skolem-const-decl "uint32" sigmatopdown nil) (good_good_entry? const-decl "bool" sigmatopdown nil) (member const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil) (x!1 skolem-const-decl "upto(len)" sigmatopdown nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (card_remove formula-decl nil finite_sets nil) (count_TCC1 subtype-tcc nil arrayCount nil) (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil) (nonempty? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty_card formula-decl nil finite_sets nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v]))")))("sigmatopdown" sigmatopdown step_TCC24 0 (step_TCC13-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest v) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "stack") (("2" (grind) nil nil)) nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "v") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v]))")))("sigmatopdown" sigmatopdown step_TCC25 0 (step_TCC89-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC26 0 (step_TCC44-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.pos" "naturalnumbers.below(sigmatopdown.len)")))("sigmatopdown" sigmatopdown step_TCC27 0 (step_TCC33-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "0" "uint64")))("sigmatopdown" sigmatopdown step_TCC28 0 (step_TCC34-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "0" "uint64")))("sigmatopdown" sigmatopdown step_TCC29 0 (step_TCC17-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "1" "uint32")))("sigmatopdown" sigmatopdown step_TCC30 0 (step_TCC20-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.v" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC31 0 (step_TCC21-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC32 0 (step_TCC18-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                       count(num_non_terminals)(push?)
                                                            (St`scaf WITH [(pos!1)(cur) := v](i))) = ((LAMBDA (i: upto(len)):
                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                      WITH [(pos!1)
                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                  1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                    push?(St`scaf(x!1) WITH [(cur) := v](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (ground) (("1" (expand nonempty?) (("1" (expand empty?) (("1" (inst - cur) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (hide -1 3) (("3" (expand count) (("3" (lemma "nonempty_card[below(num_non_terminals)]") (("3" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v]))")))("sigmatopdown" sigmatopdown step_TCC33 0 (step_TCC19-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest v) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "stack") (("2" (grind) nil nil)) nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "v") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v]))")))("sigmatopdown" sigmatopdown step_TCC34 0 (step_TCC90-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC35 0 (step_TCC42-1 nil 3804455654 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst - pos!1 n1) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.d1, 1)" "uint64")))("sigmatopdown" sigmatopdown step_TCC36 0 (step_TCC43-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC37 0 (step_TCC55-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC38 0 (step_TCC22-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                               count(num_non_terminals)(push?)
                                                                    (St`scaf WITH [(pos!1)(cur) := fail(1 + d1)](i))) = ((LAMBDA (i: upto(len)):
                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                              WITH [(pos!1)
                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                          1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                                  push?(St`scaf(x!1) WITH [(cur) := fail(1 + d1)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil) ("3" (skeep*) (("3" (use step_TCC35) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -6 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (skeep*) (("4" (use step_TCC35) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count +) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (ground) (("1" (expand nonempty?) (("1" (expand empty?) (("1" (inst - "nt(stack)") (("1" (grind) nil nil) ("2" (assert) (("2" (typepred "nt(stack)") (("2" (expand "good_push_entry?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "count_TCC1") nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (use step_TCC35) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -1) (("3" (expand count) (("3" (use "nonempty_card[below(num_non_terminals)]") (("1" (ground) (("1" (hide -5 5) (("1" (grind) nil nil)) nil)) nil) ("2" (rewrite "count_TCC1") nil nil)) nil)) nil)) nil) ("4" (hide -1 3) (("4" (grind) nil nil)) nil) ("5" (use step_TCC35) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]))")))("sigmatopdown" sigmatopdown step_TCC39 0 (step_TCC23-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest "fail(1 + d1)") (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (expand nice_entry?) (("2" (propax) nil nil)) nil)) nil) ("3" (typepred "stack") (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "fail(1 + d1)") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]))")))("sigmatopdown" sigmatopdown step_TCC40 0 (step_TCC95-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, sigmatopdown.d1))], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, sigmatopdown.d1))](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC41 0 (step_TCC30-1 nil 3804455654 ("" (skeep*) (("" (typepred "St`scaf(pos!1)(n1)") (("" (grind) nil nil)) nil)) nil) nil nil (step subtype "(number_fields.+)(sigmatopdown.pos, sigmatopdown.sp)" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown step_TCC42 0 (step_TCC75-1 nil 3804455654 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst-cp - pos!1 n1) (("" (inst - pos!1+sp n2) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1 + sp)(n2)) = d2") (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) (("1" (expand max) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2))" "uint64")))("sigmatopdown" sigmatopdown step_TCC43 0 (step_TCC56-1 nil 3804455654 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (expand nice_entry?) (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC44 0 (step_TCC63-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC45 0 (step_TCC31-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (rewrite scafcount_update) (("1" (grind :exclude scafcount) nil nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))]))")))("sigmatopdown" sigmatopdown step_TCC46 0 (step_TCC32-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest "fail(1 + max(d1, d2))") (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (expand nice_entry?) (("2" (propax) nil nil)) nil)) nil) ("3" (typepred "stack") (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "fail(1 + max(d1, d2))") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))]))")))("sigmatopdown" sigmatopdown step_TCC47 0 (step_TCC117-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC48 0 (step_TCC64-1 nil 3804455654 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst-cp - pos!1 n1) (("" (inst - pos!1+sp n2) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1 + sp)(n2)) = d2") (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) (("1" (expand max) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2))" "uint64")))("sigmatopdown" sigmatopdown step_TCC49 0 (step_TCC41-1 nil 3804455654 ("" (skeep*) (("" (typepred "St`scaf(pos!1)(n1)") (("" (typepred "St`scaf(pos!1 + sp)(n2)") (("" (typepred len) (("" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "(number_fields.+)(sigmatopdown.sp, sigmatopdown.sp2)" "uint32")))("sigmatopdown" sigmatopdown step_TCC50 0 (step_TCC76-1 nil 3804455654 ("" (skeep*) (("" (typepred "St`scaf(pos!1)(n1)") (("" (typepred "St`scaf(pos!1 + sp)(n2)") (("" (grind) nil nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), (number_fields.+)(sigmatopdown.sp, sigmatopdown.sp2))" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC51 0 (step_TCC83-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (ground) (("1" (typepred "St`scaf(pos!1 + sp)(n2)") (("1" (grind) nil nil)) nil) ("2" (expand good_good?) (("2" (grind :exclude (max gfcount)) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "St`scaf(pos!1 + sp)(n2)") (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), (number_fields.+)(sigmatopdown.sp, sigmatopdown.sp2))]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC52 0 (step_TCC39-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                                       count(num_non_terminals)(push?)
                                                                            (St`scaf WITH [(pos!1)(cur) := good(1 + max(d1, d2), sp2 + sp)](i))) = ((LAMBDA (i: upto(len)):
                                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                                      WITH [(pos!1)
                                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                  1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                                                push?(St`scaf(x!1) WITH [(cur) := good(1 + max(d1, d2), sp2 + sp)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "St`scaf(pos!1 + sp)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (skeep*) (("3" (use step_TCC49) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide -6 2) (("4" (typepred "St`scaf(pos!1)(n1)") (("4" (typepred "St`scaf(pos!1 + sp)(n2)") (("4" (skeep*) (("4" (use step_TCC48) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (skeep*) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1 + sp)(n2)") (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (skeep*) (("4" (use step_TCC49) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (skeep*) (("5" (use step_TCC48) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil) ("3" (hide 2) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1 + sp)(n2)") (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (use step_TCC49) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (hide 2) (("5" (use step_TCC48) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -1 3) (("3" (expand count) (("3" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil) ("4" (hide -1 3) (("4" (typepred "St`scaf(pos!1)(n1)") (("4" (typepred "St`scaf(pos!1 + sp)(n2)") (("4" (grind) nil nil)) nil)) nil)) nil) ("5" (hide -1 3) (("5" (use step_TCC49) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("6" (hide -1 3) (("6" (use step_TCC48) (("6" (ground) (("6" (inst?) (("6" (inst?) (("6" (inst?) (("6" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), (number_fields.+)(sigmatopdown.sp, sigmatopdown.sp2))]))")))("sigmatopdown" sigmatopdown step_TCC53 0 (step_TCC40-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest "good(1 + max(d1, d2), sp2 + sp)") (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "stack") (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "St`scaf(pos!1 + sp)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("3" (use step_TCC52) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "good(1 + max(d1, d2), sp2 + sp)") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "St`scaf(pos!1 + sp)(n2)") (("2" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), (number_fields.+)(sigmatopdown.sp, sigmatopdown.sp2))]))")))("sigmatopdown" sigmatopdown step_TCC54 0 (step_TCC81-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), (number_fields.+)(sigmatopdown.sp2, sigmatopdown.sp))], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), (number_fields.+)(sigmatopdown.sp2, sigmatopdown.sp))](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC55 0 (step_TCC45-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.St`stack" "(sigmatopdown.nice_entry?(sigmatopdown.len, (number_fields.+)(sigmatopdown.pos, sigmatopdown.sp)))")))("sigmatopdown" sigmatopdown step_TCC56 0 (step_TCC46-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (typepred "St`scaf(pos!1 + sp)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (ground) (("1" (grind) nil nil) ("2" (hide -5) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (hide -1) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (hide -2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [((number_fields.+)(sigmatopdown.pos, sigmatopdown.sp))(sigmatopdown.n2) := sigmatopdown.St`stack]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC57 0 (step_TCC49-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred depth) (("1" (expand good_depth?) (("1" (expand pushcount) (("1" (use scafcount_max) (("1" (assert) (("1" (use exp2_lt :subst (n 41 m 64)) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "good_depth?") (("2" (expand pushcount) (("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude (max scafcount)) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "(number_fields.+)(sigmatopdown.St`depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [((number_fields.+)(sigmatopdown.pos, sigmatopdown.sp))(sigmatopdown.n2) := sigmatopdown.St`stack]))")))("sigmatopdown" sigmatopdown step_TCC58 0 (step_TCC50-1 nil 3804455654 ("" (skeep*) (("" (typepred "St`scaf(pos!1)(n1)") (("" (typepred "St`scaf(pos!1 + sp)(n2)") (("" (typepred len) (("" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "(number_fields.+)(sigmatopdown.pos, sigmatopdown.sp)" "uint32")))("sigmatopdown" sigmatopdown step_TCC59 0 (step_TCC65-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil)) nil) ("2" (lemma good_mem_stack) (("2" (expand good_stack? +) (("2" (ground) (("1" (hide -1) (("1" (grind) nil nil)) nil) ("2" (inst - G "depth" len scaf "push(pos!1 + sp, n2)" "stack" stack) (("1" (ground) (("1" (hide 2) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil)) nil)) nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil) ("3" (hide 2) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (grind) nil nil)) nil)) nil) ("4" (typepred "St`scaf(pos!1)(n1)") (("4" (typepred len) (("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand fine_stack? +) (("3" (ground) (("1" (lemma mem_mem_stack) (("1" (inst - G depth len scaf _ _ _ _) (("1" (inst - "push(pos!1 + sp, n2)" "push(pos!1 + sp, n2)" stack stack) (("1" (ground) (("1" (use mem_stack_push) (("1" (ground) nil nil)) nil) ("2" (typepred "St`scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos!1)(n1)") (("3" (grind) nil nil)) nil) ("4" (use mem_stack_push) (("4" (ground) nil nil)) nil) ("5" (typepred "St`scaf(pos!1)(n1)") (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos!1)(n1)") (("3" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (use fine_mem_stack :subst (len len entry "push(pos!1 + sp, n2)")) (("1" (ground) (("1" (hide 2) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil)) nil)) nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos!1)(n1)") (("3" (grind) nil nil)) nil) ("4" (typepred "St`scaf(pos!1)(n1)") (("4" (typepred len) (("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.push((number_fields.+)(sigmatopdown.pos, sigmatopdown.sp), sigmatopdown.n2)" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.+)(sigmatopdown.St`depth, 1), sigmatopdown.St`scaf WITH [((number_fields.+)(sigmatopdown.pos, sigmatopdown.sp))(sigmatopdown.n2) := sigmatopdown.St`stack]))")))("sigmatopdown" sigmatopdown step_TCC60 0 (step_TCC82-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (skeep*) (("2" (lift-if) (("2" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.n2 = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [((number_fields.+)(sigmatopdown.pos, sigmatopdown.sp))(sigmatopdown.n2) := sigmatopdown.St`stack], (number_fields.+)(sigmatopdown.pos, sigmatopdown.sp), sigmatopdown.n2)) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [((number_fields.+)(sigmatopdown.pos, sigmatopdown.sp))(sigmatopdown.n2) := sigmatopdown.St`stack](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC61 0 (step_TCC28-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.loop" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC62 0 (step_TCC29-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (typepred "St`scaf(pos!1 + sp)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -5) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC63 0 (step_TCC26-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind :exclude sigma) nil nil)) nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)
                                                                                    (St`scaf WITH [(pos!1)(cur) := loop](i))) = ((LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                                              WITH [(pos!1)
                                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                          1])") (("1" (hide -1) (("1" (replace -1 :hide? t) (("1" (assert) nil nil)) nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality :hide? t) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                                                              push?(St`scaf(x!1) WITH [(cur) := loop](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil) ("3" (expand count) (("3" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC64 0 (step_TCC27-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" loop) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`stack") (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind :exclude mem_stack) nil nil) ("2" (hide -1) (("2" (replace -8) (("2" (replace -9) (("2" (replace -5) (("2" (case-replace "push(pos(St`stack), nt(St`stack)) = St`stack") (("1" (case-replace "St`scaf(pos(St`stack))(nt(St`stack)) = rest") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil) ("2" (apply-extensionality 1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil) ("3" (lemma fine_mem_stack) (("3" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" loop) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand "fine_stack?") (("4" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (case-replace "St`scaf(pos(stack))(nt(stack)) = rest") (("1" (case-replace "push(pos!1, cur) = St`stack") (("1" (assert) nil nil) ("2" (apply-extensionality 1) (("2" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC65 0 (step_TCC103-1 nil 3804706560 ("" (skeep*) (("" (typepred stack) (("" (grind :exclude mem_stack?) nil nil)) nil)) nil) nil nil (step subtype "booleans.TRUE" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC66 0 (step_TCC95-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.stack" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC67 0 (step_TCC77-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC68 0 (step_TCC78-1 nil 3804455654 ("" (skeep*) (("" (split) (("1" (typepred stack) (("1" (typepred depth) (("1" (expand good_depth?) (("1" (expand pushcount) (("1" (use scafcount_max) (("1" (assert) (("1" (use exp2_lt :subst (n 41 m 64)) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "good_depth?") (("2" (expand pushcount) (("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC69 0 (step_TCC94-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (expand "good_stack?" +) (("2" (ground) (("1" (grind) nil nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth" len scaf "push(pos!1, n1)" "stack" stack) (("1" (ground) (("1" (grind) nil nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand fine_stack? +) (("3" (ground) (("1" (lemma mem_mem_stack) (("1" (inst - G depth len scaf _ _ _ _) (("1" (inst - "push(pos!1, n1)" "push(pos!1, n1)" stack stack) (("1" (ground) (("1" (hide -2) (("1" (use mem_stack_push) (("1" (ground) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil) ("4" (use mem_stack_push) (("4" (ground) nil nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (use fine_mem_stack :subst (len len entry "push(pos!1, n1)" u stack stack stack)) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.push(sigmatopdown.pos, sigmatopdown.n1)" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.+)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC70 0 (step_TCC104-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (skeep*) (("2" (lift-if) (("2" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.n1 = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack], sigmatopdown.pos, sigmatopdown.n1)) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC71 0 (step_TCC37-1 nil 3804455654 ("" (grind) nil nil) nil nil (step subtype "sigmatopdown.loop" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC72 0 (step_TCC38-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC73 0 (step_TCC35-1 nil 3804455654 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC74 0 (step_TCC36-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" loop) (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u loop stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC75 0 (step_TCC98-1 nil 3804455654 ("" (skeep*) (("" (typepred stack) (("" (expand good_stack?) (("" (ground) (("1" (grind) nil nil) ("2" (grind :exclude (good_stack? fine_stack? mem_stack?)) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "booleans.TRUE" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC76 0 (step_TCC84-1 nil 3804455654 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst-cp - pos!1 n1) (("" (inst - pos!1 n2) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n2)) = d2") (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals)) nil (step subtype "(number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1)" "uint64")))("sigmatopdown" sigmatopdown step_TCC77 0 (step_TCC92-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.fail((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1))" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC78 0 (step_TCC93-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1))]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC79 0 (step_TCC53-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)
                                                                                    (St`scaf WITH [(pos!1)(cur) := fail(1 + max(d1, d2))](i))) = ((LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                                              WITH [(pos!1)
                                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                          1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                                                              push?(St`scaf(x!1) WITH [(cur) := fail(1 + max(d1, d2))](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil)) nil) ("3" (skeep*) (("3" (use step_TCC76) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -6 2) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1)(n2)") (("3" (skeep*) (("3" (use step_TCC77) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1)(n2)") (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (skeep*) (("4" (use step_TCC76) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil) ("3" (hide 2) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1)(n2)") (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (use step_TCC76) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand count) (("3" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil) ("4" (use step_TCC77) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (hide -1 3) (("5" (use step_TCC76) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1))]))")))("sigmatopdown" sigmatopdown step_TCC80 0 (step_TCC54-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest "fail(1 + max(d1, d2))") (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "stack") (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "St`scaf(pos!1)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "fail(1 + max(d1, d2))") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "St`scaf(pos!1)(n2)") (("2" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1))]))")))("sigmatopdown" sigmatopdown step_TCC81 0 (step_TCC96-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC82 0 (step_TCC101-1 nil 3804455654 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst-cp - pos!1 n1) (("" (inst - pos!1 n2) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n2)) = d2") (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals)) nil (step subtype "(number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1)" "uint64")))("sigmatopdown" sigmatopdown step_TCC83 0 (step_TCC102-1 nil 3804455654 ("" (skeep*) (("" (typepred "St`scaf(pos!1)(n1)") (("" (typepred "St`scaf(pos!1)(n2)") (("" (grind) nil nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.good((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1), sigmatopdown.sp)" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC84 0 (step_TCC84-1 nil 3808434333 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (typepred "scaf(pos!1)(n1)") (("2" (typepred "scaf(pos!1)(n2)") (("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (typepred "scaf(pos!1)(n1)") (("2" (typepred "scaf(pos!1)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1), sigmatopdown.sp)]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC85 0 (step_TCC57-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)
                                                                                            (St`scaf WITH [(pos!1)(cur) := good(1 + max(d1, d2), sp)](i))) = ((LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                                                      WITH [(pos!1)
                                                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                                  1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                                                                            push?(St`scaf(x!1) WITH [(cur) := good(1 + max(d1, d2), sp)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "scaf(pos!1)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (skeep*) (("3" (use step_TCC82) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -6 2) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1)(n2)") (("3" (skeep*) (("3" (use step_TCC83) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1)(n2)") (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (skeep*) (("4" (use step_TCC82) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil) ("3" (hide 2) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1)(n2)") (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (use step_TCC82) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand count) (("3" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil) ("4" (use step_TCC83) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (hide -1 3) (("5" (use step_TCC82) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1), sigmatopdown.sp)]))")))("sigmatopdown" sigmatopdown step_TCC86 0 (step_TCC58-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest "good(1 + max(d1, d2), sp)") (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "stack") (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "St`scaf(pos!1)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("3" (use step_TCC85) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "good(1 + max(d1, d2), sp)") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "St`scaf(pos!1)(n2)") (("2" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1), sigmatopdown.sp)]))")))("sigmatopdown" sigmatopdown step_TCC87 0 (step_TCC99-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), sigmatopdown.sp)], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), sigmatopdown.sp)](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC88 0 (step_TCC91-1 nil 3804706560 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.stack" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC89 0 (step_TCC111-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n2) := sigmatopdown.stack]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC90 0 (step_TCC112-1 nil 3804455654 ("" (skeep*) (("" (split) (("1" (typepred stack) (("1" (typepred depth) (("1" (expand good_depth?) (("1" (expand pushcount) (("1" (use scafcount_max) (("1" (assert) (("1" (use exp2_lt :subst (n 41 m 64)) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "good_depth?") (("2" (expand pushcount) (("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n2) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC91 0 (step_TCC78-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (expand "good_stack?" +) (("2" (ground) (("1" (grind) nil nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth" len scaf "push(pos!1, n2)" "stack" stack) (("1" (ground) (("1" (grind) nil nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand fine_stack? +) (("3" (ground) (("1" (lemma mem_mem_stack) (("1" (inst - G depth len scaf _ _ _ _) (("1" (inst - "push(pos!1, n2)" "push(pos!1, n2)" stack stack) (("1" (ground) (("1" (hide -2) (("1" (use mem_stack_push) (("1" (ground) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil) ("4" (use mem_stack_push) (("4" (ground) nil nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (use fine_mem_stack :subst (len len entry "push(pos!1, n2)" u stack stack stack)) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.push(sigmatopdown.pos, sigmatopdown.n2)" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.+)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n2) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC92 0 (step_TCC119-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (skeep*) (("2" (lift-if) (("2" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.n2 = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n2) := sigmatopdown.stack], sigmatopdown.pos, sigmatopdown.n2)) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n2) := sigmatopdown.stack](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC93 0 (step_TCC59-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.loop" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC94 0 (step_TCC60-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC95 0 (step_TCC69-1 nil 3804455654 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC96 0 (step_TCC70-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" loop) (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u loop stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC97 0 (step_TCC118-1 nil 3804706560 ("" (skeep*) (("" (typepred stack) (("" (expand good_stack?) (("" (ground) (("1" (grind) nil nil) ("2" (grind :exclude (good_stack? fine_stack? mem_stack?)) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "booleans.TRUE" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC98 0 (step_TCC109-1 nil 3804455654 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst - pos!1 n1) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.d1, 1)" "uint64")))("sigmatopdown" sigmatopdown step_TCC99 0 (step_TCC110-1 nil 3804455654 ("" (skeep*) (("" (typepred "St`scaf(pos!1)(n1)") (("" (grind) nil nil)) nil)) nil) nil nil (step subtype "sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), sigmatopdown.sp)" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC100 0 (step_TCC99-1 nil 3804991042 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (ground) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil)) nil) ("2" (expand good_good?) (("2" (grind :exclude (max gfcount)) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), sigmatopdown.sp)]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC101 0 (step_TCC61-1 nil 3804455654 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred "scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), sigmatopdown.sp)]))")))("sigmatopdown" sigmatopdown step_TCC102 0 (step_TCC62-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" "good(1 + d1, sp)") (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u " good(1 + d1, sp)" stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), sigmatopdown.sp)]))")))("sigmatopdown" sigmatopdown step_TCC103 0 (step_TCC116-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, sigmatopdown.d1), sigmatopdown.sp)], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, sigmatopdown.d1), sigmatopdown.sp)](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC104 0 (step_TCC112-1 nil 3804706560 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.stack" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC105 0 (step_TCC92-1 nil 3804706560 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC106 0 (step_TCC93-1 nil 3804706560 ("" (skeep*) (("" (split) (("1" (typepred stack) (("1" (typepred depth) (("1" (expand good_depth?) (("1" (expand pushcount) (("1" (use scafcount_max) (("1" (assert) (("1" (use exp2_lt :subst (n 41 m 64)) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "good_depth?") (("2" (expand pushcount) (("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC107 0 (step_TCC94-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (expand "good_stack?" +) (("2" (ground) (("1" (grind) nil nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth" len scaf "push(pos!1, n1)" "stack" stack) (("1" (ground) (("1" (grind) nil nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand fine_stack? +) (("3" (ground) (("1" (lemma mem_mem_stack) (("1" (inst - G depth len scaf _ _ _ _) (("1" (inst - "push(pos!1, n1)" "push(pos!1, n1)" stack stack) (("1" (ground) (("1" (hide -2) (("1" (use mem_stack_push) (("1" (ground) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil) ("4" (use mem_stack_push) (("4" (ground) nil nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (use fine_mem_stack :subst (len len entry "push(pos!1, n1)" u stack stack stack)) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.push(sigmatopdown.pos, sigmatopdown.n1)" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.+)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC108 0 (step_TCC125-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (skeep*) (("2" (lift-if) (("2" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.n1 = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack], sigmatopdown.pos, sigmatopdown.n1)) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC109 0 (step_TCC71-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.loop" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC110 0 (step_TCC72-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC111 0 (step_TCC85-1 nil 3804455654 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC112 0 (step_TCC86-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" loop) (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u loop stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC113 0 (step_TCC126-1 nil 3804706560 ("" (skeep*) (("" (typepred stack) (("" (expand good_stack?) (("" (ground) (("1" (grind) nil nil) ("2" (grind :exclude (good_stack? fine_stack? mem_stack?)) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "booleans.TRUE" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC114 0 (step_TCC113-1 nil 3804991042 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst - pos!1 n1) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.d1, 1)" "uint64")))("sigmatopdown" sigmatopdown step_TCC115 0 (step_TCC114-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC116 0 (step_TCC115-1 nil 3804991042 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC117 0 (step_TCC73-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)
                                                                                    (St`scaf WITH [(pos!1)(cur) := fail(1 + d1)](i))) = ((LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                                              WITH [(pos!1)
                                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                          1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                                                              push?(St`scaf(x!1) WITH [(cur) := fail(1 + d1)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil) ("3" (skeep*) (("3" (use step_TCC114) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -6 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (skeep*) (("4" (use step_TCC114) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count +) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (ground) (("1" (expand nonempty?) (("1" (expand empty?) (("1" (inst - "nt(stack)") (("1" (grind) nil nil) ("2" (assert) (("2" (typepred "nt(stack)") (("2" (expand "good_push_entry?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "count_TCC1") nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (use step_TCC114) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -1) (("3" (expand count) (("3" (use "nonempty_card[below(num_non_terminals)]") (("1" (ground) (("1" (hide -5 5) (("1" (grind) nil nil)) nil)) nil) ("2" (rewrite "count_TCC1") nil nil)) nil)) nil)) nil) ("4" (hide -1 3) (("4" (grind) nil nil)) nil) ("5" (use step_TCC114) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]))")))("sigmatopdown" sigmatopdown step_TCC118 0 (step_TCC74-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" "fail(1 + d1)") (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u "fail(1 + d1)" stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]))")))("sigmatopdown" sigmatopdown step_TCC119 0 (step_TCC127-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, sigmatopdown.d1))], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, sigmatopdown.d1))](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC120 0 (step_TCC119-1 nil 3804991042 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst - pos!1 n1) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.d1, 1)" "uint64")))("sigmatopdown" sigmatopdown step_TCC121 0 (step_TCC120-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil (step subtype "0" "uint32")))("sigmatopdown" sigmatopdown step_TCC122 0 (step_TCC121-1 nil 3804991042 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC123 0 (step_TCC122-1 nil 3804991042 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (ground) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil)) nil) ("2" (expand good_good?) (("2" (grind :exclude (max gfcount)) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC124 0 (step_TCC107-1 nil 3804455654 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred "scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)]))")))("sigmatopdown" sigmatopdown step_TCC125 0 (step_TCC108-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" "good(1 + d1, 0)") (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u " good(1 + d1, 0)" stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)]))")))("sigmatopdown" sigmatopdown step_TCC126 0 (step_TCC128-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, sigmatopdown.d1), 0)], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, sigmatopdown.d1), 0)](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC127 0 (step_TCC133-1 nil 3804706560 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.stack" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC128 0 (step_TCC113-1 nil 3804706560 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC129 0 (step_TCC114-1 nil 3804706560 ("" (skeep*) (("" (split) (("1" (typepred stack) (("1" (typepred depth) (("1" (expand good_depth?) (("1" (expand pushcount) (("1" (use scafcount_max) (("1" (assert) (("1" (use exp2_lt :subst (n 41 m 64)) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "good_depth?") (("2" (expand pushcount) (("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC130 0 (step_TCC115-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (expand "good_stack?" +) (("2" (ground) (("1" (grind) nil nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth" len scaf "push(pos!1, n1)" "stack" stack) (("1" (ground) (("1" (grind) nil nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand fine_stack? +) (("3" (ground) (("1" (lemma mem_mem_stack) (("1" (inst - G depth len scaf _ _ _ _) (("1" (inst - "push(pos!1, n1)" "push(pos!1, n1)" stack stack) (("1" (ground) (("1" (hide -2) (("1" (use mem_stack_push) (("1" (ground) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil) ("4" (use mem_stack_push) (("4" (ground) nil nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (use fine_mem_stack :subst (len len entry "push(pos!1, n1)" u stack stack stack)) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.push(sigmatopdown.pos, sigmatopdown.n1)" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.+)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC131 0 (step_TCC137-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (skeep*) (("2" (lift-if) (("2" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.n1 = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack], sigmatopdown.pos, sigmatopdown.n1)) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC132 0 (step_TCC87-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.loop" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC133 0 (step_TCC88-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC134 0 (step_TCC103-1 nil 3804455654 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC135 0 (step_TCC104-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" loop) (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u loop stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC136 0 (step_TCC138-1 nil 3804706560 ("" (skeep*) (("" (typepred stack) (("" (expand good_stack?) (("" (ground) (("1" (grind) nil nil) ("2" (grind :exclude (good_stack? fine_stack? mem_stack?)) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "booleans.TRUE" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC137 0 (step_TCC136-1 nil 3804991042 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst - pos!1 n1) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.d1, 1)" "uint64")))("sigmatopdown" sigmatopdown step_TCC138 0 (step_TCC137-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil (step subtype "0" "uint32")))("sigmatopdown" sigmatopdown step_TCC139 0 (step_TCC138-1 nil 3804991042 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC140 0 (step_TCC139-1 nil 3804991042 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (ground) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil)) nil) ("2" (expand good_good?) (("2" (grind :exclude (max gfcount)) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand nice_entry?) (("2" (expand good_good_entry?) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC141 0 (step_TCC110-1 nil 3804706560 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred "scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)]))")))("sigmatopdown" sigmatopdown step_TCC142 0 (step_TCC111-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" "good(1 + d1, 0)") (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u " good(1 + d1, 0)" stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)]))")))("sigmatopdown" sigmatopdown step_TCC143 0 (step_TCC139-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, sigmatopdown.d1), 0)], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, sigmatopdown.d1), 0)](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC144 0 (step_TCC143-1 nil 3804991042 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst - pos!1 n1) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.d1, 1)" "uint64")))("sigmatopdown" sigmatopdown step_TCC145 0 (step_TCC144-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC146 0 (step_TCC145-1 nil 3804991042 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC147 0 (step_TCC123-1 nil 3804706560 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)
                                                                                            (St`scaf WITH [(pos!1)(cur) := fail(1 + d1)](i))) = ((LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                                                      WITH [(pos!1)
                                                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                                  1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                                                                            push?(St`scaf(x!1) WITH [(cur) := fail(1 + d1)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil) ("3" (skeep*) (("3" (use step_TCC144) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -6 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (skeep*) (("4" (use step_TCC144) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count +) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (ground) (("1" (expand nonempty?) (("1" (expand empty?) (("1" (inst - "nt(stack)") (("1" (grind) nil nil) ("2" (assert) (("2" (typepred "nt(stack)") (("2" (expand "good_push_entry?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "count_TCC1") nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (use step_TCC144) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -1) (("3" (expand count) (("3" (use "nonempty_card[below(num_non_terminals)]") (("1" (ground) (("1" (hide -5 5) (("1" (grind) nil nil)) nil)) nil) ("2" (rewrite "count_TCC1") nil nil)) nil)) nil)) nil) ("4" (hide -1 3) (("4" (grind) nil nil)) nil) ("5" (use step_TCC144) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]))")))("sigmatopdown" sigmatopdown step_TCC148 0 (step_TCC124-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" "fail(1 + d1)") (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u "fail(1 + d1)" stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]))")))("sigmatopdown" sigmatopdown step_TCC149 0 (step_TCC140-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, sigmatopdown.d1))], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, sigmatopdown.d1))](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC150 0 (step_TCC134-1 nil 3804904050 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.stack" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC151 0 (step_TCC134-1 nil 3804706560 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC152 0 (step_TCC135-1 nil 3804706560 ("" (skeep*) (("" (split) (("1" (typepred stack) (("1" (typepred depth) (("1" (expand good_depth?) (("1" (expand pushcount) (("1" (use scafcount_max) (("1" (assert) (("1" (use exp2_lt :subst (n 41 m 64)) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "good_depth?") (("2" (expand pushcount) (("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC153 0 (step_TCC136-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (expand "good_stack?" +) (("2" (ground) (("1" (grind) nil nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth" len scaf "push(pos!1, n1)" "stack" stack) (("1" (ground) (("1" (grind) nil nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand fine_stack? +) (("3" (ground) (("1" (lemma mem_mem_stack) (("1" (inst - G depth len scaf _ _ _ _) (("1" (inst - "push(pos!1, n1)" "push(pos!1, n1)" stack stack) (("1" (ground) (("1" (hide -2) (("1" (use mem_stack_push) (("1" (ground) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil) ("4" (use mem_stack_push) (("4" (ground) nil nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (use fine_mem_stack :subst (len len entry "push(pos!1, n1)" u stack stack stack)) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.push(sigmatopdown.pos, sigmatopdown.n1)" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.+)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC154 0 (step_TCC137-1 nil 3804730988 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (skeep*) (("2" (lift-if) (("2" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.n1 = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack], sigmatopdown.pos, sigmatopdown.n1)) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC155 0 (step_TCC105-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.loop" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC156 0 (step_TCC106-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC157 0 (step_TCC131-1 nil 3804706560 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC158 0 (step_TCC132-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" loop) (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u loop stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC159 0 (step_TCC142-1 nil 3804730988 ("" (skeep*) (("" (typepred stack) (("" (expand good_stack?) (("" (ground) (("1" (grind) nil nil) ("2" (grind :exclude (good_stack? fine_stack? mem_stack?)) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "booleans.TRUE" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown size_TCC1 0 (size_TCC1-1 nil 3808434333 ("" (subtype-tcc) nil nil) nil nil (size subtype "sigmatopdown.len" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown size_TCC2 0 (size_TCC2-1 nil 3808434333 ("" (skeep*) (("" (typepred "St`depth") (("" (expand good_depth?) (("" (expand pushcount) (("" (use sigma_max) (("" (grind :exclude exp2) nil nil)) nil)) nil)) nil)) nil)) nil) ((count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) nil (size subtype "(number_fields.-)((number_fields.*(((number_fields.+)(sigmatopdown.len, 1)), sigmatopdown.num_non_terminals)), sigmatopdown.St`depth)" "nat")))("sigmatopdown" sigmatopdown endstate_TCC1 0 (endstate_TCC1-1 nil 3804455654 ("" (skeep*) (("" (typepred "st`stack") (("" (grind) nil nil)) nil)) nil) nil nil (endstate subtype "sigmatopdown.st`stack" "(sigmatopdown.push?)")))("sigmatopdown" sigmatopdown parse_TCC1 0 (parse_TCC2-1 nil 3804455654 ("" (use well_founded_le) (("" (grind :exclude <) nil nil)) nil) nil nil (parse well-founded "restrict[[ordstruct_adt.ordstruct, ordstruct_adt.ordstruct], [ordinal, ordinal], booleans.bool].restrict(ordinals.<)" "nil")))("sigmatopdown" sigmatopdown parse_TCC2 0 (parse_TCC3-1 nil 3804455654 ("" (skeep*) (("" (typepred "St`stack") (("" (grind) nil nil)) nil)) nil) nil nil (parse subtype "sigmatopdown.St" "sigmatopdown.endstate(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s, sigmatopdown.start, sigmatopdown.root)")))("sigmatopdown" sigmatopdown parse_TCC3 0 (parse_TCC4-1 nil 3804455654 ("" (skeep*) (("" (expand restrict) (("" (expand size) (("" (rewrite lex2_lt) (("1" (flatten) (("1" (hide 3) (("1" (typepred "St`stack") (("1" (apply (then (expand step) (lift-if) (ground))) (("1" (hide 1) (("1" (grind) nil nil)) nil) ("2" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("3" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("4" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("5" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("6" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("7" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("8" (grind :defs nil) (("8" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil) ("9" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("10" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("11" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("12" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (hide 2) (("2" (expand nice_entry?) (("2" (expand "good_good_entry?") (("2" (typepred "step(len, G, s, start, root)(St)`scaf") (("2" (expand step) (("2" (expand fine_scaffold?) (("2" (ground) (("2" (hide -1) (("2" (expand good_tscaffold?) (("2" (inst - "pos(St`stack)" "nt(St`stack)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("13" (reveal 1) (("13" (hide 2) (("13" (ground) (("1" (expand step) (("1" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("2" (expand step) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("14" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("15" (reveal 1) (("15" (hide 2) (("15" (ground) (("1" (expand step) (("1" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("2" (expand step) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("16" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("17" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("18" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (hide 2) (("2" (typepred "step(len, G, s, start, root)(St)`scaf") (("2" (expand fine_scaffold?) (("2" (ground) (("2" (hide -1) (("2" (expand good_tscaffold?) (("2" (inst - "pos(St`stack)" "nt(St`stack)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("19" (reveal 1) (("19" (hide 2) (("19" (ground) (("1" (expand step) (("1" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("2" (expand step) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("20" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("21" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (typepred "step(len, G, s, start, root)(St)`scaf") (("2" (expand fine_scaffold?) (("2" (ground) (("2" (hide -1) (("2" (expand good_tscaffold?) (("2" (inst - "pos(St`stack)" "nt(St`stack)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("22" (reveal 1) (("22" (hide 2) (("22" (expand step) (("22" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("23" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("24" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("25" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("26" (reveal 1) (("26" (hide 2) (("26" (expand step) (("26" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("27" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("28" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("29" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("30" (reveal 1) (("30" (hide 2) (("30" (expand step) (("30" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("31" (grind :defs nil) (("31" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "St`depth") (("2" (expand good_depth?) (("2" (expand pushcount) (("2" (use sigma_max) (("2" (ground) nil nil)) nil)) nil)) nil)) nil) ("3" (typepred "step(len, G, s, start, root)(St)`depth") (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (use sigma_max) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) nil (parse termination "sigmatopdown.parse(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s, sigmatopdown.start, sigmatopdown.root)(sigmatopdown.step(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s, sigmatopdown.start, sigmatopdown.root)(sigmatopdown.St))" "nil")))("sigmatopdown" sigmatopdown doparse_TCC1 0 (doparse_TCC3-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (doparse subtype "sigmatopdown.pend" "[non_terminal -> (sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.i))]")))("sigmatopdown" sigmatopdown doparse_TCC2 0 (doparse_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (doparse subtype "0" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown doparse_TCC3 0 (doparse_TCC3-1 nil 3808434333 ("" (subtype-tcc) nil nil) nil nil (doparse subtype "0" "uint32")))("sigmatopdown" sigmatopdown doparse_TCC4 0 (doparse_TCC4-1 nil 3804547853 ("" (grind) nil nil) nil nil (doparse subtype "sigmatopdown.num_non_terminals" "uint8")))("sigmatopdown" sigmatopdown doparse_TCC5 0 (doparse_TCC4-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (doparse subtype "sigmatopdown.push(0, sigmatopdown.num_non_terminals)" "(sigmatopdown.nice_entry?(sigmatopdown.len, 0))")))("sigmatopdown" sigmatopdown doparse_TCC6 0 (doparse_TCC5-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((count const-decl "upto(len)" arrayCount nil)) nil (doparse subtype "(LAMBDA (i: naturalnumbers.upto(sigmatopdown.len)): sigmatopdown.pend) WITH [(0)(sigmatopdown.n) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(0, sigmatopdown.n))")))("sigmatopdown" sigmatopdown doparse_TCC7 0 (doparse_TCC1-1 nil 3804455654 ("" (skeep*) (("" (grind :exclude good_depth?) (("" (expand good_depth?) (("" (expand pushcount) (("" (rewrite scafcount_update) (("" (use "empty_card[below(255)]") (("1" (ground) (("1" (replace -2 :hide? t) (("1" (rewrite "reals@sigma[upto(len)].sigma_zero") nil nil)) nil)) nil) ("2" (hide 2) (("2" (inst + 255 "id[below(255)]") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_zero formula-decl nil sigma reals) (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (doparse subtype "1" "(sigmatopdown.good_depth?(sigmatopdown.len, (LAMBDA (i: naturalnumbers.upto(sigmatopdown.len)): sigmatopdown.pend) WITH [(0)(sigmatopdown.n) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)]))")))("sigmatopdown" sigmatopdown doparse_TCC8 0 (doparse_TCC6-1 nil 3804534082 ("" (grind) nil nil) nil nil (doparse subtype "sigmatopdown.push(0, sigmatopdown.n)" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, 1, (LAMBDA (i: naturalnumbers.upto(sigmatopdown.len)): sigmatopdown.pend) WITH [(0)(sigmatopdown.n) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)]))")))("sigmatopdown" sigmatopdown doparse_TCC9 0 (doparse_TCC8-1 nil 3804730988 ("" (subtype-tcc) nil nil) nil nil (doparse subtype "booleans.FALSE" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.n = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, (LAMBDA (i: naturalnumbers.upto(sigmatopdown.len)): sigmatopdown.pend) WITH [(0)(sigmatopdown.n) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)], 0, sigmatopdown.n)) ELSE FORALL (i_1: naturalnumbers.upto(sigmatopdown.len)), (n_1: sigmatopdown.non_terminal): (booleans.NOT)(sigmatopdown.loop?((LAMBDA (i: naturalnumbers.upto(sigmatopdown.len)): sigmatopdown.pend) WITH [(0)(sigmatopdown.n) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)](i_1)(n_1))) ENDIF}")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC1 0 (pyaml_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "1" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC2 0 (pyaml_TCC2-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "3" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC3 0 (pyaml_TCC3-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "2" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC4 0 (pyaml_TCC4-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "1" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC5 0 (pyaml_TCC5-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "4" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC6 0 (pyaml_TCC6-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "35" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC7 0 (pyaml_TCC7-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "5" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC8 0 (pyaml_TCC8-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "11" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC9 0 (pyaml_TCC9-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "6" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC10 0 (pyaml_TCC10-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC11 0 (pyaml_TCC11-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "8" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC12 0 (pyaml_TCC12-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "10" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC13 0 (pyaml_TCC13-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "9" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC14 0 (pyaml_TCC14-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC15 0 (pyaml_TCC15-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "12" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC16 0 (pyaml_TCC16-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "14" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC17 0 (pyaml_TCC17-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "13" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC18 0 (pyaml_TCC18-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC19 0 (pyaml_TCC19-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "15" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC20 0 (pyaml_TCC20-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "31" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC21 0 (pyaml_TCC21-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "16" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC22 0 (pyaml_TCC22-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "28" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC23 0 (pyaml_TCC23-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "1" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC24 0 (pyaml_TCC24-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "17" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC25 0 (pyaml_TCC25-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "18" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC26 0 (pyaml_TCC26-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC27 0 (pyaml_TCC27-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "19" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC28 0 (pyaml_TCC28-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "25" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC29 0 (pyaml_TCC29-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "21" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC30 0 (pyaml_TCC30-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "25" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC31 0 (pyaml_TCC31-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "22" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC32 0 (pyaml_TCC32-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "20" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC33 0 (pyaml_TCC33-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "23" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC34 0 (pyaml_TCC34-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "19" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC35 0 (pyaml_TCC35-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "19" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC36 0 (pyaml_TCC36-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC37 0 (pyaml_TCC37-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "24" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC38 0 (pyaml_TCC38-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "26" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC39 0 (pyaml_TCC39-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "27" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC40 0 (pyaml_TCC40-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "20" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC41 0 (pyaml_TCC41-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "29" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC42 0 (pyaml_TCC42-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "0" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC43 0 (pyaml_TCC43-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "30" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC44 0 (pyaml_TCC44-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC45 0 (pyaml_TCC45-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "32" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC46 0 (pyaml_TCC46-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "12" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC47 0 (pyaml_TCC47-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "33" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC48 0 (pyaml_TCC48-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "14" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC49 0 (pyaml_TCC49-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "34" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC50 0 (pyaml_TCC50-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC51 0 (pyaml_TCC51-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "36" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC52 0 (pyaml_TCC52-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "38" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC53 0 (pyaml_TCC53-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "37" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC54 0 (pyaml_TCC54-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC55 0 (pyaml_TCC55-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "39" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC56 0 (pyaml_TCC56-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "43" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC57 0 (pyaml_TCC57-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "40" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC58 0 (pyaml_TCC58-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "10" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC59 0 (pyaml_TCC59-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "0" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC60 0 (pyaml_TCC60-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "41" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC61 0 (pyaml_TCC61-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "42" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC62 0 (pyaml_TCC62-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "10" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC63 0 (pyaml_TCC63-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "33" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC64 0 (pyaml_TCC64-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "40" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC65 0 (pyaml_TCC65-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "44" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC66 0 (pyaml_TCC66-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest cat_TCC1 0 (cat_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (cat subtype "(number_fields.-)(exp2.exp2(8), sigmatopdowntest.l1)" "nat")))("sigmatopdowntest" sigmatopdowntest cat_TCC2 0 (cat_TCC2-1 nil 3805067364 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (uint8 type-eq-decl nil integertypes nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (exp2 def-decl "posnat" exp2 nil)) nil (cat subtype "sigmatopdowntest.l1" "uint32")))("sigmatopdowntest" sigmatopdowntest cat_TCC3 0 (cat_TCC3-1 nil 3805067364 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (uint8 type-eq-decl nil integertypes nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (exp2 def-decl "posnat" exp2 nil) (nil application-judgement "above(n)" exp2 nil)) nil (cat subtype "sigmatopdowntest.l2" "uint32")))("sigmatopdowntest" sigmatopdowntest cat_TCC4 0 (cat_TCC4-1 nil 3805067364 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (uint8 type-eq-decl nil integertypes nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (exp2 def-decl "posnat" exp2 nil) (nil application-judgement "above(n)" exp2 nil)) nil (cat subtype "(number_fields.+)(sigmatopdowntest.l1, sigmatopdowntest.l2)" "uint32")))("sigmatopdowntest" sigmatopdowntest cat_TCC5 0 (cat_TCC5-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil)) nil (cat subtype "(number_fields.-)(sigmatopdowntest.i, sigmatopdowntest.l1)" "naturalnumbers.below(sigmatopdowntest.l2)")))("sigmatopdowntest" sigmatopdowntest tok0_TCC1 0 (tok0_TCC1-1 nil 3805067364 ("" (cond-coverage-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (tok0 coverage "COND sigmatopdowntest.i = 0 -> 39, sigmatopdowntest.i = 1 -> 116, sigmatopdowntest.i = 2 -> 111, sigmatopdowntest.i = 3 -> 107, sigmatopdowntest.i = 4 -> 101, sigmatopdowntest.i = 5 -> 110, sigmatopdowntest.i = 6 -> 39 ENDCOND" "nil")))("sigmatopdowntest" sigmatopdowntest tok1_TCC1 0 (tok1_TCC1-1 nil 3805067364 ("" (cond-coverage-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (tok1 coverage "COND sigmatopdowntest.i = 0 -> 39, sigmatopdowntest.i = 1 -> 116, sigmatopdowntest.i = 2 -> 111, sigmatopdowntest.i = 3 -> 107, sigmatopdowntest.i = 4 -> 101, sigmatopdowntest.i = 5 -> 110, sigmatopdowntest.i = 6 -> 92, sigmatopdowntest.i = 7 -> 39, sigmatopdowntest.i = 8 -> 39 ENDCOND" "nil")))("sigmatopdowntest" sigmatopdowntest obrace_TCC1 0 (obrace_TCC1-1 nil 3805067364 ("" (cond-coverage-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (obrace coverage "COND sigmatopdowntest.i = 0 -> 123, sigmatopdowntest.i = 1 -> 32, sigmatopdowntest.i = 2 -> 32 ENDCOND" "nil")))("sigmatopdowntest" sigmatopdowntest emptydict2_TCC1 0 (emptydict2_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (emptydict2 subtype "6" "uint32")))("sigmatopdowntest" sigmatopdowntest emptydict2_TCC2 0 (emptydict2_TCC3-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (emptydict2 subtype "3" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 3))")))("sigmatopdowntest" sigmatopdowntest dict1_TCC1 0 (dict1_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (dict1 subtype "22" "uint32")))("sigmatopdowntest" sigmatopdowntest dict1_TCC2 0 (dict1_TCC3-1 nil 3805067364 ("" (grind) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (exp2 def-decl "posnat" exp2 nil)) nil (dict1 subtype "3" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 6))")))("sigmatopdowntest" sigmatopdowntest dict1_TCC3 0 (dict1_TCC4-1 nil 3805067364 ("" (grind) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (exp2 def-decl "posnat" exp2 nil)) nil (dict1 subtype "9" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 3))")))("sigmatopdowntest" sigmatopdowntest dict1_TCC4 0 (dict1_TCC6-1 nil 3805067364 ("" (grind) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (exp2 def-decl "posnat" exp2 nil)) nil (dict1 subtype "12" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 7))")))("sigmatopdowntest" sigmatopdowntest dict1_TCC5 0 (dict1_TCC7-1 nil 3805067364 ("" (grind) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (exp2 def-decl "posnat" exp2 nil)) nil (dict1 subtype "19" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 3))")))("sigmatopdowntest" sigmatopdowntest test0_TCC1 0 (test0_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (test0 subtype "2" "uint32")))("sigmatopdowntest" sigmatopdowntest test0_TCC2 0 (test0_TCC3-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (test0 subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest test0eval 0 (test0eval-1 nil 3805071593 ("" (auto-rewrite-theory "sigmatopdown") (("" (auto-rewrite-theory "sigmatopdowntest") (("" (assert) (("" (postpone) nil nil)) nil)) nil)) nil) nil shostak))("sigmatopdowntest" sigmatopdowntest test1_TCC1 0 (test1_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (test1 subtype "7" "uint32")))("sigmatopdowntest" sigmatopdowntest test1_TCC2 0 (test1_TCC2-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (test1 subtype "17" "non_terminal")))("sigmatopdowntest" sigmatopdowntest test11_TCC1 0 (test11_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (test11 subtype "9" "uint32")))("sigmatopdowntest" sigmatopdowntest test2_TCC1 0 (test2_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (test2 subtype "0" "non_terminal")))("sigmatopdowntest" sigmatopdowntest iparse_TCC1 0 (iparse_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (byte type-eq-decl nil sigmatopdown nil) (non_terminal type-eq-decl nil sigmatopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (good_good_entry? const-decl "bool" sigmatopdown nil) (num_non_terminals const-decl "byte" sigmatopdown nil) (good_push_entry? const-decl "bool" sigmatopdown nil) (nice_entry? const-decl "bool" sigmatopdown nil)) nil (iparse subtype "sigmatopdowntest.pend" "[non_terminal -> (sigmatopdown.nice_entry?(sigmatopdowntest.len, sigmatopdowntest.i))]")))("sigmatopdowntest" sigmatopdowntest iparse_TCC2 0 (iparse_TCC2-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (byte type-eq-decl nil sigmatopdown nil) (num_non_terminals const-decl "byte" sigmatopdown nil) (non_terminal type-eq-decl nil sigmatopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil)) nil (iparse subtype "0" "uint32")))("sigmatopdowntest" sigmatopdowntest iparse_TCC3 0 (iparse_TCC3-1 nil 3805067364 ("" (grind) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil) (exp2 def-decl "posnat" exp2 nil)) nil (iparse subtype "sigmatopdown.num_non_terminals" "uint8")))("sigmatopdowntest" sigmatopdowntest iparse_TCC4 0 (iparse_TCC4-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil) (good_good_entry? const-decl "bool" sigmatopdown nil) (good_push_entry? const-decl "bool" sigmatopdown nil) (nice_entry? const-decl "bool" sigmatopdown nil)) nil (iparse subtype "sigmatopdown.push(0, sigmatopdown.num_non_terminals)" "(sigmatopdown.nice_entry?(sigmatopdowntest.len, sigmatopdowntest.start))")))("sigmatopdowntest" sigmatopdowntest iparse_TCC5 0 (iparse_TCC5-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (byte type-eq-decl nil sigmatopdown nil) (non_terminal type-eq-decl nil sigmatopdown nil) (good_entry? const-decl "bool" sigmatopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (num_non_terminals const-decl "byte" sigmatopdown nil) (good_good_entry? const-decl "bool" sigmatopdown nil) (good_push_entry? const-decl "bool" sigmatopdown nil) (nice_entry? const-decl "bool" sigmatopdown nil) (good_root? const-decl "bool" sigmatopdown nil) (good_or_fail? const-decl "bool" sigmatopdown nil) (count const-decl "upto(len)" arrayCount nil) (scafcount const-decl "uint64" sigmatopdown nil) (gfcount const-decl "uint64" sigmatopdown nil) (good_tscaffold? const-decl "bool" sigmatopdown nil) (fine_scaffold? const-decl "bool" sigmatopdown nil)) nil (iparse subtype "(LAMBDA (i: naturalnumbers.upto(sigmatopdowntest.len)): sigmatopdowntest.pend) WITH [(sigmatopdowntest.start)(sigmatopdowntest.root) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)]" "(sigmatopdown.fine_scaffold?(sigmatopdowntest.len, sigmatopdowntest.G, sigmatopdowntest.s)(sigmatopdowntest.start, sigmatopdowntest.root))")))("sigmatopdowntest" sigmatopdowntest iparse_TCC6 0 (iparse_TCC6-1 nil 3805067364 ("" (subtype-tcc) nil nil) nil nil (iparse subtype "1" "(sigmatopdown.good_depth?(sigmatopdowntest.len, (LAMBDA (i: naturalnumbers.upto(sigmatopdowntest.len)): sigmatopdowntest.pend) WITH [(sigmatopdowntest.start)(sigmatopdowntest.root) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)]))")))("sigmatopdowntest" sigmatopdowntest iparse_TCC7 0 (iparse_TCC7-1 nil 3805067364 ("" (subtype-tcc) nil nil) nil nil (iparse subtype "sigmatopdowntest.start" "uint32")))("sigmatopdowntest" sigmatopdowntest iparse_TCC8 0 (iparse_TCC8-1 nil 3805067364 ("" (subtype-tcc) nil nil) nil nil (iparse subtype "sigmatopdown.push(sigmatopdowntest.start, sigmatopdowntest.root)" "(sigmatopdown.fine_stack?(sigmatopdowntest.len, sigmatopdowntest.G, 1, (LAMBDA (i: naturalnumbers.upto(sigmatopdowntest.len)): sigmatopdowntest.pend) WITH [(sigmatopdowntest.start)(sigmatopdowntest.root) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)]))")))("sigmatopdowntest" sigmatopdowntest iparse_TCC9 0 (iparse_TCC9-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (byte type-eq-decl nil sigmatopdown nil) (non_terminal type-eq-decl nil sigmatopdown nil) (nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (num_non_terminals const-decl "byte" sigmatopdown nil)) nil (iparse subtype "booleans.FALSE" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdowntest.root = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdowntest.len, sigmatopdowntest.G, (LAMBDA (i: naturalnumbers.upto(sigmatopdowntest.len)): sigmatopdowntest.pend) WITH [(sigmatopdowntest.start)(sigmatopdowntest.root) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)], sigmatopdowntest.start, sigmatopdowntest.root)) ELSE FORALL (i_1: naturalnumbers.upto(sigmatopdowntest.len)), n: (booleans.NOT)(sigmatopdown.loop?((LAMBDA (i: naturalnumbers.upto(sigmatopdowntest.len)): sigmatopdowntest.pend) WITH [(sigmatopdowntest.start)(sigmatopdowntest.root) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)](i_1)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown subtype_TCC1 0 (subtype_TCC1-1 nil 3804536638 ("" (grind) nil nil) nil nil (subtype_ subtype "sigmatopdown.x" "uint32")))("sigmatopdown" sigmatopdown subtype_TCC2 0 (subtype_TCC2-1 nil 3804564519 ("" (grind) nil nil) nil nil (subtype_ subtype "sigmatopdown.x" "uint8")))("sigmatopdown" sigmatopdown fine_push_entry?_TCC1 0 (fine_push_entry?_TCC1-1 nil 3807728459 ("" (subtype-tcc) nil nil) nil nil (fine_push_entry? subtype "sigmatopdown.x" "(sigmatopdown.push?)")))("sigmatopdown" sigmatopdown successor_TCC1 0 (successor_TCC1-1 nil 3804904050 ("" (subtype-tcc) nil nil) nil nil (successor subtype "sigmatopdown.entry1" "(sigmatopdown.push?)")))("sigmatopdown" sigmatopdown successor_TCC2 0 (successor_TCC2-1 nil 3804904050 ("" (subtype-tcc) nil nil) nil nil (successor subtype "sigmatopdown.entry2" "(sigmatopdown.push?)")))("sigmatopdown" sigmatopdown successor_TCC3 0 (successor_TCC1-1 nil 3804547853 ("" (subtype-tcc) nil nil) nil nil (successor subtype "sigmatopdown.nt1" "non_terminal")))("sigmatopdown" sigmatopdown successor_TCC4 0 (successor_TCC1-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (successor subtype "sigmatopdown.p1" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown successor_TCC5 0 (successor_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (successor subtype "sigmatopdown.p1" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown sigma_restrict_TCC1 0 (sigma_restrict_TCC1-1 nil 3806355895 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "0" "T_low[upto(j)]")))("sigmatopdown" sigmatopdown sigma_restrict_TCC2 0 (sigma_restrict_TCC2-1 nil 3806355895 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "sigmatopdown.j" "T_high[upto(j)]")))("sigmatopdown" sigmatopdown sigma_restrict_TCC3 0 (sigma_restrict_TCC3-1 nil 3806355895 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "sigmatopdown.i" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown sigma_restrict_TCC4 0 (sigma_restrict_TCC4-1 nil 3806355895 ("" (assuming-tcc) nil nil) nil nil (sigma_restrict assuming "reals@sigma[naturalnumbers.upto(sigmatopdown.j)].sigma" "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))("sigmatopdown" sigmatopdown sigma_restrict_TCC5 0 (sigma_restrict_TCC5-1 nil 3806360457 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "0" "T_low[upto(k)]")))("sigmatopdown" sigmatopdown sigma_restrict_TCC6 0 (sigma_restrict_TCC5-1 nil 3806358823 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "sigmatopdown.j" "T_high[upto(k)]")))("sigmatopdown" sigmatopdown sigma_restrict_TCC7 0 (sigma_restrict_TCC7-1 nil 3806360457 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict subtype "sigmatopdown.i" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown sigma_restrict_TCC8 0 (sigma_restrict_TCC8-1 nil 3806360457 ("" (assuming-tcc) nil nil) nil nil (sigma_restrict assuming "reals@sigma[naturalnumbers.upto(sigmatopdown.k)].sigma" "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))("sigmatopdown" sigmatopdown sigma_restrict 0 (sigma_restrict-1 nil 3806355895 ("" (skolem + ("len" "A" "_" "_")) (("" (induct j) (("1" (grind) nil nil) ("2" (skeep*) (("2" (expand "sigma" +) (("2" (inst-cp - k) (("2" (inst - "jt + 1") (("1" (ground) nil nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (grind) nil nil)) nil)) nil)) nil) ((T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals) (sigma def-decl "real" sigma reals) (arr type-eq-decl nil arrayCount nil) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) shostak))("sigmatopdown" sigmatopdown sigma_restrict_len_TCC1 0 (sigma_restrict_len_TCC1-1 nil 3806360811 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict_len subtype "0" "T_low[upto(j)]")))("sigmatopdown" sigmatopdown sigma_restrict_len_TCC2 0 (sigma_restrict_len_TCC2-1 nil 3806360811 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict_len subtype "sigmatopdown.j" "T_high[upto(j)]")))("sigmatopdown" sigmatopdown sigma_restrict_len_TCC3 0 (sigma_restrict_len_TCC3-1 nil 3806360811 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict_len subtype "sigmatopdown.i" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown sigma_restrict_len_TCC4 0 (sigma_restrict_len_TCC4-1 nil 3806360811 ("" (assuming-tcc) nil nil) nil nil (sigma_restrict_len assuming "reals@sigma[naturalnumbers.upto(sigmatopdown.j)].sigma" "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))("sigmatopdown" sigmatopdown sigma_restrict_len_TCC5 0 (sigma_restrict_len_TCC5-1 nil 3806936723 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict_len subtype "0" "T_low[upto(len)]")))("sigmatopdown" sigmatopdown sigma_restrict_len_TCC6 0 (sigma_restrict_len_TCC6-1 nil 3806936723 ("" (subtype-tcc) nil nil) nil nil (sigma_restrict_len subtype "sigmatopdown.j" "T_high[upto(len)]")))("sigmatopdown" sigmatopdown sigma_restrict_len_TCC7 0 (sigma_restrict_len_TCC7-1 nil 3806936723 ("" (assuming-tcc) nil nil) nil nil (sigma_restrict_len assuming "reals@sigma[naturalnumbers.upto(sigmatopdown.len)].sigma" "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))("sigmatopdown" sigmatopdown sigma_restrict_len 0 (sigma_restrict_len-1 nil 3806360812 ("" (skeep*) (("" (lemma "sigma_restrict") (("" (inst - len A j len) (("" (ground) nil nil)) nil)) nil)) nil) nil shostak))("sigmatopdown" sigmatopdown sigma_nat_TCC1 0 (sigma_nat_TCC1-1 nil 3804912405 ("" (subtype-tcc) nil nil) nil nil (sigma_nat subtype "0" "T_low[upto(len)]")))("sigmatopdown" sigmatopdown sigma_nat_TCC2 0 (sigma_nat_TCC2-1 nil 3804912405 ("" (subtype-tcc) nil nil) nil nil (sigma_nat subtype "sigmatopdown.i" "T_high[upto(len)]")))("sigmatopdown" sigmatopdown sigma_nat 0 (sigma_nat-1 nil 3804912406 ("" (skolem + ("len" _ _)) (("" (induct-and-simplify i) nil nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)) shostak))("sigmatopdown" sigmatopdown sigma_pos_TCC1 0 (sigma_pos_TCC1-1 nil 3804912405 ("" (subtype-tcc) nil nil) nil nil (sigma_pos subtype "sigmatopdown.j" "T_high[upto(len)]")))("sigmatopdown" sigmatopdown sigma_pos 0 (sigma_pos-1 nil 3804912491 ("" (skolem + ("len" _ _ _)) (("" (induct-and-simplify j) nil nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)) shostak))("sigmatopdown" sigmatopdown sigma_dec_TCC1 0 (sigma_dec_TCC1-1 nil 3804994284 ("" (subtype-tcc) nil nil) nil nil (sigma_dec subtype "sigmatopdown.j" "T_high[upto(len)]")))("sigmatopdown" sigmatopdown sigma_dec 0 (sigma_dec-1 nil 3804993479 ("" (skolem + ("len" _ _ _)) (("" (induct "j") (("1" (grind) nil nil) ("2" (skeep*) (("2" (expand sigma +) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ((T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) shostak))("sigmatopdown" sigmatopdown sigma_inc_TCC1 0 (sigma_inc_TCC1-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil (sigma_inc subtype "sigmatopdown.j" "T_high[upto(len)]")))("sigmatopdown" sigmatopdown sigma_inc_TCC2 0 (sigma_inc_TCC2-1 nil 3805854734 ("" (subtype-tcc) nil nil) nil nil (sigma_inc subtype "sigmatopdown.j" "T_high[upto(len)]")))("sigmatopdown" sigmatopdown sigma_inc 0 (sigma_inc-1 nil 3804994355 ("" (skolem + ("len" _ _ _)) (("" (induct "j") (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)) nil) ((T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) shostak))("sigmatopdown" sigmatopdown scafcount_TCC1 0 (scafcount_TCC4-1 nil 3806632141 ("" (skolem + (len A P "_")) (("" (case "FORALL ((j: upto(len))):
        sigma[upto(len)]
            (0, j,
             LAMBDA (i: upto(len)): count[ent](num_non_terminals)(P)(A(i)))
         <= (j + 1) * num_non_terminals") (("1" (skeep) (("1" (inst?) (("1" (case "(j + 1) * num_non_terminals <= exp2(64) - 1") (("1" (assert) nil nil) ("2" (hide -1 2) (("2" (use le_times_le_pos :subst (nnx "j + 1" y "exp2(32)" nnz num_non_terminals w "exp2(8)")) (("2" (ground) (("1" (rewrite exp2_sum :dir RL) (("1" (grind) nil nil)) nil) ("2" (assert) (("2" (typepred "num_non_terminals") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (induct-and-simplify j :exclude count) nil nil)) nil)) nil)) nil) ((count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals) (sigma_nat application-judgement "nat" sigma reals)) nil (scafcount subtype "sigma[naturalnumbers.upto(sigmatopdown.len)].sigma(0, sigmatopdown.j, LAMBDA (i: naturalnumbers.upto(sigmatopdown.len)): arrayCount[sigmatopdown.ent].count(sigmatopdown.num_non_terminals)(sigmatopdown.P)(sigmatopdown.A(i)))" "uint64")))("sigmatopdown" sigmatopdown sigma_max 0 (sigma_max-1 nil 3806353166 ("" (induct j) (("1" (skeep) (("1" (expand scafcount) (("1" (expand "sigma" +) (("1" (expand "sigma" +) (("1" (typepred "count(num_non_terminals)(push?)(A(0))") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skeep*) (("2" (expand scafcount) (("2" (expand "sigma" +) (("2" (inst - len A P) (("2" (ground) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (arr type-eq-decl nil arrayCount nil) (count const-decl "upto(len)" arrayCount nil)) shostak))("sigmatopdown" sigmatopdown scafcount_max 0 (scafcount_max-1 nil 3807566158 ("" (skeep*) (("" (use sigma_max) (("" (use "le_times_le_pos" :subst (y "exp2(32)" w "exp2(8)")) (("" (ground) (("1" (rewrite exp2_sum :dir RL) (("1" (assert) nil nil)) nil) ("2" (assert) (("2" (typepred num_non_terminals) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil)) shostak))("sigmatopdown" sigmatopdown scafcount0_TCC1 0 (scafcount0_TCC1-1 nil 3806988426 ("" (subtype-tcc) nil nil) nil nil (scafcount0 subtype "0" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown scafcount0 0 (scafcount0-1 nil 3806988426 ("" (grind :rewrites count_update00) nil nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil)) shostak))("sigmatopdown" sigmatopdown scafcount_step_TCC1 0 (scafcount_step_TCC1-1 nil 3806977775 ("" (subtype-tcc) nil nil) nil nil (scafcount_step subtype "(number_fields.+)(sigmatopdown.j, 1)" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown scafcount_step_TCC2 0 (scafcount_step_TCC2-1 nil 3806977775 ("" (subtype-tcc) nil nil) nil nil (scafcount_step subtype "sigmatopdown.j" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown scafcount_step 0 (scafcount_step-1 nil 3806977775 ("" (skolem + (len "_" "_" "_")) (("" (induct "j") (("1" (grind) nil nil) ("2" (skeep*) (("2" (expand "scafcount" +) (("2" (inst?) (("2" (inst?) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((arr type-eq-decl nil arrayCount nil) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) shostak))("sigmatopdown" sigmatopdown scafcount_update 0 (scafcount_update-1 nil 3806936723 ("" (skolem + (len "_" "_" "_" "_" "_" "_")) (("" (induct j) (("1" (skeep*) (("1" (rewrite scafcount0) (("1" (lift-if :updates? nil) (("1" (ground) (("1" (grind) nil nil) ("2" (case "i  = 0") (("1" (assert) (("1" (rewrite count_update00) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("3" (case "i  = 0") (("1" (assert) (("1" (rewrite count_update00) (("1" (grind) nil nil)) nil)) nil) ("2" (case "i  = 0") (("1" (propax) nil nil) ("2" (assert) nil nil)) nil)) nil) ("4" (case "i  = 0") (("1" (assert) (("1" (rewrite count_update00) (("1" (grind) nil nil)) nil)) nil) ("2" (case "i  = 0") (("1" (propax) nil nil) ("2" (grind) nil nil)) nil)) nil) ("5" (case "i  = 0") (("1" (assert) (("1" (rewrite count_update00) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (skeep*) (("2" (rewrite scafcount_step) (("2" (rewrite -2) (("2" (hide -2) (("2" (case "i = 1 + jt") (("1" (assert) (("1" (rewrite count_update00) (("1" (grind :rewrites scafcount_step :exclude count) nil nil)) nil)) nil) ("2" (assert) (("2" (grind :rewrites scafcount_step :exclude count) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (count_update00 formula-decl nil arrayCount nil) (arr type-eq-decl nil arrayCount nil)) shostak))("sigmatopdown" sigmatopdown pushcount_TCC1 0 (pushcount_TCC1-1 nil 3806632141 ("" (subtype-tcc) nil nil) nil nil (pushcount subtype "sigmatopdown.len" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_stack?_TCC1 0 (good_stack?_TCC1-1 nil 3804904050 ("" (subtype-tcc) nil nil) nil nil (good_stack? subtype "sigmatopdown.stack" "(sigmatopdown.push?)")))("sigmatopdown" sigmatopdown good_stack?_TCC2 0 (good_stack?_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (good_stack? subtype "sigmatopdown.entry" "(sigmatopdown.push?)")))("sigmatopdown" sigmatopdown good_stack?_TCC3 0 (good_stack?_TCC3-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (good_stack? subtype "(number_fields.-)(sigmatopdown.depth, 1)" "uint64")))("sigmatopdown" sigmatopdown good_stack?_TCC4 0 (good_stack?_TCC4-1 nil 3804455654 ("" (termination-tcc) nil nil) nil nil (good_stack? termination "sigmatopdown.good_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.A)" "nil")))("sigmatopdown" sigmatopdown good_stack?_TCC5 0 (good_stack?_TCC5-1 nil 3804547853 ("" (subtype-tcc) nil nil) nil nil (good_stack? subtype "sigmatopdown.nt(sigmatopdown.stack)" "non_terminal")))("sigmatopdown" sigmatopdown good_stack?_TCC6 0 (good_stack?_TCC5-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (good_stack? subtype "sigmatopdown.pos(sigmatopdown.stack)" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown mem_stack?_TCC1 0 (mem_stack?_TCC1-1 nil 3804455654 ("" (skeep* :preds? t) (("" (expand "good_stack?") (("" (ground) nil nil)) nil)) nil) nil nil (mem_stack? subtype "(number_fields.-)(sigmatopdown.depth, 1)" "uint64")))("sigmatopdown" sigmatopdown mem_stack?_TCC2 0 (mem_stack?_TCC2-1 nil 3804455654 ("" (termination-tcc) nil nil) nil nil (mem_stack? termination "sigmatopdown.mem_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.A)" "nil")))("sigmatopdown" sigmatopdown mem_stack?_TCC3 0 (mem_stack?_TCC3-1 nil 3804455654 ("" (grind) nil nil) nil nil (mem_stack? subtype "sigmatopdown.A(sigmatopdown.pos(sigmatopdown.stack))(sigmatopdown.nt(sigmatopdown.stack))" "(sigmatopdown.good_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.A))")))("sigmatopdown" sigmatopdown mem_stack_push_TCC1 0 (mem_stack_push_TCC2-1 nil 3807675826 ("" (subtype-tcc) nil nil) nil nil (mem_stack_push subtype "sigmatopdown.entry" "(sigmatopdown.push?)")))("sigmatopdown" sigmatopdown mem_stack_push_TCC2 0 (mem_stack_push_TCC1-1 nil 3807675826 ("" (subtype-tcc) nil nil) nil nil (mem_stack_push subtype "(sigmatopdown.pos(sigmatopdown.entry))" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown mem_stack_push_TCC3 0 (mem_stack_push_TCC3-1 nil 3807675826 ("" (subtype-tcc) nil nil) nil nil (mem_stack_push subtype "sigmatopdown.nt(sigmatopdown.entry)" "non_terminal")))("sigmatopdown" sigmatopdown mem_stack_push 0 (mem_stack_push-1 nil 3807675827 ("" (induct depth) (("1" (lazy-grind :defs nil) nil nil) ("2" (skeep*) (("2" (expand mem_stack?) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (skeep*) (("3" (expand mem_stack? -4) (("3" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (inst?) (("2" (inst?) (("1" (ground) nil nil) ("2" (typepred entry) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (skeep*) (("4" (typepred entry) (("4" (grind) nil nil)) nil)) nil)) nil) ("5" (hide 2) (("5" (skeep*) (("5" (typepred entry) (("5" (grind) nil nil)) nil)) nil)) nil) ("6" (hide 2) (("6" (skeep*) (("6" (typepred entry) (("6" (grind) nil nil)) nil)) nil)) nil) ("7" (hide 2) (("7" (skeep*) (("7" (typepred entry) (("7" (grind) nil nil)) nil)) nil)) nil) ("8" (hide 2) (("8" (skeep*) (("8" (typepred entry) (("8" (grind) nil nil)) nil)) nil)) nil) ("9" (hide 2) (("9" (grind) nil nil)) nil)) nil) nil shostak))("sigmatopdown" sigmatopdown good_mem_stack_TCC1 0 (good_mem_stack_TCC1-1 nil 3807728459 ("" (subtype-tcc) nil nil) nil nil (good_mem_stack subtype "(sigmatopdown.pos(sigmatopdown.entry))" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_mem_stack_TCC2 0 (good_mem_stack_TCC2-1 nil 3807728459 ("" (subtype-tcc) nil nil) nil nil (good_mem_stack subtype "sigmatopdown.nt(sigmatopdown.entry)" "non_terminal")))("sigmatopdown" sigmatopdown good_mem_stack 0 (good_mem_stack-1 nil 3804823624 ("" (induct "depth") (("1" (grind) (("1" (expand "good_stack?") (("1" (propax) nil nil)) nil) ("2" (grind) (("2" (expand "good_stack?") (("2" (propax) nil nil)) nil)) nil) ("3" (expand "good_stack?") (("3" (propax) nil nil)) nil) ("4" (expand good_stack?) (("4" (propax) nil nil)) nil) ("5" (expand good_stack?) (("5" (propax) nil nil)) nil) ("6" (expand good_stack?) (("6" (propax) nil nil)) nil)) nil) ("2" (skeep*) (("2" (expand "mem_stack?" +) (("2" (ground) (("1" (typepred stack) (("1" (grind :if-match nil) nil nil)) nil) ("2" (expand "good_stack?" :fnum (-3 4)) (("2" (ground) (("1" (hide -3 4) (("1" (grind) (("1" (typepred entry) (("1" (grind) (("1" (typepred stack) (("1" (grind) (("1" (extensionality "(push?)") (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (extensionality "(push?)") (("2" (inst?) (("2" (ground) nil nil)) nil)) nil) ("3" (extensionality "(push?)") (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -3 2 5) (("2" (lift-if) (("2" (ground) (("2" (lift-if) (("2" (ground) (("2" (extensionality "(push?)") (("2" (inst?) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (inst?) (("3" (ground) (("1" (hide 2) (("1" (lift-if) (("1" (typepred entry) (("1" (grind) (("1" (extensionality "(push?)") (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lift-if) (("2" (ground) (("2" (ground) (("2" (extensionality "(push?)") (("2" (inst?) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide -3 4) (("4" (hide -1) (("4" (lift-if) (("4" (ground) (("4" (ground) (("4" (extensionality "(push?)") (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (hide -3 5) (("5" (case "pos(stack) = pos(entry)") (("1" (case "nt(stack) = nt(entry)") (("1" (extensionality "(push?)") (("1" (assert) (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (assert) (("2" (typepred u) (("2" (grind) nil nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("6" (inst? :polarity? t) (("6" (ground) (("1" (hide 2) (("1" (lift-if) (("1" (ground) (("1" (ground) (("1" (extensionality "(push?)") (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (lift-if) (("2" (ground) (("2" (ground) (("2" (extensionality "(push?)") (("2" (inst?) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (grind) nil nil)) nil) ("5" (hide 2) (("5" (grind) nil nil)) nil) ("6" (hide 2) (("6" (grind) nil nil)) nil) ("7" (hide 2) (("7" (grind) nil nil)) nil) ("8" (hide 2) (("8" (grind) nil nil)) nil) ("9" (hide 2) (("9" (grind) nil nil)) nil) ("10" (hide 2) (("10" (grind) nil nil)) nil) ("11" (hide 2) (("11" (grind) nil nil)) nil)) nil) nil shostak))("sigmatopdown" sigmatopdown mem_mem_stack_TCC1 0 (mem_mem_stack_TCC1-1 nil 3804967699 ("" (skeep*) (("" (lemma good_mem_stack) (("" (inst?) (("" (ground) nil nil)) nil)) nil)) nil) nil nil (mem_mem_stack subtype "sigmatopdown.stack" "(sigmatopdown.good_stack?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.depth, sigmatopdown.A WITH [(sigmatopdown.pos(sigmatopdown.entry))(sigmatopdown.nt(sigmatopdown.entry)) := sigmatopdown.u]))")))("sigmatopdown" sigmatopdown mem_mem_stack 0 (mem_mem_stack-2 "" 3807748697 ("" (induct depth) (("1" (skeep*) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil) ("2" (skeep*) (("2" (expand mem_stack? +) (("2" (lift-if) (("2" (ground) (("2" (case "v = stack") (("1" (assert) nil nil) ("2" (assert) (("2" (inst?) (("2" (ground) (("1" (lift-if -) (("1" (ground) (("1" (lift-if -) (("1" (ground) (("1" (extensionality "(push?)") (("1" (forward-chain -) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand good_stack? -) (("2" (ground) (("1" (case "pos(stack) = pos(entry)") (("1" (case "nt(stack) = nt(entry)") (("1" (assert) (("1" (extensionality "(push?)") (("1" (inst - stack entry) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil) ("2" (case "pos(stack) = pos(entry)") (("1" (case "nt(stack) = nt(entry)") (("1" (assert) (("1" (extensionality "(push?)") (("1" (inst - stack entry) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("3" (case "pos(stack) = pos(entry)") (("1" (case "nt(stack) = nt(entry)") (("1" (extensionality "(push?)") (("1" (inst - stack entry) (("1" (ground) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (grind) nil nil)) nil) ("5" (hide 2) (("5" (grind) nil nil)) nil) ("6" (hide 2) (("6" (skeep*) (("6" (use good_mem_stack) (("6" (ground) nil nil)) nil)) nil)) nil) ("7" (hide 2) (("7" (skeep*) (("7" (typepred entry) (("7" (grind) nil nil)) nil)) nil)) nil) ("8" (hide 2) (("8" (grind) nil nil)) nil) ("9" (hide 2) (("9" (grind) nil nil)) nil) ("10" (hide 2) (("10" (grind) nil nil)) nil) ("11" (hide 2) (("11" (grind) nil nil)) nil) ("12" (hide 2) (("12" (grind) nil nil)) nil)) nil) nil shostak) (mem_mem_stack-1 nil 3804967700 ("" (induct depth) (("1" (skeep*) (("1" (inst?) (("1" (ground) nil nil)) nil)) nil) ("2" (skeep*) (("2" (expand good_stack?) (("2" (grind) nil nil)) nil)) nil) ("3" (skeep*) (("3" (expand mem_stack? +) (("3" (lift-if) (("3" (ground) (("3" (case "v = stack") (("1" (assert) nil nil) ("2" (assert) (("2" (inst?) (("2" (ground) (("1" (lift-if -) (("1" (ground) (("1" (lift-if -) (("1" (ground) (("1" (extensionality "(push?)") (("1" (forward-chain -) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand good_stack? -) (("2" (ground) (("1" (grind) nil nil) ("2" (lift-if 1) (("2" (ground) (("2" (ground) (("2" (extensionality "(push?)") (("2" (forward-chain -) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (lift-if -) (("3" (ground) (("3" (lift-if -) (("3" (ground) (("3" (extensionality "(push?)") (("3" (forward-chain -) (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (grind) nil nil)) nil) ("5" (hide 2) (("5" (grind) nil nil)) nil) ("6" (hide 2) (("6" (skeep*) (("6" (lemma good_mem_stack) (("6" (inst?) (("6" (ground) nil nil)) nil)) nil)) nil)) nil) ("7" (hide 2) (("7" (grind) nil nil)) nil) ("8" (hide 2) (("8" (grind) nil nil)) nil) ("9" (hide 2) (("9" (grind) nil nil)) nil) ("10" (hide 2) (("10" (grind) nil nil)) nil) ("11" (hide 2) (("11" (grind) nil nil)) nil) ("12" (hide 2) (("12" (grind) nil nil)) nil)) nil) nil shostak))("sigmatopdown" sigmatopdown good_mem_stack_push_TCC1 0 (good_mem_stack_push_TCC2-1 nil 3807665403 ("" (subtype-tcc) nil nil) nil nil (good_mem_stack_push subtype "sigmatopdown.push(sigmatopdown.pos, sigmatopdown.n)" "(sigmatopdown.good_push_entry?(sigmatopdown.len))")))("sigmatopdown" sigmatopdown good_mem_stack_push_TCC2 0 (good_mem_stack_push_TCC3-1 nil 3807665403 ("" (skeep*) (("" (use exp2_lt :subst (n 41 m 64)) (("" (grind) nil nil)) nil)) nil) nil nil (good_mem_stack_push subtype "(number_fields.+)(sigmatopdown.depth, 1)" "uint64")))("sigmatopdown" sigmatopdown good_mem_stack_push_TCC3 0 (good_mem_stack_push_TCC4-1 nil 3807665403 ("" (subtype-tcc) nil nil) nil nil (good_mem_stack_push subtype "sigmatopdown.stack" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown good_mem_stack_push 0 (good_mem_stack_push-2 "" 3807671734 ("" (skeep*) (("" (expand good_stack? +) (("" (ground) (("1" (grind) nil nil) ("2" (use good_mem_stack :subst (len len entry "push(pos!1, n)")) (("1" (ground) (("1" (grind) nil nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil shostak) (good_mem_stack_push-1 nil 3807665405 ("" (skeep*) (("" (expand good_stack? +) (("" (ground) (("1" (postpone) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil)) nil)) nil)) nil) nil shostak))("sigmatopdown" sigmatopdown fine_stack?_TCC1 0 (fine_stack?_TCC1-1 nil 3807728459 ("" (subtype-tcc) nil nil) nil nil (fine_stack? subtype "sigmatopdown.stack" "(sigmatopdown.fine_push_entry?(sigmatopdown.len))")))("sigmatopdown" sigmatopdown fine_stack?_TCC2 0 (fine_stack?_TCC1-1 nil 3804908888 ("" (skeep*) (("" (typepred stack) (("" (grind) nil nil)) nil)) nil) nil nil (fine_stack? subtype "sigmatopdown.rest" "(sigmatopdown.good_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.A))")))("sigmatopdown" sigmatopdown fine_stack?_TCC3 0 (fine_stack?_TCC2-1 nil 3804908888 ("" (skeep*) (("" (ground) (("" (typepred stack) (("" (grind) nil nil)) nil)) nil)) nil) nil nil (fine_stack? subtype "(number_fields.-)(sigmatopdown.depth, 1)" "uint64")))("sigmatopdown" sigmatopdown fine_stack?_TCC4 0 (fine_stack?_TCC3-1 nil 3804908888 ("" (skeep*) (("" (ground) (("1" (typepred "stack") (("1" (grind) nil nil)) nil) ("2" (typepred "stack") (("2" (grind) nil nil)) nil)) nil)) nil) nil nil (fine_stack? subtype "sigmatopdown.A(sigmatopdown.pos(sigmatopdown.stack))(sigmatopdown.nt(sigmatopdown.stack))" "(sigmatopdown.good_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.A))")))("sigmatopdown" sigmatopdown fine_stack?_TCC5 0 (fine_stack?_TCC4-1 nil 3804908888 ("" (termination-tcc) nil nil) nil nil (fine_stack? termination "sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.A)" "nil")))("sigmatopdown" sigmatopdown fine_mem_stack_TCC1 0 (fine_mem_stack_TCC1-1 nil 3804969900 ("" (skeep*) (("" (rewrite good_mem_stack) (("" (grind) nil nil)) nil)) nil) nil nil (fine_mem_stack subtype "sigmatopdown.stack" "(sigmatopdown.good_stack?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.depth, sigmatopdown.A WITH [(sigmatopdown.pos(sigmatopdown.entry))(sigmatopdown.nt(sigmatopdown.entry)) := sigmatopdown.u]))")))("sigmatopdown" sigmatopdown fine_mem_stack 0 (fine_mem_stack-1 nil 3804969200 ("" (induct "depth") (("1" (skeep*) (("1" (expand fine_stack?) (("1" (expand good_stack? -) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (skeep*) (("2" (expand fine_stack? +) (("2" (expand good_stack? -3) (("2" (ground) (("1" (rewrite mem_mem_stack) (("1" (expand mem_stack? 2) (("1" (ground) (("1" (lift-if +) (("1" (ground) (("1" (lift-if +) (("1" (ground) (("1" (extensionality "(push?)") (("1" (forward-chain -) (("1" (assert) nil nil)) nil)) nil) ("2" (inst?) (("2" (ground) (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -5 4) (("2" (lift-if +) (("2" (ground) (("2" (ground) (("2" (expand mem_stack? +) (("2" (ground) (("2" (extensionality "(push?)") (("2" (forward-chain -) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -5 4) (("3" (grind) nil nil)) nil) ("4" (hide -6 3) (("4" (grind) (("4" (extensionality "(push?)") (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil) ("5" (hide -5 4) (("5" (grind) (("1" (extensionality "(push?)") (("1" (inst?) (("1" (ground) nil nil)) nil)) nil) ("2" (extensionality "(push?)") (("2" (inst?) (("2" (ground) nil nil)) nil)) nil) ("3" (extensionality "(push?)") (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite mem_mem_stack) (("1" (expand mem_stack? 2) (("1" (ground) (("1" (lift-if +) (("1" (ground) (("1" (lift-if +) (("1" (ground) (("1" (extensionality "(push?)") (("1" (forward-chain -) (("1" (assert) nil nil)) nil)) nil) ("2" (inst?) (("2" (ground) (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -5 4) (("2" (hide -1) (("2" (grind) (("2" (extensionality "(push?)") (("2" (inst?) (("2" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -5 4) (("3" (hide -1) (("3" (grind) nil nil)) nil)) nil) ("4" (hide -6 3) (("4" (hide -2) (("4" (grind) (("4" (extensionality "(push?)") (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (hide -5 4) (("5" (hide -1) (("5" (grind) (("1" (hide -5 4) (("1" (hide -1) (("1" (grind) (("1" (extensionality "(push?)") (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (extensionality "(push?)") (("2" (inst?) (("2" (ground) nil nil)) nil)) nil) ("3" (extensionality "(push?)") (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (grind) nil nil)) nil) ("5" (hide 2) (("5" (grind) nil nil)) nil) ("6" (hide 2) (("6" (skeep*) (("6" (use good_mem_stack) (("6" (ground) nil nil)) nil)) nil)) nil) ("7" (grind) nil nil) ("8" (hide 2) (("8" (grind) nil nil)) nil) ("9" (hide 2) (("9" (grind) nil nil)) nil) ("10" (hide 2) (("10" (grind) nil nil)) nil) ("11" (hide 2) (("11" (grind) nil nil)) nil) ("12" (hide 2) (("12" (grind) nil nil)) nil)) nil) nil shostak))("sigmatopdown" sigmatopdown loop_ready?_TCC1 0 (loop_ready?_TCC1-1 nil 3804455654 ("" (skeep* :preds? t) (("" (typepred "A(i)(n1)") (("" (grind) nil nil)) nil)) nil) nil nil (loop_ready? subtype "(number_fields.+)(sigmatopdown.i, sigmatopdown.span(sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)))" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_fail?_TCC1 0 (good_fail?_TCC1-1 nil 3804455654 ("" (grind) nil nil) nil nil (good_fail? subtype "sigmatopdown.i" "naturalnumbers.below(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_fail?_TCC2 0 (good_fail?_TCC2-1 nil 3804455654 ("" (grind) nil nil) nil nil (good_fail? subtype "sigmatopdown.i" "naturalnumbers.below(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_fail?_TCC3 0 (good_fail?_TCC3-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil (good_fail? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_fail?_TCC4 0 (good_fail?_TCC3-1 nil 3804455654 ("" (grind) (("" (typepred "A!1(i!1)(n1!1)") (("" (grind) nil nil)) nil)) nil) nil nil (good_fail? subtype "(number_fields.+)(sigmatopdown.i, sigmatopdown.span(sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)))" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_fail?_TCC5 0 (good_fail?_TCC5-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_fail? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_fail?_TCC6 0 (good_fail?_TCC6-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_fail? subtype "sigmatopdown.A((number_fields.+)(sigmatopdown.i, sigmatopdown.span(sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1))))(sigmatopdown.n2)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_fail?_TCC7 0 (good_fail?_TCC7-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_fail? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_fail?_TCC8 0 (good_fail?_TCC8-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_fail? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n2)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_fail?_TCC9 0 (good_fail?_TCC9-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_fail? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_fail?_TCC10 0 (good_fail?_TCC10-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_fail? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_loop?_TCC1 0 (good_loop?_TCC1-1 nil 3804455654 ("" (skeep* :preds? t) (("" (typepred "A(i)(n1)") (("" (grind) nil nil)) nil)) nil) nil nil (good_loop? subtype "(number_fields.+)(sigmatopdown.i, sigmatopdown.span(sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)))" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_good?_TCC1 0 (good_good?_TCC1-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "(number_fields.-)(sigmatopdown.len, sigmatopdown.i)" "nat")))("sigmatopdown" sigmatopdown good_good?_TCC2 0 (good_good?_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "sigmatopdown.i" "naturalnumbers.below(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_good?_TCC3 0 (good_good?_TCC3-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "sigmatopdown.i" "naturalnumbers.below(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_good?_TCC4 0 (good_good?_TCC4-1 nil 3804455654 ("" (skeep* :preds? t) (("" (typepred "A(i)(n1)") (("" (grind) nil nil)) nil)) nil) nil nil (good_good? subtype "(number_fields.+)(sigmatopdown.i, sigmatopdown.span(sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)))" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown good_good?_TCC5 0 (good_good?_TCC5-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_good?_TCC6 0 (good_good?_TCC6-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "sigmatopdown.A((number_fields.+)(sigmatopdown.i, sigmatopdown.span(sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1))))(sigmatopdown.n2)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_good?_TCC7 0 (good_good?_TCC7-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_good?_TCC8 0 (good_good?_TCC8-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_good?_TCC9 0 (good_good?_TCC9-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n2)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_good?_TCC10 0 (good_good?_TCC10-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_good?_TCC11 0 (good_good?_TCC11-1 nil 3806878024 ("" (subtype-tcc) nil nil) nil nil (good_good? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_tscaffold?_TCC1 0 (good_tscaffold?_TCC1-1 nil 3806632141 ("" (subtype-tcc) nil nil) nil nil (good_tscaffold? subtype "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n)" "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))("sigmatopdown" sigmatopdown good_good_tscaffold 0 (good_good_tscaffold-2 "updated with depth bound" 3806872130 ("" (skeep*) (("" (expand "good_tscaffold?") (("" (skeep*) (("" (inst - i n) (("" (expand good_entry?) (("" (lift-if + :updates? nil) (("" (ground) (("1" (case "i = pos!1" "n = nt!1") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (assert) (("2" (expand "good_fail?") (("2" (lift-if) (("2" (ground) (("1" (grind) nil nil) ("2" (hide -11) (("2" (grind :exclude gfcount) nil nil)) nil) ("3" (hide -11) (("3" (grind :exclude gfcount) nil nil)) nil) ("4" (hide -10) (("4" (grind :exclude gfcount) nil nil)) nil) ("5" (hide -10) (("5" (grind :exclude gfcount) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -6) (("3" (grind :exclude gfcount) nil nil)) nil)) nil) ("2" (hide -5) (("2" (expand "gfcount" +) (("2" (rewrite "scafcount_update") (("2" (hide -6) (("2" (reveal -3) (("2" (lazy-grind :if-match all :exclude scafcount) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (inst? -) (("3" (grind :exclude gfcount) nil nil)) nil) ("4" (hide -7) (("4" (reveal -2) (("4" (lazy-grind :if-match all :exclude scafcount) nil nil)) nil)) nil) ("5" (typepred u) (("5" (hide -5 -7) (("5" (typepred "A(i)(n)") (("5" (grind :exclude gfcount) nil nil)) nil)) nil)) nil) ("6" (hide -6) (("6" (hide -2) (("6" (lift-if) (("6" (ground) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (lift-if) (("3" (ground) (("1" (expand good_good?) (("1" (lift-if) (("1" (ground) (("1" (ground) (("1" (grind) nil nil) ("2" (grind :exclude max) nil nil)) nil) ("2" (grind :exclude max) nil nil) ("3" (grind :exclude max) nil nil) ("4" (grind :exclude max) nil nil) ("5" (grind :exclude max) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil)) nil)) nil)) nil) ("2" (grind :exclude (max gfcount)) nil nil)) nil)) nil) ("4" (grind :exclude max) nil nil) ("5" (grind :exclude max) nil nil)) nil)) nil)) nil)) nil) ("7" (hide -5 -7) (("7" (typepred "A(i)(n)") (("7" (expand "gfcount" +) (("7" (rewrite scafcount_update) (("7" (reveal -3) (("7" (lazy-grind :if-match all :exclude scafcount) nil nil)) nil)) nil)) nil)) nil)) nil) ("8" (hide -4 -6) (("8" (reveal -3) (("8" (lazy-grind :if-match all :exclude scafcount) nil nil)) nil)) nil) ("9" (hide -5) (("9" (grind :exclude max) nil nil)) nil) ("10" (hide -6) (("10" (expand gfcount) (("10" (reveal -2) (("10" (hide -5) (("10" (rewrite "scafcount_update") (("10" (lift-if) (("10" (ground) (("10" (lift-if) (("10" (ground) (("10" (expand fine_entry?) (("10" (expand "good_fail?") (("10" (lift-if) (("10" (ground) (("1" (inst?) (("1" (grind :exclude scafcount) nil nil)) nil) ("2" (inst? :copy? t) (("2" (inst - "span(A(pos!1)(e1(G(nt!1)))) + pos!1" "e2(G(nt!1))") (("2" (grind :exclude scafcount) nil nil)) nil)) nil) ("3" (inst? :copy? t) (("3" (inst - "pos!1" "e2(G(nt!1))") (("3" (grind :exclude scafcount) nil nil)) nil)) nil) ("4" (inst?) (("4" (grind :exclude scafcount) nil nil)) nil) ("5" (inst?) (("5" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("11" (inst?) (("11" (grind :exclude (max gfcount)) nil nil)) nil) ("12" (hide -4 -6) (("12" (expand gfcount) (("12" (rewrite scafcount_update) (("12" (reveal -3) (("12" (lazy-grind :if-match all :exclude (max scafcount)) nil nil)) nil)) nil)) nil)) nil) ("13" (typepred "A(i)(n)") (("13" (typepred "u") (("13" (hide -5 -7) (("13" (grind :exclude (max gfcount)) nil nil)) nil)) nil)) nil) ("14" (hide -5) (("14" (typepred "A(i)(n)") (("14" (typepred "u") (("14" (grind :exclude (max gfcount)) nil nil)) nil)) nil)) nil) ("15" (hide -6) (("15" (reveal -2) (("15" (expand gfcount) (("15" (rewrite scafcount_update) (("15" (lift-if) (("15" (ground) (("1" (lift-if) (("1" (ground) (("1" (hide -15) (("1" (grind :exclude (max scafcount)) nil nil)) nil)) nil)) nil) ("2" (lift-if) (("2" (ground) (("2" (hide -15) (("2" (grind :exclude (max scafcount)) nil nil)) nil)) nil)) nil) ("3" (lift-if) (("3" (ground) (("3" (hide -16) (("3" (grind :exclude (max scafcount)) nil nil)) nil)) nil)) nil) ("4" (lift-if) (("4" (ground) (("4" (expand fine_entry?) (("4" (ground) (("4" (expand "good_good?") (("4" (lift-if) (("4" (ground) (("1" (inst? :copy? t) (("1" (inst - "span(A(pos!1)(e1(G(nt!1)))) + pos!1" "e2(G(nt!1))") (("1" (grind :exclude scafcount) nil nil)) nil)) nil) ("2" (inst?) (("2" (grind :exclude scafcount) nil nil)) nil) ("3" (inst? :copy? t) (("3" (inst - "pos!1" "e2(G(nt!1))") (("3" (grind :exclude scafcount) nil nil)) nil)) nil) ("4" (inst?) (("4" (grind :exclude scafcount) nil nil)) nil) ("5" (inst?) (("5" (grind :exclude scafcount) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("16" (expand "gfcount" +) (("16" (rewrite scafcount_update) (("16" (hide -5) (("16" (reveal -2) (("16" (lazy-grind :if-match all :exclude (max scafcount)) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals)) shostak) (good_good_tscaffold-1 nil 3804994419 ("" (skeep*) (("" (expand "good_tscaffold?") (("" (skeep*) (("" (inst - i n) (("" (expand good_entry?) (("" (lift-if + :updates? nil) (("" (ground) (("1" (case "i = pos(entry)" "n = nt(entry)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (assert) (("2" (hide -7 -8) (("2" (grind) nil nil)) nil)) nil) ("3" (hide -6 -7) (("3" (grind) nil nil)) nil)) nil) ("2" (case "i = pos(entry)" "n = nt(entry)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (assert) (("2" (forward-chain -) (("2" (grind) nil nil)) nil)) nil) ("3" (assert) (("3" (forward-chain -) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("sigmatopdown" sigmatopdown state_TCC1 0 (state_TCC1-1 nil 3804904050 ("" (grind) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals)) nil (state subtype "sigmatopdown.stack" "(sigmatopdown.push?)")))("sigmatopdown" sigmatopdown state_TCC2 0 (state_TCC1-1 nil 3804730988 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (state subtype "sigmatopdown.pos(sigmatopdown.stack)" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown state_TCC3 0 (state_TCC2-1 nil 3804730988 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (state subtype "sigmatopdown.nt(sigmatopdown.stack)" "non_terminal")))("sigmatopdown" sigmatopdown step_TCC1 0 (step_TCC66-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.stack" "(sigmatopdown.push?)")))("sigmatopdown" sigmatopdown step_TCC2 0 (step_TCC1-1 nil 3804547853 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.cur" "non_terminal")))("sigmatopdown" sigmatopdown step_TCC3 0 (step_TCC10-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.pos" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown step_TCC4 0 (step_TCC3-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "0" "uint64")))("sigmatopdown" sigmatopdown step_TCC5 0 (step_TCC91-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "0" "uint32")))("sigmatopdown" sigmatopdown step_TCC6 0 (step_TCC4-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.good(0, 0)" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC7 0 (step_TCC5-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (skeep*) (("3" (typepred lflag) (("3" (ground) (("1" (inst?) nil nil) ("2" (hide 2) (("2" (grind) nil nil)) nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good(0, 0)]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC8 0 (step_TCC1-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred pos (stack)) (("1" (grind) nil nil)) nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                       count(num_non_terminals)(push?)
                            (St`scaf WITH [(pos!1)(cur) := good(0, 0)](i))) = ((LAMBDA (i: upto(len)):
                       count(num_non_terminals)(push?)(St`scaf(i)))
                      WITH [(pos!1)
                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                  1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                            push?(St`scaf(x!1) WITH [(cur) := good(0, 0)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (ground) (("1" (expand nonempty?) (("1" (expand empty?) (("1" (inst - cur) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (hide -1 3) (("3" (expand count) (("3" (lemma "nonempty_card[below(num_non_terminals)]") (("3" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good(0, 0)]))")))("sigmatopdown" sigmatopdown step_TCC9 0 (step_TCC2-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest "good(0, 0)") (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "good(0, 0)") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good(0, 0)]))")))("sigmatopdown" sigmatopdown step_TCC10 0 (step_TCC83-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good(0, 0)], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good(0, 0)](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC11 0 (step_TCC100-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "0" "uint64")))("sigmatopdown" sigmatopdown step_TCC12 0 (step_TCC8-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.fail(0)" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC13 0 (step_TCC9-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail(0)]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC14 0 (step_TCC6-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred pos (stack)) (("1" (grind) nil nil)) nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                               count(num_non_terminals)(push?)
                                    (St`scaf WITH [(pos!1)(cur) := fail(0)](i))) = ((LAMBDA (i: upto(len)):
                               count(num_non_terminals)(push?)(St`scaf(i)))
                              WITH [(pos!1)
                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                          1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                          push?(St`scaf(x!1) WITH [(cur) := fail(0)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (ground) (("1" (expand nonempty?) (("1" (expand empty?) (("1" (inst - cur) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (hide -1 3) (("3" (expand count) (("3" (lemma "nonempty_card[below(num_non_terminals)]") (("3" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail(0)]))")))("sigmatopdown" sigmatopdown step_TCC15 0 (step_TCC7-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest "fail(0)") (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "fail(0)") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail(0)]))")))("sigmatopdown" sigmatopdown step_TCC16 0 (step_TCC84-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail(0)], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail(0)](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC17 0 (step_TCC16-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.pos" "naturalnumbers.below(sigmatopdown.len)")))("sigmatopdown" sigmatopdown step_TCC18 0 (step_TCC24-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "0" "uint64")))("sigmatopdown" sigmatopdown step_TCC19 0 (step_TCC25-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "0" "uint64")))("sigmatopdown" sigmatopdown step_TCC20 0 (step_TCC11-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "1" "uint32")))("sigmatopdown" sigmatopdown step_TCC21 0 (step_TCC14-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.v" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC22 0 (step_TCC15-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC23 0 (step_TCC12-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                       count(num_non_terminals)(push?)
                                                            (St`scaf WITH [(pos!1)(cur) := v](i))) = ((LAMBDA (i: upto(len)):
                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                      WITH [(pos!1)
                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                  1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                    push?(St`scaf(x!1) WITH [(cur) := v](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (ground) (("1" (expand nonempty?) (("1" (expand empty?) (("1" (inst - cur) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (hide -1 3) (("3" (expand count) (("3" (lemma "nonempty_card[below(num_non_terminals)]") (("3" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (successor const-decl "bool" sigmatopdown nil) (empty? const-decl "bool" sigmatopdown nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint32 type-eq-decl nil integertypes nil) (ent type-decl nil sigmatopdown nil) (good_push_entry? const-decl "bool" sigmatopdown nil) (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatopdown nil) (num_non_terminals const-decl "byte" sigmatopdown nil) (non_terminal type-eq-decl nil sigmatopdown nil) (peg type-decl nil sigmatopdown nil) (lang_spec type-eq-decl nil sigmatopdown nil) (uint64 type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (nice_entry? const-decl "bool" sigmatopdown nil) (scaffold type-eq-decl nil sigmatopdown nil) (good_stack? def-decl "bool" sigmatopdown nil) (below type-eq-decl nil naturalnumbers nil) (strings type-eq-decl nil sigmatopdown nil) (fine_scaffold? const-decl "bool" sigmatopdown nil) (good_depth? const-decl "bool" sigmatopdown nil) (fine_stack? def-decl "bool" sigmatopdown nil) (IF const-decl "[boolean, T, T -> T]" if_def nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil) (uint8 type-eq-decl nil integertypes nil) (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil) (loop_ready? const-decl "bool" sigmatopdown nil) (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil) (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil) (state type-eq-decl nil sigmatopdown nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (sigma_nat application-judgement "nat" sigma reals) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (pushcount const-decl "uint64" sigmatopdown nil) (scafcount const-decl "uint64" sigmatopdown nil) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_dec formula-decl nil sigmatopdown nil) (arr type-eq-decl nil arrayCount nil) (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatopdown nil) (rootnt skolem-const-decl "non_terminal" sigmatopdown nil) (start skolem-const-decl "upto(len)" sigmatopdown nil) (s skolem-const-decl "strings(len)" sigmatopdown nil) (G skolem-const-decl "lang_spec" sigmatopdown nil) (v skolem-const-decl "ent" sigmatopdown nil) (pos!1 skolem-const-decl "uint32" sigmatopdown nil) (len skolem-const-decl "uint32" sigmatopdown nil) (good_good_entry? const-decl "bool" sigmatopdown nil) (member const-decl "bool" sets nil) (/= const-decl "boolean" notequal nil) (x!1 skolem-const-decl "upto(len)" sigmatopdown nil) (finite_set type-eq-decl nil finite_sets nil) (is_finite const-decl "bool" finite_sets nil) (card_remove formula-decl nil finite_sets nil) (count_TCC1 subtype-tcc nil arrayCount nil) (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil) (nonempty? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil) (nonempty_card formula-decl nil finite_sets nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil) (nil application-judgement "above(n)" exp2 nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v]))")))("sigmatopdown" sigmatopdown step_TCC24 0 (step_TCC13-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest v) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "stack") (("2" (grind) nil nil)) nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "v") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v]))")))("sigmatopdown" sigmatopdown step_TCC25 0 (step_TCC89-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC26 0 (step_TCC44-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.pos" "naturalnumbers.below(sigmatopdown.len)")))("sigmatopdown" sigmatopdown step_TCC27 0 (step_TCC33-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "0" "uint64")))("sigmatopdown" sigmatopdown step_TCC28 0 (step_TCC34-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "0" "uint64")))("sigmatopdown" sigmatopdown step_TCC29 0 (step_TCC17-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "1" "uint32")))("sigmatopdown" sigmatopdown step_TCC30 0 (step_TCC20-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.v" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC31 0 (step_TCC21-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC32 0 (step_TCC18-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                       count(num_non_terminals)(push?)
                                                            (St`scaf WITH [(pos!1)(cur) := v](i))) = ((LAMBDA (i: upto(len)):
                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                      WITH [(pos!1)
                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                  1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                    push?(St`scaf(x!1) WITH [(cur) := v](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (ground) (("1" (expand nonempty?) (("1" (expand empty?) (("1" (inst - cur) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (hide -1 3) (("3" (expand count) (("3" (lemma "nonempty_card[below(num_non_terminals)]") (("3" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (lemma "nonempty_card[below(num_non_terminals)]") (("2" (inst?) (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v]))")))("sigmatopdown" sigmatopdown step_TCC33 0 (step_TCC19-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest v) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "stack") (("2" (grind) nil nil)) nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "v") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v]))")))("sigmatopdown" sigmatopdown step_TCC34 0 (step_TCC90-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC35 0 (step_TCC42-1 nil 3804455654 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst - pos!1 n1) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.d1, 1)" "uint64")))("sigmatopdown" sigmatopdown step_TCC36 0 (step_TCC43-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC37 0 (step_TCC55-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC38 0 (step_TCC22-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                               count(num_non_terminals)(push?)
                                                                    (St`scaf WITH [(pos!1)(cur) := fail(1 + d1)](i))) = ((LAMBDA (i: upto(len)):
                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                              WITH [(pos!1)
                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                          1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                                  push?(St`scaf(x!1) WITH [(cur) := fail(1 + d1)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil) ("3" (skeep*) (("3" (use step_TCC35) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -6 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (skeep*) (("4" (use step_TCC35) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count +) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (ground) (("1" (expand nonempty?) (("1" (expand empty?) (("1" (inst - "nt(stack)") (("1" (grind) nil nil) ("2" (assert) (("2" (typepred "nt(stack)") (("2" (expand "good_push_entry?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "count_TCC1") nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (use step_TCC35) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -1) (("3" (expand count) (("3" (use "nonempty_card[below(num_non_terminals)]") (("1" (ground) (("1" (hide -5 5) (("1" (grind) nil nil)) nil)) nil) ("2" (rewrite "count_TCC1") nil nil)) nil)) nil)) nil) ("4" (hide -1 3) (("4" (grind) nil nil)) nil) ("5" (use step_TCC35) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]))")))("sigmatopdown" sigmatopdown step_TCC39 0 (step_TCC23-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest "fail(1 + d1)") (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (expand nice_entry?) (("2" (propax) nil nil)) nil)) nil) ("3" (typepred "stack") (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "fail(1 + d1)") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]))")))("sigmatopdown" sigmatopdown step_TCC40 0 (step_TCC95-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, sigmatopdown.d1))], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, sigmatopdown.d1))](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC41 0 (step_TCC30-1 nil 3804455654 ("" (skeep*) (("" (typepred "St`scaf(pos!1)(n1)") (("" (grind) nil nil)) nil)) nil) nil nil (step subtype "(number_fields.+)(sigmatopdown.pos, sigmatopdown.sp)" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown step_TCC42 0 (step_TCC75-1 nil 3804455654 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst-cp - pos!1 n1) (("" (inst - pos!1+sp n2) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1 + sp)(n2)) = d2") (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) (("1" (expand max) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2))" "uint64")))("sigmatopdown" sigmatopdown step_TCC43 0 (step_TCC56-1 nil 3804455654 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (expand nice_entry?) (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC44 0 (step_TCC63-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC45 0 (step_TCC31-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (rewrite scafcount_update) (("1" (grind :exclude scafcount) nil nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))]))")))("sigmatopdown" sigmatopdown step_TCC46 0 (step_TCC32-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest "fail(1 + max(d1, d2))") (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (expand nice_entry?) (("2" (propax) nil nil)) nil)) nil) ("3" (typepred "stack") (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "fail(1 + max(d1, d2))") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))]))")))("sigmatopdown" sigmatopdown step_TCC47 0 (step_TCC117-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC48 0 (step_TCC64-1 nil 3804455654 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst-cp - pos!1 n1) (("" (inst - pos!1+sp n2) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1 + sp)(n2)) = d2") (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) (("1" (expand max) (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2))" "uint64")))("sigmatopdown" sigmatopdown step_TCC49 0 (step_TCC41-1 nil 3804455654 ("" (skeep*) (("" (typepred "St`scaf(pos!1)(n1)") (("" (typepred "St`scaf(pos!1 + sp)(n2)") (("" (typepred len) (("" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "(number_fields.+)(sigmatopdown.sp, sigmatopdown.sp2)" "uint32")))("sigmatopdown" sigmatopdown step_TCC50 0 (step_TCC76-1 nil 3804455654 ("" (skeep*) (("" (typepred "St`scaf(pos!1)(n1)") (("" (typepred "St`scaf(pos!1 + sp)(n2)") (("" (grind) nil nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), (number_fields.+)(sigmatopdown.sp, sigmatopdown.sp2))" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC51 0 (step_TCC83-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (ground) (("1" (typepred "St`scaf(pos!1 + sp)(n2)") (("1" (grind) nil nil)) nil) ("2" (expand good_good?) (("2" (grind :exclude (max gfcount)) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "St`scaf(pos!1 + sp)(n2)") (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), (number_fields.+)(sigmatopdown.sp, sigmatopdown.sp2))]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC52 0 (step_TCC39-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                                       count(num_non_terminals)(push?)
                                                                            (St`scaf WITH [(pos!1)(cur) := good(1 + max(d1, d2), sp2 + sp)](i))) = ((LAMBDA (i: upto(len)):
                                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                                      WITH [(pos!1)
                                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                  1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                                                push?(St`scaf(x!1) WITH [(cur) := good(1 + max(d1, d2), sp2 + sp)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "St`scaf(pos!1 + sp)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (skeep*) (("3" (use step_TCC49) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (hide -6 2) (("4" (typepred "St`scaf(pos!1)(n1)") (("4" (typepred "St`scaf(pos!1 + sp)(n2)") (("4" (skeep*) (("4" (use step_TCC48) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (skeep*) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1 + sp)(n2)") (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (skeep*) (("4" (use step_TCC49) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (skeep*) (("5" (use step_TCC48) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil) ("3" (hide 2) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1 + sp)(n2)") (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (use step_TCC49) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("5" (hide 2) (("5" (use step_TCC48) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -1 3) (("3" (expand count) (("3" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil) ("4" (hide -1 3) (("4" (typepred "St`scaf(pos!1)(n1)") (("4" (typepred "St`scaf(pos!1 + sp)(n2)") (("4" (grind) nil nil)) nil)) nil)) nil) ("5" (hide -1 3) (("5" (use step_TCC49) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("6" (hide -1 3) (("6" (use step_TCC48) (("6" (ground) (("6" (inst?) (("6" (inst?) (("6" (inst?) (("6" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), (number_fields.+)(sigmatopdown.sp, sigmatopdown.sp2))]))")))("sigmatopdown" sigmatopdown step_TCC53 0 (step_TCC40-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest "good(1 + max(d1, d2), sp2 + sp)") (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "stack") (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "St`scaf(pos!1 + sp)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("3" (use step_TCC52) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "good(1 + max(d1, d2), sp2 + sp)") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "St`scaf(pos!1 + sp)(n2)") (("2" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), (number_fields.+)(sigmatopdown.sp, sigmatopdown.sp2))]))")))("sigmatopdown" sigmatopdown step_TCC54 0 (step_TCC81-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), (number_fields.+)(sigmatopdown.sp2, sigmatopdown.sp))], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), (number_fields.+)(sigmatopdown.sp2, sigmatopdown.sp))](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC55 0 (step_TCC45-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.St`stack" "(sigmatopdown.nice_entry?(sigmatopdown.len, (number_fields.+)(sigmatopdown.pos, sigmatopdown.sp)))")))("sigmatopdown" sigmatopdown step_TCC56 0 (step_TCC46-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (typepred "St`scaf(pos!1 + sp)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (ground) (("1" (grind) nil nil) ("2" (hide -5) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (hide -1) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (hide -2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [((number_fields.+)(sigmatopdown.pos, sigmatopdown.sp))(sigmatopdown.n2) := sigmatopdown.St`stack]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC57 0 (step_TCC49-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred depth) (("1" (expand good_depth?) (("1" (expand pushcount) (("1" (use scafcount_max) (("1" (assert) (("1" (use exp2_lt :subst (n 41 m 64)) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "good_depth?") (("2" (expand pushcount) (("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude (max scafcount)) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "(number_fields.+)(sigmatopdown.St`depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [((number_fields.+)(sigmatopdown.pos, sigmatopdown.sp))(sigmatopdown.n2) := sigmatopdown.St`stack]))")))("sigmatopdown" sigmatopdown step_TCC58 0 (step_TCC50-1 nil 3804455654 ("" (skeep*) (("" (typepred "St`scaf(pos!1)(n1)") (("" (typepred "St`scaf(pos!1 + sp)(n2)") (("" (typepred len) (("" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "(number_fields.+)(sigmatopdown.pos, sigmatopdown.sp)" "uint32")))("sigmatopdown" sigmatopdown step_TCC59 0 (step_TCC65-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil)) nil) ("2" (lemma good_mem_stack) (("2" (expand good_stack? +) (("2" (ground) (("1" (hide -1) (("1" (grind) nil nil)) nil) ("2" (inst - G "depth" len scaf "push(pos!1 + sp, n2)" "stack" stack) (("1" (ground) (("1" (hide 2) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil)) nil)) nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil) ("3" (hide 2) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (grind) nil nil)) nil)) nil) ("4" (typepred "St`scaf(pos!1)(n1)") (("4" (typepred len) (("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand fine_stack? +) (("3" (ground) (("1" (lemma mem_mem_stack) (("1" (inst - G depth len scaf _ _ _ _) (("1" (inst - "push(pos!1 + sp, n2)" "push(pos!1 + sp, n2)" stack stack) (("1" (ground) (("1" (use mem_stack_push) (("1" (ground) nil nil)) nil) ("2" (typepred "St`scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos!1)(n1)") (("3" (grind) nil nil)) nil) ("4" (use mem_stack_push) (("4" (ground) nil nil)) nil) ("5" (typepred "St`scaf(pos!1)(n1)") (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos!1)(n1)") (("3" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (use fine_mem_stack :subst (len len entry "push(pos!1 + sp, n2)")) (("1" (ground) (("1" (hide 2) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil)) nil)) nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos!1)(n1)") (("3" (grind) nil nil)) nil) ("4" (typepred "St`scaf(pos!1)(n1)") (("4" (typepred len) (("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.push((number_fields.+)(sigmatopdown.pos, sigmatopdown.sp), sigmatopdown.n2)" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.+)(sigmatopdown.St`depth, 1), sigmatopdown.St`scaf WITH [((number_fields.+)(sigmatopdown.pos, sigmatopdown.sp))(sigmatopdown.n2) := sigmatopdown.St`stack]))")))("sigmatopdown" sigmatopdown step_TCC60 0 (step_TCC82-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (skeep*) (("2" (lift-if) (("2" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.n2 = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [((number_fields.+)(sigmatopdown.pos, sigmatopdown.sp))(sigmatopdown.n2) := sigmatopdown.St`stack], (number_fields.+)(sigmatopdown.pos, sigmatopdown.sp), sigmatopdown.n2)) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [((number_fields.+)(sigmatopdown.pos, sigmatopdown.sp))(sigmatopdown.n2) := sigmatopdown.St`stack](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC61 0 (step_TCC28-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.loop" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC62 0 (step_TCC29-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (typepred "St`scaf(pos!1 + sp)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -5) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC63 0 (step_TCC26-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind :exclude sigma) nil nil)) nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)
                                                                                    (St`scaf WITH [(pos!1)(cur) := loop](i))) = ((LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                                              WITH [(pos!1)
                                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                          1])") (("1" (hide -1) (("1" (replace -1 :hide? t) (("1" (assert) nil nil)) nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality :hide? t) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                                                              push?(St`scaf(x!1) WITH [(cur) := loop](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil) ("3" (expand count) (("3" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC64 0 (step_TCC27-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" loop) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`stack") (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind :exclude mem_stack) nil nil) ("2" (hide -1) (("2" (replace -8) (("2" (replace -9) (("2" (replace -5) (("2" (case-replace "push(pos(St`stack), nt(St`stack)) = St`stack") (("1" (case-replace "St`scaf(pos(St`stack))(nt(St`stack)) = rest") (("1" (assert) nil nil) ("2" (assert) nil nil)) nil) ("2" (apply-extensionality 1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil) ("3" (lemma fine_mem_stack) (("3" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" loop) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand "fine_stack?") (("4" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (case-replace "St`scaf(pos(stack))(nt(stack)) = rest") (("1" (case-replace "push(pos!1, cur) = St`stack") (("1" (assert) nil nil) ("2" (apply-extensionality 1) (("2" (grind) nil nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC65 0 (step_TCC103-1 nil 3804706560 ("" (skeep*) (("" (typepred stack) (("" (grind :exclude mem_stack?) nil nil)) nil)) nil) nil nil (step subtype "booleans.TRUE" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC66 0 (step_TCC95-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.stack" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC67 0 (step_TCC77-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC68 0 (step_TCC78-1 nil 3804455654 ("" (skeep*) (("" (split) (("1" (typepred stack) (("1" (typepred depth) (("1" (expand good_depth?) (("1" (expand pushcount) (("1" (use scafcount_max) (("1" (assert) (("1" (use exp2_lt :subst (n 41 m 64)) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "good_depth?") (("2" (expand pushcount) (("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC69 0 (step_TCC94-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (expand "good_stack?" +) (("2" (ground) (("1" (grind) nil nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth" len scaf "push(pos!1, n1)" "stack" stack) (("1" (ground) (("1" (grind) nil nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand fine_stack? +) (("3" (ground) (("1" (lemma mem_mem_stack) (("1" (inst - G depth len scaf _ _ _ _) (("1" (inst - "push(pos!1, n1)" "push(pos!1, n1)" stack stack) (("1" (ground) (("1" (hide -2) (("1" (use mem_stack_push) (("1" (ground) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil) ("4" (use mem_stack_push) (("4" (ground) nil nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (use fine_mem_stack :subst (len len entry "push(pos!1, n1)" u stack stack stack)) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.push(sigmatopdown.pos, sigmatopdown.n1)" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.+)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC70 0 (step_TCC104-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (skeep*) (("2" (lift-if) (("2" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.n1 = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack], sigmatopdown.pos, sigmatopdown.n1)) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC71 0 (step_TCC37-1 nil 3804455654 ("" (grind) nil nil) nil nil (step subtype "sigmatopdown.loop" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC72 0 (step_TCC38-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC73 0 (step_TCC35-1 nil 3804455654 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC74 0 (step_TCC36-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" loop) (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u loop stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC75 0 (step_TCC98-1 nil 3804455654 ("" (skeep*) (("" (typepred stack) (("" (expand good_stack?) (("" (ground) (("1" (grind) nil nil) ("2" (grind :exclude (good_stack? fine_stack? mem_stack?)) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "booleans.TRUE" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC76 0 (step_TCC84-1 nil 3804455654 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst-cp - pos!1 n1) (("" (inst - pos!1 n2) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n2)) = d2") (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals)) nil (step subtype "(number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1)" "uint64")))("sigmatopdown" sigmatopdown step_TCC77 0 (step_TCC92-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.fail((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1))" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC78 0 (step_TCC93-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1))]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC79 0 (step_TCC53-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)
                                                                                    (St`scaf WITH [(pos!1)(cur) := fail(1 + max(d1, d2))](i))) = ((LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                                              WITH [(pos!1)
                                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                          1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                                                              push?(St`scaf(x!1) WITH [(cur) := fail(1 + max(d1, d2))](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil)) nil) ("3" (skeep*) (("3" (use step_TCC76) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -6 2) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1)(n2)") (("3" (skeep*) (("3" (use step_TCC77) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1)(n2)") (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (skeep*) (("4" (use step_TCC76) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil) ("3" (hide 2) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1)(n2)") (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (use step_TCC76) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand count) (("3" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil) ("4" (use step_TCC77) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (hide -1 3) (("5" (use step_TCC76) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1))]))")))("sigmatopdown" sigmatopdown step_TCC80 0 (step_TCC54-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest "fail(1 + max(d1, d2))") (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "stack") (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "St`scaf(pos!1)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "fail(1 + max(d1, d2))") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "St`scaf(pos!1)(n2)") (("2" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1))]))")))("sigmatopdown" sigmatopdown step_TCC81 0 (step_TCC96-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC82 0 (step_TCC101-1 nil 3804455654 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst-cp - pos!1 n1) (("" (inst - pos!1 n2) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n2)) = d2") (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals)) nil (step subtype "(number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1)" "uint64")))("sigmatopdown" sigmatopdown step_TCC83 0 (step_TCC102-1 nil 3804455654 ("" (skeep*) (("" (typepred "St`scaf(pos!1)(n1)") (("" (typepred "St`scaf(pos!1)(n2)") (("" (grind) nil nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.good((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1), sigmatopdown.sp)" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC84 0 (step_TCC84-1 nil 3808434333 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (typepred "scaf(pos!1)(n1)") (("2" (typepred "scaf(pos!1)(n2)") (("2" (hide 2) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (typepred "scaf(pos!1)(n1)") (("2" (typepred "scaf(pos!1)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1), sigmatopdown.sp)]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC85 0 (step_TCC57-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)
                                                                                            (St`scaf WITH [(pos!1)(cur) := good(1 + max(d1, d2), sp)](i))) = ((LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                                                      WITH [(pos!1)
                                                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                                  1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                                                                            push?(St`scaf(x!1) WITH [(cur) := good(1 + max(d1, d2), sp)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "scaf(pos!1)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (skeep*) (("3" (use step_TCC82) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -6 2) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1)(n2)") (("3" (skeep*) (("3" (use step_TCC83) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1)(n2)") (("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (skeep*) (("4" (use step_TCC82) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil) ("3" (hide 2) (("3" (typepred "St`scaf(pos!1)(n1)") (("3" (typepred "St`scaf(pos!1)(n2)") (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (hide 2) (("4" (use step_TCC82) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand count) (("3" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil) ("4" (use step_TCC83) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (hide -1 3) (("5" (use step_TCC82) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1), sigmatopdown.sp)]))")))("sigmatopdown" sigmatopdown step_TCC86 0 (step_TCC58-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred rest) (("1" (typepred stack) (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf stack rest "good(1 + max(d1, d2), sp)") (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (expand good_stack? -) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("3" (grind) nil nil)) nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "stack") (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "St`scaf(pos!1)(n2)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("3" (use step_TCC85) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (typepred stack) (("3" (expand fine_stack? -) (("3" (ground) (("1" (grind) nil nil) ("2" (lemma fine_mem_stack) (("2" (ground) (("2" (expand good_stack? -) (("2" (inst - G "depth - 1" len scaf stack rest "good(1 + max(d1, d2), sp)") (("1" (ground) (("1" (expand good_stack? -) (("1" (propax) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil) ("5" (grind) nil nil) ("6" (grind) nil nil) ("7" (grind) nil nil) ("8" (grind) nil nil) ("9" (grind) nil nil) ("10" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos!1)(n1)") (("2" (typepred "St`scaf(pos!1)(n2)") (("2" (grind) nil nil)) nil)) nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1), sigmatopdown.sp)]))")))("sigmatopdown" sigmatopdown step_TCC87 0 (step_TCC99-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), sigmatopdown.sp)], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), sigmatopdown.sp)](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC88 0 (step_TCC91-1 nil 3804706560 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.stack" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC89 0 (step_TCC111-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n2) := sigmatopdown.stack]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC90 0 (step_TCC112-1 nil 3804455654 ("" (skeep*) (("" (split) (("1" (typepred stack) (("1" (typepred depth) (("1" (expand good_depth?) (("1" (expand pushcount) (("1" (use scafcount_max) (("1" (assert) (("1" (use exp2_lt :subst (n 41 m 64)) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "good_depth?") (("2" (expand pushcount) (("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n2) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC91 0 (step_TCC78-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (expand "good_stack?" +) (("2" (ground) (("1" (grind) nil nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth" len scaf "push(pos!1, n2)" "stack" stack) (("1" (ground) (("1" (grind) nil nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand fine_stack? +) (("3" (ground) (("1" (lemma mem_mem_stack) (("1" (inst - G depth len scaf _ _ _ _) (("1" (inst - "push(pos!1, n2)" "push(pos!1, n2)" stack stack) (("1" (ground) (("1" (hide -2) (("1" (use mem_stack_push) (("1" (ground) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil) ("4" (use mem_stack_push) (("4" (ground) nil nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (use fine_mem_stack :subst (len len entry "push(pos!1, n2)" u stack stack stack)) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.push(sigmatopdown.pos, sigmatopdown.n2)" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.+)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n2) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC92 0 (step_TCC119-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (skeep*) (("2" (lift-if) (("2" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.n2 = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n2) := sigmatopdown.stack], sigmatopdown.pos, sigmatopdown.n2)) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n2) := sigmatopdown.stack](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC93 0 (step_TCC59-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.loop" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC94 0 (step_TCC60-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC95 0 (step_TCC69-1 nil 3804455654 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC96 0 (step_TCC70-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" loop) (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u loop stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC97 0 (step_TCC118-1 nil 3804706560 ("" (skeep*) (("" (typepred stack) (("" (expand good_stack?) (("" (ground) (("1" (grind) nil nil) ("2" (grind :exclude (good_stack? fine_stack? mem_stack?)) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "booleans.TRUE" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC98 0 (step_TCC109-1 nil 3804455654 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst - pos!1 n1) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.d1, 1)" "uint64")))("sigmatopdown" sigmatopdown step_TCC99 0 (step_TCC110-1 nil 3804455654 ("" (skeep*) (("" (typepred "St`scaf(pos!1)(n1)") (("" (grind) nil nil)) nil)) nil) nil nil (step subtype "sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), sigmatopdown.sp)" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC100 0 (step_TCC99-1 nil 3804991042 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (ground) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil)) nil) ("2" (expand good_good?) (("2" (grind :exclude (max gfcount)) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), sigmatopdown.sp)]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC101 0 (step_TCC61-1 nil 3804455654 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred "scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), sigmatopdown.sp)]))")))("sigmatopdown" sigmatopdown step_TCC102 0 (step_TCC62-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" "good(1 + d1, sp)") (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u " good(1 + d1, sp)" stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), sigmatopdown.sp)]))")))("sigmatopdown" sigmatopdown step_TCC103 0 (step_TCC116-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, sigmatopdown.d1), sigmatopdown.sp)], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, sigmatopdown.d1), sigmatopdown.sp)](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC104 0 (step_TCC112-1 nil 3804706560 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.stack" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC105 0 (step_TCC92-1 nil 3804706560 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC106 0 (step_TCC93-1 nil 3804706560 ("" (skeep*) (("" (split) (("1" (typepred stack) (("1" (typepred depth) (("1" (expand good_depth?) (("1" (expand pushcount) (("1" (use scafcount_max) (("1" (assert) (("1" (use exp2_lt :subst (n 41 m 64)) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "good_depth?") (("2" (expand pushcount) (("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC107 0 (step_TCC94-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (expand "good_stack?" +) (("2" (ground) (("1" (grind) nil nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth" len scaf "push(pos!1, n1)" "stack" stack) (("1" (ground) (("1" (grind) nil nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand fine_stack? +) (("3" (ground) (("1" (lemma mem_mem_stack) (("1" (inst - G depth len scaf _ _ _ _) (("1" (inst - "push(pos!1, n1)" "push(pos!1, n1)" stack stack) (("1" (ground) (("1" (hide -2) (("1" (use mem_stack_push) (("1" (ground) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil) ("4" (use mem_stack_push) (("4" (ground) nil nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (use fine_mem_stack :subst (len len entry "push(pos!1, n1)" u stack stack stack)) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.push(sigmatopdown.pos, sigmatopdown.n1)" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.+)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC108 0 (step_TCC125-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (skeep*) (("2" (lift-if) (("2" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.n1 = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack], sigmatopdown.pos, sigmatopdown.n1)) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC109 0 (step_TCC71-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.loop" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC110 0 (step_TCC72-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC111 0 (step_TCC85-1 nil 3804455654 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC112 0 (step_TCC86-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" loop) (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u loop stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC113 0 (step_TCC126-1 nil 3804706560 ("" (skeep*) (("" (typepred stack) (("" (expand good_stack?) (("" (ground) (("1" (grind) nil nil) ("2" (grind :exclude (good_stack? fine_stack? mem_stack?)) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "booleans.TRUE" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC114 0 (step_TCC113-1 nil 3804991042 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst - pos!1 n1) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.d1, 1)" "uint64")))("sigmatopdown" sigmatopdown step_TCC115 0 (step_TCC114-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC116 0 (step_TCC115-1 nil 3804991042 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC117 0 (step_TCC73-1 nil 3804455654 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)
                                                                                    (St`scaf WITH [(pos!1)(cur) := fail(1 + d1)](i))) = ((LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                                              WITH [(pos!1)
                                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                          1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                                                              push?(St`scaf(x!1) WITH [(cur) := fail(1 + d1)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil) ("3" (skeep*) (("3" (use step_TCC114) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -6 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (skeep*) (("4" (use step_TCC114) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count +) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (ground) (("1" (expand nonempty?) (("1" (expand empty?) (("1" (inst - "nt(stack)") (("1" (grind) nil nil) ("2" (assert) (("2" (typepred "nt(stack)") (("2" (expand "good_push_entry?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "count_TCC1") nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (use step_TCC114) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -1) (("3" (expand count) (("3" (use "nonempty_card[below(num_non_terminals)]") (("1" (ground) (("1" (hide -5 5) (("1" (grind) nil nil)) nil)) nil) ("2" (rewrite "count_TCC1") nil nil)) nil)) nil)) nil) ("4" (hide -1 3) (("4" (grind) nil nil)) nil) ("5" (use step_TCC114) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]))")))("sigmatopdown" sigmatopdown step_TCC118 0 (step_TCC74-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" "fail(1 + d1)") (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u "fail(1 + d1)" stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]))")))("sigmatopdown" sigmatopdown step_TCC119 0 (step_TCC127-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, sigmatopdown.d1))], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, sigmatopdown.d1))](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC120 0 (step_TCC119-1 nil 3804991042 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst - pos!1 n1) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.d1, 1)" "uint64")))("sigmatopdown" sigmatopdown step_TCC121 0 (step_TCC120-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil (step subtype "0" "uint32")))("sigmatopdown" sigmatopdown step_TCC122 0 (step_TCC121-1 nil 3804991042 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC123 0 (step_TCC122-1 nil 3804991042 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (ground) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil)) nil) ("2" (expand good_good?) (("2" (grind :exclude (max gfcount)) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (typepred "St`scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC124 0 (step_TCC107-1 nil 3804455654 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred "scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)]))")))("sigmatopdown" sigmatopdown step_TCC125 0 (step_TCC108-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" "good(1 + d1, 0)") (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u " good(1 + d1, 0)" stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)]))")))("sigmatopdown" sigmatopdown step_TCC126 0 (step_TCC128-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, sigmatopdown.d1), 0)], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, sigmatopdown.d1), 0)](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC127 0 (step_TCC133-1 nil 3804706560 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.stack" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC128 0 (step_TCC113-1 nil 3804706560 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC129 0 (step_TCC114-1 nil 3804706560 ("" (skeep*) (("" (split) (("1" (typepred stack) (("1" (typepred depth) (("1" (expand good_depth?) (("1" (expand pushcount) (("1" (use scafcount_max) (("1" (assert) (("1" (use exp2_lt :subst (n 41 m 64)) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "good_depth?") (("2" (expand pushcount) (("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC130 0 (step_TCC115-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (expand "good_stack?" +) (("2" (ground) (("1" (grind) nil nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth" len scaf "push(pos!1, n1)" "stack" stack) (("1" (ground) (("1" (grind) nil nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand fine_stack? +) (("3" (ground) (("1" (lemma mem_mem_stack) (("1" (inst - G depth len scaf _ _ _ _) (("1" (inst - "push(pos!1, n1)" "push(pos!1, n1)" stack stack) (("1" (ground) (("1" (hide -2) (("1" (use mem_stack_push) (("1" (ground) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil) ("4" (use mem_stack_push) (("4" (ground) nil nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (use fine_mem_stack :subst (len len entry "push(pos!1, n1)" u stack stack stack)) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.push(sigmatopdown.pos, sigmatopdown.n1)" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.+)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC131 0 (step_TCC137-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (skeep*) (("2" (lift-if) (("2" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.n1 = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack], sigmatopdown.pos, sigmatopdown.n1)) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC132 0 (step_TCC87-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.loop" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC133 0 (step_TCC88-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC134 0 (step_TCC103-1 nil 3804455654 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC135 0 (step_TCC104-1 nil 3804455654 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" loop) (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u loop stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC136 0 (step_TCC138-1 nil 3804706560 ("" (skeep*) (("" (typepred stack) (("" (expand good_stack?) (("" (ground) (("1" (grind) nil nil) ("2" (grind :exclude (good_stack? fine_stack? mem_stack?)) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "booleans.TRUE" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC137 0 (step_TCC136-1 nil 3804991042 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst - pos!1 n1) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.d1, 1)" "uint64")))("sigmatopdown" sigmatopdown step_TCC138 0 (step_TCC137-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil (step subtype "0" "uint32")))("sigmatopdown" sigmatopdown step_TCC139 0 (step_TCC138-1 nil 3804991042 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC140 0 (step_TCC139-1 nil 3804991042 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (ground) (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil)) nil) ("2" (expand good_good?) (("2" (grind :exclude (max gfcount)) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand nice_entry?) (("2" (expand good_good_entry?) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC141 0 (step_TCC110-1 nil 3804706560 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred "scaf(pos!1)(n1)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)]))")))("sigmatopdown" sigmatopdown step_TCC142 0 (step_TCC111-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" "good(1 + d1, 0)") (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u " good(1 + d1, 0)" stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)]))")))("sigmatopdown" sigmatopdown step_TCC143 0 (step_TCC139-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, sigmatopdown.d1), 0)], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, sigmatopdown.d1), 0)](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC144 0 (step_TCC143-1 nil 3804991042 ("" (skeep*) (("" (typepred scaf) (("" (expand "fine_scaffold?") (("" (ground) (("" (expand "good_tscaffold?") (("" (inst - pos!1 n1) (("" (ground) (("1" (expand gfcount) (("1" (use "sigma_max") (("1" (ground) (("1" (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2") (("1" (assert) (("1" (name-replace lnn "len * num_non_terminals + num_non_terminals") (("1" (assert) (("1" (case-replace "dep(scaf(pos!1)(n1)) = d1") (("1" (assert) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (assert) (("2" (case "len * num_non_terminals <= exp2(46)") (("1" (assert) (("1" (grind) nil nil)) nil) ("2" (use "lt_times_lt_pos1" :subst (px len nnz num_non_terminals y "exp2(32)" w "exp2(8)")) (("1" (hide-all-but (-1 1)) (("1" (grind) (("1" (typepred len) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.d1, 1)" "uint64")))("sigmatopdown" sigmatopdown step_TCC145 0 (step_TCC144-1 nil 3804991042 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC146 0 (step_TCC145-1 nil 3804991042 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred lflag) (("3" (skeep*) (("3" (ground) (("1" (inst?) nil nil) ("2" (grind) nil nil) ("3" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (hide -2 2) (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC147 0 (step_TCC123-1 nil 3804706560 ("" (skeep*) (("" (split +) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind) nil nil)) nil) ("3" (typepred depth) (("3" (typepred stack) (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (expand scafcount) (("3" (use sigma_dec) (("3" (ground) (("1" (lift-if -1) (("1" (ground) (("1" (grind) nil nil) ("2" (case-replace "(LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)
                                                                                            (St`scaf WITH [(pos!1)(cur) := fail(1 + d1)](i))) = ((LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                                                      WITH [(pos!1)
                                                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                                  1])") (("1" (hide -1) (("1" (assert) nil nil)) nil) ("2" (hide -1 3) (("2" (apply-extensionality) (("1" (hide 2) (("1" (expand count) (("1" (case "pos!1 = x!1") (("1" (assert) (("1" (case-replace "{i: below(num_non_terminals) |
                                                                                                                                            push?(St`scaf(x!1) WITH [(cur) := fail(1 + d1)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})") (("1" (rewrite card_remove) (("1" (hide -1) (("1" (lift-if +) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil) ("2" (hide -1 2) (("2" (rewrite "count_TCC1") nil nil)) nil)) nil) ("2" (hide 2) (("2" (apply-extensionality) (("1" (hide 2) (("1" (hide -3 -4 -6) (("1" (grind) nil nil)) nil)) nil) ("2" (grind) nil nil) ("3" (skeep*) (("3" (use step_TCC144) (("3" (ground) (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -6 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (skeep*) (("4" (use step_TCC144) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand count +) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (ground) (("1" (expand nonempty?) (("1" (expand empty?) (("1" (inst - "nt(stack)") (("1" (grind) nil nil) ("2" (assert) (("2" (typepred "nt(stack)") (("2" (expand "good_push_entry?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (rewrite "count_TCC1") nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (grind) nil nil)) nil) ("4" (hide 2) (("4" (use step_TCC144) (("4" (ground) (("4" (inst?) (("4" (inst?) (("4" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (hide -1) (("3" (expand count) (("3" (use "nonempty_card[below(num_non_terminals)]") (("1" (ground) (("1" (hide -5 5) (("1" (grind) nil nil)) nil)) nil) ("2" (rewrite "count_TCC1") nil nil)) nil)) nil)) nil) ("4" (hide -1 3) (("4" (grind) nil nil)) nil) ("5" (use step_TCC144) (("5" (ground) (("5" (inst?) (("5" (inst?) (("5" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand count) (("2" (use "nonempty_card[below(num_non_terminals)]") (("1" (grind) nil nil) ("2" (rewrite count_TCC1) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_nat application-judgement "nat" sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (arr type-eq-decl nil arrayCount nil) (count_TCC1 subtype-tcc nil arrayCount nil)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]))")))("sigmatopdown" sigmatopdown step_TCC148 0 (step_TCC124-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" "fail(1 + d1)") (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u "fail(1 + d1)" stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred "St`scaf(pos(St`stack))(n1)") (("1" (grind) nil nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]))")))("sigmatopdown" sigmatopdown step_TCC149 0 (step_TCC140-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, sigmatopdown.d1))], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, sigmatopdown.d1))](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC150 0 (step_TCC134-1 nil 3804904050 ("" (subtype-tcc) nil nil) ((sigma_nat application-judgement "nat" sigma reals) (count const-decl "upto(len)" arrayCount nil)) nil (step subtype "sigmatopdown.stack" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC151 0 (step_TCC134-1 nil 3804706560 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC152 0 (step_TCC135-1 nil 3804706560 ("" (skeep*) (("" (split) (("1" (typepred stack) (("1" (typepred depth) (("1" (expand good_depth?) (("1" (expand pushcount) (("1" (use scafcount_max) (("1" (assert) (("1" (use exp2_lt :subst (n 41 m 64)) (("1" (ground) (("1" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "good_depth?") (("2" (expand pushcount) (("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.+)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC153 0 (step_TCC136-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (expand "good_stack?" +) (("2" (ground) (("1" (grind) nil nil) ("2" (lemma good_mem_stack) (("2" (inst - G "depth" len scaf "push(pos!1, n1)" "stack" stack) (("1" (ground) (("1" (grind) nil nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (expand fine_stack? +) (("3" (ground) (("1" (lemma mem_mem_stack) (("1" (inst - G depth len scaf _ _ _ _) (("1" (inst - "push(pos!1, n1)" "push(pos!1, n1)" stack stack) (("1" (ground) (("1" (hide -2) (("1" (use mem_stack_push) (("1" (ground) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil) ("4" (use mem_stack_push) (("4" (ground) nil nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (use fine_mem_stack :subst (len len entry "push(pos!1, n1)" u stack stack stack)) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil) ("3" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.push(sigmatopdown.pos, sigmatopdown.n1)" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.+)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))("sigmatopdown" sigmatopdown step_TCC154 0 (step_TCC137-1 nil 3804730988 ("" (skeep*) (("" (ground) (("1" (typepred lflag) (("1" (assert) (("1" (hide -2) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("2" (typepred lflag) (("2" (assert) (("2" (hide -1) (("2" (skeep*) (("2" (lift-if) (("2" (ground) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (inst?) nil nil)) nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.St`lflag" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.n1 = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack], sigmatopdown.pos, sigmatopdown.n1)) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown step_TCC155 0 (step_TCC105-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (step subtype "sigmatopdown.loop" "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))("sigmatopdown" sigmatopdown step_TCC156 0 (step_TCC106-1 nil 3804455654 ("" (skeep*) (("" (typepred "scaf") (("" (expand "fine_scaffold?") (("" (ground) (("1" (hide -2) (("1" (grind) nil nil)) nil) ("2" (use good_good_tscaffold) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (hide 2) (("2" (expand fine_entry?) (("2" (grind) nil nil)) nil)) nil)) nil) ("3" (hide 2) (("3" (skeep*) (("3" (typepred lflag) (("3" (case lflag) (("1" (assert) (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil) ("2" (assert) (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))("sigmatopdown" sigmatopdown step_TCC157 0 (step_TCC131-1 nil 3804706560 ("" (skeep*) (("" (typepred stack) (("" (typepred depth) (("" (expand good_depth?) (("" (expand pushcount) (("" (use scafcount_max) (("" (assert) (("" (use exp2_lt :subst (n 41 m 64)) (("" (ground) (("1" (grind) nil nil) ("2" (rewrite scafcount_update) (("1" (lift-if) (("1" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred depth) (("2" (grind :exclude scafcount) nil nil)) nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (step subtype "(number_fields.-)(sigmatopdown.depth, 1)" "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC158 0 (step_TCC132-1 nil 3804706560 ("" (skeep*) (("" (ground) (("1" (typepred stack) (("1" (grind) nil nil)) nil) ("2" (typepred stack) (("2" (lemma good_mem_stack) (("2" (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest" loop) (("1" (ground) (("1" (hide 2) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (hide 1) (("3" (expand "fine_stack?") (("3" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil) ("4" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil) ("4" (grind) nil nil)) nil)) nil)) nil) ("3" (use fine_mem_stack :subst (len len entry "push(pos!1, cur)" u loop stack rest)) (("1" (ground) (("1" (hide 2) (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (hide 2) (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil) ("4" (typepred stack) (("4" (hide 1) (("4" (expand fine_stack?) (("4" (ground) (("1" (grind) nil nil) ("2" (case-replace "push(pos!1, cur) = stack") (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil)) nil)) nil)) nil)) nil)) nil) ("5" (typepred stack) (("5" (grind) nil nil)) nil)) nil) ("2" (typepred stack) (("2" (grind) nil nil)) nil) ("3" (grind) nil nil) ("4" (typepred stack) (("4" (grind) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "sigmatopdown.rest" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))("sigmatopdown" sigmatopdown step_TCC159 0 (step_TCC142-1 nil 3804730988 ("" (skeep*) (("" (typepred stack) (("" (expand good_stack?) (("" (ground) (("1" (grind) nil nil) ("2" (grind :exclude (good_stack? fine_stack? mem_stack?)) nil nil)) nil)) nil)) nil)) nil) nil nil (step subtype "booleans.TRUE" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop](i)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown size_TCC1 0 (size_TCC1-1 nil 3808434333 ("" (subtype-tcc) nil nil) nil nil (size subtype "sigmatopdown.len" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown size_TCC2 0 (size_TCC2-1 nil 3808434333 ("" (skeep*) (("" (typepred "St`depth") (("" (expand good_depth?) (("" (expand pushcount) (("" (use sigma_max) (("" (grind :exclude exp2) nil nil)) nil)) nil)) nil)) nil)) nil) ((count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) nil (size subtype "(number_fields.-)((number_fields.*(((number_fields.+)(sigmatopdown.len, 1)), sigmatopdown.num_non_terminals)), sigmatopdown.St`depth)" "nat")))("sigmatopdown" sigmatopdown endstate_TCC1 0 (endstate_TCC1-1 nil 3804455654 ("" (skeep*) (("" (typepred "st`stack") (("" (grind) nil nil)) nil)) nil) nil nil (endstate subtype "sigmatopdown.st`stack" "(sigmatopdown.push?)")))("sigmatopdown" sigmatopdown parse_TCC1 0 (parse_TCC2-1 nil 3804455654 ("" (use well_founded_le) (("" (grind :exclude <) nil nil)) nil) nil nil (parse well-founded "restrict[[ordstruct_adt.ordstruct, ordstruct_adt.ordstruct], [ordinal, ordinal], booleans.bool].restrict(ordinals.<)" "nil")))("sigmatopdown" sigmatopdown parse_TCC2 0 (parse_TCC3-1 nil 3804455654 ("" (skeep*) (("" (typepred "St`stack") (("" (grind) nil nil)) nil)) nil) nil nil (parse subtype "sigmatopdown.St" "sigmatopdown.endstate(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s, sigmatopdown.start, sigmatopdown.root)")))("sigmatopdown" sigmatopdown parse_TCC3 0 (parse_TCC4-1 nil 3804455654 ("" (skeep*) (("" (expand restrict) (("" (expand size) (("" (rewrite lex2_lt) (("1" (flatten) (("1" (hide 3) (("1" (typepred "St`stack") (("1" (apply (then (expand step) (lift-if) (ground))) (("1" (hide 1) (("1" (grind) nil nil)) nil) ("2" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("3" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("4" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("5" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("6" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("7" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("8" (grind :defs nil) (("8" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil)) nil) ("9" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("10" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("11" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("12" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (hide 2) (("2" (expand nice_entry?) (("2" (expand "good_good_entry?") (("2" (typepred "step(len, G, s, start, root)(St)`scaf") (("2" (expand step) (("2" (expand fine_scaffold?) (("2" (ground) (("2" (hide -1) (("2" (expand good_tscaffold?) (("2" (inst - "pos(St`stack)" "nt(St`stack)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("13" (reveal 1) (("13" (hide 2) (("13" (ground) (("1" (expand step) (("1" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("2" (expand step) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("14" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("15" (reveal 1) (("15" (hide 2) (("15" (ground) (("1" (expand step) (("1" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("2" (expand step) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("16" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("17" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("18" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (hide 2) (("2" (typepred "step(len, G, s, start, root)(St)`scaf") (("2" (expand fine_scaffold?) (("2" (ground) (("2" (hide -1) (("2" (expand good_tscaffold?) (("2" (inst - "pos(St`stack)" "nt(St`stack)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("19" (reveal 1) (("19" (hide 2) (("19" (ground) (("1" (expand step) (("1" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("2" (expand step) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ("20" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("21" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (typepred "step(len, G, s, start, root)(St)`scaf") (("2" (expand fine_scaffold?) (("2" (ground) (("2" (hide -1) (("2" (expand good_tscaffold?) (("2" (inst - "pos(St`stack)" "nt(St`stack)") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("22" (reveal 1) (("22" (hide 2) (("22" (expand step) (("22" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("23" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("24" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("25" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("26" (reveal 1) (("26" (hide 2) (("26" (expand step) (("26" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("27" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("28" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("29" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil) ("30" (reveal 1) (("30" (hide 2) (("30" (expand step) (("30" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil) ("31" (grind :defs nil) (("31" (rewrite scafcount_update) (("1" (grind :defs nil) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil)) nil) ("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "St`depth") (("2" (expand good_depth?) (("2" (expand pushcount) (("2" (use sigma_max) (("2" (ground) nil nil)) nil)) nil)) nil)) nil) ("3" (typepred "step(len, G, s, start, root)(St)`depth") (("3" (expand good_depth?) (("3" (expand pushcount) (("3" (use sigma_max) (("3" (ground) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((count const-decl "upto(len)" arrayCount nil) (sigma def-decl "real" sigma reals) (sigma_nat application-judgement "nat" sigma reals)) nil (parse termination "sigmatopdown.parse(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s, sigmatopdown.start, sigmatopdown.root)(sigmatopdown.step(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s, sigmatopdown.start, sigmatopdown.root)(sigmatopdown.St))" "nil")))("sigmatopdown" sigmatopdown doparse_TCC1 0 (doparse_TCC3-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (doparse subtype "sigmatopdown.pend" "[non_terminal -> (sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.i))]")))("sigmatopdown" sigmatopdown doparse_TCC2 0 (doparse_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (doparse subtype "0" "naturalnumbers.upto(sigmatopdown.len)")))("sigmatopdown" sigmatopdown doparse_TCC3 0 (doparse_TCC3-1 nil 3808434333 ("" (subtype-tcc) nil nil) nil nil (doparse subtype "0" "uint32")))("sigmatopdown" sigmatopdown doparse_TCC4 0 (doparse_TCC4-1 nil 3804547853 ("" (grind) nil nil) nil nil (doparse subtype "sigmatopdown.num_non_terminals" "uint8")))("sigmatopdown" sigmatopdown doparse_TCC5 0 (doparse_TCC4-1 nil 3804455654 ("" (subtype-tcc) nil nil) nil nil (doparse subtype "sigmatopdown.push(0, sigmatopdown.num_non_terminals)" "(sigmatopdown.nice_entry?(sigmatopdown.len, 0))")))("sigmatopdown" sigmatopdown doparse_TCC6 0 (doparse_TCC5-1 nil 3804455654 ("" (subtype-tcc) nil nil) ((count const-decl "upto(len)" arrayCount nil)) nil (doparse subtype "(LAMBDA (i: naturalnumbers.upto(sigmatopdown.len)): sigmatopdown.pend) WITH [(0)(sigmatopdown.n) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)]" "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(0, sigmatopdown.n))")))("sigmatopdown" sigmatopdown doparse_TCC7 0 (doparse_TCC1-1 nil 3804455654 ("" (skeep*) (("" (grind :exclude good_depth?) (("" (expand good_depth?) (("" (expand pushcount) (("" (rewrite scafcount_update) (("" (use "empty_card[below(255)]") (("1" (ground) (("1" (replace -2 :hide? t) (("1" (rewrite "reals@sigma[upto(len)].sigma_zero") nil nil)) nil)) nil) ("2" (hide 2) (("2" (inst + 255 "id[below(255)]") (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((sigma_zero formula-decl nil sigma reals) (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals) (sigma def-decl "real" sigma reals) (count const-decl "upto(len)" arrayCount nil) (sigma_nat application-judgement "nat" sigma reals)) nil (doparse subtype "1" "(sigmatopdown.good_depth?(sigmatopdown.len, (LAMBDA (i: naturalnumbers.upto(sigmatopdown.len)): sigmatopdown.pend) WITH [(0)(sigmatopdown.n) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)]))")))("sigmatopdown" sigmatopdown doparse_TCC8 0 (doparse_TCC6-1 nil 3804534082 ("" (grind) nil nil) nil nil (doparse subtype "sigmatopdown.push(0, sigmatopdown.n)" "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, 1, (LAMBDA (i: naturalnumbers.upto(sigmatopdown.len)): sigmatopdown.pend) WITH [(0)(sigmatopdown.n) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)]))")))("sigmatopdown" sigmatopdown doparse_TCC9 0 (doparse_TCC8-1 nil 3804730988 ("" (subtype-tcc) nil nil) nil nil (doparse subtype "booleans.FALSE" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.n = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, (LAMBDA (i: naturalnumbers.upto(sigmatopdown.len)): sigmatopdown.pend) WITH [(0)(sigmatopdown.n) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)], 0, sigmatopdown.n)) ELSE FORALL (i_1: naturalnumbers.upto(sigmatopdown.len)), (n_1: sigmatopdown.non_terminal): (booleans.NOT)(sigmatopdown.loop?((LAMBDA (i: naturalnumbers.upto(sigmatopdown.len)): sigmatopdown.pend) WITH [(0)(sigmatopdown.n) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)](i_1)(n_1))) ENDIF}")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC1 0 (pyaml_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "1" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC2 0 (pyaml_TCC2-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "3" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC3 0 (pyaml_TCC3-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "2" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC4 0 (pyaml_TCC4-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "1" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC5 0 (pyaml_TCC5-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "4" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC6 0 (pyaml_TCC6-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "35" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC7 0 (pyaml_TCC7-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "5" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC8 0 (pyaml_TCC8-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "11" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC9 0 (pyaml_TCC9-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "6" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC10 0 (pyaml_TCC10-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC11 0 (pyaml_TCC11-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "8" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC12 0 (pyaml_TCC12-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "10" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC13 0 (pyaml_TCC13-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "9" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC14 0 (pyaml_TCC14-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC15 0 (pyaml_TCC15-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "12" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC16 0 (pyaml_TCC16-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "14" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC17 0 (pyaml_TCC17-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "13" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC18 0 (pyaml_TCC18-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC19 0 (pyaml_TCC19-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "15" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC20 0 (pyaml_TCC20-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "31" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC21 0 (pyaml_TCC21-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "16" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC22 0 (pyaml_TCC22-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "28" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC23 0 (pyaml_TCC23-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "1" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC24 0 (pyaml_TCC24-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "17" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC25 0 (pyaml_TCC25-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "18" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC26 0 (pyaml_TCC26-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC27 0 (pyaml_TCC27-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "19" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC28 0 (pyaml_TCC28-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "25" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC29 0 (pyaml_TCC29-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "21" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC30 0 (pyaml_TCC30-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "25" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC31 0 (pyaml_TCC31-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "22" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC32 0 (pyaml_TCC32-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "20" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC33 0 (pyaml_TCC33-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "23" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC34 0 (pyaml_TCC34-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "19" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC35 0 (pyaml_TCC35-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "19" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC36 0 (pyaml_TCC36-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC37 0 (pyaml_TCC37-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "24" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC38 0 (pyaml_TCC38-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "26" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC39 0 (pyaml_TCC39-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "27" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC40 0 (pyaml_TCC40-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "20" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC41 0 (pyaml_TCC41-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "29" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC42 0 (pyaml_TCC42-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "0" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC43 0 (pyaml_TCC43-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "30" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC44 0 (pyaml_TCC44-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC45 0 (pyaml_TCC45-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "32" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC46 0 (pyaml_TCC46-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "12" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC47 0 (pyaml_TCC47-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "33" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC48 0 (pyaml_TCC48-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "14" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC49 0 (pyaml_TCC49-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "34" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC50 0 (pyaml_TCC50-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC51 0 (pyaml_TCC51-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "36" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC52 0 (pyaml_TCC52-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "38" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC53 0 (pyaml_TCC53-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "37" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC54 0 (pyaml_TCC54-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC55 0 (pyaml_TCC55-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "39" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC56 0 (pyaml_TCC56-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "43" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC57 0 (pyaml_TCC57-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "40" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC58 0 (pyaml_TCC58-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "10" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC59 0 (pyaml_TCC59-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "0" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC60 0 (pyaml_TCC60-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "41" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC61 0 (pyaml_TCC61-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "42" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC62 0 (pyaml_TCC62-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "10" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC63 0 (pyaml_TCC63-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "33" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC64 0 (pyaml_TCC64-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "40" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC65 0 (pyaml_TCC65-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "44" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC66 0 (pyaml_TCC66-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest cat_TCC1 0 (cat_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (cat subtype "(number_fields.-)(exp2.exp2(8), sigmatopdowntest.l1)" "nat")))("sigmatopdowntest" sigmatopdowntest cat_TCC2 0 (cat_TCC2-1 nil 3805067364 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (uint8 type-eq-decl nil integertypes nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (exp2 def-decl "posnat" exp2 nil)) nil (cat subtype "sigmatopdowntest.l1" "uint32")))("sigmatopdowntest" sigmatopdowntest cat_TCC3 0 (cat_TCC3-1 nil 3805067364 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (uint8 type-eq-decl nil integertypes nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (exp2 def-decl "posnat" exp2 nil) (nil application-judgement "above(n)" exp2 nil)) nil (cat subtype "sigmatopdowntest.l2" "uint32")))("sigmatopdowntest" sigmatopdowntest cat_TCC4 0 (cat_TCC4-1 nil 3805067364 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (uint8 type-eq-decl nil integertypes nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (exp2 def-decl "posnat" exp2 nil) (nil application-judgement "above(n)" exp2 nil)) nil (cat subtype "(number_fields.+)(sigmatopdowntest.l1, sigmatopdowntest.l2)" "uint32")))("sigmatopdowntest" sigmatopdowntest cat_TCC5 0 (cat_TCC5-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil)) nil (cat subtype "(number_fields.-)(sigmatopdowntest.i, sigmatopdowntest.l1)" "naturalnumbers.below(sigmatopdowntest.l2)")))("sigmatopdowntest" sigmatopdowntest tok0_TCC1 0 (tok0_TCC1-1 nil 3805067364 ("" (cond-coverage-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (tok0 coverage "COND sigmatopdowntest.i = 0 -> 39, sigmatopdowntest.i = 1 -> 116, sigmatopdowntest.i = 2 -> 111, sigmatopdowntest.i = 3 -> 107, sigmatopdowntest.i = 4 -> 101, sigmatopdowntest.i = 5 -> 110, sigmatopdowntest.i = 6 -> 39 ENDCOND" "nil")))("sigmatopdowntest" sigmatopdowntest tok1_TCC1 0 (tok1_TCC1-1 nil 3805067364 ("" (cond-coverage-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (tok1 coverage "COND sigmatopdowntest.i = 0 -> 39, sigmatopdowntest.i = 1 -> 116, sigmatopdowntest.i = 2 -> 111, sigmatopdowntest.i = 3 -> 107, sigmatopdowntest.i = 4 -> 101, sigmatopdowntest.i = 5 -> 110, sigmatopdowntest.i = 6 -> 92, sigmatopdowntest.i = 7 -> 39, sigmatopdowntest.i = 8 -> 39 ENDCOND" "nil")))("sigmatopdowntest" sigmatopdowntest obrace_TCC1 0 (obrace_TCC1-1 nil 3805067364 ("" (cond-coverage-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (obrace coverage "COND sigmatopdowntest.i = 0 -> 123, sigmatopdowntest.i = 1 -> 32, sigmatopdowntest.i = 2 -> 32 ENDCOND" "nil")))("sigmatopdowntest" sigmatopdowntest emptydict2_TCC1 0 (emptydict2_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (emptydict2 subtype "6" "uint32")))("sigmatopdowntest" sigmatopdowntest emptydict2_TCC2 0 (emptydict2_TCC3-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (emptydict2 subtype "3" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 3))")))("sigmatopdowntest" sigmatopdowntest dict1_TCC1 0 (dict1_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (dict1 subtype "22" "uint32")))("sigmatopdowntest" sigmatopdowntest dict1_TCC2 0 (dict1_TCC3-1 nil 3805067364 ("" (grind) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (exp2 def-decl "posnat" exp2 nil)) nil (dict1 subtype "3" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 6))")))("sigmatopdowntest" sigmatopdowntest dict1_TCC3 0 (dict1_TCC4-1 nil 3805067364 ("" (grind) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (exp2 def-decl "posnat" exp2 nil)) nil (dict1 subtype "9" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 3))")))("sigmatopdowntest" sigmatopdowntest dict1_TCC4 0 (dict1_TCC6-1 nil 3805067364 ("" (grind) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (exp2 def-decl "posnat" exp2 nil)) nil (dict1 subtype "12" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 7))")))("sigmatopdowntest" sigmatopdowntest dict1_TCC5 0 (dict1_TCC7-1 nil 3805067364 ("" (grind) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (exp2 def-decl "posnat" exp2 nil)) nil (dict1 subtype "19" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 3))")))("sigmatopdowntest" sigmatopdowntest test0_TCC1 0 (test0_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (test0 subtype "2" "uint32")))("sigmatopdowntest" sigmatopdowntest test0_TCC2 0 (test0_TCC3-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (test0 subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest test0eval 0 (test0eval-1 nil 3805071593 ("" (auto-rewrite-theory "sigmatopdown") (("" (auto-rewrite-theory "sigmatopdowntest") (("" (assert) (("" (postpone) nil nil)) nil)) nil)) nil) nil shostak))("sigmatopdowntest" sigmatopdowntest test1_TCC1 0 (test1_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (test1 subtype "7" "uint32")))("sigmatopdowntest" sigmatopdowntest test1_TCC2 0 (test1_TCC2-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (test1 subtype "17" "non_terminal")))("sigmatopdowntest" sigmatopdowntest test11_TCC1 0 (test11_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (test11 subtype "9" "uint32")))("sigmatopdowntest" sigmatopdowntest test2_TCC1 0 (test2_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (test2 subtype "0" "non_terminal")))("sigmatopdowntest" sigmatopdowntest iparse_TCC1 0 (iparse_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (byte type-eq-decl nil sigmatopdown nil) (non_terminal type-eq-decl nil sigmatopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (good_good_entry? const-decl "bool" sigmatopdown nil) (num_non_terminals const-decl "byte" sigmatopdown nil) (good_push_entry? const-decl "bool" sigmatopdown nil) (nice_entry? const-decl "bool" sigmatopdown nil)) nil (iparse subtype "sigmatopdowntest.pend" "[non_terminal -> (sigmatopdown.nice_entry?(sigmatopdowntest.len, sigmatopdowntest.i))]")))("sigmatopdowntest" sigmatopdowntest iparse_TCC2 0 (iparse_TCC2-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (byte type-eq-decl nil sigmatopdown nil) (num_non_terminals const-decl "byte" sigmatopdown nil) (non_terminal type-eq-decl nil sigmatopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil)) nil (iparse subtype "0" "uint32")))("sigmatopdowntest" sigmatopdowntest iparse_TCC3 0 (iparse_TCC3-1 nil 3805067364 ("" (grind) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil) (exp2 def-decl "posnat" exp2 nil)) nil (iparse subtype "sigmatopdown.num_non_terminals" "uint8")))("sigmatopdowntest" sigmatopdowntest iparse_TCC4 0 (iparse_TCC4-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil) (good_good_entry? const-decl "bool" sigmatopdown nil) (good_push_entry? const-decl "bool" sigmatopdown nil) (nice_entry? const-decl "bool" sigmatopdown nil)) nil (iparse subtype "sigmatopdown.push(0, sigmatopdown.num_non_terminals)" "(sigmatopdown.nice_entry?(sigmatopdowntest.len, sigmatopdowntest.start))")))("sigmatopdowntest" sigmatopdowntest iparse_TCC5 0 (iparse_TCC5-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (byte type-eq-decl nil sigmatopdown nil) (non_terminal type-eq-decl nil sigmatopdown nil) (good_entry? const-decl "bool" sigmatopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (num_non_terminals const-decl "byte" sigmatopdown nil) (good_good_entry? const-decl "bool" sigmatopdown nil) (good_push_entry? const-decl "bool" sigmatopdown nil) (nice_entry? const-decl "bool" sigmatopdown nil) (good_root? const-decl "bool" sigmatopdown nil) (good_or_fail? const-decl "bool" sigmatopdown nil) (count const-decl "upto(len)" arrayCount nil) (scafcount const-decl "uint64" sigmatopdown nil) (gfcount const-decl "uint64" sigmatopdown nil) (good_tscaffold? const-decl "bool" sigmatopdown nil) (fine_scaffold? const-decl "bool" sigmatopdown nil)) nil (iparse subtype "(LAMBDA (i: naturalnumbers.upto(sigmatopdowntest.len)): sigmatopdowntest.pend) WITH [(sigmatopdowntest.start)(sigmatopdowntest.root) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)]" "(sigmatopdown.fine_scaffold?(sigmatopdowntest.len, sigmatopdowntest.G, sigmatopdowntest.s)(sigmatopdowntest.start, sigmatopdowntest.root))")))("sigmatopdowntest" sigmatopdowntest iparse_TCC6 0 (iparse_TCC6-1 nil 3805067364 ("" (subtype-tcc) nil nil) nil nil (iparse subtype "1" "(sigmatopdown.good_depth?(sigmatopdowntest.len, (LAMBDA (i: naturalnumbers.upto(sigmatopdowntest.len)): sigmatopdowntest.pend) WITH [(sigmatopdowntest.start)(sigmatopdowntest.root) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)]))")))("sigmatopdowntest" sigmatopdowntest iparse_TCC7 0 (iparse_TCC7-1 nil 3805067364 ("" (subtype-tcc) nil nil) nil nil (iparse subtype "sigmatopdowntest.start" "uint32")))("sigmatopdowntest" sigmatopdowntest iparse_TCC8 0 (iparse_TCC8-1 nil 3805067364 ("" (subtype-tcc) nil nil) nil nil (iparse subtype "sigmatopdown.push(sigmatopdowntest.start, sigmatopdowntest.root)" "(sigmatopdown.fine_stack?(sigmatopdowntest.len, sigmatopdowntest.G, 1, (LAMBDA (i: naturalnumbers.upto(sigmatopdowntest.len)): sigmatopdowntest.pend) WITH [(sigmatopdowntest.start)(sigmatopdowntest.root) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)]))")))("sigmatopdowntest" sigmatopdowntest iparse_TCC9 0 (iparse_TCC9-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (byte type-eq-decl nil sigmatopdown nil) (non_terminal type-eq-decl nil sigmatopdown nil) (nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (num_non_terminals const-decl "byte" sigmatopdown nil)) nil (iparse subtype "booleans.FALSE" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdowntest.root = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdowntest.len, sigmatopdowntest.G, (LAMBDA (i: naturalnumbers.upto(sigmatopdowntest.len)): sigmatopdowntest.pend) WITH [(sigmatopdowntest.start)(sigmatopdowntest.root) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)], sigmatopdowntest.start, sigmatopdowntest.root)) ELSE FORALL (i_1: naturalnumbers.upto(sigmatopdowntest.len)), n: (booleans.NOT)(sigmatopdown.loop?((LAMBDA (i: naturalnumbers.upto(sigmatopdowntest.len)): sigmatopdowntest.pend) WITH [(sigmatopdowntest.start)(sigmatopdowntest.root) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)](i_1)(sigmatopdown.n))) ENDIF}")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC1 0 (pyaml_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "1" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC2 0 (pyaml_TCC2-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "3" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC3 0 (pyaml_TCC3-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "2" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC4 0 (pyaml_TCC4-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "1" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC5 0 (pyaml_TCC5-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "4" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC6 0 (pyaml_TCC6-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "35" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC7 0 (pyaml_TCC7-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "5" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC8 0 (pyaml_TCC8-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "11" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC9 0 (pyaml_TCC9-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "6" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC10 0 (pyaml_TCC10-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC11 0 (pyaml_TCC11-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "8" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC12 0 (pyaml_TCC12-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "10" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC13 0 (pyaml_TCC13-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "9" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC14 0 (pyaml_TCC14-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC15 0 (pyaml_TCC15-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "12" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC16 0 (pyaml_TCC16-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "14" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC17 0 (pyaml_TCC17-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "13" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC18 0 (pyaml_TCC18-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC19 0 (pyaml_TCC19-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "15" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC20 0 (pyaml_TCC20-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "31" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC21 0 (pyaml_TCC21-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "16" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC22 0 (pyaml_TCC22-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "28" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC23 0 (pyaml_TCC23-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "1" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC24 0 (pyaml_TCC24-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "17" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC25 0 (pyaml_TCC25-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "18" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC26 0 (pyaml_TCC26-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC27 0 (pyaml_TCC27-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "19" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC28 0 (pyaml_TCC28-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "25" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC29 0 (pyaml_TCC29-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "21" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC30 0 (pyaml_TCC30-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "25" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC31 0 (pyaml_TCC31-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "22" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC32 0 (pyaml_TCC32-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "20" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC33 0 (pyaml_TCC33-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "23" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC34 0 (pyaml_TCC34-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "19" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC35 0 (pyaml_TCC35-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "19" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC36 0 (pyaml_TCC36-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC37 0 (pyaml_TCC37-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "24" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC38 0 (pyaml_TCC38-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "26" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC39 0 (pyaml_TCC39-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "27" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC40 0 (pyaml_TCC40-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "20" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC41 0 (pyaml_TCC41-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "29" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC42 0 (pyaml_TCC42-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "0" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC43 0 (pyaml_TCC43-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "30" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC44 0 (pyaml_TCC44-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC45 0 (pyaml_TCC45-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "32" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC46 0 (pyaml_TCC46-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "12" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC47 0 (pyaml_TCC47-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "33" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC48 0 (pyaml_TCC48-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "14" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC49 0 (pyaml_TCC49-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "34" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC50 0 (pyaml_TCC50-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC51 0 (pyaml_TCC51-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "36" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC52 0 (pyaml_TCC52-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "38" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC53 0 (pyaml_TCC53-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "37" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC54 0 (pyaml_TCC54-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC55 0 (pyaml_TCC55-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "39" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC56 0 (pyaml_TCC56-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "43" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC57 0 (pyaml_TCC57-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "40" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC58 0 (pyaml_TCC58-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "10" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC59 0 (pyaml_TCC59-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "0" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC60 0 (pyaml_TCC60-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "41" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC61 0 (pyaml_TCC61-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "42" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC62 0 (pyaml_TCC62-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "10" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC63 0 (pyaml_TCC63-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "33" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC64 0 (pyaml_TCC64-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "40" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC65 0 (pyaml_TCC65-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "44" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC66 0 (pyaml_TCC66-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest cat_TCC1 0 (cat_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (cat subtype "(number_fields.-)(exp2.exp2(8), sigmatopdowntest.l1)" "nat")))("sigmatopdowntest" sigmatopdowntest cat_TCC2 0 (cat_TCC2-1 nil 3805067364 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (uint8 type-eq-decl nil integertypes nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (exp2 def-decl "posnat" exp2 nil)) nil (cat subtype "sigmatopdowntest.l1" "uint32")))("sigmatopdowntest" sigmatopdowntest cat_TCC3 0 (cat_TCC3-1 nil 3805067364 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (uint8 type-eq-decl nil integertypes nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (exp2 def-decl "posnat" exp2 nil) (nil application-judgement "above(n)" exp2 nil)) nil (cat subtype "sigmatopdowntest.l2" "uint32")))("sigmatopdowntest" sigmatopdowntest cat_TCC4 0 (cat_TCC4-1 nil 3805067364 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (uint8 type-eq-decl nil integertypes nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (exp2 def-decl "posnat" exp2 nil) (nil application-judgement "above(n)" exp2 nil)) nil (cat subtype "(number_fields.+)(sigmatopdowntest.l1, sigmatopdowntest.l2)" "uint32")))("sigmatopdowntest" sigmatopdowntest cat_TCC5 0 (cat_TCC5-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil)) nil (cat subtype "(number_fields.-)(sigmatopdowntest.i, sigmatopdowntest.l1)" "naturalnumbers.below(sigmatopdowntest.l2)")))("sigmatopdowntest" sigmatopdowntest tok0_TCC1 0 (tok0_TCC1-1 nil 3805067364 ("" (cond-coverage-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (tok0 coverage "COND sigmatopdowntest.i = 0 -> 39, sigmatopdowntest.i = 1 -> 116, sigmatopdowntest.i = 2 -> 111, sigmatopdowntest.i = 3 -> 107, sigmatopdowntest.i = 4 -> 101, sigmatopdowntest.i = 5 -> 110, sigmatopdowntest.i = 6 -> 39 ENDCOND" "nil")))("sigmatopdowntest" sigmatopdowntest tok1_TCC1 0 (tok1_TCC1-1 nil 3805067364 ("" (cond-coverage-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (tok1 coverage "COND sigmatopdowntest.i = 0 -> 39, sigmatopdowntest.i = 1 -> 116, sigmatopdowntest.i = 2 -> 111, sigmatopdowntest.i = 3 -> 107, sigmatopdowntest.i = 4 -> 101, sigmatopdowntest.i = 5 -> 110, sigmatopdowntest.i = 6 -> 92, sigmatopdowntest.i = 7 -> 39, sigmatopdowntest.i = 8 -> 39 ENDCOND" "nil")))("sigmatopdowntest" sigmatopdowntest obrace_TCC1 0 (obrace_TCC1-1 nil 3805067364 ("" (cond-coverage-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (obrace coverage "COND sigmatopdowntest.i = 0 -> 123, sigmatopdowntest.i = 1 -> 32, sigmatopdowntest.i = 2 -> 32 ENDCOND" "nil")))("sigmatopdowntest" sigmatopdowntest emptydict2_TCC1 0 (emptydict2_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (emptydict2 subtype "6" "uint32")))("sigmatopdowntest" sigmatopdowntest emptydict2_TCC2 0 (emptydict2_TCC3-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (emptydict2 subtype "3" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 3))")))("sigmatopdowntest" sigmatopdowntest dict1_TCC1 0 (dict1_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (dict1 subtype "22" "uint32")))("sigmatopdowntest" sigmatopdowntest dict1_TCC2 0 (dict1_TCC3-1 nil 3805067364 ("" (grind) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (exp2 def-decl "posnat" exp2 nil)) nil (dict1 subtype "3" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 6))")))("sigmatopdowntest" sigmatopdowntest dict1_TCC3 0 (dict1_TCC4-1 nil 3805067364 ("" (grind) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (exp2 def-decl "posnat" exp2 nil)) nil (dict1 subtype "9" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 3))")))("sigmatopdowntest" sigmatopdowntest dict1_TCC4 0 (dict1_TCC6-1 nil 3805067364 ("" (grind) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (exp2 def-decl "posnat" exp2 nil)) nil (dict1 subtype "12" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 7))")))("sigmatopdowntest" sigmatopdowntest dict1_TCC5 0 (dict1_TCC7-1 nil 3805067364 ("" (grind) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (exp2 def-decl "posnat" exp2 nil)) nil (dict1 subtype "19" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 3))")))("sigmatopdowntest" sigmatopdowntest test0_TCC1 0 (test0_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (test0 subtype "2" "uint32")))("sigmatopdowntest" sigmatopdowntest test0_TCC2 0 (test0_TCC3-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (test0 subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest test0eval 0 (test0eval-1 nil 3805071593 ("" (auto-rewrite-theory "sigmatopdown") (("" (auto-rewrite-theory "sigmatopdowntest") (("" (assert) (("" (postpone) nil nil)) nil)) nil)) nil) nil shostak))("sigmatopdowntest" sigmatopdowntest test1_TCC1 0 (test1_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (test1 subtype "7" "uint32")))("sigmatopdowntest" sigmatopdowntest test1_TCC2 0 (test1_TCC2-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (test1 subtype "17" "non_terminal")))("sigmatopdowntest" sigmatopdowntest test11_TCC1 0 (test11_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (test11 subtype "9" "uint32")))("sigmatopdowntest" sigmatopdowntest test2_TCC1 0 (test2_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (test2 subtype "0" "non_terminal")))("sigmatopdowntest" sigmatopdowntest iparse_TCC1 0 (iparse_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (byte type-eq-decl nil sigmatopdown nil) (non_terminal type-eq-decl nil sigmatopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (good_good_entry? const-decl "bool" sigmatopdown nil) (num_non_terminals const-decl "byte" sigmatopdown nil) (good_push_entry? const-decl "bool" sigmatopdown nil) (nice_entry? const-decl "bool" sigmatopdown nil)) nil (iparse subtype "sigmatopdowntest.pend" "[non_terminal -> (sigmatopdown.nice_entry?(sigmatopdowntest.len, sigmatopdowntest.i))]")))("sigmatopdowntest" sigmatopdowntest iparse_TCC2 0 (iparse_TCC2-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (byte type-eq-decl nil sigmatopdown nil) (num_non_terminals const-decl "byte" sigmatopdown nil) (non_terminal type-eq-decl nil sigmatopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil)) nil (iparse subtype "0" "uint32")))("sigmatopdowntest" sigmatopdowntest iparse_TCC3 0 (iparse_TCC3-1 nil 3805067364 ("" (grind) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil) (exp2 def-decl "posnat" exp2 nil)) nil (iparse subtype "sigmatopdown.num_non_terminals" "uint8")))("sigmatopdowntest" sigmatopdowntest iparse_TCC4 0 (iparse_TCC4-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil) (good_good_entry? const-decl "bool" sigmatopdown nil) (good_push_entry? const-decl "bool" sigmatopdown nil) (nice_entry? const-decl "bool" sigmatopdown nil)) nil (iparse subtype "sigmatopdown.push(0, sigmatopdown.num_non_terminals)" "(sigmatopdown.nice_entry?(sigmatopdowntest.len, sigmatopdowntest.start))")))("sigmatopdowntest" sigmatopdowntest iparse_TCC5 0 (iparse_TCC5-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (byte type-eq-decl nil sigmatopdown nil) (non_terminal type-eq-decl nil sigmatopdown nil) (good_entry? const-decl "bool" sigmatopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (num_non_terminals const-decl "byte" sigmatopdown nil) (good_good_entry? const-decl "bool" sigmatopdown nil) (good_push_entry? const-decl "bool" sigmatopdown nil) (nice_entry? const-decl "bool" sigmatopdown nil) (good_root? const-decl "bool" sigmatopdown nil) (good_or_fail? const-decl "bool" sigmatopdown nil) (count const-decl "upto(len)" arrayCount nil) (scafcount const-decl "uint64" sigmatopdown nil) (gfcount const-decl "uint64" sigmatopdown nil) (good_tscaffold? const-decl "bool" sigmatopdown nil) (fine_scaffold? const-decl "bool" sigmatopdown nil)) nil (iparse subtype "(LAMBDA (i: naturalnumbers.upto(sigmatopdowntest.len)): sigmatopdowntest.pend) WITH [(sigmatopdowntest.start)(sigmatopdowntest.root) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)]" "(sigmatopdown.fine_scaffold?(sigmatopdowntest.len, sigmatopdowntest.G, sigmatopdowntest.s)(sigmatopdowntest.start, sigmatopdowntest.root))")))("sigmatopdowntest" sigmatopdowntest iparse_TCC6 0 (iparse_TCC6-1 nil 3805067364 ("" (subtype-tcc) nil nil) nil nil (iparse subtype "1" "(sigmatopdown.good_depth?(sigmatopdowntest.len, (LAMBDA (i: naturalnumbers.upto(sigmatopdowntest.len)): sigmatopdowntest.pend) WITH [(sigmatopdowntest.start)(sigmatopdowntest.root) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)]))")))("sigmatopdowntest" sigmatopdowntest iparse_TCC7 0 (iparse_TCC7-1 nil 3805067364 ("" (subtype-tcc) nil nil) nil nil (iparse subtype "sigmatopdowntest.start" "uint32")))("sigmatopdowntest" sigmatopdowntest iparse_TCC8 0 (iparse_TCC8-1 nil 3805067364 ("" (subtype-tcc) nil nil) nil nil (iparse subtype "sigmatopdown.push(sigmatopdowntest.start, sigmatopdowntest.root)" "(sigmatopdown.fine_stack?(sigmatopdowntest.len, sigmatopdowntest.G, 1, (LAMBDA (i: naturalnumbers.upto(sigmatopdowntest.len)): sigmatopdowntest.pend) WITH [(sigmatopdowntest.start)(sigmatopdowntest.root) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)]))")))("sigmatopdowntest" sigmatopdowntest iparse_TCC9 0 (iparse_TCC9-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (byte type-eq-decl nil sigmatopdown nil) (non_terminal type-eq-decl nil sigmatopdown nil) (nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (num_non_terminals const-decl "byte" sigmatopdown nil)) nil (iparse subtype "booleans.FALSE" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdowntest.root = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdowntest.len, sigmatopdowntest.G, (LAMBDA (i: naturalnumbers.upto(sigmatopdowntest.len)): sigmatopdowntest.pend) WITH [(sigmatopdowntest.start)(sigmatopdowntest.root) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)], sigmatopdowntest.start, sigmatopdowntest.root)) ELSE FORALL (i_1: naturalnumbers.upto(sigmatopdowntest.len)), n: (booleans.NOT)(sigmatopdown.loop?((LAMBDA (i: naturalnumbers.upto(sigmatopdowntest.len)): sigmatopdowntest.pend) WITH [(sigmatopdowntest.start)(sigmatopdowntest.root) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)](i_1)(sigmatopdown.n))) ENDIF}")))(nil sigmatopdowntest test11_TCC1 0 (test11_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (test11 subtype "9" "uint32")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC1 0 (pyaml_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "1" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC2 0 (pyaml_TCC2-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "3" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC3 0 (pyaml_TCC3-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "2" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC4 0 (pyaml_TCC4-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "1" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC5 0 (pyaml_TCC5-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "4" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC6 0 (pyaml_TCC6-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "35" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC7 0 (pyaml_TCC7-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "5" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC8 0 (pyaml_TCC8-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "11" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC9 0 (pyaml_TCC9-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "6" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC10 0 (pyaml_TCC10-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC11 0 (pyaml_TCC11-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "8" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC12 0 (pyaml_TCC12-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "10" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC13 0 (pyaml_TCC13-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "9" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC14 0 (pyaml_TCC14-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC15 0 (pyaml_TCC15-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "12" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC16 0 (pyaml_TCC16-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "14" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC17 0 (pyaml_TCC17-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "13" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC18 0 (pyaml_TCC18-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC19 0 (pyaml_TCC19-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "15" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC20 0 (pyaml_TCC20-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "31" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC21 0 (pyaml_TCC21-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "16" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC22 0 (pyaml_TCC22-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "28" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC23 0 (pyaml_TCC23-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "1" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC24 0 (pyaml_TCC24-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "17" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC25 0 (pyaml_TCC25-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "18" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC26 0 (pyaml_TCC26-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC27 0 (pyaml_TCC27-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "19" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC28 0 (pyaml_TCC28-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "25" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC29 0 (pyaml_TCC29-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "21" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC30 0 (pyaml_TCC30-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "25" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC31 0 (pyaml_TCC31-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "22" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC32 0 (pyaml_TCC32-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "20" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC33 0 (pyaml_TCC33-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "23" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC34 0 (pyaml_TCC34-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "19" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC35 0 (pyaml_TCC35-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "19" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC36 0 (pyaml_TCC36-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC37 0 (pyaml_TCC37-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "24" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC38 0 (pyaml_TCC38-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "26" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC39 0 (pyaml_TCC39-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "27" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC40 0 (pyaml_TCC40-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "20" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC41 0 (pyaml_TCC41-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "29" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC42 0 (pyaml_TCC42-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "0" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC43 0 (pyaml_TCC43-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "30" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC44 0 (pyaml_TCC44-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC45 0 (pyaml_TCC45-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "32" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC46 0 (pyaml_TCC46-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "12" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC47 0 (pyaml_TCC47-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "33" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC48 0 (pyaml_TCC48-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "14" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC49 0 (pyaml_TCC49-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "34" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC50 0 (pyaml_TCC50-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC51 0 (pyaml_TCC51-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "36" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC52 0 (pyaml_TCC52-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "38" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC53 0 (pyaml_TCC53-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "37" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC54 0 (pyaml_TCC54-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC55 0 (pyaml_TCC55-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "39" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC56 0 (pyaml_TCC56-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "43" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC57 0 (pyaml_TCC57-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "40" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC58 0 (pyaml_TCC58-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "10" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC59 0 (pyaml_TCC59-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "0" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC60 0 (pyaml_TCC60-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "41" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC61 0 (pyaml_TCC61-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "42" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC62 0 (pyaml_TCC62-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "10" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC63 0 (pyaml_TCC63-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "33" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC64 0 (pyaml_TCC64-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "40" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC65 0 (pyaml_TCC65-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "44" "non_terminal")))("sigmatopdowntest" sigmatopdowntest pyaml_TCC66 0 (pyaml_TCC66-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil)) nil (pyaml subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest cat_TCC1 0 (cat_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((nil application-judgement "above(n)" exp2 nil)) nil (cat subtype "(number_fields.-)(exp2.exp2(8), sigmatopdowntest.l1)" "nat")))("sigmatopdowntest" sigmatopdowntest cat_TCC2 0 (cat_TCC2-1 nil 3805067364 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (uint8 type-eq-decl nil integertypes nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (exp2 def-decl "posnat" exp2 nil)) nil (cat subtype "sigmatopdowntest.l1" "uint32")))("sigmatopdowntest" sigmatopdowntest cat_TCC3 0 (cat_TCC3-1 nil 3805067364 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (uint8 type-eq-decl nil integertypes nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (exp2 def-decl "posnat" exp2 nil) (nil application-judgement "above(n)" exp2 nil)) nil (cat subtype "sigmatopdowntest.l2" "uint32")))("sigmatopdowntest" sigmatopdowntest cat_TCC4 0 (cat_TCC4-1 nil 3805067364 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (uint8 type-eq-decl nil integertypes nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (exp2 def-decl "posnat" exp2 nil) (nil application-judgement "above(n)" exp2 nil)) nil (cat subtype "(number_fields.+)(sigmatopdowntest.l1, sigmatopdowntest.l2)" "uint32")))("sigmatopdowntest" sigmatopdowntest cat_TCC5 0 (cat_TCC5-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (below type-eq-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil)) nil (cat subtype "(number_fields.-)(sigmatopdowntest.i, sigmatopdowntest.l1)" "naturalnumbers.below(sigmatopdowntest.l2)")))("sigmatopdowntest" sigmatopdowntest tok0_TCC1 0 (tok0_TCC1-1 nil 3805067364 ("" (cond-coverage-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (tok0 coverage "COND sigmatopdowntest.i = 0 -> 39, sigmatopdowntest.i = 1 -> 116, sigmatopdowntest.i = 2 -> 111, sigmatopdowntest.i = 3 -> 107, sigmatopdowntest.i = 4 -> 101, sigmatopdowntest.i = 5 -> 110, sigmatopdowntest.i = 6 -> 39 ENDCOND" "nil")))("sigmatopdowntest" sigmatopdowntest tok1_TCC1 0 (tok1_TCC1-1 nil 3805067364 ("" (cond-coverage-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (tok1 coverage "COND sigmatopdowntest.i = 0 -> 39, sigmatopdowntest.i = 1 -> 116, sigmatopdowntest.i = 2 -> 111, sigmatopdowntest.i = 3 -> 107, sigmatopdowntest.i = 4 -> 101, sigmatopdowntest.i = 5 -> 110, sigmatopdowntest.i = 6 -> 92, sigmatopdowntest.i = 7 -> 39, sigmatopdowntest.i = 8 -> 39 ENDCOND" "nil")))("sigmatopdowntest" sigmatopdowntest obrace_TCC1 0 (obrace_TCC1-1 nil 3805067364 ("" (cond-coverage-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (below type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (obrace coverage "COND sigmatopdowntest.i = 0 -> 123, sigmatopdowntest.i = 1 -> 32, sigmatopdowntest.i = 2 -> 32 ENDCOND" "nil")))("sigmatopdowntest" sigmatopdowntest emptydict2_TCC1 0 (emptydict2_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (emptydict2 subtype "6" "uint32")))("sigmatopdowntest" sigmatopdowntest emptydict2_TCC2 0 (emptydict2_TCC3-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (emptydict2 subtype "3" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 3))")))("sigmatopdowntest" sigmatopdowntest dict1_TCC1 0 (dict1_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (dict1 subtype "22" "uint32")))("sigmatopdowntest" sigmatopdowntest dict1_TCC2 0 (dict1_TCC3-1 nil 3805067364 ("" (grind) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (exp2 def-decl "posnat" exp2 nil)) nil (dict1 subtype "3" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 6))")))("sigmatopdowntest" sigmatopdowntest dict1_TCC3 0 (dict1_TCC4-1 nil 3805067364 ("" (grind) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (exp2 def-decl "posnat" exp2 nil)) nil (dict1 subtype "9" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 3))")))("sigmatopdowntest" sigmatopdowntest dict1_TCC4 0 (dict1_TCC6-1 nil 3805067364 ("" (grind) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (exp2 def-decl "posnat" exp2 nil)) nil (dict1 subtype "12" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 7))")))("sigmatopdowntest" sigmatopdowntest dict1_TCC5 0 (dict1_TCC7-1 nil 3805067364 ("" (grind) nil nil) ((real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (exp2 def-decl "posnat" exp2 nil)) nil (dict1 subtype "19" "naturalnumbers.below((number_fields.-)(exp2.exp2(8), 3))")))("sigmatopdowntest" sigmatopdowntest test0_TCC1 0 (test0_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (test0 subtype "2" "uint32")))("sigmatopdowntest" sigmatopdowntest test0_TCC2 0 (test0_TCC3-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (test0 subtype "7" "non_terminal")))("sigmatopdowntest" sigmatopdowntest test0eval 0 (test0eval-1 nil 3805071593 ("" (auto-rewrite-theory "sigmatopdown") (("" (auto-rewrite-theory "sigmatopdowntest") (("" (assert) (("" (postpone) nil nil)) nil)) nil)) nil) nil shostak))("sigmatopdowntest" sigmatopdowntest test1_TCC1 0 (test1_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (test1 subtype "7" "uint32")))("sigmatopdowntest" sigmatopdowntest test1_TCC2 0 (test1_TCC2-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (test1 subtype "17" "non_terminal")))("sigmatopdowntest" sigmatopdowntest test11_TCC1 0 (test11_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (test11 subtype "9" "uint32")))("sigmatopdowntest" sigmatopdowntest test2_TCC1 0 (test2_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil (test2 subtype "0" "non_terminal")))("sigmatopdowntest" sigmatopdowntest iparse_TCC1 0 (iparse_TCC1-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (byte type-eq-decl nil sigmatopdown nil) (non_terminal type-eq-decl nil sigmatopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (good_good_entry? const-decl "bool" sigmatopdown nil) (num_non_terminals const-decl "byte" sigmatopdown nil) (good_push_entry? const-decl "bool" sigmatopdown nil) (nice_entry? const-decl "bool" sigmatopdown nil)) nil (iparse subtype "sigmatopdowntest.pend" "[non_terminal -> (sigmatopdown.nice_entry?(sigmatopdowntest.len, sigmatopdowntest.i))]")))("sigmatopdowntest" sigmatopdowntest iparse_TCC2 0 (iparse_TCC2-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (byte type-eq-decl nil sigmatopdown nil) (num_non_terminals const-decl "byte" sigmatopdown nil) (non_terminal type-eq-decl nil sigmatopdown nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil)) nil (iparse subtype "0" "uint32")))("sigmatopdowntest" sigmatopdowntest iparse_TCC3 0 (iparse_TCC3-1 nil 3805067364 ("" (grind) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil) (exp2 def-decl "posnat" exp2 nil)) nil (iparse subtype "sigmatopdown.num_non_terminals" "uint8")))("sigmatopdowntest" sigmatopdowntest iparse_TCC4 0 (iparse_TCC4-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((num_non_terminals const-decl "byte" sigmatopdown nil) (good_good_entry? const-decl "bool" sigmatopdown nil) (good_push_entry? const-decl "bool" sigmatopdown nil) (nice_entry? const-decl "bool" sigmatopdown nil)) nil (iparse subtype "sigmatopdown.push(0, sigmatopdown.num_non_terminals)" "(sigmatopdown.nice_entry?(sigmatopdowntest.len, sigmatopdowntest.start))")))("sigmatopdowntest" sigmatopdowntest iparse_TCC5 0 (iparse_TCC5-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (byte type-eq-decl nil sigmatopdown nil) (non_terminal type-eq-decl nil sigmatopdown nil) (good_entry? const-decl "bool" sigmatopdown nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (num_non_terminals const-decl "byte" sigmatopdown nil) (good_good_entry? const-decl "bool" sigmatopdown nil) (good_push_entry? const-decl "bool" sigmatopdown nil) (nice_entry? const-decl "bool" sigmatopdown nil) (good_root? const-decl "bool" sigmatopdown nil) (good_or_fail? const-decl "bool" sigmatopdown nil) (count const-decl "upto(len)" arrayCount nil) (scafcount const-decl "uint64" sigmatopdown nil) (gfcount const-decl "uint64" sigmatopdown nil) (good_tscaffold? const-decl "bool" sigmatopdown nil) (fine_scaffold? const-decl "bool" sigmatopdown nil)) nil (iparse subtype "(LAMBDA (i: naturalnumbers.upto(sigmatopdowntest.len)): sigmatopdowntest.pend) WITH [(sigmatopdowntest.start)(sigmatopdowntest.root) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)]" "(sigmatopdown.fine_scaffold?(sigmatopdowntest.len, sigmatopdowntest.G, sigmatopdowntest.s)(sigmatopdowntest.start, sigmatopdowntest.root))")))("sigmatopdowntest" sigmatopdowntest iparse_TCC6 0 (iparse_TCC6-1 nil 3805067364 ("" (subtype-tcc) nil nil) nil nil (iparse subtype "1" "(sigmatopdown.good_depth?(sigmatopdowntest.len, (LAMBDA (i: naturalnumbers.upto(sigmatopdowntest.len)): sigmatopdowntest.pend) WITH [(sigmatopdowntest.start)(sigmatopdowntest.root) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)]))")))("sigmatopdowntest" sigmatopdowntest iparse_TCC7 0 (iparse_TCC7-1 nil 3805067364 ("" (subtype-tcc) nil nil) nil nil (iparse subtype "sigmatopdowntest.start" "uint32")))("sigmatopdowntest" sigmatopdowntest iparse_TCC8 0 (iparse_TCC8-1 nil 3805067364 ("" (subtype-tcc) nil nil) nil nil (iparse subtype "sigmatopdown.push(sigmatopdowntest.start, sigmatopdowntest.root)" "(sigmatopdown.fine_stack?(sigmatopdowntest.len, sigmatopdowntest.G, 1, (LAMBDA (i: naturalnumbers.upto(sigmatopdowntest.len)): sigmatopdowntest.pend) WITH [(sigmatopdowntest.start)(sigmatopdowntest.root) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)]))")))("sigmatopdowntest" sigmatopdowntest iparse_TCC9 0 (iparse_TCC9-1 nil 3805067364 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (<= const-decl "bool" reals nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (byte type-eq-decl nil sigmatopdown nil) (non_terminal type-eq-decl nil sigmatopdown nil) (nil application-judgement "above(n)" exp2 nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (num_non_terminals const-decl "byte" sigmatopdown nil)) nil (iparse subtype "booleans.FALSE" "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdowntest.root = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdowntest.len, sigmatopdowntest.G, (LAMBDA (i: naturalnumbers.upto(sigmatopdowntest.len)): sigmatopdowntest.pend) WITH [(sigmatopdowntest.start)(sigmatopdowntest.root) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)], sigmatopdowntest.start, sigmatopdowntest.root)) ELSE FORALL (i_1: naturalnumbers.upto(sigmatopdowntest.len)), n: (booleans.NOT)(sigmatopdown.loop?((LAMBDA (i: naturalnumbers.upto(sigmatopdowntest.len)): sigmatopdowntest.pend) WITH [(sigmatopdowntest.start)(sigmatopdowntest.root) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)](i_1)(sigmatopdown.n))) ENDIF}")))("sigmatopdown" sigmatopdown sigma_nat 0 (sigma_nat-1 nil 3885943452 ("" (skolem + (len "_" F)) (("" (measure-induct+ "len - i" ("i")) (("" (expand "sigma" +) (("" (ground) (("" (lift-if) (("" (ground) nil nil)) nil)) nil)) nil)) nil)) nil) ((pred type-eq-decl nil defined_types nil) (well_founded? const-decl "bool" orders nil) (int_minus_int_is_int application-judgement "int" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (measure_induction formula-decl nil measure_induction nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (index type-eq-decl nil integertypes nil) (upto nonempty-type-eq-decl nil naturalnumbers nil) (naturalnumber type-eq-decl nil naturalnumbers nil) (< const-decl "bool" reals nil) (wf_nat formula-decl nil naturalnumbers nil) (sigma def-decl "nat" sigmatopdown nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nil application-judgement "above(n)" exp2 nil)) shostak))("sigmatdproof" sigmatdproof good_qstack_size_TCC1 0 (good_qstack_size_TCC1-1 nil 3888202986 ("" (subtype-tcc) nil nil) nil nil (good_qstack_size subtype "sigmatdproof.len" "naturalnumbers.upto(sigmatdproof.len)")))("sigmatdproof" sigmatdproof good_qstack_size 0 (good_qstack_size-1 nil 3888202987 ("" (skolem 1 (len G s rootpos rootnt st "_")) (("" (induct "S") (("1" (grind) nil nil) ("2" (skeep*) (("2" (postpone) nil nil)) nil)) nil)) nil) nil shostak))("SHA256" SHA256 |hex2byte_TCC1| 0 (|hex2byte_TCC1-1| |nil| 3842832575 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| |nonempty-type-decl| NIL |booleans| NIL) (|bool| |nonempty-type-eq-decl| NIL |booleans| NIL) (NOT |const-decl| "[bool -> bool]" |booleans| NIL) (|number| |nonempty-type-decl| NIL |numbers| NIL) (|number_field_pred| |const-decl| "[number -> boolean]" |number_fields| NIL) (|number_field| |nonempty-type-from-decl| NIL |number_fields| NIL) (|real_pred| |const-decl| "[number_field -> boolean]" |reals| NIL) (|real| |nonempty-type-from-decl| NIL |reals| NIL) (< |const-decl| "bool" |reals| NIL) (|rational_pred| |const-decl| "[real -> boolean]" |rationals| NIL) (|rational| |nonempty-type-from-decl| NIL |rationals| NIL) (|integer_pred| |const-decl| "[rational -> boolean]" |integers| NIL) (|int| |nonempty-type-eq-decl| NIL |integers| NIL) (>= |const-decl| "bool" |reals| NIL) (|nat| |nonempty-type-eq-decl| NIL |naturalnumbers| NIL) (|byte| |nonempty-type-eq-decl| NIL |bytestrings| NIL) (|hexdigit?| |const-decl| "bool" SHA256 NIL) (|int_minus_int_is_int| |application-judgement| "int" |integers| NIL) (|hexvalue| |const-decl| "byte" SHA256 NIL) (|hexalpha?| |const-decl| "bool" SHA256 NIL) (|digit?| |const-decl| "bool" SHA256 NIL) (|real_lt_is_strict_total_order| |name-judgement| "(strict_total_order?[real])" |real_props| NIL) (NIL |application-judgement| "above(n)" |exp2| NIL) (|real_ge_is_total_order| |name-judgement| "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| |name-judgement| "(total_order?[real])" |real_props| NIL)) NIL (|hex2byte| SUBTYPE "SHA256.hexvalue(SHA256.hd1)" "uint8")))("SHA256" SHA256 |hex2byte_TCC2| 0 (|hex2byte_TCC2-1| |nil| 3842832575 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| |nonempty-type-decl| NIL |booleans| NIL) (|bool| |nonempty-type-eq-decl| NIL |booleans| NIL) (NOT |const-decl| "[bool -> bool]" |booleans| NIL) (|number| |nonempty-type-decl| NIL |numbers| NIL) (|number_field_pred| |const-decl| "[number -> boolean]" |number_fields| NIL) (|number_field| |nonempty-type-from-decl| NIL |number_fields| NIL) (|real_pred| |const-decl| "[number_field -> boolean]" |reals| NIL) (|real| |nonempty-type-from-decl| NIL |reals| NIL) (< |const-decl| "bool" |reals| NIL) (|rational_pred| |const-decl| "[real -> boolean]" |rationals| NIL) (|rational| |nonempty-type-from-decl| NIL |rationals| NIL) (|integer_pred| |const-decl| "[rational -> boolean]" |integers| NIL) (|int| |nonempty-type-eq-decl| NIL |integers| NIL) (>= |const-decl| "bool" |reals| NIL) (|nat| |nonempty-type-eq-decl| NIL |naturalnumbers| NIL) (|byte| |nonempty-type-eq-decl| NIL |bytestrings| NIL) (|hexdigit?| |const-decl| "bool" SHA256 NIL) (|int_minus_int_is_int| |application-judgement| "int" |integers| NIL) (|hexvalue| |const-decl| "byte" SHA256 NIL) (|hexalpha?| |const-decl| "bool" SHA256 NIL) (|digit?| |const-decl| "bool" SHA256 NIL) (|real_lt_is_strict_total_order| |name-judgement| "(strict_total_order?[real])" |real_props| NIL) (NIL |application-judgement| "above(n)" |exp2| NIL) (|real_ge_is_total_order| |name-judgement| "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| |name-judgement| "(total_order?[real])" |real_props| NIL)) NIL (|hex2byte| SUBTYPE "SHA256.hexvalue(SHA256.hd2)" "uint8")))("SHA256" SHA256 |hex2byte_TCC3| 0 (|hex2byte_TCC3-1| |nil| 3842832575 ("" (GRIND) NIL NIL) ((|boolean| |nonempty-type-decl| NIL |booleans| NIL) (|bool| |nonempty-type-eq-decl| NIL |booleans| NIL) (NOT |const-decl| "[bool -> bool]" |booleans| NIL) (|number| |nonempty-type-decl| NIL |numbers| NIL) (|number_field_pred| |const-decl| "[number -> boolean]" |number_fields| NIL) (|number_field| |nonempty-type-from-decl| NIL |number_fields| NIL) (|real_pred| |const-decl| "[number_field -> boolean]" |reals| NIL) (|real| |nonempty-type-from-decl| NIL |reals| NIL) (< |const-decl| "bool" |reals| NIL) (|rational_pred| |const-decl| "[real -> boolean]" |rationals| NIL) (|rational| |nonempty-type-from-decl| NIL |rationals| NIL) (|integer_pred| |const-decl| "[rational -> boolean]" |integers| NIL) (|int| |nonempty-type-eq-decl| NIL |integers| NIL) (>= |const-decl| "bool" |reals| NIL) (|nat| |nonempty-type-eq-decl| NIL |naturalnumbers| NIL) (|byte| |nonempty-type-eq-decl| NIL |bytestrings| NIL) (|hexdigit?| |const-decl| "bool" SHA256 NIL) (|real_le_is_total_order| |name-judgement| "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| |name-judgement| "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| |name-judgement| "(strict_total_order?[real])" |real_props| NIL) (|digit?| |const-decl| "bool" SHA256 NIL) (|hexalpha?| |const-decl| "bool" SHA256 NIL) (|even_minus_odd_is_odd| |application-judgement| "odd_int" |integers| NIL) (|int_plus_int_is_int| |application-judgement| "int" |integers| NIL) (|even_minus_even_is_even| |application-judgement| "even_int" |integers| NIL) (|int_minus_int_is_int| |application-judgement| "int" |integers| NIL) (|odd_minus_even_is_odd| |application-judgement| "odd_int" |integers| NIL) (|nnint_times_nnint_is_nnint| |application-judgement| "nonneg_int" |integers| NIL) (|int_times_int_is_int| |application-judgement| "int" |integers| NIL) (|even_times_int_is_even| |application-judgement| "even_int" |integers| NIL) (|hexvalue| |const-decl| "byte" SHA256 NIL) (|exp2| |def-decl| "posnat" |exp2| NIL) (|u8lshift| |const-decl| "uint8" |integertypes| NIL) (|max8| |const-decl| "uint8" |integertypes| NIL) (|u8plus| |const-decl| "uint8" |integertypes| NIL) (NIL |application-judgement| "above(n)" |exp2| NIL)) NIL (|hex2byte| SUBTYPE "integertypes.u8plus(integertypes.u8lshift(SHA256.hexvalue(SHA256.hd1), 4), SHA256.hexvalue(SHA256.hd2))" "byte")))("SHA256" SHA256 |w0_TCC1| 0 (|w0_TCC1-1| |nil| 3827348879 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| |nonempty-type-decl| NIL |booleans| NIL) (|bool| |nonempty-type-eq-decl| NIL |booleans| NIL) (NOT |const-decl| "[bool -> bool]" |booleans| NIL) (|number| |nonempty-type-decl| NIL |numbers| NIL) (|number_field_pred| |const-decl| "[number -> boolean]" |number_fields| NIL) (|number_field| |nonempty-type-from-decl| NIL |number_fields| NIL) (|real_pred| |const-decl| "[number_field -> boolean]" |reals| NIL) (|real| |nonempty-type-from-decl| NIL |reals| NIL) (< |const-decl| "bool" |reals| NIL) (|rational_pred| |const-decl| "[real -> boolean]" |rationals| NIL) (|rational| |nonempty-type-from-decl| NIL |rationals| NIL) (|integer_pred| |const-decl| "[rational -> boolean]" |integers| NIL) (|int| |nonempty-type-eq-decl| NIL |integers| NIL) (>= |const-decl| "bool" |reals| NIL) (|nat| |nonempty-type-eq-decl| NIL |naturalnumbers| NIL) (|below| |type-eq-decl| NIL |naturalnumbers| NIL) (|int_minus_int_is_int| |application-judgement| "int" |integers| NIL) (|real_le_is_total_order| |name-judgement| "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| |name-judgement| "(strict_total_order?[real])" |real_props| NIL) (NIL |application-judgement| "above(n)" |exp2| NIL)) NIL (|w0| SUBTYPE "0x0" "uint32")))("lte" sigmatd incdepth_TCC1 0 (incdepth_TCC1-1 nil 3897229421 ("" (subtype-tcc) nil nil) nil nil (incdepth subtype "sigmatd.u" "{x: sigmatd.ent | booleans.OR(sigmatd.fail?(x), sigmatd.good?(x))}")))("lte" sigmatd incdepth_TCC2 0 (incdepth_TCC2-1 nil 3897229421 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (ent type-decl nil sigmatd nil) (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (numfield nonempty-type-eq-decl nil number_fields nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil) (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (<= const-decl "bool" reals nil) (- const-decl "[numfield, numfield -> numfield]" number_fields nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint64 type-eq-decl nil integertypes nil) (dep shared-adt-accessor-decl "[{x: ent | fail?(x) OR good?(x)} -> uint64]" sigmatd nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (minus_nzint_is_nzint application-judgement "nzint" integers nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nil application-judgement "above(n)" exp2 nil)) nil (incdepth subtype "(number_fields.+)(1, sigmatd.dep(sigmatd.u))" "uint64")))("rotate" rotate lbytesXOR_TCC1 0 (lbytesXOR_TCC1-1 nil 3842821585 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (exp2 def-decl "posnat" exp2 nil) (uint8 type-eq-decl nil integertypes nil) (= const-decl "[T, T -> boolean]" equalities nil) (below type-eq-decl nil naturalnumbers nil) (byte nonempty-type-eq-decl nil bytestrings nil) (bytestring type-eq-decl nil bytestrings nil) (lbytes type-eq-decl nil rotate nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil)) nil (lbytesXOR subtype "rotate.l" "naturalnumbers.below(0x100000000)")))("rotate" rotate lbytesXOR_TCC2 0 (lbytesXOR_TCC2-1 nil 3842821585 ("" (subtype-tcc) nil nil) nil nil (lbytesXOR subtype "rotate.i" "naturalnumbers.below(rotate.X`length)")))("rotate" rotate lbytesXOR_TCC3 0 (lbytesXOR_TCC3-1 nil 3842821585 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (uint8 type-eq-decl nil integertypes nil) (= const-decl "[T, T -> boolean]" equalities nil) (below type-eq-decl nil naturalnumbers nil) (byte nonempty-type-eq-decl nil bytestrings nil) (bytestring type-eq-decl nil bytestrings nil) (lbytes type-eq-decl nil rotate nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (exp2 def-decl "posnat" exp2 nil)) nil (lbytesXOR subtype "rotate.X`seq(rotate.i)" "uint8")))("rotate" rotate lbytesXOR_TCC4 0 (lbytesXOR_TCC4-1 nil 3842821585 ("" (subtype-tcc) nil nil) nil nil (lbytesXOR subtype "rotate.i" "naturalnumbers.below(rotate.Y`length)")))("rotate" rotate lbytesXOR_TCC5 0 (lbytesXOR_TCC5-1 nil 3842821585 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (< const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (posnat nonempty-type-eq-decl nil integers nil) (uint8 type-eq-decl nil integertypes nil) (= const-decl "[T, T -> boolean]" equalities nil) (below type-eq-decl nil naturalnumbers nil) (byte nonempty-type-eq-decl nil bytestrings nil) (bytestring type-eq-decl nil bytestrings nil) (lbytes type-eq-decl nil rotate nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nil application-judgement "above(n)" exp2 nil) (exp2 def-decl "posnat" exp2 nil)) nil (lbytesXOR subtype "rotate.Y`seq(rotate.i)" "uint8")))("rotate" rotate lbytesXOR_TCC6 0 (lbytesXOR_TCC6-1 nil 3842821585 ("" (skeep*) (("" (typepred "u8xor(X`seq(i), Y`seq(i))") (("" (grind) nil nil)) nil)) nil) ((lbytes type-eq-decl nil rotate nil) (= const-decl "[T, T -> boolean]" equalities nil) (bytestring type-eq-decl nil bytestrings nil) (byte nonempty-type-eq-decl nil bytestrings nil) (below type-eq-decl nil naturalnumbers nil) (u8xor const-decl "uint8" integer_bv_ops nil) (uint8 type-eq-decl nil integertypes nil) (exp2 def-decl "posnat" exp2 nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (< const-decl "bool" reals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (NOT const-decl "[bool -> bool]" booleans nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers nil) (nil application-judgement "above(n)" exp2 nil) (even_times_int_is_even application-judgement "even_int" integers nil) (posint_times_posint_is_posint application-judgement "posint" integers nil) (even_plus_even_is_even application-judgement "even_int" integers nil) (/= const-decl "boolean" notequal nil) (XOR const-decl "bool" xor_def nil) (XOR const-decl "bvec[N]" bv_bitwise nil) (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil) (bv2nat_rec def-decl "nat" bv_nat nil) (bv2nat const-decl "below(exp2(N))" bv_nat nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil)) nil (lbytesXOR subtype "integer_bv_ops.u8xor(rotate.X`seq(rotate.i), rotate.Y`seq(rotate.i))" "byte")))