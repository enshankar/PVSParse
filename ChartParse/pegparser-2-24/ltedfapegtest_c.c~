//Code generated using pvs2ir2c
#include "ltedfapegtest_c.h"


ltedfapegtest_array_0_t new_ltedfapegtest_array_0(uint32_t size){
        ltedfapegtest_array_0_t tmp = (ltedfapegtest_array_0_t) safe_malloc(sizeof(struct ltedfapegtest_array_0_s) + (size * sizeof(ltedfapeg__prepeg_adt_t)));
        tmp->count = 1;
        tmp->size = size;
        tmp->max = size;
        return tmp;}

void release_ltedfapegtest_array_0(ltedfapegtest_array_0_t x){
        x->count--;
        if (x->count <= 0){
                for (int i = 0; i < x->size; i++){release_ltedfapeg__prepeg_adt(x->elems[i]);};
        //printf("\nFreeing\n");
        safe_free(x);}
}

void release_ltedfapegtest_array_0_ptr(pointer_t x, type_actual_t T){
        release_ltedfapegtest_array_0((ltedfapegtest_array_0_t)x);
}

ltedfapegtest_array_0_t copy_ltedfapegtest_array_0(ltedfapegtest_array_0_t x){
        ltedfapegtest_array_0_t tmp = new_ltedfapegtest_array_0(x->size);
        tmp->count = 1;
        for (uint32_t i = 0; i < x->size; i++){tmp->elems[i] = x->elems[i];
                x->elems[i]->count++;};
         return tmp;}

bool_t equal_ltedfapegtest_array_0(ltedfapegtest_array_0_t x, ltedfapegtest_array_0_t y){
        bool_t tmp = true;
        uint32_t i = 0;
        while (i < x->size && tmp){tmp = equal_ltedfapeg__prepeg_adt(x->elems[i], y->elems[i]); i++;};
        return tmp;}

char * json_ltedfapegtest_array_0(ltedfapegtest_array_0_t x){
        char ** tmp = (char **)safe_malloc(sizeof(void *) * x->size);
        for (uint32_t i = 0; i < x->size; i++){tmp[i] = json_ltedfapeg__prepeg_adt(x->elems[i]);};
        char * result = json_list_with_sep(tmp, x->size, '[', ',', ']');
        for (uint32_t i = 0; i < x->size; i++) free(tmp[i]);
        free(tmp);
        return result;}

bool_t equal_ltedfapegtest_array_0_ptr(pointer_t x, pointer_t y, type_actual_t T){
        return equal_ltedfapegtest_array_0((ltedfapegtest_array_0_t)x, (ltedfapegtest_array_0_t)y);
}

char * json_ltedfapegtest_array_0_ptr(pointer_t x, type_actual_t T){
        return json_ltedfapegtest_array_0((ltedfapegtest_array_0_t)x);
}

actual_ltedfapegtest_array_0_t actual_ltedfapegtest_array_0(){
        actual_ltedfapegtest_array_0_t new = (actual_ltedfapegtest_array_0_t)safe_malloc(sizeof(struct actual_ltedfapegtest_array_0_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapegtest_array_0_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapegtest_array_0_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapegtest_array_0_ptr);
 

 
        return new;
 };

ltedfapegtest_array_0_t update_ltedfapegtest_array_0(ltedfapegtest_array_0_t x, uint32_t i, ltedfapeg__prepeg_adt_t v){
         ltedfapegtest_array_0_t y;
         if (x->count == 1){y = x;}
                 else {y = copy_ltedfapegtest_array_0(x);
                      x->count--;};
        ltedfapeg__prepeg_adt_t * yelems = y->elems;
        if (v != NULL){v->count++;}
        if (yelems[i] != NULL){release_ltedfapeg__prepeg_adt(yelems[i]);};
         yelems[i] = v;
         return y;}

ltedfapegtest_array_0_t upgrade_ltedfapegtest_array_0(ltedfapegtest_array_0_t x, uint32_t i, ltedfapeg__prepeg_adt_t v){
         ltedfapegtest_array_0_t y;
         if (x->count == 1 && i < x->max){y = x;}
                 else if (i > x->max){uint32_t newmax = x->max <= UINT32_MAX/2 ? 2*x->max: UINT32_MAX;
                y = safe_realloc(x, sizeof(struct ltedfapegtest_array_0_s) + (newmax * sizeof(ltedfapeg__prepeg_adt_t)));
                y->count = 1;
                y->size = i+1;
                y->max = newmax;
                release_ltedfapegtest_array_0(x);} else {y = copy_ltedfapegtest_array_0(x);
                      x->count--;};
        ltedfapeg__prepeg_adt_t * yelems = y->elems;
        if (v != NULL){v->count++;}
        if (yelems[i] != NULL){release_ltedfapeg__prepeg_adt(yelems[i]);};
         yelems[i] = v;
         return y;}



void release_ltedfapegtest_funtype_1(ltedfapegtest_funtype_1_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapegtest_funtype_1_t copy_ltedfapegtest_funtype_1(ltedfapegtest_funtype_1_t x){return x->ftbl->cptr(x);}

uint32_t lookup_ltedfapegtest_funtype_1(ltedfapegtest_funtype_1_htbl_t htbl, uint8_t i, uint32_t ihash){
        uint32_t mask = htbl->size - 1;
        uint32_t hashindex = ihash & mask;
        ltedfapegtest_funtype_1_hashentry_t data = htbl->data[hashindex];
        bool_t keyzero;

        keyzero = (data.key == 0);
        bool_t keymatch;
        keymatch = (data.key == i);
        while ((!keyzero || data.keyhash != 0) &&
                 (data.keyhash != ihash || !keymatch)){
                hashindex++;
                hashindex = hashindex & mask;
                data = htbl->data[hashindex];

                keyzero = (data.key == 0);

                keymatch = (data.key == i);
                }
        return hashindex;
        }

ltedfapegtest_funtype_1_t dupdate_ltedfapegtest_funtype_1(ltedfapegtest_funtype_1_t a, uint8_t i, ltedfapeg__prepeg_adt_t v){
        ltedfapegtest_funtype_1_htbl_t htbl = a->htbl;
        if (htbl == NULL){//construct new htbl
                htbl = (ltedfapegtest_funtype_1_htbl_t)safe_malloc(sizeof(struct ltedfapegtest_funtype_1_htbl_s));
                htbl->size = HTBL_DEFAULT_SIZE; htbl->num_entries = 0;
                htbl->data = (ltedfapegtest_funtype_1_hashentry_t *)safe_malloc(HTBL_DEFAULT_SIZE * sizeof(struct ltedfapegtest_funtype_1_hashentry_s));
                for (uint32_t j = 0; j < HTBL_DEFAULT_SIZE; j++){htbl->data[j].key = (uint8_t)0; htbl->data[j].keyhash = 0;
                }
                a->htbl = htbl;
        }
        uint32_t size = htbl->size;
        uint32_t num_entries = htbl->num_entries;
        ltedfapegtest_funtype_1_hashentry_t * data = htbl->data;
        if (num_entries/3 >  size/5){//resize data
                uint32_t new_size = 2*size; uint32_t new_mask = new_size - 1;
                if (size >= HTBL_MAX_SIZE) out_of_memory();
                ltedfapegtest_funtype_1_hashentry_t * new_data = (ltedfapegtest_funtype_1_hashentry_t *)safe_malloc(new_size * sizeof(struct ltedfapegtest_funtype_1_hashentry_s));
                for (uint32_t j = 0; j < new_size; j++){
                        new_data[j].key = 0;
                        new_data[j].keyhash = 0;}
                for (uint32_t j = 0; j < size; j++){//transfer entries
                        uint32_t keyhash = data[j].keyhash;
                        bool_t keyzero;
                        keyzero = (data[j].key == 0);
                        if (!keyzero || keyhash != 0){
                                uint32_t new_loc = keyhash ^ new_mask;
                                keyzero = (new_data[new_loc].key == 0);
                                while (keyzero && new_data[new_loc].keyhash == 0){
                                        new_loc++;
                                        new_loc = new_loc ^ new_mask;

                                        keyzero = (new_data[new_loc].key == 0);
                                }
                                new_data[new_loc].key = (uint8_t)data[j].key;
                                new_data[new_loc].keyhash = keyhash;
                                new_data[new_loc].value = (ltedfapeg__prepeg_adt_t)data[j].value;
                                }}
                htbl->size = new_size;
                htbl->num_entries = num_entries;
                htbl->data = new_data;
                safe_free(data);}
        uint32_t ihash = uint32_hash(i);
        uint32_t hashindex = lookup_ltedfapegtest_funtype_1(htbl, i, ihash);
        ltedfapegtest_funtype_1_hashentry_t hentry = htbl->data[hashindex];
        uint32_t hkeyhash = hentry.keyhash;
        bool_t hentrykeyzero;
        hentrykeyzero = (hentry.key == 0);

        if (hentrykeyzero && (hkeyhash == 0))
                {htbl->data[hashindex].key = (uint8_t)i; htbl->data[hashindex].keyhash = ihash; htbl->data[hashindex].value = (ltedfapeg__prepeg_adt_t)v; htbl->num_entries++;}
            else {ltedfapeg__prepeg_adt_t tempvalue;tempvalue = (ltedfapeg__prepeg_adt_t)htbl->data[hashindex].value;htbl->data[hashindex].value = (ltedfapeg__prepeg_adt_t)v;if (v != NULL) v->count++;if (tempvalue != NULL)release_ltedfapeg__prepeg_adt(tempvalue);};
        return a;

}

ltedfapegtest_funtype_1_t update_ltedfapegtest_funtype_1(ltedfapegtest_funtype_1_t a, uint8_t i, ltedfapeg__prepeg_adt_t v){
        if (a->count == 1){
                return dupdate_ltedfapegtest_funtype_1(a, i, v);
            } else {
                ltedfapegtest_funtype_1_t x = copy_ltedfapegtest_funtype_1(a);
                a->count--;
                return dupdate_ltedfapegtest_funtype_1(x, i, v);
            }}

bool_t equal_ltedfapegtest_funtype_1(ltedfapegtest_funtype_1_t x, ltedfapegtest_funtype_1_t y){
        return false;}

char* json_ltedfapegtest_funtype_1(ltedfapegtest_funtype_1_t x){char * result = safe_malloc(33); sprintf(result, "%s", "\"ltedfapegtest_funtype_1\""); return result;}


ltedfapeg__prepeg_adt_t f_ltedfapegtest_closure_2(struct ltedfapegtest_closure_2_s * closure, uint8_t bvar){
if (closure->htbl != NULL){
        ltedfapegtest_funtype_1_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_ltedfapegtest_funtype_1(htbl, bvar, hash);
        ltedfapegtest_funtype_1_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            ltedfapeg__prepeg_adt_t result;
            result = (ltedfapeg__prepeg_adt_t)entry.value;
            if (result != NULL) result->count++;
            return result;}
        

        return h_ltedfapegtest_closure_2(bvar);};

return h_ltedfapegtest_closure_2(bvar);}

ltedfapeg__prepeg_adt_t m_ltedfapegtest_closure_2(struct ltedfapegtest_closure_2_s * closure, uint8_t bvar){
        return h_ltedfapegtest_closure_2(bvar);}

ltedfapeg__prepeg_adt_t h_ltedfapegtest_closure_2(uint8_t ivar_5){
        ltedfapeg__prepeg_adt_t result;
        result = (ltedfapeg__prepeg_adt_t)ltedfapegtest__djson((uint8_t)ivar_5);

        return result;
}

ltedfapegtest_closure_2_t new_ltedfapegtest_closure_2(void){
        static struct ltedfapegtest_funtype_1_ftbl_s ftbl = {.fptr = (ltedfapeg__prepeg_adt_t (*)(ltedfapegtest_funtype_1_t, uint8_t))&f_ltedfapegtest_closure_2, .mptr = (ltedfapeg__prepeg_adt_t (*)(ltedfapegtest_funtype_1_t, uint8_t))&m_ltedfapegtest_closure_2, .rptr =  (void (*)(ltedfapegtest_funtype_1_t))&release_ltedfapegtest_closure_2, .cptr = (ltedfapegtest_funtype_1_t (*)(ltedfapegtest_funtype_1_t))&copy_ltedfapegtest_closure_2};
        ltedfapegtest_closure_2_t tmp = (ltedfapegtest_closure_2_t) safe_malloc(sizeof(struct ltedfapegtest_closure_2_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapegtest_closure_2(ltedfapegtest_funtype_1_t closure){
        ltedfapegtest_closure_2_t x = (ltedfapegtest_closure_2_t)closure;
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapegtest_closure_2_t copy_ltedfapegtest_closure_2(ltedfapegtest_closure_2_t x){
        ltedfapegtest_closure_2_t y = new_ltedfapegtest_closure_2();
        y->ftbl = x->ftbl;

        if (x->htbl != NULL){
            ltedfapegtest_funtype_1_htbl_t new_htbl = (ltedfapegtest_funtype_1_htbl_t) safe_malloc(sizeof(struct ltedfapegtest_funtype_1_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapegtest_funtype_1_hashentry_t * new_data = (ltedfapegtest_funtype_1_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapegtest_funtype_1_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapegtest_funtype_1_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


ltedfapegtest_array_3_t new_ltedfapegtest_array_3(uint32_t size){
        ltedfapegtest_array_3_t tmp = (ltedfapegtest_array_3_t) safe_malloc(sizeof(struct ltedfapegtest_array_3_s) + (size * sizeof(uint8_t)));
        tmp->count = 1;
        tmp->size = size;;
        tmp->max = size;
         return tmp;}

void release_ltedfapegtest_array_3(ltedfapegtest_array_3_t x){
        x->count--;
         if (x->count <= 0){safe_free(x);}
}

void release_ltedfapegtest_array_3_ptr(pointer_t x, type_actual_t T){
        release_ltedfapegtest_array_3((ltedfapegtest_array_3_t)x);
}

ltedfapegtest_array_3_t copy_ltedfapegtest_array_3(ltedfapegtest_array_3_t x){
        ltedfapegtest_array_3_t tmp = new_ltedfapegtest_array_3(x->size);
        tmp->count = 1;
        for (uint32_t i = 0; i < x->size; i++){tmp->elems[i] = (uint8_t)x->elems[i];};
         return tmp;}

bool_t equal_ltedfapegtest_array_3(ltedfapegtest_array_3_t x, ltedfapegtest_array_3_t y){
        bool_t tmp = true;
        uint32_t i = 0;
        while (i < x->size && tmp){tmp = (x->elems[i] == y->elems[i]); i++;};
        return tmp;}

char * json_ltedfapegtest_array_3(ltedfapegtest_array_3_t x){
        char ** tmp = (char **)safe_malloc(sizeof(void *) * x->size);
        for (uint32_t i = 0; i < x->size; i++){tmp[i] = json_uint8(x->elems[i]);};
        char * result = json_list_with_sep(tmp, x->size, '[', ',', ']');
        for (uint32_t i = 0; i < x->size; i++) free(tmp[i]);
        free(tmp);
        return result;}

bool_t equal_ltedfapegtest_array_3_ptr(pointer_t x, pointer_t y, type_actual_t T){
        return equal_ltedfapegtest_array_3((ltedfapegtest_array_3_t)x, (ltedfapegtest_array_3_t)y);
}

char * json_ltedfapegtest_array_3_ptr(pointer_t x, type_actual_t T){
        return json_ltedfapegtest_array_3((ltedfapegtest_array_3_t)x);
}

actual_ltedfapegtest_array_3_t actual_ltedfapegtest_array_3(){
        actual_ltedfapegtest_array_3_t new = (actual_ltedfapegtest_array_3_t)safe_malloc(sizeof(struct actual_ltedfapegtest_array_3_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapegtest_array_3_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapegtest_array_3_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapegtest_array_3_ptr);
 

 
        return new;
 };

ltedfapegtest_array_3_t update_ltedfapegtest_array_3(ltedfapegtest_array_3_t x, uint32_t i, uint8_t v){
        ltedfapegtest_array_3_t y; 
         if (x->count == 1){y = x;}
           else {y = copy_ltedfapegtest_array_3(x );
                x->count--;};
        y->elems[i] = (uint8_t)v;
        return y;}

ltedfapegtest_array_3_t upgrade_ltedfapegtest_array_3(ltedfapegtest_array_3_t x, uint32_t i, uint8_t v){
        ltedfapegtest_array_3_t y; 
         if (x->count == 1 && i < x->max){y = x;}
           else if (i > x->max){uint32_t newmax = x->max <= UINT32_MAX/2 ? 2*x->max: UINT32_MAX;
                y = safe_realloc(x, sizeof(struct ltedfapegtest_array_3_s) + (newmax * sizeof(uint8_t)));
                y->count = 1;
                y->size = i+1;
                y->max = newmax;
                release_ltedfapegtest_array_3(x);}
           else {y = copy_ltedfapegtest_array_3(x );
                x->count--;};
        y->elems[i] = (uint8_t)v;
        return y;}




ltedfapegtest_record_4_t new_ltedfapegtest_record_4(void){
        ltedfapegtest_record_4_t tmp = (ltedfapegtest_record_4_t) safe_malloc(sizeof(struct ltedfapegtest_record_4_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapegtest_record_4(ltedfapegtest_record_4_t x){
        x->count--;
        if (x->count <= 0){
         release_ltedfapegtest_array_3(x->project_1);
         release_ltedfapegtest_array_3(x->project_2);
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_ltedfapegtest_record_4_ptr(pointer_t x, type_actual_t T){
        release_ltedfapegtest_record_4((ltedfapegtest_record_4_t)x);
}

ltedfapegtest_record_4_t copy_ltedfapegtest_record_4(ltedfapegtest_record_4_t x){
        ltedfapegtest_record_4_t y = new_ltedfapegtest_record_4();
        y->project_1 = x->project_1;
        if (y->project_1 != NULL){y->project_1->count++;};
        y->project_2 = x->project_2;
        if (y->project_2 != NULL){y->project_2->count++;};
        y->count = 1;
        return y;}

bool_t equal_ltedfapegtest_record_4(ltedfapegtest_record_4_t x, ltedfapegtest_record_4_t y){
        bool_t tmp = true;
        tmp = tmp && equal_ltedfapegtest_array_3(x->project_1, y->project_1);
        tmp = tmp && equal_ltedfapegtest_array_3(x->project_2, y->project_2);
        return tmp;}

char * json_ltedfapegtest_record_4(ltedfapegtest_record_4_t x){
        char * tmp[2]; 
        char * fld0 = safe_malloc(21);
         sprintf(fld0, "\"project_1\" : ");
        tmp[0] = safe_strcat(fld0, json_ltedfapegtest_array_3(x->project_1));
        char * fld1 = safe_malloc(21);
         sprintf(fld1, "\"project_2\" : ");
        tmp[1] = safe_strcat(fld1, json_ltedfapegtest_array_3(x->project_2));
         char * result = json_list_with_sep(tmp, 2,  '{', ',', '}');
         for (uint32_t i = 0; i < 2; i++) free(tmp[i]);
        return result;}

bool_t equal_ltedfapegtest_record_4_ptr(pointer_t x, pointer_t y, actual_ltedfapegtest_record_4_t T){
        return equal_ltedfapegtest_record_4((ltedfapegtest_record_4_t)x, (ltedfapegtest_record_4_t)y);
}

char * json_ltedfapegtest_record_4_ptr(pointer_t x, actual_ltedfapegtest_record_4_t T){
        return json_ltedfapegtest_record_4((ltedfapegtest_record_4_t)x);
}

actual_ltedfapegtest_record_4_t actual_ltedfapegtest_record_4(){
        actual_ltedfapegtest_record_4_t new = (actual_ltedfapegtest_record_4_t)safe_malloc(sizeof(struct actual_ltedfapegtest_record_4_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapegtest_record_4_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapegtest_record_4_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapegtest_record_4_ptr);
 

 
        return new;
 };

ltedfapegtest_record_4_t update_ltedfapegtest_record_4_project_1(ltedfapegtest_record_4_t x, ltedfapegtest_array_3_t v){
        ltedfapegtest_record_4_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->project_1 != NULL){release_ltedfapegtest_array_3(x->project_1);};}
        else {y = copy_ltedfapegtest_record_4(x); x->count--; y->project_1->count--;};
        y->project_1 = (ltedfapegtest_array_3_t)v;
        return y;}

ltedfapegtest_record_4_t update_ltedfapegtest_record_4_project_2(ltedfapegtest_record_4_t x, ltedfapegtest_array_3_t v){
        ltedfapegtest_record_4_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->project_2 != NULL){release_ltedfapegtest_array_3(x->project_2);};}
        else {y = copy_ltedfapegtest_record_4(x); x->count--; y->project_2->count--;};
        y->project_2 = (ltedfapegtest_array_3_t)v;
        return y;}



void release_ltedfapegtest_funtype_5(ltedfapegtest_funtype_5_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapegtest_funtype_5_t copy_ltedfapegtest_funtype_5(ltedfapegtest_funtype_5_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapegtest_funtype_5(ltedfapegtest_funtype_5_t x, ltedfapegtest_funtype_5_t y){
        return false;}

char* json_ltedfapegtest_funtype_5(ltedfapegtest_funtype_5_t x){char * result = safe_malloc(33); sprintf(result, "%s", "\"ltedfapegtest_funtype_5\""); return result;}


ltedfapegtest_array_3_t f_ltedfapegtest_closure_6(struct ltedfapegtest_closure_6_s * closure, ltedfapegtest_record_4_t bvar){
        ltedfapegtest_array_3_t bvar_1;
        bvar_1 = (ltedfapegtest_array_3_t)bvar->project_1;
        bvar->project_1->count++;
        ltedfapegtest_array_3_t bvar_2;
        bvar_2 = (ltedfapegtest_array_3_t)bvar->project_2;
        bvar->project_2->count++;
        release_ltedfapegtest_record_4(bvar);
        ltedfapegtest_array_3_t result = h_ltedfapegtest_closure_6(bvar_1, bvar_2, closure->fvar_1, closure->fvar_2); 
        release_ltedfapegtest_array_3(bvar_1);
        release_ltedfapegtest_array_3(bvar_2);
        return result;}

ltedfapegtest_array_3_t m_ltedfapegtest_closure_6(struct ltedfapegtest_closure_6_s * closure, ltedfapegtest_array_3_t bvar_1, ltedfapegtest_array_3_t bvar_2){
        return h_ltedfapegtest_closure_6(bvar_1, bvar_2, closure->fvar_1, closure->fvar_2);}

ltedfapegtest_array_3_t h_ltedfapegtest_closure_6(ltedfapegtest_array_3_t ivar_29, ltedfapegtest_array_3_t ivar_30, uint8_t ivar_2, uint8_t ivar_1){
        ltedfapegtest_array_3_t result;
        mpz_t ivar_41;
        mpz_init(ivar_41);
        uint32_t size6188;
        uint16_t ivar_40;
        uint8_t ivar_35;
        //copying to uint8 from uint8;
        ivar_35 = (uint8_t)ivar_1;
        uint8_t ivar_36;
        //copying to uint8 from uint8;
        ivar_36 = (uint8_t)ivar_2;
        ivar_40 = (uint16_t)(ivar_35 + ivar_36);
        uint8_t ivar_39;
        //copying to uint8 from uint16;
        ivar_39 = (uint8_t)ivar_40;
        uint8_t ivar_38;
        ivar_38 = (uint8_t)identity_uint8__I((uint8_t)ivar_39);
        //copying to uint32 from uint8;
        size6188 = (uint32_t)ivar_38;
        size6188 += 0;
        result = new_ltedfapegtest_array_3(size6188);
        for (uint32_t index6185 = 0; index6185 < size6188; index6185++){
             mpz_t ivar_41;
             mpz_init(ivar_41);
             mpz_set_ui(ivar_41, index6185);
             bool_t ivar_45;
             int64_t tmp6186 = mpz_cmp_ui(ivar_41, ivar_1);
             ivar_45 = (tmp6186 < 0);
             if (ivar_45){  
           uint8_t ivar_52;
           //copying to uint8 from mpz;
           ivar_52 = (uint8_t)mpz_get_ui(ivar_41);
           mpz_clear(ivar_41);
           result->elems[index6185] = (uint8_t)ivar_29->elems[ivar_52];
} else {
             
           uint8_t ivar_62;
           mpz_t tmp6187;
           mpz_init(tmp6187);
           mpz_sub_ui(tmp6187, ivar_41, ivar_1);
           ivar_62 = (uint8_t) mpz_get_ui(tmp6187);
           mpz_clear(tmp6187);
           result->elems[index6185] = (uint8_t)ivar_30->elems[ivar_62];
};
        };
        release_ltedfapegtest_array_3(ivar_30);
        release_ltedfapegtest_array_3(ivar_29);

        return result;
}

ltedfapegtest_closure_6_t new_ltedfapegtest_closure_6(void){
        static struct ltedfapegtest_funtype_5_ftbl_s ftbl = {.fptr = (ltedfapegtest_array_3_t (*)(ltedfapegtest_funtype_5_t, ltedfapegtest_record_4_t))&f_ltedfapegtest_closure_6, .mptr = (ltedfapegtest_array_3_t (*)(ltedfapegtest_funtype_5_t, ltedfapegtest_array_3_t, ltedfapegtest_array_3_t))&m_ltedfapegtest_closure_6, .rptr =  (void (*)(ltedfapegtest_funtype_5_t))&release_ltedfapegtest_closure_6, .cptr = (ltedfapegtest_funtype_5_t (*)(ltedfapegtest_funtype_5_t))&copy_ltedfapegtest_closure_6};
        ltedfapegtest_closure_6_t tmp = (ltedfapegtest_closure_6_t) safe_malloc(sizeof(struct ltedfapegtest_closure_6_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapegtest_closure_6(ltedfapegtest_funtype_5_t closure){
        ltedfapegtest_closure_6_t x = (ltedfapegtest_closure_6_t)closure;
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapegtest_closure_6_t copy_ltedfapegtest_closure_6(ltedfapegtest_closure_6_t x){
        ltedfapegtest_closure_6_t y = new_ltedfapegtest_closure_6();
        y->ftbl = x->ftbl;

        y->fvar_1 = (uint8_t)x->fvar_1;
        y->fvar_2 = (uint8_t)x->fvar_2;
        if (x->htbl != NULL){
            ltedfapegtest_funtype_5_htbl_t new_htbl = (ltedfapegtest_funtype_5_htbl_t) safe_malloc(sizeof(struct ltedfapegtest_funtype_5_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapegtest_funtype_5_hashentry_t * new_data = (ltedfapegtest_funtype_5_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapegtest_funtype_5_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapegtest_funtype_5_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}

void release_ltedfapegtest_funtype_7(ltedfapegtest_funtype_7_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapegtest_funtype_7_t copy_ltedfapegtest_funtype_7(ltedfapegtest_funtype_7_t x){return x->ftbl->cptr(x);}

uint32_t lookup_ltedfapegtest_funtype_7(ltedfapegtest_funtype_7_htbl_t htbl, uint8_t i, uint32_t ihash){
        uint32_t mask = htbl->size - 1;
        uint32_t hashindex = ihash & mask;
        ltedfapegtest_funtype_7_hashentry_t data = htbl->data[hashindex];
        bool_t keyzero;

        keyzero = (data.key == 0);
        bool_t keymatch;
        keymatch = (data.key == i);
        while ((!keyzero || data.keyhash != 0) &&
                 (data.keyhash != ihash || !keymatch)){
                hashindex++;
                hashindex = hashindex & mask;
                data = htbl->data[hashindex];

                keyzero = (data.key == 0);

                keymatch = (data.key == i);
                }
        return hashindex;
        }

ltedfapegtest_funtype_7_t dupdate_ltedfapegtest_funtype_7(ltedfapegtest_funtype_7_t a, uint8_t i, ltedfapeg__ent_adt_t v){
        ltedfapegtest_funtype_7_htbl_t htbl = a->htbl;
        if (htbl == NULL){//construct new htbl
                htbl = (ltedfapegtest_funtype_7_htbl_t)safe_malloc(sizeof(struct ltedfapegtest_funtype_7_htbl_s));
                htbl->size = HTBL_DEFAULT_SIZE; htbl->num_entries = 0;
                htbl->data = (ltedfapegtest_funtype_7_hashentry_t *)safe_malloc(HTBL_DEFAULT_SIZE * sizeof(struct ltedfapegtest_funtype_7_hashentry_s));
                for (uint32_t j = 0; j < HTBL_DEFAULT_SIZE; j++){htbl->data[j].key = (uint8_t)0; htbl->data[j].keyhash = 0;
                }
                a->htbl = htbl;
        }
        uint32_t size = htbl->size;
        uint32_t num_entries = htbl->num_entries;
        ltedfapegtest_funtype_7_hashentry_t * data = htbl->data;
        if (num_entries/3 >  size/5){//resize data
                uint32_t new_size = 2*size; uint32_t new_mask = new_size - 1;
                if (size >= HTBL_MAX_SIZE) out_of_memory();
                ltedfapegtest_funtype_7_hashentry_t * new_data = (ltedfapegtest_funtype_7_hashentry_t *)safe_malloc(new_size * sizeof(struct ltedfapegtest_funtype_7_hashentry_s));
                for (uint32_t j = 0; j < new_size; j++){
                        new_data[j].key = 0;
                        new_data[j].keyhash = 0;}
                for (uint32_t j = 0; j < size; j++){//transfer entries
                        uint32_t keyhash = data[j].keyhash;
                        bool_t keyzero;
                        keyzero = (data[j].key == 0);
                        if (!keyzero || keyhash != 0){
                                uint32_t new_loc = keyhash ^ new_mask;
                                keyzero = (new_data[new_loc].key == 0);
                                while (keyzero && new_data[new_loc].keyhash == 0){
                                        new_loc++;
                                        new_loc = new_loc ^ new_mask;

                                        keyzero = (new_data[new_loc].key == 0);
                                }
                                new_data[new_loc].key = (uint8_t)data[j].key;
                                new_data[new_loc].keyhash = keyhash;
                                new_data[new_loc].value = (ltedfapeg__ent_adt_t)data[j].value;
                                }}
                htbl->size = new_size;
                htbl->num_entries = num_entries;
                htbl->data = new_data;
                safe_free(data);}
        uint32_t ihash = uint32_hash(i);
        uint32_t hashindex = lookup_ltedfapegtest_funtype_7(htbl, i, ihash);
        ltedfapegtest_funtype_7_hashentry_t hentry = htbl->data[hashindex];
        uint32_t hkeyhash = hentry.keyhash;
        bool_t hentrykeyzero;
        hentrykeyzero = (hentry.key == 0);

        if (hentrykeyzero && (hkeyhash == 0))
                {htbl->data[hashindex].key = (uint8_t)i; htbl->data[hashindex].keyhash = ihash; htbl->data[hashindex].value = (ltedfapeg__ent_adt_t)v; htbl->num_entries++;}
            else {ltedfapeg__ent_adt_t tempvalue;tempvalue = (ltedfapeg__ent_adt_t)htbl->data[hashindex].value;htbl->data[hashindex].value = (ltedfapeg__ent_adt_t)v;if (v != NULL) v->count++;if (tempvalue != NULL)release_ltedfapeg__ent_adt(tempvalue);};
        return a;

}

ltedfapegtest_funtype_7_t update_ltedfapegtest_funtype_7(ltedfapegtest_funtype_7_t a, uint8_t i, ltedfapeg__ent_adt_t v){
        if (a->count == 1){
                return dupdate_ltedfapegtest_funtype_7(a, i, v);
            } else {
                ltedfapegtest_funtype_7_t x = copy_ltedfapegtest_funtype_7(a);
                a->count--;
                return dupdate_ltedfapegtest_funtype_7(x, i, v);
            }}

bool_t equal_ltedfapegtest_funtype_7(ltedfapegtest_funtype_7_t x, ltedfapegtest_funtype_7_t y){
        return false;}

char* json_ltedfapegtest_funtype_7(ltedfapegtest_funtype_7_t x){char * result = safe_malloc(33); sprintf(result, "%s", "\"ltedfapegtest_funtype_7\""); return result;}


ltedfapeg__ent_adt_t f_ltedfapegtest_closure_8(struct ltedfapegtest_closure_8_s * closure, uint8_t bvar){
if (closure->htbl != NULL){
        ltedfapegtest_funtype_7_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_ltedfapegtest_funtype_7(htbl, bvar, hash);
        ltedfapegtest_funtype_7_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            ltedfapeg__ent_adt_t result;
            result = (ltedfapeg__ent_adt_t)entry.value;
            if (result != NULL) result->count++;
            return result;}
        

        return h_ltedfapegtest_closure_8(bvar);};

return h_ltedfapegtest_closure_8(bvar);}

ltedfapeg__ent_adt_t m_ltedfapegtest_closure_8(struct ltedfapegtest_closure_8_s * closure, uint8_t bvar){
        return h_ltedfapegtest_closure_8(bvar);}

ltedfapeg__ent_adt_t h_ltedfapegtest_closure_8(uint8_t ivar_10){
        ltedfapeg__ent_adt_t result;
        result = (ltedfapeg__ent_adt_t)ltedfapeg__pending();
        if (result != NULL) result->count++;

        return result;
}

ltedfapegtest_closure_8_t new_ltedfapegtest_closure_8(void){
        static struct ltedfapegtest_funtype_7_ftbl_s ftbl = {.fptr = (ltedfapeg__ent_adt_t (*)(ltedfapegtest_funtype_7_t, uint8_t))&f_ltedfapegtest_closure_8, .mptr = (ltedfapeg__ent_adt_t (*)(ltedfapegtest_funtype_7_t, uint8_t))&m_ltedfapegtest_closure_8, .rptr =  (void (*)(ltedfapegtest_funtype_7_t))&release_ltedfapegtest_closure_8, .cptr = (ltedfapegtest_funtype_7_t (*)(ltedfapegtest_funtype_7_t))&copy_ltedfapegtest_closure_8};
        ltedfapegtest_closure_8_t tmp = (ltedfapegtest_closure_8_t) safe_malloc(sizeof(struct ltedfapegtest_closure_8_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapegtest_closure_8(ltedfapegtest_funtype_7_t closure){
        ltedfapegtest_closure_8_t x = (ltedfapegtest_closure_8_t)closure;
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapegtest_closure_8_t copy_ltedfapegtest_closure_8(ltedfapegtest_closure_8_t x){
        ltedfapegtest_closure_8_t y = new_ltedfapegtest_closure_8();
        y->ftbl = x->ftbl;

        if (x->htbl != NULL){
            ltedfapegtest_funtype_7_htbl_t new_htbl = (ltedfapegtest_funtype_7_htbl_t) safe_malloc(sizeof(struct ltedfapegtest_funtype_7_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapegtest_funtype_7_hashentry_t * new_data = (ltedfapegtest_funtype_7_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapegtest_funtype_7_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapegtest_funtype_7_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}

void release_ltedfapegtest_funtype_9(ltedfapegtest_funtype_9_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapegtest_funtype_9_t copy_ltedfapegtest_funtype_9(ltedfapegtest_funtype_9_t x){return x->ftbl->cptr(x);}

uint32_t lookup_ltedfapegtest_funtype_9(ltedfapegtest_funtype_9_htbl_t htbl, uint8_t i, uint32_t ihash){
        uint32_t mask = htbl->size - 1;
        uint32_t hashindex = ihash & mask;
        ltedfapegtest_funtype_9_hashentry_t data = htbl->data[hashindex];
        bool_t keyzero;

        keyzero = (data.key == 0);
        bool_t keymatch;
        keymatch = (data.key == i);
        while ((!keyzero || data.keyhash != 0) &&
                 (data.keyhash != ihash || !keymatch)){
                hashindex++;
                hashindex = hashindex & mask;
                data = htbl->data[hashindex];

                keyzero = (data.key == 0);

                keymatch = (data.key == i);
                }
        return hashindex;
        }

ltedfapegtest_funtype_9_t dupdate_ltedfapegtest_funtype_9(ltedfapegtest_funtype_9_t a, uint8_t i, ltedfapegtest_funtype_7_t v){
        ltedfapegtest_funtype_9_htbl_t htbl = a->htbl;
        if (htbl == NULL){//construct new htbl
                htbl = (ltedfapegtest_funtype_9_htbl_t)safe_malloc(sizeof(struct ltedfapegtest_funtype_9_htbl_s));
                htbl->size = HTBL_DEFAULT_SIZE; htbl->num_entries = 0;
                htbl->data = (ltedfapegtest_funtype_9_hashentry_t *)safe_malloc(HTBL_DEFAULT_SIZE * sizeof(struct ltedfapegtest_funtype_9_hashentry_s));
                for (uint32_t j = 0; j < HTBL_DEFAULT_SIZE; j++){htbl->data[j].key = (uint8_t)0; htbl->data[j].keyhash = 0;
                }
                a->htbl = htbl;
        }
        uint32_t size = htbl->size;
        uint32_t num_entries = htbl->num_entries;
        ltedfapegtest_funtype_9_hashentry_t * data = htbl->data;
        if (num_entries/3 >  size/5){//resize data
                uint32_t new_size = 2*size; uint32_t new_mask = new_size - 1;
                if (size >= HTBL_MAX_SIZE) out_of_memory();
                ltedfapegtest_funtype_9_hashentry_t * new_data = (ltedfapegtest_funtype_9_hashentry_t *)safe_malloc(new_size * sizeof(struct ltedfapegtest_funtype_9_hashentry_s));
                for (uint32_t j = 0; j < new_size; j++){
                        new_data[j].key = 0;
                        new_data[j].keyhash = 0;}
                for (uint32_t j = 0; j < size; j++){//transfer entries
                        uint32_t keyhash = data[j].keyhash;
                        bool_t keyzero;
                        keyzero = (data[j].key == 0);
                        if (!keyzero || keyhash != 0){
                                uint32_t new_loc = keyhash ^ new_mask;
                                keyzero = (new_data[new_loc].key == 0);
                                while (keyzero && new_data[new_loc].keyhash == 0){
                                        new_loc++;
                                        new_loc = new_loc ^ new_mask;

                                        keyzero = (new_data[new_loc].key == 0);
                                }
                                new_data[new_loc].key = (uint8_t)data[j].key;
                                new_data[new_loc].keyhash = keyhash;
                                new_data[new_loc].value = (ltedfapegtest_funtype_7_t)data[j].value;
                                }}
                htbl->size = new_size;
                htbl->num_entries = num_entries;
                htbl->data = new_data;
                safe_free(data);}
        uint32_t ihash = uint32_hash(i);
        uint32_t hashindex = lookup_ltedfapegtest_funtype_9(htbl, i, ihash);
        ltedfapegtest_funtype_9_hashentry_t hentry = htbl->data[hashindex];
        uint32_t hkeyhash = hentry.keyhash;
        bool_t hentrykeyzero;
        hentrykeyzero = (hentry.key == 0);

        if (hentrykeyzero && (hkeyhash == 0))
                {htbl->data[hashindex].key = (uint8_t)i; htbl->data[hashindex].keyhash = ihash; htbl->data[hashindex].value = (ltedfapegtest_funtype_7_t)v; htbl->num_entries++;}
            else {ltedfapegtest_funtype_7_t tempvalue;tempvalue = (ltedfapegtest_funtype_7_t)htbl->data[hashindex].value;htbl->data[hashindex].value = (ltedfapegtest_funtype_7_t)v;if (v != NULL) v->count++;if (tempvalue != NULL)release_ltedfapegtest_funtype_7(tempvalue);};
        return a;

}

ltedfapegtest_funtype_9_t update_ltedfapegtest_funtype_9(ltedfapegtest_funtype_9_t a, uint8_t i, ltedfapegtest_funtype_7_t v){
        if (a->count == 1){
                return dupdate_ltedfapegtest_funtype_9(a, i, v);
            } else {
                ltedfapegtest_funtype_9_t x = copy_ltedfapegtest_funtype_9(a);
                a->count--;
                return dupdate_ltedfapegtest_funtype_9(x, i, v);
            }}

bool_t equal_ltedfapegtest_funtype_9(ltedfapegtest_funtype_9_t x, ltedfapegtest_funtype_9_t y){
        return false;}

char* json_ltedfapegtest_funtype_9(ltedfapegtest_funtype_9_t x){char * result = safe_malloc(33); sprintf(result, "%s", "\"ltedfapegtest_funtype_9\""); return result;}


ltedfapegtest_record_10_t new_ltedfapegtest_record_10(void){
        ltedfapegtest_record_10_t tmp = (ltedfapegtest_record_10_t) safe_malloc(sizeof(struct ltedfapegtest_record_10_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapegtest_record_10(ltedfapegtest_record_10_t x){
        x->count--;
        if (x->count <= 0){
         release_ltedfapegtest_funtype_9(x->scaf);
         release_ltedfapeg__ent_adt(x->stack);
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_ltedfapegtest_record_10_ptr(pointer_t x, type_actual_t T){
        release_ltedfapegtest_record_10((ltedfapegtest_record_10_t)x);
}

ltedfapegtest_record_10_t copy_ltedfapegtest_record_10(ltedfapegtest_record_10_t x){
        ltedfapegtest_record_10_t y = new_ltedfapegtest_record_10();
        y->depth = (uint8_t)x->depth;
        y->lflag = (bool_t)x->lflag;
        y->scaf = x->scaf;
        if (y->scaf != NULL){y->scaf->count++;};
        y->stack = x->stack;
        if (y->stack != NULL){y->stack->count++;};
        y->count = 1;
        return y;}

bool_t equal_ltedfapegtest_record_10(ltedfapegtest_record_10_t x, ltedfapegtest_record_10_t y){
        bool_t tmp = true;
        tmp = tmp && x->depth == y->depth;
        tmp = tmp && x->lflag == y->lflag;
        tmp = tmp && equal_ltedfapegtest_funtype_9(x->scaf, y->scaf);
        tmp = tmp && equal_ltedfapeg__ent_adt(x->stack, y->stack);
        return tmp;}

char * json_ltedfapegtest_record_10(ltedfapegtest_record_10_t x){
        char * tmp[4]; 
        char * fld0 = safe_malloc(17);
         sprintf(fld0, "\"depth\" : ");
        tmp[0] = safe_strcat(fld0, json_uint8(x->depth));
        char * fld1 = safe_malloc(17);
         sprintf(fld1, "\"lflag\" : ");
        tmp[1] = safe_strcat(fld1, json_bool(x->lflag));
        char * fld2 = safe_malloc(16);
         sprintf(fld2, "\"scaf\" : ");
        tmp[2] = safe_strcat(fld2, json_ltedfapegtest_funtype_9(x->scaf));
        char * fld3 = safe_malloc(17);
         sprintf(fld3, "\"stack\" : ");
        tmp[3] = safe_strcat(fld3, json_ltedfapeg__ent_adt(x->stack));
         char * result = json_list_with_sep(tmp, 4,  '{', ',', '}');
         for (uint32_t i = 0; i < 4; i++) free(tmp[i]);
        return result;}

bool_t equal_ltedfapegtest_record_10_ptr(pointer_t x, pointer_t y, actual_ltedfapegtest_record_10_t T){
        return equal_ltedfapegtest_record_10((ltedfapegtest_record_10_t)x, (ltedfapegtest_record_10_t)y);
}

char * json_ltedfapegtest_record_10_ptr(pointer_t x, actual_ltedfapegtest_record_10_t T){
        return json_ltedfapegtest_record_10((ltedfapegtest_record_10_t)x);
}

actual_ltedfapegtest_record_10_t actual_ltedfapegtest_record_10(){
        actual_ltedfapegtest_record_10_t new = (actual_ltedfapegtest_record_10_t)safe_malloc(sizeof(struct actual_ltedfapegtest_record_10_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapegtest_record_10_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapegtest_record_10_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapegtest_record_10_ptr);
 

 
        return new;
 };

ltedfapegtest_record_10_t update_ltedfapegtest_record_10_depth(ltedfapegtest_record_10_t x, uint8_t v){
        ltedfapegtest_record_10_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapegtest_record_10(x); x->count--;};
        y->depth = (uint8_t)v;
        return y;}

ltedfapegtest_record_10_t update_ltedfapegtest_record_10_lflag(ltedfapegtest_record_10_t x, bool_t v){
        ltedfapegtest_record_10_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapegtest_record_10(x); x->count--;};
        y->lflag = (bool_t)v;
        return y;}

ltedfapegtest_record_10_t update_ltedfapegtest_record_10_scaf(ltedfapegtest_record_10_t x, ltedfapegtest_funtype_9_t v){
        ltedfapegtest_record_10_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->scaf != NULL){release_ltedfapegtest_funtype_9(x->scaf);};}
        else {y = copy_ltedfapegtest_record_10(x); x->count--; y->scaf->count--;};
        y->scaf = (ltedfapegtest_funtype_9_t)v;
        return y;}

ltedfapegtest_record_10_t update_ltedfapegtest_record_10_stack(ltedfapegtest_record_10_t x, ltedfapeg__ent_adt_t v){
        ltedfapegtest_record_10_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->stack != NULL){release_ltedfapeg__ent_adt(x->stack);};}
        else {y = copy_ltedfapegtest_record_10(x); x->count--; y->stack->count--;};
        y->stack = (ltedfapeg__ent_adt_t)v;
        return y;}




ltedfapegtest_funtype_7_t f_ltedfapegtest_closure_11(struct ltedfapegtest_closure_11_s * closure, uint8_t bvar){
if (closure->htbl != NULL){
        ltedfapegtest_funtype_9_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_ltedfapegtest_funtype_9(htbl, bvar, hash);
        ltedfapegtest_funtype_9_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            ltedfapegtest_funtype_7_t result;
            result = (ltedfapegtest_funtype_7_t)entry.value;
            if (result != NULL) result->count++;
            return result;}
        

        return h_ltedfapegtest_closure_11(bvar, closure->fvar_1, closure->fvar_2);};

return h_ltedfapegtest_closure_11(bvar, closure->fvar_1, closure->fvar_2);}

ltedfapegtest_funtype_7_t m_ltedfapegtest_closure_11(struct ltedfapegtest_closure_11_s * closure, uint8_t bvar){
        return h_ltedfapegtest_closure_11(bvar, closure->fvar_1, closure->fvar_2);}

ltedfapegtest_funtype_7_t h_ltedfapegtest_closure_11(uint8_t ivar_23, uint8_t ivar_1, ltedfapegtest_funtype_7_t ivar_6){
        ltedfapegtest_funtype_7_t result;
        //copying to ltedfapegtest_funtype_7 from ltedfapegtest_funtype_7;
        result = (ltedfapegtest_funtype_7_t)ivar_6;
        if (result != NULL) result->count++;

        return result;
}

ltedfapegtest_closure_11_t new_ltedfapegtest_closure_11(void){
        static struct ltedfapegtest_funtype_9_ftbl_s ftbl = {.fptr = (ltedfapegtest_funtype_7_t (*)(ltedfapegtest_funtype_9_t, uint8_t))&f_ltedfapegtest_closure_11, .mptr = (ltedfapegtest_funtype_7_t (*)(ltedfapegtest_funtype_9_t, uint8_t))&m_ltedfapegtest_closure_11, .rptr =  (void (*)(ltedfapegtest_funtype_9_t))&release_ltedfapegtest_closure_11, .cptr = (ltedfapegtest_funtype_9_t (*)(ltedfapegtest_funtype_9_t))&copy_ltedfapegtest_closure_11};
        ltedfapegtest_closure_11_t tmp = (ltedfapegtest_closure_11_t) safe_malloc(sizeof(struct ltedfapegtest_closure_11_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapegtest_closure_11(ltedfapegtest_funtype_9_t closure){
        ltedfapegtest_closure_11_t x = (ltedfapegtest_closure_11_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapegtest_funtype_7(x->fvar_2);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapegtest_closure_11_t copy_ltedfapegtest_closure_11(ltedfapegtest_closure_11_t x){
        ltedfapegtest_closure_11_t y = new_ltedfapegtest_closure_11();
        y->ftbl = x->ftbl;

        y->fvar_1 = (uint8_t)x->fvar_1;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        if (x->htbl != NULL){
            ltedfapegtest_funtype_9_htbl_t new_htbl = (ltedfapegtest_funtype_9_htbl_t) safe_malloc(sizeof(struct ltedfapegtest_funtype_9_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapegtest_funtype_9_hashentry_t * new_data = (ltedfapegtest_funtype_9_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapegtest_funtype_9_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapegtest_funtype_9_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


ltedfapegtest_array_12_t new_ltedfapegtest_array_12(uint32_t size){
        ltedfapegtest_array_12_t tmp = (ltedfapegtest_array_12_t) safe_malloc(sizeof(struct ltedfapegtest_array_12_s) + (size * sizeof(ltedfapeg__ent_adt_t)));
        tmp->count = 1;
        tmp->size = size;
        tmp->max = size;
        return tmp;}

void release_ltedfapegtest_array_12(ltedfapegtest_array_12_t x){
        x->count--;
        if (x->count <= 0){
                for (int i = 0; i < x->size; i++){release_ltedfapeg__ent_adt(x->elems[i]);};
        //printf("\nFreeing\n");
        safe_free(x);}
}

void release_ltedfapegtest_array_12_ptr(pointer_t x, type_actual_t T){
        release_ltedfapegtest_array_12((ltedfapegtest_array_12_t)x);
}

ltedfapegtest_array_12_t copy_ltedfapegtest_array_12(ltedfapegtest_array_12_t x){
        ltedfapegtest_array_12_t tmp = new_ltedfapegtest_array_12(x->size);
        tmp->count = 1;
        for (uint32_t i = 0; i < x->size; i++){tmp->elems[i] = x->elems[i];
                x->elems[i]->count++;};
         return tmp;}

bool_t equal_ltedfapegtest_array_12(ltedfapegtest_array_12_t x, ltedfapegtest_array_12_t y){
        bool_t tmp = true;
        uint32_t i = 0;
        while (i < x->size && tmp){tmp = equal_ltedfapeg__ent_adt(x->elems[i], y->elems[i]); i++;};
        return tmp;}

char * json_ltedfapegtest_array_12(ltedfapegtest_array_12_t x){
        char ** tmp = (char **)safe_malloc(sizeof(void *) * x->size);
        for (uint32_t i = 0; i < x->size; i++){tmp[i] = json_ltedfapeg__ent_adt(x->elems[i]);};
        char * result = json_list_with_sep(tmp, x->size, '[', ',', ']');
        for (uint32_t i = 0; i < x->size; i++) free(tmp[i]);
        free(tmp);
        return result;}

bool_t equal_ltedfapegtest_array_12_ptr(pointer_t x, pointer_t y, type_actual_t T){
        return equal_ltedfapegtest_array_12((ltedfapegtest_array_12_t)x, (ltedfapegtest_array_12_t)y);
}

char * json_ltedfapegtest_array_12_ptr(pointer_t x, type_actual_t T){
        return json_ltedfapegtest_array_12((ltedfapegtest_array_12_t)x);
}

actual_ltedfapegtest_array_12_t actual_ltedfapegtest_array_12(){
        actual_ltedfapegtest_array_12_t new = (actual_ltedfapegtest_array_12_t)safe_malloc(sizeof(struct actual_ltedfapegtest_array_12_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapegtest_array_12_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapegtest_array_12_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapegtest_array_12_ptr);
 

 
        return new;
 };

ltedfapegtest_array_12_t update_ltedfapegtest_array_12(ltedfapegtest_array_12_t x, uint32_t i, ltedfapeg__ent_adt_t v){
         ltedfapegtest_array_12_t y;
         if (x->count == 1){y = x;}
                 else {y = copy_ltedfapegtest_array_12(x);
                      x->count--;};
        ltedfapeg__ent_adt_t * yelems = y->elems;
        if (v != NULL){v->count++;}
        if (yelems[i] != NULL){release_ltedfapeg__ent_adt(yelems[i]);};
         yelems[i] = v;
         return y;}

ltedfapegtest_array_12_t upgrade_ltedfapegtest_array_12(ltedfapegtest_array_12_t x, uint32_t i, ltedfapeg__ent_adt_t v){
         ltedfapegtest_array_12_t y;
         if (x->count == 1 && i < x->max){y = x;}
                 else if (i > x->max){uint32_t newmax = x->max <= UINT32_MAX/2 ? 2*x->max: UINT32_MAX;
                y = safe_realloc(x, sizeof(struct ltedfapegtest_array_12_s) + (newmax * sizeof(ltedfapeg__ent_adt_t)));
                y->count = 1;
                y->size = i+1;
                y->max = newmax;
                release_ltedfapegtest_array_12(x);} else {y = copy_ltedfapegtest_array_12(x);
                      x->count--;};
        ltedfapeg__ent_adt_t * yelems = y->elems;
        if (v != NULL){v->count++;}
        if (yelems[i] != NULL){release_ltedfapeg__ent_adt(yelems[i]);};
         yelems[i] = v;
         return y;}




ltedfapegtest_array_13_t new_ltedfapegtest_array_13(uint32_t size){
        ltedfapegtest_array_13_t tmp = (ltedfapegtest_array_13_t) safe_malloc(sizeof(struct ltedfapegtest_array_13_s) + (size * sizeof(ltedfapegtest_array_12_t)));
        tmp->count = 1;
        tmp->size = size;
        tmp->max = size;
        return tmp;}

void release_ltedfapegtest_array_13(ltedfapegtest_array_13_t x){
        x->count--;
        if (x->count <= 0){
                for (int i = 0; i < x->size; i++){release_ltedfapegtest_array_12(x->elems[i]);};
        //printf("\nFreeing\n");
        safe_free(x);}
}

void release_ltedfapegtest_array_13_ptr(pointer_t x, type_actual_t T){
        release_ltedfapegtest_array_13((ltedfapegtest_array_13_t)x);
}

ltedfapegtest_array_13_t copy_ltedfapegtest_array_13(ltedfapegtest_array_13_t x){
        ltedfapegtest_array_13_t tmp = new_ltedfapegtest_array_13(x->size);
        tmp->count = 1;
        for (uint32_t i = 0; i < x->size; i++){tmp->elems[i] = x->elems[i];
                x->elems[i]->count++;};
         return tmp;}

bool_t equal_ltedfapegtest_array_13(ltedfapegtest_array_13_t x, ltedfapegtest_array_13_t y){
        bool_t tmp = true;
        uint32_t i = 0;
        while (i < x->size && tmp){tmp = equal_ltedfapegtest_array_12(x->elems[i], y->elems[i]); i++;};
        return tmp;}

char * json_ltedfapegtest_array_13(ltedfapegtest_array_13_t x){
        char ** tmp = (char **)safe_malloc(sizeof(void *) * x->size);
        for (uint32_t i = 0; i < x->size; i++){tmp[i] = json_ltedfapegtest_array_12(x->elems[i]);};
        char * result = json_list_with_sep(tmp, x->size, '[', ',', ']');
        for (uint32_t i = 0; i < x->size; i++) free(tmp[i]);
        free(tmp);
        return result;}

bool_t equal_ltedfapegtest_array_13_ptr(pointer_t x, pointer_t y, type_actual_t T){
        return equal_ltedfapegtest_array_13((ltedfapegtest_array_13_t)x, (ltedfapegtest_array_13_t)y);
}

char * json_ltedfapegtest_array_13_ptr(pointer_t x, type_actual_t T){
        return json_ltedfapegtest_array_13((ltedfapegtest_array_13_t)x);
}

actual_ltedfapegtest_array_13_t actual_ltedfapegtest_array_13(){
        actual_ltedfapegtest_array_13_t new = (actual_ltedfapegtest_array_13_t)safe_malloc(sizeof(struct actual_ltedfapegtest_array_13_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapegtest_array_13_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapegtest_array_13_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapegtest_array_13_ptr);
 

 
        return new;
 };

ltedfapegtest_array_13_t update_ltedfapegtest_array_13(ltedfapegtest_array_13_t x, uint32_t i, ltedfapegtest_array_12_t v){
         ltedfapegtest_array_13_t y;
         if (x->count == 1){y = x;}
                 else {y = copy_ltedfapegtest_array_13(x);
                      x->count--;};
        ltedfapegtest_array_12_t * yelems = y->elems;
        if (v != NULL){v->count++;}
        if (yelems[i] != NULL){release_ltedfapegtest_array_12(yelems[i]);};
         yelems[i] = v;
         return y;}

ltedfapegtest_array_13_t upgrade_ltedfapegtest_array_13(ltedfapegtest_array_13_t x, uint32_t i, ltedfapegtest_array_12_t v){
         ltedfapegtest_array_13_t y;
         if (x->count == 1 && i < x->max){y = x;}
                 else if (i > x->max){uint32_t newmax = x->max <= UINT32_MAX/2 ? 2*x->max: UINT32_MAX;
                y = safe_realloc(x, sizeof(struct ltedfapegtest_array_13_s) + (newmax * sizeof(ltedfapegtest_array_12_t)));
                y->count = 1;
                y->size = i+1;
                y->max = newmax;
                release_ltedfapegtest_array_13(x);} else {y = copy_ltedfapegtest_array_13(x);
                      x->count--;};
        ltedfapegtest_array_12_t * yelems = y->elems;
        if (v != NULL){v->count++;}
        if (yelems[i] != NULL){release_ltedfapegtest_array_12(yelems[i]);};
         yelems[i] = v;
         return y;}




ltedfapegtest_record_14_t new_ltedfapegtest_record_14(void){
        ltedfapegtest_record_14_t tmp = (ltedfapegtest_record_14_t) safe_malloc(sizeof(struct ltedfapegtest_record_14_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapegtest_record_14(ltedfapegtest_record_14_t x){
        x->count--;
        if (x->count <= 0){
         release_ltedfapegtest_array_13(x->scaf);
         release_ltedfapeg__ent_adt(x->stack);
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_ltedfapegtest_record_14_ptr(pointer_t x, type_actual_t T){
        release_ltedfapegtest_record_14((ltedfapegtest_record_14_t)x);
}

ltedfapegtest_record_14_t copy_ltedfapegtest_record_14(ltedfapegtest_record_14_t x){
        ltedfapegtest_record_14_t y = new_ltedfapegtest_record_14();
        y->scaf = x->scaf;
        if (y->scaf != NULL){y->scaf->count++;};
        y->depth = (uint64_t)x->depth;
        y->stack = x->stack;
        if (y->stack != NULL){y->stack->count++;};
        y->lflag = (bool_t)x->lflag;
        y->count = 1;
        return y;}

bool_t equal_ltedfapegtest_record_14(ltedfapegtest_record_14_t x, ltedfapegtest_record_14_t y){
        bool_t tmp = true;
        tmp = tmp && equal_ltedfapegtest_array_13(x->scaf, y->scaf);
        tmp = tmp && x->depth == y->depth;
        tmp = tmp && equal_ltedfapeg__ent_adt(x->stack, y->stack);
        tmp = tmp && x->lflag == y->lflag;
        return tmp;}

char * json_ltedfapegtest_record_14(ltedfapegtest_record_14_t x){
        char * tmp[4]; 
        char * fld0 = safe_malloc(16);
         sprintf(fld0, "\"scaf\" : ");
        tmp[0] = safe_strcat(fld0, json_ltedfapegtest_array_13(x->scaf));
        char * fld1 = safe_malloc(17);
         sprintf(fld1, "\"depth\" : ");
        tmp[1] = safe_strcat(fld1, json_uint64(x->depth));
        char * fld2 = safe_malloc(17);
         sprintf(fld2, "\"stack\" : ");
        tmp[2] = safe_strcat(fld2, json_ltedfapeg__ent_adt(x->stack));
        char * fld3 = safe_malloc(17);
         sprintf(fld3, "\"lflag\" : ");
        tmp[3] = safe_strcat(fld3, json_bool(x->lflag));
         char * result = json_list_with_sep(tmp, 4,  '{', ',', '}');
         for (uint32_t i = 0; i < 4; i++) free(tmp[i]);
        return result;}

bool_t equal_ltedfapegtest_record_14_ptr(pointer_t x, pointer_t y, actual_ltedfapegtest_record_14_t T){
        return equal_ltedfapegtest_record_14((ltedfapegtest_record_14_t)x, (ltedfapegtest_record_14_t)y);
}

char * json_ltedfapegtest_record_14_ptr(pointer_t x, actual_ltedfapegtest_record_14_t T){
        return json_ltedfapegtest_record_14((ltedfapegtest_record_14_t)x);
}

actual_ltedfapegtest_record_14_t actual_ltedfapegtest_record_14(){
        actual_ltedfapegtest_record_14_t new = (actual_ltedfapegtest_record_14_t)safe_malloc(sizeof(struct actual_ltedfapegtest_record_14_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapegtest_record_14_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapegtest_record_14_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapegtest_record_14_ptr);
 

 
        return new;
 };

ltedfapegtest_record_14_t update_ltedfapegtest_record_14_scaf(ltedfapegtest_record_14_t x, ltedfapegtest_array_13_t v){
        ltedfapegtest_record_14_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->scaf != NULL){release_ltedfapegtest_array_13(x->scaf);};}
        else {y = copy_ltedfapegtest_record_14(x); x->count--; y->scaf->count--;};
        y->scaf = (ltedfapegtest_array_13_t)v;
        return y;}

ltedfapegtest_record_14_t update_ltedfapegtest_record_14_depth(ltedfapegtest_record_14_t x, uint64_t v){
        ltedfapegtest_record_14_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapegtest_record_14(x); x->count--;};
        y->depth = (uint64_t)v;
        return y;}

ltedfapegtest_record_14_t update_ltedfapegtest_record_14_stack(ltedfapegtest_record_14_t x, ltedfapeg__ent_adt_t v){
        ltedfapegtest_record_14_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->stack != NULL){release_ltedfapeg__ent_adt(x->stack);};}
        else {y = copy_ltedfapegtest_record_14(x); x->count--; y->stack->count--;};
        y->stack = (ltedfapeg__ent_adt_t)v;
        return y;}

ltedfapegtest_record_14_t update_ltedfapegtest_record_14_lflag(ltedfapegtest_record_14_t x, bool_t v){
        ltedfapegtest_record_14_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapegtest_record_14(x); x->count--;};
        y->lflag = (bool_t)v;
        return y;}




ltedfapeg__ent_adt_t f_ltedfapegtest_closure_15(struct ltedfapegtest_closure_15_s * closure, uint8_t bvar){
if (closure->htbl != NULL){
        ltedfapegtest_funtype_7_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_ltedfapegtest_funtype_7(htbl, bvar, hash);
        ltedfapegtest_funtype_7_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            ltedfapeg__ent_adt_t result;
            result = (ltedfapeg__ent_adt_t)entry.value;
            if (result != NULL) result->count++;
            return result;}
        

        return h_ltedfapegtest_closure_15(bvar);};

return h_ltedfapegtest_closure_15(bvar);}

ltedfapeg__ent_adt_t m_ltedfapegtest_closure_15(struct ltedfapegtest_closure_15_s * closure, uint8_t bvar){
        return h_ltedfapegtest_closure_15(bvar);}

ltedfapeg__ent_adt_t h_ltedfapegtest_closure_15(uint8_t ivar_41){
        ltedfapeg__ent_adt_t result;
        result = (ltedfapeg__ent_adt_t)ltedfapeg__pending();
        if (result != NULL) result->count++;

        return result;
}

ltedfapegtest_closure_15_t new_ltedfapegtest_closure_15(void){
        static struct ltedfapegtest_funtype_7_ftbl_s ftbl = {.fptr = (ltedfapeg__ent_adt_t (*)(ltedfapegtest_funtype_7_t, uint8_t))&f_ltedfapegtest_closure_15, .mptr = (ltedfapeg__ent_adt_t (*)(ltedfapegtest_funtype_7_t, uint8_t))&m_ltedfapegtest_closure_15, .rptr =  (void (*)(ltedfapegtest_funtype_7_t))&release_ltedfapegtest_closure_15, .cptr = (ltedfapegtest_funtype_7_t (*)(ltedfapegtest_funtype_7_t))&copy_ltedfapegtest_closure_15};
        ltedfapegtest_closure_15_t tmp = (ltedfapegtest_closure_15_t) safe_malloc(sizeof(struct ltedfapegtest_closure_15_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapegtest_closure_15(ltedfapegtest_funtype_7_t closure){
        ltedfapegtest_closure_15_t x = (ltedfapegtest_closure_15_t)closure;
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapegtest_closure_15_t copy_ltedfapegtest_closure_15(ltedfapegtest_closure_15_t x){
        ltedfapegtest_closure_15_t y = new_ltedfapegtest_closure_15();
        y->ftbl = x->ftbl;

        if (x->htbl != NULL){
            ltedfapegtest_funtype_7_htbl_t new_htbl = (ltedfapegtest_funtype_7_htbl_t) safe_malloc(sizeof(struct ltedfapegtest_funtype_7_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapegtest_funtype_7_hashentry_t * new_data = (ltedfapegtest_funtype_7_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapegtest_funtype_7_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapegtest_funtype_7_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}

void release_ltedfapegtest_funtype_16(ltedfapegtest_funtype_16_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapegtest_funtype_16_t copy_ltedfapegtest_funtype_16(ltedfapegtest_funtype_16_t x){return x->ftbl->cptr(x);}

uint32_t lookup_ltedfapegtest_funtype_16(ltedfapegtest_funtype_16_htbl_t htbl, uint32_t i, uint32_t ihash){
        uint32_t mask = htbl->size - 1;
        uint32_t hashindex = ihash & mask;
        ltedfapegtest_funtype_16_hashentry_t data = htbl->data[hashindex];
        bool_t keyzero;

        keyzero = (data.key == 0);
        bool_t keymatch;
        keymatch = (data.key == i);
        while ((!keyzero || data.keyhash != 0) &&
                 (data.keyhash != ihash || !keymatch)){
                hashindex++;
                hashindex = hashindex & mask;
                data = htbl->data[hashindex];

                keyzero = (data.key == 0);

                keymatch = (data.key == i);
                }
        return hashindex;
        }

ltedfapegtest_funtype_16_t dupdate_ltedfapegtest_funtype_16(ltedfapegtest_funtype_16_t a, uint32_t i, ltedfapegtest_funtype_7_t v){
        ltedfapegtest_funtype_16_htbl_t htbl = a->htbl;
        if (htbl == NULL){//construct new htbl
                htbl = (ltedfapegtest_funtype_16_htbl_t)safe_malloc(sizeof(struct ltedfapegtest_funtype_16_htbl_s));
                htbl->size = HTBL_DEFAULT_SIZE; htbl->num_entries = 0;
                htbl->data = (ltedfapegtest_funtype_16_hashentry_t *)safe_malloc(HTBL_DEFAULT_SIZE * sizeof(struct ltedfapegtest_funtype_16_hashentry_s));
                for (uint32_t j = 0; j < HTBL_DEFAULT_SIZE; j++){htbl->data[j].key = (uint32_t)0; htbl->data[j].keyhash = 0;
                }
                a->htbl = htbl;
        }
        uint32_t size = htbl->size;
        uint32_t num_entries = htbl->num_entries;
        ltedfapegtest_funtype_16_hashentry_t * data = htbl->data;
        if (num_entries/3 >  size/5){//resize data
                uint32_t new_size = 2*size; uint32_t new_mask = new_size - 1;
                if (size >= HTBL_MAX_SIZE) out_of_memory();
                ltedfapegtest_funtype_16_hashentry_t * new_data = (ltedfapegtest_funtype_16_hashentry_t *)safe_malloc(new_size * sizeof(struct ltedfapegtest_funtype_16_hashentry_s));
                for (uint32_t j = 0; j < new_size; j++){
                        new_data[j].key = 0;
                        new_data[j].keyhash = 0;}
                for (uint32_t j = 0; j < size; j++){//transfer entries
                        uint32_t keyhash = data[j].keyhash;
                        bool_t keyzero;
                        keyzero = (data[j].key == 0);
                        if (!keyzero || keyhash != 0){
                                uint32_t new_loc = keyhash ^ new_mask;
                                keyzero = (new_data[new_loc].key == 0);
                                while (keyzero && new_data[new_loc].keyhash == 0){
                                        new_loc++;
                                        new_loc = new_loc ^ new_mask;

                                        keyzero = (new_data[new_loc].key == 0);
                                }
                                new_data[new_loc].key = (uint32_t)data[j].key;
                                new_data[new_loc].keyhash = keyhash;
                                new_data[new_loc].value = (ltedfapegtest_funtype_7_t)data[j].value;
                                }}
                htbl->size = new_size;
                htbl->num_entries = num_entries;
                htbl->data = new_data;
                safe_free(data);}
        uint32_t ihash = uint32_hash(i);
        uint32_t hashindex = lookup_ltedfapegtest_funtype_16(htbl, i, ihash);
        ltedfapegtest_funtype_16_hashentry_t hentry = htbl->data[hashindex];
        uint32_t hkeyhash = hentry.keyhash;
        bool_t hentrykeyzero;
        hentrykeyzero = (hentry.key == 0);

        if (hentrykeyzero && (hkeyhash == 0))
                {htbl->data[hashindex].key = (uint32_t)i; htbl->data[hashindex].keyhash = ihash; htbl->data[hashindex].value = (ltedfapegtest_funtype_7_t)v; htbl->num_entries++;}
            else {ltedfapegtest_funtype_7_t tempvalue;tempvalue = (ltedfapegtest_funtype_7_t)htbl->data[hashindex].value;htbl->data[hashindex].value = (ltedfapegtest_funtype_7_t)v;if (v != NULL) v->count++;if (tempvalue != NULL)release_ltedfapegtest_funtype_7(tempvalue);};
        return a;

}

ltedfapegtest_funtype_16_t update_ltedfapegtest_funtype_16(ltedfapegtest_funtype_16_t a, uint32_t i, ltedfapegtest_funtype_7_t v){
        if (a->count == 1){
                return dupdate_ltedfapegtest_funtype_16(a, i, v);
            } else {
                ltedfapegtest_funtype_16_t x = copy_ltedfapegtest_funtype_16(a);
                a->count--;
                return dupdate_ltedfapegtest_funtype_16(x, i, v);
            }}

bool_t equal_ltedfapegtest_funtype_16(ltedfapegtest_funtype_16_t x, ltedfapegtest_funtype_16_t y){
        return false;}

char* json_ltedfapegtest_funtype_16(ltedfapegtest_funtype_16_t x){char * result = safe_malloc(34); sprintf(result, "%s", "\"ltedfapegtest_funtype_16\""); return result;}


ltedfapegtest_record_17_t new_ltedfapegtest_record_17(void){
        ltedfapegtest_record_17_t tmp = (ltedfapegtest_record_17_t) safe_malloc(sizeof(struct ltedfapegtest_record_17_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapegtest_record_17(ltedfapegtest_record_17_t x){
        x->count--;
        if (x->count <= 0){
         release_ltedfapegtest_funtype_16(x->scaf);
         release_ltedfapeg__ent_adt(x->stack);
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_ltedfapegtest_record_17_ptr(pointer_t x, type_actual_t T){
        release_ltedfapegtest_record_17((ltedfapegtest_record_17_t)x);
}

ltedfapegtest_record_17_t copy_ltedfapegtest_record_17(ltedfapegtest_record_17_t x){
        ltedfapegtest_record_17_t y = new_ltedfapegtest_record_17();
        y->depth = (uint8_t)x->depth;
        y->lflag = (bool_t)x->lflag;
        y->scaf = x->scaf;
        if (y->scaf != NULL){y->scaf->count++;};
        y->stack = x->stack;
        if (y->stack != NULL){y->stack->count++;};
        y->count = 1;
        return y;}

bool_t equal_ltedfapegtest_record_17(ltedfapegtest_record_17_t x, ltedfapegtest_record_17_t y){
        bool_t tmp = true;
        tmp = tmp && x->depth == y->depth;
        tmp = tmp && x->lflag == y->lflag;
        tmp = tmp && equal_ltedfapegtest_funtype_16(x->scaf, y->scaf);
        tmp = tmp && equal_ltedfapeg__ent_adt(x->stack, y->stack);
        return tmp;}

char * json_ltedfapegtest_record_17(ltedfapegtest_record_17_t x){
        char * tmp[4]; 
        char * fld0 = safe_malloc(17);
         sprintf(fld0, "\"depth\" : ");
        tmp[0] = safe_strcat(fld0, json_uint8(x->depth));
        char * fld1 = safe_malloc(17);
         sprintf(fld1, "\"lflag\" : ");
        tmp[1] = safe_strcat(fld1, json_bool(x->lflag));
        char * fld2 = safe_malloc(16);
         sprintf(fld2, "\"scaf\" : ");
        tmp[2] = safe_strcat(fld2, json_ltedfapegtest_funtype_16(x->scaf));
        char * fld3 = safe_malloc(17);
         sprintf(fld3, "\"stack\" : ");
        tmp[3] = safe_strcat(fld3, json_ltedfapeg__ent_adt(x->stack));
         char * result = json_list_with_sep(tmp, 4,  '{', ',', '}');
         for (uint32_t i = 0; i < 4; i++) free(tmp[i]);
        return result;}

bool_t equal_ltedfapegtest_record_17_ptr(pointer_t x, pointer_t y, actual_ltedfapegtest_record_17_t T){
        return equal_ltedfapegtest_record_17((ltedfapegtest_record_17_t)x, (ltedfapegtest_record_17_t)y);
}

char * json_ltedfapegtest_record_17_ptr(pointer_t x, actual_ltedfapegtest_record_17_t T){
        return json_ltedfapegtest_record_17((ltedfapegtest_record_17_t)x);
}

actual_ltedfapegtest_record_17_t actual_ltedfapegtest_record_17(){
        actual_ltedfapegtest_record_17_t new = (actual_ltedfapegtest_record_17_t)safe_malloc(sizeof(struct actual_ltedfapegtest_record_17_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapegtest_record_17_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapegtest_record_17_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapegtest_record_17_ptr);
 

 
        return new;
 };

ltedfapegtest_record_17_t update_ltedfapegtest_record_17_depth(ltedfapegtest_record_17_t x, uint8_t v){
        ltedfapegtest_record_17_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapegtest_record_17(x); x->count--;};
        y->depth = (uint8_t)v;
        return y;}

ltedfapegtest_record_17_t update_ltedfapegtest_record_17_lflag(ltedfapegtest_record_17_t x, bool_t v){
        ltedfapegtest_record_17_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapegtest_record_17(x); x->count--;};
        y->lflag = (bool_t)v;
        return y;}

ltedfapegtest_record_17_t update_ltedfapegtest_record_17_scaf(ltedfapegtest_record_17_t x, ltedfapegtest_funtype_16_t v){
        ltedfapegtest_record_17_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->scaf != NULL){release_ltedfapegtest_funtype_16(x->scaf);};}
        else {y = copy_ltedfapegtest_record_17(x); x->count--; y->scaf->count--;};
        y->scaf = (ltedfapegtest_funtype_16_t)v;
        return y;}

ltedfapegtest_record_17_t update_ltedfapegtest_record_17_stack(ltedfapegtest_record_17_t x, ltedfapeg__ent_adt_t v){
        ltedfapegtest_record_17_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->stack != NULL){release_ltedfapeg__ent_adt(x->stack);};}
        else {y = copy_ltedfapegtest_record_17(x); x->count--; y->stack->count--;};
        y->stack = (ltedfapeg__ent_adt_t)v;
        return y;}




ltedfapegtest_funtype_7_t f_ltedfapegtest_closure_18(struct ltedfapegtest_closure_18_s * closure, uint32_t bvar){
if (closure->htbl != NULL){
        ltedfapegtest_funtype_16_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_ltedfapegtest_funtype_16(htbl, bvar, hash);
        ltedfapegtest_funtype_16_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            ltedfapegtest_funtype_7_t result;
            result = (ltedfapegtest_funtype_7_t)entry.value;
            if (result != NULL) result->count++;
            return result;}
        

        return h_ltedfapegtest_closure_18(bvar, closure->fvar_1, closure->fvar_2);};

return h_ltedfapegtest_closure_18(bvar, closure->fvar_1, closure->fvar_2);}

ltedfapegtest_funtype_7_t m_ltedfapegtest_closure_18(struct ltedfapegtest_closure_18_s * closure, uint32_t bvar){
        return h_ltedfapegtest_closure_18(bvar, closure->fvar_1, closure->fvar_2);}

ltedfapegtest_funtype_7_t h_ltedfapegtest_closure_18(uint32_t ivar_54, uint32_t ivar_87, ltedfapegtest_funtype_7_t ivar_37){
        ltedfapegtest_funtype_7_t result;
        //copying to ltedfapegtest_funtype_7 from ltedfapegtest_funtype_7;
        result = (ltedfapegtest_funtype_7_t)ivar_37;
        if (result != NULL) result->count++;

        return result;
}

ltedfapegtest_closure_18_t new_ltedfapegtest_closure_18(void){
        static struct ltedfapegtest_funtype_16_ftbl_s ftbl = {.fptr = (ltedfapegtest_funtype_7_t (*)(ltedfapegtest_funtype_16_t, uint32_t))&f_ltedfapegtest_closure_18, .mptr = (ltedfapegtest_funtype_7_t (*)(ltedfapegtest_funtype_16_t, uint32_t))&m_ltedfapegtest_closure_18, .rptr =  (void (*)(ltedfapegtest_funtype_16_t))&release_ltedfapegtest_closure_18, .cptr = (ltedfapegtest_funtype_16_t (*)(ltedfapegtest_funtype_16_t))&copy_ltedfapegtest_closure_18};
        ltedfapegtest_closure_18_t tmp = (ltedfapegtest_closure_18_t) safe_malloc(sizeof(struct ltedfapegtest_closure_18_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapegtest_closure_18(ltedfapegtest_funtype_16_t closure){
        ltedfapegtest_closure_18_t x = (ltedfapegtest_closure_18_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapegtest_funtype_7(x->fvar_2);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapegtest_closure_18_t copy_ltedfapegtest_closure_18(ltedfapegtest_closure_18_t x){
        ltedfapegtest_closure_18_t y = new_ltedfapegtest_closure_18();
        y->ftbl = x->ftbl;

        y->fvar_1 = (uint32_t)x->fvar_1;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        if (x->htbl != NULL){
            ltedfapegtest_funtype_16_htbl_t new_htbl = (ltedfapegtest_funtype_16_htbl_t) safe_malloc(sizeof(struct ltedfapegtest_funtype_16_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapegtest_funtype_16_hashentry_t * new_data = (ltedfapegtest_funtype_16_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapegtest_funtype_16_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapegtest_funtype_16_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


ltedfapeg__ent_adt_t f_ltedfapegtest_closure_19(struct ltedfapegtest_closure_19_s * closure, uint8_t bvar){
if (closure->htbl != NULL){
        ltedfapegtest_funtype_7_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_ltedfapegtest_funtype_7(htbl, bvar, hash);
        ltedfapegtest_funtype_7_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            ltedfapeg__ent_adt_t result;
            result = (ltedfapeg__ent_adt_t)entry.value;
            if (result != NULL) result->count++;
            return result;}
        

        return h_ltedfapegtest_closure_19(bvar);};

return h_ltedfapegtest_closure_19(bvar);}

ltedfapeg__ent_adt_t m_ltedfapegtest_closure_19(struct ltedfapegtest_closure_19_s * closure, uint8_t bvar){
        return h_ltedfapegtest_closure_19(bvar);}

ltedfapeg__ent_adt_t h_ltedfapegtest_closure_19(uint8_t ivar_42){
        ltedfapeg__ent_adt_t result;
        result = (ltedfapeg__ent_adt_t)ltedfapeg__pending();
        if (result != NULL) result->count++;

        return result;
}

ltedfapegtest_closure_19_t new_ltedfapegtest_closure_19(void){
        static struct ltedfapegtest_funtype_7_ftbl_s ftbl = {.fptr = (ltedfapeg__ent_adt_t (*)(ltedfapegtest_funtype_7_t, uint8_t))&f_ltedfapegtest_closure_19, .mptr = (ltedfapeg__ent_adt_t (*)(ltedfapegtest_funtype_7_t, uint8_t))&m_ltedfapegtest_closure_19, .rptr =  (void (*)(ltedfapegtest_funtype_7_t))&release_ltedfapegtest_closure_19, .cptr = (ltedfapegtest_funtype_7_t (*)(ltedfapegtest_funtype_7_t))&copy_ltedfapegtest_closure_19};
        ltedfapegtest_closure_19_t tmp = (ltedfapegtest_closure_19_t) safe_malloc(sizeof(struct ltedfapegtest_closure_19_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapegtest_closure_19(ltedfapegtest_funtype_7_t closure){
        ltedfapegtest_closure_19_t x = (ltedfapegtest_closure_19_t)closure;
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapegtest_closure_19_t copy_ltedfapegtest_closure_19(ltedfapegtest_closure_19_t x){
        ltedfapegtest_closure_19_t y = new_ltedfapegtest_closure_19();
        y->ftbl = x->ftbl;

        if (x->htbl != NULL){
            ltedfapegtest_funtype_7_htbl_t new_htbl = (ltedfapegtest_funtype_7_htbl_t) safe_malloc(sizeof(struct ltedfapegtest_funtype_7_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapegtest_funtype_7_hashentry_t * new_data = (ltedfapegtest_funtype_7_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapegtest_funtype_7_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapegtest_funtype_7_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


ltedfapegtest_funtype_7_t f_ltedfapegtest_closure_20(struct ltedfapegtest_closure_20_s * closure, uint32_t bvar){
if (closure->htbl != NULL){
        ltedfapegtest_funtype_16_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_ltedfapegtest_funtype_16(htbl, bvar, hash);
        ltedfapegtest_funtype_16_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            ltedfapegtest_funtype_7_t result;
            result = (ltedfapegtest_funtype_7_t)entry.value;
            if (result != NULL) result->count++;
            return result;}
        

        return h_ltedfapegtest_closure_20(bvar, closure->fvar_1, closure->fvar_2);};

return h_ltedfapegtest_closure_20(bvar, closure->fvar_1, closure->fvar_2);}

ltedfapegtest_funtype_7_t m_ltedfapegtest_closure_20(struct ltedfapegtest_closure_20_s * closure, uint32_t bvar){
        return h_ltedfapegtest_closure_20(bvar, closure->fvar_1, closure->fvar_2);}

ltedfapegtest_funtype_7_t h_ltedfapegtest_closure_20(uint32_t ivar_55, uint32_t ivar_198, ltedfapegtest_funtype_7_t ivar_38){
        ltedfapegtest_funtype_7_t result;
        //copying to ltedfapegtest_funtype_7 from ltedfapegtest_funtype_7;
        result = (ltedfapegtest_funtype_7_t)ivar_38;
        if (result != NULL) result->count++;

        return result;
}

ltedfapegtest_closure_20_t new_ltedfapegtest_closure_20(void){
        static struct ltedfapegtest_funtype_16_ftbl_s ftbl = {.fptr = (ltedfapegtest_funtype_7_t (*)(ltedfapegtest_funtype_16_t, uint32_t))&f_ltedfapegtest_closure_20, .mptr = (ltedfapegtest_funtype_7_t (*)(ltedfapegtest_funtype_16_t, uint32_t))&m_ltedfapegtest_closure_20, .rptr =  (void (*)(ltedfapegtest_funtype_16_t))&release_ltedfapegtest_closure_20, .cptr = (ltedfapegtest_funtype_16_t (*)(ltedfapegtest_funtype_16_t))&copy_ltedfapegtest_closure_20};
        ltedfapegtest_closure_20_t tmp = (ltedfapegtest_closure_20_t) safe_malloc(sizeof(struct ltedfapegtest_closure_20_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapegtest_closure_20(ltedfapegtest_funtype_16_t closure){
        ltedfapegtest_closure_20_t x = (ltedfapegtest_closure_20_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapegtest_funtype_7(x->fvar_2);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapegtest_closure_20_t copy_ltedfapegtest_closure_20(ltedfapegtest_closure_20_t x){
        ltedfapegtest_closure_20_t y = new_ltedfapegtest_closure_20();
        y->ftbl = x->ftbl;

        y->fvar_1 = (uint32_t)x->fvar_1;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        if (x->htbl != NULL){
            ltedfapegtest_funtype_16_htbl_t new_htbl = (ltedfapegtest_funtype_16_htbl_t) safe_malloc(sizeof(struct ltedfapegtest_funtype_16_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapegtest_funtype_16_hashentry_t * new_data = (ltedfapegtest_funtype_16_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapegtest_funtype_16_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapegtest_funtype_16_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


ltedfapeg__prepeg_adt_t f_ltedfapegtest_closure_21(struct ltedfapegtest_closure_21_s * closure, uint8_t bvar){
if (closure->htbl != NULL){
        ltedfapegtest_funtype_1_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_ltedfapegtest_funtype_1(htbl, bvar, hash);
        ltedfapegtest_funtype_1_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            ltedfapeg__prepeg_adt_t result;
            result = (ltedfapeg__prepeg_adt_t)entry.value;
            if (result != NULL) result->count++;
            return result;}
        

        return h_ltedfapegtest_closure_21(bvar);};

return h_ltedfapegtest_closure_21(bvar);}

ltedfapeg__prepeg_adt_t m_ltedfapegtest_closure_21(struct ltedfapegtest_closure_21_s * closure, uint8_t bvar){
        return h_ltedfapegtest_closure_21(bvar);}

ltedfapeg__prepeg_adt_t h_ltedfapegtest_closure_21(uint8_t ivar_98){
        ltedfapeg__prepeg_adt_t result;
        result = (ltedfapeg__prepeg_adt_t)ltedfapegtest__djson((uint8_t)ivar_98);

        return result;
}

ltedfapegtest_closure_21_t new_ltedfapegtest_closure_21(void){
        static struct ltedfapegtest_funtype_1_ftbl_s ftbl = {.fptr = (ltedfapeg__prepeg_adt_t (*)(ltedfapegtest_funtype_1_t, uint8_t))&f_ltedfapegtest_closure_21, .mptr = (ltedfapeg__prepeg_adt_t (*)(ltedfapegtest_funtype_1_t, uint8_t))&m_ltedfapegtest_closure_21, .rptr =  (void (*)(ltedfapegtest_funtype_1_t))&release_ltedfapegtest_closure_21, .cptr = (ltedfapegtest_funtype_1_t (*)(ltedfapegtest_funtype_1_t))&copy_ltedfapegtest_closure_21};
        ltedfapegtest_closure_21_t tmp = (ltedfapegtest_closure_21_t) safe_malloc(sizeof(struct ltedfapegtest_closure_21_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapegtest_closure_21(ltedfapegtest_funtype_1_t closure){
        ltedfapegtest_closure_21_t x = (ltedfapegtest_closure_21_t)closure;
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapegtest_closure_21_t copy_ltedfapegtest_closure_21(ltedfapegtest_closure_21_t x){
        ltedfapegtest_closure_21_t y = new_ltedfapegtest_closure_21();
        y->ftbl = x->ftbl;

        if (x->htbl != NULL){
            ltedfapegtest_funtype_1_htbl_t new_htbl = (ltedfapegtest_funtype_1_htbl_t) safe_malloc(sizeof(struct ltedfapegtest_funtype_1_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapegtest_funtype_1_hashentry_t * new_data = (ltedfapegtest_funtype_1_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapegtest_funtype_1_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapegtest_funtype_1_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


ltedfapegtest_record_22_t new_ltedfapegtest_record_22(void){
        ltedfapegtest_record_22_t tmp = (ltedfapegtest_record_22_t) safe_malloc(sizeof(struct ltedfapegtest_record_22_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapegtest_record_22(ltedfapegtest_record_22_t x){
        x->count--;
        if (x->count <= 0){
         release_ltedfapegtest_record_14(x->project_1);
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_ltedfapegtest_record_22_ptr(pointer_t x, type_actual_t T){
        release_ltedfapegtest_record_22((ltedfapegtest_record_22_t)x);
}

ltedfapegtest_record_22_t copy_ltedfapegtest_record_22(ltedfapegtest_record_22_t x){
        ltedfapegtest_record_22_t y = new_ltedfapegtest_record_22();
        y->project_1 = x->project_1;
        if (y->project_1 != NULL){y->project_1->count++;};
        y->project_2 = (uint8_t)x->project_2;
        y->project_3 = (uint32_t)x->project_3;
        y->count = 1;
        return y;}

bool_t equal_ltedfapegtest_record_22(ltedfapegtest_record_22_t x, ltedfapegtest_record_22_t y){
        bool_t tmp = true;
        tmp = tmp && equal_ltedfapegtest_record_14(x->project_1, y->project_1);
        tmp = tmp && x->project_2 == y->project_2;
        tmp = tmp && x->project_3 == y->project_3;
        return tmp;}

char * json_ltedfapegtest_record_22(ltedfapegtest_record_22_t x){
        char * tmp[3]; 
        char * fld0 = safe_malloc(21);
         sprintf(fld0, "\"project_1\" : ");
        tmp[0] = safe_strcat(fld0, json_ltedfapegtest_record_14(x->project_1));
        char * fld1 = safe_malloc(21);
         sprintf(fld1, "\"project_2\" : ");
        tmp[1] = safe_strcat(fld1, json_uint8(x->project_2));
        char * fld2 = safe_malloc(21);
         sprintf(fld2, "\"project_3\" : ");
        tmp[2] = safe_strcat(fld2, json_uint32(x->project_3));
         char * result = json_list_with_sep(tmp, 3,  '{', ',', '}');
         for (uint32_t i = 0; i < 3; i++) free(tmp[i]);
        return result;}

bool_t equal_ltedfapegtest_record_22_ptr(pointer_t x, pointer_t y, actual_ltedfapegtest_record_22_t T){
        return equal_ltedfapegtest_record_22((ltedfapegtest_record_22_t)x, (ltedfapegtest_record_22_t)y);
}

char * json_ltedfapegtest_record_22_ptr(pointer_t x, actual_ltedfapegtest_record_22_t T){
        return json_ltedfapegtest_record_22((ltedfapegtest_record_22_t)x);
}

actual_ltedfapegtest_record_22_t actual_ltedfapegtest_record_22(){
        actual_ltedfapegtest_record_22_t new = (actual_ltedfapegtest_record_22_t)safe_malloc(sizeof(struct actual_ltedfapegtest_record_22_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapegtest_record_22_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapegtest_record_22_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapegtest_record_22_ptr);
 

 
        return new;
 };

ltedfapegtest_record_22_t update_ltedfapegtest_record_22_project_1(ltedfapegtest_record_22_t x, ltedfapegtest_record_14_t v){
        ltedfapegtest_record_22_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->project_1 != NULL){release_ltedfapegtest_record_14(x->project_1);};}
        else {y = copy_ltedfapegtest_record_22(x); x->count--; y->project_1->count--;};
        y->project_1 = (ltedfapegtest_record_14_t)v;
        return y;}

ltedfapegtest_record_22_t update_ltedfapegtest_record_22_project_2(ltedfapegtest_record_22_t x, uint8_t v){
        ltedfapegtest_record_22_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapegtest_record_22(x); x->count--;};
        y->project_2 = (uint8_t)v;
        return y;}

ltedfapegtest_record_22_t update_ltedfapegtest_record_22_project_3(ltedfapegtest_record_22_t x, uint32_t v){
        ltedfapegtest_record_22_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapegtest_record_22(x); x->count--;};
        y->project_3 = (uint32_t)v;
        return y;}



void release_ltedfapegtest_funtype_23(ltedfapegtest_funtype_23_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapegtest_funtype_23_t copy_ltedfapegtest_funtype_23(ltedfapegtest_funtype_23_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapegtest_funtype_23(ltedfapegtest_funtype_23_t x, ltedfapegtest_funtype_23_t y){
        return false;}

char* json_ltedfapegtest_funtype_23(ltedfapegtest_funtype_23_t x){char * result = safe_malloc(34); sprintf(result, "%s", "\"ltedfapegtest_funtype_23\""); return result;}


ltedfapeg__prepeg_adt_t f_ltedfapegtest_closure_24(struct ltedfapegtest_closure_24_s * closure, uint8_t bvar){
if (closure->htbl != NULL){
        ltedfapegtest_funtype_1_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_ltedfapegtest_funtype_1(htbl, bvar, hash);
        ltedfapegtest_funtype_1_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            ltedfapeg__prepeg_adt_t result;
            result = (ltedfapeg__prepeg_adt_t)entry.value;
            if (result != NULL) result->count++;
            return result;}
        

        return h_ltedfapegtest_closure_24(bvar);};

return h_ltedfapegtest_closure_24(bvar);}

ltedfapeg__prepeg_adt_t m_ltedfapegtest_closure_24(struct ltedfapegtest_closure_24_s * closure, uint8_t bvar){
        return h_ltedfapegtest_closure_24(bvar);}

ltedfapeg__prepeg_adt_t h_ltedfapegtest_closure_24(uint8_t ivar_147){
        ltedfapeg__prepeg_adt_t result;
        result = (ltedfapeg__prepeg_adt_t)ltedfapegtest__djson((uint8_t)ivar_147);

        return result;
}

ltedfapegtest_closure_24_t new_ltedfapegtest_closure_24(void){
        static struct ltedfapegtest_funtype_1_ftbl_s ftbl = {.fptr = (ltedfapeg__prepeg_adt_t (*)(ltedfapegtest_funtype_1_t, uint8_t))&f_ltedfapegtest_closure_24, .mptr = (ltedfapeg__prepeg_adt_t (*)(ltedfapegtest_funtype_1_t, uint8_t))&m_ltedfapegtest_closure_24, .rptr =  (void (*)(ltedfapegtest_funtype_1_t))&release_ltedfapegtest_closure_24, .cptr = (ltedfapegtest_funtype_1_t (*)(ltedfapegtest_funtype_1_t))&copy_ltedfapegtest_closure_24};
        ltedfapegtest_closure_24_t tmp = (ltedfapegtest_closure_24_t) safe_malloc(sizeof(struct ltedfapegtest_closure_24_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapegtest_closure_24(ltedfapegtest_funtype_1_t closure){
        ltedfapegtest_closure_24_t x = (ltedfapegtest_closure_24_t)closure;
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapegtest_closure_24_t copy_ltedfapegtest_closure_24(ltedfapegtest_closure_24_t x){
        ltedfapegtest_closure_24_t y = new_ltedfapegtest_closure_24();
        y->ftbl = x->ftbl;

        if (x->htbl != NULL){
            ltedfapegtest_funtype_1_htbl_t new_htbl = (ltedfapegtest_funtype_1_htbl_t) safe_malloc(sizeof(struct ltedfapegtest_funtype_1_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapegtest_funtype_1_hashentry_t * new_data = (ltedfapegtest_funtype_1_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapegtest_funtype_1_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapegtest_funtype_1_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


ltedfapegtest_record_25_t new_ltedfapegtest_record_25(void){
        ltedfapegtest_record_25_t tmp = (ltedfapegtest_record_25_t) safe_malloc(sizeof(struct ltedfapegtest_record_25_s));
        tmp->count = 1;
        return tmp;}

void release_ltedfapegtest_record_25(ltedfapegtest_record_25_t x){
        x->count--;
        if (x->count <= 0){
         release_ltedfapegproof__qstack_adt(x->project_1);
         release_ltedfapegproof__parsetree_adt(x->project_4);
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_ltedfapegtest_record_25_ptr(pointer_t x, type_actual_t T){
        release_ltedfapegtest_record_25((ltedfapegtest_record_25_t)x);
}

ltedfapegtest_record_25_t copy_ltedfapegtest_record_25(ltedfapegtest_record_25_t x){
        ltedfapegtest_record_25_t y = new_ltedfapegtest_record_25();
        y->project_1 = x->project_1;
        if (y->project_1 != NULL){y->project_1->count++;};
        y->project_2 = (uint8_t)x->project_2;
        y->project_3 = (uint32_t)x->project_3;
        y->project_4 = x->project_4;
        if (y->project_4 != NULL){y->project_4->count++;};
        y->count = 1;
        return y;}

bool_t equal_ltedfapegtest_record_25(ltedfapegtest_record_25_t x, ltedfapegtest_record_25_t y){
        bool_t tmp = true;
        tmp = tmp && equal_ltedfapegproof__qstack_adt(x->project_1, y->project_1);
        tmp = tmp && x->project_2 == y->project_2;
        tmp = tmp && x->project_3 == y->project_3;
        tmp = tmp && equal_ltedfapegproof__parsetree_adt(x->project_4, y->project_4);
        return tmp;}

char * json_ltedfapegtest_record_25(ltedfapegtest_record_25_t x){
        char * tmp[4]; 
        char * fld0 = safe_malloc(21);
         sprintf(fld0, "\"project_1\" : ");
        tmp[0] = safe_strcat(fld0, json_ltedfapegproof__qstack_adt(x->project_1));
        char * fld1 = safe_malloc(21);
         sprintf(fld1, "\"project_2\" : ");
        tmp[1] = safe_strcat(fld1, json_uint8(x->project_2));
        char * fld2 = safe_malloc(21);
         sprintf(fld2, "\"project_3\" : ");
        tmp[2] = safe_strcat(fld2, json_uint32(x->project_3));
        char * fld3 = safe_malloc(21);
         sprintf(fld3, "\"project_4\" : ");
        tmp[3] = safe_strcat(fld3, json_ltedfapegproof__parsetree_adt(x->project_4));
         char * result = json_list_with_sep(tmp, 4,  '{', ',', '}');
         for (uint32_t i = 0; i < 4; i++) free(tmp[i]);
        return result;}

bool_t equal_ltedfapegtest_record_25_ptr(pointer_t x, pointer_t y, actual_ltedfapegtest_record_25_t T){
        return equal_ltedfapegtest_record_25((ltedfapegtest_record_25_t)x, (ltedfapegtest_record_25_t)y);
}

char * json_ltedfapegtest_record_25_ptr(pointer_t x, actual_ltedfapegtest_record_25_t T){
        return json_ltedfapegtest_record_25((ltedfapegtest_record_25_t)x);
}

actual_ltedfapegtest_record_25_t actual_ltedfapegtest_record_25(){
        actual_ltedfapegtest_record_25_t new = (actual_ltedfapegtest_record_25_t)safe_malloc(sizeof(struct actual_ltedfapegtest_record_25_s));
        new->equal_ptr = (equal_ptr_t)(*equal_ltedfapegtest_record_25_ptr);
 
        new->release_ptr = (release_ptr_t)(*release_ltedfapegtest_record_25_ptr);
 
        new->json_ptr = (json_ptr_t)(*json_ltedfapegtest_record_25_ptr);
 

 
        return new;
 };

ltedfapegtest_record_25_t update_ltedfapegtest_record_25_project_1(ltedfapegtest_record_25_t x, ltedfapegproof__qstack_adt_t v){
        ltedfapegtest_record_25_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->project_1 != NULL){release_ltedfapegproof__qstack_adt(x->project_1);};}
        else {y = copy_ltedfapegtest_record_25(x); x->count--; y->project_1->count--;};
        y->project_1 = (ltedfapegproof__qstack_adt_t)v;
        return y;}

ltedfapegtest_record_25_t update_ltedfapegtest_record_25_project_2(ltedfapegtest_record_25_t x, uint8_t v){
        ltedfapegtest_record_25_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapegtest_record_25(x); x->count--;};
        y->project_2 = (uint8_t)v;
        return y;}

ltedfapegtest_record_25_t update_ltedfapegtest_record_25_project_3(ltedfapegtest_record_25_t x, uint32_t v){
        ltedfapegtest_record_25_t y;
        if (x->count == 1){y = x;}
        else {y = copy_ltedfapegtest_record_25(x); x->count--;};
        y->project_3 = (uint32_t)v;
        return y;}

ltedfapegtest_record_25_t update_ltedfapegtest_record_25_project_4(ltedfapegtest_record_25_t x, ltedfapegproof__parsetree_adt_t v){
        ltedfapegtest_record_25_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->project_4 != NULL){release_ltedfapegproof__parsetree_adt(x->project_4);};}
        else {y = copy_ltedfapegtest_record_25(x); x->count--; y->project_4->count--;};
        y->project_4 = (ltedfapegproof__parsetree_adt_t)v;
        return y;}



void release_ltedfapegtest_funtype_26(ltedfapegtest_funtype_26_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

ltedfapegtest_funtype_26_t copy_ltedfapegtest_funtype_26(ltedfapegtest_funtype_26_t x){return x->ftbl->cptr(x);}

bool_t equal_ltedfapegtest_funtype_26(ltedfapegtest_funtype_26_t x, ltedfapegtest_funtype_26_t y){
        return false;}

char* json_ltedfapegtest_funtype_26(ltedfapegtest_funtype_26_t x){char * result = safe_malloc(34); sprintf(result, "%s", "\"ltedfapegtest_funtype_26\""); return result;}


ltedfapeg__prepeg_adt_t f_ltedfapegtest_closure_27(struct ltedfapegtest_closure_27_s * closure, uint8_t bvar){
if (closure->htbl != NULL){
        ltedfapegtest_funtype_1_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_ltedfapegtest_funtype_1(htbl, bvar, hash);
        ltedfapegtest_funtype_1_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            ltedfapeg__prepeg_adt_t result;
            result = (ltedfapeg__prepeg_adt_t)entry.value;
            if (result != NULL) result->count++;
            return result;}
        

        return h_ltedfapegtest_closure_27(bvar);};

return h_ltedfapegtest_closure_27(bvar);}

ltedfapeg__prepeg_adt_t m_ltedfapegtest_closure_27(struct ltedfapegtest_closure_27_s * closure, uint8_t bvar){
        return h_ltedfapegtest_closure_27(bvar);}

ltedfapeg__prepeg_adt_t h_ltedfapegtest_closure_27(uint8_t ivar_180){
        ltedfapeg__prepeg_adt_t result;
        result = (ltedfapeg__prepeg_adt_t)ltedfapegtest__djson((uint8_t)ivar_180);

        return result;
}

ltedfapegtest_closure_27_t new_ltedfapegtest_closure_27(void){
        static struct ltedfapegtest_funtype_1_ftbl_s ftbl = {.fptr = (ltedfapeg__prepeg_adt_t (*)(ltedfapegtest_funtype_1_t, uint8_t))&f_ltedfapegtest_closure_27, .mptr = (ltedfapeg__prepeg_adt_t (*)(ltedfapegtest_funtype_1_t, uint8_t))&m_ltedfapegtest_closure_27, .rptr =  (void (*)(ltedfapegtest_funtype_1_t))&release_ltedfapegtest_closure_27, .cptr = (ltedfapegtest_funtype_1_t (*)(ltedfapegtest_funtype_1_t))&copy_ltedfapegtest_closure_27};
        ltedfapegtest_closure_27_t tmp = (ltedfapegtest_closure_27_t) safe_malloc(sizeof(struct ltedfapegtest_closure_27_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapegtest_closure_27(ltedfapegtest_funtype_1_t closure){
        ltedfapegtest_closure_27_t x = (ltedfapegtest_closure_27_t)closure;
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapegtest_closure_27_t copy_ltedfapegtest_closure_27(ltedfapegtest_closure_27_t x){
        ltedfapegtest_closure_27_t y = new_ltedfapegtest_closure_27();
        y->ftbl = x->ftbl;

        if (x->htbl != NULL){
            ltedfapegtest_funtype_1_htbl_t new_htbl = (ltedfapegtest_funtype_1_htbl_t) safe_malloc(sizeof(struct ltedfapegtest_funtype_1_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapegtest_funtype_1_hashentry_t * new_data = (ltedfapegtest_funtype_1_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapegtest_funtype_1_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapegtest_funtype_1_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


ltedfapeg__ent_adt_t f_ltedfapegtest_closure_28(struct ltedfapegtest_closure_28_s * closure, uint8_t bvar){
if (closure->htbl != NULL){
        ltedfapegtest_funtype_7_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_ltedfapegtest_funtype_7(htbl, bvar, hash);
        ltedfapegtest_funtype_7_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            ltedfapeg__ent_adt_t result;
            result = (ltedfapeg__ent_adt_t)entry.value;
            if (result != NULL) result->count++;
            return result;}
        

        return h_ltedfapegtest_closure_28(bvar);};

return h_ltedfapegtest_closure_28(bvar);}

ltedfapeg__ent_adt_t m_ltedfapegtest_closure_28(struct ltedfapegtest_closure_28_s * closure, uint8_t bvar){
        return h_ltedfapegtest_closure_28(bvar);}

ltedfapeg__ent_adt_t h_ltedfapegtest_closure_28(uint8_t ivar_41){
        ltedfapeg__ent_adt_t result;
        result = (ltedfapeg__ent_adt_t)ltedfapeg__pending();
        if (result != NULL) result->count++;

        return result;
}

ltedfapegtest_closure_28_t new_ltedfapegtest_closure_28(void){
        static struct ltedfapegtest_funtype_7_ftbl_s ftbl = {.fptr = (ltedfapeg__ent_adt_t (*)(ltedfapegtest_funtype_7_t, uint8_t))&f_ltedfapegtest_closure_28, .mptr = (ltedfapeg__ent_adt_t (*)(ltedfapegtest_funtype_7_t, uint8_t))&m_ltedfapegtest_closure_28, .rptr =  (void (*)(ltedfapegtest_funtype_7_t))&release_ltedfapegtest_closure_28, .cptr = (ltedfapegtest_funtype_7_t (*)(ltedfapegtest_funtype_7_t))&copy_ltedfapegtest_closure_28};
        ltedfapegtest_closure_28_t tmp = (ltedfapegtest_closure_28_t) safe_malloc(sizeof(struct ltedfapegtest_closure_28_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapegtest_closure_28(ltedfapegtest_funtype_7_t closure){
        ltedfapegtest_closure_28_t x = (ltedfapegtest_closure_28_t)closure;
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapegtest_closure_28_t copy_ltedfapegtest_closure_28(ltedfapegtest_closure_28_t x){
        ltedfapegtest_closure_28_t y = new_ltedfapegtest_closure_28();
        y->ftbl = x->ftbl;

        if (x->htbl != NULL){
            ltedfapegtest_funtype_7_htbl_t new_htbl = (ltedfapegtest_funtype_7_htbl_t) safe_malloc(sizeof(struct ltedfapegtest_funtype_7_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapegtest_funtype_7_hashentry_t * new_data = (ltedfapegtest_funtype_7_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapegtest_funtype_7_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapegtest_funtype_7_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


ltedfapegtest_funtype_7_t f_ltedfapegtest_closure_29(struct ltedfapegtest_closure_29_s * closure, uint32_t bvar){
if (closure->htbl != NULL){
        ltedfapegtest_funtype_16_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_ltedfapegtest_funtype_16(htbl, bvar, hash);
        ltedfapegtest_funtype_16_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            ltedfapegtest_funtype_7_t result;
            result = (ltedfapegtest_funtype_7_t)entry.value;
            if (result != NULL) result->count++;
            return result;}
        

        return h_ltedfapegtest_closure_29(bvar, closure->fvar_1, closure->fvar_2);};

return h_ltedfapegtest_closure_29(bvar, closure->fvar_1, closure->fvar_2);}

ltedfapegtest_funtype_7_t m_ltedfapegtest_closure_29(struct ltedfapegtest_closure_29_s * closure, uint32_t bvar){
        return h_ltedfapegtest_closure_29(bvar, closure->fvar_1, closure->fvar_2);}

ltedfapegtest_funtype_7_t h_ltedfapegtest_closure_29(uint32_t ivar_54, uint32_t ivar_149, ltedfapegtest_funtype_7_t ivar_37){
        ltedfapegtest_funtype_7_t result;
        //copying to ltedfapegtest_funtype_7 from ltedfapegtest_funtype_7;
        result = (ltedfapegtest_funtype_7_t)ivar_37;
        if (result != NULL) result->count++;

        return result;
}

ltedfapegtest_closure_29_t new_ltedfapegtest_closure_29(void){
        static struct ltedfapegtest_funtype_16_ftbl_s ftbl = {.fptr = (ltedfapegtest_funtype_7_t (*)(ltedfapegtest_funtype_16_t, uint32_t))&f_ltedfapegtest_closure_29, .mptr = (ltedfapegtest_funtype_7_t (*)(ltedfapegtest_funtype_16_t, uint32_t))&m_ltedfapegtest_closure_29, .rptr =  (void (*)(ltedfapegtest_funtype_16_t))&release_ltedfapegtest_closure_29, .cptr = (ltedfapegtest_funtype_16_t (*)(ltedfapegtest_funtype_16_t))&copy_ltedfapegtest_closure_29};
        ltedfapegtest_closure_29_t tmp = (ltedfapegtest_closure_29_t) safe_malloc(sizeof(struct ltedfapegtest_closure_29_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapegtest_closure_29(ltedfapegtest_funtype_16_t closure){
        ltedfapegtest_closure_29_t x = (ltedfapegtest_closure_29_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapegtest_funtype_7(x->fvar_2);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapegtest_closure_29_t copy_ltedfapegtest_closure_29(ltedfapegtest_closure_29_t x){
        ltedfapegtest_closure_29_t y = new_ltedfapegtest_closure_29();
        y->ftbl = x->ftbl;

        y->fvar_1 = (uint32_t)x->fvar_1;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        if (x->htbl != NULL){
            ltedfapegtest_funtype_16_htbl_t new_htbl = (ltedfapegtest_funtype_16_htbl_t) safe_malloc(sizeof(struct ltedfapegtest_funtype_16_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapegtest_funtype_16_hashentry_t * new_data = (ltedfapegtest_funtype_16_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapegtest_funtype_16_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapegtest_funtype_16_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


ltedfapeg__prepeg_adt_t f_ltedfapegtest_closure_30(struct ltedfapegtest_closure_30_s * closure, uint8_t bvar){
if (closure->htbl != NULL){
        ltedfapegtest_funtype_1_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_ltedfapegtest_funtype_1(htbl, bvar, hash);
        ltedfapegtest_funtype_1_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            ltedfapeg__prepeg_adt_t result;
            result = (ltedfapeg__prepeg_adt_t)entry.value;
            if (result != NULL) result->count++;
            return result;}
        

        return h_ltedfapegtest_closure_30(bvar);};

return h_ltedfapegtest_closure_30(bvar);}

ltedfapeg__prepeg_adt_t m_ltedfapegtest_closure_30(struct ltedfapegtest_closure_30_s * closure, uint8_t bvar){
        return h_ltedfapegtest_closure_30(bvar);}

ltedfapeg__prepeg_adt_t h_ltedfapegtest_closure_30(uint8_t ivar_128){
        ltedfapeg__prepeg_adt_t result;
        result = (ltedfapeg__prepeg_adt_t)ltedfapegtest__djson((uint8_t)ivar_128);

        return result;
}

ltedfapegtest_closure_30_t new_ltedfapegtest_closure_30(void){
        static struct ltedfapegtest_funtype_1_ftbl_s ftbl = {.fptr = (ltedfapeg__prepeg_adt_t (*)(ltedfapegtest_funtype_1_t, uint8_t))&f_ltedfapegtest_closure_30, .mptr = (ltedfapeg__prepeg_adt_t (*)(ltedfapegtest_funtype_1_t, uint8_t))&m_ltedfapegtest_closure_30, .rptr =  (void (*)(ltedfapegtest_funtype_1_t))&release_ltedfapegtest_closure_30, .cptr = (ltedfapegtest_funtype_1_t (*)(ltedfapegtest_funtype_1_t))&copy_ltedfapegtest_closure_30};
        ltedfapegtest_closure_30_t tmp = (ltedfapegtest_closure_30_t) safe_malloc(sizeof(struct ltedfapegtest_closure_30_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapegtest_closure_30(ltedfapegtest_funtype_1_t closure){
        ltedfapegtest_closure_30_t x = (ltedfapegtest_closure_30_t)closure;
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapegtest_closure_30_t copy_ltedfapegtest_closure_30(ltedfapegtest_closure_30_t x){
        ltedfapegtest_closure_30_t y = new_ltedfapegtest_closure_30();
        y->ftbl = x->ftbl;

        if (x->htbl != NULL){
            ltedfapegtest_funtype_1_htbl_t new_htbl = (ltedfapegtest_funtype_1_htbl_t) safe_malloc(sizeof(struct ltedfapegtest_funtype_1_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapegtest_funtype_1_hashentry_t * new_data = (ltedfapegtest_funtype_1_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapegtest_funtype_1_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapegtest_funtype_1_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


ltedfapeg__prepeg_adt_t f_ltedfapegtest_closure_31(struct ltedfapegtest_closure_31_s * closure, uint8_t bvar){
if (closure->htbl != NULL){
        ltedfapegtest_funtype_1_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_ltedfapegtest_funtype_1(htbl, bvar, hash);
        ltedfapegtest_funtype_1_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            ltedfapeg__prepeg_adt_t result;
            result = (ltedfapeg__prepeg_adt_t)entry.value;
            if (result != NULL) result->count++;
            return result;}
        

        return h_ltedfapegtest_closure_31(bvar);};

return h_ltedfapegtest_closure_31(bvar);}

ltedfapeg__prepeg_adt_t m_ltedfapegtest_closure_31(struct ltedfapegtest_closure_31_s * closure, uint8_t bvar){
        return h_ltedfapegtest_closure_31(bvar);}

ltedfapeg__prepeg_adt_t h_ltedfapegtest_closure_31(uint8_t ivar_97){
        ltedfapeg__prepeg_adt_t result;
        result = (ltedfapeg__prepeg_adt_t)ltedfapegtest__djson((uint8_t)ivar_97);

        return result;
}

ltedfapegtest_closure_31_t new_ltedfapegtest_closure_31(void){
        static struct ltedfapegtest_funtype_1_ftbl_s ftbl = {.fptr = (ltedfapeg__prepeg_adt_t (*)(ltedfapegtest_funtype_1_t, uint8_t))&f_ltedfapegtest_closure_31, .mptr = (ltedfapeg__prepeg_adt_t (*)(ltedfapegtest_funtype_1_t, uint8_t))&m_ltedfapegtest_closure_31, .rptr =  (void (*)(ltedfapegtest_funtype_1_t))&release_ltedfapegtest_closure_31, .cptr = (ltedfapegtest_funtype_1_t (*)(ltedfapegtest_funtype_1_t))&copy_ltedfapegtest_closure_31};
        ltedfapegtest_closure_31_t tmp = (ltedfapegtest_closure_31_t) safe_malloc(sizeof(struct ltedfapegtest_closure_31_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapegtest_closure_31(ltedfapegtest_funtype_1_t closure){
        ltedfapegtest_closure_31_t x = (ltedfapegtest_closure_31_t)closure;
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapegtest_closure_31_t copy_ltedfapegtest_closure_31(ltedfapegtest_closure_31_t x){
        ltedfapegtest_closure_31_t y = new_ltedfapegtest_closure_31();
        y->ftbl = x->ftbl;

        if (x->htbl != NULL){
            ltedfapegtest_funtype_1_htbl_t new_htbl = (ltedfapegtest_funtype_1_htbl_t) safe_malloc(sizeof(struct ltedfapegtest_funtype_1_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapegtest_funtype_1_hashentry_t * new_data = (ltedfapegtest_funtype_1_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapegtest_funtype_1_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapegtest_funtype_1_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


ltedfapeg__ent_adt_t f_ltedfapegtest_closure_32(struct ltedfapegtest_closure_32_s * closure, uint8_t bvar){
if (closure->htbl != NULL){
        ltedfapegtest_funtype_7_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_ltedfapegtest_funtype_7(htbl, bvar, hash);
        ltedfapegtest_funtype_7_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            ltedfapeg__ent_adt_t result;
            result = (ltedfapeg__ent_adt_t)entry.value;
            if (result != NULL) result->count++;
            return result;}
        

        return h_ltedfapegtest_closure_32(bvar);};

return h_ltedfapegtest_closure_32(bvar);}

ltedfapeg__ent_adt_t m_ltedfapegtest_closure_32(struct ltedfapegtest_closure_32_s * closure, uint8_t bvar){
        return h_ltedfapegtest_closure_32(bvar);}

ltedfapeg__ent_adt_t h_ltedfapegtest_closure_32(uint8_t ivar_41){
        ltedfapeg__ent_adt_t result;
        result = (ltedfapeg__ent_adt_t)ltedfapeg__pending();
        if (result != NULL) result->count++;

        return result;
}

ltedfapegtest_closure_32_t new_ltedfapegtest_closure_32(void){
        static struct ltedfapegtest_funtype_7_ftbl_s ftbl = {.fptr = (ltedfapeg__ent_adt_t (*)(ltedfapegtest_funtype_7_t, uint8_t))&f_ltedfapegtest_closure_32, .mptr = (ltedfapeg__ent_adt_t (*)(ltedfapegtest_funtype_7_t, uint8_t))&m_ltedfapegtest_closure_32, .rptr =  (void (*)(ltedfapegtest_funtype_7_t))&release_ltedfapegtest_closure_32, .cptr = (ltedfapegtest_funtype_7_t (*)(ltedfapegtest_funtype_7_t))&copy_ltedfapegtest_closure_32};
        ltedfapegtest_closure_32_t tmp = (ltedfapegtest_closure_32_t) safe_malloc(sizeof(struct ltedfapegtest_closure_32_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapegtest_closure_32(ltedfapegtest_funtype_7_t closure){
        ltedfapegtest_closure_32_t x = (ltedfapegtest_closure_32_t)closure;
        x->count--;
        if (x->count <= 0){
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapegtest_closure_32_t copy_ltedfapegtest_closure_32(ltedfapegtest_closure_32_t x){
        ltedfapegtest_closure_32_t y = new_ltedfapegtest_closure_32();
        y->ftbl = x->ftbl;

        if (x->htbl != NULL){
            ltedfapegtest_funtype_7_htbl_t new_htbl = (ltedfapegtest_funtype_7_htbl_t) safe_malloc(sizeof(struct ltedfapegtest_funtype_7_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapegtest_funtype_7_hashentry_t * new_data = (ltedfapegtest_funtype_7_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapegtest_funtype_7_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapegtest_funtype_7_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}


ltedfapegtest_funtype_7_t f_ltedfapegtest_closure_33(struct ltedfapegtest_closure_33_s * closure, uint32_t bvar){
if (closure->htbl != NULL){
        ltedfapegtest_funtype_16_htbl_t htbl = closure->htbl;
        uint32_t hash = uint32_hash(bvar);
        uint32_t hashindex = lookup_ltedfapegtest_funtype_16(htbl, bvar, hash);
        ltedfapegtest_funtype_16_hashentry_t entry = htbl->data[hashindex];
        bool_t keyzero;
         keyzero = (entry.key == 0);
        if (!keyzero || entry.keyhash != 0){
            ltedfapegtest_funtype_7_t result;
            result = (ltedfapegtest_funtype_7_t)entry.value;
            if (result != NULL) result->count++;
            return result;}
        

        return h_ltedfapegtest_closure_33(bvar, closure->fvar_1, closure->fvar_2);};

return h_ltedfapegtest_closure_33(bvar, closure->fvar_1, closure->fvar_2);}

ltedfapegtest_funtype_7_t m_ltedfapegtest_closure_33(struct ltedfapegtest_closure_33_s * closure, uint32_t bvar){
        return h_ltedfapegtest_closure_33(bvar, closure->fvar_1, closure->fvar_2);}

ltedfapegtest_funtype_7_t h_ltedfapegtest_closure_33(uint32_t ivar_54, uint32_t ivar_118, ltedfapegtest_funtype_7_t ivar_37){
        ltedfapegtest_funtype_7_t result;
        //copying to ltedfapegtest_funtype_7 from ltedfapegtest_funtype_7;
        result = (ltedfapegtest_funtype_7_t)ivar_37;
        if (result != NULL) result->count++;

        return result;
}

ltedfapegtest_closure_33_t new_ltedfapegtest_closure_33(void){
        static struct ltedfapegtest_funtype_16_ftbl_s ftbl = {.fptr = (ltedfapegtest_funtype_7_t (*)(ltedfapegtest_funtype_16_t, uint32_t))&f_ltedfapegtest_closure_33, .mptr = (ltedfapegtest_funtype_7_t (*)(ltedfapegtest_funtype_16_t, uint32_t))&m_ltedfapegtest_closure_33, .rptr =  (void (*)(ltedfapegtest_funtype_16_t))&release_ltedfapegtest_closure_33, .cptr = (ltedfapegtest_funtype_16_t (*)(ltedfapegtest_funtype_16_t))&copy_ltedfapegtest_closure_33};
        ltedfapegtest_closure_33_t tmp = (ltedfapegtest_closure_33_t) safe_malloc(sizeof(struct ltedfapegtest_closure_33_s));
        tmp->count = 1;
        tmp->ftbl = &ftbl;
        tmp->htbl = NULL;
        return tmp;}

void release_ltedfapegtest_closure_33(ltedfapegtest_funtype_16_t closure){
        ltedfapegtest_closure_33_t x = (ltedfapegtest_closure_33_t)closure;
        x->count--;
        if (x->count <= 0){
         release_ltedfapegtest_funtype_7(x->fvar_2);
        //printf("\nFreeing\n");
        safe_free(x);}}

ltedfapegtest_closure_33_t copy_ltedfapegtest_closure_33(ltedfapegtest_closure_33_t x){
        ltedfapegtest_closure_33_t y = new_ltedfapegtest_closure_33();
        y->ftbl = x->ftbl;

        y->fvar_1 = (uint32_t)x->fvar_1;
        y->fvar_2 = x->fvar_2; x->fvar_2->count++;
        if (x->htbl != NULL){
            ltedfapegtest_funtype_16_htbl_t new_htbl = (ltedfapegtest_funtype_16_htbl_t) safe_malloc(sizeof(struct ltedfapegtest_funtype_16_htbl_s));
            new_htbl->size = x->htbl->size;
            new_htbl->num_entries = x->htbl->num_entries;
            ltedfapegtest_funtype_16_hashentry_t * new_data = (ltedfapegtest_funtype_16_hashentry_t *) safe_malloc(new_htbl->size * sizeof(struct ltedfapegtest_funtype_16_hashentry_s));
            memcpy(new_data, x->htbl->data, (new_htbl->size * sizeof(struct ltedfapegtest_funtype_16_hashentry_s)));
            new_htbl->data = new_data;
            for (uint32_t j = 0; j < new_htbl->size; j++){
                        if ((new_htbl->data[j].key != 0) || new_htbl->data[j].keyhash != 0) new_htbl->data[j].value->count++;};
            y->htbl = new_htbl;
        } else
            {y->htbl = NULL;};
        return y;
}

ltedfapeg__prepeg_adt_t ltedfapegtest__djson(uint8_t ivar_1){
        ltedfapeg__prepeg_adt_t  result;
        bool_t ivar_2;
        uint8_t ivar_4;
        ivar_4 = (uint8_t)0;
        ivar_2 = (ivar_1 == ivar_4);
        if (ivar_2){ 
             uint8_t ivar_10;
             ivar_10 = (uint8_t)3;
             uint8_t ivar_11;
             ivar_11 = (uint8_t)1;
             uint8_t ivar_12;
             ivar_12 = (uint8_t)31;
             result = (ltedfapeg__prepeg_adt_t)ltedfapeg__lte((uint8_t)ivar_10, (uint8_t)ivar_11, (uint8_t)ivar_12);
} else {
        
             bool_t ivar_13;
             uint8_t ivar_15;
             ivar_15 = (uint8_t)1;
             ivar_13 = (ivar_1 == ivar_15);
             if (ivar_13){  
           uint8_t ivar_21;
           ivar_21 = (uint8_t)16;
           uint8_t ivar_22;
           ivar_22 = (uint8_t)31;
           uint8_t ivar_23;
           ivar_23 = (uint8_t)2;
           result = (ltedfapeg__prepeg_adt_t)ltedfapeg__lte((uint8_t)ivar_21, (uint8_t)ivar_22, (uint8_t)ivar_23);
} else {
             
           bool_t ivar_24;
           uint8_t ivar_26;
           ivar_26 = (uint8_t)2;
           ivar_24 = (ivar_1 == ivar_26);
           if (ivar_24){   
           uint8_t ivar_32;
           ivar_32 = (uint8_t)24;
           uint8_t ivar_33;
           ivar_33 = (uint8_t)5;
           uint8_t ivar_34;
           ivar_34 = (uint8_t)7;
           result = (ltedfapeg__prepeg_adt_t)ltedfapeg__lte((uint8_t)ivar_32, (uint8_t)ivar_33, (uint8_t)ivar_34);
} else {
           
           bool_t ivar_35;
           uint8_t ivar_37;
           ivar_37 = (uint8_t)3;
           ivar_35 = (ivar_1 == ivar_37);
           if (ivar_35){    
            uint8_t ivar_43;
            ivar_43 = (uint8_t)4;
            uint8_t ivar_44;
            ivar_44 = (uint8_t)31;
            uint8_t ivar_45;
            ivar_45 = (uint8_t)31;
            result = (ltedfapeg__prepeg_adt_t)ltedfapeg__lte((uint8_t)ivar_43, (uint8_t)ivar_44, (uint8_t)ivar_45);
} else {
           
            bool_t ivar_46;
            uint8_t ivar_48;
            ivar_48 = (uint8_t)4;
            ivar_46 = (ivar_1 == ivar_48);
            if (ivar_46){     
             dfa__dfa_t ivar_52;
             ivar_52 = (dfa__dfa_t)dfa__wspaceDfa();
             if (ivar_52 != NULL) ivar_52->count++;
             result = (ltedfapeg__prepeg_adt_t)ltedfapeg__any((dfa__dfa_t)ivar_52);
} else {
            
             bool_t ivar_53;
             uint8_t ivar_55;
             ivar_55 = (uint8_t)5;
             ivar_53 = (ivar_1 == ivar_55);
             if (ivar_53){      
              uint8_t ivar_61;
              ivar_61 = (uint8_t)25;
              uint8_t ivar_62;
              ivar_62 = (uint8_t)31;
              uint8_t ivar_63;
              ivar_63 = (uint8_t)6;
              result = (ltedfapeg__prepeg_adt_t)ltedfapeg__lte((uint8_t)ivar_61, (uint8_t)ivar_62, (uint8_t)ivar_63);
} else {
             
              bool_t ivar_64;
              uint8_t ivar_66;
              ivar_66 = (uint8_t)6;
              ivar_64 = (ivar_1 == ivar_66);
              if (ivar_64){       
               uint8_t ivar_72;
               ivar_72 = (uint8_t)8;
               uint8_t ivar_73;
               ivar_73 = (uint8_t)10;
               uint8_t ivar_74;
               ivar_74 = (uint8_t)30;
               result = (ltedfapeg__prepeg_adt_t)ltedfapeg__lte((uint8_t)ivar_72, (uint8_t)ivar_73, (uint8_t)ivar_74);
} else {
              
               bool_t ivar_75;
               uint8_t ivar_77;
               ivar_77 = (uint8_t)7;
               ivar_75 = (ivar_1 == ivar_77);
               if (ivar_75){        
                uint8_t ivar_83;
                ivar_83 = (uint8_t)8;
                uint8_t ivar_84;
                ivar_84 = (uint8_t)31;
                uint8_t ivar_85;
                ivar_85 = (uint8_t)9;
                result = (ltedfapeg__prepeg_adt_t)ltedfapeg__lte((uint8_t)ivar_83, (uint8_t)ivar_84, (uint8_t)ivar_85);
} else {
               
                bool_t ivar_86;
                uint8_t ivar_88;
                ivar_88 = (uint8_t)8;
                ivar_86 = (ivar_1 == ivar_88);
                if (ivar_86){         
                 dfa__dfa_t ivar_92;
                 ivar_92 = (dfa__dfa_t)dfa__tokenDfa();
                 if (ivar_92 != NULL) ivar_92->count++;
                 result = (ltedfapeg__prepeg_adt_t)ltedfapeg__any((dfa__dfa_t)ivar_92);
} else {
                
                 bool_t ivar_93;
                 uint8_t ivar_95;
                 ivar_95 = (uint8_t)9;
                 ivar_93 = (ivar_1 == ivar_95);
                 if (ivar_93){          
                  uint8_t ivar_101;
                  ivar_101 = (uint8_t)26;
                  uint8_t ivar_102;
                  ivar_102 = (uint8_t)13;
                  uint8_t ivar_103;
                  ivar_103 = (uint8_t)33;
                  result = (ltedfapeg__prepeg_adt_t)ltedfapeg__lte((uint8_t)ivar_101, (uint8_t)ivar_102, (uint8_t)ivar_103);
} else {
                 
                  bool_t ivar_104;
                  uint8_t ivar_106;
                  ivar_106 = (uint8_t)10;
                  ivar_104 = (ivar_1 == ivar_106);
                  if (ivar_104){           
                   uint8_t ivar_112;
                   ivar_112 = (uint8_t)29;
                   uint8_t ivar_113;
                   ivar_113 = (uint8_t)11;
                   uint8_t ivar_114;
                   ivar_114 = (uint8_t)30;
                   result = (ltedfapeg__prepeg_adt_t)ltedfapeg__lte((uint8_t)ivar_112, (uint8_t)ivar_113, (uint8_t)ivar_114);
} else {
                  
                   bool_t ivar_115;
                   uint8_t ivar_117;
                   ivar_117 = (uint8_t)11;
                   ivar_115 = (ivar_1 == ivar_117);
                   if (ivar_115){            
                    uint8_t ivar_123;
                    ivar_123 = (uint8_t)1;
                    uint8_t ivar_124;
                    ivar_124 = (uint8_t)12;
                    uint8_t ivar_125;
                    ivar_125 = (uint8_t)30;
                    result = (ltedfapeg__prepeg_adt_t)ltedfapeg__lte((uint8_t)ivar_123, (uint8_t)ivar_124, (uint8_t)ivar_125);
} else {
                   
                    bool_t ivar_126;
                    uint8_t ivar_128;
                    ivar_128 = (uint8_t)12;
                    ivar_126 = (ivar_1 == ivar_128);
                    if (ivar_126){             
                     uint8_t ivar_134;
                     ivar_134 = (uint8_t)28;
                     uint8_t ivar_135;
                     ivar_135 = (uint8_t)5;
                     uint8_t ivar_136;
                     ivar_136 = (uint8_t)25;
                     result = (ltedfapeg__prepeg_adt_t)ltedfapeg__lte((uint8_t)ivar_134, (uint8_t)ivar_135, (uint8_t)ivar_136);
} else {
                    
                     bool_t ivar_137;
                     uint8_t ivar_139;
                     ivar_139 = (uint8_t)13;
                     ivar_137 = (ivar_1 == ivar_139);
                     if (ivar_137){              
                      uint8_t ivar_145;
                      ivar_145 = (uint8_t)27;
                      uint8_t ivar_146;
                      ivar_146 = (uint8_t)31;
                      uint8_t ivar_147;
                      ivar_147 = (uint8_t)15;
                      result = (ltedfapeg__prepeg_adt_t)ltedfapeg__lte((uint8_t)ivar_145, (uint8_t)ivar_146, (uint8_t)ivar_147);
} else {
                     
                      bool_t ivar_148;
                      uint8_t ivar_150;
                      ivar_150 = (uint8_t)14;
                      ivar_148 = (ivar_1 == ivar_150);
                      if (ivar_148){               
                       uint8_t ivar_156;
                       ivar_156 = (uint8_t)28;
                       uint8_t ivar_157;
                       ivar_157 = (uint8_t)15;
                       uint8_t ivar_158;
                       ivar_158 = (uint8_t)27;
                       result = (ltedfapeg__prepeg_adt_t)ltedfapeg__lte((uint8_t)ivar_156, (uint8_t)ivar_157, (uint8_t)ivar_158);
} else {
                      
                       bool_t ivar_159;
                       uint8_t ivar_161;
                       ivar_161 = (uint8_t)15;
                       ivar_159 = (ivar_1 == ivar_161);
                       if (ivar_159){                
                        uint8_t ivar_167;
                        ivar_167 = (uint8_t)1;
                        uint8_t ivar_168;
                        ivar_168 = (uint8_t)14;
                        uint8_t ivar_169;
                        ivar_169 = (uint8_t)30;
                        result = (ltedfapeg__prepeg_adt_t)ltedfapeg__lte((uint8_t)ivar_167, (uint8_t)ivar_168, (uint8_t)ivar_169);
} else {
                       
                        bool_t ivar_170;
                        uint8_t ivar_172;
                        ivar_172 = (uint8_t)16;
                        ivar_170 = (ivar_1 == ivar_172);
                        if (ivar_170){                 
                         dfa__dfa_t ivar_176;
                         ivar_176 = (dfa__dfa_t)dfa__digitDfa();
                         if (ivar_176 != NULL) ivar_176->count++;
                         result = (ltedfapeg__prepeg_adt_t)ltedfapeg__any((dfa__dfa_t)ivar_176);
} else {
                        
                         bool_t ivar_177;
                         uint8_t ivar_179;
                         ivar_179 = (uint8_t)17;
                         ivar_177 = (ivar_1 == ivar_179);
                         if (ivar_177){                  
                          uint8_t ivar_183;
                          ivar_183 = (uint8_t)123;
                          result = (ltedfapeg__prepeg_adt_t)ltedfapeg__terminal((uint8_t)ivar_183);
} else {
                         
                          bool_t ivar_184;
                          uint8_t ivar_186;
                          ivar_186 = (uint8_t)18;
                          ivar_184 = (ivar_1 == ivar_186);
                          if (ivar_184){                   
                           uint8_t ivar_190;
                           ivar_190 = (uint8_t)125;
                           result = (ltedfapeg__prepeg_adt_t)ltedfapeg__terminal((uint8_t)ivar_190);
} else {
                          
                           bool_t ivar_191;
                           uint8_t ivar_193;
                           ivar_193 = (uint8_t)19;
                           ivar_191 = (ivar_1 == ivar_193);
                           if (ivar_191){                    
                            uint8_t ivar_197;
                            ivar_197 = (uint8_t)91;
                            result = (ltedfapeg__prepeg_adt_t)ltedfapeg__terminal((uint8_t)ivar_197);
} else {
                           
                            bool_t ivar_198;
                            uint8_t ivar_200;
                            ivar_200 = (uint8_t)20;
                            ivar_198 = (ivar_1 == ivar_200);
                            if (ivar_198){                     
                             uint8_t ivar_204;
                             ivar_204 = (uint8_t)93;
                             result = (ltedfapeg__prepeg_adt_t)ltedfapeg__terminal((uint8_t)ivar_204);
} else {
                            
                             bool_t ivar_205;
                             uint8_t ivar_207;
                             ivar_207 = (uint8_t)21;
                             ivar_205 = (ivar_1 == ivar_207);
                             if (ivar_205){                      
                              uint8_t ivar_211;
                              ivar_211 = (uint8_t)34;
                              result = (ltedfapeg__prepeg_adt_t)ltedfapeg__terminal((uint8_t)ivar_211);
} else {
                             
                              bool_t ivar_212;
                              uint8_t ivar_214;
                              ivar_214 = (uint8_t)22;
                              ivar_212 = (ivar_1 == ivar_214);
                              if (ivar_212){                       
                               uint8_t ivar_218;
                               ivar_218 = (uint8_t)44;
                               result = (ltedfapeg__prepeg_adt_t)ltedfapeg__terminal((uint8_t)ivar_218);
} else {
                              
                               bool_t ivar_219;
                               uint8_t ivar_221;
                               ivar_221 = (uint8_t)23;
                               ivar_219 = (ivar_1 == ivar_221);
                               if (ivar_219){                        
                                uint8_t ivar_225;
                                ivar_225 = (uint8_t)58;
                                result = (ltedfapeg__prepeg_adt_t)ltedfapeg__terminal((uint8_t)ivar_225);
} else {
                               
                                bool_t ivar_226;
                                uint8_t ivar_228;
                                ivar_228 = (uint8_t)24;
                                ivar_226 = (ivar_1 == ivar_228);
                                if (ivar_226){                         
                                 uint8_t ivar_234;
                                 ivar_234 = (uint8_t)17;
                                 uint8_t ivar_235;
                                 ivar_235 = (uint8_t)3;
                                 uint8_t ivar_236;
                                 ivar_236 = (uint8_t)30;
                                 result = (ltedfapeg__prepeg_adt_t)ltedfapeg__lte((uint8_t)ivar_234, (uint8_t)ivar_235, (uint8_t)ivar_236);
} else {
                                
                                 bool_t ivar_237;
                                 uint8_t ivar_239;
                                 ivar_239 = (uint8_t)25;
                                 ivar_237 = (ivar_1 == ivar_239);
                                 if (ivar_237){                          
                                  uint8_t ivar_245;
                                  ivar_245 = (uint8_t)18;
                                  uint8_t ivar_246;
                                  ivar_246 = (uint8_t)3;
                                  uint8_t ivar_247;
                                  ivar_247 = (uint8_t)30;
                                  result = (ltedfapeg__prepeg_adt_t)ltedfapeg__lte((uint8_t)ivar_245, (uint8_t)ivar_246, (uint8_t)ivar_247);
} else {
                                 
                                  bool_t ivar_248;
                                  uint8_t ivar_250;
                                  ivar_250 = (uint8_t)26;
                                  ivar_248 = (ivar_1 == ivar_250);
                                  if (ivar_248){                           
                                   uint8_t ivar_256;
                                   ivar_256 = (uint8_t)19;
                                   uint8_t ivar_257;
                                   ivar_257 = (uint8_t)3;
                                   uint8_t ivar_258;
                                   ivar_258 = (uint8_t)30;
                                   result = (ltedfapeg__prepeg_adt_t)ltedfapeg__lte((uint8_t)ivar_256, (uint8_t)ivar_257, (uint8_t)ivar_258);
} else {
                                  
                                   bool_t ivar_259;
                                   uint8_t ivar_261;
                                   ivar_261 = (uint8_t)27;
                                   ivar_259 = (ivar_1 == ivar_261);
                                   if (ivar_259){                            
                                    uint8_t ivar_267;
                                    ivar_267 = (uint8_t)20;
                                    uint8_t ivar_268;
                                    ivar_268 = (uint8_t)3;
                                    uint8_t ivar_269;
                                    ivar_269 = (uint8_t)30;
                                    result = (ltedfapeg__prepeg_adt_t)ltedfapeg__lte((uint8_t)ivar_267, (uint8_t)ivar_268, (uint8_t)ivar_269);
} else {
                                   
                                    bool_t ivar_270;
                                    uint8_t ivar_272;
                                    ivar_272 = (uint8_t)28;
                                    ivar_270 = (ivar_1 == ivar_272);
                                    if (ivar_270){                             
                                     uint8_t ivar_278;
                                     ivar_278 = (uint8_t)22;
                                     uint8_t ivar_279;
                                     ivar_279 = (uint8_t)3;
                                     uint8_t ivar_280;
                                     ivar_280 = (uint8_t)30;
                                     result = (ltedfapeg__prepeg_adt_t)ltedfapeg__lte((uint8_t)ivar_278, (uint8_t)ivar_279, (uint8_t)ivar_280);
} else {
                                    
                                     bool_t ivar_281;
                                     uint8_t ivar_283;
                                     ivar_283 = (uint8_t)29;
                                     ivar_281 = (ivar_1 == ivar_283);
                                     if (ivar_281){                              
                                      uint8_t ivar_289;
                                      ivar_289 = (uint8_t)23;
                                      uint8_t ivar_290;
                                      ivar_290 = (uint8_t)3;
                                      uint8_t ivar_291;
                                      ivar_291 = (uint8_t)30;
                                      result = (ltedfapeg__prepeg_adt_t)ltedfapeg__lte((uint8_t)ivar_289, (uint8_t)ivar_290, (uint8_t)ivar_291);
} else {
                                     
                                      bool_t ivar_292;
                                      uint8_t ivar_294;
                                      ivar_294 = (uint8_t)30;
                                      ivar_292 = (ivar_1 == ivar_294);
                                      if (ivar_292){                               
                                       result = (ltedfapeg__prepeg_adt_t)ltedfapeg__failure();
                                       if (result != NULL) result->count++;
} else {
                                      
                                       result = (ltedfapeg__prepeg_adt_t)ltedfapeg__epsilon();
                                       if (result != NULL) result->count++;
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};
};

        
        return result;
}

ltedfapegtest_array_0_t ltedfapegtest__djsontable(void){
        ltedfapegtest_array_0_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    ltedfapegtest_funtype_1_t ivar_6;
        ltedfapegtest_closure_2_t cl6162;
        cl6162 = new_ltedfapegtest_closure_2();
        ivar_6 = (ltedfapegtest_funtype_1_t)cl6162;
        //copying to ltedfapegtest_array_0 from ltedfapegtest_funtype_1;
        uint32_t tmp6163;
        tmp6163 = (uint32_t)255;
        result = new_ltedfapegtest_array_0(tmp6163);
        for (uint32_t index_7 = 0; index_7 < tmp6163; index_7++){
             result->elems[index_7] = (ltedfapeg__prepeg_adt_t)ivar_6->ftbl->fptr(ivar_6, index_7);
             if (result->elems[index_7] != NULL) result->elems[index_7]->count++;
        };
        release_ltedfapegtest_funtype_1(ivar_6);

        defined = true;};
        
        return result;
}

ltedfapegtest_array_3_t ltedfapegtest__empty(uint8_t ivar_1){
        ltedfapegtest_array_3_t  result;
        uint32_t size6167;
        //copying to uint32 from uint8;
        size6167 = (uint32_t)ivar_1;
        size6167 += 0;
        result = new_ltedfapegtest_array_3(size6167);
        uint8_t ivar_2;
        for (uint32_t index6166 = 0; index6166 < size6167; index6166++){
             ivar_2 = (uint8_t)index6166;
             result->elems[index6166] = (uint8_t)32;
        };

        
        return result;
}

ltedfapegtest_funtype_5_t ltedfapegtest__cat(uint8_t ivar_1, uint8_t ivar_2){
        ltedfapegtest_funtype_5_t  result;
        ltedfapegtest_closure_6_t cl6189;
        cl6189 = new_ltedfapegtest_closure_6();
        cl6189->fvar_1 = (uint8_t)ivar_2;
        cl6189->fvar_2 = (uint8_t)ivar_1;
        result = (ltedfapegtest_funtype_5_t)cl6189;

        
        return result;
}

uint8_t ltedfapegtest__tok0(uint8_t ivar_1){
        uint8_t  result;
        bool_t ivar_2;
        uint8_t ivar_4;
        ivar_4 = (uint8_t)0;
        ivar_2 = (ivar_1 == ivar_4);
        if (ivar_2){ 
             result = (uint8_t)39;
} else {
        
             bool_t ivar_6;
             uint8_t ivar_8;
             ivar_8 = (uint8_t)1;
             ivar_6 = (ivar_1 == ivar_8);
             if (ivar_6){  
           result = (uint8_t)116;
} else {
             
           bool_t ivar_10;
           uint8_t ivar_12;
           ivar_12 = (uint8_t)2;
           ivar_10 = (ivar_1 == ivar_12);
           if (ivar_10){   
           result = (uint8_t)111;
} else {
           
           bool_t ivar_14;
           uint8_t ivar_16;
           ivar_16 = (uint8_t)3;
           ivar_14 = (ivar_1 == ivar_16);
           if (ivar_14){    
            result = (uint8_t)107;
} else {
           
            bool_t ivar_18;
            uint8_t ivar_20;
            ivar_20 = (uint8_t)4;
            ivar_18 = (ivar_1 == ivar_20);
            if (ivar_18){     
             result = (uint8_t)101;
} else {
            
             bool_t ivar_22;
             uint8_t ivar_24;
             ivar_24 = (uint8_t)5;
             ivar_22 = (ivar_1 == ivar_24);
             if (ivar_22){      
              result = (uint8_t)110;
} else {
             
              result = (uint8_t)39;
};
};
};
};
};
};

        
        return result;
}

uint8_t ltedfapegtest__tok1(uint8_t ivar_1){
        uint8_t  result;
        bool_t ivar_2;
        uint8_t ivar_4;
        ivar_4 = (uint8_t)0;
        ivar_2 = (ivar_1 == ivar_4);
        if (ivar_2){ 
             result = (uint8_t)39;
} else {
        
             bool_t ivar_6;
             uint8_t ivar_8;
             ivar_8 = (uint8_t)1;
             ivar_6 = (ivar_1 == ivar_8);
             if (ivar_6){  
           result = (uint8_t)116;
} else {
             
           bool_t ivar_10;
           uint8_t ivar_12;
           ivar_12 = (uint8_t)2;
           ivar_10 = (ivar_1 == ivar_12);
           if (ivar_10){   
           result = (uint8_t)111;
} else {
           
           bool_t ivar_14;
           uint8_t ivar_16;
           ivar_16 = (uint8_t)3;
           ivar_14 = (ivar_1 == ivar_16);
           if (ivar_14){    
            result = (uint8_t)107;
} else {
           
            bool_t ivar_18;
            uint8_t ivar_20;
            ivar_20 = (uint8_t)4;
            ivar_18 = (ivar_1 == ivar_20);
            if (ivar_18){     
             result = (uint8_t)101;
} else {
            
             bool_t ivar_22;
             uint8_t ivar_24;
             ivar_24 = (uint8_t)5;
             ivar_22 = (ivar_1 == ivar_24);
             if (ivar_22){      
              result = (uint8_t)110;
} else {
             
              bool_t ivar_26;
              uint8_t ivar_28;
              ivar_28 = (uint8_t)6;
              ivar_26 = (ivar_1 == ivar_28);
              if (ivar_26){       
               result = (uint8_t)92;
} else {
              
               bool_t ivar_30;
               uint8_t ivar_32;
               ivar_32 = (uint8_t)7;
               ivar_30 = (ivar_1 == ivar_32);
               if (ivar_30){        
                result = (uint8_t)39;
} else {
               
                result = (uint8_t)39;
};
};
};
};
};
};
};
};

        
        return result;
}

uint8_t ltedfapegtest__emptydict(uint8_t ivar_1){
        uint8_t  result;
        bool_t ivar_2;
        uint8_t ivar_4;
        ivar_4 = (uint8_t)0;
        ivar_2 = (ivar_1 == ivar_4);
        if (ivar_2){ 
             result = (uint8_t)123;
} else {
        
             bool_t ivar_6;
             uint8_t ivar_8;
             ivar_8 = (uint8_t)1;
             ivar_6 = (ivar_1 == ivar_8);
             if (ivar_6){  
           result = (uint8_t)32;
} else {
             
           bool_t ivar_10;
           uint8_t ivar_12;
           ivar_12 = (uint8_t)2;
           ivar_10 = (ivar_1 == ivar_12);
           if (ivar_10){   
           result = (uint8_t)32;
} else {
           
           bool_t ivar_14;
           uint8_t ivar_16;
           ivar_16 = (uint8_t)3;
           ivar_14 = (ivar_1 == ivar_16);
           if (ivar_14){    
            result = (uint8_t)32;
} else {
           
            bool_t ivar_18;
            uint8_t ivar_20;
            ivar_20 = (uint8_t)4;
            ivar_18 = (ivar_1 == ivar_20);
            if (ivar_18){     
             result = (uint8_t)32;
} else {
            
             bool_t ivar_22;
             uint8_t ivar_24;
             ivar_24 = (uint8_t)5;
             ivar_22 = (ivar_1 == ivar_24);
             if (ivar_22){      
              result = (uint8_t)32;
} else {
             
              bool_t ivar_26;
              uint8_t ivar_28;
              ivar_28 = (uint8_t)6;
              ivar_26 = (ivar_1 == ivar_28);
              if (ivar_26){       
               result = (uint8_t)32;
} else {
              
               bool_t ivar_30;
               uint8_t ivar_32;
               ivar_32 = (uint8_t)7;
               ivar_30 = (ivar_1 == ivar_32);
               if (ivar_30){        
                result = (uint8_t)125;
} else {
               
                result = (uint8_t)32;
};
};
};
};
};
};
};
};

        
        return result;
}

uint8_t ltedfapegtest__obrace(uint8_t ivar_1){
        uint8_t  result;
        bool_t ivar_2;
        uint8_t ivar_4;
        ivar_4 = (uint8_t)0;
        ivar_2 = (ivar_1 == ivar_4);
        if (ivar_2){ 
             result = (uint8_t)123;
} else {
        
             bool_t ivar_6;
             uint8_t ivar_8;
             ivar_8 = (uint8_t)1;
             ivar_6 = (ivar_1 == ivar_8);
             if (ivar_6){  
           result = (uint8_t)32;
} else {
             
           result = (uint8_t)32;
};
};

        
        return result;
}

uint8_t ltedfapegtest__cbrace(uint8_t ivar_1){
        uint8_t  result;
        bool_t ivar_2;
        uint8_t ivar_4;
        ivar_4 = (uint8_t)0;
        ivar_2 = (ivar_1 == ivar_4);
        if (ivar_2){ 
             result = (uint8_t)125;
} else {
        
             bool_t ivar_6;
             uint8_t ivar_8;
             ivar_8 = (uint8_t)1;
             ivar_6 = (ivar_1 == ivar_8);
             if (ivar_6){  
           result = (uint8_t)32;
} else {
             
           result = (uint8_t)32;
};
};

        
        return result;
}

uint8_t ltedfapegtest__colon(uint8_t ivar_1){
        uint8_t  result;
        bool_t ivar_2;
        uint8_t ivar_4;
        ivar_4 = (uint8_t)0;
        ivar_2 = (ivar_1 == ivar_4);
        if (ivar_2){ 
             result = (uint8_t)58;
} else {
        
             bool_t ivar_6;
             uint8_t ivar_8;
             ivar_8 = (uint8_t)1;
             ivar_6 = (ivar_1 == ivar_8);
             if (ivar_6){  
           result = (uint8_t)32;
} else {
             
           result = (uint8_t)32;
};
};

        
        return result;
}

ltedfapegtest_array_3_t ltedfapegtest__emptydict2(void){
        ltedfapegtest_array_3_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    ltedfapegtest_funtype_5_t ivar_7;
        uint8_t ivar_12;
        ivar_12 = (uint8_t)3;
        uint8_t ivar_13;
        ivar_13 = (uint8_t)3;
        ivar_7 = (ltedfapegtest_funtype_5_t)ltedfapegtest__cat((uint8_t)ivar_12, (uint8_t)ivar_13);
        ltedfapegtest_array_3_t ivar_29;
        ivar_29 = new_ltedfapegtest_array_3(3);
        uint8_t ivar_3;
        for (uint32_t index6195 = 0; index6195 < 3; index6195++){
             ivar_3 = (uint8_t)index6195;
             ivar_29->elems[index6195] = (uint8_t)ltedfapegtest__obrace((uint8_t)ivar_3);
        };
        ltedfapegtest_array_3_t ivar_30;
        ivar_30 = new_ltedfapegtest_array_3(3);
        uint8_t ivar_4;
        for (uint32_t index6196 = 0; index6196 < 3; index6196++){
             ivar_4 = (uint8_t)index6196;
             ivar_30->elems[index6196] = (uint8_t)ltedfapegtest__cbrace((uint8_t)ivar_4);
        };
        result = (ltedfapegtest_array_3_t)ivar_7->ftbl->mptr(ivar_7, ivar_29, ivar_30);
        ivar_7->ftbl->rptr(ivar_7);

        defined = true;};
        
        return result;
}

ltedfapegtest_array_3_t ltedfapegtest__dict1(void){
        ltedfapegtest_array_3_t  static  result;

        static bool_t defined = false;
        if (!defined){
                    ltedfapegtest_funtype_5_t ivar_93;
        uint8_t ivar_98;
        ivar_98 = (uint8_t)3;
        uint8_t ivar_99;
        ivar_99 = (uint8_t)19;
        ivar_93 = (ltedfapegtest_funtype_5_t)ltedfapegtest__cat((uint8_t)ivar_98, (uint8_t)ivar_99);
        ltedfapegtest_array_3_t ivar_115;
        ivar_115 = new_ltedfapegtest_array_3(3);
        uint8_t ivar_3;
        for (uint32_t index6217 = 0; index6217 < 3; index6217++){
             ivar_3 = (uint8_t)index6217;
             ivar_115->elems[index6217] = (uint8_t)ltedfapegtest__obrace((uint8_t)ivar_3);
        };
        ltedfapegtest_array_3_t ivar_116;
        ltedfapegtest_funtype_5_t ivar_67;
        uint8_t ivar_72;
        ivar_72 = (uint8_t)7;
        uint8_t ivar_73;
        ivar_73 = (uint8_t)12;
        ivar_67 = (ltedfapegtest_funtype_5_t)ltedfapegtest__cat((uint8_t)ivar_72, (uint8_t)ivar_73);
        ltedfapegtest_array_3_t ivar_89;
        ivar_89 = new_ltedfapegtest_array_3(7);
        uint8_t ivar_6;
        for (uint32_t index6218 = 0; index6218 < 7; index6218++){
             ivar_6 = (uint8_t)index6218;
             ivar_89->elems[index6218] = (uint8_t)ltedfapegtest__tok0((uint8_t)ivar_6);
        };
        ltedfapegtest_array_3_t ivar_90;
        ltedfapegtest_funtype_5_t ivar_41;
        uint8_t ivar_46;
        ivar_46 = (uint8_t)3;
        uint8_t ivar_47;
        ivar_47 = (uint8_t)9;
        ivar_41 = (ltedfapegtest_funtype_5_t)ltedfapegtest__cat((uint8_t)ivar_46, (uint8_t)ivar_47);
        ltedfapegtest_array_3_t ivar_63;
        ivar_63 = new_ltedfapegtest_array_3(3);
        uint8_t ivar_9;
        for (uint32_t index6219 = 0; index6219 < 3; index6219++){
             ivar_9 = (uint8_t)index6219;
             ivar_63->elems[index6219] = (uint8_t)ltedfapegtest__colon((uint8_t)ivar_9);
        };
        ltedfapegtest_array_3_t ivar_64;
        ltedfapegtest_funtype_5_t ivar_15;
        uint8_t ivar_20;
        ivar_20 = (uint8_t)6;
        uint8_t ivar_21;
        ivar_21 = (uint8_t)3;
        ivar_15 = (ltedfapegtest_funtype_5_t)ltedfapegtest__cat((uint8_t)ivar_20, (uint8_t)ivar_21);
        ltedfapegtest_array_3_t ivar_37;
        ivar_37 = (ltedfapegtest_array_3_t)ltedfapegtest__emptydict2();
        if (ivar_37 != NULL) ivar_37->count++;
        ltedfapegtest_array_3_t ivar_38;
        ivar_38 = new_ltedfapegtest_array_3(3);
        uint8_t ivar_12;
        for (uint32_t index6220 = 0; index6220 < 3; index6220++){
             ivar_12 = (uint8_t)index6220;
             ivar_38->elems[index6220] = (uint8_t)ltedfapegtest__cbrace((uint8_t)ivar_12);
        };
        ivar_64 = (ltedfapegtest_array_3_t)ivar_15->ftbl->mptr(ivar_15, ivar_37, ivar_38);
        ivar_15->ftbl->rptr(ivar_15);
        ivar_90 = (ltedfapegtest_array_3_t)ivar_41->ftbl->mptr(ivar_41, ivar_63, ivar_64);
        ivar_41->ftbl->rptr(ivar_41);
        ivar_116 = (ltedfapegtest_array_3_t)ivar_67->ftbl->mptr(ivar_67, ivar_89, ivar_90);
        ivar_67->ftbl->rptr(ivar_67);
        result = (ltedfapegtest_array_3_t)ivar_93->ftbl->mptr(ivar_93, ivar_115, ivar_116);
        ivar_93->ftbl->rptr(ivar_93);

        defined = true;};
        
        return result;
}

ltedfapeg__ent_adt_t ltedfapegtest__iparse(uint8_t ivar_1, ltedfapeg__lang_spec_t ivar_2, ltedfapegtest_array_3_t ivar_3, uint8_t ivar_4, uint8_t ivar_5){
        ltedfapeg__ent_adt_t  result;
        /* pend */ ltedfapegtest_funtype_7_t ivar_6;
        ltedfapegtest_closure_8_t cl6260;
        cl6260 = new_ltedfapegtest_closure_8();
        ivar_6 = (ltedfapegtest_funtype_7_t)cl6260;
        ltedfapegtest_record_10_t ivar_79;
        uint8_t ivar_17;
        ivar_17 = (uint8_t)1;
        bool_t ivar_18;
        ivar_18 = (bool_t) false;
        ltedfapegtest_funtype_9_t ivar_46;
        ltedfapeg__ent_adt_t ivar_26;
        uint8_t ivar_33;
        ivar_33 = (uint8_t)0;
        uint32_t ivar_30;
        //copying to uint32 from uint8;
        ivar_30 = (uint32_t)ivar_33;
        uint8_t ivar_31;
        ivar_31 = (uint8_t)ltedfapeg__num_non_terminals();
        ivar_26 = (ltedfapeg__ent_adt_t)ltedfapeg__push((uint32_t)ivar_30, (uint8_t)ivar_31);
        ltedfapegtest_funtype_9_t ivar_34;
        ltedfapegtest_closure_11_t cl6261;
        cl6261 = new_ltedfapegtest_closure_11();
        cl6261->fvar_1 = (uint8_t)ivar_1;
        cl6261->fvar_2 = (ltedfapegtest_funtype_7_t)ivar_6;
        if (cl6261->fvar_2 != NULL) cl6261->fvar_2->count++;
        release_ltedfapegtest_funtype_7(ivar_6);
        ivar_34 = (ltedfapegtest_funtype_9_t)cl6261;
        ltedfapegtest_funtype_7_t ivar_35;
        ivar_35 = (ltedfapegtest_funtype_7_t)ivar_34->ftbl->fptr(ivar_34, ivar_4);
        ltedfapegtest_funtype_9_t ivar_42;
        ltedfapegtest_funtype_7_t ivar_44;
        ivar_44 = NULL;
        ivar_42 = (ltedfapegtest_funtype_9_t)update_ltedfapegtest_funtype_9(ivar_34, ivar_4, ivar_44);
        if (ivar_44 != NULL) ivar_44->count--;
        ltedfapegtest_funtype_7_t ivar_43;
        ltedfapegtest_funtype_7_t ivar_38;
        ltedfapeg__ent_adt_t ivar_40;
        ivar_40 = NULL;
        ivar_38 = (ltedfapegtest_funtype_7_t)update_ltedfapegtest_funtype_7(ivar_35, ivar_5, ivar_40);
        if (ivar_40 != NULL) ivar_40->count--;
        ivar_43 = (ltedfapegtest_funtype_7_t)update_ltedfapegtest_funtype_7(ivar_38, ivar_5, ivar_26);
        if (ivar_26 != NULL) ivar_26->count--;
        ivar_46 = (ltedfapegtest_funtype_9_t)update_ltedfapegtest_funtype_9(ivar_42, ivar_4, ivar_43);
        if (ivar_43 != NULL) ivar_43->count--;
        ltedfapeg__ent_adt_t ivar_52;
        uint32_t ivar_50;
        //copying to uint32 from uint8;
        ivar_50 = (uint32_t)ivar_4;
        ivar_52 = (ltedfapeg__ent_adt_t)ltedfapeg__push((uint32_t)ivar_50, (uint8_t)ivar_5);
        ltedfapegtest_record_10_t tmp6262 = new_ltedfapegtest_record_10();;
        ivar_79 = (ltedfapegtest_record_10_t)tmp6262;
        tmp6262->depth = (uint8_t)ivar_17;
        tmp6262->lflag = (bool_t)ivar_18;
        tmp6262->scaf = (ltedfapegtest_funtype_9_t)ivar_46;
        tmp6262->stack = (ltedfapeg__ent_adt_t)ivar_52;
        /* St */ ltedfapegtest_record_14_t ivar_11;
        //copying to ltedfapegtest_record_14 from ltedfapegtest_record_10;
        {
         ivar_11 = new_ltedfapegtest_record_14();
         uint32_t tmp6263;
         //copying to uint32 from uint8;
         tmp6263 = (uint32_t)ivar_1;
         tmp6263 += 1;
         ivar_11->scaf = new_ltedfapegtest_array_13(tmp6263);
         for (uint32_t index_80 = 0; index_80 < tmp6263; index_80++){
                 uint32_t tmp6264;
                 tmp6264 = (uint32_t)255;
                 ivar_11->scaf->elems[index_80] = new_ltedfapegtest_array_12(tmp6264);
                 for (uint32_t index_81 = 0; index_81 < tmp6264; index_81++){
                  ivar_11->scaf->elems[index_80]->elems[index_81] = (ltedfapeg__ent_adt_t)ivar_79->scaf->ftbl->fptr(ivar_79->scaf, index_80)->ftbl->fptr(ivar_79->scaf->ftbl->fptr(ivar_79->scaf, index_80), index_81);
                  if (ivar_11->scaf->elems[index_80]->elems[index_81] != NULL) ivar_11->scaf->elems[index_80]->elems[index_81]->count++;
                 };
         };
         ltedfapegtest_array_13_t scaf6224;
         scaf6224 = (ltedfapegtest_array_13_t)ivar_11->scaf;
         ivar_11->depth = (uint64_t)ivar_79->depth;
         uint64_t depth6225;
         depth6225 = (uint64_t)ivar_11->depth;
         ivar_11->stack = (ltedfapeg__ent_adt_t)ivar_79->stack;
         if (ivar_11->stack != NULL) ivar_11->stack->count++;
         ltedfapeg__ent_adt_t stack6226;
         stack6226 = (ltedfapeg__ent_adt_t)ivar_11->stack;
         ivar_11->lflag = (bool_t)ivar_79->lflag;
         bool_t lflag6227;
         lflag6227 = (bool_t)ivar_11->lflag;
        };
        release_ltedfapegtest_record_10(ivar_79);
        ltedfapegtest_array_12_t ivar_55;
        ltedfapegtest_array_13_t ivar_59;
        ltedfapegtest_record_14_t ivar_75;
        uint32_t ivar_68;
        //copying to uint32 from uint8;
        ivar_68 = (uint32_t)ivar_1;
        uint32_t ivar_71;
        //copying to uint32 from uint8;
        ivar_71 = (uint32_t)ivar_4;
        ivar_75 = (ltedfapegtest_record_14_t)ltedfapeg__parse((uint32_t)ivar_68, (ltedfapeg__lang_spec_t)ivar_2, (ltedfapeg_array_82_t)ivar_3, (uint32_t)ivar_71, (uint8_t)ivar_5, (ltedfapeg_record_100_t)ivar_11);
        ivar_59 = (ltedfapegtest_array_13_t)ivar_75->scaf;
        ivar_59->count++;
        release_ltedfapegtest_record_14(ivar_75);
        ivar_55 = (ltedfapegtest_array_12_t)ivar_59->elems[ivar_4];
        ivar_55->count++;
        release_ltedfapegtest_array_13(ivar_59);
        result = (ltedfapeg__ent_adt_t)ivar_55->elems[ivar_5];
        result->count++;
        release_ltedfapegtest_array_12(ivar_55);

        
        return result;
}

bool_t ltedfapegtest__jsonreadfile(bytestrings__bytestring_t ivar_1){
        bool_t  result;
        /* lf */ file__lifted_file_adt_t ivar_2;
        ivar_2 = (file__lifted_file_adt_t)file__open((bytestrings__bytestring_t)ivar_1);
        bool_t ivar_6;
        ivar_2->count++;
        ivar_6 = (bool_t)r_file__passp((file__lifted_file_adt_t)ivar_2);
        if (ivar_6){ 
             /* f */ file__file_t ivar_10;
             ivar_10 = (file__file_t)file__lifted_file_adt_contents((file__lifted_file_adt_t)ivar_2);
             uint32_t ivar_37;
             ivar_10->count++;
             ivar_37 = (uint32_t)file__file_size((file__file_t)ivar_10);
             result = (bool_t) true;
} else {
        
             release_file__lifted_file_adt(ivar_2);
             result = (bool_t) false;
};

        
        return result;
}

bool_t ltedfapegtest__jsonreadfileinit(bytestrings__bytestring_t ivar_1){
        bool_t  result;
        /* lf */ file__lifted_file_adt_t ivar_2;
        ivar_2 = (file__lifted_file_adt_t)file__open((bytestrings__bytestring_t)ivar_1);
        bool_t ivar_6;
        ivar_2->count++;
        ivar_6 = (bool_t)r_file__passp((file__lifted_file_adt_t)ivar_2);
        if (ivar_6){ 
             /* f */ file__file_t ivar_10;
             ivar_10 = (file__file_t)file__lifted_file_adt_contents((file__lifted_file_adt_t)ivar_2);
             uint32_t ivar_87;
             ivar_10->count++;
             ivar_87 = (uint32_t)file__file_size((file__file_t)ivar_10);
             /* pend */ ltedfapegtest_funtype_7_t ivar_37;
             ltedfapegtest_closure_15_t cl6296;
             cl6296 = new_ltedfapegtest_closure_15();
             ivar_37 = (ltedfapegtest_funtype_7_t)cl6296;
             ltedfapegtest_record_17_t ivar_86;
             uint8_t ivar_48;
             ivar_48 = (uint8_t)1;
             bool_t ivar_49;
             ivar_49 = (bool_t) false;
             ltedfapegtest_funtype_16_t ivar_77;
             ltedfapeg__ent_adt_t ivar_57;
             uint8_t ivar_64;
             ivar_64 = (uint8_t)0;
             uint32_t ivar_61;
             //copying to uint32 from uint8;
             ivar_61 = (uint32_t)ivar_64;
             uint8_t ivar_62;
             ivar_62 = (uint8_t)ltedfapeg__num_non_terminals();
             ivar_57 = (ltedfapeg__ent_adt_t)ltedfapeg__push((uint32_t)ivar_61, (uint8_t)ivar_62);
             ltedfapegtest_funtype_16_t ivar_65;
             ltedfapegtest_closure_18_t cl6297;
             cl6297 = new_ltedfapegtest_closure_18();
             cl6297->fvar_1 = (uint32_t)ivar_87;
             cl6297->fvar_2 = (ltedfapegtest_funtype_7_t)ivar_37;
             if (cl6297->fvar_2 != NULL) cl6297->fvar_2->count++;
             release_ltedfapegtest_funtype_7(ivar_37);
             ivar_65 = (ltedfapegtest_funtype_16_t)cl6297;
             uint32_t ivar_72;
             ivar_72 = (uint32_t)0;
             ltedfapegtest_funtype_7_t ivar_66;
             ivar_66 = (ltedfapegtest_funtype_7_t)ivar_65->ftbl->fptr(ivar_65, ivar_72);
             ltedfapegtest_funtype_16_t ivar_73;
             ltedfapegtest_funtype_7_t ivar_75;
             ivar_75 = NULL;
             ivar_73 = (ltedfapegtest_funtype_16_t)update_ltedfapegtest_funtype_16(ivar_65, ivar_72, ivar_75);
             if (ivar_75 != NULL) ivar_75->count--;
             ltedfapegtest_funtype_7_t ivar_74;
             uint8_t ivar_68;
             ivar_68 = (uint8_t)0;
             ltedfapegtest_funtype_7_t ivar_69;
             ltedfapeg__ent_adt_t ivar_71;
             ivar_71 = NULL;
             ivar_69 = (ltedfapegtest_funtype_7_t)update_ltedfapegtest_funtype_7(ivar_66, ivar_68, ivar_71);
             if (ivar_71 != NULL) ivar_71->count--;
             ivar_74 = (ltedfapegtest_funtype_7_t)update_ltedfapegtest_funtype_7(ivar_69, ivar_68, ivar_57);
             if (ivar_57 != NULL) ivar_57->count--;
             ivar_77 = (ltedfapegtest_funtype_16_t)update_ltedfapegtest_funtype_16(ivar_73, ivar_72, ivar_74);
             if (ivar_74 != NULL) ivar_74->count--;
             ltedfapeg__ent_adt_t ivar_85;
             uint8_t ivar_84;
             ivar_84 = (uint8_t)0;
             uint32_t ivar_81;
             //copying to uint32 from uint8;
             ivar_81 = (uint32_t)ivar_84;
             uint8_t ivar_82;
             ivar_82 = (uint8_t)0;
             ivar_85 = (ltedfapeg__ent_adt_t)ltedfapeg__push((uint32_t)ivar_81, (uint8_t)ivar_82);
             ltedfapegtest_record_17_t tmp6298 = new_ltedfapegtest_record_17();;
             ivar_86 = (ltedfapegtest_record_17_t)tmp6298;
             tmp6298->depth = (uint8_t)ivar_48;
             tmp6298->lflag = (bool_t)ivar_49;
             tmp6298->scaf = (ltedfapegtest_funtype_16_t)ivar_77;
             tmp6298->stack = (ltedfapeg__ent_adt_t)ivar_85;
             result = (bool_t) true;
} else {
        
             release_file__lifted_file_adt(ivar_2);
             result = (bool_t) false;
};

        
        return result;
}

bool_t ltedfapegtest__jsonparsecheckfile(bytestrings__bytestring_t ivar_1){
        bool_t  result;
        /* lf */ file__lifted_file_adt_t ivar_2;
        ivar_2 = (file__lifted_file_adt_t)file__open((bytestrings__bytestring_t)ivar_1);
        bool_t ivar_6;
        ivar_2->count++;
        ivar_6 = (bool_t)r_file__passp((file__lifted_file_adt_t)ivar_2);
        if (ivar_6){ 
             /* f */ file__file_t ivar_11;
             ivar_11 = (file__file_t)file__lifted_file_adt_contents((file__lifted_file_adt_t)ivar_2);
             uint32_t ivar_198;
             ivar_11->count++;
             ivar_198 = (uint32_t)file__file_size((file__file_t)ivar_11);
             /* fstr */ bytestrings__bytestring_t ivar_19;
             uint8_t ivar_37;
             ivar_37 = (uint8_t)0;
             uint32_t ivar_25;
             //copying to uint32 from uint8;
             ivar_25 = (uint32_t)ivar_37;
             ivar_11->count++;
             ivar_19 = (bytestrings__bytestring_t)file__getbytestring((file__file_t)ivar_11, (uint32_t)ivar_25, (uint32_t)ivar_198);
             /* pend */ ltedfapegtest_funtype_7_t ivar_38;
             ltedfapegtest_closure_19_t cl6387;
             cl6387 = new_ltedfapegtest_closure_19();
             ivar_38 = (ltedfapegtest_funtype_7_t)cl6387;
             ltedfapegtest_record_17_t ivar_197;
             uint8_t ivar_49;
             ivar_49 = (uint8_t)1;
             bool_t ivar_50;
             ivar_50 = (bool_t) false;
             ltedfapegtest_funtype_16_t ivar_78;
             ltedfapeg__ent_adt_t ivar_58;
             uint8_t ivar_65;
             ivar_65 = (uint8_t)0;
             uint32_t ivar_62;
             //copying to uint32 from uint8;
             ivar_62 = (uint32_t)ivar_65;
             uint8_t ivar_63;
             ivar_63 = (uint8_t)ltedfapeg__num_non_terminals();
             ivar_58 = (ltedfapeg__ent_adt_t)ltedfapeg__push((uint32_t)ivar_62, (uint8_t)ivar_63);
             ltedfapegtest_funtype_16_t ivar_66;
             ltedfapegtest_closure_20_t cl6388;
             cl6388 = new_ltedfapegtest_closure_20();
             cl6388->fvar_1 = (uint32_t)ivar_198;
             cl6388->fvar_2 = (ltedfapegtest_funtype_7_t)ivar_38;
             if (cl6388->fvar_2 != NULL) cl6388->fvar_2->count++;
             release_ltedfapegtest_funtype_7(ivar_38);
             ivar_66 = (ltedfapegtest_funtype_16_t)cl6388;
             uint32_t ivar_73;
             ivar_73 = (uint32_t)0;
             ltedfapegtest_funtype_7_t ivar_67;
             ivar_67 = (ltedfapegtest_funtype_7_t)ivar_66->ftbl->fptr(ivar_66, ivar_73);
             ltedfapegtest_funtype_16_t ivar_74;
             ltedfapegtest_funtype_7_t ivar_76;
             ivar_76 = NULL;
             ivar_74 = (ltedfapegtest_funtype_16_t)update_ltedfapegtest_funtype_16(ivar_66, ivar_73, ivar_76);
             if (ivar_76 != NULL) ivar_76->count--;
             ltedfapegtest_funtype_7_t ivar_75;
             uint8_t ivar_69;
             ivar_69 = (uint8_t)0;
             ltedfapegtest_funtype_7_t ivar_70;
             ltedfapeg__ent_adt_t ivar_72;
             ivar_72 = NULL;
             ivar_70 = (ltedfapegtest_funtype_7_t)update_ltedfapegtest_funtype_7(ivar_67, ivar_69, ivar_72);
             if (ivar_72 != NULL) ivar_72->count--;
             ivar_75 = (ltedfapegtest_funtype_7_t)update_ltedfapegtest_funtype_7(ivar_70, ivar_69, ivar_58);
             if (ivar_58 != NULL) ivar_58->count--;
             ivar_78 = (ltedfapegtest_funtype_16_t)update_ltedfapegtest_funtype_16(ivar_74, ivar_73, ivar_75);
             if (ivar_75 != NULL) ivar_75->count--;
             ltedfapeg__ent_adt_t ivar_86;
             uint8_t ivar_85;
             ivar_85 = (uint8_t)0;
             uint32_t ivar_82;
             //copying to uint32 from uint8;
             ivar_82 = (uint32_t)ivar_85;
             uint8_t ivar_83;
             ivar_83 = (uint8_t)0;
             ivar_86 = (ltedfapeg__ent_adt_t)ltedfapeg__push((uint32_t)ivar_82, (uint8_t)ivar_83);
             ltedfapegtest_record_17_t tmp6389 = new_ltedfapegtest_record_17();;
             ivar_197 = (ltedfapegtest_record_17_t)tmp6389;
             tmp6389->depth = (uint8_t)ivar_49;
             tmp6389->lflag = (bool_t)ivar_50;
             tmp6389->scaf = (ltedfapegtest_funtype_16_t)ivar_78;
             tmp6389->stack = (ltedfapeg__ent_adt_t)ivar_86;
             /* St */ ltedfapegtest_record_14_t ivar_43;
             //copying to ltedfapegtest_record_14 from ltedfapegtest_record_17;
             {
          ivar_43 = new_ltedfapegtest_record_14();
          uint32_t tmp6390;
          //copying to uint32 from uint32;
          tmp6390 = (uint32_t)ivar_198;
          tmp6390 += 1;
          ivar_43->scaf = new_ltedfapegtest_array_13(tmp6390);
          for (uint32_t index_200 = 0; index_200 < tmp6390; index_200++){
                  uint32_t tmp6391;
                  tmp6391 = (uint32_t)255;
                  ivar_43->scaf->elems[index_200] = new_ltedfapegtest_array_12(tmp6391);
                  for (uint32_t index_201 = 0; index_201 < tmp6391; index_201++){
                   ivar_43->scaf->elems[index_200]->elems[index_201] = (ltedfapeg__ent_adt_t)ivar_197->scaf->ftbl->fptr(ivar_197->scaf, index_200)->ftbl->fptr(ivar_197->scaf->ftbl->fptr(ivar_197->scaf, index_200), index_201);
                   if (ivar_43->scaf->elems[index_200]->elems[index_201] != NULL) ivar_43->scaf->elems[index_200]->elems[index_201]->count++;
                  };
          };
          ltedfapegtest_array_13_t scaf6306;
          scaf6306 = (ltedfapegtest_array_13_t)ivar_43->scaf;
          ivar_43->depth = (uint64_t)ivar_197->depth;
          uint64_t depth6307;
          depth6307 = (uint64_t)ivar_43->depth;
          ivar_43->stack = (ltedfapeg__ent_adt_t)ivar_197->stack;
          if (ivar_43->stack != NULL) ivar_43->stack->count++;
          ltedfapeg__ent_adt_t stack6308;
          stack6308 = (ltedfapeg__ent_adt_t)ivar_43->stack;
          ivar_43->lflag = (bool_t)ivar_197->lflag;
          bool_t lflag6309;
          lflag6309 = (bool_t)ivar_43->lflag;
             };
             release_ltedfapegtest_record_17(ivar_197);
             /* endSt */ ltedfapegtest_record_14_t ivar_87;
             ltedfapegtest_funtype_1_t ivar_115;
             ltedfapegtest_closure_21_t cl6392;
             cl6392 = new_ltedfapegtest_closure_21();
             ivar_115 = (ltedfapegtest_funtype_1_t)cl6392;
             ltedfapeg__lang_spec_t ivar_106;
             //copying to ltedfapeg__lang_spec from ltedfapegtest_funtype_1;
             uint32_t tmp6393;
             tmp6393 = (uint32_t)255;
             ivar_106 = new_ltedfapegtest_array_0(tmp6393);
             for (uint32_t index_202 = 0; index_202 < tmp6393; index_202++){
           ivar_106->elems[index_202] = (ltedfapeg__prepeg_adt_t)ivar_115->ftbl->fptr(ivar_115, index_202);
           if (ivar_106->elems[index_202] != NULL) ivar_106->elems[index_202]->count++;
             };
             release_ltedfapegtest_funtype_1(ivar_115);
             ltedfapegtest_array_3_t ivar_107;
             ivar_107 = (ltedfapegtest_array_3_t)ivar_19->seq;
             ivar_107->count++;
             uint8_t ivar_114;
             ivar_114 = (uint8_t)0;
             uint32_t ivar_108;
             //copying to uint32 from uint8;
             ivar_108 = (uint32_t)ivar_114;
             uint8_t ivar_109;
             ivar_109 = (uint8_t)0;
             ivar_87 = (ltedfapegtest_record_14_t)ltedfapeg__parse((uint32_t)ivar_198, (ltedfapeg__lang_spec_t)ivar_106, (ltedfapeg_array_82_t)ivar_107, (uint32_t)ivar_108, (uint8_t)ivar_109, (ltedfapeg_record_100_t)ivar_43);
             bool_t ivar_116;
             ltedfapeg__ent_adt_t ivar_130;
             ltedfapegtest_array_12_t ivar_120;
             ltedfapegtest_array_13_t ivar_124;
             ivar_124 = (ltedfapegtest_array_13_t)ivar_87->scaf;
             ivar_124->count++;
             uint32_t ivar_127;
             ivar_127 = (uint32_t)0;
             ivar_120 = (ltedfapegtest_array_12_t)ivar_124->elems[ivar_127];
             ivar_120->count++;
             release_ltedfapegtest_array_13(ivar_124);
             uint8_t ivar_128;
             ivar_128 = (uint8_t)0;
             ivar_130 = (ltedfapeg__ent_adt_t)ivar_120->elems[ivar_128];
             ivar_130->count++;
             release_ltedfapegtest_array_12(ivar_120);
             ivar_116 = (bool_t)ltedfapegproof__defentp((ltedfapeg__ent_adt_t)ivar_130);
             if (ivar_116){  
           /* proof */ ltedfapegproof__parsetree_adt_t ivar_131;
           ltedfapegtest_funtype_23_t ivar_138;
           ltedfapegtest_funtype_1_t ivar_162;
           ltedfapegtest_closure_24_t cl6394;
           cl6394 = new_ltedfapegtest_closure_24();
           ivar_162 = (ltedfapegtest_funtype_1_t)cl6394;
           ltedfapeg__lang_spec_t ivar_155;
           //copying to ltedfapeg__lang_spec from ltedfapegtest_funtype_1;
           uint32_t tmp6395;
           tmp6395 = (uint32_t)255;
           ivar_155 = new_ltedfapegtest_array_0(tmp6395);
           for (uint32_t index_203 = 0; index_203 < tmp6395; index_203++){
           ivar_155->elems[index_203] = (ltedfapeg__prepeg_adt_t)ivar_162->ftbl->fptr(ivar_162, index_203);
           if (ivar_155->elems[index_203] != NULL) ivar_155->elems[index_203]->count++;
           };
           release_ltedfapegtest_funtype_1(ivar_162);
           ltedfapegtest_array_3_t ivar_156;
           ivar_156 = (ltedfapegtest_array_3_t)ivar_19->seq;
           ivar_156->count++;
           uint8_t ivar_161;
           ivar_161 = (uint8_t)0;
           uint32_t ivar_157;
           //copying to uint32 from uint8;
           ivar_157 = (uint32_t)ivar_161;
           uint8_t ivar_158;
           ivar_158 = (uint8_t)0;
           ivar_138 = (ltedfapegtest_funtype_23_t)ltedfapegproof__buildproof((uint32_t)ivar_198, (ltedfapeg__lang_spec_t)ivar_155, (ltedfapegproof_array_50_t)ivar_156, (uint32_t)ivar_157, (uint8_t)ivar_158);
           uint8_t ivar_164;
           ivar_164 = (uint8_t)0;
           uint8_t ivar_166;
           ivar_166 = (uint8_t)0;
           uint32_t ivar_165;
           //copying to uint32 from uint8;
           ivar_165 = (uint32_t)ivar_166;
           ivar_131 = (ltedfapegproof__parsetree_adt_t)ivar_138->ftbl->mptr(ivar_138, ivar_87, ivar_164, ivar_165);
           ivar_138->ftbl->rptr(ivar_138);
           ltedfapegtest_funtype_26_t ivar_173;
           uint32_t ivar_187;
           ivar_187 = (uint32_t)ivar_19->length;
           ltedfapegtest_funtype_1_t ivar_191;
           ltedfapegtest_closure_27_t cl6396;
           cl6396 = new_ltedfapegtest_closure_27();
           ivar_191 = (ltedfapegtest_funtype_1_t)cl6396;
           ltedfapeg__lang_spec_t ivar_188;
           //copying to ltedfapeg__lang_spec from ltedfapegtest_funtype_1;
           uint32_t tmp6397;
           tmp6397 = (uint32_t)255;
           ivar_188 = new_ltedfapegtest_array_0(tmp6397);
           for (uint32_t index_204 = 0; index_204 < tmp6397; index_204++){
           ivar_188->elems[index_204] = (ltedfapeg__prepeg_adt_t)ivar_191->ftbl->fptr(ivar_191, index_204);
           if (ivar_188->elems[index_204] != NULL) ivar_188->elems[index_204]->count++;
           };
           release_ltedfapegtest_funtype_1(ivar_191);
           ltedfapegtest_array_3_t ivar_189;
           ivar_189 = (ltedfapegtest_array_3_t)ivar_19->seq;
           ivar_189->count++;
           release_bytestrings__bytestring(ivar_19);
           ivar_173 = (ltedfapegtest_funtype_26_t)ltedfapegproof__good_parsetreep((uint32_t)ivar_187, (ltedfapeg__lang_spec_t)ivar_188, (ltedfapegproof_array_50_t)ivar_189);
           ltedfapegproof__qstack_adt_t ivar_192;
           ivar_192 = (ltedfapegproof__qstack_adt_t)ltedfapegproof__qempty();
           if (ivar_192 != NULL) ivar_192->count++;
           uint8_t ivar_193;
           ivar_193 = (uint8_t)0;
           uint8_t ivar_196;
           ivar_196 = (uint8_t)0;
           uint32_t ivar_194;
           //copying to uint32 from uint8;
           ivar_194 = (uint32_t)ivar_196;
           result = (bool_t)ivar_173->ftbl->mptr(ivar_173, ivar_192, ivar_193, ivar_194, ivar_131);
           ivar_173->ftbl->rptr(ivar_173);
} else {
             
           release_ltedfapegtest_record_14(ivar_87);
           release_bytestrings__bytestring(ivar_19);
           result = (bool_t) false;
};
} else {
        
             release_file__lifted_file_adt(ivar_2);
             result = (bool_t) false;
};

        
        return result;
}

ltedfapegproof__parsetree_adt_t ltedfapegtest__jsonparsefile(bytestrings__bytestring_t ivar_1){
        ltedfapegproof__parsetree_adt_t  result;
        /* lf */ file__lifted_file_adt_t ivar_2;
        ivar_2 = (file__lifted_file_adt_t)file__open((bytestrings__bytestring_t)ivar_1);
        bool_t ivar_6;
        ivar_2->count++;
        ivar_6 = (bool_t)r_file__passp((file__lifted_file_adt_t)ivar_2);
        if (ivar_6){ 
             /* f */ file__file_t ivar_10;
             ivar_10 = (file__file_t)file__lifted_file_adt_contents((file__lifted_file_adt_t)ivar_2);
             uint32_t ivar_149;
             ivar_10->count++;
             ivar_149 = (uint32_t)file__file_size((file__file_t)ivar_10);
             /* fstr */ bytestrings__bytestring_t ivar_18;
             uint8_t ivar_36;
             ivar_36 = (uint8_t)0;
             uint32_t ivar_24;
             //copying to uint32 from uint8;
             ivar_24 = (uint32_t)ivar_36;
             ivar_10->count++;
             ivar_18 = (bytestrings__bytestring_t)file__getbytestring((file__file_t)ivar_10, (uint32_t)ivar_24, (uint32_t)ivar_149);
             /* pend */ ltedfapegtest_funtype_7_t ivar_37;
             ltedfapegtest_closure_28_t cl6464;
             cl6464 = new_ltedfapegtest_closure_28();
             ivar_37 = (ltedfapegtest_funtype_7_t)cl6464;
             ltedfapegtest_record_17_t ivar_148;
             uint8_t ivar_48;
             ivar_48 = (uint8_t)1;
             bool_t ivar_49;
             ivar_49 = (bool_t) false;
             ltedfapegtest_funtype_16_t ivar_77;
             ltedfapeg__ent_adt_t ivar_57;
             uint8_t ivar_64;
             ivar_64 = (uint8_t)0;
             uint32_t ivar_61;
             //copying to uint32 from uint8;
             ivar_61 = (uint32_t)ivar_64;
             uint8_t ivar_62;
             ivar_62 = (uint8_t)ltedfapeg__num_non_terminals();
             ivar_57 = (ltedfapeg__ent_adt_t)ltedfapeg__push((uint32_t)ivar_61, (uint8_t)ivar_62);
             ltedfapegtest_funtype_16_t ivar_65;
             ltedfapegtest_closure_29_t cl6465;
             cl6465 = new_ltedfapegtest_closure_29();
             cl6465->fvar_1 = (uint32_t)ivar_149;
             cl6465->fvar_2 = (ltedfapegtest_funtype_7_t)ivar_37;
             if (cl6465->fvar_2 != NULL) cl6465->fvar_2->count++;
             release_ltedfapegtest_funtype_7(ivar_37);
             ivar_65 = (ltedfapegtest_funtype_16_t)cl6465;
             uint32_t ivar_72;
             ivar_72 = (uint32_t)0;
             ltedfapegtest_funtype_7_t ivar_66;
             ivar_66 = (ltedfapegtest_funtype_7_t)ivar_65->ftbl->fptr(ivar_65, ivar_72);
             ltedfapegtest_funtype_16_t ivar_73;
             ltedfapegtest_funtype_7_t ivar_75;
             ivar_75 = NULL;
             ivar_73 = (ltedfapegtest_funtype_16_t)update_ltedfapegtest_funtype_16(ivar_65, ivar_72, ivar_75);
             if (ivar_75 != NULL) ivar_75->count--;
             ltedfapegtest_funtype_7_t ivar_74;
             uint8_t ivar_68;
             ivar_68 = (uint8_t)0;
             ltedfapegtest_funtype_7_t ivar_69;
             ltedfapeg__ent_adt_t ivar_71;
             ivar_71 = NULL;
             ivar_69 = (ltedfapegtest_funtype_7_t)update_ltedfapegtest_funtype_7(ivar_66, ivar_68, ivar_71);
             if (ivar_71 != NULL) ivar_71->count--;
             ivar_74 = (ltedfapegtest_funtype_7_t)update_ltedfapegtest_funtype_7(ivar_69, ivar_68, ivar_57);
             if (ivar_57 != NULL) ivar_57->count--;
             ivar_77 = (ltedfapegtest_funtype_16_t)update_ltedfapegtest_funtype_16(ivar_73, ivar_72, ivar_74);
             if (ivar_74 != NULL) ivar_74->count--;
             ltedfapeg__ent_adt_t ivar_85;
             uint8_t ivar_84;
             ivar_84 = (uint8_t)0;
             uint32_t ivar_81;
             //copying to uint32 from uint8;
             ivar_81 = (uint32_t)ivar_84;
             uint8_t ivar_82;
             ivar_82 = (uint8_t)0;
             ivar_85 = (ltedfapeg__ent_adt_t)ltedfapeg__push((uint32_t)ivar_81, (uint8_t)ivar_82);
             ltedfapegtest_record_17_t tmp6466 = new_ltedfapegtest_record_17();;
             ivar_148 = (ltedfapegtest_record_17_t)tmp6466;
             tmp6466->depth = (uint8_t)ivar_48;
             tmp6466->lflag = (bool_t)ivar_49;
             tmp6466->scaf = (ltedfapegtest_funtype_16_t)ivar_77;
             tmp6466->stack = (ltedfapeg__ent_adt_t)ivar_85;
             /* St */ ltedfapegtest_record_14_t ivar_42;
             //copying to ltedfapegtest_record_14 from ltedfapegtest_record_17;
             {
          ivar_42 = new_ltedfapegtest_record_14();
          uint32_t tmp6467;
          //copying to uint32 from uint32;
          tmp6467 = (uint32_t)ivar_149;
          tmp6467 += 1;
          ivar_42->scaf = new_ltedfapegtest_array_13(tmp6467);
          for (uint32_t index_158 = 0; index_158 < tmp6467; index_158++){
                  uint32_t tmp6468;
                  tmp6468 = (uint32_t)255;
                  ivar_42->scaf->elems[index_158] = new_ltedfapegtest_array_12(tmp6468);
                  for (uint32_t index_159 = 0; index_159 < tmp6468; index_159++){
                   ivar_42->scaf->elems[index_158]->elems[index_159] = (ltedfapeg__ent_adt_t)ivar_148->scaf->ftbl->fptr(ivar_148->scaf, index_158)->ftbl->fptr(ivar_148->scaf->ftbl->fptr(ivar_148->scaf, index_158), index_159);
                   if (ivar_42->scaf->elems[index_158]->elems[index_159] != NULL) ivar_42->scaf->elems[index_158]->elems[index_159]->count++;
                  };
          };
          ltedfapegtest_array_13_t scaf6405;
          scaf6405 = (ltedfapegtest_array_13_t)ivar_42->scaf;
          ivar_42->depth = (uint64_t)ivar_148->depth;
          uint64_t depth6406;
          depth6406 = (uint64_t)ivar_42->depth;
          ivar_42->stack = (ltedfapeg__ent_adt_t)ivar_148->stack;
          if (ivar_42->stack != NULL) ivar_42->stack->count++;
          ltedfapeg__ent_adt_t stack6407;
          stack6407 = (ltedfapeg__ent_adt_t)ivar_42->stack;
          ivar_42->lflag = (bool_t)ivar_148->lflag;
          bool_t lflag6408;
          lflag6408 = (bool_t)ivar_42->lflag;
             };
             release_ltedfapegtest_record_17(ivar_148);
             ltedfapegtest_funtype_23_t ivar_119;
             ltedfapegtest_funtype_1_t ivar_143;
             ltedfapegtest_closure_30_t cl6469;
             cl6469 = new_ltedfapegtest_closure_30();
             ivar_143 = (ltedfapegtest_funtype_1_t)cl6469;
             ltedfapeg__lang_spec_t ivar_136;
             //copying to ltedfapeg__lang_spec from ltedfapegtest_funtype_1;
             uint32_t tmp6470;
             tmp6470 = (uint32_t)255;
             ivar_136 = new_ltedfapegtest_array_0(tmp6470);
             for (uint32_t index_160 = 0; index_160 < tmp6470; index_160++){
           ivar_136->elems[index_160] = (ltedfapeg__prepeg_adt_t)ivar_143->ftbl->fptr(ivar_143, index_160);
           if (ivar_136->elems[index_160] != NULL) ivar_136->elems[index_160]->count++;
             };
             release_ltedfapegtest_funtype_1(ivar_143);
             ltedfapegtest_array_3_t ivar_137;
             ivar_137 = (ltedfapegtest_array_3_t)ivar_18->seq;
             ivar_137->count++;
             uint8_t ivar_142;
             ivar_142 = (uint8_t)0;
             uint32_t ivar_138;
             //copying to uint32 from uint8;
             ivar_138 = (uint32_t)ivar_142;
             uint8_t ivar_139;
             ivar_139 = (uint8_t)0;
             ivar_119 = (ltedfapegtest_funtype_23_t)ltedfapegproof__buildproof((uint32_t)ivar_149, (ltedfapeg__lang_spec_t)ivar_136, (ltedfapegproof_array_50_t)ivar_137, (uint32_t)ivar_138, (uint8_t)ivar_139);
             ltedfapegtest_record_14_t ivar_144;
             ltedfapegtest_funtype_1_t ivar_114;
             ltedfapegtest_closure_31_t cl6471;
             cl6471 = new_ltedfapegtest_closure_31();
             ivar_114 = (ltedfapegtest_funtype_1_t)cl6471;
             ltedfapeg__lang_spec_t ivar_105;
             //copying to ltedfapeg__lang_spec from ltedfapegtest_funtype_1;
             uint32_t tmp6472;
             tmp6472 = (uint32_t)255;
             ivar_105 = new_ltedfapegtest_array_0(tmp6472);
             for (uint32_t index_161 = 0; index_161 < tmp6472; index_161++){
           ivar_105->elems[index_161] = (ltedfapeg__prepeg_adt_t)ivar_114->ftbl->fptr(ivar_114, index_161);
           if (ivar_105->elems[index_161] != NULL) ivar_105->elems[index_161]->count++;
             };
             release_ltedfapegtest_funtype_1(ivar_114);
             ltedfapegtest_array_3_t ivar_106;
             ivar_106 = (ltedfapegtest_array_3_t)ivar_18->seq;
             ivar_106->count++;
             release_bytestrings__bytestring(ivar_18);
             uint8_t ivar_113;
             ivar_113 = (uint8_t)0;
             uint32_t ivar_107;
             //copying to uint32 from uint8;
             ivar_107 = (uint32_t)ivar_113;
             uint8_t ivar_108;
             ivar_108 = (uint8_t)0;
             ivar_144 = (ltedfapegtest_record_14_t)ltedfapeg__parse((uint32_t)ivar_149, (ltedfapeg__lang_spec_t)ivar_105, (ltedfapeg_array_82_t)ivar_106, (uint32_t)ivar_107, (uint8_t)ivar_108, (ltedfapeg_record_100_t)ivar_42);
             uint8_t ivar_145;
             ivar_145 = (uint8_t)0;
             uint8_t ivar_147;
             ivar_147 = (uint8_t)0;
             uint32_t ivar_146;
             //copying to uint32 from uint8;
             ivar_146 = (uint32_t)ivar_147;
             result = (ltedfapegproof__parsetree_adt_t)ivar_119->ftbl->mptr(ivar_119, ivar_144, ivar_145, ivar_146);
             ivar_119->ftbl->rptr(ivar_119);
} else {
        
             release_file__lifted_file_adt(ivar_2);
             ltedfapeg__ent_adt_t ivar_157;
             uint8_t ivar_155;
             ivar_155 = (uint8_t)0;
             uint64_t ivar_153;
             //copying to uint64 from uint8;
             ivar_153 = (uint64_t)ivar_155;
             ivar_157 = (ltedfapeg__ent_adt_t)ltedfapeg__fail((uint64_t)ivar_153);
             result = (ltedfapegproof__parsetree_adt_t)ltedfapegproof__zero((ltedfapeg__ent_adt_t)ivar_157);
};

        
        return result;
}

ltedfapeg__ent_adt_t ltedfapegtest__jsonpureparsefile(bytestrings__bytestring_t ivar_1){
        ltedfapeg__ent_adt_t  result;
        /* lf */ file__lifted_file_adt_t ivar_2;
        ivar_2 = (file__lifted_file_adt_t)file__open((bytestrings__bytestring_t)ivar_1);
        bool_t ivar_6;
        ivar_2->count++;
        ivar_6 = (bool_t)r_file__passp((file__lifted_file_adt_t)ivar_2);
        if (ivar_6){ 
             /* f */ file__file_t ivar_10;
             ivar_10 = (file__file_t)file__lifted_file_adt_contents((file__lifted_file_adt_t)ivar_2);
             uint32_t ivar_118;
             ivar_10->count++;
             ivar_118 = (uint32_t)file__file_size((file__file_t)ivar_10);
             /* fstr */ bytestrings__bytestring_t ivar_18;
             uint8_t ivar_36;
             ivar_36 = (uint8_t)0;
             uint32_t ivar_24;
             //copying to uint32 from uint8;
             ivar_24 = (uint32_t)ivar_36;
             ivar_10->count++;
             ivar_18 = (bytestrings__bytestring_t)file__getbytestring((file__file_t)ivar_10, (uint32_t)ivar_24, (uint32_t)ivar_118);
             /* pend */ ltedfapegtest_funtype_7_t ivar_37;
             ltedfapegtest_closure_32_t cl6518;
             cl6518 = new_ltedfapegtest_closure_32();
             ivar_37 = (ltedfapegtest_funtype_7_t)cl6518;
             ltedfapegtest_record_17_t ivar_117;
             uint8_t ivar_48;
             ivar_48 = (uint8_t)1;
             bool_t ivar_49;
             ivar_49 = (bool_t) false;
             ltedfapegtest_funtype_16_t ivar_77;
             ltedfapeg__ent_adt_t ivar_57;
             uint8_t ivar_64;
             ivar_64 = (uint8_t)0;
             uint32_t ivar_61;
             //copying to uint32 from uint8;
             ivar_61 = (uint32_t)ivar_64;
             uint8_t ivar_62;
             ivar_62 = (uint8_t)ltedfapeg__num_non_terminals();
             ivar_57 = (ltedfapeg__ent_adt_t)ltedfapeg__push((uint32_t)ivar_61, (uint8_t)ivar_62);
             ltedfapegtest_funtype_16_t ivar_65;
             ltedfapegtest_closure_33_t cl6519;
             cl6519 = new_ltedfapegtest_closure_33();
             cl6519->fvar_1 = (uint32_t)ivar_118;
             cl6519->fvar_2 = (ltedfapegtest_funtype_7_t)ivar_37;
             if (cl6519->fvar_2 != NULL) cl6519->fvar_2->count++;
             release_ltedfapegtest_funtype_7(ivar_37);
             ivar_65 = (ltedfapegtest_funtype_16_t)cl6519;
             uint32_t ivar_72;
             ivar_72 = (uint32_t)0;
             ltedfapegtest_funtype_7_t ivar_66;
             ivar_66 = (ltedfapegtest_funtype_7_t)ivar_65->ftbl->fptr(ivar_65, ivar_72);
             ltedfapegtest_funtype_16_t ivar_73;
             ltedfapegtest_funtype_7_t ivar_75;
             ivar_75 = NULL;
             ivar_73 = (ltedfapegtest_funtype_16_t)update_ltedfapegtest_funtype_16(ivar_65, ivar_72, ivar_75);
             if (ivar_75 != NULL) ivar_75->count--;
             ltedfapegtest_funtype_7_t ivar_74;
             uint8_t ivar_68;
             ivar_68 = (uint8_t)0;
             ltedfapegtest_funtype_7_t ivar_69;
             ltedfapeg__ent_adt_t ivar_71;
             ivar_71 = NULL;
             ivar_69 = (ltedfapegtest_funtype_7_t)update_ltedfapegtest_funtype_7(ivar_66, ivar_68, ivar_71);
             if (ivar_71 != NULL) ivar_71->count--;
             ivar_74 = (ltedfapegtest_funtype_7_t)update_ltedfapegtest_funtype_7(ivar_69, ivar_68, ivar_57);
             if (ivar_57 != NULL) ivar_57->count--;
             ivar_77 = (ltedfapegtest_funtype_16_t)update_ltedfapegtest_funtype_16(ivar_73, ivar_72, ivar_74);
             if (ivar_74 != NULL) ivar_74->count--;
             ltedfapeg__ent_adt_t ivar_85;
             uint8_t ivar_84;
             ivar_84 = (uint8_t)0;
             uint32_t ivar_81;
             //copying to uint32 from uint8;
             ivar_81 = (uint32_t)ivar_84;
             uint8_t ivar_82;
             ivar_82 = (uint8_t)0;
             ivar_85 = (ltedfapeg__ent_adt_t)ltedfapeg__push((uint32_t)ivar_81, (uint8_t)ivar_82);
             ltedfapegtest_record_17_t tmp6520 = new_ltedfapegtest_record_17();;
             ivar_117 = (ltedfapegtest_record_17_t)tmp6520;
             tmp6520->depth = (uint8_t)ivar_48;
             tmp6520->lflag = (bool_t)ivar_49;
             tmp6520->scaf = (ltedfapegtest_funtype_16_t)ivar_77;
             tmp6520->stack = (ltedfapeg__ent_adt_t)ivar_85;
             /* St */ ltedfapegtest_record_14_t ivar_42;
             //copying to ltedfapegtest_record_14 from ltedfapegtest_record_17;
             {
          ivar_42 = new_ltedfapegtest_record_14();
          uint32_t tmp6521;
          //copying to uint32 from uint32;
          tmp6521 = (uint32_t)ivar_118;
          tmp6521 += 1;
          ivar_42->scaf = new_ltedfapegtest_array_13(tmp6521);
          for (uint32_t index_124 = 0; index_124 < tmp6521; index_124++){
                  uint32_t tmp6522;
                  tmp6522 = (uint32_t)255;
                  ivar_42->scaf->elems[index_124] = new_ltedfapegtest_array_12(tmp6522);
                  for (uint32_t index_125 = 0; index_125 < tmp6522; index_125++){
                   ivar_42->scaf->elems[index_124]->elems[index_125] = (ltedfapeg__ent_adt_t)ivar_117->scaf->ftbl->fptr(ivar_117->scaf, index_124)->ftbl->fptr(ivar_117->scaf->ftbl->fptr(ivar_117->scaf, index_124), index_125);
                   if (ivar_42->scaf->elems[index_124]->elems[index_125] != NULL) ivar_42->scaf->elems[index_124]->elems[index_125]->count++;
                  };
          };
          ltedfapegtest_array_13_t scaf6480;
          scaf6480 = (ltedfapegtest_array_13_t)ivar_42->scaf;
          ivar_42->depth = (uint64_t)ivar_117->depth;
          uint64_t depth6481;
          depth6481 = (uint64_t)ivar_42->depth;
          ivar_42->stack = (ltedfapeg__ent_adt_t)ivar_117->stack;
          if (ivar_42->stack != NULL) ivar_42->stack->count++;
          ltedfapeg__ent_adt_t stack6482;
          stack6482 = (ltedfapeg__ent_adt_t)ivar_42->stack;
          ivar_42->lflag = (bool_t)ivar_117->lflag;
          bool_t lflag6483;
          lflag6483 = (bool_t)ivar_42->lflag;
             };
             release_ltedfapegtest_record_17(ivar_117);
             ltedfapegtest_array_12_t ivar_88;
             ltedfapegtest_array_13_t ivar_92;
             ltedfapegtest_record_14_t ivar_113;
             ltedfapeg__lang_spec_t ivar_105;
             ivar_105 = (ltedfapeg__lang_spec_t)ltedfapegtest__djsontable();
             if (ivar_105 != NULL) ivar_105->count++;
             ltedfapegtest_array_3_t ivar_106;
             ivar_106 = (ltedfapegtest_array_3_t)ivar_18->seq;
             ivar_106->count++;
             release_bytestrings__bytestring(ivar_18);
             uint8_t ivar_112;
             ivar_112 = (uint8_t)0;
             uint32_t ivar_107;
             //copying to uint32 from uint8;
             ivar_107 = (uint32_t)ivar_112;
             uint8_t ivar_108;
             ivar_108 = (uint8_t)0;
             ivar_113 = (ltedfapegtest_record_14_t)ltedfapeg__parse((uint32_t)ivar_118, (ltedfapeg__lang_spec_t)ivar_105, (ltedfapeg_array_82_t)ivar_106, (uint32_t)ivar_107, (uint8_t)ivar_108, (ltedfapeg_record_100_t)ivar_42);
             ivar_92 = (ltedfapegtest_array_13_t)ivar_113->scaf;
             ivar_92->count++;
             release_ltedfapegtest_record_14(ivar_113);
             uint32_t ivar_115;
             ivar_115 = (uint32_t)0;
             ivar_88 = (ltedfapegtest_array_12_t)ivar_92->elems[ivar_115];
             ivar_88->count++;
             release_ltedfapegtest_array_13(ivar_92);
             uint8_t ivar_116;
             //copying to uint8 from uint32;
             ivar_116 = (uint8_t)ivar_118;
             result = (ltedfapeg__ent_adt_t)ivar_88->elems[ivar_116];
             result->count++;
             release_ltedfapegtest_array_12(ivar_88);
} else {
        
             release_file__lifted_file_adt(ivar_2);
             uint8_t ivar_123;
             ivar_123 = (uint8_t)0;
             uint64_t ivar_121;
             //copying to uint64 from uint8;
             ivar_121 = (uint64_t)ivar_123;
             result = (ltedfapeg__ent_adt_t)ltedfapeg__fail((uint64_t)ivar_121);
};

        
        return result;
}