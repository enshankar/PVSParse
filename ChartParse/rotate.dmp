
%% PVS Version 7.1.104 - International Allegro CL Enterprise Edition 10.1 [64-bit Mac OS X (Intel)] (May 4, 2022 20:52)
%% 10.1 [64-bit Mac OS X (Intel)] (May 4, 2022 20:52)
$$$PVSHOME/.pvs.lisp
(in-package :pvs)


$$$rotate.pvs
rotate		: THEORY

  BEGIN

  x8, y8, z8: VAR uint8
  x16, y16, z16: VAR uint16
  x32, y32, z32: VAR uint32
  x64, y64, z64: VAR uint64  

   u8rightrotate(x8, (i : upto(8))): uint8
    = u8plus(u8lshift(x8, 8 - i), u8rshift(x8, i))

   test_u8rightrotate_0: uint8 = u8rightrotate(255, 5)
   test_u8rightrotate_1: uint8 = u8rightrotate(0x00, 3)
   test_u8rightrotate_2: uint8 = u8rightrotate(0xF0, 7)
   test_u8rightrotate_3: uint8 = u8rightrotate(0x0F, 2)   
   test_u8rightrotate_4: uint8 = u8rightrotate(255, 8)
   test_u8rightrotate_5: uint8 = u8rightrotate(255, 0)      

   u16rightrotate(x16, (i : upto(16))): uint16
    = u16plus(u16lshift(x16, 16 - i), u16rshift(x16, i))

   test_u16rightrotate_0: uint16 = u16rightrotate(0xFFFF, 15)
   test_u16rightrotate_1: uint16 = u16rightrotate(0xF0F0, 13)
   test_u16rightrotate_2: uint16 = u16rightrotate(0x00F0, 4)
   test_u16rightrotate_3: uint16 = u16rightrotate(0x0F0F, 9)
   test_u16rightrotate_4: uint16 = u16rightrotate(0x0F0F, 16)
   test_u16rightrotate_5: uint16 = u16rightrotate(0x0F0F, 0)      


   u32rightrotate(x32, (i : upto(32))): uint32
    = u32plus(u32lshift(x32, 32 - i), u32rshift(x32, i))

   test_u32rightrotate_0: uint32 = u32rightrotate(0xFFFFFFFF, 31)
   test_u32rightrotate_1: uint32 = u32rightrotate(0xF0F0F0F0, 23)
   test_u32rightrotate_2: uint32 = u32rightrotate(0x00F000F0, 14)
   test_u32rightrotate_3: uint32 = u32rightrotate(0x0F0F0F0F, 9)
   test_u32rightrotate_4: uint32 = u32rightrotate(0x0F0F0F0F, 32)
   test_u32rightrotate_5: uint32 = u32rightrotate(0x0F0F0F0F, 0)   

   u64rightrotate(x64, (i : upto(64))): uint64
    = u64plus(u64lshift(x64, 64 - i), u64rshift(x64, i))

   test_u64rightrotate_0: uint64 = u64rightrotate(0x00FFFFFFFFFFFFFF, 63)
   test_u64rightrotate_1: uint64 = u64rightrotate(0x0FF0F0F0F0F0F0F0, 43)
   test_u64rightrotate_2: uint64 = u64rightrotate(0x00F000F0F0F0F0F0, 24)
   test_u64rightrotate_3: uint64 = u64rightrotate(0x0F0F0F0FF0F0F0F0, 9)
   test_u64rightrotate_4: uint64 = u64rightrotate(0x0F0F0F0FF0F0F0F0, 64)
   test_u64rightrotate_5: uint64 = u64rightrotate(0x0F0F0F0FF0F0F0F0, 0)

   u8leftrotate(x8, (i : upto(8))): uint8
    = u8plus(u8lshift(x8, i), u8rshift(x8, 8 - i))

   test_u8leftrotate_0: uint8 = u8leftrotate(255, 5)
   test_u8leftrotate_1: uint8 = u8leftrotate(0x00, 3)
   test_u8leftrotate_2: uint8 = u8leftrotate(0xF0, 7)
   test_u8leftrotate_3: uint8 = u8leftrotate(0x0F, 2)   
   test_u8leftrotate_4: uint8 = u8leftrotate(255, 8)
   test_u8leftrotate_5: uint8 = u8leftrotate(255, 0)      

   u16leftrotate(x16, (i : upto(16))): uint16
    = u16plus(u16lshift(x16, i), u16rshift(x16, 16 - i))

   test_u16leftrotate_0: uint16 = u16leftrotate(0xFFFF, 15)
   test_u16leftrotate_1: uint16 = u16leftrotate(0xF0F0, 13)
   test_u16leftrotate_2: uint16 = u16leftrotate(0x00F0, 4)
   test_u16leftrotate_3: uint16 = u16leftrotate(0x0F0F, 9)
   test_u16leftrotate_4: uint16 = u16leftrotate(0x0F0F, 16)
   test_u16leftrotate_5: uint16 = u16leftrotate(0x0F0F, 0)      


   u32leftrotate(x32, (i : upto(32))): uint32
    = u32plus(u32lshift(x32, i), u32rshift(x32, 32 - i))

   test_u32leftrotate_0: uint32 = u32leftrotate(0xFFFFFFFF, 31)
   test_u32leftrotate_1: uint32 = u32leftrotate(0xF0F0F0F0, 23)
   test_u32leftrotate_2: uint32 = u32leftrotate(0x00F000F0, 14)
   test_u32leftrotate_3: uint32 = u32leftrotate(0x0F0F0F0F, 9)
   test_u32leftrotate_4: uint32 = u32leftrotate(0x0F0F0F0F, 32)
   test_u32leftrotate_5: uint32 = u32leftrotate(0x0F0F0F0F, 0)   

   u64leftrotate(x64, (i : upto(64))): uint64
    = u64plus(u64lshift(x64, i), u64rshift(x64, 64 - i))

   test_u64leftrotate_0: uint64 = u64leftrotate(0x00FFFFFFFFFFFFFF, 63)
   test_u64leftrotate_1: uint64 = u64leftrotate(0x0FF0F0F0F0F0F0F0, 43)
   test_u64leftrotate_2: uint64 = u64leftrotate(0x00F000F0F0F0F0F0, 24)
   test_u64leftrotate_3: uint64 = u64leftrotate(0x0F0F0F0FF0F0F0F0, 9)
   test_u64leftrotate_4: uint64 = u64leftrotate(0x0F0F0F0FF0F0F0F0, 64)
   test_u64leftrotate_5: uint64 = u64leftrotate(0x0F0F0F0FF0F0F0F0, 0)


  lbytes(n: uint8): TYPE = {X : bytestring | X`length = n}


  padright(blocksize: uint8)(X: bytestring | length(X) < blocksize): lbytes(blocksize)
  = (# length := blocksize,
       seq := (LAMBDA (i:below(blocksize)): IF i < length(X) THEN X`seq(i) ELSE 0 ENDIF) #)

  lbytesXOR(l:uint8)(X, Y :lbytes(l)): lbytes(l)
   = (# length := l,
        seq := (LAMBDA (i: below(l)): u8xor(X`seq(i), Y`seq(i))) #)

   nbytes(byte: uint8, l: uint8): lbytes(l)
    = (# length := l,
         seq := (LAMBDA (i:below(l)): byte) #)

   u8tobytestring(x8: uint8): lbytes(1)
    = (# length := 1, seq := (LAMBDA (i: below(1)): x8) #)

   test_u8tobytestring_0: bytestring= u8tobytestring(255);
   test_u8tobytestring_1: bytestring= u8tobytestring(0x0F);
   test_u8tobytestring_2: bytestring= u8tobytestring(0xF0);
   test_u8tobytestring_3: bytestring= u8tobytestring(0x00);
   
   

   u16tobytestring(x16: uint16): lbytes(2)
    = (# length := 2, seq := (LAMBDA (i: below(2)):
                      IF i = 0 THEN u16rem(u16rshift(x16, 8), 0x100)
		        ELSE u16rem(x16, 0x100) ENDIF) #)

   test_u16tobytestring_0: lbytes(2) = u16tobytestring(0xFFFF);
   test_u16tobytestring_1: lbytes(2) = u16tobytestring(0x0F0F);
   test_u16tobytestring_2: lbytes(2) = u16tobytestring(0xF00F);
   test_u16tobytestring_3: lbytes(2) = u16tobytestring(0x00FF);

   u32tobytestring(x32: uint32): lbytes(4)
    = (# length := 4, seq := (LAMBDA (i: below(4)):
                      IF i = 0 THEN u32rem(u32rshift(x32, 24), 0x100)
		        ELSIF i = 1 THEN u32rem(u32rshift(x32, 16), 0x100)
			ELSIF i = 2 THEN u32rem(u32rshift(x32, 8), 0x100)
			ELSE u32rem(x32, 0x100)
			ENDIF) #)

   test_u32tobytestring_0: lbytes(4) = u32tobytestring(0xFFFFFFFF);
   test_u32tobytestring_1: lbytes(4) = u32tobytestring(0x0F0F0F0F);
   test_u32tobytestring_2: lbytes(4) = u32tobytestring(0xF00FF00F);
   test_u32tobytestring_3: lbytes(4) = u32tobytestring(0x00FF00FF);

   u64tobytestring(x64: uint64): lbytes(8)
    = (# length := 8, seq := (LAMBDA (i: below(8)):
                      IF i = 0 THEN u64rem(u64rshift(x64, 56), 0x100)
		        ELSIF i = 1 THEN u64rem(u64rshift(x64, 48), 0x100)
			ELSIF i = 2 THEN u64rem(u64rshift(x64, 40), 0x100)
			ELSIF i = 3 THEN  u64rem(u64rshift(x64, 32), 0x100)
			ELSIF i = 4 THEN  u64rem(u64rshift(x64, 24), 0x100)	
			ELSIF i = 5 THEN  u64rem(u64rshift(x64, 16), 0x100)				
			ELSIF i = 6 THEN  u64rem(u64rshift(x64, 8), 0x100)	   
			ELSE u64rem(x64, 0x100)
			ENDIF) #)

   test_u64tobytestring_0: lbytes(8) = u64tobytestring(u64plus(u64lshift(0xFFFFFFFF, 32), 0xFFFFFFFF));
   test_u64tobytestring_1: lbytes(8) = u64tobytestring(0x0F0F0F0F0F0);
   test_u64tobytestring_2: lbytes(8) = u64tobytestring(0xF00FF00FF00);
   test_u64tobytestring_3: lbytes(8) = u64tobytestring(0x00FF00FF00F);



  END rotate

$$$rotate.prf
(rotate
 (u8rightrotate_TCC1 0
  (u8rightrotate_TCC1-1 nil 3828381349 ("" (subtype-tcc) nil nil) nil
   nil
   (u8rightrotate subtype "(number_fields.-)(8, rotate.i)"
    "naturalnumbers.upto(8)")))
 (test_u8rightrotate_0_TCC1 0
  (test_u8rightrotate_0_TCC1-1 nil 3833902925 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (test_u8rightrotate_0 subtype "255" "uint8")))
 (test_u8rightrotate_2_TCC1 0
  (test_u8rightrotate_2_TCC1-1 nil 3833902925 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (test_u8rightrotate_2 subtype "0xf0" "uint8")))
 (u16rightrotate_TCC1 0
  (u16rightrotate_TCC1-1 nil 3828381349 ("" (subtype-tcc) nil nil) nil
   nil
   (u16rightrotate subtype "(number_fields.-)(16, rotate.i)"
    "naturalnumbers.upto(16)")))
 (test_u16rightrotate_0_TCC1 0
  (test_u16rightrotate_0_TCC1-1 nil 3833902925 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (test_u16rightrotate_0 subtype "0xffff" "uint16")))
 (test_u16rightrotate_1_TCC1 0
  (test_u16rightrotate_1_TCC1-1 nil 3833902925 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (test_u16rightrotate_1 subtype "0xf0f0" "uint16")))
 (u32rightrotate_TCC1 0
  (u32rightrotate_TCC1-1 nil 3828381349 ("" (subtype-tcc) nil nil) nil
   nil
   (u32rightrotate subtype "(number_fields.-)(32, rotate.i)"
    "naturalnumbers.upto(32)")))
 (test_u32rightrotate_0_TCC1 0
  (test_u32rightrotate_0_TCC1-1 nil 3833902925 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (test_u32rightrotate_0 subtype "0xffffffff" "uint32")))
 (test_u32rightrotate_1_TCC1 0
  (test_u32rightrotate_1_TCC1-1 nil 3833902925 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (test_u32rightrotate_1 subtype "0xf0f0f0f0" "uint32")))
 (u64rightrotate_TCC1 0
  (u64rightrotate_TCC1-1 nil 3828381349 ("" (subtype-tcc) nil nil) nil
   nil
   (u64rightrotate subtype "(number_fields.-)(64, rotate.i)"
    "naturalnumbers.upto(64)")))
 (padright_TCC1 0
  (padright_TCC1-1 nil 3842821585 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil))
   nil
   (padright subtype "rotate.blocksize"
    "naturalnumbers.below(0x100000000)")))
 (lbytesXOR_TCC1 0
  (lbytesXOR_TCC1-1 nil 3842821585 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (lbytes type-eq-decl nil rotate nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (lbytesXOR subtype "rotate.l" "naturalnumbers.below(0x100000000)")))
 (lbytesXOR_TCC2 0
  (lbytesXOR_TCC2-1 nil 3842821585 ("" (subtype-tcc) nil nil) nil nil
   (lbytesXOR subtype "rotate.i"
    "naturalnumbers.below(rotate.X`length)")))
 (lbytesXOR_TCC3 0
  (lbytesXOR_TCC3-1 nil 3842821585 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint8 type-eq-decl nil integertypes nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (lbytes type-eq-decl nil rotate nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (lbytesXOR subtype "rotate.X`seq(rotate.i)" "uint8")))
 (lbytesXOR_TCC4 0
  (lbytesXOR_TCC4-1 nil 3842821585 ("" (subtype-tcc) nil nil) nil nil
   (lbytesXOR subtype "rotate.i"
    "naturalnumbers.below(rotate.Y`length)")))
 (lbytesXOR_TCC5 0
  (lbytesXOR_TCC5-1 nil 3842821585 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (uint8 type-eq-decl nil integertypes nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (lbytes type-eq-decl nil rotate nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (lbytesXOR subtype "rotate.Y`seq(rotate.i)" "uint8")))
 (lbytesXOR_TCC6 0
  (lbytesXOR_TCC6-1 nil 3842821585
   ("" (skeep*)
    (("" (typepred "u8xor(X`seq(i), Y`seq(i))") (("" (grind) nil nil))
      nil))
    nil)
   ((lbytes type-eq-decl nil rotate nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bytestring type-eq-decl nil bytestrings nil)
    (byte nonempty-type-eq-decl nil bytestrings nil)
    (below type-eq-decl nil naturalnumbers nil)
    (u8xor const-decl "uint8" integer_bv_ops nil)
    (uint8 type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (/= const-decl "boolean" notequal nil)
    (XOR const-decl "bool" xor_def nil)
    (XOR const-decl "bvec[N]" bv_bitwise nil)
    (^ const-decl "bit" bv nil) (b2n const-decl "nbit" bit nil)
    (bv2nat_rec def-decl "nat" bv_nat nil)
    (bv2nat const-decl "below(exp2(N))" bv_nat nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (lbytesXOR subtype
    "integer_bv_ops.u8xor(rotate.X`seq(rotate.i), rotate.Y`seq(rotate.i))"
    "byte")))
 (nbytes_TCC1 0
  (nbytes_TCC1-1 nil 3842821585 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil))
   nil
   (nbytes subtype "rotate.l" "naturalnumbers.below(0x100000000)")))
 (nbytes_TCC2 0
  (nbytes_TCC2-1 nil 3842821585 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil))
   nil (nbytes subtype "rotate.byte" "byte")))
 (u8tobytestring_TCC1 0
  (u8tobytestring_TCC1-1 nil 3827347997
   ("" (skeep*) (("" (typepred "x8") (("" (grind) nil nil)) nil)) nil)
   ((uint8 type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil (u8tobytestring subtype "rotate.x8" "byte")))
 (u16tobytestring_TCC1 0
  (u16tobytestring_TCC2-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint16 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u16rem const-decl "uint16" integertypes nil)
    (u16rshift const-decl "uint16" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u16tobytestring subtype
    "integertypes.u16rem(integertypes.u16rshift(rotate.x16, 8), 0x100)"
    "byte")))
 (u16tobytestring_TCC2 0
  (u16tobytestring_TCC1-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint16 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (u16rem const-decl "uint16" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u16tobytestring subtype "integertypes.u16rem(rotate.x16, 0x100)"
    "byte")))
 (test_u16tobytestring_2_TCC1 0
  (test_u16tobytestring_2_TCC1-1 nil 3833902925 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (test_u16tobytestring_2 subtype "0xf00f" "uint16")))
 (u32tobytestring_TCC1 0
  (u32tobytestring_TCC2-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u32rem const-decl "uint32" integertypes nil)
    (u32rshift const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u32tobytestring subtype
    "integertypes.u32rem(integertypes.u32rshift(rotate.x32, 24), 0x100)"
    "byte")))
 (u32tobytestring_TCC2 0
  (u32tobytestring_TCC3-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u32rem const-decl "uint32" integertypes nil)
    (u32rshift const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u32tobytestring subtype
    "integertypes.u32rem(integertypes.u32rshift(rotate.x32, 16), 0x100)"
    "byte")))
 (u32tobytestring_TCC3 0
  (u32tobytestring_TCC4-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u32rem const-decl "uint32" integertypes nil)
    (u32rshift const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u32tobytestring subtype
    "integertypes.u32rem(integertypes.u32rshift(rotate.x32, 8), 0x100)"
    "byte")))
 (u32tobytestring_TCC4 0
  (u32tobytestring_TCC1-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (u32rem const-decl "uint32" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u32tobytestring subtype "integertypes.u32rem(rotate.x32, 0x100)"
    "byte")))
 (test_u32tobytestring_2_TCC1 0
  (test_u32tobytestring_2_TCC1-1 nil 3833902925 ("" (grind) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (test_u32tobytestring_2 subtype "0xf00ff00f" "uint32")))
 (u64tobytestring_TCC1 0
  (u64tobytestring_TCC2-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u64rem const-decl "uint64" integertypes nil)
    (u64rshift const-decl "uint64" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64tobytestring subtype
    "integertypes.u64rem(integertypes.u64rshift(rotate.x64, 56), 0x100)"
    "byte")))
 (u64tobytestring_TCC2 0
  (u64tobytestring_TCC3-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u64rem const-decl "uint64" integertypes nil)
    (u64rshift const-decl "uint64" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64tobytestring subtype
    "integertypes.u64rem(integertypes.u64rshift(rotate.x64, 48), 0x100)"
    "byte")))
 (u64tobytestring_TCC3 0
  (u64tobytestring_TCC4-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u64rem const-decl "uint64" integertypes nil)
    (u64rshift const-decl "uint64" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64tobytestring subtype
    "integertypes.u64rem(integertypes.u64rshift(rotate.x64, 40), 0x100)"
    "byte")))
 (u64tobytestring_TCC4 0
  (u64tobytestring_TCC5-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u64rem const-decl "uint64" integertypes nil)
    (u64rshift const-decl "uint64" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64tobytestring subtype
    "integertypes.u64rem(integertypes.u64rshift(rotate.x64, 32), 0x100)"
    "byte")))
 (u64tobytestring_TCC5 0
  (u64tobytestring_TCC6-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u64rem const-decl "uint64" integertypes nil)
    (u64rshift const-decl "uint64" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64tobytestring subtype
    "integertypes.u64rem(integertypes.u64rshift(rotate.x64, 24), 0x100)"
    "byte")))
 (u64tobytestring_TCC6 0
  (u64tobytestring_TCC7-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u64rem const-decl "uint64" integertypes nil)
    (u64rshift const-decl "uint64" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64tobytestring subtype
    "integertypes.u64rem(integertypes.u64rshift(rotate.x64, 16), 0x100)"
    "byte")))
 (u64tobytestring_TCC7 0
  (u64tobytestring_TCC8-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (u64rem const-decl "uint64" integertypes nil)
    (u64rshift const-decl "uint64" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64tobytestring subtype
    "integertypes.u64rem(integertypes.u64rshift(rotate.x64, 8), 0x100)"
    "byte")))
 (u64tobytestring_TCC8 0
  (u64tobytestring_TCC1-1 nil 3827347997 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (u64rem const-decl "uint64" integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (u64tobytestring subtype "integertypes.u64rem(rotate.x64, 0x100)"
    "byte"))))

