(entry)
(scaf
 (good_fail?_TCC1 0
  (good_fail?_TCC1-1 nil 3799169047 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (non_terminal type-eq-decl nil scaf nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (good_fail? subtype "scaf.i" "naturalnumbers.below(scaf.len)")))
 (good_fail?_TCC2 0
  (good_fail?_TCC2-1 nil 3799169047
   ("" (skeep* :preds? t)
    (("" (typepred "A(i)(n1)") (("" (grind) nil nil)) nil)) nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (scaffold type-eq-decl nil scaf nil)
    (non_terminal type-eq-decl nil scaf nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (good_entry? const-decl "bool" scaf nil)
    (entry type-decl nil entry_adt nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (good_fail? subtype
               "(number_fields.+)(scaf.i, entry_adt.span(scaf.A(scaf.i)(scaf.n1)))"
               "naturalnumbers.upto(scaf.len)")))
 (good_fail_update 0
  (good_fail_update-1 nil 3799215662 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (non_terminal type-eq-decl nil scaf nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil) nil
    (good_entry? const-decl "bool" scaf nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (/= const-decl "boolean" notequal nil)
    (good_fail? const-decl "bool" scaf nil))
   shostak))
 (good_loop?_TCC1 0
  (good_loop?_TCC1-1 nil 3799169047
   ("" (skeep* :preds? t)
    (("" (typepred "A(i)(n1)") (("" (grind) nil nil)) nil)) nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (scaffold type-eq-decl nil scaf nil)
    (non_terminal type-eq-decl nil scaf nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (good_entry? const-decl "bool" scaf nil)
    (entry type-decl nil entry_adt nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (good_loop? subtype
               "(number_fields.+)(scaf.i, entry_adt.span(scaf.A(scaf.i)(scaf.n1)))"
               "naturalnumbers.upto(scaf.len)")))
 (good_loop_update 0
  (good_loop_update-1 nil 3799215676 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (non_terminal type-eq-decl nil scaf nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil) nil
    (good_entry? const-decl "bool" scaf nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (/= const-decl "boolean" notequal nil)
    (good_loop? const-decl "bool" scaf nil))
   shostak))
 (good_good?_TCC1 0
  (good_good?_TCC1-1 nil 3799169047 ("" (subtype-tcc) nil nil) nil nil
   (good_good? subtype "(number_fields.-)(scaf.len, scaf.i)" "nat")))
 (good_good?_TCC2 0
  (good_good?_TCC2-1 nil 3799169047 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (non_terminal type-eq-decl nil scaf nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (good_good? subtype "scaf.i" "naturalnumbers.below(scaf.len)")))
 (good_good?_TCC3 0
  (good_good?_TCC3-1 nil 3799169047
   ("" (skeep* :preds? t)
    (("" (typepred "A(i)(n1)") (("" (grind) nil nil)) nil)) nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (scaffold type-eq-decl nil scaf nil)
    (non_terminal type-eq-decl nil scaf nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (good_entry? const-decl "bool" scaf nil)
    (entry type-decl nil entry_adt nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (good_good? subtype
               "(number_fields.+)(scaf.i, entry_adt.span(scaf.A(scaf.i)(scaf.n1)))"
               "naturalnumbers.upto(scaf.len)")))
 (good_good_update 0
  (good_good_update-1 nil 3799215686 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (non_terminal type-eq-decl nil scaf nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil) nil
    (good_entry? const-decl "bool" scaf nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (good_good? const-decl "bool" scaf nil))
   shostak))
 (stack_scaffold_stack 0
  (stack_scaffold_stack-1 nil 3799215699 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (non_terminal type-eq-decl nil scaf nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (good_entry? const-decl "bool" scaf nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (stack_scaffold? const-decl "bool" scaf nil))
   shostak))
 (putstack_TCC1 0
  (putstack_TCC1-1 nil 3799425790 ("" (grind) nil nil)
   ((member def-decl "bool" list_props nil)
    (good_entry? const-decl "bool" scaf nil))
   nil
   (putstack subtype "entry_adt.loop"
    "(scaf.good_entry?(scaf.len, scaf.St`pos))")))
 (putstack_TCC2 0
  (putstack_TCC2-1 nil 3799425790
   ("" (skeep* :preds? t)
    (("" (typepred "St`scaf")
      (("" (expand "fine_stack_scaffold?")
        (("" (ground)
          (("1" (expand "fine_scaffold?")
            (("1" (ground)
              (("1" (expand "good_scaffold?")
                (("1" (skeep*)
                  (("1" (inst - "i" "n_1")
                    (("1" (ground)
                      (("1" (hide -2 -3) (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "stack_scaffold?")
            (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil)
           ("3" (hide -1 -2) (("3" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (state type-eq-decl nil scaf nil)
    (up_non_terminal type-eq-decl nil scaf nil)
    (fine_stack_scaffold? const-decl "bool" scaf nil)
    (scaffold type-eq-decl nil scaf nil)
    (good_entry? const-decl "bool" scaf nil)
    (entry type-decl nil entry_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (strings type-eq-decl nil scaf nil)
    (terminal_type formal-nonempty-type-decl nil scaf nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil scaf nil)
    (atomic_peg type-decl nil scaf nil)
    (non_terminal type-eq-decl nil scaf nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member def-decl "bool" list_props nil)
    (good_good? const-decl "bool" scaf nil)
    (good_loop? const-decl "bool" scaf nil)
    (good_fail? const-decl "bool" scaf nil)
    (good_scaffold? const-decl "bool" scaf nil)
    (fine_scaffold? const-decl "bool" scaf nil)
    (loop_or_pending? const-decl "bool" scaf nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (stack_scaffold? const-decl "bool" scaf nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (putstack subtype "scaf.St`scaf"
    "(scaf.fine_stack_scaffold?(scaf.len, scaf.G, scaf.s)(scaf.St`pos, scaf.St`root, list_adt[non_terminal].cons(scaf.n, scaf.St`stack)))")))
 (step_TCC1 0
  (step_TCC1-1 nil 3799205961 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (non_terminal type-eq-decl nil scaf nil)
    (atomic_peg type-decl nil scaf nil)
    (lang_spec type-eq-decl nil scaf nil)
    (below type-eq-decl nil naturalnumbers nil)
    (terminal_type formal-nonempty-type-decl nil scaf nil)
    (strings type-eq-decl nil scaf nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (entry type-decl nil entry_adt nil)
    (good_entry? const-decl "bool" scaf nil)
    (scaffold type-eq-decl nil scaf nil)
    (fine_stack_scaffold? const-decl "bool" scaf nil)
    (state type-eq-decl nil scaf nil)
    (good_scaffold? const-decl "bool" scaf nil)
    (full_scaffold? const-decl "bool" scaf nil)
    (fine_scaffold? const-decl "bool" scaf nil)
    (loop_or_pending? const-decl "bool" scaf nil)
    (stack_scaffold? const-decl "bool" scaf nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (up_non_terminal type-eq-decl nil scaf nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil))
   nil
   (step subtype "(number_fields.-)(scaf.pos, 1)"
         "naturalnumbers.upto(scaf.len)")))
 (step_TCC2 0
  (step_TCC2-1 nil 3799205961 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "0" "up_non_terminal")))
 (step_TCC3 0
  (step_TCC3-1 nil 3799205961
   ("" (skeep* :preds? t)
    (("" (hide -1)
      (("" (assert)
        (("" (expand "fine_stack_scaffold?")
          (("" (ground)
            (("1" (expand "fine_scaffold?")
              (("1" (ground)
                (("1" (expand "full_scaffold?")
                  (("1" (expand "stack_scaffold?")
                    (("1" (case "null?(St`stack)")
                      (("1" (assert) nil nil)
                       ("2" (typepred "St`stack")
                        (("2" (rewrite "every_nth")
                          (("2" (rewrite "member_nth")
                            (("1" (skeep)
                              (("1"
                                (inst - "i")
                                (("1"
                                  (ground)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "every_nth")
                              (("2"
                                (hide-all-but (-1 1))
                                (("2" (lazy-grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lazy-grind) nil nil))
                nil))
              nil)
             ("2" (hide -2 -3) (("2" (grind) nil nil)) nil)
             ("3" (expand "fine_scaffold?")
              (("3" (ground) (("3" (lazy-grind) nil nil)) nil)) nil)
             ("4" (lazy-grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_stack_scaffold? const-decl "bool" scaf nil)
    (fine_scaffold? const-decl "bool" scaf nil)
    (full_scaffold? const-decl "bool" scaf nil)
    (state type-eq-decl nil scaf nil)
    (scaffold type-eq-decl nil scaf nil)
    (good_entry? const-decl "bool" scaf nil)
    (entry type-decl nil entry_adt nil)
    (<= const-decl "bool" reals nil)
    (strings type-eq-decl nil scaf nil)
    (terminal_type formal-nonempty-type-decl nil scaf nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil scaf nil)
    (atomic_peg type-decl nil scaf nil)
    (up_non_terminal type-eq-decl nil scaf nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (non_terminal type-eq-decl nil scaf nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (every_nth formula-decl nil list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (loop_or_pending? const-decl "bool" scaf nil)
    (member def-decl "bool" list_props nil)
    (good_scaffold? const-decl "bool" scaf nil)
    (length def-decl "nat" list_props nil)
    (member_nth formula-decl nil list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (stack_scaffold? const-decl "bool" scaf nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (step subtype "scaf.St`scaf"
         "(scaf.fine_stack_scaffold?(scaf.len, scaf.G, scaf.s)((number_fields.-)(scaf.pos, 1), 0, list_adt[non_terminal].null))")))
 (step_TCC4 0
  (step_TCC4-1 nil 3799205961 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (non_terminal type-eq-decl nil scaf nil)
    (atomic_peg type-decl nil scaf nil)
    (lang_spec type-eq-decl nil scaf nil)
    (below type-eq-decl nil naturalnumbers nil)
    (terminal_type formal-nonempty-type-decl nil scaf nil)
    (strings type-eq-decl nil scaf nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (entry type-decl nil entry_adt nil)
    (good_entry? const-decl "bool" scaf nil)
    (scaffold type-eq-decl nil scaf nil)
    (fine_stack_scaffold? const-decl "bool" scaf nil)
    (state type-eq-decl nil scaf nil)
    (good_scaffold? const-decl "bool" scaf nil)
    (full_scaffold? const-decl "bool" scaf nil)
    (fine_scaffold? const-decl "bool" scaf nil)
    (loop_or_pending? const-decl "bool" scaf nil)
    (stack_scaffold? const-decl "bool" scaf nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (up_non_terminal type-eq-decl nil scaf nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil))
   nil (step subtype "scaf.root" "non_terminal")))
 (step_TCC5 0
  (step_TCC7-1 nil 3799205961 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (non_terminal type-eq-decl nil scaf nil)
    (atomic_peg type-decl nil scaf nil)
    (lang_spec type-eq-decl nil scaf nil)
    (below type-eq-decl nil naturalnumbers nil)
    (terminal_type formal-nonempty-type-decl nil scaf nil)
    (strings type-eq-decl nil scaf nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (entry type-decl nil entry_adt nil)
    (good_entry? const-decl "bool" scaf nil)
    (scaffold type-eq-decl nil scaf nil)
    (fine_stack_scaffold? const-decl "bool" scaf nil)
    (state type-eq-decl nil scaf nil)
    (good_scaffold? const-decl "bool" scaf nil)
    (full_scaffold? const-decl "bool" scaf nil)
    (fine_scaffold? const-decl "bool" scaf nil)
    (loop_or_pending? const-decl "bool" scaf nil)
    (stack_scaffold? const-decl "bool" scaf nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (up_non_terminal type-eq-decl nil scaf nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil))
   nil
   (step subtype "list_adt[up_non_terminal].null"
         "list[non_terminal]")))
 (step_TCC6 0
  (step_TCC8-1 nil 3799205961
   ("" (skeep* :preds? t)
    (("" (replace 1)
      (("" (hide -1)
        (("" (expand "fine_stack_scaffold?")
          (("" (flatten)
            (("" (hide -3)
              (("" (ground)
                (("1" (expand "fine_scaffold?")
                  (("1" (ground)
                    (("1" (expand "good_scaffold?")
                      (("1" (skeep*)
                        (("1" (inst - "i" "n")
                          (("1" (hide -2 -3) (("1" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lazy-grind) nil nil)
                 ("3" (expand "member") (("3" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_stack_scaffold? const-decl "bool" scaf nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (loop_or_pending? const-decl "bool" scaf nil)
    (stack_scaffold? const-decl "bool" scaf nil)
    (full_scaffold? const-decl "bool" scaf nil)
    (fine_scaffold? const-decl "bool" scaf nil)
    (good_scaffold? const-decl "bool" scaf nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (non_terminal type-eq-decl nil scaf nil)
    (good_good? const-decl "bool" scaf nil)
    (good_loop? const-decl "bool" scaf nil)
    (member def-decl "bool" list_props nil)
    (good_fail? const-decl "bool" scaf nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (step subtype "scaf.St`scaf"
         "(scaf.fine_stack_scaffold?(scaf.len, scaf.G, scaf.s)(scaf.St`pos, scaf.St`root, list_adt[non_terminal].cons(scaf.root, list_adt[up_non_terminal].null)))")))
 (step_TCC7 0
  (step_TCC5-1 nil 3799205961 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (non_terminal type-eq-decl nil scaf nil)
    (atomic_peg type-decl nil scaf nil)
    (lang_spec type-eq-decl nil scaf nil)
    (below type-eq-decl nil naturalnumbers nil)
    (terminal_type formal-nonempty-type-decl nil scaf nil)
    (strings type-eq-decl nil scaf nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (entry type-decl nil entry_adt nil)
    (good_entry? const-decl "bool" scaf nil)
    (scaffold type-eq-decl nil scaf nil)
    (fine_stack_scaffold? const-decl "bool" scaf nil)
    (state type-eq-decl nil scaf nil)
    (good_scaffold? const-decl "bool" scaf nil)
    (full_scaffold? const-decl "bool" scaf nil)
    (fine_scaffold? const-decl "bool" scaf nil)
    (loop_or_pending? const-decl "bool" scaf nil)
    (stack_scaffold? const-decl "bool" scaf nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (up_non_terminal type-eq-decl nil scaf nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil))
   nil
   (step subtype "(number_fields.+)(scaf.root, 1)" "up_non_terminal")))
 (step_TCC8 0
  (step_TCC6-1 nil 3799205961
   ("" (skeep* :preds? t)
    (("" (hide -1)
      (("" (expand "fine_stack_scaffold?")
        (("" (flatten)
          (("" (hide -3 3)
            (("" (ground)
              (("" (expand "fine_scaffold?")
                (("" (ground)
                  (("" (expand "full_scaffold?")
                    (("" (skeep*)
                      (("" (inst - "j" "m") (("" (ground) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (non_terminal type-eq-decl nil scaf nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (full_scaffold? const-decl "bool" scaf nil)
    (fine_scaffold? const-decl "bool" scaf nil)
    (fine_stack_scaffold? const-decl "bool" scaf nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (step subtype "scaf.St`scaf"
         "(scaf.fine_stack_scaffold?(scaf.len, scaf.G, scaf.s)(scaf.St`pos, (number_fields.+)(scaf.root, 1), list_adt[non_terminal].null))")))
 (step_TCC9 0
  (step_TCC9-1 nil 3799205961 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (non_terminal type-eq-decl nil scaf nil)
    (atomic_peg type-decl nil scaf nil)
    (lang_spec type-eq-decl nil scaf nil)
    (below type-eq-decl nil naturalnumbers nil)
    (terminal_type formal-nonempty-type-decl nil scaf nil)
    (strings type-eq-decl nil scaf nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (entry type-decl nil entry_adt nil)
    (good_entry? const-decl "bool" scaf nil)
    (scaffold type-eq-decl nil scaf nil)
    (fine_stack_scaffold? const-decl "bool" scaf nil)
    (state type-eq-decl nil scaf nil)
    (good_scaffold? const-decl "bool" scaf nil)
    (full_scaffold? const-decl "bool" scaf nil)
    (fine_scaffold? const-decl "bool" scaf nil)
    (loop_or_pending? const-decl "bool" scaf nil)
    (stack_scaffold? const-decl "bool" scaf nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (up_non_terminal type-eq-decl nil scaf nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil))
   nil (step subtype "scaf.stack" "(list_adt[non_terminal].cons?)")))
 (step_TCC10 0
  (step_TCC10-1 nil 3799205961 ("" (subtype-tcc) nil nil)
   ((good_entry? const-decl "bool" scaf nil)) nil
   (step subtype "entry_adt.good(0)"
         "(scaf.good_entry?(scaf.len, scaf.pos))")))
 (step_TCC11 0
  (step_TCC11-1 nil 3799205961 ("" (subtype-tcc) nil nil)
   ((good_entry? const-decl "bool" scaf nil)) nil
   (step subtype "entry_adt.fail"
         "(scaf.good_entry?(scaf.len, scaf.pos))")))
 (step_TCC12 0
  (step_TCC12-1 nil 3799205961 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (non_terminal type-eq-decl nil scaf nil)
    (atomic_peg type-decl nil scaf nil)
    (lang_spec type-eq-decl nil scaf nil)
    (below type-eq-decl nil naturalnumbers nil)
    (terminal_type formal-nonempty-type-decl nil scaf nil)
    (strings type-eq-decl nil scaf nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (entry type-decl nil entry_adt nil)
    (scaffold type-eq-decl nil scaf nil)
    (fine_stack_scaffold? const-decl "bool" scaf nil)
    (state type-eq-decl nil scaf nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_scaffold? const-decl "bool" scaf nil)
    (full_scaffold? const-decl "bool" scaf nil)
    (fine_scaffold? const-decl "bool" scaf nil)
    (loop_or_pending? const-decl "bool" scaf nil)
    (stack_scaffold? const-decl "bool" scaf nil)
    (up_non_terminal type-eq-decl nil scaf nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (good_entry? const-decl "bool" scaf nil))
   nil
   (step subtype "scaf.v" "(scaf.good_entry?(scaf.len, scaf.pos))")))
 (step_TCC13 0
  (step_TCC13-1 nil 3799205961 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (non_terminal type-eq-decl nil scaf nil)
    (atomic_peg type-decl nil scaf nil)
    (lang_spec type-eq-decl nil scaf nil)
    (below type-eq-decl nil naturalnumbers nil)
    (terminal_type formal-nonempty-type-decl nil scaf nil)
    (strings type-eq-decl nil scaf nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (entry type-decl nil entry_adt nil)
    (good_entry? const-decl "bool" scaf nil)
    (scaffold type-eq-decl nil scaf nil)
    (fine_stack_scaffold? const-decl "bool" scaf nil)
    (state type-eq-decl nil scaf nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (stack_scaffold? const-decl "bool" scaf nil)
    (loop_or_pending? const-decl "bool" scaf nil)
    (fine_scaffold? const-decl "bool" scaf nil)
    (full_scaffold? const-decl "bool" scaf nil)
    (good_scaffold? const-decl "bool" scaf nil)
    (up_non_terminal type-eq-decl nil scaf nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil))
   nil (step subtype "scaf.pos" "naturalnumbers.below(scaf.len)")))
 (step_TCC14 0
  (step_TCC14-1 nil 3799205961 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (non_terminal type-eq-decl nil scaf nil)
    (atomic_peg type-decl nil scaf nil)
    (lang_spec type-eq-decl nil scaf nil)
    (below type-eq-decl nil naturalnumbers nil)
    (terminal_type formal-nonempty-type-decl nil scaf nil)
    (strings type-eq-decl nil scaf nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (entry type-decl nil entry_adt nil)
    (scaffold type-eq-decl nil scaf nil)
    (fine_stack_scaffold? const-decl "bool" scaf nil)
    (state type-eq-decl nil scaf nil)
    (stack_scaffold? const-decl "bool" scaf nil)
    (loop_or_pending? const-decl "bool" scaf nil)
    (fine_scaffold? const-decl "bool" scaf nil)
    (full_scaffold? const-decl "bool" scaf nil)
    (good_scaffold? const-decl "bool" scaf nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (up_non_terminal type-eq-decl nil scaf nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (good_entry? const-decl "bool" scaf nil))
   nil
   (step subtype "scaf.v" "(scaf.good_entry?(scaf.len, scaf.pos))")))
 (step_TCC15 0
  (step_TCC15-1 nil 3799205961 ("" (subtype-tcc) nil nil)
   ((good_entry? const-decl "bool" scaf nil)) nil
   (step subtype "entry_adt.fail"
         "(scaf.good_entry?(scaf.len, scaf.pos))")))
 (step_TCC16 0
  (step_TCC16-1 nil 3799205961 ("" (subtype-tcc) nil nil)
   ((good_entry? const-decl "bool" scaf nil)) nil
   (step subtype "entry_adt.loop"
         "(scaf.good_entry?(scaf.len, scaf.pos))")))
 (step_TCC17 0
  (step_TCC17-1 nil 3799213102
   ("" (skeep*)
    (("" (typepred "St`scaf(pos)(n1)") (("" (grind) nil nil)) nil))
    nil)
   ((state type-eq-decl nil scaf nil)
    (fine_stack_scaffold? const-decl "bool" scaf nil)
    (scaffold type-eq-decl nil scaf nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (strings type-eq-decl nil scaf nil)
    (terminal_type formal-nonempty-type-decl nil scaf nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil scaf nil)
    (atomic_peg type-decl nil scaf nil)
    (list type-decl nil list_adt nil)
    (non_terminal type-eq-decl nil scaf nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (up_non_terminal type-eq-decl nil scaf nil)
    (good_entry? const-decl "bool" scaf nil)
    (entry type-decl nil entry_adt nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (step subtype "(number_fields.+)(scaf.pos, scaf.sp)"
         "naturalnumbers.upto(scaf.len)")))
 (step_TCC18 0
  (step_TCC17-1 nil 3799205961 ("" (subtype-tcc) nil nil)
   ((good_entry? const-decl "bool" scaf nil)) nil
   (step subtype "entry_adt.fail"
         "(scaf.good_entry?(scaf.len, scaf.pos))")))
 (step_TCC19 0
  (step_TCC18-1 nil 3799205961 ("" (subtype-tcc) nil nil)
   ((good_entry? const-decl "bool" scaf nil)) nil
   (step subtype "entry_adt.loop"
         "(scaf.good_entry?(scaf.len, scaf.pos))")))
 (step_TCC20 0
  (step_TCC19-1 nil 3799205961
   ("" (skeep* :preds? t)
    (("" (hide -5 -7)
      (("" (typepred "St`scaf(pos)(n1)")
        (("" (typepred "St`scaf(pos + sp)(n2)") (("" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_scaffold? const-decl "bool" scaf nil)
    (full_scaffold? const-decl "bool" scaf nil)
    (fine_scaffold? const-decl "bool" scaf nil)
    (loop_or_pending? const-decl "bool" scaf nil)
    (stack_scaffold? const-decl "bool" scaf nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (entry type-decl nil entry_adt nil)
    (good_entry? const-decl "bool" scaf nil)
    (up_non_terminal type-eq-decl nil scaf nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (non_terminal type-eq-decl nil scaf nil)
    (list type-decl nil list_adt nil)
    (atomic_peg type-decl nil scaf nil)
    (lang_spec type-eq-decl nil scaf nil)
    (below type-eq-decl nil naturalnumbers nil)
    (terminal_type formal-nonempty-type-decl nil scaf nil)
    (strings type-eq-decl nil scaf nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (scaffold type-eq-decl nil scaf nil)
    (fine_stack_scaffold? const-decl "bool" scaf nil)
    (state type-eq-decl nil scaf nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (step subtype "entry_adt.good((number_fields.+)(scaf.sp, scaf.sp2))"
         "(scaf.good_entry?(scaf.len, scaf.pos))")))
 (step_TCC21 0
  (step_TCC20-1 nil 3799205961
   ("" (skeep* :preds? t)
    (("" (hide -4 -6)
      (("" (expand "fine_stack_scaffold?")
        (("" (flatten)
          (("" (expand "fine_scaffold?")
            (("" (flatten)
              (("" (expand "full_scaffold?")
                (("" (inst - "pos + sp" "n2") (("" (ground) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (non_terminal type-eq-decl nil scaf nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (full_scaffold? const-decl "bool" scaf nil)
    (fine_scaffold? const-decl "bool" scaf nil)
    (fine_stack_scaffold? const-decl "bool" scaf nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (step subtype "scaf.n2"
         "{n | entry_adt.pending?(scaf.St`scaf(scaf.St`pos)(scaf.n))}")))
 (step_TCC22 0
  (step_TCC21-1 nil 3799205961
   ("" (skeep* :preds? t)
    (("" (rewrite 2)
      (("" (expand "fine_stack_scaffold?")
        (("" (hide -3 -5)
          (("" (flatten)
            (("" (split +)
              (("1" (hide -6)
                (("1" (expand "fine_scaffold?")
                  (("1" (ground)
                    (("1" (expand "good_scaffold?")
                      (("1" (skeep*)
                        (("1" (inst - "i" "n")
                          (("1" (hide -5 -6) (("1" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "stack_scaffold?")
                (("2" (skeep*)
                  (("2" (inst - "m")
                    (("2" (ground)
                      (("2" (expand "member" -2)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide -4 -5) (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (fine_scaffold? const-decl "bool" scaf nil)
    (fine_stack_scaffold? const-decl "bool" scaf nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (step subtype "scaf.St"
         "{St: scaf.state(scaf.len, scaf.G, scaf.s) | (booleans.NOT)(list_adt[non_terminal].null?(St`stack))}")))
 (step_TCC23 0
  (step_TCC25-1 nil 3799205961
   ("" (skeep* :preds? t)
    (("" (rewrite 2)
      (("" (hide -3 -5)
        (("" (expand "fine_stack_scaffold?")
          (("" (flatten)
            (("" (split +)
              (("1" (expand "fine_scaffold?")
                (("1" (hide -6)
                  (("1" (ground)
                    (("1" (expand "good_scaffold?")
                      (("1" (skeep*)
                        (("1" (inst - "i" "n")
                          (("1" (hide -5 -6) (("1" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -6)
                (("2" (hide -4)
                  (("2" (expand "stack_scaffold?")
                    (("2" (skeep*)
                      (("2" (inst - "m")
                        (("2" (ground)
                          (("2" (expand "member" -)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide -4 -5) (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_stack_scaffold? const-decl "bool" scaf nil)
    (fine_scaffold? const-decl "bool" scaf nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (step subtype "scaf.n1"
         "{n | entry_adt.pending?(scaf.St`scaf(scaf.St`pos)(scaf.n))}")))
 (step_TCC24 0
  (step_TCC28-1 nil 3799205961
   ("" (skeep* :preds? t)
    (("" (rewrite 2)
      (("" (hide -3 -5)
        (("" (expand "fine_stack_scaffold?")
          (("" (split)
            (("1" (flatten)
              (("1" (hide -5 -6)
                (("1" (expand "fine_scaffold?")
                  (("1" (ground)
                    (("1" (hide -5)
                      (("1" (expand "good_scaffold?")
                        (("1" (skeep* :preds? t)
                          (("1" (inst - "i" "n")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (hide -4 -6) (("2" (lazy-grind) nil nil)) nil))
              nil)
             ("3" (flatten)
              (("3" (hide -4 -5) (("3" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_stack_scaffold? const-decl "bool" scaf nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_scaffold? const-decl "bool" scaf nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (step subtype "scaf.St"
         "{St: scaf.state(scaf.len, scaf.G, scaf.s) | (booleans.NOT)(list_adt[non_terminal].null?(St`stack))}")))
 (step_TCC25 0
  (step_TCC22-1 nil 3799205961 ("" (subtype-tcc) nil nil)
   ((good_entry? const-decl "bool" scaf nil)) nil
   (step subtype "entry_adt.fail"
         "(scaf.good_entry?(scaf.len, scaf.pos))")))
 (step_TCC26 0
  (step_TCC23-1 nil 3799205961 ("" (subtype-tcc) nil nil)
   ((good_entry? const-decl "bool" scaf nil)) nil
   (step subtype "entry_adt.loop"
         "(scaf.good_entry?(scaf.len, scaf.pos))")))
 (step_TCC27 0
  (step_TCC24-1 nil 3799205961
   ("" (skeep* :preds? t)
    (("" (hide -4 -6)
      (("" (typepred "scaf(pos)(n2)")
        (("" (hide -6) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (entry type-decl nil entry_adt nil)
    (good_entry? const-decl "bool" scaf nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (non_terminal type-eq-decl nil scaf nil)
    (scaffold type-eq-decl nil scaf nil)
    (atomic_peg type-decl nil scaf nil)
    (lang_spec type-eq-decl nil scaf nil)
    (below type-eq-decl nil naturalnumbers nil)
    (terminal_type formal-nonempty-type-decl nil scaf nil)
    (strings type-eq-decl nil scaf nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (fine_stack_scaffold? const-decl "bool" scaf nil)
    (up_non_terminal type-eq-decl nil scaf nil)
    (state type-eq-decl nil scaf nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (step subtype "entry_adt.good(scaf.sp)"
         "(scaf.good_entry?(scaf.len, scaf.pos))")))
 (step_TCC28 0
  (step_TCC32-1 nil 3799205961
   ("" (skeep* :preds? t)
    (("" (hide -2 -4)
      (("" (expand "fine_stack_scaffold?")
        (("" (flatten)
          (("" (rewrite 2)
            (("" (split +)
              (("1" (hide -4 -5)
                (("1" (expand "fine_scaffold?")
                  (("1" (ground)
                    (("1" (hide -4)
                      (("1" (expand "good_scaffold?")
                        (("1" (skeep* :preds? t)
                          (("1" (inst - "i" "n")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -3 -5) (("2" (lazy-grind) nil nil)) nil)
               ("3" (hide -3 -4) (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fine_stack_scaffold? const-decl "bool" scaf nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (step subtype "scaf.n2"
         "{n | entry_adt.pending?(scaf.St`scaf(scaf.St`pos)(scaf.n))}")))
 (step_TCC29 0
  (step_TCC36-1 nil 3799205961
   ("" (skeep* :preds? t)
    (("" (expand "fine_stack_scaffold?")
      (("" (hide -2 -4)
        (("" (rewrite 2)
          (("" (flatten)
            (("" (split +)
              (("1" (hide -4 -5)
                (("1" (expand "fine_scaffold?")
                  (("1" (ground)
                    (("1" (hide -4)
                      (("1" (expand "good_scaffold?")
                        (("1" (skeep*)
                          (("1" (inst - "i" "n")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -3 -5) (("2" (lazy-grind) nil nil)) nil)
               ("3" (hide -3 -4) (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_stack_scaffold? const-decl "bool" scaf nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (step subtype "scaf.St"
         "{St: scaf.state(scaf.len, scaf.G, scaf.s) | (booleans.NOT)(list_adt[non_terminal].null?(St`stack))}")))
 (step_TCC30 0
  (step_TCC26-1 nil 3799205961 ("" (subtype-tcc) nil nil)
   ((good_entry? const-decl "bool" scaf nil)) nil
   (step subtype "entry_adt.loop"
         "(scaf.good_entry?(scaf.len, scaf.pos))")))
 (step_TCC31 0
  (step_TCC27-1 nil 3799205961
   ("" (skeep* :preds? t)
    (("" (typepred "scaf(pos)(n1)")
      (("" (hide -5 -7 -8) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((state type-eq-decl nil scaf nil)
    (up_non_terminal type-eq-decl nil scaf nil)
    (fine_stack_scaffold? const-decl "bool" scaf nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (strings type-eq-decl nil scaf nil)
    (terminal_type formal-nonempty-type-decl nil scaf nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil scaf nil)
    (atomic_peg type-decl nil scaf nil)
    (scaffold type-eq-decl nil scaf nil)
    (non_terminal type-eq-decl nil scaf nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (good_entry? const-decl "bool" scaf nil)
    (entry type-decl nil entry_adt nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (step subtype "entry_adt.good(scaf.sp)"
         "(scaf.good_entry?(scaf.len, scaf.pos))")))
 (step_TCC32 0
  (step_TCC32-1 nil 3799426807 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (non_terminal type-eq-decl nil scaf nil)
    (atomic_peg type-decl nil scaf nil)
    (lang_spec type-eq-decl nil scaf nil)
    (below type-eq-decl nil naturalnumbers nil)
    (terminal_type formal-nonempty-type-decl nil scaf nil)
    (strings type-eq-decl nil scaf nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (entry type-decl nil entry_adt nil)
    (good_entry? const-decl "bool" scaf nil)
    (scaffold type-eq-decl nil scaf nil)
    (fine_stack_scaffold? const-decl "bool" scaf nil)
    (state type-eq-decl nil scaf nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (stack_scaffold? const-decl "bool" scaf nil)
    (loop_or_pending? const-decl "bool" scaf nil)
    (fine_scaffold? const-decl "bool" scaf nil)
    (full_scaffold? const-decl "bool" scaf nil)
    (good_scaffold? const-decl "bool" scaf nil)
    (up_non_terminal type-eq-decl nil scaf nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil))
   nil
   (step subtype "scaf.n1"
         "{n | entry_adt.pending?(scaf.St`scaf(scaf.St`pos)(scaf.n))}")))
 (step_TCC33 0
  (step_TCC33-1 nil 3799426807 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (non_terminal type-eq-decl nil scaf nil)
    (atomic_peg type-decl nil scaf nil)
    (lang_spec type-eq-decl nil scaf nil)
    (below type-eq-decl nil naturalnumbers nil)
    (terminal_type formal-nonempty-type-decl nil scaf nil)
    (strings type-eq-decl nil scaf nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (entry type-decl nil entry_adt nil)
    (good_entry? const-decl "bool" scaf nil)
    (scaffold type-eq-decl nil scaf nil)
    (fine_stack_scaffold? const-decl "bool" scaf nil)
    (state type-eq-decl nil scaf nil)
    (up_non_terminal type-eq-decl nil scaf nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil))
   nil
   (step subtype "scaf.St"
         "{St: scaf.state(scaf.len, scaf.G, scaf.s) | (booleans.NOT)(list_adt[non_terminal].null?(St`stack))}")))
 (step_TCC34 0
  (step_TCC29-1 nil 3799205961 ("" (subtype-tcc) nil nil)
   ((good_entry? const-decl "bool" scaf nil)) nil
   (step subtype "entry_adt.fail"
         "(scaf.good_entry?(scaf.len, scaf.pos))")))
 (step_TCC35 0
  (step_TCC30-1 nil 3799205961 ("" (subtype-tcc) nil nil)
   ((good_entry? const-decl "bool" scaf nil)) nil
   (step subtype "entry_adt.loop"
         "(scaf.good_entry?(scaf.len, scaf.pos))")))
 (step_TCC36 0
  (step_TCC31-1 nil 3799205961 ("" (subtype-tcc) nil nil)
   ((good_entry? const-decl "bool" scaf nil)) nil
   (step subtype "entry_adt.good(0)"
         "(scaf.good_entry?(scaf.len, scaf.pos))")))
 (step_TCC37 0
  (step_TCC37-1 nil 3799426807 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (non_terminal type-eq-decl nil scaf nil)
    (atomic_peg type-decl nil scaf nil)
    (lang_spec type-eq-decl nil scaf nil)
    (below type-eq-decl nil naturalnumbers nil)
    (terminal_type formal-nonempty-type-decl nil scaf nil)
    (strings type-eq-decl nil scaf nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (entry type-decl nil entry_adt nil)
    (good_entry? const-decl "bool" scaf nil)
    (scaffold type-eq-decl nil scaf nil)
    (fine_stack_scaffold? const-decl "bool" scaf nil)
    (state type-eq-decl nil scaf nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (stack_scaffold? const-decl "bool" scaf nil)
    (loop_or_pending? const-decl "bool" scaf nil)
    (fine_scaffold? const-decl "bool" scaf nil)
    (full_scaffold? const-decl "bool" scaf nil)
    (good_scaffold? const-decl "bool" scaf nil)
    (up_non_terminal type-eq-decl nil scaf nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil))
   nil
   (step subtype "scaf.n1"
         "{n | entry_adt.pending?(scaf.St`scaf(scaf.St`pos)(scaf.n))}")))
 (step_TCC38 0
  (step_TCC38-1 nil 3799426807 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (non_terminal type-eq-decl nil scaf nil)
    (atomic_peg type-decl nil scaf nil)
    (lang_spec type-eq-decl nil scaf nil)
    (below type-eq-decl nil naturalnumbers nil)
    (terminal_type formal-nonempty-type-decl nil scaf nil)
    (strings type-eq-decl nil scaf nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (entry type-decl nil entry_adt nil)
    (good_entry? const-decl "bool" scaf nil)
    (scaffold type-eq-decl nil scaf nil)
    (fine_stack_scaffold? const-decl "bool" scaf nil)
    (state type-eq-decl nil scaf nil)
    (up_non_terminal type-eq-decl nil scaf nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil))
   nil
   (step subtype "scaf.St"
         "{St: scaf.state(scaf.len, scaf.G, scaf.s) | (booleans.NOT)(list_adt[non_terminal].null?(St`stack))}")))
 (step_TCC39 0
  (step_TCC33-1 nil 3799205961 ("" (subtype-tcc) nil nil)
   ((good_entry? const-decl "bool" scaf nil)) nil
   (step subtype "entry_adt.good(0)"
         "(scaf.good_entry?(scaf.len, scaf.pos))")))
 (step_TCC40 0
  (step_TCC34-1 nil 3799205961 ("" (subtype-tcc) nil nil)
   ((good_entry? const-decl "bool" scaf nil)) nil
   (step subtype "entry_adt.loop"
         "(scaf.good_entry?(scaf.len, scaf.pos))")))
 (step_TCC41 0
  (step_TCC35-1 nil 3799205961 ("" (subtype-tcc) nil nil)
   ((good_entry? const-decl "bool" scaf nil)) nil
   (step subtype "entry_adt.fail"
         "(scaf.good_entry?(scaf.len, scaf.pos))")))
 (step_TCC42 0
  (step_TCC42-1 nil 3799426807 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (non_terminal type-eq-decl nil scaf nil)
    (atomic_peg type-decl nil scaf nil)
    (lang_spec type-eq-decl nil scaf nil)
    (below type-eq-decl nil naturalnumbers nil)
    (terminal_type formal-nonempty-type-decl nil scaf nil)
    (strings type-eq-decl nil scaf nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (entry type-decl nil entry_adt nil)
    (good_entry? const-decl "bool" scaf nil)
    (scaffold type-eq-decl nil scaf nil)
    (fine_stack_scaffold? const-decl "bool" scaf nil)
    (state type-eq-decl nil scaf nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (stack_scaffold? const-decl "bool" scaf nil)
    (loop_or_pending? const-decl "bool" scaf nil)
    (fine_scaffold? const-decl "bool" scaf nil)
    (full_scaffold? const-decl "bool" scaf nil)
    (good_scaffold? const-decl "bool" scaf nil)
    (up_non_terminal type-eq-decl nil scaf nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil))
   nil
   (step subtype "scaf.n1"
         "{n | entry_adt.pending?(scaf.St`scaf(scaf.St`pos)(scaf.n))}")))
 (step_TCC43 0
  (step_TCC43-1 nil 3799426807 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (non_terminal type-eq-decl nil scaf nil)
    (atomic_peg type-decl nil scaf nil)
    (lang_spec type-eq-decl nil scaf nil)
    (below type-eq-decl nil naturalnumbers nil)
    (terminal_type formal-nonempty-type-decl nil scaf nil)
    (strings type-eq-decl nil scaf nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (entry type-decl nil entry_adt nil)
    (good_entry? const-decl "bool" scaf nil)
    (scaffold type-eq-decl nil scaf nil)
    (fine_stack_scaffold? const-decl "bool" scaf nil)
    (state type-eq-decl nil scaf nil)
    (up_non_terminal type-eq-decl nil scaf nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil))
   nil
   (step subtype "scaf.St"
         "{St: scaf.state(scaf.len, scaf.G, scaf.s) | (booleans.NOT)(list_adt[non_terminal].null?(St`stack))}")))
 (membership_update 0
  (membership_update-1 nil 3799377798
   ("" (skeep*)
    ((""
      (replace-extensionality "cmember(cons(a!1, l))"
       "cmember(l) WITH [(a!1) := TRUE]")
      (("" (hide 2) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (non_terminal type-eq-decl nil scaf nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cmember const-decl "bool" scaf nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (member def-decl "bool" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (size_TCC1 0
  (size_TCC1-1 nil 3799353832 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (size subtype
         "(number_fields.-)(scaf.num_non_terminals, scaf.St`root)"
         "nat")))
 (size_TCC2 0
  (size_TCC2-1 nil 3799353832
   ("" (skeep*)
    ((""
      (typepred
       "count[bool](num_non_terminals)(id[bool])(cmember(St`stack))")
      (("" (assert) nil nil)) nil))
    nil)
   ((state type-eq-decl nil scaf nil)
    (fine_stack_scaffold? const-decl "bool" scaf nil)
    (scaffold type-eq-decl nil scaf nil)
    (good_entry? const-decl "bool" scaf nil)
    (entry type-decl nil entry_adt nil)
    (strings type-eq-decl nil scaf nil)
    (terminal_type formal-nonempty-type-decl nil scaf nil)
    (lang_spec type-eq-decl nil scaf nil)
    (atomic_peg type-decl nil scaf nil)
    (up_non_terminal type-eq-decl nil scaf nil)
    (cmember const-decl "bool" scaf nil)
    (non_terminal type-eq-decl nil scaf nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (count const-decl "upto(len)" arrayCount nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (arr type-eq-decl nil arrayCount nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (size subtype
         "(number_fields.-)(scaf.num_non_terminals, arrayCount[booleans.bool].count(scaf.num_non_terminals)(identity[booleans.bool].id)(scaf.cmember(scaf.St`stack)))"
         "nat")))
 (size_putstack 0
  (size_putstack-1 nil 3799431989
   ("" (skeep* :preds? t)
    (("" (expand "putstack")
      (("" (lift-if)
        (("" (ground)
          (("1" (expand "size")
            (("1" (rewrite "lex4_lt")
              (("1" (rewrite "count_update2[entry]") nil nil)) nil))
            nil)
           ("2" (expand "size")
            (("2" (rewrite "lex4_lt")
              (("2" (rewrite "membership_update")
                (("2" (use "count_update[bool]")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((putstack const-decl "state(len, G, s)" scaf nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (lex4_lt formula-decl nil lex4 nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (up_non_terminal type-eq-decl nil scaf nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (non_terminal type-eq-decl nil scaf nil)
    (list type-decl nil list_adt nil)
    (atomic_peg type-decl nil scaf nil)
    (lang_spec type-eq-decl nil scaf nil)
    (below type-eq-decl nil naturalnumbers nil)
    (terminal_type formal-nonempty-type-decl nil scaf nil)
    (strings type-eq-decl nil scaf nil)
    (<= const-decl "bool" reals nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (entry type-decl nil entry_adt nil)
    (good_entry? const-decl "bool" scaf nil)
    (scaffold type-eq-decl nil scaf nil)
    (fine_stack_scaffold? const-decl "bool" scaf nil)
    (state type-eq-decl nil scaf nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (arr type-eq-decl nil arrayCount nil)
    (count const-decl "upto(len)" arrayCount nil)
    (pending? adt-recognizer-decl "[entry -> boolean]" entry_adt nil)
    (loop? adt-recognizer-decl "[entry -> boolean]" entry_adt nil)
    (loop adt-constructor-decl "(loop?)" entry_adt nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (cmember const-decl "bool" scaf nil)
    (count_update2 formula-decl nil arrayCount nil)
    (size const-decl "ordinal" scaf nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (count_update formula-decl nil arrayCount nil)
    (member def-decl "bool" list_props nil)
    (membership_update formula-decl nil scaf nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (size_putstack subtype
    "scaf.putstack(scaf.len, scaf.G, scaf.s)(scaf.St)(scaf.n)"
    "{St1: scaf.state(scaf.len, scaf.G, scaf.s) | ordinals.<(scaf.size(scaf.len, scaf.G, scaf.s)(St1), scaf.size(scaf.len, scaf.G, scaf.s)(scaf.St))}")))
 (size_step 0
  (size_step-1 nil 3799353833
   ("" (skeep*)
    (("" (assert)
      (("" (expand "step")
        (("" (case "St`root = num_non_terminals")
          (("1" (assert)
            (("1" (expand "size") (("1" (rewrite "lex4_lt") nil nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (hide 2)
              (("2" (apply (then (lift-if) (ground)))
                (("1" (expand "size")
                  (("1" (rewrite "lex4_lt") nil nil)) nil)
                 ("2" (expand "size")
                  (("2" (rewrite "lex4_lt")
                    (("2" (rewrite "membership_update")
                      (("2" (use "count_update[bool]")
                        (("2" (ground)
                          (("1" (hide 1) (("1" (grind) nil nil)) nil)
                           ("2" (hide 2) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "size")
                  (("3" (rewrite "lex4_lt")
                    (("3" (ground)
                      (("1" (rewrite "count_update3[entry]")
                        (("1" (typepred "St`scaf")
                          (("1" (expand "fine_stack_scaffold?")
                            (("1" (flatten)
                              (("1"
                                (expand "stack_scaffold?")
                                (("1"
                                  (inst - "car(St`stack)")
                                  (("1"
                                    (hide -1 2 3)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite "count_update3[entry]")
                        (("2" (typepred "St`scaf")
                          (("2" (expand "fine_stack_scaffold?")
                            (("2" (flatten)
                              (("2"
                                (expand "stack_scaffold?")
                                (("2"
                                  (hide -1 2 3)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (expand "size")
                  (("4" (rewrite "lex4_lt")
                    (("4" (ground)
                      (("1" (rewrite "count_update3[entry]")
                        (("1" (typepred "St`scaf")
                          (("1" (expand "fine_stack_scaffold?")
                            (("1" (flatten)
                              (("1"
                                (expand "stack_scaffold?")
                                (("1"
                                  (hide -1 2 3)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite "count_update3[entry]")
                        (("2"
                          (apply (then
                                  (typepred "St`scaf")
                                  (expand "fine_stack_scaffold?")
                                  (flatten)
                                  (hide -1 2 3)
                                  (grind)))
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (expand "size")
                  (("5" (rewrite "lex4_lt")
                    (("5" (ground)
                      (("1" (rewrite "count_update3[entry]")
                        (("1"
                          (apply (then
                                  (typepred "St`scaf")
                                  (expand "fine_stack_scaffold?")
                                  (flatten)
                                  (hide -1 2 3)
                                  (grind)))
                          nil nil))
                        nil)
                       ("2" (rewrite "count_update3[entry]")
                        (("2"
                          (apply (then
                                  (typepred "St`scaf")
                                  (expand "fine_stack_scaffold?")
                                  (flatten)
                                  (hide -1 2 3)
                                  (grind)))
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (expand "size")
                  (("6" (rewrite "lex4_lt")
                    (("6" (ground)
                      (("1" (rewrite "count_update3[entry]")
                        (("1"
                          (apply (then
                                  (typepred "St`scaf")
                                  (expand "fine_stack_scaffold?")
                                  (flatten)
                                  (hide -1 2 3)
                                  (grind)))
                          nil nil))
                        nil)
                       ("2" (rewrite "count_update3[entry]")
                        (("2"
                          (apply (then
                                  (typepred "St`scaf")
                                  (expand "fine_stack_scaffold?")
                                  (flatten)
                                  (hide -1 2 3)
                                  (grind)))
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (expand "size")
                  (("7" (rewrite "lex4_lt")
                    (("7" (ground)
                      (("1" (rewrite "count_update3[entry]")
                        (("1"
                          (apply (then
                                  (typepred "St`scaf")
                                  (expand "fine_stack_scaffold?")
                                  (flatten)
                                  (hide -1 2 3)
                                  (grind)))
                          nil nil))
                        nil)
                       ("2" (rewrite "count_update3[entry]")
                        (("2"
                          (apply (then
                                  (typepred "St`scaf")
                                  (expand "fine_stack_scaffold?")
                                  (flatten)
                                  (hide -1 2 3)
                                  (grind)))
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("8" (expand "size")
                  (("8" (rewrite "lex4_lt")
                    (("8" (ground)
                      (("1" (rewrite "count_update3[entry]")
                        (("1"
                          (apply (then
                                  (typepred "St`scaf")
                                  (expand "fine_stack_scaffold?")
                                  (flatten)
                                  (hide -1 2 4)
                                  (grind)))
                          nil nil))
                        nil)
                       ("2" (rewrite "count_update3[entry]")
                        (("2"
                          (apply (then
                                  (typepred "St`scaf")
                                  (expand "fine_stack_scaffold?")
                                  (flatten)
                                  (hide -1 2 4)
                                  (grind)))
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("9" (expand "size")
                  (("9" (rewrite "lex4_lt")
                    (("9" (ground)
                      (("1" (rewrite "count_update3[entry]")
                        (("1"
                          (apply (then
                                  (typepred "St`scaf")
                                  (expand "fine_stack_scaffold?")
                                  (flatten)
                                  (hide -1 2 4)
                                  (grind)))
                          nil nil))
                        nil)
                       ("2" (rewrite "count_update3[entry]")
                        (("2"
                          (apply (then
                                  (typepred "St`scaf")
                                  (expand "fine_stack_scaffold?")
                                  (flatten)
                                  (hide -1 2 4)
                                  (grind)))
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("10" (expand "size")
                  (("10" (rewrite "lex4_lt")
                    (("10" (rewrite "count_update2[entry]")
                      (("10"
                        (apply (then
                                (typepred "St`scaf")
                                (expand "fine_stack_scaffold?")
                                (flatten)
                                (hide -1 2)
                                (grind)))
                        nil nil))
                      nil))
                    nil))
                  nil)
                 ("11" (expand "size")
                  (("11" (rewrite "lex4_lt")
                    (("11" (rewrite "count_update2[entry]")
                      (("11"
                        (apply (then
                                (typepred "St`scaf")
                                (expand "fine_stack_scaffold?")
                                (flatten)
                                (hide -1 2)
                                (grind)))
                        nil nil))
                      nil))
                    nil))
                  nil)
                 ("12"
                  (apply (then (expand "size") (rewrite "lex4_lt")))
                  (("12" (rewrite "count_update2[entry]")
                    (("12"
                      (apply (then (typepred "St`scaf")
                              (expand "fine_stack_scaffold?") (flatten)
                              (hide -1 2) (grind)))
                      nil nil))
                    nil))
                  nil)
                 ("13"
                  (apply (then (expand "size") (rewrite "lex4_lt")))
                  (("13" (rewrite "count_update2[entry]")
                    (("13"
                      (apply (then (typepred "St`scaf")
                              (expand "fine_stack_scaffold?") (flatten)
                              (hide -1 2) (grind)))
                      nil nil))
                    nil))
                  nil)
                 ("14"
                  (apply (then (expand "size") (rewrite "lex4_lt")))
                  (("14" (rewrite "count_update2[entry]")
                    (("14"
                      (apply (then (typepred "St`scaf")
                              (expand "fine_stack_scaffold?") (flatten)
                              (hide -1 2) (grind)))
                      nil nil))
                    nil))
                  nil)
                 ("15"
                  (apply (then (expand "size") (rewrite "lex4_lt")))
                  (("15" (rewrite "count_update2[entry]")
                    (("15"
                      (apply (then (typepred "St`scaf")
                              (expand "fine_stack_scaffold?") (flatten)
                              (hide -1) (grind)))
                      nil nil))
                    nil))
                  nil)
                 ("16"
                  (apply (then (expand "size") (rewrite "lex4_lt")))
                  (("16" (rewrite "count_update2[entry]")
                    (("16"
                      (apply (then (typepred "St`scaf")
                              (expand "fine_stack_scaffold?") (flatten)
                              (hide -1) (grind)))
                      nil nil))
                    nil))
                  nil)
                 ("17"
                  (apply (then (expand "size") (rewrite "lex4_lt")))
                  (("17" (rewrite "count_update2[entry]")
                    (("17"
                      (apply (then (typepred "St`scaf")
                              (expand "fine_stack_scaffold?") (flatten)
                              (hide -1) (grind)))
                      nil nil))
                    nil))
                  nil)
                 ("18" (expand "size")
                  (("18" (rewrite "lex4_lt")
                    (("18" (rewrite "count_update2[entry]")
                      (("18" (typepred "St`scaf")
                        (("18" (expand "fine_stack_scaffold?")
                          (("18" (flatten)
                            (("18" (expand "stack_scaffold?")
                              (("18"
                                (inst - "car(St`stack)")
                                (("18"
                                  (hide -1)
                                  (("18" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("19"
                  (apply (then (expand "size") (rewrite "lex4_lt")))
                  (("19" (rewrite "count_update2[entry]")
                    (("19" (typepred "St`scaf")
                      (("19" (expand "fine_stack_scaffold?")
                        (("19" (flatten)
                          (("19" (hide -1) (("19" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("20"
                  (apply (then (expand "size") (rewrite "lex4_lt")))
                  (("20" (rewrite "count_update2[entry]")
                    (("20"
                      (apply (then (typepred "St`scaf")
                              (expand "fine_stack_scaffold?") (flatten)
                              (hide -1) (grind)))
                      nil nil))
                    nil))
                  nil)
                 ("21"
                  (apply (then (expand "size") (rewrite "lex4_lt")))
                  (("21" (rewrite "count_update2[entry]")
                    (("21"
                      (apply (then (typepred "St`scaf")
                              (expand "fine_stack_scaffold?") (flatten)
                              (hide -1) (grind)))
                      nil nil))
                    nil))
                  nil)
                 ("22"
                  (apply (then (expand "size") (rewrite "lex4_lt")))
                  (("22" (rewrite "count_update2[entry]")
                    (("22"
                      (apply (then (typepred "St`scaf")
                              (expand "fine_stack_scaffold?") (flatten)
                              (hide -1) (grind)))
                      nil nil))
                    nil))
                  nil)
                 ("23"
                  (apply (then (expand "size") (rewrite "lex4_lt")))
                  (("23" (rewrite "count_update2[entry]")
                    (("23"
                      (apply (then (typepred "St`scaf")
                              (expand "fine_stack_scaffold?") (flatten)
                              (hide -1) (grind)))
                      nil nil))
                    nil))
                  nil)
                 ("24"
                  (apply (then (expand "size") (rewrite "lex4_lt")))
                  (("24" (rewrite "count_update2[entry]")
                    (("24"
                      (apply (then (typepred "St`scaf")
                              (expand "fine_stack_scaffold?") (flatten)
                              (hide -1) (grind)))
                      nil nil))
                    nil))
                  nil)
                 ("25"
                  (apply (then (expand "size") (rewrite "lex4_lt")))
                  (("25" (rewrite "count_update2[entry]")
                    (("25"
                      (apply (then (typepred "St`scaf")
                              (expand "fine_stack_scaffold?") (flatten)
                              (hide -1) (grind)))
                      nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (step const-decl "state(len, G, s)" scaf nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size_putstack application-judgement
     "{St1: state(len, G, s) | size(len, G, s)(St1) < size(len, G, s)(St)}"
     scaf nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (count_update formula-decl nil arrayCount nil)
    (member def-decl "bool" list_props nil)
    (membership_update formula-decl nil scaf nil) nil nil
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (count_update3 formula-decl nil arrayCount nil)
    (stack_scaffold? const-decl "bool" scaf nil)
    (NOT const-decl "[bool -> bool]" booleans nil) nil nil
    (count_update2 formula-decl nil arrayCount nil) nil nil nil
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (concat? adt-recognizer-decl "[atomic_peg -> boolean]" scaf nil)
    (or? adt-recognizer-decl "[atomic_peg -> boolean]" scaf nil)
    (e1 shared-adt-accessor-decl
     "[{x: atomic_peg | concat?(x) OR or?(x)} -> below(num_non_terminals)]"
     scaf nil)
    (e2 shared-adt-accessor-decl
     "[{x: atomic_peg | concat?(x) OR or?(x)} -> below(num_non_terminals)]"
     scaf nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lex4_lt formula-decl nil lex4 nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (arr type-eq-decl nil arrayCount nil)
    (count const-decl "upto(len)" arrayCount nil) nil
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (cmember const-decl "bool" scaf nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (size const-decl "ordinal" scaf nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (up_non_terminal type-eq-decl nil scaf nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (non_terminal type-eq-decl nil scaf nil)
    (list type-decl nil list_adt nil)
    (atomic_peg type-decl nil scaf nil)
    (lang_spec type-eq-decl nil scaf nil)
    (below type-eq-decl nil naturalnumbers nil)
    (terminal_type formal-nonempty-type-decl nil scaf nil)
    (strings type-eq-decl nil scaf nil)
    (<= const-decl "bool" reals nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (good_entry? const-decl "bool" scaf nil)
    (scaffold type-eq-decl nil scaf nil)
    (fine_stack_scaffold? const-decl "bool" scaf nil)
    (state type-eq-decl nil scaf nil))
   shostak))
 (parse_TCC1 0
  (parse_TCC1-1 nil 3799589198
   ("" (use "well_founded_le") (("" (grind) nil nil)) nil)
   ((restrict const-decl "R" restrict nil)
    (well_founded? const-decl "bool" orders nil)
    (well_founded_le formula-decl nil ordinals nil))
   nil
   (parse well-founded
          "restrict[[ordstruct_adt.ordstruct, ordstruct_adt.ordstruct], [ordinal, ordinal], booleans.bool].restrict(ordinals.<)"
          "nil")))
 (parse_TCC2 0
  (parse_TCC2-1 nil 3799589198 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (parse subtype "scaf.St"
          "scaf.endstate(scaf.len, scaf.G, scaf.s)")))
 (parse_TCC3 0
  (parse_TCC3-1 nil 3799589198
   ("" (skeep*)
    (("" (use "size_step")
      (("" (expand "restrict") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((size_step formula-decl nil scaf nil)
    (state type-eq-decl nil scaf nil)
    (fine_stack_scaffold? const-decl "bool" scaf nil)
    (scaffold type-eq-decl nil scaf nil)
    (good_entry? const-decl "bool" scaf nil)
    (entry type-decl nil entry_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (<= const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (up_non_terminal type-eq-decl nil scaf nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil scaf nil)
    (terminal_type formal-nonempty-type-decl nil scaf nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil scaf nil)
    (atomic_peg type-decl nil scaf nil)
    (non_terminal type-eq-decl nil scaf nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (restrict const-decl "R" restrict nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (parse termination
          "scaf.parse(scaf.len, scaf.G, scaf.s)(scaf.step(scaf.len, scaf.G, scaf.s)(scaf.St))"
          "nil")))
 (doparse_TCC1 0
  (doparse_TCC1-1 nil 3800416717 ("" (subtype-tcc) nil nil) nil nil
   (doparse subtype "scaf.len" "naturalnumbers.upto(scaf.len)")))
 (doparse_TCC2 0
  (doparse_TCC2-1 nil 3800416717 ("" (subtype-tcc) nil nil) nil nil
   (doparse subtype "0" "up_non_terminal")))
 (doparse_TCC3 0
  (doparse_TCC3-1 nil 3800416717 ("" (subtype-tcc) nil nil)
   ((good_entry? const-decl "bool" scaf nil)) nil
   (doparse subtype "entry_adt.pending"
    "(scaf.good_entry?(scaf.len, scaf.i))")))
 (doparse_TCC4 0
  (doparse_TCC4-1 nil 3800416717 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (num_non_terminals formal-const-decl "posnat" scaf nil)
    (non_terminal type-eq-decl nil scaf nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_entry? const-decl "bool" scaf nil)
    (good_scaffold? const-decl "bool" scaf nil)
    (full_scaffold? const-decl "bool" scaf nil)
    (fine_scaffold? const-decl "bool" scaf nil)
    (loop_or_pending? const-decl "bool" scaf nil)
    (stack_scaffold? const-decl "bool" scaf nil)
    (fine_stack_scaffold? const-decl "bool" scaf nil))
   nil
   (doparse subtype
    "(LAMBDA (i: naturalnumbers.upto(scaf.len)): (LAMBDA n: entry_adt.pending))"
    "(scaf.fine_stack_scaffold?(scaf.len, scaf.G, scaf.s)(scaf.len, 0, list_adt[non_terminal].null))")))
 (doparse_TCC5 0
  (doparse_TCC5-1 nil 3800416717 ("" (subtype-tcc) nil nil) nil nil
   (doparse subtype "0" "naturalnumbers.upto(scaf.len)"))))

