(define i_1::int) 
(define even?_2::(-> real bool)) 
(define odd?_3::(-> real bool)) 
(define jt_4::int) 
(define len_5::int) 
(define exp2_6::(-> real int)) 
(define-type ent_7) 
(define P_8::(-> ent_7 bool)) 
(define A_9::(-> real (-> real ent_7))) 
(define n_10::int) 
(define num_non_terminals_11::int) 
(define good_entry?_12::(-> int int (-> ent_7 bool))) 
(define card_13::(-> (-> real bool) int)) 
(define add_14::(-> int (-> real bool) (-> real bool))) 
(define y2id_15::(-> real bool)) 
(define nonempty?_16::(-> (-> real bool) bool)) 
(define Card_17::(-> (-> real bool) int)) 
(define sigma_18::(-> int int (-> real real) real)) 
(define y2id_19::(-> real int)) 
(define y2id_20::(-> real bool)) 
(define y2id_21::(-> real int)) 
(define u_22::ent_7) 
(define y2id_23::bool) 
(assert ((good_entry?_12  len_5 i_1)  u_22)) 
(assert (=  (card_13  y2id_20) (Card_17  y2id_20))) 
(assert (=  (card_13  (add_14  n_10 y2id_15)) (Card_17  (add_14  n_10 y2id_15)))) 
(assert (nonempty?_16  (add_14  n_10 y2id_15))) 
(assert ((good_entry?_12  len_5 i_1)  ((A_9  i_1)  n_10))) 
(assert (<  n_10 num_non_terminals_11)) 
(assert (<  num_non_terminals_11 256)) 
(assert (even?_2  256)) 
(assert (>  256 0)) 
(assert (<=  i_1 (+  1 jt_4))) 
(assert (>  (+  1 jt_4) 0)) 
(assert (<=  jt_4 len_5)) 
(assert (<=  len_5 (-  (exp2_6  32) 1))) 
(assert (>  (exp2_6  32) 32)) 
(assert (even?_2  32)) 
(assert (>  32 0)) 
(assert (odd?_3  1)) 
(assert (>  1 0)) 
(assert (even?_2  0)) 
(assert (=  i_1 (+  1 jt_4))) 
(assert (P_8  ((A_9  i_1)  n_10))) 
(assert (not (=  (+  (card_13  (add_14  n_10 y2id_15)) (sigma_18  0 jt_4 y2id_19)) (+  (card_13  y2id_20) (sigma_18  0 jt_4 y2id_21))))) 
(assert (P_8  u_22)) 
(assert (<  jt_4 len_5)) 
(assert y2id_23) 
(check)
