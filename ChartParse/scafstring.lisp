(in-package :pvs)

(defun parsestring ()
  #'(lambda (lamvar#0)
      (let ((N (project 1 lamvar#0))
            (G (project 2 lamvar#0))
            (nonterm (project 3 lamvar#0)))
        (declare (type (integer 0) N) (type (integer 0 *) nonterm))
        #'(lambda (str)
            (scaf__doparse (the (integer 0) N)
                           (the (integer 0) (length (the string str)))
                           G (coerce (the string str) 'vector)
                           (the (integer 0 *) nonterm))))))
(defun _parsestring (N G nonterm str)
  (declare (type (integer 0) N) (type (integer 0 *) nonterm)
   (type string str))
  (scaf__doparse (the (integer 0) N)
                 (the (integer 0) (length (the string str))) G
                 (coerce (the string str) 'vector)
                 (the (integer 0 *) nonterm)))
(defun parsestring! (N G nonterm str)
  (declare (type (integer 0) N) (type (integer 0 *) nonterm)
   (type string str))
  (scaf!doparse (the (integer 0) N)
                (the (integer 0) (length (the string str))) G
                (coerce (the string str) 'vector)
                (the (integer 0 *) nonterm)))
(defun str2char ()
  #'(lambda (x) (pvs-funcall (coerce (the string x) 'vector) 0)))
(defun _str2char (x)
  (declare (type string x))
  (pvs-funcall (coerce (the string x) 'vector) 0))
(defun str2char! (x)
  (declare (type string x))
  (pvs-funcall (coerce (the string x) 'vector) 0))
(defun gr1 ()
  #'(lambda (n)
      (if (the boolean (= (the fixnum n) 0))
          (make-choice_0 1 3)
        (if (the boolean (= (the fixnum n) 1))
            (make-concat_0 2 0)
          (if (the boolean (= (the fixnum n) 2))
              (make-terminal_0 (_extract1 (the string "a")))
            (if (the boolean (= (the fixnum n) 3))
                (make-epsilon_0)
              (make-epsilon_0)))))))
(defun _gr1 (n)
  (declare (type fixnum n))
  (if (the boolean (= (the fixnum n) 0))
      (make-choice_0 1 3)
    (if (the boolean (= (the fixnum n) 1))
        (make-concat_0 2 0)
      (if (the boolean (= (the fixnum n) 2))
          (make-terminal_0 (_extract1 (the string "a")))
        (if (the boolean (= (the fixnum n) 3))
            (make-epsilon_0)
          (make-epsilon_0))))))
(defun gr1! (n)
  (declare (type fixnum n))
  (if (the boolean (= (the fixnum n) 0))
      (make-choice_0 1 3)
    (if (the boolean (= (the fixnum n) 1))
        (make-concat_0 2 0)
      (if (the boolean (= (the fixnum n) 2))
          (make-terminal_0 (extract1! (the string "a")))
        (if (the boolean (= (the fixnum n) 3))
            (make-epsilon_0)
          (make-epsilon_0))))))
(defun test_0 () (_parsestring 4 (gr1) 0 (the string "aaaaa")))
(defun _test () (_parsestring 4 (gr1) 0 (the string "aaaaa")))
(defun test! () (parsestring! 4 (gr1) 0 (the string "aaaaa")))