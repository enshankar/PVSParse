(scafstring
 (parsestring_TCC1 0
  (parsestring_TCC1-1 nil 3799902970 ("" (inst + "char(0)") nil nil)
   ((char adt-constructor-decl "[below[256] -> (char?)]" character_adt
          nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (character type-decl nil character_adt nil))
   nil (parsestring existence "" "character_adt.character")))
 (str2char_TCC1 0
  (str2char_TCC1-1 nil 3799985766 ("" (subtype-tcc) nil nil) nil nil
   (str2char subtype "0" "below[x`length]")))
 (gr1_TCC1 0
  (gr1_TCC1-1 nil 3799986401 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil))
   nil (gr1 subtype "\"a\"" "{fs | fs`length = 1}")))
 (gr1_TCC2 0
  (gr1_TCC2-1 nil 3799986401 ("" (cond-coverage-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (gr1 coverage
    "(COND scafstring.n = 0 -> scaf[4, character_adt.character].choice(1, 3), scafstring.n = 1 -> scaf[4, character_adt.character].concat(2, 0), scafstring.n = 2 -> scaf[4, character_adt.character].terminal(finite_sequences[char].extract1(\"a\")), scafstring.n = 3 -> scaf[4, character_adt.character].epsilon ENDCOND)"
    "nil"))))

