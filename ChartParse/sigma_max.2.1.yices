(define jt_1::int) 
(define exp2_2::(-> real int)) 
(define even?_3::(-> real bool)) 
(define odd?_4::(-> real bool)) 
(define sigma_5::(-> int int (-> real real) real)) 
(define y2id_6::(-> real int)) 
(define num_non_terminals_7::int) 
(define-type ent_8) 
(define count_9::(-> real (-> (-> ent_8 bool) (-> (-> real ent_8) int)))) 
(define push_10::(-> int int ent_8)) 
(define A_11::(-> real (-> real ent_8))) 
(define sigma_12::(-> int int (-> real real) real)) 
(define y2id_13::(-> real int)) 
(assert (even?_3  (*  2 num_non_terminals_7))) 
(assert (even?_3  2)) 
(assert (>  2 0)) 
(assert (<=  (((count_9  num_non_terminals_7)  push_10?)  (A_11  (+  1 jt_1))) num_non_terminals_7)) 
(assert (>  (+  1 jt_1) 0)) 
(assert (<  num_non_terminals_7 256)) 
(assert (even?_3  256)) 
(assert (>  256 0)) 
(assert (<=  jt_1 (-  (exp2_2  32) 1))) 
(assert (odd?_4  1)) 
(assert (>  1 0)) 
(assert (>  (exp2_2  32) 32)) 
(assert (even?_3  32)) 
(assert (>  32 0)) 
(assert (even?_3  0)) 
(assert (<  jt_1 (-  (exp2_2  32) 1))) 
(assert (<=  (sigma_5  0 jt_1 y2id_6) (+  (*  jt_1 num_non_terminals_7) num_non_terminals_7))) 
(assert (not (<=  (+  (((count_9  num_non_terminals_7)  push_10?)  (A_11  (+  1 jt_1))) (sigma_12  0 jt_1 y2id_13)) (+  (*  jt_1 num_non_terminals_7) (*  2 num_non_terminals_7))))) 
(check)
