
%% PVS Version 7.1.173 - International Allegro CL Enterprise Edition 10.1 [64-bit Mac OS X (Intel)] (Feb 3, 2023 15:03)
%% 10.1 [64-bit Mac OS X (Intel)] (Feb 3, 2023 15:03)
$$$PVSHOME/.pvs.lisp
(in-package :pvs)


$$$PVSHOME/.pvsemacs
(let ((nasalib-path (pvs-send-and-wait "(extra-pvs-nasalib)"))) (cl-loop for el-file in (directory-files (format "%spvs-emacs" nasalib-path) nil ".el") do (load (format "%spvs-emacs/%s" nasalib-path el-file))))

$$$arrayCount.pvs
arrayCount   [T: TYPE ]
		: THEORY

  BEGIN

  len: VAR index

  P: VAR [T -> bool]

   arr(len): TYPE = ARRAY[below(len) -> T]

   count(len)(P)(A : arr(len)): upto(len) =
     card({i : below(len) | P(A(i))})

   u, v: VAR T

   count_update0: LEMMA
     (FORALL (i: below(len)), (A : arr(len)):
       NOT P(A(i)) AND P(u)
         IMPLIES  count(len)(P)(A WITH [(i) := u]) = count(len)(P)(A) + 1)

   count_update: LEMMA
     (FORALL (i: below(len)), (A : arr(len)):
       NOT P(A(i)) AND P(u)
         IMPLIES count(len)(P)(A) < count(len)(P)(A WITH [(i) := u]))

   count_update00: LEMMA
      (FORALL (i: below(len)), (A : arr(len)):
          count(len)(P)(A WITH [(i) := u]) =
	   IF P(A(i)) THEN IF P(u) THEN count(len)(P)(A) ELSE count(len)(P)(A) - 1 ENDIF
	    ELSIF P(u) THEN count(len)(P)(A) + 1 ELSE count(len)(P)(A) ENDIF)


   count_update1: LEMMA
     (FORALL (i: below(len)), (A : arr(len)):
       NOT P(A(i)) AND P(u)
         IMPLIES count(len)(P)(A) < count(len)(P)(A WITH [(i) |-> u]))

   count_update2: LEMMA
     (FORALL (i: below(len)), (A : arr(len)):
       P(A(i)) AND NOT P(u)
         IMPLIES count(len)(P)(A WITH [(i) := u]) < count(len)(P)(A))

   count_update3: LEMMA
     (FORALL (i: below(len)), (A : arr(len)):
       P(A(i)) AND NOT P(u)
         IMPLIES count(len)(P)(A WITH [(i) |-> u]) < count(len)(P)(A))


  END arrayCount

$$$arrayCount.prf
(arrayCount
 (count_TCC1 0
  (count_TCC1-1 nil 3798315575
   ("" (skeep)
    (("" (expand "is_finite")
      (("" (inst + "len" "id")
        (("" (typepred "id")
          (("" (expand "bijective?") (("" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (arr type-eq-decl nil arrayCount nil)
    (T formal-type-decl nil arrayCount nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (count subtype
          "{i: naturalnumbers.below(arrayCount.len) | arrayCount.P(arrayCount.A(i))}"
     "finite_set[below(len)]")))
 (count_TCC2 0
  (count_TCC2-1 nil 3798315575
   ("" (skeep)
    (("" (typepred "card[below(len)]({i: below(len) | P(A(i))})")
      (("1" (replace -1 :hide? t)
        (("1" (rewrite "Card_injection")
          (("1" (inst + "id")
            (("1" (typepred "id")
              (("1" (expand "bijective?") (("1" (ground) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "count_TCC1") nil nil))
      nil))
    nil)
   ((arr type-eq-decl nil arrayCount nil)
    (T formal-type-decl nil arrayCount nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Card_injection formula-decl nil finite_sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil nat_types nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (count_TCC1 subtype-tcc nil arrayCount nil))
   nil
   (count subtype
          "finite_sets[naturalnumbers.below(arrayCount.len)].card({i: naturalnumbers.below(arrayCount.len) | arrayCount.P(arrayCount.A(i))})"
     "naturalnumbers.upto(arrayCount.len)")))
 (count_update0 0
  (count_update0-1 nil 3804561128
   ("" (skeep)
    (("" (expand "count")
      ((""
        (case "{i_1: below(len) | P(A WITH [(i) := u](i_1))} = add(i, {i: below(len) | P(A(i))})")
        (("1" (replace -1 :hide? t)
          (("1" (rewrite "card_add")
            (("1" (grind) nil nil)
             ("2"
              (rewrite "finite_subset" :subst
               ("A" "{i: below(len) | TRUE}"))
              (("1" (grind) nil nil)
               ("2" (hide-all-but 1)
                (("2" (expand "is_finite")
                  (("2" (inst + "len" "LAMBDA (i: below(len)): i")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 3) (("2" (grind-with-ext) nil nil)) nil))
        nil))
      nil))
    nil)
   ((add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (arr type-eq-decl nil arrayCount nil)
    (T formal-type-decl nil arrayCount nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_add formula-decl nil finite_sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (below type-eq-decl nil nat_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_subset formula-decl nil finite_sets nil)
    (TRUE const-decl "bool" booleans nil)
    (count const-decl "upto(len)" arrayCount nil))
   shostak))
 (count_update 0
  (count_update-1 nil 3798315577
   ("" (skeep)
    (("" (expand "count")
      ((""
        (case "{i_1: below(len) | P(A WITH [(i) := u](i_1))} = add(i, {i: below(len) | P(A(i))})")
        (("1" (replace -1 :hide? t)
          (("1" (rewrite "card_add")
            (("1" (grind) nil nil)
             ("2"
              (rewrite "finite_subset" :subst
               ("A" "{i: below(len) | TRUE}"))
              (("1" (grind) nil nil)
               ("2" (hide-all-but 1)
                (("2" (expand "is_finite")
                  (("2" (inst + "len" "LAMBDA (i: below(len)): i")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 3) (("2" (grind-with-ext) nil nil)) nil))
        nil))
      nil))
    nil)
   ((count const-decl "upto(len)" arrayCount nil)
    (TRUE const-decl "bool" booleans nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (card_add formula-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-type-decl nil arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil))
   shostak))
 (count_update00 0
  (count_update00-1 nil 3806985200
   ("" (skeep)
    (("" (lift-if)
      (("" (ground)
        (("1" (expand count)
          (("1"
            (case-replace
             "{i_1: below(len) | P(A WITH [(i) := u](i_1))} = {i: below(len) | P(A(i))}")
            (("1" (hide 2) (("1" (grind-with-ext) nil nil)) nil)) nil))
          nil)
         ("2" (expand count)
          (("2"
            (case-replace
             "{i_1: below(len) | P(A WITH [(i) := u](i_1))} = remove(i, {i: below(len) | P(A(i))})")
            (("1" (rewrite card_remove)
              (("1" (use count_TCC1) nil nil)) nil)
             ("2" (grind-with-ext) nil nil))
            nil))
          nil)
         ("3" (expand count)
          (("3"
            (case-replace
             "{i_1: below(len) | P(A WITH [(i) := u](i_1))} = add(i, {i: below(len) | P(A(i))})")
            (("1" (rewrite card_add) (("1" (use count_TCC1) nil nil))
              nil)
             ("2" (grind-with-ext) nil nil))
            nil))
          nil)
         ("4" (expand count)
          (("4"
            (case-replace
             "{i_1: below(len) | P(A WITH [(i) := u](i_1))} = {i: below(len) | P(A(i))}")
            (("4" (grind-with-ext) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((card_add formula-decl nil finite_sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (card_remove formula-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (T formal-type-decl nil arrayCount nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (count_update1 0
  (count_update1-1 nil 3799389970
   ("" (skeep)
    (("" (expand "count")
      ((""
        (case "{i_1: below(len) | P(A WITH [(i) := u](i_1))} = add(i, {i: below(len) | P(A(i))})")
        (("1" (replace -1 :hide? t)
          (("1" (rewrite "card_add")
            (("1" (grind) nil nil)
             ("2"
              (rewrite "finite_subset" :subst
               ("A" "{i: below(len) | TRUE}"))
              (("1" (grind) nil nil)
               ("2" (hide-all-but 1)
                (("2" (expand "is_finite")
                  (("2" (inst + "len" "LAMBDA (i: below(len)): i")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 3) (("2" (grind-with-ext) nil nil)) nil))
        nil))
      nil))
    nil)
   ((count const-decl "upto(len)" arrayCount nil)
    (TRUE const-decl "bool" booleans nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (card_add formula-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-type-decl nil arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil))
   shostak))
 (count_update2 0
  (count_update2-1 nil 3799389749
   ("" (skeep)
    (("" (expand "count")
      ((""
        (case "{i_1: below(len) | P(A WITH [(i) := u](i_1))} = remove(i, {i: below(len) | P(A(i))})")
        (("1" (replace -1 :hide? t)
          (("1" (rewrite "card_remove")
            (("1" (grind) nil nil)
             ("2"
              (rewrite "finite_subset" :subst
               ("A" "{i: below(len) | TRUE}"))
              (("1" (grind) nil nil)
               ("2" (hide-all-but 1)
                (("2" (expand "is_finite")
                  (("2" (inst + "len" "LAMBDA (i: below(len)): i")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 3) (("2" (grind-with-ext) nil nil)) nil))
        nil))
      nil))
    nil)
   ((count const-decl "upto(len)" arrayCount nil)
    (/= const-decl "boolean" notequal nil)
    (TRUE const-decl "bool" booleans nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-type-decl nil arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil))
   shostak))
 (count_update3 0
  (count_update3-1 nil 3799420828
   ("" (skeep)
    (("" (expand "count")
      ((""
        (case "{i_1: below(len) | P(A WITH [(i) := u](i_1))} = remove(i, {i: below(len) | P(A(i))})")
        (("1" (replace -1 :hide? t)
          (("1" (rewrite "card_remove")
            (("1" (grind) nil nil)
             ("2"
              (rewrite "finite_subset" :subst
               ("A" "{i: below(len) | TRUE}"))
              (("1" (grind) nil nil)
               ("2" (hide-all-but 1)
                (("2" (expand "is_finite")
                  (("2" (inst + "len" "LAMBDA (i: below(len)): i")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 3) (("2" (grind-with-ext) nil nil)) nil))
        nil))
      nil))
    nil)
   ((count const-decl "upto(len)" arrayCount nil)
    (/= const-decl "boolean" notequal nil)
    (TRUE const-decl "bool" booleans nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (T formal-type-decl nil arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil))
   shostak)))


$$$sigmatopdown.pvs
sigmatopdown	: THEORY

  BEGIN

len, max: VAR index %the length of the input
byte: TYPE = below(256)
strings(len): TYPE = ARRAY[below(len) -> byte]
num_non_terminals: byte = 255
non_terminal: TYPE = below(num_non_terminals)



ent: DATATYPE
  BEGIN
  fail(dep: uint64): fail?
  pending: pending?
  loop: loop?
  good(dep: uint64, span: uint32): good?
  push(pos: uint32, nt: uint8): push?
  END ent

peg  : DATATYPE
  BEGIN
   epsilon : epsilon?
   failure : failure?
   any(p : [byte -> bool]) : any?
   terminal(a: byte) : terminal?
   concat(e1, e2: non_terminal) : concat?
   choice(e1, e2: non_terminal) : or?
   check(e: non_terminal) : and?
   neg(e: non_terminal) : not?
  END peg


JUDGEMENT upto(len) SUBTYPE_OF uint32
JUDGEMENT non_terminal SUBTYPE_OF uint8

%The scaffold entry can be fail, loop, good(span), or pending.
good_good_entry?(len, (pos: upto(len)))(x: (good?)): bool =  (pos + span(x) <= len)

%nt(x) = num_non_terminals at the end of the list. 
good_push_entry?(len)(x: ent): bool = (push?(x) AND pos(x) <= len AND nt(x) <= num_non_terminals)

fine_push_entry?(len)(x: ent): bool = good_push_entry?(len)(x) AND nt(x) < num_non_terminals

nice_entry?(len, (pos: upto(len)))(x: ent): bool =
    (good?(x) => good_good_entry?(len, pos)(x)) AND (push?(x) => good_push_entry?(len)(x))
    
scaffold(len) : TYPE = ARRAY[pos: upto(len) -> ARRAY[non_terminal -> (nice_entry?(len, pos))]]

m, n: VAR non_terminal

loop_or_push?(e: ent): bool = (loop?(e) or push?(e))

lang_spec: TYPE = ARRAY[non_terminal -> peg]

G: VAR lang_spec

instack(len, (A : scaffold(len)))(pos: upto(len), nt: non_terminal):  bool =
   push?(A(pos)(nt))

f: VAR {g : [(push?) -> uint64] | FORALL (x : (push?)): nt(x) = num_non_terminals IMPLIES g(x) = 0}

successor(len, G, (A: scaffold(len)))(entry1, entry2: (good_push_entry?(len))): bool =
  (LET p1 = pos(entry1),
       nt1 = nt(entry1),
       p2 = pos(entry2),
       nt2 = nt(entry2)
     IN nt1 >= num_non_terminals
        OR CASES G(nt1) OF
           concat(n1, n2):  (p2 = p1 AND nt2 = n1) OR
	                   (good?(A(p1)(n1)) AND nt2 = n2 AND p2 = p1 + span(A(p1)(n1))),
           choice(n1, n2): (p2 = p1 AND nt2 = n1) OR
	                   (fail?(A(p1)(n1)) AND nt2 = n2 AND p2 = p1),
           check(n1): (nt2 = n1 AND p2 = p1),
  	   neg(n1): (nt2 = n1 AND p2 = p1)
           ELSE FALSE
	   ENDCASES)

depth: VAR uint64

root, stack: VAR (push?)

IMPORTING  arrayCount
%IMPORTING reals@sigma

sigma(max, (A: ARRAY[upto(max) -> nat]))(j: upto(max)): RECURSIVE nat =
 IF j = 0 then A(0) ELSE A(j) + sigma(max, A)(j-1) ENDIF
  MEASURE j
  
% sigma_restrict: LEMMA
%    (FORALL (A: scaffold(len)), (j, k: upto(len)):
%    j <= k => 
%  sigma(0, j, LAMBDA (i: upto(j)) : count(num_non_terminals)(push?)(A(i))) =
%  sigma(0, j, LAMBDA (i: upto(k)) : count(num_non_terminals)(push?)(A(i))))

% sigma_restrict_len: LEMMA
%    (FORALL (A: scaffold(len)), (j: upto(len)):
%   sigma(0, j, LAMBDA (i: upto(j)) : count(num_non_terminals)(push?)(A(i))) =
%  sigma(0, j, LAMBDA (i: upto(len)) : count(num_non_terminals)(push?)(A(i))))


 % sigma_nat: LEMMA
 % (FORALL (i: upto(len)), (F: [upto(len) -> nat]): 
 %       sigma(len, F)(i) >= 0)

 sigma_pos: LEMMA
       (FORALL (F: [upto(len) -> nat]), (i, j: upto(len)):
          F(i) > 0 AND j >= i IMPLIES sigma(len, F)(j) > 0)

sigma_dec: LEMMA
      (FORALL (F: [upto(len) -> nat]), (i, j: upto(len)):
         F(i) > 0 IMPLIES 
         sigma(len, F WITH [(i) := F(i) - 1])(j) = (IF j < i THEN sigma(len, F)(j) ELSE sigma(len, F)(j) - 1 ENDIF))

sigma_inc: LEMMA 
       (FORALL (F: [upto(len) -> nat]), (i, j: upto(len)):
          sigma(len, F WITH [(i) := F(i) + 1])(j) = (IF j < i THEN sigma(len, F)(j) ELSE sigma(len, F)(j) + 1 ENDIF))

sigma_zero: LEMMA
  (FORALL (j : upto(len)): 
    sigma(len, (LAMBDA (i : upto(len)):  0))(j) = 0)

scafcount(len, (A: scaffold(len)), (P: [ent->bool]), (j: upto(len))): uint64 = sigma(len,  LAMBDA (i: upto(len)) : count(num_non_terminals)(P)(A(i)))(j)

sigma_max: LEMMA
   (FORALL (A: scaffold(len), (P: [ent -> bool]), (j: upto(len))):
%     j <= len => 
      scafcount(len, A, P, j) <= (j + 1) * num_non_terminals)

scafcount_max: LEMMA
(FORALL (A: scaffold(len), (P: [ent -> bool]), (j: upto(len))):
%     j <= len => 
      scafcount(len, A, P, j) <= exp2(40))
   

scafcount0: LEMMA
 (FORALL len, (A: scaffold(len)), (P: [ent->bool]): 
    scafcount(len, A, P, 0) = count(num_non_terminals)(P)(A(0)))

scafcount_step: LEMMA
  (FORALL len, (A: scaffold(len)), (P: [ent->bool]), (j: below(len)): 
    scafcount(len, A, P, j+1) = count(num_non_terminals)(P)(A(j+1)) + scafcount(len, A, P, j))

scafcount_update: LEMMA
 (FORALL len, (A: scaffold(len)), (P: [ent->bool]), (i, j: upto(len)), (n: non_terminal), (u: (nice_entry?(len, i))):
   scafcount(len, A WITH [(i)(n) := u], P, j) =
   IF i > j THEN scafcount(len, A, P, j)
   ELSIF P(u) THEN
        IF P(A(i)(n)) THEN scafcount(len, A, P, j) ELSE scafcount(len, A, P, j) + 1 ENDIF
   ELSIF P(A(i)(n)) THEN scafcount(len, A, P, j) - 1 ELSE scafcount(len, A, P, j) ENDIF)

pushcount(len, (A: scaffold(len))): uint64 = scafcount(len, A, push?, len)

good_or_fail?(entry: ent): bool = (good?(entry) OR fail?(entry))

gfcount(len, (A: scaffold(len))): uint64 = scafcount(len, A, good_or_fail?, len)

good_depth?(len, (A : scaffold(len)))(depth: uint64): bool =
  (pushcount(len, A) = depth)

good_stack?(len, G, depth, (A : scaffold(len)))(stack: (good_push_entry?(len))):
   RECURSIVE bool =
   (IF nt(stack) >= num_non_terminals
     THEN depth = 0
     ELSE LET entry = A(pos(stack))(nt(stack))
	    IN good_push_entry?(len)(entry)
	       AND (nt(entry) = num_non_terminals OR successor(len, G, A)(entry, stack))
	            AND depth > 0 AND 
	              good_stack?(len, G, depth - 1, A)(entry)
    ENDIF)
    MEASURE depth

mem_stack?(len, G, depth, (A : scaffold(len)))(entry: (fine_push_entry?(len)), stack: (good_stack?(len, G, depth, A))): RECURSIVE bool
 = (IF nt(stack) >= num_non_terminals
     THEN FALSE
     ELSE entry = stack OR mem_stack?(len, G, depth - 1, A)(entry, A(pos(stack))(nt(stack)))
    ENDIF)
    MEASURE depth

mem_stack_push: LEMMA
  (FORALL (A: scaffold(len)), (entry: (fine_push_entry?(len))), (stack:  (good_stack?(len, G, depth, A))), (u: (nice_entry?(len, (pos(entry))))):
    good_stack?(len, G, depth, A)(stack) AND 
    mem_stack?(len, G, depth, A)(entry, stack) => push?(A(pos(entry))(nt(entry))))

push_or_pending?(entry: ent): bool =
  push?(entry) OR pending?(entry)

good_mem_stack: LEMMA
  (FORALL (A: scaffold(len)), (entry, stack: (good_push_entry?(len))), (u: (nice_entry?(len, (pos(entry))))): 
   good_stack?(len, G, depth, A)(stack) AND
   fine_push_entry?(len)(entry) AND
   NOT mem_stack?(len, G, depth, A)(entry, stack) AND
   push_or_pending?(A(pos(entry))(nt(entry)))
   IMPLIES good_stack?(len, G, depth, A WITH [(pos(entry))(nt(entry)):= u])(stack))

mem_mem_stack: LEMMA
  (FORALL (A: scaffold(len)), (entry, v, stack: (good_push_entry?(len))), (u: (nice_entry?(len, (pos(entry))))): 
   good_stack?(len, G, depth, A)(stack) AND
   fine_push_entry?(len)(entry) AND fine_push_entry?(len)(v) AND
   NOT mem_stack?(len, G, depth, A)(entry, stack) AND
   push_or_pending?(A(pos(entry))(nt(entry)))
   IMPLIES mem_stack?(len, G, depth, A WITH [(pos(entry))(nt(entry)):= u])(v, stack)
           = mem_stack?(len, G, depth, A)(v, stack))

good_mem_stack_push: LEMMA
  (FORALL (A: scaffold(len)), (pos: upto(len)),  (stack: (good_push_entry?(len))):
   depth <= exp2(40) AND 
   good_stack?(len, G, depth, A)(stack) AND
   pending?(A(pos)(n)) AND
   successor(len, G, A)(stack, push(pos, n))
   IMPLIES good_stack?(len, G, depth + 1, A WITH [(pos)(n) := stack])(push(pos, n)))



fine_stack?(len, G, depth, (A: scaffold(len)))(stack: (good_stack?(len, G, depth, A))): RECURSIVE bool =
   (IF nt(stack) >= num_non_terminals
     THEN TRUE
     ELSE LET rest = A(pos(stack))(nt(stack))
          IN NOT mem_stack?(len, G, depth - 1, A)(stack, rest) AND
             fine_stack?(len, G, depth - 1, A)(A(pos(stack))(nt(stack)))
    ENDIF)
    MEASURE depth

fine_mem_stack: LEMMA
  (FORALL (A: scaffold(len)), (entry, stack: (good_push_entry?(len))), (u: (nice_entry?(len, (pos(entry))))): 
   good_stack?(len, G, depth, A)(stack) AND
   fine_push_entry?(len)(entry) AND 
   NOT mem_stack?(len, G, depth, A)(entry, stack) AND
   push_or_pending?(A(pos(entry))(nt(entry)))
   IMPLIES fine_stack?(len, G, depth, A WITH [(pos(entry))(nt(entry)):= u])(stack)
           = fine_stack?(len, G, depth, A)(stack))

% dgood?(d: uint64, u: ent): bool = good?(u) AND dep(u) < d
% dfail?(d: uint64, u: ent): bool = fail?(u) AND dep(u) < d

loop_ready?(len, G, (A: scaffold(len)), (i: upto(len)), n): bool =
   (CASES G(n) OF
           concat(n1, n2):  loop_or_push?(A(i)(n1)) or
  	                    (good?(A(i)(n1)) 
  			     AND loop_or_push?(A(i + span(A(i)(n1)))(n2))),
           choice(n1, n2): loop_or_push?(A(i)(n1)) or (fail?(A(i)(n1)) AND loop_or_push?(A(i)(n2))),
           check(n1): loop_or_push?(A(i)(n1)),
  	   neg(n1): loop_or_push?(A(i)(n1))
           ELSE FALSE
       ENDCASES)
   				       
good_fail?(len, G, (s: strings(len)))((A: scaffold(len)), (i : upto(len)), n, (d: uint64)): bool =
  (CASES G(n) OF
           any(p): (i = len OR NOT p(s(i))) AND d = 0,
           terminal(a): (i = len OR a /= s(i)) AND d = 0,
           concat(n1, n2):  (fail?(A(i)(n1)) AND d = 1 + dep(A(i)(n1))) OR
                             (good?(A(i)(n1)) AND 
  			      fail?(A(i + span(A(i)(n1)))(n2)) AND d = 1 + max(dep(A(i)(n1)), dep(A(i + span(A(i)(n1)))(n2)))),
           choice(n1, n2): fail?(A(i)(n1)) AND fail?(A(i)(n2)) AND d = 1 + max(dep(A(i)(n1)), dep(A(i)(n2))),
           check(n1): fail?(A(i)(n1)) AND d = 1 + dep(A(i)(n1)),
  	   neg(n1): good?(A(i)(n1)) AND d = 1 + dep(A(i)(n1)),
  	   failure: d = 0
           ELSE FALSE
       ENDCASES)

good_loop?(len, G)(A: scaffold(len), (i: upto(len)), n): bool =
(CASES G(n) OF
           concat(n1, n2):  loop?(A(i)(n1)) or
  	                    (good?(A(i)(n1)) 
  			     AND loop?(A(i + span(A(i)(n1)))(n2))),
           choice(n1, n2): loop?(A(i)(n1)) or (fail?(A(i)(n1)) AND loop?(A(i)(n2))),
           check(n1): loop?(A(i)(n1)),
  	   neg(n1): loop?(A(i)(n1))
           ELSE FALSE
       ENDCASES)

good_good?(len, G, (s: strings(len)))((A: scaffold(len)), (i: upto(len)), n, (d: uint64), (sp :upto(len - i))): bool =
 (CASES G(n) OF
         epsilon: sp = 0 AND d = 0,
  	 any(p): sp = 1 AND p(s(i)) AND d = 0,
  	 terminal(a): sp = 1 AND s(i) = a AND d = 0,
  	 concat(n1, n2): good?(A(i)(n1)) 
  	                 AND good?(A(i + span(A(i)(n1)))(n2)) AND d = 1 + max(dep(A(i)(n1)), dep(A(i + span(A(i)(n1)))(n2))),
  	 choice(n1, n2): (good?(A(i)(n1)) AND d = 1 + dep(A(i)(n1)))
	                OR (fail?(A(i)(n1)) AND good?(A(i)(n2)) AND d = 1 + max(dep(A(i)(n1)), dep(A(i)(n2)))),
  	 check(n1): good?(A(i)(n1)) AND sp = 0 AND d = 1 + dep(A(i)(n1)),
  	 neg(n1): fail?(A(i)(n1)) AND sp = 0 AND d = 1 + dep(A(i)(n1)),
  	 failure: FALSE
  	 ENDCASES)

good_entry?(len, G, (s: strings(len)))(A : scaffold(len), (i : upto(len)), n, (u: ent)): bool =
   CASES u OF
    fail(d): good_fail?(len, G, s)(A, i, n, d),
    loop: loop_ready?(len, G, A,  i, n), %don't need good_loop?
    good(d, sp):  sp <= len - i AND good_good?(len, G, s)(A, i, n, d, sp)
    ELSE TRUE
    ENDCASES

fine_entry?(len, G, (s: strings(len)))(A : scaffold(len), (i : upto(len)), n, (u: ent)): bool =
   CASES u OF
    fail(d): good_fail?(len, G, s)(A, i, n, d),
    loop: loop_ready?(len, G, A,  i, n), %don't need good_loop?
    good(d, sp):  sp <= len - i AND good_good?(len, G, s)(A, i, n, d, sp)
    ELSE push?(u) AND pending?(A(i)(n))
    ENDCASES

good_tscaffold?(len, G, (s: strings(len)))(A : scaffold(len)): bool =
 (FORALL (i: upto(len)), n: good_entry?(len, G, s)(A, i, n, A(i)(n)) AND
              (good_or_fail?(A(i)(n)) => dep(A(i)(n)) <= gfcount(len, A)))

% full_stack?(len, G, depth, (A : scaffold(len)))(stack: (good_stack?(len, G, depth, A))): bool =
%    (FORALL (pos: upto(len)), m : instack(len, A)(pos, m) => mem_stack?(len, G, depth, A)(push(pos, m), stack))

good_root?(len, (A: scaffold(len)))((rootpos: upto(len)), rootnt : non_terminal): bool =
  (NOT pending?(A(rootpos)(rootnt)))

fine_scaffold?(len, G, (s: strings(len)))((rootpos : upto(len)), (rootnt: non_terminal))(A : scaffold(len)): bool =
         good_root?(len, A)(rootpos, rootnt) AND
   good_tscaffold?(len, G, s)(A)

good_good_tscaffold: LEMMA
  (FORALL (s: strings(len)), (A: scaffold(len)), (pos: upto(len)), (nt: non_terminal), (u: (nice_entry?(len, pos))):
   push_or_pending?(A(pos)(nt)) AND
   good_tscaffold?(len, G, s)(A) AND
   fine_entry?(len, G, s)(A, pos, nt, u) AND
   (FORALL (j: upto(len)), m: loop?(A(j)(m)) IMPLIES loop_ready?(len, G, A, pos, nt))
   IMPLIES good_tscaffold?(len, G, s)(A WITH [(pos)(nt):= u]))

% fine_scaffold(len, G, s : strings(len))(rootpos: upto(len), rootnt : non_terminal)): TYPE
%  = (fine_scaffold(len, G, s)(rootpos, rootnt))

% update_entry(len, G, s: strings(len))(rootpos : upto(len), rootnt: non_terminal)(A : fine_scaffold(len, G, s)(rootpos, rootnt), entry: (good_push_entry?(len)), u : (fine_entry?(len, G, s)(A, pos(entry), nt(entry)): fine_scaffold(len, G, s)(rootpos, rootnt)
%  = A WITH [(pos(entry))(nt(entry)):= u]





state(len, G, (s: strings(len)), (rootpos: upto(len)), (rootnt: non_terminal)): TYPE
    = [# scaf: (fine_scaffold?(len, G, s)(rootpos, rootnt)), 
         depth: (good_depth?(len, scaf)),
	 stack: (fine_stack?(len, G, depth, scaf)),
	 lflag: {b: bool | IF b
	                     THEN nt(stack) = num_non_terminals OR loop_ready?(len, G, scaf, pos(stack), nt(stack))
			     ELSE (FORALL (i: upto(len)), n: NOT loop?(scaf(i)(n))) ENDIF}
	#]
         

empty?(stack): bool = (nt(stack) = num_non_terminals)

% putstack(len, G, (s: strings(len)), (start: upto(len)), (root: non_terminal))(St: state(len, G, s, start, root) | NOT empty?(St`stack))((pos: upto(len)), (n| (pending?(St`scaf(pos)(n)) OR push?(St`scaf(pos)(n))) AND successor(len, G, St`scaf)(St`stack, push(pos, n))))
%    : state(len, G, s, start, root)
%  = (IF instack(len, St`scaf)(pos, n)
%        THEN St WITH [`scaf(pos)(n) := loop]
%        ELSE St WITH [`stack := push(pos, n), depth := St`depth + 1, `scaf(pos)(n) := St`stack]
%        ENDIF)

step(len, G, (s: strings(len)), (start: upto(len)), (rootnt: non_terminal))(St : state(len, G, s, start, rootnt)): state(len, G, s, start, rootnt)
 = (LET scaf = St`scaf,
	stack = St`stack,
	depth = St`depth,
	lflag = St`lflag
     IN
    IF empty?(stack)
    THEN St
    ELSE LET pos = pos(stack),
             cur = nt(stack),
	     rest = scaf(pos)(cur)
	  IN CASES G(cur) OF
            epsilon: St WITH [`scaf(pos)(cur) := good(0, 0), `stack := rest, `depth := depth - 1],
	    failure: St WITH [`scaf(pos)(cur) := fail(0), `stack := rest, `depth := depth - 1],
	    any(p): (LET v = IF pos = len OR NOT p(s(pos)) THEN fail(0) ELSE good(0, 1) ENDIF
	           IN St WITH [`scaf(pos)(cur) := v, `stack := rest, `depth := depth - 1]),
            terminal(a): (LET v = IF pos = len OR a /= s(pos) THEN fail(0) ELSE good(0, 1) ENDIF
	                   IN St WITH [`scaf(pos)(cur) := v, `stack := rest, `depth := depth - 1]),
            concat(n1, n2): (CASES St`scaf(pos)(n1) OF
	                      fail(d1): St WITH [`scaf(pos)(cur) := fail(d1+1), `stack := rest, `depth := depth - 1],
			      good(d1, sp): CASES St`scaf(pos + sp)(n2) OF
			                   fail(d2): St WITH [`scaf(pos)(cur) := fail(1 + max(d1, d2)), `stack := rest, `depth := depth - 1],
					   good(d2, sp2): St WITH [`scaf(pos)(cur) := good(1+max(d1, d2), sp + sp2), `stack := rest, `depth := depth - 1],
					   pending: St WITH [`stack := push(pos + sp, n2), `depth := St`depth + 1, `scaf(pos+sp)(n2) := St`stack]
					   ELSE St WITH [`scaf(pos)(cur) := loop, `depth := depth - 1, `stack := rest, lflag := TRUE]
					ENDCASES,
			      pending: St WITH [`stack := push(pos, n1), depth := depth + 1, `scaf(pos)(n1) := stack]
			      ELSE St WITH [`scaf(pos)(cur) := loop, `depth := depth - 1, `stack := rest, lflag := TRUE]
			      ENDCASES),
	    choice(n1, n2): (CASES scaf(pos)(n1) OF
	                      fail(d1): CASES scaf(pos)(n2) OF
			                   fail(d2): St WITH [`scaf(pos)(cur) := fail(max(d1,d2)+1), `stack := rest, `depth := depth - 1],
					   good(d2, sp): St WITH [`scaf(pos)(cur) := good(max(d1, d2) + 1, sp), `stack := rest, `depth := depth - 1],
					   pending: St WITH [`stack := push(pos, n2), `depth := depth + 1, `scaf(pos)(n2) := stack]
					   ELSE St WITH [`scaf(pos)(cur) := loop, `depth := depth - 1, `stack := rest, lflag := TRUE]
					ENDCASES,
			      good(d1, sp): St WITH [`scaf(pos)(cur) := good(d1+1, sp), `stack := rest, `depth := depth - 1],
			      pending: St WITH [`stack := push(pos, n1), `depth := depth + 1, `scaf(pos)(n1) := stack]
			      ELSE St WITH [`scaf(pos)(cur) := loop, `depth := depth - 1, `stack := rest, lflag := TRUE]
			      ENDCASES),
	    check(n1): (CASES scaf(pos)(n1) OF
	                      fail(d1): St WITH [`scaf(pos)(cur) := fail(d1+1), `stack := rest, `depth := depth - 1],
			      good(d1, sp): St WITH [`scaf(pos)(cur) := good(d1+1, 0), `stack := rest, `depth := depth - 1],
			      pending: St WITH [`stack := push(pos, n1), `depth := depth + 1, `scaf(pos)(n1) := stack]
			      ELSE St WITH [`scaf(pos)(cur) := loop, `depth := depth - 1, `stack := rest, lflag := TRUE]
			      ENDCASES),
	    neg(n1): (CASES scaf(pos)(n1) OF
	                      fail(d1): St WITH [`scaf(pos)(cur) := good(d1+1, 0), `stack := rest, `depth := depth - 1],
			      good(d1, sp): St WITH [`scaf(pos)(cur) := fail(d1+1), `stack := rest, `depth := depth - 1],
			      pending: St WITH [`stack := push(pos, n1), `depth := depth + 1, `scaf(pos)(n1) := stack]
			      ELSE St WITH [`scaf(pos)(cur) := loop, `depth := depth - 1, `stack := rest, lflag := TRUE]
			      ENDCASES)
          ENDCASES			      
    ENDIF)

IMPORTING  arrayCount


%cmember(len)(l: list[stackentry(len)])(pn: stackentry(len)): bool = member(pn, l)

% membership_update: LEMMA
%    (FORALL (a: non_terminal), (l: list[non_terminal]): 
%       count(num_non_terminals)(id[bool])(cmember(cons(a, l))) =
%       count(num_non_terminals)(id[bool])(cmember(l) WITH [(a) := TRUE]))


 size(len, G, (s: strings(len)), pos: upto(len), n)(St : state(len, G, s, pos, n)): ordinal
=
    lex2(scafcount(len, St`scaf, push_or_pending?, len), 
         ((len + 1) * num_non_terminals) - St`depth)

% size_putstack:
%   JUDGEMENT putstack(len, G, (s: strings(len)))(St: state(len, G, s) | NOT null?(St`stack))(n | pending?(St`scaf(St`pos)(n)))
%    HAS_TYPE {St1: state(len, G, s) | size(len, G, s)(St1) < size(len, G, s)(St)}

% size_step: LEMMA
%  FORALL len, G, (s: strings(len)), (St: state(len, G, s)): 
%    NOT (St`pos = 0 AND St`root = num_non_terminals)
%    IMPLIES size(len, G, s)(step(len, G, s)(St)) < size(len, G, s)(St)

endstate(len, G, (s: strings(len)), (rootpos: upto(len)), (rootnt: non_terminal)): TYPE
 = {st: state(len, G, s, rootpos, rootnt) |
      empty?(st`stack)}


 parse(len, G, (s: strings(len)), (start: upto(len)), (root: non_terminal))(St : state(len, G, s, start, root)): RECURSIVE endstate(len, G, s, start, root)
  = (IF St`depth = 0
      THEN St
      ELSE parse(len, G, s, start, root)(step(len, G, s, start, root)(St))
      ENDIF)
      MEASURE size(len, G, s, start, root)(St) BY <

 doparse(len, G, (s: strings(len)), n): ent
   = (LET pend = (LAMBDA n: pending),
          St: state(len, G, s, 0, n) = (# 
 		 stack := push(0, n),
		 depth := 1,
 		 scaf := (LAMBDA (i: upto(len)): pend) WITH [(0)(n) := push(0, num_non_terminals)],
		 lflag := FALSE #)
      IN parse(len, G, s, 0, n)(St)`scaf(0)(n))
       
  END sigmatopdown

$$$sigmatopdown.prf
(sigmatopdown
 (subtype_TCC1 0
  (subtype_TCC1-1 nil 3804536638 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (subtype_ subtype "sigmatopdown.x" "uint32")))
 (subtype_TCC2 0
  (subtype_TCC2-1 nil 3804564519 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (subtype_ subtype "sigmatopdown.x" "uint8")))
 (fine_push_entry?_TCC1 0
  (fine_push_entry?_TCC1-1 nil 3807728459 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (fine_push_entry? subtype "sigmatopdown.x" "(sigmatopdown.push?)")))
 (successor_TCC1 0
  (successor_TCC1-1 nil 3804904050 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (successor subtype "sigmatopdown.entry1" "(sigmatopdown.push?)")))
 (successor_TCC2 0
  (successor_TCC2-1 nil 3804904050 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (uint8 type-eq-decl nil integertypes nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (successor subtype "sigmatopdown.entry2" "(sigmatopdown.push?)")))
 (successor_TCC3 0
  (successor_TCC1-1 nil 3804547853 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (uint8 type-eq-decl nil integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (successor subtype "sigmatopdown.nt1" "non_terminal")))
 (successor_TCC4 0
  (successor_TCC1-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (uint8 type-eq-decl nil integertypes nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (successor subtype "sigmatopdown.p1"
    "naturalnumbers.upto(sigmatopdown.len)")))
 (successor_TCC5 0
  (successor_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (uint8 type-eq-decl nil integertypes nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (successor subtype "sigmatopdown.p1"
    "naturalnumbers.upto(sigmatopdown.len)")))
 (sigma_TCC1 0
  (sigma_TCC1-1 nil 3885810362 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (sigma subtype "0" "naturalnumbers.upto(sigmatopdown.max)")))
 (sigma_TCC2 0
  (sigma_TCC2-1 nil 3885810362 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (sigma subtype "(number_fields.-)(sigmatopdown.j, 1)"
          "naturalnumbers.upto(sigmatopdown.max)")))
 (sigma_TCC3 0
  (sigma_TCC4-1 nil 3885810362 ("" (termination-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (sigma termination
          "sigmatopdown.sigma(sigmatopdown.max, sigmatopdown.A)((number_fields.-)(sigmatopdown.j, 1))"
          "nil")))
 (sigma_pos 0
  (sigma_pos-1 nil 3885943581
   ("" (skolem + (len F i "_")) (("" (induct-and-simplify j) nil nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (sigma_dec_TCC1 0
  (sigma_dec_TCC1-1 nil 3885933801 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (sigma_dec subtype
    "(number_fields.-)(sigmatopdown.F(sigmatopdown.i), 1)" "nat")))
 (sigma_dec 0
  (sigma_dec-1 nil 3885933802
   ("" (skolem + (len F i "_"))
    (("" (induct-and-simplify "j") nil nil)) nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (i skolem-const-decl "upto(len)" sigmatopdown nil)
    (F skolem-const-decl "[upto(len) -> nat]" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (sigma_inc 0
  (sigma_inc-1 nil 3885943324
   ("" (skolem + (len F i "_"))
    (("" (induct-and-simplify "j") nil nil)) nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (sigma_zero 0
  (sigma_zero-1 nil 3886210429
   ("" (skolem + ("len" "_")) (("" (induct-and-simplify j) nil nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (scafcount_TCC1 0
  (scafcount_TCC4-1 nil 3806632141 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil))
   nil (scafcount subtype "sigmatopdown.num_non_terminals" "index")))
 (scafcount_TCC2 0
  (scafcount_TCC3-1 nil 3885810362
   ("" (skolem + (len A P "_"))
    ((""
      (case "FORALL ((j: upto(len))):
                             sigma(len,
                                  LAMBDA (i: upto(len)): count[ent](num_non_terminals)(P)(A(i)))(j)
                              <= (j + 1) * num_non_terminals")
      (("1" (skeep)
        (("1" (case "(j + 1) * num_non_terminals <= exp2(64) - 1")
          (("1" (assert) (("1" (inst?) (("1" (assert) nil nil)) nil))
            nil)
           ("2" (hide -1 2)
            (("2"
              (use le_times_le_pos :subst
                   (nnx "j + 1" y "exp2(32)" nnz num_non_terminals w
                    "exp2(8)"))
              (("2" (ground)
                (("1" (rewrite exp2_sum :dir RL)
                  (("1" (grind) nil nil)) nil)
                 ("2" (typepred "num_non_terminals")
                  (("2" (typepred j)
                    (("2" (typepred len) (("2" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (induct j)
          (("1" (expand "sigma") (("1" (assert) nil nil)) nil)
           ("2" (skeep*)
            (("2" (expand "sigma" +) (("2" (assert) nil nil)) nil))
            nil)
           ("3" (hide 2) (("3" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (hide 2) (("3" (grind) nil nil)) nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (ent type-decl nil sigmatopdown nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (exp2_sum formula-decl nil exp2 nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pred type-eq-decl nil defined_types nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (scafcount subtype
    "sigmatopdown.sigma(sigmatopdown.len, LAMBDA (i: naturalnumbers.upto(sigmatopdown.len)): arrayCount[sigmatopdown.ent].count(sigmatopdown.num_non_terminals)(sigmatopdown.P)(sigmatopdown.A(i)))(sigmatopdown.j)"
    "uint64")))
 (sigma_max 0
  (sigma_max-1 nil 3806353166
   ("" (skolem + (len A P "_"))
    (("" (induct j)
      (("1" (grind :exclude count) nil nil)
       ("2" (skeep*)
        (("2" (expand "scafcount")
          (("2" (expand "sigma" +) (("2" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (TRUE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (scafcount_max 0
  (scafcount_max-1 nil 3807566158
   ("" (skeep*)
    (("" (use sigma_max)
      (("" (use "le_times_le_pos" :subst (y "exp2(32)" w "exp2(8)"))
        (("" (ground)
          (("1" (rewrite exp2_sum :dir RL) (("1" (assert) nil nil))
            nil)
           ("2" (assert)
            (("2" (typepred num_non_terminals)
              (("2" (typepred j)
                (("2" (hide -3 2)
                  (("2" (grind)
                    (("2" (typepred len) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_max formula-decl nil sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (exp2_sum formula-decl nil exp2 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (scafcount0_TCC1 0
  (scafcount0_TCC1-1 nil 3806988426 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (scafcount0 subtype "0" "naturalnumbers.upto(sigmatopdown.len)")))
 (scafcount0 0
  (scafcount0-1 nil 3806988426
   ("" (grind :rewrites count_update00) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil))
   shostak))
 (scafcount_step_TCC1 0
  (scafcount_step_TCC1-1 nil 3806977775 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (scafcount_step subtype "(number_fields.+)(sigmatopdown.j, 1)"
    "naturalnumbers.upto(sigmatopdown.len)")))
 (scafcount_step_TCC2 0
  (scafcount_step_TCC2-1 nil 3806977775 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (scafcount_step subtype "sigmatopdown.j"
    "naturalnumbers.upto(sigmatopdown.len)")))
 (scafcount_step 0
  (scafcount_step-1 nil 3806977775
   ("" (skolem + (len "_" "_" "_"))
    (("" (induct-and-simplify "j") nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (scafcount_update 0
  (scafcount_update-1 nil 3806936723
   ("" (skolem + (len "_" "_" "_" "_" "_" "_"))
    (("" (induct j)
      (("1" (skeep*)
        (("1" (rewrite scafcount0)
          (("1" (lift-if :updates? nil)
            (("1" (ground)
              (("1" (grind) nil nil)
               ("2" (case "i  = 0")
                (("1" (assert)
                  (("1" (rewrite count_update00)
                    (("1" (grind) nil nil)) nil))
                  nil)
                 ("2" (assert) nil nil))
                nil)
               ("3" (case "i  = 0")
                (("1" (assert)
                  (("1" (rewrite count_update00)
                    (("1" (grind) nil nil)) nil))
                  nil)
                 ("2" (case "i  = 0")
                  (("1" (propax) nil nil) ("2" (assert) nil nil)) nil))
                nil)
               ("4" (case "i  = 0")
                (("1" (assert)
                  (("1" (rewrite count_update00)
                    (("1" (grind) nil nil)) nil))
                  nil)
                 ("2" (case "i  = 0")
                  (("1" (propax) nil nil) ("2" (grind) nil nil)) nil))
                nil)
               ("5" (case "i  = 0")
                (("1" (assert)
                  (("1" (rewrite count_update00)
                    (("1" (grind) nil nil)) nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep*)
        (("2" (rewrite scafcount_step)
          (("2" (rewrite -2)
            (("2" (hide -2)
              (("2" (case "i = 1 + jt")
                (("1" (assert)
                  (("1" (rewrite count_update00)
                    (("1"
                      (grind :rewrites scafcount_step :exclude count)
                      nil nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (grind :rewrites scafcount_step :exclude count)
                    nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((upto nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (uint64 type-eq-decl nil integertypes nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (scafcount0 formula-decl nil sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (count_update00 formula-decl nil arrayCount nil)
    (below type-eq-decl nil naturalnumbers nil)
    (arr type-eq-decl nil arrayCount nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scafcount_step formula-decl nil sigmatopdown nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (pushcount_TCC1 0
  (pushcount_TCC1-1 nil 3806632141 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (pushcount subtype "sigmatopdown.len"
    "naturalnumbers.upto(sigmatopdown.len)")))
 (good_stack?_TCC1 0
  (good_stack?_TCC1-1 nil 3804904050 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_stack? subtype "sigmatopdown.stack" "(sigmatopdown.push?)")))
 (good_stack?_TCC2 0
  (good_stack?_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_stack? subtype "sigmatopdown.entry" "(sigmatopdown.push?)")))
 (good_stack?_TCC3 0
  (good_stack?_TCC3-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_stack? subtype "(number_fields.-)(sigmatopdown.depth, 1)"
    "uint64")))
 (good_stack?_TCC4 0
  (good_stack?_TCC4-1 nil 3804455654 ("" (termination-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (good_stack? termination
    "sigmatopdown.good_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.A)"
    "nil")))
 (good_stack?_TCC5 0
  (good_stack?_TCC5-1 nil 3804547853 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_stack? subtype "sigmatopdown.nt(sigmatopdown.stack)"
    "non_terminal")))
 (good_stack?_TCC6 0
  (good_stack?_TCC5-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_stack? subtype "sigmatopdown.pos(sigmatopdown.stack)"
    "naturalnumbers.upto(sigmatopdown.len)")))
 (mem_stack?_TCC1 0
  (mem_stack?_TCC1-1 nil 3804455654
   ("" (skeep* :preds? t)
    (("" (expand "good_stack?") (("" (ground) nil nil)) nil)) nil)
   ((good_stack? def-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (mem_stack? subtype "(number_fields.-)(sigmatopdown.depth, 1)"
    "uint64")))
 (mem_stack?_TCC2 0
  (mem_stack?_TCC2-1 nil 3804455654 ("" (termination-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil))
   nil
   (mem_stack? termination
    "sigmatopdown.mem_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.A)"
    "nil")))
 (mem_stack?_TCC3 0
  (mem_stack?_TCC3-1 nil 3804455654 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (mem_stack? subtype
    "sigmatopdown.A(sigmatopdown.pos(sigmatopdown.stack))(sigmatopdown.nt(sigmatopdown.stack))"
    "(sigmatopdown.good_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.A))")))
 (mem_stack_push_TCC1 0
  (mem_stack_push_TCC2-1 nil 3807675826 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (mem_stack_push subtype "sigmatopdown.entry"
    "(sigmatopdown.push?)")))
 (mem_stack_push_TCC2 0
  (mem_stack_push_TCC1-1 nil 3807675826 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (mem_stack_push subtype "(sigmatopdown.pos(sigmatopdown.entry))"
    "naturalnumbers.upto(sigmatopdown.len)")))
 (mem_stack_push_TCC3 0
  (mem_stack_push_TCC3-1 nil 3807675826 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (mem_stack_push subtype "sigmatopdown.nt(sigmatopdown.entry)"
    "non_terminal")))
 (mem_stack_push 0
  (mem_stack_push-1 nil 3807675827
   ("" (induct depth)
    (("1" (lazy-grind :defs nil) nil nil)
     ("2" (skeep*)
      (("2" (expand mem_stack?)
        (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil))
      nil)
     ("3" (skeep*)
      (("3" (expand mem_stack? -4)
        (("3" (ground)
          (("1" (typepred stack) (("1" (grind) nil nil)) nil)
           ("2" (inst?)
            (("2" (inst?)
              (("1" (ground) nil nil)
               ("2" (typepred entry) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep*)
        (("4" (typepred entry) (("4" (grind) nil nil)) nil)) nil))
      nil)
     ("5" (hide 2)
      (("5" (skeep*)
        (("5" (typepred entry) (("5" (grind) nil nil)) nil)) nil))
      nil)
     ("6" (hide 2)
      (("6" (skeep*)
        (("6" (typepred entry) (("6" (grind) nil nil)) nil)) nil))
      nil)
     ("7" (hide 2)
      (("7" (skeep*)
        (("7" (typepred entry) (("7" (grind) nil nil)) nil)) nil))
      nil)
     ("8" (hide 2)
      (("8" (skeep*)
        (("8" (typepred entry) (("8" (grind) nil nil)) nil)) nil))
      nil)
     ("9" (hide 2) (("9" (grind) nil nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (entry skolem-const-decl "(fine_push_entry?(len))" sigmatopdown
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (mem_stack? def-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil))
   shostak))
 (good_mem_stack_TCC1 0
  (good_mem_stack_TCC1-1 nil 3807728459 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_mem_stack subtype "(sigmatopdown.pos(sigmatopdown.entry))"
    "naturalnumbers.upto(sigmatopdown.len)")))
 (good_mem_stack_TCC2 0
  (good_mem_stack_TCC2-1 nil 3807728459 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_mem_stack subtype "sigmatopdown.nt(sigmatopdown.entry)"
    "non_terminal")))
 (good_mem_stack 0
  (good_mem_stack-1 nil 3804823624
   ("" (induct "depth")
    (("1" (grind)
      (("1" (expand "good_stack?") (("1" (propax) nil nil)) nil)
       ("2" (grind)
        (("2" (expand "good_stack?") (("2" (propax) nil nil)) nil))
        nil)
       ("3" (expand "good_stack?") (("3" (propax) nil nil)) nil)
       ("4" (expand good_stack?) (("4" (propax) nil nil)) nil)
       ("5" (expand good_stack?) (("5" (propax) nil nil)) nil)
       ("6" (expand good_stack?) (("6" (propax) nil nil)) nil))
      nil)
     ("2" (skeep*)
      (("2" (expand "mem_stack?" +)
        (("2" (ground)
          (("1" (typepred stack) (("1" (grind :if-match nil) nil nil))
            nil)
           ("2" (expand "good_stack?" :fnum (-3 4))
            (("2" (ground)
              (("1" (hide -3 4)
                (("1" (grind)
                  (("1" (typepred entry)
                    (("1" (grind)
                      (("1" (typepred stack)
                        (("1" (grind)
                          (("1" (extensionality "(push?)")
                            (("1" (inst?) (("1" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (extensionality "(push?)")
                    (("2" (inst?) (("2" (ground) nil nil)) nil)) nil)
                   ("3" (extensionality "(push?)")
                    (("3" (inst?) (("3" (ground) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (hide -3 2 5)
                (("2" (lift-if)
                  (("2" (ground)
                    (("2" (lift-if)
                      (("2" (ground)
                        (("2" (extensionality "(push?)")
                          (("2" (inst?) (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (inst?)
                (("3" (ground)
                  (("1" (hide 2)
                    (("1" (lift-if)
                      (("1" (typepred entry)
                        (("1" (grind)
                          (("1" (extensionality "(push?)")
                            (("1" (inst?) (("1" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lift-if)
                    (("2" (ground)
                      (("2" (ground)
                        (("2" (extensionality "(push?)")
                          (("2" (inst?) (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (hide -3 4)
                (("4" (hide -1)
                  (("4" (lift-if)
                    (("4" (ground)
                      (("4" (ground)
                        (("4" (extensionality "(push?)")
                          (("4" (inst?) (("4" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("5" (hide -3 5)
                (("5" (case "pos(stack) = pos(entry)")
                  (("1" (case "nt(stack) = nt(entry)")
                    (("1" (extensionality "(push?)")
                      (("1" (assert)
                        (("1" (inst?) (("1" (ground) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (typepred u) (("2" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil)
               ("6" (inst? :polarity? t)
                (("6" (ground)
                  (("1" (hide 2)
                    (("1" (lift-if)
                      (("1" (ground)
                        (("1" (ground)
                          (("1" (extensionality "(push?)")
                            (("1" (inst?) (("1" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lift-if)
                    (("2" (ground)
                      (("2" (ground)
                        (("2" (extensionality "(push?)")
                          (("2" (inst?) (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil)
     ("4" (hide 2) (("4" (grind) nil nil)) nil)
     ("5" (hide 2) (("5" (grind) nil nil)) nil)
     ("6" (hide 2) (("6" (grind) nil nil)) nil)
     ("7" (hide 2) (("7" (grind) nil nil)) nil)
     ("8" (hide 2) (("8" (grind) nil nil)) nil)
     ("9" (hide 2) (("9" (grind) nil nil)) nil)
     ("10" (hide 2) (("10" (grind) nil nil)) nil)
     ("11" (hide 2) (("11" (grind) nil nil)) nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (ent_push_extensionality formula-decl nil sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (pred type-eq-decl nil defined_types nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mem_stack? def-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil))
   shostak))
 (mem_mem_stack_TCC1 0
  (mem_mem_stack_TCC1-1 nil 3804967699
   ("" (skeep*)
    (("" (lemma good_mem_stack)
      (("" (inst?) (("" (ground) nil nil)) nil)) nil))
    nil)
   ((good_mem_stack formula-decl nil sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (index type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (mem_mem_stack subtype "sigmatopdown.stack"
    "(sigmatopdown.good_stack?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.depth, sigmatopdown.A WITH [(sigmatopdown.pos(sigmatopdown.entry))(sigmatopdown.nt(sigmatopdown.entry)) := sigmatopdown.u]))")))
 (mem_mem_stack 0
  (mem_mem_stack-2 "" 3807748697
   ("" (induct depth)
    (("1" (skeep*)
      (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)
     ("2" (skeep*)
      (("2" (expand mem_stack? +)
        (("2" (lift-if)
          (("2" (ground)
            (("2" (case "v = stack")
              (("1" (assert) nil nil)
               ("2" (assert)
                (("2" (inst?)
                  (("2" (ground)
                    (("1" (lift-if -)
                      (("1" (ground)
                        (("1" (lift-if -)
                          (("1" (ground)
                            (("1" (extensionality "(push?)")
                              (("1"
                                (forward-chain -)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand good_stack? -)
                      (("2" (ground)
                        (("1" (case "pos(stack) = pos(entry)")
                          (("1" (case "nt(stack) = nt(entry)")
                            (("1" (assert)
                              (("1"
                                (extensionality "(push?)")
                                (("1"
                                  (inst - stack entry)
                                  (("1" (ground) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (case "pos(stack) = pos(entry)")
                          (("1" (case "nt(stack) = nt(entry)")
                            (("1" (assert)
                              (("1"
                                (extensionality "(push?)")
                                (("1"
                                  (inst - stack entry)
                                  (("1" (ground) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("3" (case "pos(stack) = pos(entry)")
                      (("1" (case "nt(stack) = nt(entry)")
                        (("1" (extensionality "(push?)")
                          (("1" (inst - stack entry)
                            (("1" (ground) nil nil)) nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil)
     ("4" (hide 2) (("4" (grind) nil nil)) nil)
     ("5" (hide 2) (("5" (grind) nil nil)) nil)
     ("6" (hide 2)
      (("6" (skeep*)
        (("6" (use good_mem_stack) (("6" (ground) nil nil)) nil)) nil))
      nil)
     ("7" (hide 2)
      (("7" (skeep*)
        (("7" (typepred entry) (("7" (grind) nil nil)) nil)) nil))
      nil)
     ("8" (hide 2) (("8" (grind) nil nil)) nil)
     ("9" (hide 2) (("9" (grind) nil nil)) nil)
     ("10" (hide 2) (("10" (grind) nil nil)) nil)
     ("11" (hide 2) (("11" (grind) nil nil)) nil)
     ("12" (hide 2) (("12" (grind) nil nil)) nil))
    nil)
   ((good_mem_stack formula-decl nil sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (ent_push_extensionality formula-decl nil sigmatopdown nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mem_stack? def-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil))
   shostak)
  (mem_mem_stack-1 nil 3804967700
   ("" (induct depth)
    (("1" (skeep*) (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)
     ("2" (skeep*)
      (("2" (expand good_stack?) (("2" (grind) nil nil)) nil)) nil)
     ("3" (skeep*)
      (("3" (expand mem_stack? +)
        (("3" (lift-if)
          (("3" (ground)
            (("3" (case "v = stack")
              (("1" (assert) nil nil)
               ("2" (assert)
                (("2" (inst?)
                  (("2" (ground)
                    (("1" (lift-if -)
                      (("1" (ground)
                        (("1" (lift-if -)
                          (("1" (ground)
                            (("1" (extensionality "(push?)")
                              (("1"
                                (forward-chain -)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand good_stack? -)
                      (("2" (ground)
                        (("1" (grind) nil nil)
                         ("2" (lift-if 1)
                          (("2" (ground)
                            (("2" (ground)
                              (("2"
                                (extensionality "(push?)")
                                (("2"
                                  (forward-chain -)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (lift-if -)
                      (("3" (ground)
                        (("3" (lift-if -)
                          (("3" (ground)
                            (("3" (extensionality "(push?)")
                              (("3"
                                (forward-chain -)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (grind) nil nil)) nil)
     ("5" (hide 2) (("5" (grind) nil nil)) nil)
     ("6" (hide 2)
      (("6" (skeep*)
        (("6" (lemma good_mem_stack)
          (("6" (inst?) (("6" (ground) nil nil)) nil)) nil))
        nil))
      nil)
     ("7" (hide 2) (("7" (grind) nil nil)) nil)
     ("8" (hide 2) (("8" (grind) nil nil)) nil)
     ("9" (hide 2) (("9" (grind) nil nil)) nil)
     ("10" (hide 2) (("10" (grind) nil nil)) nil)
     ("11" (hide 2) (("11" (grind) nil nil)) nil)
     ("12" (hide 2) (("12" (grind) nil nil)) nil))
    nil)
   nil shostak))
 (good_mem_stack_push_TCC1 0
  (good_mem_stack_push_TCC2-1 nil 3807665403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_mem_stack_push subtype
    "sigmatopdown.push(sigmatopdown.pos, sigmatopdown.n)"
    "(sigmatopdown.good_push_entry?(sigmatopdown.len))")))
 (good_mem_stack_push_TCC2 0
  (good_mem_stack_push_TCC3-1 nil 3807665403
   ("" (skeep*)
    (("" (use exp2_lt :subst (n 41 m 64)) (("" (grind) nil nil)) nil))
    nil)
   ((exp2_lt formula-decl nil exp2 nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_mem_stack_push subtype
    "(number_fields.+)(sigmatopdown.depth, 1)" "uint64")))
 (good_mem_stack_push_TCC3 0
  (good_mem_stack_push_TCC4-1 nil 3807665403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_mem_stack_push subtype "sigmatopdown.stack"
    "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))
 (good_mem_stack_push 0
  (good_mem_stack_push-2 "" 3807671734
   ("" (skeep*)
    (("" (expand good_stack? +)
      (("" (ground)
        (("1" (grind) nil nil)
         ("2"
          (use good_mem_stack :subst (len len entry "push(pos!1, n)"))
          (("1" (ground)
            (("1" (grind) nil nil)
             ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil)
             ("3" (grind) nil nil))
            nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((good_stack? def-decl "bool" sigmatopdown nil)
    (good_mem_stack formula-decl nil sigmatopdown nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]"
          sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (stack skolem-const-decl "(good_push_entry?(len))" sigmatopdown
     nil)
    (pos!1 skolem-const-decl "upto(len)" sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (mem_stack_push formula-decl nil sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (exp2 def-decl "posnat" exp2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak)
  (good_mem_stack_push-1 nil 3807665405
   ("" (skeep*)
    (("" (expand good_stack? +)
      (("" (ground)
        (("1" (postpone) nil nil) ("2" (postpone) nil nil)
         ("3" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (fine_stack?_TCC1 0
  (fine_stack?_TCC1-1 nil 3807728459 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (fine_stack? subtype "sigmatopdown.stack"
    "(sigmatopdown.fine_push_entry?(sigmatopdown.len))")))
 (fine_stack?_TCC2 0
  (fine_stack?_TCC1-1 nil 3804908888
   ("" (skeep*) (("" (typepred stack) (("" (grind) nil nil)) nil)) nil)
   ((good_stack? def-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (fine_stack? subtype "sigmatopdown.rest"
    "(sigmatopdown.good_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.A))")))
 (fine_stack?_TCC3 0
  (fine_stack?_TCC2-1 nil 3804908888
   ("" (skeep*)
    (("" (ground) (("" (typepred stack) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (fine_stack? subtype "(number_fields.-)(sigmatopdown.depth, 1)"
    "uint64")))
 (fine_stack?_TCC4 0
  (fine_stack?_TCC3-1 nil 3804908888
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred "stack") (("1" (grind) nil nil)) nil)
       ("2" (typepred "stack") (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (fine_stack? subtype
    "sigmatopdown.A(sigmatopdown.pos(sigmatopdown.stack))(sigmatopdown.nt(sigmatopdown.stack))"
    "(sigmatopdown.good_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.A))")))
 (fine_stack?_TCC5 0
  (fine_stack?_TCC4-1 nil 3804908888 ("" (termination-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil))
   nil
   (fine_stack? termination
    "sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.A)"
    "nil")))
 (fine_mem_stack_TCC1 0
  (fine_mem_stack_TCC1-1 nil 3804969900
   ("" (skeep*)
    (("" (rewrite good_mem_stack) (("" (grind) nil nil)) nil)) nil)
   ((good_mem_stack formula-decl nil sigmatopdown nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (fine_mem_stack subtype "sigmatopdown.stack"
    "(sigmatopdown.good_stack?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.depth, sigmatopdown.A WITH [(sigmatopdown.pos(sigmatopdown.entry))(sigmatopdown.nt(sigmatopdown.entry)) := sigmatopdown.u]))")))
 (fine_mem_stack 0
  (fine_mem_stack-1 nil 3804969200
   ("" (induct "depth")
    (("1" (skeep*)
      (("1" (expand fine_stack?)
        (("1" (expand good_stack? -) (("1" (ground) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep*)
      (("2" (expand fine_stack? +)
        (("2" (expand good_stack? -3)
          (("2" (ground)
            (("1" (rewrite mem_mem_stack)
              (("1" (expand mem_stack? 2)
                (("1" (ground)
                  (("1" (lift-if +)
                    (("1" (ground)
                      (("1" (lift-if +)
                        (("1" (ground)
                          (("1" (extensionality "(push?)")
                            (("1" (forward-chain -)
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (inst?)
                            (("2" (ground)
                              (("2"
                                (replace -1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -5 4)
                (("2" (lift-if +)
                  (("2" (ground)
                    (("2" (ground)
                      (("2" (expand mem_stack? +)
                        (("2" (ground)
                          (("2" (extensionality "(push?)")
                            (("2" (forward-chain -)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide -5 4) (("3" (grind) nil nil)) nil)
               ("4" (hide -6 3)
                (("4" (grind)
                  (("4" (extensionality "(push?)")
                    (("4" (inst?) (("4" (ground) nil nil)) nil)) nil))
                  nil))
                nil)
               ("5" (hide -5 4)
                (("5" (grind)
                  (("1" (extensionality "(push?)")
                    (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)
                   ("2" (extensionality "(push?)")
                    (("2" (inst?) (("2" (ground) nil nil)) nil)) nil)
                   ("3" (extensionality "(push?)")
                    (("3" (inst?) (("3" (ground) nil nil)) nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite mem_mem_stack)
              (("1" (expand mem_stack? 2)
                (("1" (ground)
                  (("1" (lift-if +)
                    (("1" (ground)
                      (("1" (lift-if +)
                        (("1" (ground)
                          (("1" (extensionality "(push?)")
                            (("1" (forward-chain -)
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (inst?)
                            (("2" (ground)
                              (("2"
                                (replace -1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -5 4)
                (("2" (hide -1)
                  (("2" (grind)
                    (("2" (extensionality "(push?)")
                      (("2" (inst?) (("2" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide -5 4)
                (("3" (hide -1) (("3" (grind) nil nil)) nil)) nil)
               ("4" (hide -6 3)
                (("4" (hide -2)
                  (("4" (grind)
                    (("4" (extensionality "(push?)")
                      (("4" (inst?) (("4" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("5" (hide -5 4)
                (("5" (hide -1)
                  (("5" (grind)
                    (("1" (hide -5 4)
                      (("1" (hide -1)
                        (("1" (grind)
                          (("1" (extensionality "(push?)")
                            (("1" (inst?) (("1" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (extensionality "(push?)")
                      (("2" (inst?) (("2" (ground) nil nil)) nil)) nil)
                     ("3" (extensionality "(push?)")
                      (("3" (inst?) (("3" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil)
     ("4" (hide 2) (("4" (grind) nil nil)) nil)
     ("5" (hide 2) (("5" (grind) nil nil)) nil)
     ("6" (hide 2)
      (("6" (skeep*)
        (("6" (use good_mem_stack) (("6" (ground) nil nil)) nil)) nil))
      nil)
     ("7" (grind) nil nil) ("8" (hide 2) (("8" (grind) nil nil)) nil)
     ("9" (hide 2) (("9" (grind) nil nil)) nil)
     ("10" (hide 2) (("10" (grind) nil nil)) nil)
     ("11" (hide 2) (("11" (grind) nil nil)) nil)
     ("12" (hide 2) (("12" (grind) nil nil)) nil))
    nil)
   ((good_mem_stack formula-decl nil sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (mem_mem_stack formula-decl nil sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (ent_push_extensionality formula-decl nil sigmatopdown nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mem_stack? def-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil))
   shostak))
 (loop_ready?_TCC1 0
  (loop_ready?_TCC1-1 nil 3804455654
   ("" (skeep* :preds? t)
    (("" (typepred "A(i)(n1)") (("" (grind) nil nil)) nil)) nil)
   ((scaffold type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (loop_ready? subtype
    "(number_fields.+)(sigmatopdown.i, sigmatopdown.span(sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)))"
    "naturalnumbers.upto(sigmatopdown.len)")))
 (good_fail?_TCC1 0
  (good_fail?_TCC1-1 nil 3885853547 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_fail? subtype "sigmatopdown.i"
    "naturalnumbers.below(sigmatopdown.len)")))
 (good_fail?_TCC2 0
  (good_fail?_TCC2-1 nil 3885853547 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_fail? subtype "sigmatopdown.i"
    "naturalnumbers.below(sigmatopdown.len)")))
 (good_fail?_TCC3 0
  (good_fail?_TCC3-1 nil 3804991042 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_fail? subtype
    "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_fail?_TCC4 0
  (good_fail?_TCC3-1 nil 3804455654
   ("" (grind)
    (("" (typepred "A!1(i!1)(n1!1)") (("" (grind) nil nil)) nil)) nil)
   ((ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (good_fail? subtype
    "(number_fields.+)(sigmatopdown.i, sigmatopdown.span(sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)))"
    "naturalnumbers.upto(sigmatopdown.len)")))
 (good_fail?_TCC5 0
  (good_fail?_TCC5-1 nil 3806878024 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_fail? subtype
    "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_fail?_TCC6 0
  (good_fail?_TCC6-1 nil 3806878024 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_fail? subtype
    "sigmatopdown.A((number_fields.+)(sigmatopdown.i, sigmatopdown.span(sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1))))(sigmatopdown.n2)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_fail?_TCC7 0
  (good_fail?_TCC7-1 nil 3806878024 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_fail? subtype
    "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_fail?_TCC8 0
  (good_fail?_TCC8-1 nil 3806878024 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_fail? subtype
    "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n2)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_fail?_TCC9 0
  (good_fail?_TCC9-1 nil 3806878024 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_fail? subtype
    "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_fail?_TCC10 0
  (good_fail?_TCC10-1 nil 3806878024 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_fail? subtype
    "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_loop?_TCC1 0
  (good_loop?_TCC1-1 nil 3804455654
   ("" (skeep* :preds? t)
    (("" (typepred "A(i)(n1)") (("" (grind) nil nil)) nil)) nil)
   ((scaffold type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_loop? subtype
    "(number_fields.+)(sigmatopdown.i, sigmatopdown.span(sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)))"
    "naturalnumbers.upto(sigmatopdown.len)")))
 (good_good?_TCC1 0
  (good_good?_TCC1-1 nil 3886088192 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good? subtype
    "(number_fields.-)(sigmatopdown.len, sigmatopdown.i)" "nat")))
 (good_good?_TCC2 0
  (good_good?_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good? subtype "sigmatopdown.i"
    "naturalnumbers.below(sigmatopdown.len)")))
 (good_good?_TCC3 0
  (good_good?_TCC3-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good? subtype "sigmatopdown.i"
    "naturalnumbers.below(sigmatopdown.len)")))
 (good_good?_TCC4 0
  (good_good?_TCC4-1 nil 3804455654
   ("" (skeep* :preds? t)
    (("" (typepred "A(i)(n1)") (("" (grind) nil nil)) nil)) nil)
   ((scaffold type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good? subtype
    "(number_fields.+)(sigmatopdown.i, sigmatopdown.span(sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)))"
    "naturalnumbers.upto(sigmatopdown.len)")))
 (good_good?_TCC5 0
  (good_good?_TCC5-1 nil 3804991042 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good? subtype
    "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_good?_TCC6 0
  (good_good?_TCC6-1 nil 3806878024 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good? subtype
    "sigmatopdown.A((number_fields.+)(sigmatopdown.i, sigmatopdown.span(sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1))))(sigmatopdown.n2)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_good?_TCC7 0
  (good_good?_TCC7-1 nil 3806878024 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good? subtype
    "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_good?_TCC8 0
  (good_good?_TCC8-1 nil 3806878024 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good? subtype
    "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_good?_TCC9 0
  (good_good?_TCC9-1 nil 3806878024 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good? subtype
    "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n2)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_good?_TCC10 0
  (good_good?_TCC10-1 nil 3806878024 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good? subtype
    "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_good?_TCC11 0
  (good_good?_TCC11-1 nil 3806878024 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good? subtype
    "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n1)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_tscaffold?_TCC1 0
  (good_tscaffold?_TCC1-1 nil 3806632141 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_tscaffold? subtype
    "sigmatopdown.A(sigmatopdown.i)(sigmatopdown.n)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_good_tscaffold 0
  (good_good_tscaffold-2 "updated with depth bound" 3806872130
   ("" (skeep*)
    (("" (expand "good_tscaffold?")
      (("" (skeep*)
        (("" (inst - i n)
          (("" (expand good_entry?)
            (("" (lift-if + :updates? nil)
              (("" (ground)
                (("1" (case "i = pos!1" "n = nt!1")
                  (("1" (assert) (("1" (grind) nil nil)) nil)
                   ("2" (assert)
                    (("2" (expand "good_fail?")
                      (("2" (lift-if)
                        (("2" (ground)
                          (("1" (grind) nil nil)
                           ("2" (hide -11)
                            (("2" (grind :exclude gfcount) nil nil))
                            nil)
                           ("3" (hide -11)
                            (("3" (grind :exclude gfcount) nil nil))
                            nil)
                           ("4" (hide -10)
                            (("4" (grind :exclude gfcount) nil nil))
                            nil)
                           ("5" (hide -10)
                            (("5" (grind :exclude gfcount) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide -6)
                    (("3" (grind :exclude gfcount) nil nil)) nil))
                  nil)
                 ("2" (hide -5)
                  (("2" (expand "gfcount" +)
                    (("2" (rewrite "scafcount_update")
                      (("2" (hide -6)
                        (("2" (reveal -3)
                          (("2"
                            (lazy-grind :if-match all :exclude
                             scafcount)
                            nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (inst? -)
                  (("3" (grind :exclude gfcount) nil nil)) nil)
                 ("4" (hide -7)
                  (("4" (reveal -2)
                    (("4" (lazy-grind :if-match all :exclude scafcount)
                      nil nil))
                    nil))
                  nil)
                 ("5" (typepred u)
                  (("5" (hide -5 -7)
                    (("5" (typepred "A(i)(n)")
                      (("5" (grind :exclude gfcount) nil nil)) nil))
                    nil))
                  nil)
                 ("6" (hide -6)
                  (("6" (hide -2)
                    (("6" (lift-if)
                      (("6" (ground)
                        (("1" (grind) nil nil) ("2" (grind) nil nil)
                         ("3" (lift-if)
                          (("3" (ground)
                            (("1" (expand good_good?)
                              (("1"
                                (lift-if)
                                (("1"
                                  (ground)
                                  (("1"
                                    (ground)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (grind :exclude max)
                                      nil
                                      nil))
                                    nil)
                                   ("2" (grind :exclude max) nil nil)
                                   ("3" (grind :exclude max) nil nil)
                                   ("4" (grind :exclude max) nil nil)
                                   ("5" (grind :exclude max) nil nil)
                                   ("6" (grind) nil nil)
                                   ("7" (grind) nil nil)
                                   ("8" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind :exclude (max gfcount)) nil
                              nil))
                            nil))
                          nil)
                         ("4" (grind :exclude max) nil nil)
                         ("5" (grind :exclude max) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (hide -5 -7)
                  (("7" (typepred "A(i)(n)")
                    (("7" (expand "gfcount" +)
                      (("7" (rewrite scafcount_update)
                        (("7" (reveal -3)
                          (("7"
                            (lazy-grind :if-match all :exclude
                             scafcount)
                            nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("8" (hide -4 -6)
                  (("8" (reveal -3)
                    (("8" (lazy-grind :if-match all :exclude scafcount)
                      nil nil))
                    nil))
                  nil)
                 ("9" (hide -5) (("9" (grind :exclude max) nil nil))
                  nil)
                 ("10" (hide -6)
                  (("10" (expand gfcount)
                    (("10" (reveal -2)
                      (("10" (hide -5)
                        (("10" (rewrite "scafcount_update")
                          (("10" (lift-if)
                            (("10" (ground)
                              (("10"
                                (lift-if)
                                (("10"
                                  (ground)
                                  (("10"
                                    (expand fine_entry?)
                                    (("10"
                                      (expand "good_fail?")
                                      (("10"
                                        (lift-if)
                                        (("10"
                                          (ground)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (grind
                                               :exclude
                                               scafcount)
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (inst? :copy? t)
                                            (("2"
                                              (inst
                                               -
                                               "span(A(pos!1)(e1(G(nt!1)))) + pos!1"
                                               "e2(G(nt!1))")
                                              (("2"
                                                (grind
                                                 :exclude
                                                 scafcount)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (inst? :copy? t)
                                            (("3"
                                              (inst
                                               -
                                               "pos!1"
                                               "e2(G(nt!1))")
                                              (("3"
                                                (grind
                                                 :exclude
                                                 scafcount)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (inst?)
                                            (("4"
                                              (grind
                                               :exclude
                                               scafcount)
                                              nil
                                              nil))
                                            nil)
                                           ("5"
                                            (inst?)
                                            (("5" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("11" (inst?)
                  (("11" (grind :exclude (max gfcount)) nil nil)) nil)
                 ("12" (hide -4 -6)
                  (("12" (expand gfcount)
                    (("12" (rewrite scafcount_update)
                      (("12" (reveal -3)
                        (("12"
                          (lazy-grind :if-match all :exclude
                           (max scafcount))
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("13" (typepred "A(i)(n)")
                  (("13" (typepred "u")
                    (("13" (hide -5 -7)
                      (("13" (grind :exclude (max gfcount)) nil nil))
                      nil))
                    nil))
                  nil)
                 ("14" (hide -5)
                  (("14" (typepred "A(i)(n)")
                    (("14" (typepred "u")
                      (("14" (grind :exclude (max gfcount)) nil nil))
                      nil))
                    nil))
                  nil)
                 ("15" (hide -6)
                  (("15" (reveal -2)
                    (("15" (expand gfcount)
                      (("15" (rewrite scafcount_update)
                        (("15" (lift-if)
                          (("15" (ground)
                            (("1" (lift-if)
                              (("1"
                                (ground)
                                (("1"
                                  (hide -15)
                                  (("1"
                                    (grind :exclude (max scafcount))
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lift-if)
                              (("2"
                                (ground)
                                (("2"
                                  (hide -15)
                                  (("2"
                                    (grind :exclude (max scafcount))
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (lift-if)
                              (("3"
                                (ground)
                                (("3"
                                  (hide -16)
                                  (("3"
                                    (grind :exclude (max scafcount))
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (lift-if)
                              (("4"
                                (ground)
                                (("4"
                                  (expand fine_entry?)
                                  (("4"
                                    (ground)
                                    (("4"
                                      (expand "good_good?")
                                      (("4"
                                        (lift-if)
                                        (("4"
                                          (ground)
                                          (("1"
                                            (inst? :copy? t)
                                            (("1"
                                              (inst
                                               -
                                               "span(A(pos!1)(e1(G(nt!1)))) + pos!1"
                                               "e2(G(nt!1))")
                                              (("1"
                                                (grind
                                                 :exclude
                                                 scafcount)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst?)
                                            (("2"
                                              (grind
                                               :exclude
                                               scafcount)
                                              nil
                                              nil))
                                            nil)
                                           ("3"
                                            (inst? :copy? t)
                                            (("3"
                                              (inst
                                               -
                                               "pos!1"
                                               "e2(G(nt!1))")
                                              (("3"
                                                (grind
                                                 :exclude
                                                 scafcount)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (inst?)
                                            (("4"
                                              (grind
                                               :exclude
                                               scafcount)
                                              nil
                                              nil))
                                            nil)
                                           ("5"
                                            (inst?)
                                            (("5"
                                              (grind
                                               :exclude
                                               scafcount)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("16" (expand "gfcount" +)
                  (("16" (rewrite scafcount_update)
                    (("16" (hide -5)
                      (("16" (reveal -2)
                        (("16"
                          (lazy-grind :if-match all :exclude
                           (max scafcount))
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((good_tscaffold? const-decl "bool" sigmatopdown nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (scafcount_update formula-decl nil sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (e shared-adt-accessor-decl
     "[{x: peg | and?(x) OR not?(x)} -> non_terminal]" sigmatopdown
     nil)
    (not? adt-recognizer-decl "[peg -> boolean]" sigmatopdown nil)
    (and? adt-recognizer-decl "[peg -> boolean]" sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (span adt-accessor-decl "[(good?) -> uint32]" sigmatopdown nil)
    (e2 shared-adt-accessor-decl
     "[{x: peg | concat?(x) OR or?(x)} -> non_terminal]" sigmatopdown
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (fine_entry? const-decl "bool" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (/= const-decl "boolean" notequal nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (e1 shared-adt-accessor-decl
     "[{x: peg | concat?(x) OR or?(x)} -> non_terminal]" sigmatopdown
     nil)
    (or? adt-recognizer-decl "[peg -> boolean]" sigmatopdown nil)
    (concat? adt-recognizer-decl "[peg -> boolean]" sigmatopdown nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (peg type-decl nil sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak)
  (good_good_tscaffold-1 nil 3804994419
   ("" (skeep*)
    (("" (expand "good_tscaffold?")
      (("" (skeep*)
        (("" (inst - i n)
          (("" (expand good_entry?)
            (("" (lift-if + :updates? nil)
              (("" (ground)
                (("1" (case "i = pos(entry)" "n = nt(entry)")
                  (("1" (assert) (("1" (grind) nil nil)) nil)
                   ("2" (assert)
                    (("2" (hide -7 -8) (("2" (grind) nil nil)) nil))
                    nil)
                   ("3" (hide -6 -7) (("3" (grind) nil nil)) nil))
                  nil)
                 ("2" (case "i = pos(entry)" "n = nt(entry)")
                  (("1" (assert) (("1" (grind) nil nil)) nil)
                   ("2" (assert)
                    (("2" (forward-chain -) (("2" (grind) nil nil))
                      nil))
                    nil)
                   ("3" (assert)
                    (("3" (forward-chain -) (("3" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("3" (grind) nil nil) ("4" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (state_TCC1 0
  (state_TCC1-1 nil 3804904050 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (state subtype "sigmatopdown.stack" "(sigmatopdown.push?)")))
 (state_TCC2 0
  (state_TCC1-1 nil 3804730988 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (state subtype "sigmatopdown.pos(sigmatopdown.stack)"
    "naturalnumbers.upto(sigmatopdown.len)")))
 (state_TCC3 0
  (state_TCC2-1 nil 3804730988 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (state subtype "sigmatopdown.nt(sigmatopdown.stack)"
    "non_terminal")))
 (step_TCC1 0
  (step_TCC66-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (step subtype "sigmatopdown.stack" "(sigmatopdown.push?)")))
 (step_TCC2 0
  (step_TCC1-1 nil 3804547853 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (step subtype "sigmatopdown.cur" "non_terminal")))
 (step_TCC3 0
  (step_TCC10-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.pos"
         "naturalnumbers.upto(sigmatopdown.len)")))
 (step_TCC4 0
  (step_TCC4-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.good(0, 0)"
         "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))
 (step_TCC5 0
  (step_TCC5-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (skeep*)
                (("3" (typepred lflag)
                  (("3" (ground)
                    (("1" (inst?) nil nil)
                     ("2" (hide 2) (("2" (grind) nil nil)) nil)
                     ("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fine_entry? const-decl "bool" sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]"
     sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_good_tscaffold formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good(0, 0)]"
         "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))
 (step_TCC6 0
  (step_TCC1-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3"
                  (use sigma_dec
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" pos!1 "j" "len"))
                  (("1" (ground)
                    (("1" (lift-if)
                      (("1" (ground)
                        (("1" (typepred pos (stack))
                          (("1" (grind) nil nil)) nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                               count(num_non_terminals)(push?)
                                    (St`scaf WITH [(pos!1)(cur) := good(0, 0)](i))) = ((LAMBDA (i: upto(len)):
                               count(num_non_terminals)(push?)(St`scaf(i)))
                              WITH [(pos!1)
                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                          1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                          push?(St`scaf(x!1) WITH [(cur) := good(0, 0)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("3" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand count)
                                  (("2"
                                    (lemma
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("2"
                                      (inst?)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand nonempty?)
                                          (("1"
                                            (expand empty?)
                                            (("1"
                                              (inst - cur)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite count_TCC1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -1 3)
                            (("3" (expand count)
                              (("3"
                                (lemma
                                 "nonempty_card[below(num_non_terminals)]")
                                (("3"
                                  (inst?)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (rewrite count_TCC1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (lemma
                         "nonempty_card[below(num_non_terminals)]")
                        (("2" (inst?)
                          (("1" (grind) nil nil)
                           ("2" (rewrite count_TCC1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (sigma_dec formula-decl nil sigmatopdown nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]"
     sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (x!1 skolem-const-decl "upto(len)" sigmatopdown nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatopdown.depth, 1)"
         "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good(0, 0)]))")))
 (step_TCC7 0
  (step_TCC2-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2" (inst - G "depth - 1" len scaf stack rest "good(0, 0)")
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2"
                    (inst - G "depth - 1" len scaf stack rest
                     "good(0, 0)")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatopdown
     nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]"
     sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (good_mem_stack formula-decl nil sigmatopdown nil)
    (fine_mem_stack formula-decl nil sigmatopdown nil)
    (mem_stack? def-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.rest"
         "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good(0, 0)]))")))
 (step_TCC8 0
  (step_TCC83-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good(0, 0)], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good(0, 0)](i)(sigmatopdown.n))) ENDIF}")))
 (step_TCC9 0
  (step_TCC8-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "sigmatopdown.fail(0)"
         "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))
 (step_TCC10 0
  (step_TCC9-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fine_entry? const-decl "bool" sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_good_tscaffold formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail(0)]"
         "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))
 (step_TCC11 0
  (step_TCC6-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3"
                  (use sigma_dec
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" pos!1 "j" "len"))
                  (("1" (ground)
                    (("1" (lift-if)
                      (("1" (ground)
                        (("1" (typepred pos (stack))
                          (("1" (grind) nil nil)) nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                       count(num_non_terminals)(push?)
                                            (St`scaf WITH [(pos!1)(cur) := fail(0)](i))) = ((LAMBDA (i: upto(len)):
                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                      WITH [(pos!1)
                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                  1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                        push?(St`scaf(x!1) WITH [(cur) := fail(0)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("3" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand count)
                                  (("2"
                                    (lemma
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("2"
                                      (inst?)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand nonempty?)
                                          (("1"
                                            (expand empty?)
                                            (("1"
                                              (inst - cur)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite count_TCC1)
                                        (("2"
                                          (hide 2)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide -1 3)
                                (("3"
                                  (expand count)
                                  (("3"
                                    (lemma
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("3"
                                      (inst?)
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (rewrite count_TCC1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand count)
                            (("3"
                              (lemma
                               "nonempty_card[below(num_non_terminals)]")
                              (("3"
                                (inst?)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (rewrite count_TCC1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "count")
                      (("2"
                        (lemma
                         "nonempty_card[below(num_non_terminals)]")
                        (("2" (inst?)
                          (("1" (grind) nil nil)
                           ("2" (rewrite count_TCC1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (sigma_dec formula-decl nil sigmatopdown nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (x!1 skolem-const-decl "upto(len)" sigmatopdown nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatopdown.depth, 1)"
         "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail(0)]))")))
 (step_TCC12 0
  (step_TCC7-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2" (inst - G "depth - 1" len scaf stack rest "fail(0)")
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)
           ("3" (typepred stack)
            (("3" (expand fine_stack? -)
              (("3" (ground)
                (("1" (grind) nil nil)
                 ("2" (lemma fine_mem_stack)
                  (("2" (ground)
                    (("2" (expand good_stack? -)
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2"
                    (inst - G "depth - 1" len scaf stack rest
                     "fail(0)")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatopdown
     nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (fine_mem_stack formula-decl nil sigmatopdown nil)
    (good_mem_stack formula-decl nil sigmatopdown nil)
    (mem_stack? def-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.rest"
         "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail(0)]))")))
 (step_TCC13 0
  (step_TCC84-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail(0)], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail(0)](i)(sigmatopdown.n))) ENDIF}")))
 (step_TCC14 0
  (step_TCC16-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.pos"
         "naturalnumbers.below(sigmatopdown.len)")))
 (step_TCC15 0
  (step_TCC14-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.v"
         "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))
 (step_TCC16 0
  (step_TCC15-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (mem_stack? def-decl "bool" sigmatopdown nil)
    (fine_entry? const-decl "bool" sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (v skolem-const-decl "ent" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_good_tscaffold formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v]"
         "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))
 (step_TCC17 0
  (step_TCC12-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3"
                  (use sigma_dec
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" pos!1 "j" "len"))
                  (("1" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (grind) nil nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                                               count(num_non_terminals)(push?)
                                                                    (St`scaf WITH [(pos!1)(cur) := v](i))) = ((LAMBDA (i: upto(len)):
                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                              WITH [(pos!1)
                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                          1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                                                                  push?(St`scaf(x!1) WITH [(cur) := v](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if +)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("3" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand count)
                                  (("2"
                                    (lemma
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("2"
                                      (inst?)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand nonempty?)
                                          (("1"
                                            (expand empty?)
                                            (("1"
                                              (inst - cur)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite count_TCC1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -1 3)
                            (("3" (expand count)
                              (("3"
                                (lemma
                                 "nonempty_card[below(num_non_terminals)]")
                                (("3"
                                  (inst?)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (rewrite count_TCC1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (lemma
                         "nonempty_card[below(num_non_terminals)]")
                        (("2" (inst?)
                          (("1" (grind) nil nil)
                           ("2" (rewrite count_TCC1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (sigma_dec formula-decl nil sigmatopdown nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (v skolem-const-decl "ent" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (x!1 skolem-const-decl "upto(len)" sigmatopdown nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatopdown.depth, 1)"
         "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v]))")))
 (step_TCC18 0
  (step_TCC13-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2" (inst - G "depth - 1" len scaf stack rest v)
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (typepred "stack") (("2" (grind) nil nil)) nil)) nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2" (inst - G "depth - 1" len scaf stack rest "v")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatopdown
     nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (v skolem-const-decl "ent" sigmatopdown nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (good_mem_stack formula-decl nil sigmatopdown nil)
    (fine_mem_stack formula-decl nil sigmatopdown nil)
    (mem_stack? def-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.rest"
         "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v]))")))
 (step_TCC19 0
  (step_TCC89-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sigmatopdown nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v](i)(sigmatopdown.n))) ENDIF}")))
 (step_TCC20 0
  (step_TCC44-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.pos"
         "naturalnumbers.below(sigmatopdown.len)")))
 (step_TCC21 0
  (step_TCC20-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (/= const-decl "boolean" notequal nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.v"
         "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))
 (step_TCC22 0
  (step_TCC21-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (mem_stack? def-decl "bool" sigmatopdown nil)
    (fine_entry? const-decl "bool" sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (v skolem-const-decl "ent" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_good_tscaffold formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v]"
         "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))
 (step_TCC23 0
  (step_TCC18-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3"
                  (use sigma_dec
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" pos!1 "j" "len"))
                  (("1" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (grind) nil nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                                               count(num_non_terminals)(push?)
                                                                    (St`scaf WITH [(pos!1)(cur) := v](i))) = ((LAMBDA (i: upto(len)):
                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                              WITH [(pos!1)
                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                          1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                                                                  push?(St`scaf(x!1) WITH [(cur) := v](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if +)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (hide -3 -4 -6)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("3" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand count)
                                  (("2"
                                    (lemma
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("2"
                                      (inst?)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand nonempty?)
                                          (("1"
                                            (expand empty?)
                                            (("1"
                                              (inst - cur)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite count_TCC1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -1 3)
                            (("3" (expand count)
                              (("3"
                                (lemma
                                 "nonempty_card[below(num_non_terminals)]")
                                (("3"
                                  (inst?)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (rewrite count_TCC1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (lemma
                         "nonempty_card[below(num_non_terminals)]")
                        (("2" (inst?)
                          (("1" (grind) nil nil)
                           ("2" (rewrite count_TCC1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatopdown nil)
    (/= const-decl "boolean" notequal nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (sigma_dec formula-decl nil sigmatopdown nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (v skolem-const-decl "ent" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (member const-decl "bool" sets nil)
    (x!1 skolem-const-decl "upto(len)" sigmatopdown nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatopdown.depth, 1)"
         "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v]))")))
 (step_TCC24 0
  (step_TCC19-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2" (inst - G "depth - 1" len scaf stack rest v)
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (typepred "stack") (("2" (grind) nil nil)) nil)) nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2" (inst - G "depth - 1" len scaf stack rest "v")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (/= const-decl "boolean" notequal nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatopdown
     nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (v skolem-const-decl "ent" sigmatopdown nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (good_mem_stack formula-decl nil sigmatopdown nil)
    (fine_mem_stack formula-decl nil sigmatopdown nil)
    (mem_stack? def-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.rest"
         "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v]))")))
 (step_TCC25 0
  (step_TCC90-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sigmatopdown nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.v](i)(sigmatopdown.n))) ENDIF}")))
 (step_TCC26 0
  (step_TCC42-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - pos!1 n1)
              (("" (ground)
                (("1" (expand gfcount)
                  (("1" (use "sigma_max")
                    (("1" (ground)
                      (("1"
                        (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                        (("1" (assert)
                          (("1"
                            (name-replace lnn
                             "len * num_non_terminals + num_non_terminals")
                            (("1" (assert)
                              (("1"
                                (case-replace
                                 "dep(scaf(pos!1)(n1)) = d1")
                                (("1" (assert) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (case "len * num_non_terminals <= exp2(46)")
                            (("1" (assert) (("1" (grind) nil nil)) nil)
                             ("2"
                              (use "lt_times_lt_pos1" :subst
                                   (px
                                    len
                                    nnz
                                    num_non_terminals
                                    y
                                    "exp2(32)"
                                    w
                                    "exp2(8)"))
                              (("1"
                                (hide-all-but (-1 1))
                                (("1"
                                  (grind)
                                  (("1"
                                    (typepred len)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (sigma_max formula-decl nil sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.+)(sigmatopdown.d1, 1)" "uint64")))
 (step_TCC27 0
  (step_TCC43-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype
         "sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))"
         "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))
 (step_TCC28 0
  (step_TCC55-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fine_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (d1 skolem-const-decl "uint64" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_good_tscaffold formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]"
         "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))
 (step_TCC29 0
  (step_TCC22-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3"
                  (use sigma_dec
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" pos!1 "j" "len"))
                  (("1" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (grind) nil nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                                                       count(num_non_terminals)(push?)
                                                                            (St`scaf WITH [(pos!1)(cur) := fail(1 + d1)](i))) = ((LAMBDA (i: upto(len)):
                                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                                      WITH [(pos!1)
                                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                  1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                                                                                push?(St`scaf(x!1) WITH [(cur) := fail(1 + d1)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if +)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (hide -3 -4 -6)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil)
                                             ("3"
                                              (skeep*)
                                              (("3"
                                                (use step_TCC26)
                                                (("3"
                                                  (ground)
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide -6 2)
                                          (("3" (grind) nil nil))
                                          nil)
                                         ("4"
                                          (hide 2)
                                          (("4"
                                            (skeep*)
                                            (("4"
                                              (use step_TCC26)
                                              (("4"
                                                (ground)
                                                (("4"
                                                  (inst?)
                                                  (("4"
                                                    (inst?)
                                                    (("4"
                                                      (inst?)
                                                      (("4"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand count +)
                                  (("2"
                                    (use
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (expand nonempty?)
                                        (("1"
                                          (expand empty?)
                                          (("1"
                                            (inst - "nt(stack)")
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (typepred "nt(stack)")
                                                (("2"
                                                  (expand
                                                   "good_push_entry?")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "count_TCC1")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (hide 2)
                                (("4"
                                  (use step_TCC26)
                                  (("4"
                                    (ground)
                                    (("4"
                                      (inst?)
                                      (("4"
                                        (inst?)
                                        (("4"
                                          (inst?)
                                          (("4" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -1)
                            (("3" (expand count)
                              (("3"
                                (use
                                 "nonempty_card[below(num_non_terminals)]")
                                (("1"
                                  (ground)
                                  (("1"
                                    (hide -5 5)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "count_TCC1")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide -1 3) (("4" (grind) nil nil))
                            nil)
                           ("5" (use step_TCC26)
                            (("5" (ground)
                              (("5"
                                (inst?)
                                (("5"
                                  (inst?)
                                  (("5"
                                    (inst?)
                                    (("5" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (use "nonempty_card[below(num_non_terminals)]")
                        (("1" (grind) nil nil)
                         ("2" (rewrite count_TCC1)
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (sigma_dec formula-decl nil sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (d1 skolem-const-decl "uint64" sigmatopdown nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (step_TCC26 subtype-tcc nil sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (x!1 skolem-const-decl "upto(len)" sigmatopdown nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatopdown nil)
    (nonempty? const-decl "bool" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatopdown.depth, 1)"
         "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]))")))
 (step_TCC30 0
  (step_TCC23-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2" (inst - G "depth - 1" len scaf stack rest "fail(1 + d1)")
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (expand nice_entry?) (("2" (propax) nil nil)) nil))
            nil)
           ("3" (typepred "stack") (("3" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2"
                    (inst - G "depth - 1" len scaf stack rest
                     "fail(1 + d1)")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatopdown
     nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (d1 skolem-const-decl "uint64" sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (good_mem_stack formula-decl nil sigmatopdown nil)
    (fine_mem_stack formula-decl nil sigmatopdown nil)
    (mem_stack? def-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.rest"
         "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]))")))
 (step_TCC31 0
  (step_TCC95-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, sigmatopdown.d1))], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, sigmatopdown.d1))](i)(sigmatopdown.n))) ENDIF}")))
 (step_TCC32 0
  (step_TCC30-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "St`scaf(pos!1)(n1)") (("" (grind) nil nil)) nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (uint32 type-eq-decl nil integertypes nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.+)(sigmatopdown.pos, sigmatopdown.sp)"
         "naturalnumbers.upto(sigmatopdown.len)")))
 (step_TCC33 0
  (step_TCC75-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst-cp - pos!1 n1)
              (("" (inst - pos!1+sp n2)
                (("" (ground)
                  (("1" (expand gfcount)
                    (("1" (use "sigma_max")
                      (("1" (ground)
                        (("1"
                          (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                          (("1" (assert)
                            (("1"
                              (name-replace lnn
                               "len * num_non_terminals + num_non_terminals")
                              (("1"
                                (assert)
                                (("1"
                                  (case-replace
                                   "dep(scaf(pos!1 + sp)(n2)) = d2")
                                  (("1"
                                    (case-replace
                                     "dep(scaf(pos!1)(n1)) = d1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand max)
                                        (("1"
                                          (lift-if)
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (case "len * num_non_terminals <= exp2(46)")
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (use
                                 "lt_times_lt_pos1"
                                 :subst
                                 (px
                                  len
                                  nnz
                                  num_non_terminals
                                  y
                                  "exp2(32)"
                                  w
                                  "exp2(8)"))
                                (("1"
                                  (hide-all-but (-1 1))
                                  (("1"
                                    (grind)
                                    (("1"
                                      (typepred len)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil) ("3" (grind) nil nil)
                   ("4" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (uint32 type-eq-decl nil integertypes nil)
    (sigma_max formula-decl nil sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "(number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2))"
         "uint64")))
 (step_TCC34 0
  (step_TCC56-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (expand nice_entry?) (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))"
         "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))
 (step_TCC35 0
  (step_TCC63-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mem_stack? def-decl "bool" sigmatopdown nil)
    (fine_entry? const-decl "bool" sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (d1 skolem-const-decl "uint64" sigmatopdown nil)
    (d2 skolem-const-decl "uint64" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_good_tscaffold formula-decl nil sigmatopdown nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))]"
         "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))
 (step_TCC36 0
  (step_TCC31-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (rewrite scafcount_update)
                (("1" (grind :exclude scafcount) nil nil)
                 ("2" (hide 2) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (scafcount_update formula-decl nil sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatopdown.depth, 1)"
         "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))]))")))
 (step_TCC37 0
  (step_TCC32-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2"
          (inst - G "depth - 1" len scaf stack rest
           "fail(1 + max(d1, d2))")
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (expand nice_entry?) (("2" (propax) nil nil)) nil))
            nil)
           ("3" (typepred "stack") (("3" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2"
                    (inst - G "depth - 1" len scaf stack rest
                     "fail(1 + max(d1, d2))")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatopdown
     nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (d2 skolem-const-decl "uint64" sigmatopdown nil)
    (d1 skolem-const-decl "uint64" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (good_mem_stack formula-decl nil sigmatopdown nil)
    (fine_mem_stack formula-decl nil sigmatopdown nil)
    (mem_stack? def-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.rest"
         "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))]))")))
 (step_TCC38 0
  (step_TCC117-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))](i)(sigmatopdown.n))) ENDIF}")))
 (step_TCC39 0
  (step_TCC64-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst-cp - pos!1 n1)
              (("" (inst - pos!1+sp n2)
                (("" (ground)
                  (("1" (expand gfcount)
                    (("1" (use "sigma_max")
                      (("1" (ground)
                        (("1"
                          (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                          (("1" (assert)
                            (("1"
                              (name-replace lnn
                               "len * num_non_terminals + num_non_terminals")
                              (("1"
                                (assert)
                                (("1"
                                  (case-replace
                                   "dep(scaf(pos!1 + sp)(n2)) = d2")
                                  (("1"
                                    (case-replace
                                     "dep(scaf(pos!1)(n1)) = d1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand max)
                                        (("1"
                                          (lift-if)
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (case "len * num_non_terminals <= exp2(46)")
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (use
                                 "lt_times_lt_pos1"
                                 :subst
                                 (px
                                  len
                                  nnz
                                  num_non_terminals
                                  y
                                  "exp2(32)"
                                  w
                                  "exp2(8)"))
                                (("1"
                                  (hide-all-but (-1 1))
                                  (("1"
                                    (grind)
                                    (("1"
                                      (typepred len)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil) ("3" (grind) nil nil)
                   ("4" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (uint32 type-eq-decl nil integertypes nil)
    (sigma_max formula-decl nil sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "(number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2))"
         "uint64")))
 (step_TCC40 0
  (step_TCC41-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "St`scaf(pos!1)(n1)")
      (("" (typepred "St`scaf(pos!1 + sp)(n2)")
        (("" (typepred len) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (uint32 type-eq-decl nil integertypes nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.+)(sigmatopdown.sp, sigmatopdown.sp2)"
         "uint32")))
 (step_TCC41 0
  (step_TCC76-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "St`scaf(pos!1)(n1)")
      (("" (typepred "St`scaf(pos!1 + sp)(n2)") (("" (grind) nil nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (uint32 type-eq-decl nil integertypes nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), (number_fields.+)(sigmatopdown.sp, sigmatopdown.sp2))"
         "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))
 (step_TCC42 0
  (step_TCC83-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?)
                    (("2" (ground)
                      (("1" (typepred "St`scaf(pos!1 + sp)(n2)")
                        (("1" (grind) nil nil)) nil)
                       ("2" (expand good_good?)
                        (("2" (grind :exclude (max gfcount)) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (typepred lflag)
                  (("3" (skeep*)
                    (("3" (ground)
                      (("1" (inst?) nil nil) ("2" (grind) nil nil)
                       ("3" (inst?) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "St`scaf(pos!1 + sp)(n2)")
                (("2" (typepred "St`scaf(pos!1)(n1)")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (fine_entry? const-decl "bool" sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]"
     sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (d1 skolem-const-decl "uint64" sigmatopdown nil)
    (d2 skolem-const-decl "uint64" sigmatopdown nil)
    (sp2 skolem-const-decl "uint32" sigmatopdown nil)
    (sp skolem-const-decl "uint32" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_good_tscaffold formula-decl nil sigmatopdown nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), (number_fields.+)(sigmatopdown.sp, sigmatopdown.sp2))]"
         "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))
 (step_TCC43 0
  (step_TCC39-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3"
                  (use sigma_dec
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" pos!1 "j" "len"))
                  (("1" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (grind) nil nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)
                                                                                    (St`scaf WITH [(pos!1)(cur) := good(1 + max(d1, d2), sp2 + sp)](i))) = ((LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                                              WITH [(pos!1)
                                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                          1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                                                                                              push?(St`scaf(x!1) WITH [(cur) := good(1 + max(d1, d2), sp2 + sp)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if +)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (typepred
                                                 "St`scaf(pos!1)(n1)")
                                                (("2"
                                                  (typepred
                                                   "St`scaf(pos!1 + sp)(n2)")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skeep*)
                                              (("3"
                                                (use step_TCC40)
                                                (("3"
                                                  (ground)
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (hide -6 2)
                                              (("4"
                                                (typepred
                                                 "St`scaf(pos!1)(n1)")
                                                (("4"
                                                  (typepred
                                                   "St`scaf(pos!1 + sp)(n2)")
                                                  (("4"
                                                    (skeep*)
                                                    (("4"
                                                      (use step_TCC39)
                                                      (("4"
                                                        (ground)
                                                        (("4"
                                                          (inst?)
                                                          (("4"
                                                            (inst?)
                                                            (("4"
                                                              (inst?)
                                                              (("4"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skeep*)
                                          (("3"
                                            (typepred
                                             "St`scaf(pos!1)(n1)")
                                            (("3"
                                              (typepred
                                               "St`scaf(pos!1 + sp)(n2)")
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (skeep*)
                                          (("4"
                                            (use step_TCC40)
                                            (("4"
                                              (ground)
                                              (("4"
                                                (inst?)
                                                (("4"
                                                  (inst?)
                                                  (("4"
                                                    (inst?)
                                                    (("4"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("5"
                                          (skeep*)
                                          (("5"
                                            (use step_TCC39)
                                            (("5"
                                              (ground)
                                              (("5"
                                                (inst?)
                                                (("5"
                                                  (inst?)
                                                  (("5"
                                                    (inst?)
                                                    (("5"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand count)
                                (("2"
                                  (use
                                   "nonempty_card[below(num_non_terminals)]")
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (rewrite count_TCC1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3"
                                  (typepred "St`scaf(pos!1)(n1)")
                                  (("3"
                                    (typepred
                                     "St`scaf(pos!1 + sp)(n2)")
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (hide 2)
                                (("4"
                                  (use step_TCC40)
                                  (("4"
                                    (ground)
                                    (("4"
                                      (inst?)
                                      (("4"
                                        (inst?)
                                        (("4"
                                          (inst?)
                                          (("4" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("5"
                                (hide 2)
                                (("5"
                                  (use step_TCC39)
                                  (("5"
                                    (ground)
                                    (("5"
                                      (inst?)
                                      (("5"
                                        (inst?)
                                        (("5"
                                          (inst?)
                                          (("5" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -1 3)
                            (("3" (expand count)
                              (("3"
                                (use
                                 "nonempty_card[below(num_non_terminals)]")
                                (("1" (grind) nil nil)
                                 ("2"
                                  (rewrite count_TCC1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide -1 3)
                            (("4" (typepred "St`scaf(pos!1)(n1)")
                              (("4"
                                (typepred "St`scaf(pos!1 + sp)(n2)")
                                (("4" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("5" (hide -1 3)
                            (("5" (use step_TCC40)
                              (("5"
                                (ground)
                                (("5"
                                  (inst?)
                                  (("5"
                                    (inst?)
                                    (("5"
                                      (inst?)
                                      (("5" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("6" (hide -1 3)
                            (("6" (use step_TCC39)
                              (("6"
                                (ground)
                                (("6"
                                  (inst?)
                                  (("6"
                                    (inst?)
                                    (("6"
                                      (inst?)
                                      (("6" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (expand count)
                        (("2"
                          (use "nonempty_card[below(num_non_terminals)]")
                          (("1" (grind) nil nil)
                           ("2" (rewrite count_TCC1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (sigma_dec formula-decl nil sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]"
     sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (sp skolem-const-decl "uint32" sigmatopdown nil)
    (sp2 skolem-const-decl "uint32" sigmatopdown nil)
    (d2 skolem-const-decl "uint64" sigmatopdown nil)
    (d1 skolem-const-decl "uint64" sigmatopdown nil)
    (step_TCC39 subtype-tcc nil sigmatopdown nil)
    (step_TCC40 subtype-tcc nil sigmatopdown nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (x!1 skolem-const-decl "upto(len)" sigmatopdown nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatopdown.depth, 1)"
         "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), (number_fields.+)(sigmatopdown.sp, sigmatopdown.sp2))]))")))
 (step_TCC44 0
  (step_TCC40-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2"
          (inst - G "depth - 1" len scaf stack rest
           "good(1 + max(d1, d2), sp2 + sp)")
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (typepred "stack")
              (("2" (typepred "St`scaf(pos!1)(n1)")
                (("2" (typepred "St`scaf(pos!1 + sp)(n2)")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (use step_TCC43)
            (("3" (ground)
              (("3" (inst?)
                (("3" (inst?)
                  (("3" (inst?) (("3" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2"
                    (inst - G "depth - 1" len scaf stack rest
                     "good(1 + max(d1, d2), sp2 + sp)")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (typepred "St`scaf(pos!1)(n1)")
                      (("2" (typepred "St`scaf(pos!1 + sp)(n2)")
                        (("2" (grind) nil nil)) nil))
                      nil)
                     ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatopdown
     nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (sp skolem-const-decl "uint32" sigmatopdown nil)
    (sp2 skolem-const-decl "uint32" sigmatopdown nil)
    (d2 skolem-const-decl "uint64" sigmatopdown nil)
    (d1 skolem-const-decl "uint64" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]"
     sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (step_TCC43 subtype-tcc nil sigmatopdown nil)
    (good_mem_stack formula-decl nil sigmatopdown nil)
    (fine_mem_stack formula-decl nil sigmatopdown nil)
    (mem_stack? def-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.rest"
         "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), (number_fields.+)(sigmatopdown.sp, sigmatopdown.sp2))]))")))
 (step_TCC45 0
  (step_TCC81-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), (number_fields.+)(sigmatopdown.sp2, sigmatopdown.sp))], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), (number_fields.+)(sigmatopdown.sp2, sigmatopdown.sp))](i)(sigmatopdown.n))) ENDIF}")))
 (step_TCC46 0
  (step_TCC45-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil))
   nil
   (step subtype "sigmatopdown.St`stack"
         "(sigmatopdown.nice_entry?(sigmatopdown.len, (number_fields.+)(sigmatopdown.pos, sigmatopdown.sp)))")))
 (step_TCC47 0
  (step_TCC46-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?)
                    (("2" (typepred "St`scaf(pos!1 + sp)(n2)")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3)
                          (("1" (ground)
                            (("1" (grind) nil nil)
                             ("2" (hide -5) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (hide -1) (("2" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (hide -2)
                (("2" (typepred stack) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_entry? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (sp skolem-const-decl "uint32" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (good_good_tscaffold formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.St`scaf WITH [((number_fields.+)(sigmatopdown.pos, sigmatopdown.sp))(sigmatopdown.n2) := sigmatopdown.St`stack]"
         "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))
 (step_TCC48 0
  (step_TCC49-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred depth)
        (("1" (expand good_depth?)
          (("1" (expand pushcount)
            (("1" (use scafcount_max)
              (("1" (assert)
                (("1" (use exp2_lt :subst (n 41 m 64))
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "good_depth?")
        (("2" (expand pushcount)
          (("2" (rewrite scafcount_update)
            (("1" (lift-if)
              (("1" (ground)
                (("1" (typepred "St`scaf(pos!1)(n1)")
                  (("1" (grind) nil nil)) nil)
                 ("2" (typepred depth)
                  (("2" (grind :exclude (max scafcount)) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((scafcount_max formula-decl nil sigmatopdown nil)
    (exp2_lt formula-decl nil exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (scafcount_update formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.+)(sigmatopdown.St`depth, 1)"
         "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [((number_fields.+)(sigmatopdown.pos, sigmatopdown.sp))(sigmatopdown.n2) := sigmatopdown.St`stack]))")))
 (step_TCC49 0
  (step_TCC50-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "St`scaf(pos!1)(n1)")
      (("" (typepred "St`scaf(pos!1 + sp)(n2)")
        (("" (typepred len) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (uint32 type-eq-decl nil integertypes nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.+)(sigmatopdown.pos, sigmatopdown.sp)"
         "uint32")))
 (step_TCC50 0
  (step_TCC65-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2" (expand good_stack? +)
          (("2" (ground)
            (("1" (hide -1) (("1" (grind) nil nil)) nil)
             ("2"
              (inst - G "depth" len scaf "push(pos!1 + sp, n2)" "stack"
               stack)
              (("1" (ground)
                (("1" (hide 2)
                  (("1" (typepred "St`scaf(pos!1)(n1)")
                    (("1" (grind) nil nil)) nil))
                  nil)
                 ("2" (use mem_stack_push) (("2" (ground) nil nil))
                  nil)
                 ("3" (hide 2) (("3" (grind) nil nil)) nil))
                nil)
               ("2" (hide 2)
                (("2" (typepred stack) (("2" (grind) nil nil)) nil))
                nil)
               ("3" (hide 2)
                (("3" (typepred "St`scaf(pos!1)(n1)")
                  (("3" (grind) nil nil)) nil))
                nil)
               ("4" (typepred "St`scaf(pos!1)(n1)")
                (("4" (typepred len) (("4" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand fine_stack? +)
        (("3" (ground)
          (("1" (lemma mem_mem_stack)
            (("1" (inst - G depth len scaf _ _ _ _)
              (("1"
                (inst - "push(pos!1 + sp, n2)" "push(pos!1 + sp, n2)"
                 stack stack)
                (("1" (ground)
                  (("1" (use mem_stack_push) (("1" (ground) nil nil))
                    nil)
                   ("2" (typepred "St`scaf(pos!1)(n1)")
                    (("2" (grind) nil nil)) nil)
                   ("3" (typepred "St`scaf(pos!1)(n1)")
                    (("3" (grind) nil nil)) nil)
                   ("4" (use mem_stack_push) (("4" (ground) nil nil))
                    nil)
                   ("5" (typepred "St`scaf(pos!1)(n1)")
                    (("5" (grind) nil nil)) nil))
                  nil)
                 ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                 ("3" (typepred "St`scaf(pos!1)(n1)")
                  (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2"
            (use fine_mem_stack :subst
                 (len len entry "push(pos!1 + sp, n2)"))
            (("1" (ground)
              (("1" (hide 2)
                (("1" (typepred "St`scaf(pos!1)(n1)")
                  (("1" (grind) nil nil)) nil))
                nil)
               ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil)
               ("3" (grind) nil nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred "St`scaf(pos!1)(n1)")
              (("3" (grind) nil nil)) nil)
             ("4" (typepred "St`scaf(pos!1)(n1)")
              (("4" (typepred len) (("4" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (sp skolem-const-decl "uint32" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (n2 skolem-const-decl "non_terminal" sigmatopdown nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]"
          sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatopdown nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (mem_stack_push formula-decl nil sigmatopdown nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (successor const-decl "bool" sigmatopdown nil)
    (good_mem_stack formula-decl nil sigmatopdown nil)
    (mem_mem_stack formula-decl nil sigmatopdown nil)
    (fine_mem_stack formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.push((number_fields.+)(sigmatopdown.pos, sigmatopdown.sp), sigmatopdown.n2)"
         "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.+)(sigmatopdown.St`depth, 1), sigmatopdown.St`scaf WITH [((number_fields.+)(sigmatopdown.pos, sigmatopdown.sp))(sigmatopdown.n2) := sigmatopdown.St`stack]))")))
 (step_TCC51 0
  (step_TCC82-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1)
            (("2" (skeep*)
              (("2" (lift-if)
                (("2" (ground)
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (typepred stack) (("1" (grind) nil nil))
                        nil)
                       ("2" (inst?) nil nil))
                      nil))
                    nil)
                   ("2" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.n2 = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [((number_fields.+)(sigmatopdown.pos, sigmatopdown.sp))(sigmatopdown.n2) := sigmatopdown.St`stack], (number_fields.+)(sigmatopdown.pos, sigmatopdown.sp), sigmatopdown.n2)) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [((number_fields.+)(sigmatopdown.pos, sigmatopdown.sp))(sigmatopdown.n2) := sigmatopdown.St`stack](i)(sigmatopdown.n))) ENDIF}")))
 (step_TCC52 0
  (step_TCC28-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "sigmatopdown.loop"
         "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))
 (step_TCC53 0
  (step_TCC29-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?)
                    (("2" (typepred "St`scaf(pos!1 + sp)(n2)")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3)
                          (("1" (ground) (("1" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (hide -5) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) (("2" (hide 2) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (fine_entry? const-decl "bool" sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_good_tscaffold formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]"
         "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))
 (step_TCC54 0
  (step_TCC26-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3"
                  (use sigma_dec
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" pos!1 "j" "len"))
                  (("1" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (typepred "St`scaf(pos!1)(n1)")
                          (("1" (grind :exclude sigma) nil nil)) nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)
                                                                                            (St`scaf WITH [(pos!1)(cur) := loop](i))) = ((LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                                                      WITH [(pos!1)
                                                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                                  1])")
                          (("1" (hide -1)
                            (("1" (replace -1 :hide? t)
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality :hide? t)
                              (("1"
                                (expand count)
                                (("1"
                                  (case "pos!1 = x!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case-replace
                                       "{i: below(num_non_terminals) |
                                                                                                                                            push?(St`scaf(x!1) WITH [(cur) := loop](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                      (("1"
                                        (rewrite card_remove)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (lift-if +)
                                            (("1"
                                              (ground)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1 2)
                                          (("2"
                                            (rewrite "count_TCC1")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (apply-extensionality)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (hide -3 -4 -6)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (expand count)
                                (("2"
                                  (use
                                   "nonempty_card[below(num_non_terminals)]")
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (rewrite count_TCC1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (grind) nil nil))
                              nil))
                            nil)
                           ("3" (expand count)
                            (("3"
                              (use "nonempty_card[below(num_non_terminals)]")
                              (("1" (grind) nil nil)
                               ("2"
                                (rewrite count_TCC1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (use "nonempty_card[below(num_non_terminals)]")
                        (("1" (grind) nil nil)
                         ("2" (rewrite count_TCC1)
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (sigma_dec formula-decl nil sigmatopdown nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (card_remove formula-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (x!1 skolem-const-decl "upto(len)" sigmatopdown nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatopdown.depth, 1)"
         "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))
 (step_TCC55 0
  (step_TCC27-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred "St`scaf(pos!1)(n1)")
        (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
       ("2" (lemma good_mem_stack)
        (("2"
          (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
           loop)
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred "St`stack")
              (("3" (expand "fine_stack?")
                (("3" (ground)
                  (("1" (grind :exclude mem_stack) nil nil)
                   ("2" (hide -1)
                    (("2" (replace -8)
                      (("2" (replace -9)
                        (("2" (replace -5)
                          (("2"
                            (case-replace
                             "push(pos(St`stack), nt(St`stack)) = St`stack")
                            (("1"
                              (case-replace
                               "St`scaf(pos(St`stack))(nt(St`stack)) = rest")
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (apply-extensionality 1) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (grind) nil nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil)
           ("4" (typepred stack) (("4" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (lemma fine_mem_stack)
        (("3"
          (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
           loop)
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
             ("2" (hide 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)
             ("3" (hide 2)
              (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
             ("4" (typepred stack)
              (("4" (hide 1)
                (("4" (expand "fine_stack?")
                  (("4" (ground)
                    (("1" (typepred stack) (("1" (grind) nil nil)) nil)
                     ("2"
                      (case-replace
                       "St`scaf(pos(stack))(nt(stack)) = rest")
                      (("1"
                        (case-replace "push(pos!1, cur) = St`stack")
                        (("1" (assert) nil nil)
                         ("2" (apply-extensionality 1)
                          (("2" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (typepred stack) (("5" (grind) nil nil)) nil))
            nil)
           ("2" (grind) nil nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil)
           ("4" (typepred stack) (("4" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatopdown
     nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (cur skolem-const-decl "uint8" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]"
          sigmatopdown nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (ent_push_extensionality formula-decl nil sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (good_mem_stack formula-decl nil sigmatopdown nil)
    (fine_mem_stack formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.rest"
         "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))
 (step_TCC56 0
  (step_TCC103-1 nil 3804706560
   ("" (skeep*)
    (("" (typepred stack) (("" (grind :exclude mem_stack?) nil nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "booleans.TRUE"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop](i)(sigmatopdown.n))) ENDIF}")))
 (step_TCC57 0
  (step_TCC95-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.stack"
         "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))
 (step_TCC58 0
  (step_TCC77-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (fine_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatopdown nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (good_good_tscaffold formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]"
         "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))
 (step_TCC59 0
  (step_TCC78-1 nil 3804455654
   ("" (skeep*)
    (("" (split)
      (("1" (typepred stack)
        (("1" (typepred depth)
          (("1" (expand good_depth?)
            (("1" (expand pushcount)
              (("1" (use scafcount_max)
                (("1" (assert)
                  (("1" (use exp2_lt :subst (n 41 m 64))
                    (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "good_depth?")
        (("2" (expand pushcount)
          (("2" (rewrite scafcount_update)
            (("1" (lift-if)
              (("1" (ground)
                (("1" (typepred stack) (("1" (grind) nil nil)) nil)
                 ("2" (typepred depth)
                  (("2" (grind :exclude scafcount) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pushcount const-decl "uint64" sigmatopdown nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (exp2_lt formula-decl nil exp2 nil)
    (scafcount_max formula-decl nil sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scafcount_update formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.+)(sigmatopdown.depth, 1)"
         "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))
 (step_TCC60 0
  (step_TCC94-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (expand "good_stack?" +)
          (("2" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma good_mem_stack)
              (("2"
                (inst - G "depth" len scaf "push(pos!1, n1)" "stack"
                 stack)
                (("1" (ground)
                  (("1" (grind) nil nil)
                   ("2" (use mem_stack_push) (("2" (ground) nil nil))
                    nil)
                   ("3" (grind) nil nil))
                  nil)
                 ("2" (grind) nil nil) ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand fine_stack? +)
        (("3" (ground)
          (("1" (lemma mem_mem_stack)
            (("1" (inst - G depth len scaf _ _ _ _)
              (("1"
                (inst - "push(pos!1, n1)" "push(pos!1, n1)" stack
                 stack)
                (("1" (ground)
                  (("1" (hide -2)
                    (("1" (use mem_stack_push) (("1" (ground) nil nil))
                      nil))
                    nil)
                   ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                   ("3" (typepred stack) (("3" (grind) nil nil)) nil)
                   ("4" (use mem_stack_push) (("4" (ground) nil nil))
                    nil)
                   ("5" (typepred stack) (("5" (grind) nil nil)) nil))
                  nil)
                 ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2"
            (use fine_mem_stack :subst
                 (len len entry "push(pos!1, n1)" u stack stack stack))
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil)
               ("3" (grind) nil nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (grind)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_mem_stack formula-decl nil sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (mem_stack_push formula-decl nil sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatopdown nil)
    (n1 skolem-const-decl "non_terminal" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]"
          sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (mem_mem_stack formula-decl nil sigmatopdown nil)
    (fine_mem_stack formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.push(sigmatopdown.pos, sigmatopdown.n1)"
         "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.+)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))
 (step_TCC61 0
  (step_TCC104-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1)
            (("2" (skeep*)
              (("2" (lift-if)
                (("2" (ground)
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (typepred stack) (("1" (grind) nil nil))
                        nil)
                       ("2" (inst?) nil nil))
                      nil))
                    nil)
                   ("2" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.n1 = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack], sigmatopdown.pos, sigmatopdown.n1)) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack](i)(sigmatopdown.n))) ENDIF}")))
 (step_TCC62 0
  (step_TCC37-1 nil 3804455654 ("" (grind) nil nil)
   ((num_non_terminals const-decl "byte" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "sigmatopdown.loop"
         "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))
 (step_TCC63 0
  (step_TCC38-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (fine_entry? const-decl "bool" sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_good_tscaffold formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]"
         "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))
 (step_TCC64 0
  (step_TCC35-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred stack)
      (("" (typepred depth)
        (("" (expand good_depth?)
          (("" (expand pushcount)
            (("" (use scafcount_max)
              (("" (assert)
                (("" (use exp2_lt :subst (n 41 m 64))
                  (("" (ground)
                    (("1" (grind) nil nil)
                     ("2" (rewrite scafcount_update)
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (typepred stack)
                            (("1" (grind) nil nil)) nil)
                           ("2" (typepred depth)
                            (("2" (grind :exclude scafcount) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred stack) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (scafcount_max formula-decl nil sigmatopdown nil)
    (exp2_lt formula-decl nil exp2 nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (scafcount_update formula-decl nil sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatopdown.depth, 1)"
         "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))
 (step_TCC65 0
  (step_TCC36-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             loop)
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil)
             ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u loop stack rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (grind) nil nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_mem_stack formula-decl nil sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (ent_push_extensionality formula-decl nil sigmatopdown nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (cur skolem-const-decl "uint8" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]"
          sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatopdown
     nil)
    (fine_mem_stack formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.rest"
         "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))
 (step_TCC66 0
  (step_TCC98-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred stack)
      (("" (expand good_stack?)
        (("" (ground)
          (("1" (grind) nil nil)
           ("2" (grind :exclude (good_stack? fine_stack? mem_stack?))
            nil nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (successor const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "booleans.TRUE"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop](i)(sigmatopdown.n))) ENDIF}")))
 (step_TCC67 0
  (step_TCC84-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst-cp - pos!1 n1)
              (("" (inst - pos!1 n2)
                (("" (ground)
                  (("1" (expand gfcount)
                    (("1" (use "sigma_max")
                      (("1" (ground)
                        (("1"
                          (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                          (("1" (assert)
                            (("1"
                              (name-replace lnn
                               "len * num_non_terminals + num_non_terminals")
                              (("1"
                                (assert)
                                (("1"
                                  (case-replace
                                   "dep(scaf(pos!1)(n2)) = d2")
                                  (("1"
                                    (case-replace
                                     "dep(scaf(pos!1)(n1)) = d1")
                                    (("1"
                                      (assert)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (case "len * num_non_terminals <= exp2(46)")
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (use
                                 "lt_times_lt_pos1"
                                 :subst
                                 (px
                                  len
                                  nnz
                                  num_non_terminals
                                  y
                                  "exp2(32)"
                                  w
                                  "exp2(8)"))
                                (("1"
                                  (hide-all-but (-1 1))
                                  (("1"
                                    (grind)
                                    (("1"
                                      (typepred len)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil) ("3" (grind) nil nil)
                   ("4" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (uint32 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sigma_max formula-decl nil sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "(number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1)"
         "uint64")))
 (step_TCC68 0
  (step_TCC92-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype
         "sigmatopdown.fail((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1))"
         "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))
 (step_TCC69 0
  (step_TCC93-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fine_entry? const-decl "bool" sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (d1 skolem-const-decl "uint64" sigmatopdown nil)
    (d2 skolem-const-decl "uint64" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_good_tscaffold formula-decl nil sigmatopdown nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1))]"
         "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))
 (step_TCC70 0
  (step_TCC53-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3"
                  (use sigma_dec
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" pos!1 "j" "len"))
                  (("1" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (grind) nil nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)
                                                                                            (St`scaf WITH [(pos!1)(cur) := fail(1 + max(d1, d2))](i))) = ((LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                                                      WITH [(pos!1)
                                                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                                  1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                                                                                                            push?(St`scaf(x!1) WITH [(cur) := fail(1 + max(d1, d2))](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if +)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (typepred
                                                 "St`scaf(pos!1)(n1)")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skeep*)
                                              (("3"
                                                (use step_TCC67)
                                                (("3"
                                                  (ground)
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide -6 2)
                                          (("3"
                                            (typepred
                                             "St`scaf(pos!1)(n1)")
                                            (("3"
                                              (typepred
                                               "St`scaf(pos!1)(n2)")
                                              (("3"
                                                (skeep*)
                                                (("3"
                                                  (use step_TCC68)
                                                  (("3"
                                                    (ground)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (inst?)
                                                          (("3"
                                                            (ground)
                                                            (("3"
                                                              (typepred
                                                               "St`scaf(pos!1)(n1)")
                                                              (("3"
                                                                (typepred
                                                                 "St`scaf(pos!1)(n2)")
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (use step_TCC67)
                                          (("4"
                                            (ground)
                                            (("4"
                                              (inst?)
                                              (("4"
                                                (inst?)
                                                (("4"
                                                  (inst?)
                                                  (("4"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand count)
                                (("2"
                                  (use
                                   "nonempty_card[below(num_non_terminals)]")
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (rewrite count_TCC1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3"
                                  (typepred "St`scaf(pos!1)(n1)")
                                  (("3"
                                    (typepred "St`scaf(pos!1)(n2)")
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (hide 2)
                                (("4"
                                  (use step_TCC67)
                                  (("4"
                                    (ground)
                                    (("4"
                                      (inst?)
                                      (("4"
                                        (inst?)
                                        (("4"
                                          (inst?)
                                          (("4" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand count)
                            (("3"
                              (use "nonempty_card[below(num_non_terminals)]")
                              (("1" (grind) nil nil)
                               ("2"
                                (rewrite count_TCC1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (use step_TCC68)
                            (("4" (ground)
                              (("4"
                                (inst?)
                                (("4"
                                  (inst?)
                                  (("4"
                                    (inst?)
                                    (("4" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("5" (hide -1 3)
                            (("5" (use step_TCC67)
                              (("5"
                                (ground)
                                (("5"
                                  (inst?)
                                  (("5"
                                    (inst?)
                                    (("5"
                                      (inst?)
                                      (("5" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (use "nonempty_card[below(num_non_terminals)]")
                        (("1" (grind) nil nil)
                         ("2" (rewrite count_TCC1)
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (sigma_dec formula-decl nil sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (d2 skolem-const-decl "uint64" sigmatopdown nil)
    (d1 skolem-const-decl "uint64" sigmatopdown nil)
    (step_TCC68 subtype-tcc nil sigmatopdown nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (step_TCC67 subtype-tcc nil sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (x!1 skolem-const-decl "upto(len)" sigmatopdown nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatopdown.depth, 1)"
         "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1))]))")))
 (step_TCC71 0
  (step_TCC54-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2"
          (inst - G "depth - 1" len scaf stack rest
           "fail(1 + max(d1, d2))")
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (typepred "stack")
              (("2" (typepred "St`scaf(pos!1)(n1)")
                (("2" (typepred "St`scaf(pos!1)(n2)")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2"
                    (inst - G "depth - 1" len scaf stack rest
                     "fail(1 + max(d1, d2))")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (typepred "St`scaf(pos!1)(n1)")
                      (("2" (typepred "St`scaf(pos!1)(n2)")
                        (("2" (grind) nil nil)) nil))
                      nil)
                     ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatopdown
     nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (d2 skolem-const-decl "uint64" sigmatopdown nil)
    (d1 skolem-const-decl "uint64" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (good_mem_stack formula-decl nil sigmatopdown nil)
    (fine_mem_stack formula-decl nil sigmatopdown nil)
    (mem_stack? def-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.rest"
         "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1))]))")))
 (step_TCC72 0
  (step_TCC96-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)))](i)(sigmatopdown.n))) ENDIF}")))
 (step_TCC73 0
  (step_TCC101-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst-cp - pos!1 n1)
              (("" (inst - pos!1 n2)
                (("" (ground)
                  (("1" (expand gfcount)
                    (("1" (use "sigma_max")
                      (("1" (ground)
                        (("1"
                          (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                          (("1" (assert)
                            (("1"
                              (name-replace lnn
                               "len * num_non_terminals + num_non_terminals")
                              (("1"
                                (assert)
                                (("1"
                                  (case-replace
                                   "dep(scaf(pos!1)(n2)) = d2")
                                  (("1"
                                    (case-replace
                                     "dep(scaf(pos!1)(n1)) = d1")
                                    (("1"
                                      (assert)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (case "len * num_non_terminals <= exp2(46)")
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (use
                                 "lt_times_lt_pos1"
                                 :subst
                                 (px
                                  len
                                  nnz
                                  num_non_terminals
                                  y
                                  "exp2(32)"
                                  w
                                  "exp2(8)"))
                                (("1"
                                  (hide-all-but (-1 1))
                                  (("1"
                                    (grind)
                                    (("1"
                                      (typepred len)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil) ("3" (grind) nil nil)
                   ("4" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (uint32 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sigma_max formula-decl nil sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "(number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1)"
         "uint64")))
 (step_TCC74 0
  (step_TCC102-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "St`scaf(pos!1)(n1)")
      (("" (typepred "St`scaf(pos!1)(n2)") (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (uint32 type-eq-decl nil integertypes nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.good((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1), sigmatopdown.sp)"
         "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))
 (step_TCC75 0
  (step_TCC84-1 nil 3808434333
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (typepred "scaf(pos!1)(n1)")
                  (("2" (typepred "scaf(pos!1)(n2)")
                    (("2" (hide 2) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack)
                (("2" (typepred "scaf(pos!1)(n1)")
                  (("2" (typepred "scaf(pos!1)(n2)")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (fine_entry? const-decl "bool" sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]"
     sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (d1 skolem-const-decl "uint64" sigmatopdown nil)
    (d2 skolem-const-decl "uint64" sigmatopdown nil)
    (sp skolem-const-decl "uint32" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_good_tscaffold formula-decl nil sigmatopdown nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1), sigmatopdown.sp)]"
         "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))
 (step_TCC76 0
  (step_TCC57-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3"
                  (use sigma_dec
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" pos!1 "j" "len"))
                  (("1" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (grind) nil nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                                                                               count(num_non_terminals)(push?)
                                                                                                    (St`scaf WITH [(pos!1)(cur) := good(1 + max(d1, d2), sp)](i))) = ((LAMBDA (i: upto(len)):
                                                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                                                              WITH [(pos!1)
                                                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                                          1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                                                                                                                          push?(St`scaf(x!1) WITH [(cur) := good(1 + max(d1, d2), sp)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if +)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (typepred
                                                 "St`scaf(pos!1)(n1)")
                                                (("2"
                                                  (typepred
                                                   "scaf(pos!1)(n2)")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skeep*)
                                              (("3"
                                                (use step_TCC73)
                                                (("3"
                                                  (ground)
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide -6 2)
                                          (("3"
                                            (typepred
                                             "St`scaf(pos!1)(n1)")
                                            (("3"
                                              (typepred
                                               "St`scaf(pos!1)(n2)")
                                              (("3"
                                                (skeep*)
                                                (("3"
                                                  (use step_TCC74)
                                                  (("3"
                                                    (ground)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (inst?)
                                                          (("3"
                                                            (ground)
                                                            (("3"
                                                              (typepred
                                                               "St`scaf(pos!1)(n1)")
                                                              (("3"
                                                                (typepred
                                                                 "St`scaf(pos!1)(n2)")
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (skeep*)
                                          (("4"
                                            (use step_TCC73)
                                            (("4"
                                              (ground)
                                              (("4"
                                                (inst?)
                                                (("4"
                                                  (inst?)
                                                  (("4"
                                                    (inst?)
                                                    (("4"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand count)
                                (("2"
                                  (use
                                   "nonempty_card[below(num_non_terminals)]")
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (rewrite count_TCC1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3"
                                  (typepred "St`scaf(pos!1)(n1)")
                                  (("3"
                                    (typepred "St`scaf(pos!1)(n2)")
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (hide 2)
                                (("4"
                                  (use step_TCC73)
                                  (("4"
                                    (ground)
                                    (("4"
                                      (inst?)
                                      (("4"
                                        (inst?)
                                        (("4"
                                          (inst?)
                                          (("4" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand count)
                            (("3"
                              (use "nonempty_card[below(num_non_terminals)]")
                              (("1" (grind) nil nil)
                               ("2"
                                (rewrite count_TCC1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (use step_TCC74)
                            (("4" (ground)
                              (("4"
                                (inst?)
                                (("4"
                                  (inst?)
                                  (("4"
                                    (inst?)
                                    (("4" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("5" (hide -1 3)
                            (("5" (use step_TCC73)
                              (("5"
                                (ground)
                                (("5"
                                  (inst?)
                                  (("5"
                                    (inst?)
                                    (("5"
                                      (inst?)
                                      (("5" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (use "nonempty_card[below(num_non_terminals)]")
                        (("1" (grind) nil nil)
                         ("2" (rewrite count_TCC1)
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (sigma_dec formula-decl nil sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]"
     sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (sp skolem-const-decl "uint32" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (d2 skolem-const-decl "uint64" sigmatopdown nil)
    (d1 skolem-const-decl "uint64" sigmatopdown nil)
    (step_TCC74 subtype-tcc nil sigmatopdown nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (step_TCC73 subtype-tcc nil sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (x!1 skolem-const-decl "upto(len)" sigmatopdown nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatopdown.depth, 1)"
         "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1), sigmatopdown.sp)]))")))
 (step_TCC77 0
  (step_TCC58-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2"
          (inst - G "depth - 1" len scaf stack rest
           "good(1 + max(d1, d2), sp)")
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (typepred "stack")
              (("2" (typepred "St`scaf(pos!1)(n1)")
                (("2" (typepred "St`scaf(pos!1)(n2)")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (use step_TCC76)
            (("3" (ground)
              (("3" (inst?)
                (("3" (inst?)
                  (("3" (inst?) (("3" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2"
                    (inst - G "depth - 1" len scaf stack rest
                     "good(1 + max(d1, d2), sp)")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (typepred "St`scaf(pos!1)(n1)")
                      (("2" (typepred "St`scaf(pos!1)(n2)")
                        (("2" (grind) nil nil)) nil))
                      nil)
                     ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatopdown
     nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (sp skolem-const-decl "uint32" sigmatopdown nil)
    (d2 skolem-const-decl "uint64" sigmatopdown nil)
    (d1 skolem-const-decl "uint64" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]"
     sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (step_TCC76 subtype-tcc nil sigmatopdown nil)
    (good_mem_stack formula-decl nil sigmatopdown nil)
    (fine_mem_stack formula-decl nil sigmatopdown nil)
    (mem_stack? def-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.rest"
         "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(real_defs.max(sigmatopdown.d1, sigmatopdown.d2), 1), sigmatopdown.sp)]))")))
 (step_TCC78 0
  (step_TCC99-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), sigmatopdown.sp)], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, real_defs.max(sigmatopdown.d1, sigmatopdown.d2)), sigmatopdown.sp)](i)(sigmatopdown.n))) ENDIF}")))
 (step_TCC79 0
  (step_TCC91-1 nil 3804706560 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.stack"
         "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))
 (step_TCC80 0
  (step_TCC111-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (fine_entry? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatopdown nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (good_good_tscaffold formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n2) := sigmatopdown.stack]"
         "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))
 (step_TCC81 0
  (step_TCC112-1 nil 3804455654
   ("" (skeep*)
    (("" (split)
      (("1" (typepred stack)
        (("1" (typepred depth)
          (("1" (expand good_depth?)
            (("1" (expand pushcount)
              (("1" (use scafcount_max)
                (("1" (assert)
                  (("1" (use exp2_lt :subst (n 41 m 64))
                    (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "good_depth?")
        (("2" (expand pushcount)
          (("2" (rewrite scafcount_update)
            (("1" (lift-if)
              (("1" (ground)
                (("1" (typepred stack) (("1" (grind) nil nil)) nil)
                 ("2" (typepred depth)
                  (("2" (grind :exclude scafcount) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pushcount const-decl "uint64" sigmatopdown nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (exp2_lt formula-decl nil exp2 nil)
    (scafcount_max formula-decl nil sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scafcount_update formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.+)(sigmatopdown.depth, 1)"
         "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n2) := sigmatopdown.stack]))")))
 (step_TCC82 0
  (step_TCC78-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (expand "good_stack?" +)
          (("2" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma good_mem_stack)
              (("2"
                (inst - G "depth" len scaf "push(pos!1, n2)" "stack"
                 stack)
                (("1" (ground)
                  (("1" (grind) nil nil)
                   ("2" (use mem_stack_push) (("2" (ground) nil nil))
                    nil)
                   ("3" (grind) nil nil))
                  nil)
                 ("2" (grind) nil nil) ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand fine_stack? +)
        (("3" (ground)
          (("1" (lemma mem_mem_stack)
            (("1" (inst - G depth len scaf _ _ _ _)
              (("1"
                (inst - "push(pos!1, n2)" "push(pos!1, n2)" stack
                 stack)
                (("1" (ground)
                  (("1" (hide -2)
                    (("1" (use mem_stack_push) (("1" (ground) nil nil))
                      nil))
                    nil)
                   ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                   ("3" (typepred stack) (("3" (grind) nil nil)) nil)
                   ("4" (use mem_stack_push) (("4" (ground) nil nil))
                    nil)
                   ("5" (typepred stack) (("5" (grind) nil nil)) nil))
                  nil)
                 ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2"
            (use fine_mem_stack :subst
                 (len len entry "push(pos!1, n2)" u stack stack stack))
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil)
               ("3" (grind) nil nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (grind)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_mem_stack formula-decl nil sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (mem_stack_push formula-decl nil sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatopdown nil)
    (n2 skolem-const-decl "non_terminal" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]"
          sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatopdown nil)
    (mem_mem_stack formula-decl nil sigmatopdown nil)
    (fine_mem_stack formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.push(sigmatopdown.pos, sigmatopdown.n2)"
         "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.+)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n2) := sigmatopdown.stack]))")))
 (step_TCC83 0
  (step_TCC119-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1)
            (("2" (skeep*)
              (("2" (lift-if)
                (("2" (ground)
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (typepred stack) (("1" (grind) nil nil))
                        nil)
                       ("2" (inst?) nil nil))
                      nil))
                    nil)
                   ("2" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.n2 = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n2) := sigmatopdown.stack], sigmatopdown.pos, sigmatopdown.n2)) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n2) := sigmatopdown.stack](i)(sigmatopdown.n))) ENDIF}")))
 (step_TCC84 0
  (step_TCC59-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "sigmatopdown.loop"
         "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))
 (step_TCC85 0
  (step_TCC60-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fine_entry? const-decl "bool" sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_good_tscaffold formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]"
         "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))
 (step_TCC86 0
  (step_TCC69-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred stack)
      (("" (typepred depth)
        (("" (expand good_depth?)
          (("" (expand pushcount)
            (("" (use scafcount_max)
              (("" (assert)
                (("" (use exp2_lt :subst (n 41 m 64))
                  (("" (ground)
                    (("1" (grind) nil nil)
                     ("2" (rewrite scafcount_update)
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (typepred stack)
                            (("1" (grind) nil nil)) nil)
                           ("2" (typepred depth)
                            (("2" (grind :exclude scafcount) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred stack) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (scafcount_max formula-decl nil sigmatopdown nil)
    (exp2_lt formula-decl nil exp2 nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (scafcount_update formula-decl nil sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatopdown.depth, 1)"
         "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))
 (step_TCC87 0
  (step_TCC70-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             loop)
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil)
             ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u loop stack rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (grind) nil nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_mem_stack formula-decl nil sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (ent_push_extensionality formula-decl nil sigmatopdown nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (cur skolem-const-decl "uint8" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]"
          sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatopdown
     nil)
    (fine_mem_stack formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.rest"
         "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))
 (step_TCC88 0
  (step_TCC118-1 nil 3804706560
   ("" (skeep*)
    (("" (typepred stack)
      (("" (expand good_stack?)
        (("" (ground)
          (("1" (grind) nil nil)
           ("2" (grind :exclude (good_stack? fine_stack? mem_stack?))
            nil nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (successor const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "booleans.TRUE"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop](i)(sigmatopdown.n))) ENDIF}")))
 (step_TCC89 0
  (step_TCC109-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - pos!1 n1)
              (("" (ground)
                (("1" (expand gfcount)
                  (("1" (use "sigma_max")
                    (("1" (ground)
                      (("1"
                        (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                        (("1" (assert)
                          (("1"
                            (name-replace lnn
                             "len * num_non_terminals + num_non_terminals")
                            (("1" (assert)
                              (("1"
                                (case-replace
                                 "dep(scaf(pos!1)(n1)) = d1")
                                (("1" (assert) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (case "len * num_non_terminals <= exp2(46)")
                            (("1" (assert) (("1" (grind) nil nil)) nil)
                             ("2"
                              (use "lt_times_lt_pos1" :subst
                                   (px
                                    len
                                    nnz
                                    num_non_terminals
                                    y
                                    "exp2(32)"
                                    w
                                    "exp2(8)"))
                              (("1"
                                (hide-all-but (-1 1))
                                (("1"
                                  (grind)
                                  (("1"
                                    (typepred len)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (sigma_max formula-decl nil sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.+)(sigmatopdown.d1, 1)" "uint64")))
 (step_TCC90 0
  (step_TCC110-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "St`scaf(pos!1)(n1)") (("" (grind) nil nil)) nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (uint32 type-eq-decl nil integertypes nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), sigmatopdown.sp)"
         "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))
 (step_TCC91 0
  (step_TCC99-1 nil 3804991042
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?)
                    (("2" (ground)
                      (("1" (typepred "St`scaf(pos!1)(n1)")
                        (("1" (grind) nil nil)) nil)
                       ("2" (expand good_good?)
                        (("2" (grind :exclude (max gfcount)) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (typepred lflag)
                  (("3" (skeep*)
                    (("3" (ground)
                      (("1" (inst?) nil nil) ("2" (grind) nil nil)
                       ("3" (inst?) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "St`scaf(pos!1)(n1)")
                (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (fine_entry? const-decl "bool" sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]"
     sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (d1 skolem-const-decl "uint64" sigmatopdown nil)
    (sp skolem-const-decl "uint32" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_good_tscaffold formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), sigmatopdown.sp)]"
         "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))
 (step_TCC92 0
  (step_TCC61-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred stack)
      (("" (typepred depth)
        (("" (expand good_depth?)
          (("" (expand pushcount)
            (("" (use scafcount_max)
              (("" (assert)
                (("" (use exp2_lt :subst (n 41 m 64))
                  (("" (ground)
                    (("1" (grind) nil nil)
                     ("2" (rewrite scafcount_update)
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (typepred stack)
                            (("1" (grind) nil nil)) nil)
                           ("2" (typepred depth)
                            (("2" (grind :exclude scafcount) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "scaf(pos!1)(n1)")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (scafcount_max formula-decl nil sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (exp2_lt formula-decl nil exp2 nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]"
     sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (scafcount_update formula-decl nil sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatopdown.depth, 1)"
         "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), sigmatopdown.sp)]))")))
 (step_TCC93 0
  (step_TCC62-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             "good(1 + d1, sp)")
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (typepred "St`scaf(pos(St`stack))(n1)")
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil))
              nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u " good(1 + d1, sp)"
              stack rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (typepred "St`scaf(pos(St`stack))(n1)")
          (("1" (grind) nil nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_mem_stack formula-decl nil sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (ent_push_extensionality formula-decl nil sigmatopdown nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (sp skolem-const-decl "uint32" sigmatopdown nil)
    (d1 skolem-const-decl "uint64" sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]"
     sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (cur skolem-const-decl "uint8" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]"
          sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatopdown
     nil)
    (fine_mem_stack formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.rest"
         "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), sigmatopdown.sp)]))")))
 (step_TCC94 0
  (step_TCC116-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, sigmatopdown.d1), sigmatopdown.sp)], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, sigmatopdown.d1), sigmatopdown.sp)](i)(sigmatopdown.n))) ENDIF}")))
 (step_TCC95 0
  (step_TCC112-1 nil 3804706560 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.stack"
         "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))
 (step_TCC96 0
  (step_TCC92-1 nil 3804706560
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (fine_entry? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatopdown nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (good_good_tscaffold formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]"
         "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))
 (step_TCC97 0
  (step_TCC93-1 nil 3804706560
   ("" (skeep*)
    (("" (split)
      (("1" (typepred stack)
        (("1" (typepred depth)
          (("1" (expand good_depth?)
            (("1" (expand pushcount)
              (("1" (use scafcount_max)
                (("1" (assert)
                  (("1" (use exp2_lt :subst (n 41 m 64))
                    (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "good_depth?")
        (("2" (expand pushcount)
          (("2" (rewrite scafcount_update)
            (("1" (lift-if)
              (("1" (ground)
                (("1" (typepred stack) (("1" (grind) nil nil)) nil)
                 ("2" (typepred depth)
                  (("2" (grind :exclude scafcount) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pushcount const-decl "uint64" sigmatopdown nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (exp2_lt formula-decl nil exp2 nil)
    (scafcount_max formula-decl nil sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scafcount_update formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.+)(sigmatopdown.depth, 1)"
         "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))
 (step_TCC98 0
  (step_TCC94-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (expand "good_stack?" +)
          (("2" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma good_mem_stack)
              (("2"
                (inst - G "depth" len scaf "push(pos!1, n1)" "stack"
                 stack)
                (("1" (ground)
                  (("1" (grind) nil nil)
                   ("2" (use mem_stack_push) (("2" (ground) nil nil))
                    nil)
                   ("3" (grind) nil nil))
                  nil)
                 ("2" (grind) nil nil) ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand fine_stack? +)
        (("3" (ground)
          (("1" (lemma mem_mem_stack)
            (("1" (inst - G depth len scaf _ _ _ _)
              (("1"
                (inst - "push(pos!1, n1)" "push(pos!1, n1)" stack
                 stack)
                (("1" (ground)
                  (("1" (hide -2)
                    (("1" (use mem_stack_push) (("1" (ground) nil nil))
                      nil))
                    nil)
                   ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                   ("3" (typepred stack) (("3" (grind) nil nil)) nil)
                   ("4" (use mem_stack_push) (("4" (ground) nil nil))
                    nil)
                   ("5" (typepred stack) (("5" (grind) nil nil)) nil))
                  nil)
                 ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2"
            (use fine_mem_stack :subst
                 (len len entry "push(pos!1, n1)" u stack stack stack))
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil)
               ("3" (grind) nil nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (grind)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_mem_stack formula-decl nil sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (mem_stack_push formula-decl nil sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatopdown nil)
    (n1 skolem-const-decl "non_terminal" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]"
          sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (mem_mem_stack formula-decl nil sigmatopdown nil)
    (fine_mem_stack formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.push(sigmatopdown.pos, sigmatopdown.n1)"
         "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.+)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))
 (step_TCC99 0
  (step_TCC125-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1)
            (("2" (skeep*)
              (("2" (lift-if)
                (("2" (ground)
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (typepred stack) (("1" (grind) nil nil))
                        nil)
                       ("2" (inst?) nil nil))
                      nil))
                    nil)
                   ("2" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.n1 = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack], sigmatopdown.pos, sigmatopdown.n1)) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack](i)(sigmatopdown.n))) ENDIF}")))
 (step_TCC100 0
  (step_TCC71-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "sigmatopdown.loop"
         "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))
 (step_TCC101 0
  (step_TCC72-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fine_entry? const-decl "bool" sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_good_tscaffold formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]"
         "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))
 (step_TCC102 0
  (step_TCC85-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred stack)
      (("" (typepred depth)
        (("" (expand good_depth?)
          (("" (expand pushcount)
            (("" (use scafcount_max)
              (("" (assert)
                (("" (use exp2_lt :subst (n 41 m 64))
                  (("" (ground)
                    (("1" (grind) nil nil)
                     ("2" (rewrite scafcount_update)
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (typepred stack)
                            (("1" (grind) nil nil)) nil)
                           ("2" (typepred depth)
                            (("2" (grind :exclude scafcount) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred stack) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (scafcount_max formula-decl nil sigmatopdown nil)
    (exp2_lt formula-decl nil exp2 nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (scafcount_update formula-decl nil sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatopdown.depth, 1)"
         "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))
 (step_TCC103 0
  (step_TCC86-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             loop)
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil)
             ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u loop stack rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (grind) nil nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_mem_stack formula-decl nil sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (ent_push_extensionality formula-decl nil sigmatopdown nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (cur skolem-const-decl "uint8" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]"
          sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatopdown
     nil)
    (fine_mem_stack formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.rest"
         "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))
 (step_TCC104 0
  (step_TCC126-1 nil 3804706560
   ("" (skeep*)
    (("" (typepred stack)
      (("" (expand good_stack?)
        (("" (ground)
          (("1" (grind) nil nil)
           ("2" (grind :exclude (good_stack? fine_stack? mem_stack?))
            nil nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (successor const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "booleans.TRUE"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop](i)(sigmatopdown.n))) ENDIF}")))
 (step_TCC105 0
  (step_TCC113-1 nil 3804991042
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - pos!1 n1)
              (("" (ground)
                (("1" (expand gfcount)
                  (("1" (use "sigma_max")
                    (("1" (ground)
                      (("1"
                        (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                        (("1" (assert)
                          (("1"
                            (name-replace lnn
                             "len * num_non_terminals + num_non_terminals")
                            (("1" (assert)
                              (("1"
                                (case-replace
                                 "dep(scaf(pos!1)(n1)) = d1")
                                (("1" (assert) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (case "len * num_non_terminals <= exp2(46)")
                            (("1" (assert) (("1" (grind) nil nil)) nil)
                             ("2"
                              (use "lt_times_lt_pos1" :subst
                                   (px
                                    len
                                    nnz
                                    num_non_terminals
                                    y
                                    "exp2(32)"
                                    w
                                    "exp2(8)"))
                              (("1"
                                (hide-all-but (-1 1))
                                (("1"
                                  (grind)
                                  (("1"
                                    (typepred len)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (sigma_max formula-decl nil sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.+)(sigmatopdown.d1, 1)" "uint64")))
 (step_TCC106 0
  (step_TCC114-1 nil 3804991042 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype
         "sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))"
         "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))
 (step_TCC107 0
  (step_TCC115-1 nil 3804991042
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fine_entry? const-decl "bool" sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (d1 skolem-const-decl "uint64" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_good_tscaffold formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]"
         "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))
 (step_TCC108 0
  (step_TCC73-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3"
                  (use sigma_dec
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" pos!1 "j" "len"))
                  (("1" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (grind) nil nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)
                                                                                            (St`scaf WITH [(pos!1)(cur) := fail(1 + d1)](i))) = ((LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                                                      WITH [(pos!1)
                                                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                                  1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                                                                                                            push?(St`scaf(x!1) WITH [(cur) := fail(1 + d1)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if +)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil)
                                             ("3"
                                              (skeep*)
                                              (("3"
                                                (use step_TCC105)
                                                (("3"
                                                  (ground)
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide -6 2)
                                          (("3" (grind) nil nil))
                                          nil)
                                         ("4"
                                          (hide 2)
                                          (("4"
                                            (skeep*)
                                            (("4"
                                              (use step_TCC105)
                                              (("4"
                                                (ground)
                                                (("4"
                                                  (inst?)
                                                  (("4"
                                                    (inst?)
                                                    (("4"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand count +)
                                  (("2"
                                    (use
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (expand nonempty?)
                                        (("1"
                                          (expand empty?)
                                          (("1"
                                            (inst - "nt(stack)")
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (typepred "nt(stack)")
                                                (("2"
                                                  (expand
                                                   "good_push_entry?")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "count_TCC1")
                                      (("2"
                                        (hide 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (hide 2)
                                (("4"
                                  (use step_TCC105)
                                  (("4"
                                    (ground)
                                    (("4"
                                      (inst?)
                                      (("4"
                                        (inst?)
                                        (("4" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -1)
                            (("3" (expand count)
                              (("3"
                                (use
                                 "nonempty_card[below(num_non_terminals)]")
                                (("1"
                                  (ground)
                                  (("1"
                                    (hide -5 5)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "count_TCC1")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide -1 3) (("4" (grind) nil nil))
                            nil)
                           ("5" (use step_TCC105)
                            (("5" (ground)
                              (("5"
                                (inst?)
                                (("5"
                                  (inst?)
                                  (("5" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (use "nonempty_card[below(num_non_terminals)]")
                        (("1" (grind) nil nil)
                         ("2" (rewrite count_TCC1)
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (sigma_dec formula-decl nil sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (d1 skolem-const-decl "uint64" sigmatopdown nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (step_TCC105 subtype-tcc nil sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (x!1 skolem-const-decl "upto(len)" sigmatopdown nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatopdown nil)
    (nonempty? const-decl "bool" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatopdown.depth, 1)"
         "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]))")))
 (step_TCC109 0
  (step_TCC74-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             "fail(1 + d1)")
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (typepred "St`scaf(pos(St`stack))(n1)")
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil))
              nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u "fail(1 + d1)" stack
              rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (typepred "St`scaf(pos(St`stack))(n1)")
          (("1" (grind) nil nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_mem_stack formula-decl nil sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (ent_push_extensionality formula-decl nil sigmatopdown nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (d1 skolem-const-decl "uint64" sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (cur skolem-const-decl "uint8" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]"
          sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatopdown
     nil)
    (fine_mem_stack formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.rest"
         "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]))")))
 (step_TCC110 0
  (step_TCC127-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, sigmatopdown.d1))], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, sigmatopdown.d1))](i)(sigmatopdown.n))) ENDIF}")))
 (step_TCC111 0
  (step_TCC119-1 nil 3804991042
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - pos!1 n1)
              (("" (ground)
                (("1" (expand gfcount)
                  (("1" (use "sigma_max")
                    (("1" (ground)
                      (("1"
                        (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                        (("1" (assert)
                          (("1"
                            (name-replace lnn
                             "len * num_non_terminals + num_non_terminals")
                            (("1" (assert)
                              (("1"
                                (case-replace
                                 "dep(scaf(pos!1)(n1)) = d1")
                                (("1" (assert) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (case "len * num_non_terminals <= exp2(46)")
                            (("1" (assert) (("1" (grind) nil nil)) nil)
                             ("2"
                              (use "lt_times_lt_pos1" :subst
                                   (px
                                    len
                                    nnz
                                    num_non_terminals
                                    y
                                    "exp2(32)"
                                    w
                                    "exp2(8)"))
                              (("1"
                                (hide-all-but (-1 1))
                                (("1"
                                  (grind)
                                  (("1"
                                    (typepred len)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (sigma_max formula-decl nil sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.+)(sigmatopdown.d1, 1)" "uint64")))
 (step_TCC112 0
  (step_TCC121-1 nil 3804991042 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)"
         "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))
 (step_TCC113 0
  (step_TCC122-1 nil 3804991042
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?)
                    (("2" (ground)
                      (("1" (typepred "St`scaf(pos!1)(n1)")
                        (("1" (grind) nil nil)) nil)
                       ("2" (expand good_good?)
                        (("2" (grind :exclude (max gfcount)) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (typepred lflag)
                  (("3" (skeep*)
                    (("3" (ground)
                      (("1" (inst?) nil nil) ("2" (grind) nil nil)
                       ("3" (inst?) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "St`scaf(pos!1)(n1)")
                (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (fine_entry? const-decl "bool" sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]"
     sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (d1 skolem-const-decl "uint64" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_good_tscaffold formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)]"
         "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))
 (step_TCC114 0
  (step_TCC107-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred stack)
      (("" (typepred depth)
        (("" (expand good_depth?)
          (("" (expand pushcount)
            (("" (use scafcount_max)
              (("" (assert)
                (("" (use exp2_lt :subst (n 41 m 64))
                  (("" (ground)
                    (("1" (grind) nil nil)
                     ("2" (rewrite scafcount_update)
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (typepred stack)
                            (("1" (grind) nil nil)) nil)
                           ("2" (typepred depth)
                            (("2" (grind :exclude scafcount) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "scaf(pos!1)(n1)")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (scafcount_max formula-decl nil sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (exp2_lt formula-decl nil exp2 nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]"
     sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (scafcount_update formula-decl nil sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatopdown.depth, 1)"
         "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)]))")))
 (step_TCC115 0
  (step_TCC108-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             "good(1 + d1, 0)")
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (typepred "St`scaf(pos(St`stack))(n1)")
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil))
              nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u " good(1 + d1, 0)"
              stack rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (typepred "St`scaf(pos(St`stack))(n1)")
          (("1" (grind) nil nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_mem_stack formula-decl nil sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (ent_push_extensionality formula-decl nil sigmatopdown nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (d1 skolem-const-decl "uint64" sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]"
     sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (cur skolem-const-decl "uint8" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]"
          sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatopdown
     nil)
    (fine_mem_stack formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.rest"
         "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)]))")))
 (step_TCC116 0
  (step_TCC128-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, sigmatopdown.d1), 0)], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, sigmatopdown.d1), 0)](i)(sigmatopdown.n))) ENDIF}")))
 (step_TCC117 0
  (step_TCC133-1 nil 3804706560 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.stack"
         "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))
 (step_TCC118 0
  (step_TCC113-1 nil 3804706560
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (fine_entry? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatopdown nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (good_good_tscaffold formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]"
         "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))
 (step_TCC119 0
  (step_TCC114-1 nil 3804706560
   ("" (skeep*)
    (("" (split)
      (("1" (typepred stack)
        (("1" (typepred depth)
          (("1" (expand good_depth?)
            (("1" (expand pushcount)
              (("1" (use scafcount_max)
                (("1" (assert)
                  (("1" (use exp2_lt :subst (n 41 m 64))
                    (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "good_depth?")
        (("2" (expand pushcount)
          (("2" (rewrite scafcount_update)
            (("1" (lift-if)
              (("1" (ground)
                (("1" (typepred stack) (("1" (grind) nil nil)) nil)
                 ("2" (typepred depth)
                  (("2" (grind :exclude scafcount) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pushcount const-decl "uint64" sigmatopdown nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (exp2_lt formula-decl nil exp2 nil)
    (scafcount_max formula-decl nil sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scafcount_update formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.+)(sigmatopdown.depth, 1)"
         "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))
 (step_TCC120 0
  (step_TCC115-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (expand "good_stack?" +)
          (("2" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma good_mem_stack)
              (("2"
                (inst - G "depth" len scaf "push(pos!1, n1)" "stack"
                 stack)
                (("1" (ground)
                  (("1" (grind) nil nil)
                   ("2" (use mem_stack_push) (("2" (ground) nil nil))
                    nil)
                   ("3" (grind) nil nil))
                  nil)
                 ("2" (grind) nil nil) ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand fine_stack? +)
        (("3" (ground)
          (("1" (lemma mem_mem_stack)
            (("1" (inst - G depth len scaf _ _ _ _)
              (("1"
                (inst - "push(pos!1, n1)" "push(pos!1, n1)" stack
                 stack)
                (("1" (ground)
                  (("1" (hide -2)
                    (("1" (use mem_stack_push) (("1" (ground) nil nil))
                      nil))
                    nil)
                   ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                   ("3" (typepred stack) (("3" (grind) nil nil)) nil)
                   ("4" (use mem_stack_push) (("4" (ground) nil nil))
                    nil)
                   ("5" (typepred stack) (("5" (grind) nil nil)) nil))
                  nil)
                 ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2"
            (use fine_mem_stack :subst
                 (len len entry "push(pos!1, n1)" u stack stack stack))
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil)
               ("3" (grind) nil nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (grind)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_mem_stack formula-decl nil sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (mem_stack_push formula-decl nil sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatopdown nil)
    (n1 skolem-const-decl "non_terminal" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]"
          sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (mem_mem_stack formula-decl nil sigmatopdown nil)
    (fine_mem_stack formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.push(sigmatopdown.pos, sigmatopdown.n1)"
         "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.+)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))
 (step_TCC121 0
  (step_TCC137-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1)
            (("2" (skeep*)
              (("2" (lift-if)
                (("2" (ground)
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (typepred stack) (("1" (grind) nil nil))
                        nil)
                       ("2" (inst?) nil nil))
                      nil))
                    nil)
                   ("2" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.n1 = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack], sigmatopdown.pos, sigmatopdown.n1)) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack](i)(sigmatopdown.n))) ENDIF}")))
 (step_TCC122 0
  (step_TCC87-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "sigmatopdown.loop"
         "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))
 (step_TCC123 0
  (step_TCC88-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fine_entry? const-decl "bool" sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_good_tscaffold formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]"
         "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))
 (step_TCC124 0
  (step_TCC103-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred stack)
      (("" (typepred depth)
        (("" (expand good_depth?)
          (("" (expand pushcount)
            (("" (use scafcount_max)
              (("" (assert)
                (("" (use exp2_lt :subst (n 41 m 64))
                  (("" (ground)
                    (("1" (grind) nil nil)
                     ("2" (rewrite scafcount_update)
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (typepred stack)
                            (("1" (grind) nil nil)) nil)
                           ("2" (typepred depth)
                            (("2" (grind :exclude scafcount) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred stack) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (scafcount_max formula-decl nil sigmatopdown nil)
    (exp2_lt formula-decl nil exp2 nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (scafcount_update formula-decl nil sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatopdown.depth, 1)"
         "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))
 (step_TCC125 0
  (step_TCC104-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             loop)
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil)
             ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u loop stack rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (grind) nil nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_mem_stack formula-decl nil sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (ent_push_extensionality formula-decl nil sigmatopdown nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (cur skolem-const-decl "uint8" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]"
          sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatopdown
     nil)
    (fine_mem_stack formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.rest"
         "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))
 (step_TCC126 0
  (step_TCC138-1 nil 3804706560
   ("" (skeep*)
    (("" (typepred stack)
      (("" (expand good_stack?)
        (("" (ground)
          (("1" (grind) nil nil)
           ("2" (grind :exclude (good_stack? fine_stack? mem_stack?))
            nil nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (successor const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "booleans.TRUE"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop](i)(sigmatopdown.n))) ENDIF}")))
 (step_TCC127 0
  (step_TCC136-1 nil 3804991042
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - pos!1 n1)
              (("" (ground)
                (("1" (expand gfcount)
                  (("1" (use "sigma_max")
                    (("1" (ground)
                      (("1"
                        (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                        (("1" (assert)
                          (("1"
                            (name-replace lnn
                             "len * num_non_terminals + num_non_terminals")
                            (("1" (assert)
                              (("1"
                                (case-replace
                                 "dep(scaf(pos!1)(n1)) = d1")
                                (("1" (assert) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (case "len * num_non_terminals <= exp2(46)")
                            (("1" (assert) (("1" (grind) nil nil)) nil)
                             ("2"
                              (use "lt_times_lt_pos1" :subst
                                   (px
                                    len
                                    nnz
                                    num_non_terminals
                                    y
                                    "exp2(32)"
                                    w
                                    "exp2(8)"))
                              (("1"
                                (hide-all-but (-1 1))
                                (("1"
                                  (grind)
                                  (("1"
                                    (typepred len)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (sigma_max formula-decl nil sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.+)(sigmatopdown.d1, 1)" "uint64")))
 (step_TCC128 0
  (step_TCC138-1 nil 3804991042 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)"
         "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))
 (step_TCC129 0
  (step_TCC139-1 nil 3804991042
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?)
                    (("2" (ground)
                      (("1" (typepred "St`scaf(pos!1)(n1)")
                        (("1" (grind) nil nil)) nil)
                       ("2" (expand good_good?)
                        (("2" (grind :exclude (max gfcount)) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (typepred lflag)
                  (("3" (skeep*)
                    (("3" (ground)
                      (("1" (inst?) nil nil) ("2" (grind) nil nil)
                       ("3" (inst?) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (expand nice_entry?)
                (("2" (expand good_good_entry?)
                  (("2" (typepred stack) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (fine_entry? const-decl "bool" sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]"
     sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (d1 skolem-const-decl "uint64" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_good_tscaffold formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)]"
         "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))
 (step_TCC130 0
  (step_TCC110-1 nil 3804706560
   ("" (skeep*)
    (("" (typepred stack)
      (("" (typepred depth)
        (("" (expand good_depth?)
          (("" (expand pushcount)
            (("" (use scafcount_max)
              (("" (assert)
                (("" (use exp2_lt :subst (n 41 m 64))
                  (("" (ground)
                    (("1" (grind) nil nil)
                     ("2" (rewrite scafcount_update)
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (typepred stack)
                            (("1" (grind) nil nil)) nil)
                           ("2" (typepred depth)
                            (("2" (grind :exclude scafcount) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "scaf(pos!1)(n1)")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (scafcount_max formula-decl nil sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (exp2_lt formula-decl nil exp2 nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]"
     sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (scafcount_update formula-decl nil sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatopdown.depth, 1)"
         "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)]))")))
 (step_TCC131 0
  (step_TCC111-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             "good(1 + d1, 0)")
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (typepred "St`scaf(pos(St`stack))(n1)")
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil))
              nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u " good(1 + d1, 0)"
              stack rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (typepred "St`scaf(pos(St`stack))(n1)")
          (("1" (grind)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_mem_stack formula-decl nil sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (ent_push_extensionality formula-decl nil sigmatopdown nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (d1 skolem-const-decl "uint64" sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]"
     sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (cur skolem-const-decl "uint8" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]"
          sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatopdown
     nil)
    (fine_mem_stack formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.rest"
         "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(sigmatopdown.d1, 1), 0)]))")))
 (step_TCC132 0
  (step_TCC139-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, sigmatopdown.d1), 0)], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.good((number_fields.+)(1, sigmatopdown.d1), 0)](i)(sigmatopdown.n))) ENDIF}")))
 (step_TCC133 0
  (step_TCC143-1 nil 3804991042
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - pos!1 n1)
              (("" (ground)
                (("1" (expand gfcount)
                  (("1" (use "sigma_max")
                    (("1" (ground)
                      (("1"
                        (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                        (("1" (assert)
                          (("1"
                            (name-replace lnn
                             "len * num_non_terminals + num_non_terminals")
                            (("1" (assert)
                              (("1"
                                (case-replace
                                 "dep(scaf(pos!1)(n1)) = d1")
                                (("1" (assert) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (case "len * num_non_terminals <= exp2(46)")
                            (("1" (assert) (("1" (grind) nil nil)) nil)
                             ("2"
                              (use "lt_times_lt_pos1" :subst
                                   (px
                                    len
                                    nnz
                                    num_non_terminals
                                    y
                                    "exp2(32)"
                                    w
                                    "exp2(8)"))
                              (("1"
                                (hide-all-but (-1 1))
                                (("1"
                                  (grind)
                                  (("1"
                                    (typepred len)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (sigma_max formula-decl nil sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.+)(sigmatopdown.d1, 1)" "uint64")))
 (step_TCC134 0
  (step_TCC144-1 nil 3804991042 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype
         "sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))"
         "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))
 (step_TCC135 0
  (step_TCC145-1 nil 3804991042
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fine_entry? const-decl "bool" sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (d1 skolem-const-decl "uint64" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_good_tscaffold formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]"
         "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))
 (step_TCC136 0
  (step_TCC123-1 nil 3804706560
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3"
                  (use sigma_dec
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" pos!1 "j" "len"))
                  (("1" (ground)
                    (("1" (ground)
                      (("1" (lift-if -1)
                        (("1" (ground)
                          (("1" (grind) nil nil)
                           ("2"
                            (case-replace "(LAMBDA (i: upto(len)):
                                                                                               count(num_non_terminals)(push?)
                                                                                                    (St`scaf WITH [(pos!1)(cur) := fail(1 + d1)](i))) = ((LAMBDA (i: upto(len)):
                                                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                                                              WITH [(pos!1)
                                                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                                          1])")
                            (("1" (hide -1) (("1" (assert) nil nil))
                              nil)
                             ("2" (hide -1 3)
                              (("2"
                                (apply-extensionality)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (expand count)
                                    (("1"
                                      (case "pos!1 = x!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case-replace
                                           "{i: below(num_non_terminals) |
                                                                                                                                                          push?(St`scaf(x!1) WITH [(cur) := fail(1 + d1)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                          (("1"
                                            (rewrite card_remove)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (lift-if +)
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -1 2)
                                              (("2"
                                                (rewrite "count_TCC1")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (apply-extensionality)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (hide -3 -4 -6)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil)
                                               ("3"
                                                (skeep*)
                                                (("3"
                                                  (use step_TCC133)
                                                  (("3"
                                                    (ground)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide -6 2)
                                            (("3" (grind) nil nil))
                                            nil)
                                           ("4"
                                            (hide 2)
                                            (("4"
                                              (skeep*)
                                              (("4"
                                                (use step_TCC133)
                                                (("4"
                                                  (ground)
                                                  (("4"
                                                    (inst?)
                                                    (("4"
                                                      (inst?)
                                                      (("4"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (expand count +)
                                    (("2"
                                      (use
                                       "nonempty_card[below(num_non_terminals)]")
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand nonempty?)
                                          (("1"
                                            (expand empty?)
                                            (("1"
                                              (inst - "nt(stack)")
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (typepred
                                                   "nt(stack)")
                                                  (("2"
                                                    (expand
                                                     "good_push_entry?")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "count_TCC1")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide 2)
                                  (("3" (grind) nil nil))
                                  nil)
                                 ("4"
                                  (hide 2)
                                  (("4"
                                    (use step_TCC133)
                                    (("4"
                                      (ground)
                                      (("4"
                                        (inst?)
                                        (("4"
                                          (inst?)
                                          (("4" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide -1)
                              (("3"
                                (expand count)
                                (("3"
                                  (use
                                   "nonempty_card[below(num_non_terminals)]")
                                  (("1"
                                    (ground)
                                    (("1"
                                      (hide -5 5)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "count_TCC1")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (hide -1 3) (("4" (grind) nil nil))
                              nil)
                             ("5" (use step_TCC133)
                              (("5"
                                (ground)
                                (("5"
                                  (inst?)
                                  (("5"
                                    (inst?)
                                    (("5" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (use "nonempty_card[below(num_non_terminals)]")
                        (("1" (grind) nil nil)
                         ("2" (rewrite count_TCC1)
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (sigma_dec formula-decl nil sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (nonempty? const-decl "bool" sets nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatopdown nil)
    (empty? const-decl "bool" sets nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (card_remove formula-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (x!1 skolem-const-decl "upto(len)" sigmatopdown nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (step_TCC133 subtype-tcc nil sigmatopdown nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (d1 skolem-const-decl "uint64" sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatopdown.depth, 1)"
         "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]))")))
 (step_TCC137 0
  (step_TCC124-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             "fail(1 + d1)")
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (typepred "St`scaf(pos(St`stack))(n1)")
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil))
              nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u "fail(1 + d1)" stack
              rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (typepred "St`scaf(pos(St`stack))(n1)")
          (("1" (grind) nil nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_mem_stack formula-decl nil sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (ent_push_extensionality formula-decl nil sigmatopdown nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (d1 skolem-const-decl "uint64" sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (cur skolem-const-decl "uint8" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]"
          sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatopdown
     nil)
    (fine_mem_stack formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.rest"
         "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(sigmatopdown.d1, 1))]))")))
 (step_TCC138 0
  (step_TCC140-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, sigmatopdown.d1))], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.fail((number_fields.+)(1, sigmatopdown.d1))](i)(sigmatopdown.n))) ENDIF}")))
 (step_TCC139 0
  (step_TCC134-1 nil 3804904050 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.stack"
         "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))
 (step_TCC140 0
  (step_TCC134-1 nil 3804706560
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (fine_entry? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatopdown nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (good_good_tscaffold formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]"
         "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))
 (step_TCC141 0
  (step_TCC135-1 nil 3804706560
   ("" (skeep*)
    (("" (split)
      (("1" (typepred stack)
        (("1" (typepred depth)
          (("1" (expand good_depth?)
            (("1" (expand pushcount)
              (("1" (use scafcount_max)
                (("1" (assert)
                  (("1" (use exp2_lt :subst (n 41 m 64))
                    (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "good_depth?")
        (("2" (expand pushcount)
          (("2" (rewrite scafcount_update)
            (("1" (lift-if)
              (("1" (ground)
                (("1" (typepred stack) (("1" (grind) nil nil)) nil)
                 ("2" (typepred depth)
                  (("2" (grind :exclude scafcount) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pushcount const-decl "uint64" sigmatopdown nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (exp2_lt formula-decl nil exp2 nil)
    (scafcount_max formula-decl nil sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scafcount_update formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.+)(sigmatopdown.depth, 1)"
         "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))
 (step_TCC142 0
  (step_TCC136-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (expand "good_stack?" +)
          (("2" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma good_mem_stack)
              (("2"
                (inst - G "depth" len scaf "push(pos!1, n1)" "stack"
                 stack)
                (("1" (ground)
                  (("1" (grind) nil nil)
                   ("2" (use mem_stack_push) (("2" (ground) nil nil))
                    nil)
                   ("3" (grind) nil nil))
                  nil)
                 ("2" (grind) nil nil) ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand fine_stack? +)
        (("3" (ground)
          (("1" (lemma mem_mem_stack)
            (("1" (inst - G depth len scaf _ _ _ _)
              (("1"
                (inst - "push(pos!1, n1)" "push(pos!1, n1)" stack
                 stack)
                (("1" (ground)
                  (("1" (hide -2)
                    (("1" (use mem_stack_push) (("1" (ground) nil nil))
                      nil))
                    nil)
                   ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                   ("3" (typepred stack) (("3" (grind) nil nil)) nil)
                   ("4" (use mem_stack_push) (("4" (ground) nil nil))
                    nil)
                   ("5" (typepred stack) (("5" (grind) nil nil)) nil))
                  nil)
                 ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2"
            (use fine_mem_stack :subst
                 (len len entry "push(pos!1, n1)" u stack stack stack))
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil)
               ("3" (grind) nil nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (grind)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_mem_stack formula-decl nil sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (mem_stack_push formula-decl nil sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatopdown nil)
    (n1 skolem-const-decl "non_terminal" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]"
          sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (mem_mem_stack formula-decl nil sigmatopdown nil)
    (fine_mem_stack formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.push(sigmatopdown.pos, sigmatopdown.n1)"
         "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.+)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack]))")))
 (step_TCC143 0
  (step_TCC137-1 nil 3804730988
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1)
            (("2" (skeep*)
              (("2" (lift-if)
                (("2" (ground)
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (typepred stack) (("1" (grind) nil nil))
                        nil)
                       ("2" (inst?) nil nil))
                      nil))
                    nil)
                   ("2" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.n1 = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack], sigmatopdown.pos, sigmatopdown.n1)) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.n1) := sigmatopdown.stack](i)(sigmatopdown.n))) ENDIF}")))
 (step_TCC144 0
  (step_TCC105-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "sigmatopdown.loop"
         "(sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.pos))")))
 (step_TCC145 0
  (step_TCC106-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fine_entry? const-decl "bool" sigmatopdown nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_good_tscaffold formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]"
         "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(sigmatopdown.start, sigmatopdown.rootnt))")))
 (step_TCC146 0
  (step_TCC131-1 nil 3804706560
   ("" (skeep*)
    (("" (typepred stack)
      (("" (typepred depth)
        (("" (expand good_depth?)
          (("" (expand pushcount)
            (("" (use scafcount_max)
              (("" (assert)
                (("" (use exp2_lt :subst (n 41 m 64))
                  (("" (ground)
                    (("1" (grind) nil nil)
                     ("2" (rewrite scafcount_update)
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (typepred stack)
                            (("1" (grind) nil nil)) nil)
                           ("2" (typepred depth)
                            (("2" (grind :exclude scafcount) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred stack) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (scafcount_max formula-decl nil sigmatopdown nil)
    (exp2_lt formula-decl nil exp2 nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (scafcount_update formula-decl nil sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatopdown.depth, 1)"
         "(sigmatopdown.good_depth?(sigmatopdown.len, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))
 (step_TCC147 0
  (step_TCC132-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             loop)
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil)
             ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u loop stack rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (grind) nil nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_mem_stack formula-decl nil sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatopdown nil)
    (ent_push_extensionality formula-decl nil sigmatopdown nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (cur skolem-const-decl "uint8" sigmatopdown nil)
    (pos!1 skolem-const-decl "uint32" sigmatopdown nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]"
          sigmatopdown nil)
    (len skolem-const-decl "index" sigmatopdown nil)
    (G skolem-const-decl "lang_spec" sigmatopdown nil)
    (s skolem-const-decl "strings(len)" sigmatopdown nil)
    (start skolem-const-decl "upto(len)" sigmatopdown nil)
    (rootnt skolem-const-decl "non_terminal" sigmatopdown nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)"
     sigmatopdown nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatopdown
     nil)
    (fine_mem_stack formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatopdown.rest"
         "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, (number_fields.-)(sigmatopdown.depth, 1), sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop]))")))
 (step_TCC148 0
  (step_TCC142-1 nil 3804730988
   ("" (skeep*)
    (("" (typepred stack)
      (("" (expand good_stack?)
        (("" (ground)
          (("1" (grind) nil nil)
           ("2" (grind :exclude (good_stack? fine_stack? mem_stack?))
            nil nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (successor const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "booleans.TRUE"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.nt(sigmatopdown.rest) = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop], sigmatopdown.pos(sigmatopdown.rest), sigmatopdown.nt(sigmatopdown.rest))) ELSE FORALL (i: naturalnumbers.upto(sigmatopdown.len)), n: (booleans.NOT)(sigmatopdown.loop?(sigmatopdown.St`scaf WITH [(sigmatopdown.pos)(sigmatopdown.cur) := sigmatopdown.loop](i)(sigmatopdown.n))) ENDIF}")))
 (size_TCC1 0
  (size_TCC1-1 nil 3808434333 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (size subtype "sigmatopdown.len"
         "naturalnumbers.upto(sigmatopdown.len)")))
 (size_TCC2 0
  (size_TCC2-1 nil 3808434333
   ("" (skeep*)
    (("" (typepred "St`depth")
      (("" (expand good_depth?)
        (("" (expand pushcount)
          (("" (use sigma_max) (("" (grind :exclude exp2) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (index type-eq-decl nil integertypes nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (sigma_max formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (size subtype
         "(number_fields.-)((number_fields.*(((number_fields.+)(sigmatopdown.len, 1)), sigmatopdown.num_non_terminals)), sigmatopdown.St`depth)"
         "nat")))
 (endstate_TCC1 0
  (endstate_TCC1-1 nil 3804455654
   ("" (skeep*) (("" (typepred "st`stack") (("" (grind) nil nil)) nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (endstate subtype "sigmatopdown.st`stack" "(sigmatopdown.push?)")))
 (parse_TCC1 0
  (parse_TCC2-1 nil 3804455654
   ("" (use well_founded_le) (("" (grind :exclude <) nil nil)) nil)
   ((well_founded? const-decl "bool" orders nil)
    (restrict const-decl "R" restrict nil)
    (well_founded_le formula-decl nil ordinals nil))
   nil
   (parse well-founded
          "restrict[[ordstruct_adt.ordstruct, ordstruct_adt.ordstruct], [ordinal, ordinal], booleans.bool].restrict(ordinals.<)"
          "nil")))
 (parse_TCC2 0
  (parse_TCC3-1 nil 3804455654
   ("" (skeep*) (("" (typepred "St`stack") (("" (grind) nil nil)) nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (parse subtype "sigmatopdown.St"
          "sigmatopdown.endstate(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s, sigmatopdown.start, sigmatopdown.root)")))
 (parse_TCC3 0
  (parse_TCC4-1 nil 3804455654
   ("" (skeep*)
    (("" (expand restrict)
      (("" (expand size)
        (("" (rewrite lex2_lt)
          (("1" (flatten)
            (("1" (hide 3)
              (("1" (typepred "St`stack")
                (("1" (apply (then (expand step) (lift-if) (ground)))
                  (("1" (hide 1) (("1" (grind) nil nil)) nil)
                   ("2" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil)
                   ("3" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil)
                   ("4" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("5" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil)
                   ("6" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil)
                   ("7" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("8" (grind :defs nil)
                    (("8" (rewrite scafcount_update)
                      (("1" (grind :defs nil)
                        (("1" (grind) nil nil) ("2" (grind) nil nil)
                         ("3" (grind) nil nil))
                        nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil))
                      nil))
                    nil)
                   ("9" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil)
                   ("10" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("11" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("12" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (expand nice_entry?)
                        (("2" (expand "good_good_entry?")
                          (("2"
                            (typepred
                             "step(len, G, s, start, root)(St)`scaf")
                            (("2" (expand step)
                              (("2"
                                (expand fine_scaffold?)
                                (("2"
                                  (ground)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (expand good_tscaffold?)
                                      (("2"
                                        (inst
                                         -
                                         "pos(St`stack)"
                                         "nt(St`stack)")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("13" (reveal 1)
                    (("13" (hide 2)
                      (("13" (ground)
                        (("1" (expand step)
                          (("1" (rewrite scafcount_update)
                            (("1" (grind :defs nil)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (expand step) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("14" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("15" (reveal 1)
                    (("15" (hide 2)
                      (("15" (ground)
                        (("1" (expand step)
                          (("1" (rewrite scafcount_update)
                            (("1" (grind :defs nil)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (expand step) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("16" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("17" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("18" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (hide 2)
                      (("2"
                        (typepred
                         "step(len, G, s, start, root)(St)`scaf")
                        (("2" (expand fine_scaffold?)
                          (("2" (ground)
                            (("2" (hide -1)
                              (("2"
                                (expand good_tscaffold?)
                                (("2"
                                  (inst
                                   -
                                   "pos(St`stack)"
                                   "nt(St`stack)")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("19" (reveal 1)
                    (("19" (hide 2)
                      (("19" (ground)
                        (("1" (expand step)
                          (("1" (rewrite scafcount_update)
                            (("1" (grind :defs nil)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (expand step) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("20" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("21" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2"
                      (typepred
                       "step(len, G, s, start, root)(St)`scaf")
                      (("2" (expand fine_scaffold?)
                        (("2" (ground)
                          (("2" (hide -1)
                            (("2" (expand good_tscaffold?)
                              (("2"
                                (inst - "pos(St`stack)" "nt(St`stack)")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("22" (reveal 1)
                    (("22" (hide 2)
                      (("22" (expand step)
                        (("22" (rewrite scafcount_update)
                          (("1" (grind :defs nil)
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("23" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("24" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("25" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("26" (reveal 1)
                    (("26" (hide 2)
                      (("26" (expand step)
                        (("26" (rewrite scafcount_update)
                          (("1" (grind :defs nil)
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("27" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("28" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("29" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("30" (reveal 1)
                    (("30" (hide 2)
                      (("30" (expand step)
                        (("30" (rewrite scafcount_update)
                          (("1" (grind :defs nil)
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("31" (grind :defs nil)
                    (("31" (rewrite scafcount_update)
                      (("1" (grind :defs nil)
                        (("1" (grind) nil nil) ("2" (grind) nil nil)
                         ("3" (grind) nil nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "St`depth")
            (("2" (expand good_depth?)
              (("2" (expand pushcount)
                (("2" (use sigma_max) (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (typepred "step(len, G, s, start, root)(St)`depth")
            (("3" (expand good_depth?)
              (("3" (expand pushcount)
                (("3" (use sigma_max) (("3" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (lex2_lt formula-decl nil lex2 nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil) (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (step const-decl "state(len, G, s, start, rootnt)" sigmatopdown
          nil)
    (push_or_pending? const-decl "bool" sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (successor const-decl "bool" sigmatopdown nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scafcount_update formula-decl nil sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]"
     sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatopdown nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" sigmatopdown nil)
    (concat? adt-recognizer-decl "[peg -> boolean]" sigmatopdown nil)
    (or? adt-recognizer-decl "[peg -> boolean]" sigmatopdown nil)
    (e1 shared-adt-accessor-decl
     "[{x: peg | concat?(x) OR or?(x)} -> non_terminal]" sigmatopdown
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (span adt-accessor-decl "[(good?) -> uint32]" sigmatopdown nil)
    (e2 shared-adt-accessor-decl
     "[{x: peg | concat?(x) OR or?(x)} -> non_terminal]" sigmatopdown
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (and? adt-recognizer-decl "[peg -> boolean]" sigmatopdown nil)
    (not? adt-recognizer-decl "[peg -> boolean]" sigmatopdown nil)
    (e shared-adt-accessor-decl
     "[{x: peg | and?(x) OR not?(x)} -> non_terminal]" sigmatopdown
     nil)
    (sigma_max formula-decl nil sigmatopdown nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (size const-decl "ordinal" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (parse termination
          "sigmatopdown.parse(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s, sigmatopdown.start, sigmatopdown.root)(sigmatopdown.step(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s, sigmatopdown.start, sigmatopdown.root)(sigmatopdown.St))"
          "nil")))
 (doparse_TCC1 0
  (doparse_TCC3-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (doparse subtype "sigmatopdown.pend"
    "[non_terminal -> (sigmatopdown.nice_entry?(sigmatopdown.len, sigmatopdown.i))]")))
 (doparse_TCC2 0
  (doparse_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (doparse subtype "0" "naturalnumbers.upto(sigmatopdown.len)")))
 (doparse_TCC3 0
  (doparse_TCC4-1 nil 3804547853 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil))
   nil (doparse subtype "sigmatopdown.num_non_terminals" "uint8")))
 (doparse_TCC4 0
  (doparse_TCC4-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (doparse subtype
    "sigmatopdown.push(0, sigmatopdown.num_non_terminals)"
    "(sigmatopdown.nice_entry?(sigmatopdown.len, 0))")))
 (doparse_TCC5 0
  (doparse_TCC5-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (doparse subtype
    "(LAMBDA (i: naturalnumbers.upto(sigmatopdown.len)): sigmatopdown.pend) WITH [(0)(sigmatopdown.n) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)]"
    "(sigmatopdown.fine_scaffold?(sigmatopdown.len, sigmatopdown.G, sigmatopdown.s)(0, sigmatopdown.n))")))
 (doparse_TCC6 0
  (doparse_TCC1-1 nil 3804455654
   ("" (skeep*)
    (("" (grind :exclude good_depth?)
      (("" (expand good_depth?)
        (("" (expand pushcount)
          (("" (rewrite scafcount_update)
            (("" (use "empty_card[below(255)]")
              (("1" (ground)
                (("1" (replace -2 :hide? t)
                  (("1" (rewrite sigma_zero) nil nil)) nil))
                nil)
               ("2" (hide 2)
                (("2" (inst + 255 "id[below(255)]")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((num_non_terminals const-decl "byte" sigmatopdown nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (empty_card formula-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (FALSE const-decl "bool" booleans nil)
    (sigma_zero formula-decl nil sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (restrict const-decl "R" restrict nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]"
          sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pending adt-constructor-decl "(pending?)" sigmatopdown nil)
    (pending? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (scafcount_update formula-decl nil sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (doparse subtype "1"
    "(sigmatopdown.good_depth?(sigmatopdown.len, (LAMBDA (i: naturalnumbers.upto(sigmatopdown.len)): sigmatopdown.pend) WITH [(0)(sigmatopdown.n) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)]))")))
 (doparse_TCC7 0
  (doparse_TCC6-1 nil 3804534082 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (mem_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (successor const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (doparse subtype "sigmatopdown.push(0, sigmatopdown.n)"
    "(sigmatopdown.fine_stack?(sigmatopdown.len, sigmatopdown.G, 1, (LAMBDA (i: naturalnumbers.upto(sigmatopdown.len)): sigmatopdown.pend) WITH [(0)(sigmatopdown.n) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)]))")))
 (doparse_TCC8 0
  (doparse_TCC8-1 nil 3804730988 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (doparse subtype "booleans.FALSE"
    "{b: booleans.bool | IF b THEN booleans.OR(sigmatopdown.n = sigmatopdown.num_non_terminals, sigmatopdown.loop_ready?(sigmatopdown.len, sigmatopdown.G, (LAMBDA (i: naturalnumbers.upto(sigmatopdown.len)): sigmatopdown.pend) WITH [(0)(sigmatopdown.n) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)], 0, sigmatopdown.n)) ELSE FORALL (i_1: naturalnumbers.upto(sigmatopdown.len)), (n_1: sigmatopdown.non_terminal): (booleans.NOT)(sigmatopdown.loop?((LAMBDA (i: naturalnumbers.upto(sigmatopdown.len)): sigmatopdown.pend) WITH [(0)(sigmatopdown.n) := sigmatopdown.push(0, sigmatopdown.num_non_terminals)](i_1)(n_1))) ENDIF}"))))


$$$sigmatdproof.pvs
sigmatdproof  % [ parameters ]
		: THEORY

  BEGIN

IMPORTING sigmatopdown

len, max: VAR index %the length of the input
m, n: VAR non_terminal
G: VAR lang_spec
depth: VAR uint64

root, stack: VAR (push?)


  defent: TYPE = {entry: ent | fail?(entry) OR loop?(entry) OR good?(entry)}
     
  parsetree: DATATYPE
  BEGIN
    zero(entry: defent): zero?
    one(entry: defent, subone: parsetree): one?
    two(entry: defent, subone: parsetree, subtwo : parsetree): two?
  END parsetree

  qstack: DATATYPE
  BEGIN
    qempty: qempty?
    qpush(nonterm: non_terminal, pos: uint32, qpop: qstack): qpush?
  END qstack

  P, Q, R: VAR parsetree

  S, T: VAR qstack
  i: VAR uint32
  inqstack(n, i, S): RECURSIVE bool =
   (CASES S OF
    qpush(n1, j, T): (n = n1 AND i = j ) OR inqstack(n, i, T),
    qempty: FALSE
    ENDCASES)
    MEASURE S BY <<

  stacksize(S): RECURSIVE nat =
   (CASES S OF
    qpush(n1, j, T): stacksize(T) + 1, 
    qempty: 0
    ENDCASES)
    MEASURE S BY <<


  good_qstack?(len, G, (s: strings(len)), (A : scaffold(len)))(S): RECURSIVE bool
  = (CASES S OF
    qpush(n1, j, T): j <= len AND
		     NOT inqstack(n1, j, T) AND %initialize with rootnt and rootpos
		     A(j)(n1) = loop AND 
		     good_qstack?(len, G, s, A)(T),
    qempty: FALSE
    ENDCASES)
    MEASURE S BY <<

    % good_qstack_size: LEMMA
    % (FORALL len, G, (s: strings(len)), (rootpos: upto(len)), (rootnt: non_terminal), (st: endstate(len, G, s, rootpos, rootnt)), S: 
    %   good_qstack?(len, G, s, rootpos, rootnt, st)(S) IMPLIES
    %   stacksize(S) <= scafcount(len, st`scaf, loop?, len))
      

    good_parsetree?(len, G, (s: strings(len)))(S, n, (i | i <= len), P): RECURSIVE bool =
    CASES P OF
     zero(E): (CASES G(n) OF
                      epsilon: E = good(0, 0),
		      failure:  E = fail(0),
		      any(p): (IF i < len AND p(s(i)) THEN E = good(0, 1) ELSE E = fail(0) ENDIF),
		      terminal(a): (IF i < len AND s(i) = a THEN E = good(0, 1) ELSE E = fail(0) ENDIF)
		      ELSE loop?(E) AND inqstack(n, i, S)
		      ENDCASES),
     one(E, Q): (CASES G(n) OF
                  neg(n1): good_parsetree?(len, G, s)(qpush(n, i, S), n1, i, Q)  AND
		             IF good?(E) THEN fail?(entry(Q)) AND span(E) = 0 AND dep(E) = 1 + dep(entry(Q))
			            ELSIF fail?(E) 
				    THEN  good?(entry(Q)) AND dep(E) = 1 + dep(entry(Q))
			            ELSE loop?(E)
				    ENDIF,
                  check(n1): good_parsetree?(len, G, s)(qpush(n, i, S), n1, i, Q)  AND
 	                     IF good?(E)
			        THEN good?(entry(Q)) AND span(E) = 0 AND dep(E) = 1 + dep(entry(Q))
		               ELSIF fail?(E)
			        THEN  fail?(entry(Q)) AND dep(E) = 1 + dep(entry(Q))
		               ELSE loop?(E) AND loop?(entry(Q))
			       ENDIF,
                  concat(n1, n2): good_parsetree?(len, G, s)(qpush(n, i, S), n1, i, Q)  AND
		               IF fail?(E)
			        THEN  fail?(entry(Q)) AND dep(E) = 1 + dep(entry(Q))
		               ELSE loop?(E) AND loop?(entry(Q))
			       ENDIF,			      
                  choice(n1, n2): good_parsetree?(len, G, s)(qpush(n, i, S), n1, i, Q)  AND
		               IF good?(E)
			        THEN  good?(entry(Q)) AND dep(E) = 1 + dep(entry(Q))
		               ELSE loop?(E) AND loop?(entry(Q))
			       ENDIF
                  ELSE FALSE
                ENDCASES),
     two(E, Q, R): (CASES G(n) OF
                         concat(n1, n2):
			  good_parsetree?(len, G, s)(qpush(n, i, S), n1, i, Q)  AND
			  good?(entry(Q)) AND
			  good_good_entry?(len, i)(entry(Q)) AND
			  (IF good?(E)
			    THEN good?(entry(R)) AND
			         good_parsetree?(len, G, s)(qpush(n, i, S), n2, i + span(entry(Q)), R)  AND
				 dep(E) = 1 + max(dep(entry(Q)), dep(entry(R)))
		           ELSIF fail?(E)
			    THEN fail?(entry(R)) AND
			         good_parsetree?(len, G, s)(qpush(n, i, S), n2, i + span(entry(Q)), R)  AND
				 dep(E) = 1 + max(dep(entry(Q)), dep(entry(R)))
                           ELSE loop?(E) AND loop?(entry(R))				 
			   ENDIF),
			 choice(n1, n2):
			  good_parsetree?(len, G, s)(qpush(n, i, S), n1, i, Q)  AND
			  fail?(entry(Q)) AND
			  (IF good?(E)
			    THEN good?(entry(R)) AND
			         good_parsetree?(len, G, s)(qpush(n, i, S), n2, i, R)  AND
				 dep(E) = 1 + max(dep(entry(Q)), dep(entry(R)))
		           ELSIF fail?(E)
			    THEN fail?(entry(R)) AND
			         good_parsetree?(len, G, s)(qpush(n, i, S), n2, i, R)  AND
				 dep(E) = 1 + max(dep(entry(Q)), dep(entry(R)))
                           ELSE loop?(E) AND loop?(entry(R))				 
			   ENDIF)
			 ELSE FALSE
             ENDCASES)
	   ENDCASES
       MEASURE P BY <<

   buildtree(len, G, (s: strings(len)), (rootpos: upto(len)), (rootnt: non_terminal))(st: state(len, G, s, rootpos, rootnt),  S, n, (i | i <= len AND good_or_fail?(st`scaf(i)(n)))): RECURSIVE {P | good_parsetree?(len, G, s)(S, n, i, P) AND entry(P) = st`scaf(i)(n)}
    = CASES G(n) OF
	  neg(n1): one(st`scaf(i)(n), buildtree(len, G, s, rootpos, rootnt)(st, qpush(n, i, S), n1, i)),
	  check(n1): one(st`scaf(i)(n), buildtree(len, G, s, rootpos, rootnt)(st, qpush(n, i, S), n1, i)),
	  concat(n1, n2): (IF fail?(st`scaf(i)(n1)) THEN one(st`scaf(i)(n), buildtree(len, G, s, rootpos, rootnt)(st, qpush(n, i, S), n1, i))
	                   ELSE LET E1 = buildtree(len, G, s, rootpos, rootnt)(st, qpush(n, i, S), n1, i)
		                 IN two(st`scaf(i)(n), E1, buildtree(len, G, s, rootpos, rootnt)(st, qpush(n, i, S), n2, i + span(st`scaf(i)(n1))))
                           ENDIF),
	   choice(n1, n2): (IF fail?(st`scaf(i)(n1)) THEN two(st`scaf(i)(n), buildtree(len, G, s, rootpos, rootnt)(st, qpush(n, i, S), n1, i), buildtree(len, G, s, rootpos, rootnt)(st,  qpush(n, i, S), n2, i))
	                   ELSE one(st`scaf(i)(n), buildtree(len, G, s, rootpos, rootnt)(st, qpush(n, i, S), n1, i))
			   ENDIF)
	 ELSE zero(st`scaf(i)(n))
        ENDCASES
     MEASURE dep(st`scaf(i)(n))

no_push_endstate: LEMMA
 (FORALL len, G, (s: strings(len)), (start: upto(len)), (root: non_terminal), (st: endstate(len, G, s, start, root)), (i : upto(len)), n:
  NOT push?(st`scaf(i)(n)))
    


  buildloop(len, G, (s: strings(len)), (rootpos: upto(len)), (rootnt: non_terminal))(st: endstate(len, G, s, rootpos, rootnt), (A: scaffold(len)), (S | good_qstack?(len, G, s, st`scaf)(S) AND (FORALL (i: upto(len)), n: A(i)(n) = loop IFF inqstack(n, i, S))), n, (i | i <= len AND loop?(st`scaf(i)(n)))): RECURSIVE {P | good_parsetree?(len, G, s)(S, n, i, P) and loop?(entry(P))}
    = (IF inqstack(n, i, S)
       THEN zero(loop)
       ELSE CASES G(n) OF
	  neg(n1): one(loop, buildloop(len, G, s, rootpos, rootnt)(st, A WITH [(i)(n) := loop],
	                                                           qpush(n, i, S), n1, i)),
	  check(n1): one(loop, buildloop(len, G, s, rootpos, rootnt)(st, A WITH [(i)(n) := loop], 
	                                                             qpush(n, i, S), n1, i)),
	  concat(n1, n2): (IF loop?(st`scaf(i)(n1))
	                   THEN one(loop, buildloop(len, G, s, rootpos, rootnt)(st, A WITH [(i)(n) := loop],
			                                                        qpush(n, i, S), n1, i))

	                   ELSE two(loop, buildtree(len, G, s, rootpos, rootnt)(st, qpush(n, i, S),  n1, i),
			            buildloop(len, G, s, rootpos, rootnt)(st, A WITH [(i)(n) := loop],
				                                          qpush(n, i, S), n2, (i + span(st`scaf(i)(n1)))))
                           ENDIF),
	   choice(n1, n2): (IF loop?(st`scaf(i)(n1))
	                    THEN one(loop,
			             buildloop(len, G, s, rootpos, rootnt)(st, A WITH [(i)(n) := loop], qpush(n, i, S), n1, i))
	                   ELSE two(loop, buildtree(len, G, s, rootpos, rootnt)(st, qpush(n, i, S), n1, i),
			            buildloop(len, G, s, rootpos, rootnt)(st, A WITH [(i)(n) := loop],
				                                          qpush(n, i, S), n2, i))
			    ENDIF)
        ENDCASES
     ENDIF)
     MEASURE exp2(40) - scafcount(len, A, loop?, len)




  

  END sigmatdproof

$$$sigmatdproof.prf
(sigmatdproof
 (inqstack_TCC1 0
  (inqstack_TCC1-1 nil 3888202986 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (<< adt-def-decl "(strict_well_founded?[qstack])" sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (inqstack termination
    "sigmatdproof.inqstack(sigmatdproof.n, sigmatdproof.i, sigmatdproof.T)"
    "nil")))
 (stacksize_TCC1 0
  (stacksize_TCC1-1 nil 3888202986 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (<< adt-def-decl "(strict_well_founded?[qstack])" sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (stacksize termination "sigmatdproof.stacksize(sigmatdproof.T)"
    "nil")))
 (good_parsetree?_TCC1 0
  (good_parsetree?_TCC1-1 nil 3888202986 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< adt-def-decl "(strict_well_founded?[parsetree])" sigmatdproof
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? termination
    "sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i, sigmatdproof.Q)"
    "nil")))
 (good_parsetree?_TCC2 0
  (good_parsetree?_TCC2-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.E"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC3 0
  (good_parsetree?_TCC3-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.entry(sigmatdproof.Q)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC4 0
  (good_parsetree?_TCC4-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.E"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC5 0
  (good_parsetree?_TCC5-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.entry(sigmatdproof.Q)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC6 0
  (good_parsetree?_TCC6-1 nil 3888202986 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< adt-def-decl "(strict_well_founded?[parsetree])" sigmatdproof
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? termination
    "sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i, sigmatdproof.Q)"
    "nil")))
 (good_parsetree?_TCC7 0
  (good_parsetree?_TCC7-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.E"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC8 0
  (good_parsetree?_TCC8-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.entry(sigmatdproof.Q)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC9 0
  (good_parsetree?_TCC9-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.E"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC10 0
  (good_parsetree?_TCC10-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.entry(sigmatdproof.Q)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC11 0
  (good_parsetree?_TCC11-1 nil 3888202986
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< adt-def-decl "(strict_well_founded?[parsetree])" sigmatdproof
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? termination
    "sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i, sigmatdproof.Q)"
    "nil")))
 (good_parsetree?_TCC12 0
  (good_parsetree?_TCC12-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.E"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC13 0
  (good_parsetree?_TCC13-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.entry(sigmatdproof.Q)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC14 0
  (good_parsetree?_TCC14-1 nil 3888202986
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< adt-def-decl "(strict_well_founded?[parsetree])" sigmatdproof
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? termination
    "sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i, sigmatdproof.Q)"
    "nil")))
 (good_parsetree?_TCC15 0
  (good_parsetree?_TCC15-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.E"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC16 0
  (good_parsetree?_TCC16-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.entry(sigmatdproof.Q)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC17 0
  (good_parsetree?_TCC17-1 nil 3888202986
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< adt-def-decl "(strict_well_founded?[parsetree])" sigmatdproof
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? termination
    "sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i, sigmatdproof.Q)"
    "nil")))
 (good_parsetree?_TCC18 0
  (good_parsetree?_TCC18-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype
    "(number_fields.+)(sigmatdproof.i, sigmatopdown.span(sigmatdproof.entry(sigmatdproof.Q)))"
    "{i | reals.<=(sigmatdproof.i, sigmatdproof.len)}")))
 (good_parsetree?_TCC19 0
  (good_parsetree?_TCC19-1 nil 3888202986
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (<< adt-def-decl "(strict_well_founded?[parsetree])" sigmatdproof
     nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? termination
    "sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n2, (number_fields.+)(sigmatdproof.i, sigmatopdown.span(sigmatdproof.entry(sigmatdproof.Q))), sigmatdproof.R)"
    "nil")))
 (good_parsetree?_TCC20 0
  (good_parsetree?_TCC20-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.E"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC21 0
  (good_parsetree?_TCC21-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.entry(sigmatdproof.Q)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC22 0
  (good_parsetree?_TCC22-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.entry(sigmatdproof.R)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC23 0
  (good_parsetree?_TCC23-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype
    "(number_fields.+)(sigmatdproof.i, sigmatopdown.span(sigmatdproof.entry(sigmatdproof.Q)))"
    "{i | reals.<=(sigmatdproof.i, sigmatdproof.len)}")))
 (good_parsetree?_TCC24 0
  (good_parsetree?_TCC24-1 nil 3888202986
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (<< adt-def-decl "(strict_well_founded?[parsetree])" sigmatdproof
     nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? termination
    "sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n2, (number_fields.+)(sigmatdproof.i, sigmatopdown.span(sigmatdproof.entry(sigmatdproof.Q))), sigmatdproof.R)"
    "nil")))
 (good_parsetree?_TCC25 0
  (good_parsetree?_TCC25-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.E"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC26 0
  (good_parsetree?_TCC26-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.entry(sigmatdproof.Q)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC27 0
  (good_parsetree?_TCC27-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.entry(sigmatdproof.R)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC28 0
  (good_parsetree?_TCC28-1 nil 3888202986
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< adt-def-decl "(strict_well_founded?[parsetree])" sigmatdproof
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? termination
    "sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i, sigmatdproof.Q)"
    "nil")))
 (good_parsetree?_TCC29 0
  (good_parsetree?_TCC29-1 nil 3888202986
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< adt-def-decl "(strict_well_founded?[parsetree])" sigmatdproof
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? termination
    "sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n2, sigmatdproof.i, sigmatdproof.R)"
    "nil")))
 (good_parsetree?_TCC30 0
  (good_parsetree?_TCC30-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.E"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC31 0
  (good_parsetree?_TCC31-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.entry(sigmatdproof.Q)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC32 0
  (good_parsetree?_TCC32-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.entry(sigmatdproof.R)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC33 0
  (good_parsetree?_TCC33-1 nil 3888202986
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< adt-def-decl "(strict_well_founded?[parsetree])" sigmatdproof
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? termination
    "sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n2, sigmatdproof.i, sigmatdproof.R)"
    "nil")))
 (good_parsetree?_TCC34 0
  (good_parsetree?_TCC34-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.E"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC35 0
  (good_parsetree?_TCC35-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.entry(sigmatdproof.Q)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC36 0
  (good_parsetree?_TCC36-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.entry(sigmatdproof.R)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (buildtree_TCC1 0
  (buildtree_TCC1-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype
    "sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (buildtree_TCC2 0
  (buildtree_TCC2-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "z`4") (("" (grind) nil nil)) nil)) nil)
   ((loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (qstack type-decl nil sigmatdproof nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (index type-eq-decl nil integertypes nil)
    (state type-eq-decl nil sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (buildtree subtype
    "sigmatdproof.z`1`scaf(sigmatdproof.z`4)(sigmatdproof.z`3)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (buildtree_TCC3 0
  (buildtree_TCC5-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (flatten)
          (("" (expand good_tscaffold?)
            (("" (assert) (("" (inst?) (("" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.good_or_fail?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))}")))
 (buildtree_TCC4 0
  (buildtree_TCC21-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (flatten)
          (("" (expand good_tscaffold?)
            (("" (inst?) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree termination
    "sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i)"
    "nil")))
 (buildtree_TCC5 0
  (buildtree_TCC3-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n)
              ((""
                (typepred
                 "v(len, G, s, rootpos, rootnt)(st, qpush(n, i, S), n1, i)")
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (qstack type-decl nil sigmatdproof nil)
    (parsetree type-decl nil sigmatdproof nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (qpush? adt-recognizer-decl "[qstack -> boolean]" sigmatdproof nil)
    (qpush adt-constructor-decl
     "[[non_terminal, uint32, qstack] -> (qpush?)]" sigmatdproof nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (entry shared-adt-accessor-decl "[parsetree -> defent]"
     sigmatdproof nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype
    "sigmatdproof.one(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n), sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i))"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.S, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatdproof.entry(sigmatdproof.P) = sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n))}")))
 (buildtree_TCC6 0
  (buildtree_TCC9-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.good_or_fail?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))}")))
 (buildtree_TCC7 0
  (buildtree_TCC23-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree termination
    "sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i)"
    "nil")))
 (buildtree_TCC8 0
  (buildtree_TCC4-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n)
              ((""
                (typepred
                 "v(len, G, s, rootpos, rootnt)(st, qpush(n, i, S), n1, i)")
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (qstack type-decl nil sigmatdproof nil)
    (parsetree type-decl nil sigmatdproof nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (qpush? adt-recognizer-decl "[qstack -> boolean]" sigmatdproof nil)
    (qpush adt-constructor-decl
     "[[non_terminal, uint32, qstack] -> (qpush?)]" sigmatdproof nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (entry shared-adt-accessor-decl "[parsetree -> defent]"
     sigmatdproof nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype
    "sigmatdproof.one(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n), sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i))"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.S, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatdproof.entry(sigmatdproof.P) = sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n))}")))
 (buildtree_TCC9 0
  (buildtree_TCC13-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.good_or_fail?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))}")))
 (buildtree_TCC10 0
  (buildtree_TCC27-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree termination
    "sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i)"
    "nil")))
 (buildtree_TCC11 0
  (buildtree_TCC10-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n)
              ((""
                (typepred
                 "v(len, G, s, rootpos, rootnt)(st, qpush(n, i, S), n1, i)")
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (qstack type-decl nil sigmatdproof nil)
    (parsetree type-decl nil sigmatdproof nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (qpush? adt-recognizer-decl "[qstack -> boolean]" sigmatdproof nil)
    (qpush adt-constructor-decl
     "[[non_terminal, uint32, qstack] -> (qpush?)]" sigmatdproof nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (entry shared-adt-accessor-decl "[parsetree -> defent]"
     sigmatdproof nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype
    "sigmatdproof.one(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n), sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i))"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.S, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatdproof.entry(sigmatdproof.P) = sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n))}")))
 (buildtree_TCC12 0
  (buildtree_TCC17-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.good_or_fail?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))}")))
 (buildtree_TCC13 0
  (buildtree_TCC29-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree termination
    "sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i)"
    "nil")))
 (buildtree_TCC14 0
  (buildtree_TCC31-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (qstack type-decl nil sigmatdproof nil)
    (parsetree type-decl nil sigmatdproof nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (qpush? adt-recognizer-decl "[qstack -> boolean]" sigmatdproof nil)
    (qpush adt-constructor-decl
     "[[non_terminal, uint32, qstack] -> (qpush?)]" sigmatdproof nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (entry shared-adt-accessor-decl "[parsetree -> defent]"
     sigmatdproof nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype
    "sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)"
    "(sigmatopdown.good?)")))
 (buildtree_TCC15 0
  (buildtree_TCC32-1 nil 3888202986
   ("" (skeep* :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (expand "good_tscaffold?")
          (("" (flatten)
            (("" (inst-cp - i n)
              (("" (inst - i n1) (("" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype
    "(number_fields.+)(sigmatdproof.i, sigmatopdown.span(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.good_or_fail?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n2)))}")))
 (buildtree_TCC16 0
  (buildtree_TCC36-1 nil 3888202986
   ("" (skeep* :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree termination
    "sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n2, (number_fields.+)(sigmatdproof.i, sigmatopdown.span(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1))))"
    "nil")))
 (buildtree_TCC17 0
  (buildtree_TCC11-1 nil 3888202986
   ("" (skeep* :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst-cp - i n)
              (("" (inst - i n1) (("" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype
    "sigmatdproof.two(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n), sigmatdproof.E1, sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n2, (number_fields.+)(sigmatdproof.i, sigmatopdown.span(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))))"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.S, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatdproof.entry(sigmatdproof.P) = sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n))}")))
 (buildtree_TCC18 0
  (buildtree_TCC25-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.good_or_fail?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))}")))
 (buildtree_TCC19 0
  (buildtree_TCC39-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree termination
    "sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i)"
    "nil")))
 (buildtree_TCC20 0
  (buildtree_TCC33-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.good_or_fail?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n2)))}")))
 (buildtree_TCC21 0
  (buildtree_TCC41-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree termination
    "sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n2, sigmatdproof.i)"
    "nil")))
 (buildtree_TCC22 0
  (buildtree_TCC12-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n)
              ((""
                (typepred
                 "v(len, G, s, rootpos, rootnt)(st, qpush(n, i, S), n2, i)")
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (qstack type-decl nil sigmatdproof nil)
    (parsetree type-decl nil sigmatdproof nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (qpush? adt-recognizer-decl "[qstack -> boolean]" sigmatdproof nil)
    (qpush adt-constructor-decl
     "[[non_terminal, uint32, qstack] -> (qpush?)]" sigmatdproof nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (entry shared-adt-accessor-decl "[parsetree -> defent]"
     sigmatdproof nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype
    "sigmatdproof.two(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n), sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i), sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n2, sigmatdproof.i))"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.S, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatdproof.entry(sigmatdproof.P) = sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n))}")))
 (buildtree_TCC23 0
  (buildtree_TCC42-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.good_or_fail?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))}")))
 (buildtree_TCC24 0
  (buildtree_TCC44-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree termination
    "sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i)"
    "nil")))
 (buildtree_TCC25 0
  (buildtree_TCC14-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n)
              ((""
                (typepred
                 "v(len, G, s, rootpos, rootnt)(st, qpush(n, i, S), n1, i)")
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (qstack type-decl nil sigmatdproof nil)
    (parsetree type-decl nil sigmatdproof nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (qpush? adt-recognizer-decl "[qstack -> boolean]" sigmatdproof nil)
    (qpush adt-constructor-decl
     "[[non_terminal, uint32, qstack] -> (qpush?)]" sigmatdproof nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" sigmatopdown nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (entry shared-adt-accessor-decl "[parsetree -> defent]"
     sigmatdproof nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype
    "sigmatdproof.one(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n), sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i))"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.S, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatdproof.entry(sigmatdproof.P) = sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n))}")))
 (buildtree_TCC26 0
  (buildtree_TCC15-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n) (("" (grind-with-ext) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]"
     sigmatopdown nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (ent_good_extensionality formula-decl nil sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (ent_fail_extensionality formula-decl nil sigmatopdown nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (/= const-decl "boolean" notequal nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype
    "sigmatdproof.zero(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n))"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.S, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatdproof.entry(sigmatdproof.P) = sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n))}")))
 (no_push_endstate 0
  (no_push_endstate-1 nil 3888892615
   ("" (skeep :preds? t)
    (("" (typepred "st`depth")
      (("" (typepred "st")
        (("" (expand "good_depth?")
          (("" (typepred "st`stack")
            (("" (grind)
              (("" (use "sigma_pos")
                (("1" (ground)
                  (("1" (use "nonempty_card[below(255)]")
                    (("1" (grind) nil nil)
                     ("2"
                      (inst + 255
                       "id[{i_2: below(255) | push?(st`scaf(i)(i_2))}]")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (skeep*)
                  (("2"
                    (inst + 255
                     "id[{i_2: below(255) | push?(st`scaf(i!1)(i_2))}]")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((endstate type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (index type-eq-decl nil integertypes nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (sigma_pos formula-decl nil sigmatopdown nil)
    (is_finite const-decl "bool" finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (buildloop_TCC1 0
  (buildloop_TCC1-1 nil 3888290026 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype "sigmatdproof.len"
    "naturalnumbers.upto(sigmatdproof.len)")))
 (buildloop_TCC2 0
  (buildloop_TCC2-1 nil 3888290026
   ("" (skeep) (("" (use "scafcount_max") (("" (assert) nil nil)) nil))
    nil)
   ((scafcount_max formula-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "(number_fields.-)(exp2.exp2(40), sigmatopdown.scafcount(sigmatdproof.len, sigmatdproof.A, sigmatopdown.loop?, sigmatdproof.len))"
    "naturalnumber")))
 (buildloop_TCC3 0
  (buildloop_TCC3-1 nil 3888290026 ("" (subtype-tcc) nil nil) nil nil
   (buildloop subtype "d1`1" "naturalnumbers.upto(d1`1)")))
 (buildloop_TCC4 0
  (buildloop_TCC4-1 nil 3888290026 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype "sigmatdproof.len"
    "naturalnumbers.upto(sigmatdproof.len)")))
 (buildloop_TCC5 0
  (buildloop_TCC5-1 nil 3888290026
   ("" (grind)
    (("1" (typepred "st!1`scaf")
      (("1" (expand "fine_scaffold?")
        (("1" (ground)
          (("1" (inst - i!1 n!1) (("1" (ground) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (typepred "st!1`scaf")
      (("2" (expand "fine_scaffold?")
        (("2" (ground)
          (("2" (inst - i!1 n!1) (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil)
     ("3" (typepred "st!1`scaf")
      (("3" (expand "fine_scaffold?")
        (("3" (ground)
          (("3" (inst - i!1 n!1) (("3" (grind) nil nil)) nil)) nil))
        nil))
      nil)
     ("4" (typepred "st!1`scaf")
      (("4" (expand "fine_scaffold?")
        (("4" (ground)
          (("4" (inst - i!1 n!1) (("4" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (qstack type-decl nil sigmatdproof nil)
    (good_qstack? def-decl "bool" sigmatdproof nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil))
   nil
   (buildloop subtype "sigmatdproof.zero(sigmatopdown.loop)"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.S, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatopdown.loop?(sigmatdproof.entry(sigmatdproof.P)))}")))
 (buildloop_TCC6 0
  (buildloop_TCC7-1 nil 3888290026
   ("" (skeep*) (("" (typepred "st`stack") (("" (grind) nil nil)) nil))
    nil)
   ((endstate type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype "sigmatopdown.loop"
    "(sigmatopdown.nice_entry?(sigmatdproof.len, sigmatdproof.i))")))
 (buildloop_TCC7 0
  (buildloop_TCC12-1 nil 3888290026
   ("" (skeep* :preds? t) (("" (lazy-grind) nil nil)) nil)
   ((good_qstack? def-decl "bool" sigmatdproof nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (exp2 def-decl "posnat" exp2 nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S)"
    "{S | booleans.AND(sigmatdproof.good_qstack?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.st`scaf)(sigmatdproof.S), FORALL (i_1: naturalnumbers.upto(sigmatdproof.len)), (n_1: sigmatopdown.non_terminal): booleans.IFF(sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop](i_1)(n_1) = sigmatopdown.loop, sigmatdproof.inqstack(n_1, i_1, sigmatdproof.S)))}")))
 (buildloop_TCC8 0
  (buildloop_TCC13-1 nil 3888290026
   ("" (grind :if-match nil)
    (("" (typepred "st!1`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (inst - i!1 n!1)
            (("" (grind) (("" (use no_push_endstate) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (no_push_endstate formula-decl nil sigmatdproof nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (qstack type-decl nil sigmatdproof nil)
    (good_qstack? def-decl "bool" sigmatdproof nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (buildloop subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.loop?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))}")))
 (buildloop_TCC9 0
  (buildloop_TCC14-1 nil 3888290026
   ("" (skeep* :preds? t)
    (("" (rewrite "scafcount_update")
      (("" (grind :exclude "exp2") nil nil)) nil))
    nil)
   ((scafcount_update formula-decl nil sigmatopdown nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (state type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop termination
    "sigmatdproof.buildloop(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop], sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i)"
    "nil")))
 (buildloop_TCC10 0
  (buildloop_TCC8-1 nil 3888290026
   ("" (skeep* :preds? t)
    ((""
      (typepred
       "v(len, G, s, rootpos, rootnt)(st, A WITH [(i)(n) := loop], qpush(n, i, S), n1, i)")
      (("1" (grind) nil nil)
       ("2" (typepred "st`scaf")
        (("2" (expand "fine_scaffold?")
          (("2" (ground)
            (("2" (inst - i n1) (("2" (grind) nil nil)) nil)) nil))
          nil))
        nil)
       ("3" (ground) (("3" (grind) nil nil)) nil)
       ("4" (lazy-grind) nil nil) ("5" (grind) nil nil))
      nil))
    nil)
   ((entry shared-adt-accessor-decl "[parsetree -> defent]"
     sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (good_qstack? def-decl "bool" sigmatdproof nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (qpush adt-constructor-decl
     "[[non_terminal, uint32, qstack] -> (qpush?)]" sigmatdproof nil)
    (qpush? adt-recognizer-decl "[qstack -> boolean]" sigmatdproof nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (parsetree type-decl nil sigmatdproof nil)
    (uint32 type-eq-decl nil integertypes nil)
    (qstack type-decl nil sigmatdproof nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "sigmatdproof.one(sigmatopdown.loop, sigmatdproof.buildloop(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop], sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i))"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.S, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatopdown.loop?(sigmatdproof.entry(sigmatdproof.P)))}")))
 (buildloop_TCC11 0
  (buildloop_TCC9-1 nil 3888290026 ("" (subtype-tcc) nil nil)
   ((good_good_entry? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (buildloop subtype "sigmatopdown.loop"
    "(sigmatopdown.nice_entry?(sigmatdproof.len, sigmatdproof.i))")))
 (buildloop_TCC12 0
  (buildloop_TCC21-1 nil 3888290026
   ("" (skeep* :preds? t) (("" (lazy-grind) nil nil)) nil)
   ((good_qstack? def-decl "bool" sigmatdproof nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (exp2 def-decl "posnat" exp2 nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S)"
    "{S | booleans.AND(sigmatdproof.good_qstack?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.st`scaf)(sigmatdproof.S), FORALL (i_1: naturalnumbers.upto(sigmatdproof.len)), (n_1: sigmatopdown.non_terminal): booleans.IFF(sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop](i_1)(n_1) = sigmatopdown.loop, sigmatdproof.inqstack(n_1, i_1, sigmatdproof.S)))}")))
 (buildloop_TCC13 0
  (buildloop_TCC22-1 nil 3888290026
   ("" (grind)
    (("" (typepred "st!1`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (inst - i!1 n!1)
            (("" (grind) (("" (use no_push_endstate) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (no_push_endstate formula-decl nil sigmatdproof nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (qstack type-decl nil sigmatdproof nil)
    (good_qstack? def-decl "bool" sigmatdproof nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (buildloop subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.loop?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))}")))
 (buildloop_TCC14 0
  (buildloop_TCC23-1 nil 3888290026
   ("" (skeep* :preds? t)
    (("" (rewrite "scafcount_update")
      (("" (grind :exclude "exp2") nil nil)) nil))
    nil)
   ((scafcount_update formula-decl nil sigmatopdown nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (state type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop termination
    "sigmatdproof.buildloop(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop], sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i)"
    "nil")))
 (buildloop_TCC15 0
  (buildloop_TCC10-1 nil 3888290026
   ("" (skeep* :preds? t)
    ((""
      (typepred
       "v(len, G, s, rootpos, rootnt)(st, A WITH [(i)(n) := loop], qpush(n, i, S), n1, i)")
      (("1" (grind) nil nil)
       ("2" (rewrite "scafcount_update")
        (("2" (grind :exclude "exp2") nil nil)) nil)
       ("3" (typepred "st`scaf")
        (("3" (expand "fine_scaffold?")
          (("3" (ground)
            (("3" (inst - i n) (("3" (lazy-grind) nil nil)) nil)) nil))
          nil))
        nil)
       ("4" (lazy-grind) nil nil) ("5" (grind) nil nil))
      nil))
    nil)
   ((entry shared-adt-accessor-decl "[parsetree -> defent]"
     sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (good_qstack? def-decl "bool" sigmatdproof nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (qpush adt-constructor-decl
     "[[non_terminal, uint32, qstack] -> (qpush?)]" sigmatdproof nil)
    (qpush? adt-recognizer-decl "[qstack -> boolean]" sigmatdproof nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (parsetree type-decl nil sigmatdproof nil)
    (uint32 type-eq-decl nil integertypes nil)
    (qstack type-decl nil sigmatdproof nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (count const-decl "upto(len)" arrayCount nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scafcount_update formula-decl nil sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "sigmatdproof.one(sigmatopdown.loop, sigmatdproof.buildloop(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop], sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i))"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.S, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatopdown.loop?(sigmatdproof.entry(sigmatdproof.P)))}")))
 (buildloop_TCC16 0
  (buildloop_TCC11-1 nil 3888290026 ("" (subtype-tcc) nil nil)
   ((good_good_entry? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (buildloop subtype "sigmatopdown.loop"
    "(sigmatopdown.nice_entry?(sigmatdproof.len, sigmatdproof.i))")))
 (buildloop_TCC17 0
  (buildloop_TCC30-1 nil 3888290026
   ("" (skeep* :preds? t) (("" (lazy-grind) nil nil)) nil)
   ((good_qstack? def-decl "bool" sigmatdproof nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (exp2 def-decl "posnat" exp2 nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S)"
    "{S | booleans.AND(sigmatdproof.good_qstack?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.st`scaf)(sigmatdproof.S), FORALL (i_1: naturalnumbers.upto(sigmatdproof.len)), (n_1: sigmatopdown.non_terminal): booleans.IFF(sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop](i_1)(n_1) = sigmatopdown.loop, sigmatdproof.inqstack(n_1, i_1, sigmatdproof.S)))}")))
 (buildloop_TCC18 0
  (buildloop_TCC31-1 nil 3888290026 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (qstack type-decl nil sigmatdproof nil)
    (good_qstack? def-decl "bool" sigmatdproof nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.loop?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))}")))
 (buildloop_TCC19 0
  (buildloop_TCC32-1 nil 3888290026
   ("" (skeep* :preds? t)
    (("" (rewrite "scafcount_update")
      (("" (grind :exclude "exp2") nil nil)) nil))
    nil)
   ((scafcount_update formula-decl nil sigmatopdown nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (state type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop termination
    "sigmatdproof.buildloop(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop], sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i)"
    "nil")))
 (buildloop_TCC20 0
  (buildloop_TCC15-1 nil 3888290026
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (exp2 def-decl "posnat" exp2 nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "sigmatdproof.one(sigmatopdown.loop, sigmatdproof.buildloop(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop], sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i))"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.S, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatopdown.loop?(sigmatdproof.entry(sigmatdproof.P)))}")))
 (buildloop_TCC21 0
  (buildloop_TCC34-1 nil 3888290026
   ("" (skeep* :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n)
              (("" (grind)
                (("1" (use no_push_endstate) nil nil)
                 ("2" (use no_push_endstate) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((endstate type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (no_push_endstate formula-decl nil sigmatdproof nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.good_or_fail?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))}")))
 (buildloop_TCC22 0
  (buildloop_TCC16-1 nil 3888290026 ("" (subtype-tcc) nil nil)
   ((good_good_entry? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (buildloop subtype "sigmatopdown.loop"
    "(sigmatopdown.nice_entry?(sigmatdproof.len, sigmatdproof.i))")))
 (buildloop_TCC23 0
  (buildloop_TCC43-1 nil 3888290026
   ("" (skeep* :preds? t) (("" (lazy-grind) nil nil)) nil)
   ((good_qstack? def-decl "bool" sigmatdproof nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (exp2 def-decl "posnat" exp2 nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S)"
    "{S | booleans.AND(sigmatdproof.good_qstack?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.st`scaf)(sigmatdproof.S), FORALL (i_1: naturalnumbers.upto(sigmatdproof.len)), (n_1: sigmatopdown.non_terminal): booleans.IFF(sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop](i_1)(n_1) = sigmatopdown.loop, sigmatdproof.inqstack(n_1, i_1, sigmatdproof.S)))}")))
 (buildloop_TCC24 0
  (buildloop_TCC35-1 nil 3888290026
   ("" (skeep* :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n)
              (("" (grind)
                (("1" (use no_push_endstate) nil nil)
                 ("2" (use no_push_endstate) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((endstate type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (no_push_endstate formula-decl nil sigmatdproof nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)"
    "(sigmatopdown.good?)")))
 (buildloop_TCC25 0
  (buildloop_TCC17-1 nil 3888290026
   ("" (skeep* :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (expand "good_tscaffold?")
          (("" (flatten)
            (("" (inst - i n)
              (("" (typepred "st`scaf(i)(n1)")
                (("" (grind)
                  (("1" (use "no_push_endstate") nil nil)
                   ("2" (use "no_push_endstate") nil nil)
                   ("3" (use "no_push_endstate") nil nil)
                   ("4" (use "no_push_endstate") nil nil)
                   ("5" (use "no_push_endstate") nil nil)
                   ("6" (use "no_push_endstate") nil nil)
                   ("7" (use "no_push_endstate") nil nil)
                   ("8" (use "no_push_endstate") nil nil)
                   ("9" (use "no_push_endstate") nil nil)
                   ("10" (use "no_push_endstate") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((endstate type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (no_push_endstate formula-decl nil sigmatdproof nil)
    (span adt-accessor-decl "[(good?) -> uint32]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "((number_fields.+)(sigmatdproof.i, sigmatopdown.span(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1))))"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.loop?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n2)))}")))
 (buildloop_TCC26 0
  (buildloop_TCC45-1 nil 3888290026
   ("" (skeep* :preds? t)
    (("" (rewrite "scafcount_update") (("" (grind) nil nil)) nil)) nil)
   ((scafcount_update formula-decl nil sigmatopdown nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (state type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop termination
    "sigmatdproof.buildloop(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop], sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n2, ((number_fields.+)(sigmatdproof.i, sigmatopdown.span(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))))"
    "nil")))
 (buildloop_TCC27 0
  (buildloop_TCC18-1 nil 3888290026
   ("" (skeep* :preds? t)
    ((""
      (typepred "v(len, G, s, rootpos, rootnt)
                             (st, A WITH [(i)(n) := loop], qpush(n, i, S), n2, (i + span(st`scaf(i)(n1))))")
      (("1" (grind :if-match nil)
        (("1" (typepred "st`scaf(i)(n1)")
          (("1" (grind)
            (("1" (use "no_push_endstate") nil nil)
             ("2" (typepred "st`scaf")
              (("2" (expand "fine_scaffold?")
                (("2" (ground)
                  (("2" (inst - i n) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "st`scaf")
          (("2" (expand "fine_scaffold?")
            (("2" (ground)
              (("2" (inst - i n)
                (("2" (grind) (("2" (use "no_push_endstate") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (rewrite "scafcount_update")
        (("2" (hide 4) (("2" (grind) nil nil)) nil)) nil)
       ("3" (hide 4)
        (("3" (typepred "st`scaf(i)(n1)")
          (("3" (typepred "st`scaf")
            (("3" (expand "fine_scaffold?")
              (("3" (flatten)
                (("3" (expand "good_tscaffold?")
                  (("3" (inst - i n)
                    (("3" (grind)
                      (("1" (use "no_push_endstate") nil nil)
                       ("2" (use "no_push_endstate") nil nil)
                       ("3" (use "no_push_endstate") nil nil)
                       ("4" (use "no_push_endstate") nil nil)
                       ("5" (use "no_push_endstate") nil nil)
                       ("6" (use "no_push_endstate") nil nil)
                       ("7" (use "no_push_endstate") nil nil)
                       ("8" (use "no_push_endstate") nil nil)
                       ("9" (use "no_push_endstate") nil nil)
                       ("10" (use "no_push_endstate") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (hide 4)
        (("4" (typepred "st`scaf")
          (("4" (expand "fine_scaffold?")
            (("4" (ground)
              (("4" (expand "good_tscaffold?")
                (("4" (inst - i n)
                  (("4" (grind)
                    (("1" (use "no_push_endstate") nil nil)
                     ("2" (use "no_push_endstate") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (hide 4) (("5" (lazy-grind) nil nil)) nil)
       ("6" (hide 4) (("6" (grind) nil nil)) nil))
      nil))
    nil)
   ((entry shared-adt-accessor-decl "[parsetree -> defent]"
     sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (span adt-accessor-decl "[(good?) -> uint32]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (good_qstack? def-decl "bool" sigmatdproof nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (qpush adt-constructor-decl
     "[[non_terminal, uint32, qstack] -> (qpush?)]" sigmatdproof nil)
    (qpush? adt-recognizer-decl "[qstack -> boolean]" sigmatdproof nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (parsetree type-decl nil sigmatdproof nil)
    (uint32 type-eq-decl nil integertypes nil)
    (qstack type-decl nil sigmatdproof nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (no_push_endstate formula-decl nil sigmatdproof nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scafcount_update formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "sigmatdproof.two(sigmatopdown.loop, sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i), sigmatdproof.buildloop(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop], sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n2, ((number_fields.+)(sigmatdproof.i, sigmatopdown.span(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1))))))"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.S, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatopdown.loop?(sigmatdproof.entry(sigmatdproof.P)))}")))
 (buildloop_TCC28 0
  (buildloop_TCC19-1 nil 3888290026 ("" (subtype-tcc) nil nil)
   ((good_good_entry? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (buildloop subtype "sigmatopdown.loop"
    "(sigmatopdown.nice_entry?(sigmatdproof.len, sigmatdproof.i))")))
 (buildloop_TCC29 0
  (buildloop_TCC61-1 nil 3888290026
   ("" (skeep* :preds? t) (("" (lazy-grind) nil nil)) nil)
   ((good_qstack? def-decl "bool" sigmatdproof nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (exp2 def-decl "posnat" exp2 nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S)"
    "{S | booleans.AND(sigmatdproof.good_qstack?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.st`scaf)(sigmatdproof.S), FORALL (i_1: naturalnumbers.upto(sigmatdproof.len)), (n_1: sigmatopdown.non_terminal): booleans.IFF(sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop](i_1)(n_1) = sigmatopdown.loop, sigmatdproof.inqstack(n_1, i_1, sigmatdproof.S)))}")))
 (buildloop_TCC30 0
  (buildloop_TCC44-1 nil 3888290026 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (qstack type-decl nil sigmatdproof nil)
    (good_qstack? def-decl "bool" sigmatdproof nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.loop?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))}")))
 (buildloop_TCC31 0
  (buildloop_TCC63-1 nil 3888290026
   ("" (skeep* :preds? t)
    (("" (rewrite "scafcount_update") (("" (grind) nil nil)) nil)) nil)
   ((scafcount_update formula-decl nil sigmatopdown nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (state type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop termination
    "sigmatdproof.buildloop(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop], sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i)"
    "nil")))
 (buildloop_TCC32 0
  (buildloop_TCC20-1 nil 3888290026
   ("" (skeep* :preds? t)
    ((""
      (typepred
       "v(len, G, s, rootpos, rootnt)(st, A WITH [(i)(n) := loop], qpush(n, i, S), n1, i)")
      (("1" (grind) nil nil)
       ("2" (rewrite "scafcount_update") (("2" (grind) nil nil)) nil)
       ("3" (propax) nil nil)
       ("4" (hide 3) (("4" (lazy-grind) nil nil)) nil)
       ("5" (hide 3) (("5" (grind) nil nil)) nil))
      nil))
    nil)
   ((entry shared-adt-accessor-decl "[parsetree -> defent]"
     sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (good_qstack? def-decl "bool" sigmatdproof nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (qpush adt-constructor-decl
     "[[non_terminal, uint32, qstack] -> (qpush?)]" sigmatdproof nil)
    (qpush? adt-recognizer-decl "[qstack -> boolean]" sigmatdproof nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (parsetree type-decl nil sigmatdproof nil)
    (uint32 type-eq-decl nil integertypes nil)
    (qstack type-decl nil sigmatdproof nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (count const-decl "upto(len)" arrayCount nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scafcount_update formula-decl nil sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "sigmatdproof.one(sigmatopdown.loop, sigmatdproof.buildloop(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop], sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i))"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.S, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatopdown.loop?(sigmatdproof.entry(sigmatdproof.P)))}")))
 (buildloop_TCC33 0
  (buildloop_TCC55-1 nil 3888290026
   ("" (skeep* :preds? t)
    (("" (grind)
      (("" (typepred "st`scaf(i)(n1)")
        (("" (grind)
          (("1" (use "no_push_endstate") nil nil)
           ("2" (typepred "st`scaf(i)(n1)")
            (("2" (typepred "st`scaf")
              (("2" (grind :if-match nil)
                (("2" (inst - i n) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((good_or_fail? const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (exp2 def-decl "posnat" exp2 nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (index type-eq-decl nil integertypes nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (no_push_endstate formula-decl nil sigmatdproof nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.good_or_fail?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))}")))
 (buildloop_TCC34 0
  (buildloop_TCC24-1 nil 3888290026 ("" (subtype-tcc) nil nil)
   ((good_good_entry? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (buildloop subtype "sigmatopdown.loop"
    "(sigmatopdown.nice_entry?(sigmatdproof.len, sigmatdproof.i))")))
 (buildloop_TCC35 0
  (buildloop_TCC25-1 nil 3888290026
   ("" (skeep* :preds? t) (("" (lazy-grind) nil nil)) nil)
   ((good_qstack? def-decl "bool" sigmatdproof nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (exp2 def-decl "posnat" exp2 nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S)"
    "{S | booleans.AND(sigmatdproof.good_qstack?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.st`scaf)(sigmatdproof.S), FORALL (i_1: naturalnumbers.upto(sigmatdproof.len)), (n_1: sigmatopdown.non_terminal): booleans.IFF(sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop](i_1)(n_1) = sigmatopdown.loop, sigmatdproof.inqstack(n_1, i_1, sigmatdproof.S)))}")))
 (buildloop_TCC36 0
  (buildloop_TCC53-1 nil 3888290026
   ("" (skeep* :preds? t)
    (("" (typepred "st`scaf")
      (("" (grind :if-match nil)
        (("" (inst - i n)
          (("" (grind)
            (("1" (use "no_push_endstate") nil nil)
             ("2" (use "no_push_endstate") nil nil)
             ("3" (use "no_push_endstate") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((endstate type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (no_push_endstate formula-decl nil sigmatdproof nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.loop?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n2)))}")))
 (buildloop_TCC37 0
  (buildloop_TCC27-1 nil 3888290026
   ("" (skeep* :preds? t)
    (("" (rewrite "scafcount_update") (("" (grind) nil nil)) nil)) nil)
   ((scafcount_update formula-decl nil sigmatopdown nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (state type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop termination
    "sigmatdproof.buildloop(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop], sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n2, sigmatdproof.i)"
    "nil")))
 (buildloop_TCC38 0
  (buildloop_TCC26-1 nil 3888290026
   ("" (skeep* :preds? t)
    ((""
      (typepred
       "v(len, G, s, rootpos, rootnt)(st, A WITH [(i)(n) := loop], qpush(n, i, S), n2, i)")
      (("1" (grind)
        (("1" (typepred "st`scaf")
          (("1" (grind :if-match nil)
            (("1" (inst - i n)
              (("1" (grind) (("1" (use "no_push_endstate") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (rewrite "scafcount_update") (("2" (grind) nil nil)) nil)
       ("3" (hide 4)
        (("3" (typepred "st`scaf")
          (("3" (grind :if-match nil)
            (("3" (inst - i n)
              (("3" (grind)
                (("1" (use "no_push_endstate") nil nil)
                 ("2" (use "no_push_endstate") nil nil)
                 ("3" (use "no_push_endstate") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (hide 4) (("4" (lazy-grind) nil nil)) nil)
       ("5" (hide 4) (("5" (grind) nil nil)) nil))
      nil))
    nil)
   ((entry shared-adt-accessor-decl "[parsetree -> defent]"
     sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (good_qstack? def-decl "bool" sigmatdproof nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (qpush adt-constructor-decl
     "[[non_terminal, uint32, qstack] -> (qpush?)]" sigmatdproof nil)
    (qpush? adt-recognizer-decl "[qstack -> boolean]" sigmatdproof nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (parsetree type-decl nil sigmatdproof nil)
    (uint32 type-eq-decl nil integertypes nil)
    (qstack type-decl nil sigmatdproof nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (no_push_endstate formula-decl nil sigmatdproof nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scafcount_update formula-decl nil sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "sigmatdproof.two(sigmatopdown.loop, sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i), sigmatdproof.buildloop(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop], sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n2, sigmatdproof.i))"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.S, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatopdown.loop?(sigmatdproof.entry(sigmatdproof.P)))}")))
 (buildloop_TCC39 0
  (buildloop_TCC65-1 nil 3888290026
   ("" (skeep* :preds? t)
    (("" (typepred "st`scaf")
      (("" (grind :if-match nil)
        (("1" (inst - i n) (("1" (grind) nil nil)) nil)
         ("2" (inst - i n) (("2" (grind) nil nil)) nil)
         ("3" (inst - i n) (("3" (grind) nil nil)) nil)
         ("4" (inst - i n) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((endstate type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (buildloop cases "sigmatdproof.G(sigmatdproof.n)" "peg: DATATYPE
 BEGIN
  epsilon: epsilon?
  failure: failure?
  any(p: [byte -> bool]): any?
  terminal(a: byte): terminal?
  concat(e1, e2: non_terminal): concat?
  choice(e1, e2: non_terminal): or?
  check(e: non_terminal): and?
  neg(e: non_terminal): not?
 END peg"))))

