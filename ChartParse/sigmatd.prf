(sigmatd
 (subtype_TCC1 0
  (subtype_TCC1-1 nil 3804536638 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil (subtype_ subtype "sigmatd.x" "uint32")))
 (subtype_TCC2 0
  (subtype_TCC2-1 nil 3804564519 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (exp2 def-decl "posnat" exp2 nil))
   nil (subtype_ subtype "sigmatd.x" "uint8")))
 (fine_push_entry?_TCC1 0
  (fine_push_entry?_TCC1-1 nil 3807728459 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (fine_push_entry? subtype "sigmatd.x" "(sigmatd.push?)")))
 (loop_or_push?_TCC1 0
  (loop_or_push?_TCC1-1 nil 3888093983 ("" (subtype-tcc) nil nil) nil
   nil
   (loop_or_push? subtype "sigmatd.e"
    "{x: sigmatd.ent | booleans.OR(sigmatd.fail?(x), booleans.OR(sigmatd.loop?(x), sigmatd.good?(x)))}")))
 (successor_TCC1 0
  (successor_TCC1-1 nil 3804904050 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (successor subtype "sigmatd.entry1" "(sigmatd.push?)")))
 (successor_TCC2 0
  (successor_TCC2-1 nil 3804904050 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (uint8 type-eq-decl nil integertypes nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (successor subtype "sigmatd.entry2" "(sigmatd.push?)")))
 (successor_TCC3 0
  (successor_TCC1-1 nil 3804547853 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (uint8 type-eq-decl nil integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (successor subtype "sigmatd.nt1" "non_terminal")))
 (successor_TCC4 0
  (successor_TCC1-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (uint8 type-eq-decl nil integertypes nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (successor subtype "sigmatd.p1"
    "naturalnumbers.upto(sigmatd.len)")))
 (successor_TCC5 0
  (successor_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (uint8 type-eq-decl nil integertypes nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (successor subtype "sigmatd.p1"
    "naturalnumbers.upto(sigmatd.len)")))
 (sigma_TCC1 0
  (sigma_TCC1-1 nil 3885810362 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (sigma subtype "0" "naturalnumbers.upto(sigmatd.max)")))
 (sigma_TCC2 0
  (sigma_TCC2-1 nil 3885810362 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (sigma subtype "(number_fields.-)(sigmatd.j, 1)"
          "naturalnumbers.upto(sigmatd.max)")))
 (sigma_TCC3 0
  (sigma_TCC4-1 nil 3885810362 ("" (termination-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (sigma termination
          "sigmatd.sigma(sigmatd.max, sigmatd.A)((number_fields.-)(sigmatd.j, 1))"
          "nil")))
 (sigma_pos 0
  (sigma_pos-1 nil 3885943581
   ("" (skolem + (len F i "_")) (("" (induct-and-simplify j) nil nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (sigma def-decl "nat" sigmatd nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (sigma_dec_TCC1 0
  (sigma_dec_TCC1-1 nil 3885933801 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (sigma_dec subtype "(number_fields.-)(sigmatd.F(sigmatd.i), 1)"
    "nat")))
 (sigma_dec 0
  (sigma_dec-1 nil 3885933802
   ("" (skolem + (len F i "_"))
    (("" (induct-and-simplify "j") nil nil)) nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sigma def-decl "nat" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (sigma_inc 0
  (sigma_inc-1 nil 3885943324
   ("" (skolem + (len F i "_"))
    (("" (induct-and-simplify "j") nil nil)) nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma def-decl "nat" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (sigma_zero 0
  (sigma_zero-1 nil 3886210429
   ("" (skolem + ("len" "_")) (("" (induct-and-simplify j) nil nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (sigma def-decl "nat" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (scafcount_TCC1 0
  (scafcount_TCC4-1 nil 3806632141 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (num_non_terminals const-decl "byte" sigmatd nil))
   nil (scafcount subtype "sigmatd.num_non_terminals" "index")))
 (scafcount_TCC2 0
  (scafcount_TCC3-1 nil 3885810362
   ("" (skolem + (len A P "_"))
    ((""
      (case "FORALL ((j: upto(len))):
                             sigma(len,
                                  LAMBDA (i: upto(len)): count[ent](num_non_terminals)(P)(A(i)))(j)
                              <= (j + 1) * num_non_terminals")
      (("1" (skeep)
        (("1" (case "(j + 1) * num_non_terminals <= exp2(64) - 1")
          (("1" (assert) (("1" (inst?) (("1" (assert) nil nil)) nil))
            nil)
           ("2" (hide -1 2)
            (("2"
              (use le_times_le_pos :subst
                   (nnx "j + 1" y "exp2(32)" nnz num_non_terminals w
                    "exp2(8)"))
              (("2" (ground)
                (("1" (rewrite exp2_sum :dir RL)
                  (("1" (grind) nil nil)) nil)
                 ("2" (typepred "num_non_terminals")
                  (("2" (typepred j)
                    (("2" (typepred len) (("2" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (induct j)
          (("1" (expand "sigma") (("1" (assert) nil nil)) nil)
           ("2" (skeep*)
            (("2" (expand "sigma" +) (("2" (assert) nil nil)) nil))
            nil)
           ("3" (hide 2) (("3" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (hide 2) (("3" (grind) nil nil)) nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (ent type-decl nil sigmatd nil)
    (sigma def-decl "nat" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (exp2_sum formula-decl nil exp2 nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pred type-eq-decl nil defined_types nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (scafcount subtype
    "sigmatd.sigma(sigmatd.len, LAMBDA (i: naturalnumbers.upto(sigmatd.len)): arrayCount[sigmatd.ent].count(sigmatd.num_non_terminals)(sigmatd.P)(sigmatd.A(i)))(sigmatd.j)"
    "uint64")))
 (sigma_max 0
  (sigma_max-1 nil 3806353166
   ("" (skolem + (len A P "_"))
    (("" (induct j)
      (("1" (grind :exclude count) nil nil)
       ("2" (skeep*)
        (("2" (expand "scafcount")
          (("2" (expand "sigma" +) (("2" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (sigma def-decl "nat" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (TRUE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (scafcount_max 0
  (scafcount_max-1 nil 3807566158
   ("" (skeep*)
    (("" (use sigma_max)
      (("" (use "le_times_le_pos" :subst (y "exp2(32)" w "exp2(8)"))
        (("" (ground)
          (("1" (rewrite exp2_sum :dir RL) (("1" (assert) nil nil))
            nil)
           ("2" (assert)
            (("2" (typepred num_non_terminals)
              (("2" (typepred j)
                (("2" (hide -3 2)
                  (("2" (grind)
                    (("2" (typepred len) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma_max formula-decl nil sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (exp2_sum formula-decl nil exp2 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (scafcount0_TCC1 0
  (scafcount0_TCC1-1 nil 3806988426 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (scafcount0 subtype "0" "naturalnumbers.upto(sigmatd.len)")))
 (scafcount0 0
  (scafcount0-1 nil 3806988426
   ("" (grind :rewrites count_update00) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (sigma def-decl "nat" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (num_non_terminals const-decl "byte" sigmatd nil))
   shostak))
 (scafcount_step_TCC1 0
  (scafcount_step_TCC1-1 nil 3806977775 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (scafcount_step subtype "(number_fields.+)(sigmatd.j, 1)"
    "naturalnumbers.upto(sigmatd.len)")))
 (scafcount_step_TCC2 0
  (scafcount_step_TCC2-1 nil 3806977775 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (scafcount_step subtype "sigmatd.j"
    "naturalnumbers.upto(sigmatd.len)")))
 (scafcount_step 0
  (scafcount_step-1 nil 3806977775
   ("" (skolem + (len "_" "_" "_"))
    (("" (induct-and-simplify "j") nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sigma def-decl "nat" sigmatd nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (scafcount_update 0
  (scafcount_update-1 nil 3806936723
   ("" (skolem + (len "_" "_" "_" "_" "_" "_"))
    (("" (induct j)
      (("1" (skeep*)
        (("1" (rewrite scafcount0)
          (("1" (lift-if :updates? nil)
            (("1" (ground)
              (("1" (grind) nil nil)
               ("2" (case "i  = 0")
                (("1" (assert)
                  (("1" (rewrite count_update00)
                    (("1" (grind) nil nil)) nil))
                  nil)
                 ("2" (assert) nil nil))
                nil)
               ("3" (case "i  = 0")
                (("1" (assert)
                  (("1" (rewrite count_update00)
                    (("1" (grind) nil nil)) nil))
                  nil)
                 ("2" (case "i  = 0")
                  (("1" (propax) nil nil) ("2" (assert) nil nil)) nil))
                nil)
               ("4" (case "i  = 0")
                (("1" (assert)
                  (("1" (rewrite count_update00)
                    (("1" (grind) nil nil)) nil))
                  nil)
                 ("2" (case "i  = 0")
                  (("1" (propax) nil nil) ("2" (grind) nil nil)) nil))
                nil)
               ("5" (case "i  = 0")
                (("1" (assert)
                  (("1" (rewrite count_update00)
                    (("1" (grind) nil nil)) nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep*)
        (("2" (rewrite scafcount_step)
          (("2" (rewrite -2)
            (("2" (hide -2)
              (("2" (case "i = 1 + jt")
                (("1" (assert)
                  (("1" (rewrite count_update00)
                    (("1"
                      (grind :rewrites scafcount_step :exclude count)
                      nil nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (grind :rewrites scafcount_step :exclude count)
                    nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((upto nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (uint64 type-eq-decl nil integertypes nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (scafcount0 formula-decl nil sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (sigma def-decl "nat" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (count_update00 formula-decl nil arrayCount nil)
    (below type-eq-decl nil naturalnumbers nil)
    (arr type-eq-decl nil arrayCount nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scafcount_step formula-decl nil sigmatd nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   shostak))
 (pushcount_TCC1 0
  (pushcount_TCC1-1 nil 3806632141 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (pushcount subtype "sigmatd.len"
    "naturalnumbers.upto(sigmatd.len)")))
 (good_stack?_TCC1 0
  (good_stack?_TCC1-1 nil 3804904050 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (good_stack? subtype "sigmatd.stack" "(sigmatd.push?)")))
 (good_stack?_TCC2 0
  (good_stack?_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (good_stack? subtype "sigmatd.entry" "(sigmatd.push?)")))
 (good_stack?_TCC3 0
  (good_stack?_TCC3-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_stack? subtype "(number_fields.-)(sigmatd.depth, 1)"
    "uint64")))
 (good_stack?_TCC4 0
  (good_stack?_TCC4-1 nil 3804455654 ("" (termination-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (good_stack? termination
    "sigmatd.good_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.A)"
    "nil")))
 (good_stack?_TCC5 0
  (good_stack?_TCC5-1 nil 3804547853 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_stack? subtype "sigmatd.nt(sigmatd.stack)" "non_terminal")))
 (good_stack?_TCC6 0
  (good_stack?_TCC5-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_stack? subtype "sigmatd.pos(sigmatd.stack)"
    "naturalnumbers.upto(sigmatd.len)")))
 (mem_stack?_TCC1 0
  (mem_stack?_TCC1-1 nil 3804455654
   ("" (skeep* :preds? t)
    (("" (expand "good_stack?") (("" (ground) nil nil)) nil)) nil)
   ((good_stack? def-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (mem_stack? subtype "(number_fields.-)(sigmatd.depth, 1)"
    "uint64")))
 (mem_stack?_TCC2 0
  (mem_stack?_TCC2-1 nil 3804455654 ("" (termination-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (num_non_terminals const-decl "byte" sigmatd nil))
   nil
   (mem_stack? termination
    "sigmatd.mem_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.A)"
    "nil")))
 (mem_stack?_TCC3 0
  (mem_stack?_TCC3-1 nil 3804455654 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (mem_stack? subtype
    "sigmatd.A(sigmatd.pos(sigmatd.stack))(sigmatd.nt(sigmatd.stack))"
    "(sigmatd.good_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.A))")))
 (mem_stack_push_TCC1 0
  (mem_stack_push_TCC2-1 nil 3807675826 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (mem_stack_push subtype "sigmatd.entry" "(sigmatd.push?)")))
 (mem_stack_push_TCC2 0
  (mem_stack_push_TCC1-1 nil 3807675826 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (mem_stack_push subtype "(sigmatd.pos(sigmatd.entry))"
    "naturalnumbers.upto(sigmatd.len)")))
 (mem_stack_push_TCC3 0
  (mem_stack_push_TCC3-1 nil 3807675826 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (mem_stack_push subtype "sigmatd.nt(sigmatd.entry)"
    "non_terminal")))
 (mem_stack_push 0
  (mem_stack_push-1 nil 3807675827
   ("" (induct depth)
    (("1" (lazy-grind :defs nil) nil nil)
     ("2" (skeep*)
      (("2" (expand mem_stack?)
        (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil))
      nil)
     ("3" (skeep*)
      (("3" (expand mem_stack? -4)
        (("3" (ground)
          (("1" (typepred stack) (("1" (grind) nil nil)) nil)
           ("2" (inst?)
            (("2" (inst?)
              (("1" (ground) nil nil)
               ("2" (typepred entry) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep*)
        (("4" (typepred entry) (("4" (grind) nil nil)) nil)) nil))
      nil)
     ("5" (hide 2)
      (("5" (skeep*)
        (("5" (typepred entry) (("5" (grind) nil nil)) nil)) nil))
      nil)
     ("6" (hide 2)
      (("6" (skeep*)
        (("6" (typepred entry) (("6" (grind) nil nil)) nil)) nil))
      nil)
     ("7" (hide 2)
      (("7" (skeep*)
        (("7" (typepred entry) (("7" (grind) nil nil)) nil)) nil))
      nil)
     ("8" (hide 2)
      (("8" (skeep*)
        (("8" (typepred entry) (("8" (grind) nil nil)) nil)) nil))
      nil)
     ("9" (hide 2) (("9" (grind) nil nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (mem_stack? def-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (<= const-decl "bool" reals nil)
    (uint64 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil))
   shostak))
 (good_mem_stack_TCC1 0
  (good_mem_stack_TCC1-1 nil 3807728459 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_mem_stack subtype "(sigmatd.pos(sigmatd.entry))"
    "naturalnumbers.upto(sigmatd.len)")))
 (good_mem_stack_TCC2 0
  (good_mem_stack_TCC2-1 nil 3807728459 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_mem_stack subtype "sigmatd.nt(sigmatd.entry)"
    "non_terminal")))
 (good_mem_stack 0
  (good_mem_stack-1 nil 3804823624
   ("" (induct "depth")
    (("1" (grind)
      (("1" (expand "good_stack?") (("1" (propax) nil nil)) nil)
       ("2" (grind)
        (("2" (expand "good_stack?") (("2" (propax) nil nil)) nil))
        nil)
       ("3" (expand "good_stack?") (("3" (propax) nil nil)) nil)
       ("4" (expand good_stack?) (("4" (propax) nil nil)) nil)
       ("5" (expand good_stack?) (("5" (propax) nil nil)) nil)
       ("6" (expand good_stack?) (("6" (propax) nil nil)) nil))
      nil)
     ("2" (skeep*)
      (("2" (expand "mem_stack?" +)
        (("2" (ground)
          (("1" (typepred stack) (("1" (grind :if-match nil) nil nil))
            nil)
           ("2" (expand "good_stack?" :fnum (-3 4))
            (("2" (ground)
              (("1" (hide -3 4)
                (("1" (grind)
                  (("1" (typepred entry)
                    (("1" (grind)
                      (("1" (typepred stack)
                        (("1" (grind)
                          (("1" (extensionality "(push?)")
                            (("1" (inst?) (("1" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (extensionality "(push?)")
                    (("2" (inst?) (("2" (ground) nil nil)) nil)) nil)
                   ("3" (extensionality "(push?)")
                    (("3" (inst?) (("3" (ground) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (hide -3 2 5)
                (("2" (lift-if)
                  (("2" (ground)
                    (("2" (lift-if)
                      (("2" (ground)
                        (("2" (extensionality "(push?)")
                          (("2" (inst?) (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (inst?)
                (("3" (ground)
                  (("1" (hide 2)
                    (("1" (lift-if)
                      (("1" (typepred entry)
                        (("1" (grind)
                          (("1" (extensionality "(push?)")
                            (("1" (inst?) (("1" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lift-if)
                    (("2" (ground)
                      (("2" (ground)
                        (("2" (extensionality "(push?)")
                          (("2" (inst?) (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (hide -3 4)
                (("4" (hide -1)
                  (("4" (lift-if)
                    (("4" (ground)
                      (("4" (ground)
                        (("4" (extensionality "(push?)")
                          (("4" (inst?) (("4" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("5" (hide -3 5)
                (("5" (case "pos(stack) = pos(entry)")
                  (("1" (case "nt(stack) = nt(entry)")
                    (("1" (extensionality "(push?)")
                      (("1" (assert)
                        (("1" (inst?) (("1" (ground) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (typepred u) (("2" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil)
               ("6" (inst? :polarity? t)
                (("6" (ground)
                  (("1" (hide 2)
                    (("1" (lift-if)
                      (("1" (ground)
                        (("1" (ground)
                          (("1" (extensionality "(push?)")
                            (("1" (inst?) (("1" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lift-if)
                    (("2" (ground)
                      (("2" (ground)
                        (("2" (extensionality "(push?)")
                          (("2" (inst?) (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil)
     ("4" (hide 2) (("4" (grind) nil nil)) nil)
     ("5" (hide 2) (("5" (grind) nil nil)) nil)
     ("6" (hide 2) (("6" (grind) nil nil)) nil)
     ("7" (hide 2) (("7" (grind) nil nil)) nil)
     ("8" (hide 2) (("8" (grind) nil nil)) nil)
     ("9" (hide 2) (("9" (grind) nil nil)) nil)
     ("10" (hide 2) (("10" (grind) nil nil)) nil)
     ("11" (hide 2) (("11" (grind) nil nil)) nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (ent_push_extensionality formula-decl nil sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (pred type-eq-decl nil defined_types nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mem_stack? def-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (<= const-decl "bool" reals nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil))
   shostak))
 (mem_mem_stack_TCC1 0
  (mem_mem_stack_TCC1-1 nil 3804967699
   ("" (skeep*)
    (("" (lemma good_mem_stack)
      (("" (inst?) (("" (ground) nil nil)) nil)) nil))
    nil)
   ((good_mem_stack formula-decl nil sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (index type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (mem_mem_stack subtype "sigmatd.stack"
    "(sigmatd.good_stack?(sigmatd.len, sigmatd.G, sigmatd.depth, sigmatd.A WITH [(sigmatd.pos(sigmatd.entry))(sigmatd.nt(sigmatd.entry)) := sigmatd.u]))")))
 (mem_mem_stack 0
  (mem_mem_stack-2 "" 3807748697
   ("" (induct depth)
    (("1" (skeep*)
      (("1" (expand good_stack?) (("1" (grind) nil nil)) nil)) nil)
     ("2" (skeep*)
      (("2" (expand mem_stack? +)
        (("2" (lift-if)
          (("2" (ground)
            (("2" (case "v = stack")
              (("1" (assert) nil nil)
               ("2" (assert)
                (("2" (inst?)
                  (("2" (ground)
                    (("1" (lift-if -)
                      (("1" (ground)
                        (("1" (lift-if -)
                          (("1" (ground)
                            (("1" (extensionality "(push?)")
                              (("1"
                                (forward-chain -)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand good_stack? -)
                      (("2" (ground)
                        (("1" (case "pos(stack) = pos(entry)")
                          (("1" (case "nt(stack) = nt(entry)")
                            (("1" (assert)
                              (("1"
                                (extensionality "(push?)")
                                (("1"
                                  (inst - stack entry)
                                  (("1" (ground) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (case "pos(stack) = pos(entry)")
                          (("1" (case "nt(stack) = nt(entry)")
                            (("1" (assert)
                              (("1"
                                (extensionality "(push?)")
                                (("1"
                                  (inst - stack entry)
                                  (("1" (ground) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("3" (case "pos(stack) = pos(entry)")
                      (("1" (case "nt(stack) = nt(entry)")
                        (("1" (extensionality "(push?)")
                          (("1" (inst - stack entry)
                            (("1" (ground) nil nil)) nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil)
     ("4" (hide 2) (("4" (grind) nil nil)) nil)
     ("5" (hide 2) (("5" (grind) nil nil)) nil)
     ("6" (hide 2)
      (("6" (skeep*)
        (("6" (use good_mem_stack) (("6" (ground) nil nil)) nil)) nil))
      nil)
     ("7" (hide 2)
      (("7" (skeep*)
        (("7" (typepred entry) (("7" (grind) nil nil)) nil)) nil))
      nil)
     ("8" (hide 2) (("8" (grind) nil nil)) nil)
     ("9" (hide 2) (("9" (grind) nil nil)) nil)
     ("10" (hide 2) (("10" (grind) nil nil)) nil)
     ("11" (hide 2) (("11" (grind) nil nil)) nil)
     ("12" (hide 2) (("12" (grind) nil nil)) nil))
    nil)
   ((good_mem_stack formula-decl nil sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (ent_push_extensionality formula-decl nil sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mem_stack? def-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (<= const-decl "bool" reals nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil))
   shostak)
  (mem_mem_stack-1 nil 3804967700
   ("" (induct depth)
    (("1" (skeep*) (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)
     ("2" (skeep*)
      (("2" (expand good_stack?) (("2" (grind) nil nil)) nil)) nil)
     ("3" (skeep*)
      (("3" (expand mem_stack? +)
        (("3" (lift-if)
          (("3" (ground)
            (("3" (case "v = stack")
              (("1" (assert) nil nil)
               ("2" (assert)
                (("2" (inst?)
                  (("2" (ground)
                    (("1" (lift-if -)
                      (("1" (ground)
                        (("1" (lift-if -)
                          (("1" (ground)
                            (("1" (extensionality "(push?)")
                              (("1"
                                (forward-chain -)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand good_stack? -)
                      (("2" (ground)
                        (("1" (grind) nil nil)
                         ("2" (lift-if 1)
                          (("2" (ground)
                            (("2" (ground)
                              (("2"
                                (extensionality "(push?)")
                                (("2"
                                  (forward-chain -)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (lift-if -)
                      (("3" (ground)
                        (("3" (lift-if -)
                          (("3" (ground)
                            (("3" (extensionality "(push?)")
                              (("3"
                                (forward-chain -)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (grind) nil nil)) nil)
     ("5" (hide 2) (("5" (grind) nil nil)) nil)
     ("6" (hide 2)
      (("6" (skeep*)
        (("6" (lemma good_mem_stack)
          (("6" (inst?) (("6" (ground) nil nil)) nil)) nil))
        nil))
      nil)
     ("7" (hide 2) (("7" (grind) nil nil)) nil)
     ("8" (hide 2) (("8" (grind) nil nil)) nil)
     ("9" (hide 2) (("9" (grind) nil nil)) nil)
     ("10" (hide 2) (("10" (grind) nil nil)) nil)
     ("11" (hide 2) (("11" (grind) nil nil)) nil)
     ("12" (hide 2) (("12" (grind) nil nil)) nil))
    nil)
   nil shostak))
 (good_mem_stack_push_TCC1 0
  (good_mem_stack_push_TCC2-1 nil 3807665403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_mem_stack_push subtype "sigmatd.push(sigmatd.pos, sigmatd.n)"
    "(sigmatd.good_push_entry?(sigmatd.len))")))
 (good_mem_stack_push_TCC2 0
  (good_mem_stack_push_TCC3-1 nil 3807665403
   ("" (skeep*)
    (("" (use exp2_lt :subst (n 41 m 64)) (("" (grind) nil nil)) nil))
    nil)
   ((exp2_lt formula-decl nil exp2 nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_mem_stack_push subtype "(number_fields.+)(sigmatd.depth, 1)"
    "uint64")))
 (good_mem_stack_push_TCC3 0
  (good_mem_stack_push_TCC4-1 nil 3807665403 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_mem_stack_push subtype "sigmatd.stack"
    "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (good_mem_stack_push 0
  (good_mem_stack_push-2 "" 3807671734
   ("" (skeep*)
    (("" (expand good_stack? +)
      (("" (ground)
        (("1" (grind) nil nil)
         ("2"
          (use good_mem_stack :subst (len len entry "push(pos!1, n)"))
          (("1" (ground)
            (("1" (grind) nil nil)
             ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil)
             ("3" (grind) nil nil))
            nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((good_stack? def-decl "bool" sigmatd nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" sigmatd
          nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (mem_stack_push formula-decl nil sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (exp2 def-decl "posnat" exp2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak)
  (good_mem_stack_push-1 nil 3807665405
   ("" (skeep*)
    (("" (expand good_stack? +)
      (("" (ground)
        (("1" (postpone) nil nil) ("2" (postpone) nil nil)
         ("3" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (fine_stack?_TCC1 0
  (fine_stack?_TCC1-1 nil 3807728459 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (fine_stack? subtype "sigmatd.stack"
    "(sigmatd.fine_push_entry?(sigmatd.len))")))
 (fine_stack?_TCC2 0
  (fine_stack?_TCC1-1 nil 3804908888
   ("" (skeep*) (("" (typepred stack) (("" (grind) nil nil)) nil)) nil)
   ((good_stack? def-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (fine_stack? subtype "sigmatd.rest"
    "(sigmatd.good_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.A))")))
 (fine_stack?_TCC3 0
  (fine_stack?_TCC2-1 nil 3804908888
   ("" (skeep*)
    (("" (ground) (("" (typepred stack) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (fine_stack? subtype "(number_fields.-)(sigmatd.depth, 1)"
    "uint64")))
 (fine_stack?_TCC4 0
  (fine_stack?_TCC3-1 nil 3804908888
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred "stack") (("1" (grind) nil nil)) nil)
       ("2" (typepred "stack") (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (fine_stack? subtype
    "sigmatd.A(sigmatd.pos(sigmatd.stack))(sigmatd.nt(sigmatd.stack))"
    "(sigmatd.good_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.A))")))
 (fine_stack?_TCC5 0
  (fine_stack?_TCC4-1 nil 3804908888 ("" (termination-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (num_non_terminals const-decl "byte" sigmatd nil))
   nil
   (fine_stack? termination
    "sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.A)"
    "nil")))
 (fine_mem_stack_TCC1 0
  (fine_mem_stack_TCC1-1 nil 3804969900
   ("" (skeep*)
    (("" (rewrite good_mem_stack) (("" (grind) nil nil)) nil)) nil)
   ((good_mem_stack formula-decl nil sigmatd nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (fine_mem_stack subtype "sigmatd.stack"
    "(sigmatd.good_stack?(sigmatd.len, sigmatd.G, sigmatd.depth, sigmatd.A WITH [(sigmatd.pos(sigmatd.entry))(sigmatd.nt(sigmatd.entry)) := sigmatd.u]))")))
 (fine_mem_stack 0
  (fine_mem_stack-1 nil 3804969200
   ("" (induct "depth")
    (("1" (skeep*)
      (("1" (expand fine_stack?)
        (("1" (expand good_stack? -) (("1" (ground) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep*)
      (("2" (expand fine_stack? +)
        (("2" (expand good_stack? -3)
          (("2" (ground)
            (("1" (rewrite mem_mem_stack)
              (("1" (expand mem_stack? 2)
                (("1" (ground)
                  (("1" (lift-if +)
                    (("1" (ground)
                      (("1" (lift-if +)
                        (("1" (ground)
                          (("1" (extensionality "(push?)")
                            (("1" (forward-chain -)
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (inst?)
                            (("2" (ground)
                              (("2"
                                (replace -1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -5 4)
                (("2" (lift-if +)
                  (("2" (ground)
                    (("2" (ground)
                      (("2" (expand mem_stack? +)
                        (("2" (ground)
                          (("2" (extensionality "(push?)")
                            (("2" (forward-chain -)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide -5 4) (("3" (grind) nil nil)) nil)
               ("4" (hide -6 3)
                (("4" (grind)
                  (("4" (extensionality "(push?)")
                    (("4" (inst?) (("4" (ground) nil nil)) nil)) nil))
                  nil))
                nil)
               ("5" (hide -5 4)
                (("5" (grind)
                  (("1" (extensionality "(push?)")
                    (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)
                   ("2" (extensionality "(push?)")
                    (("2" (inst?) (("2" (ground) nil nil)) nil)) nil)
                   ("3" (extensionality "(push?)")
                    (("3" (inst?) (("3" (ground) nil nil)) nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite mem_mem_stack)
              (("1" (expand mem_stack? 2)
                (("1" (ground)
                  (("1" (lift-if +)
                    (("1" (ground)
                      (("1" (lift-if +)
                        (("1" (ground)
                          (("1" (extensionality "(push?)")
                            (("1" (forward-chain -)
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (inst?)
                            (("2" (ground)
                              (("2"
                                (replace -1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -5 4)
                (("2" (hide -1)
                  (("2" (grind)
                    (("2" (extensionality "(push?)")
                      (("2" (inst?) (("2" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide -5 4)
                (("3" (hide -1) (("3" (grind) nil nil)) nil)) nil)
               ("4" (hide -6 3)
                (("4" (hide -2)
                  (("4" (grind)
                    (("4" (extensionality "(push?)")
                      (("4" (inst?) (("4" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("5" (hide -5 4)
                (("5" (hide -1)
                  (("5" (grind)
                    (("1" (hide -5 4)
                      (("1" (hide -1)
                        (("1" (grind)
                          (("1" (extensionality "(push?)")
                            (("1" (inst?) (("1" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (extensionality "(push?)")
                      (("2" (inst?) (("2" (ground) nil nil)) nil)) nil)
                     ("3" (extensionality "(push?)")
                      (("3" (inst?) (("3" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil)
     ("4" (hide 2) (("4" (grind) nil nil)) nil)
     ("5" (hide 2) (("5" (grind) nil nil)) nil)
     ("6" (hide 2)
      (("6" (skeep*)
        (("6" (use good_mem_stack) (("6" (ground) nil nil)) nil)) nil))
      nil)
     ("7" (grind) nil nil) ("8" (hide 2) (("8" (grind) nil nil)) nil)
     ("9" (hide 2) (("9" (grind) nil nil)) nil)
     ("10" (hide 2) (("10" (grind) nil nil)) nil)
     ("11" (hide 2) (("11" (grind) nil nil)) nil)
     ("12" (hide 2) (("12" (grind) nil nil)) nil))
    nil)
   ((good_mem_stack formula-decl nil sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (mem_mem_stack formula-decl nil sigmatd nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (ent_push_extensionality formula-decl nil sigmatd nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mem_stack? def-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (<= const-decl "bool" reals nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil))
   shostak))
 (loop_ready?_TCC1 0
  (loop_ready?_TCC1-1 nil 3804455654
   ("" (skeep* :preds? t)
    (("" (typepred "A(i)(n1)") (("" (grind) nil nil)) nil)) nil)
   ((scaffold type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (loop_ready? subtype
    "(number_fields.+)(sigmatd.i, sigmatd.span(sigmatd.A(sigmatd.i)(sigmatd.n1)))"
    "naturalnumbers.upto(sigmatd.len)")))
 (good_fail?_TCC1 0
  (good_fail?_TCC1-1 nil 3885853547 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_fail? subtype "sigmatd.i"
    "naturalnumbers.below(sigmatd.len)")))
 (good_fail?_TCC2 0
  (good_fail?_TCC2-1 nil 3885853547 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_fail? subtype "sigmatd.i"
    "naturalnumbers.below(sigmatd.len)")))
 (good_fail?_TCC3 0
  (good_fail?_TCC3-1 nil 3804991042 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_fail? subtype "sigmatd.A(sigmatd.i)(sigmatd.n1)"
    "{x: sigmatd.ent | booleans.OR(sigmatd.fail?(x), booleans.OR(sigmatd.loop?(x), sigmatd.good?(x)))}")))
 (good_fail?_TCC4 0
  (good_fail?_TCC3-1 nil 3804455654
   ("" (grind)
    (("" (typepred "A!1(i!1)(n1!1)") (("" (grind) nil nil)) nil)) nil)
   ((ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (good_fail? subtype
    "(number_fields.+)(sigmatd.i, sigmatd.span(sigmatd.A(sigmatd.i)(sigmatd.n1)))"
    "naturalnumbers.upto(sigmatd.len)")))
 (good_fail?_TCC5 0
  (good_fail?_TCC5-1 nil 3806878024 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_fail? subtype "sigmatd.A(sigmatd.i)(sigmatd.n1)"
    "{x: sigmatd.ent | booleans.OR(sigmatd.fail?(x), booleans.OR(sigmatd.loop?(x), sigmatd.good?(x)))}")))
 (good_fail?_TCC6 0
  (good_fail?_TCC6-1 nil 3806878024 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_fail? subtype
    "sigmatd.A((number_fields.+)(sigmatd.i, sigmatd.span(sigmatd.A(sigmatd.i)(sigmatd.n1))))(sigmatd.n2)"
    "{x: sigmatd.ent | booleans.OR(sigmatd.fail?(x), booleans.OR(sigmatd.loop?(x), sigmatd.good?(x)))}")))
 (good_fail?_TCC7 0
  (good_fail?_TCC7-1 nil 3806878024 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_fail? subtype "sigmatd.A(sigmatd.i)(sigmatd.n1)"
    "{x: sigmatd.ent | booleans.OR(sigmatd.fail?(x), booleans.OR(sigmatd.loop?(x), sigmatd.good?(x)))}")))
 (good_fail?_TCC8 0
  (good_fail?_TCC8-1 nil 3806878024 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_fail? subtype "sigmatd.A(sigmatd.i)(sigmatd.n2)"
    "{x: sigmatd.ent | booleans.OR(sigmatd.fail?(x), booleans.OR(sigmatd.loop?(x), sigmatd.good?(x)))}")))
 (good_fail?_TCC9 0
  (good_fail?_TCC9-1 nil 3806878024 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_fail? subtype "sigmatd.A(sigmatd.i)(sigmatd.n1)"
    "{x: sigmatd.ent | booleans.OR(sigmatd.fail?(x), booleans.OR(sigmatd.loop?(x), sigmatd.good?(x)))}")))
 (good_fail?_TCC10 0
  (good_fail?_TCC10-1 nil 3806878024 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_fail? subtype "sigmatd.A(sigmatd.i)(sigmatd.n1)"
    "{x: sigmatd.ent | booleans.OR(sigmatd.fail?(x), booleans.OR(sigmatd.loop?(x), sigmatd.good?(x)))}")))
 (good_loop?_TCC1 0
  (good_loop?_TCC1-1 nil 3804455654
   ("" (skeep* :preds? t)
    (("" (typepred "A(i)(n1)") (("" (grind) nil nil)) nil)) nil)
   ((scaffold type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_loop? subtype
    "(number_fields.+)(sigmatd.i, sigmatd.span(sigmatd.A(sigmatd.i)(sigmatd.n1)))"
    "naturalnumbers.upto(sigmatd.len)")))
 (good_good?_TCC1 0
  (good_good?_TCC1-1 nil 3886088192 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good? subtype "(number_fields.-)(sigmatd.len, sigmatd.i)"
    "nat")))
 (good_good?_TCC2 0
  (good_good?_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good? subtype "sigmatd.i"
    "naturalnumbers.below(sigmatd.len)")))
 (good_good?_TCC3 0
  (good_good?_TCC3-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good? subtype "sigmatd.i"
    "naturalnumbers.below(sigmatd.len)")))
 (good_good?_TCC4 0
  (good_good?_TCC4-1 nil 3804455654
   ("" (skeep* :preds? t)
    (("" (typepred "A(i)(n1)") (("" (grind) nil nil)) nil)) nil)
   ((scaffold type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good? subtype
    "(number_fields.+)(sigmatd.i, sigmatd.span(sigmatd.A(sigmatd.i)(sigmatd.n1)))"
    "naturalnumbers.upto(sigmatd.len)")))
 (good_good?_TCC5 0
  (good_good?_TCC5-1 nil 3804991042 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good? subtype "sigmatd.A(sigmatd.i)(sigmatd.n1)"
    "{x: sigmatd.ent | booleans.OR(sigmatd.fail?(x), booleans.OR(sigmatd.loop?(x), sigmatd.good?(x)))}")))
 (good_good?_TCC6 0
  (good_good?_TCC6-1 nil 3806878024 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good? subtype
    "sigmatd.A((number_fields.+)(sigmatd.i, sigmatd.span(sigmatd.A(sigmatd.i)(sigmatd.n1))))(sigmatd.n2)"
    "{x: sigmatd.ent | booleans.OR(sigmatd.fail?(x), booleans.OR(sigmatd.loop?(x), sigmatd.good?(x)))}")))
 (good_good?_TCC7 0
  (good_good?_TCC7-1 nil 3806878024 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good? subtype "sigmatd.A(sigmatd.i)(sigmatd.n1)"
    "{x: sigmatd.ent | booleans.OR(sigmatd.fail?(x), booleans.OR(sigmatd.loop?(x), sigmatd.good?(x)))}")))
 (good_good?_TCC8 0
  (good_good?_TCC8-1 nil 3806878024 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good? subtype "sigmatd.A(sigmatd.i)(sigmatd.n1)"
    "{x: sigmatd.ent | booleans.OR(sigmatd.fail?(x), booleans.OR(sigmatd.loop?(x), sigmatd.good?(x)))}")))
 (good_good?_TCC9 0
  (good_good?_TCC9-1 nil 3806878024 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good? subtype "sigmatd.A(sigmatd.i)(sigmatd.n2)"
    "{x: sigmatd.ent | booleans.OR(sigmatd.fail?(x), booleans.OR(sigmatd.loop?(x), sigmatd.good?(x)))}")))
 (good_good?_TCC10 0
  (good_good?_TCC10-1 nil 3806878024 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good? subtype "sigmatd.A(sigmatd.i)(sigmatd.n1)"
    "{x: sigmatd.ent | booleans.OR(sigmatd.fail?(x), booleans.OR(sigmatd.loop?(x), sigmatd.good?(x)))}")))
 (good_good?_TCC11 0
  (good_good?_TCC11-1 nil 3806878024 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good? subtype "sigmatd.A(sigmatd.i)(sigmatd.n1)"
    "{x: sigmatd.ent | booleans.OR(sigmatd.fail?(x), booleans.OR(sigmatd.loop?(x), sigmatd.good?(x)))}")))
 (good_tscaffold?_TCC1 0
  (good_tscaffold?_TCC1-1 nil 3806632141 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_tscaffold? subtype "sigmatd.A(sigmatd.i)(sigmatd.n)"
    "{x: sigmatd.ent | booleans.OR(sigmatd.fail?(x), booleans.OR(sigmatd.loop?(x), sigmatd.good?(x)))}")))
 (good_good_tscaffold_TCC1 0
  (good_good_tscaffold_TCC1-1 nil 3888093983 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_good_tscaffold subtype "sigmatd.A(sigmatd.j)(sigmatd.m)"
    "{x: sigmatd.ent | booleans.OR(sigmatd.fail?(x), booleans.OR(sigmatd.loop?(x), sigmatd.good?(x)))}")))
 (good_good_tscaffold 0
  (good_good_tscaffold-2 "updated with depth bound" 3806872130
   ("" (skeep*)
    (("" (expand "good_tscaffold?")
      (("" (skeep*)
        (("" (inst - i n)
          (("" (expand good_entry?)
            (("" (lift-if + :updates? nil)
              (("" (ground)
                (("1" (case "i = pos!1" "n = nt!1")
                  (("1" (assert) (("1" (grind) nil nil)) nil)
                   ("2" (assert)
                    (("2" (expand "good_fail?")
                      (("2" (lift-if)
                        (("2" (ground)
                          (("1" (grind) nil nil)
                           ("2" (hide -11)
                            (("2" (grind :exclude gfcount) nil nil))
                            nil)
                           ("3" (hide -11)
                            (("3" (grind :exclude gfcount) nil nil))
                            nil)
                           ("4" (hide -10)
                            (("4" (grind :exclude gfcount) nil nil))
                            nil)
                           ("5" (hide -10)
                            (("5" (grind :exclude gfcount) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide -6)
                    (("3" (grind :exclude gfcount) nil nil)) nil))
                  nil)
                 ("2" (hide -5)
                  (("2" (expand "gfcount" +)
                    (("2" (rewrite "scafcount_update")
                      (("2" (hide -6)
                        (("2" (reveal -3)
                          (("2"
                            (lazy-grind :if-match all :exclude
                             scafcount)
                            nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (inst? -)
                  (("3" (grind :exclude gfcount) nil nil)) nil)
                 ("4" (hide -7)
                  (("4" (reveal -2)
                    (("4" (lazy-grind :if-match all :exclude scafcount)
                      nil nil))
                    nil))
                  nil)
                 ("5" (typepred u)
                  (("5" (hide -5 -7)
                    (("5" (typepred "A(i)(n)")
                      (("5" (grind :exclude gfcount) nil nil)) nil))
                    nil))
                  nil)
                 ("6" (hide -6)
                  (("6" (hide -2)
                    (("6" (lift-if)
                      (("6" (ground)
                        (("1" (grind) nil nil) ("2" (grind) nil nil)
                         ("3" (lift-if)
                          (("3" (ground)
                            (("1" (expand good_good?)
                              (("1"
                                (lift-if)
                                (("1"
                                  (ground)
                                  (("1"
                                    (ground)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (grind :exclude max)
                                      nil
                                      nil))
                                    nil)
                                   ("2" (grind :exclude max) nil nil)
                                   ("3" (grind :exclude max) nil nil)
                                   ("4" (grind :exclude max) nil nil)
                                   ("5" (grind :exclude max) nil nil)
                                   ("6" (grind) nil nil)
                                   ("7" (grind) nil nil)
                                   ("8" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind :exclude (max gfcount)) nil
                              nil))
                            nil))
                          nil)
                         ("4" (grind :exclude max) nil nil)
                         ("5" (grind :exclude max) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (hide -5 -7)
                  (("7" (typepred "A(i)(n)")
                    (("7" (expand "gfcount" +)
                      (("7" (rewrite scafcount_update)
                        (("7" (reveal -3)
                          (("7"
                            (lazy-grind :if-match all :exclude
                             scafcount)
                            nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("8" (hide -4 -6)
                  (("8" (reveal -3)
                    (("8" (lazy-grind :if-match all :exclude scafcount)
                      nil nil))
                    nil))
                  nil)
                 ("9" (hide -5) (("9" (grind :exclude max) nil nil))
                  nil)
                 ("10" (hide -6)
                  (("10" (expand gfcount)
                    (("10" (reveal -2)
                      (("10" (hide -5)
                        (("10" (rewrite "scafcount_update")
                          (("10" (lift-if)
                            (("10" (ground)
                              (("10"
                                (lift-if)
                                (("10"
                                  (ground)
                                  (("10"
                                    (expand fine_entry?)
                                    (("10"
                                      (expand "good_fail?")
                                      (("10"
                                        (lift-if)
                                        (("10"
                                          (ground)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (grind
                                               :exclude
                                               scafcount)
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (inst? :copy? t)
                                            (("2"
                                              (inst
                                               -
                                               "span(A(pos!1)(e1(G(nt!1)))) + pos!1"
                                               "e2(G(nt!1))")
                                              (("2"
                                                (grind
                                                 :exclude
                                                 scafcount)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (inst? :copy? t)
                                            (("3"
                                              (inst
                                               -
                                               "pos!1"
                                               "e2(G(nt!1))")
                                              (("3"
                                                (grind
                                                 :exclude
                                                 scafcount)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (inst?)
                                            (("4"
                                              (grind
                                               :exclude
                                               scafcount)
                                              nil
                                              nil))
                                            nil)
                                           ("5"
                                            (inst?)
                                            (("5" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("11" (inst?)
                  (("11" (grind :exclude (max gfcount)) nil nil)) nil)
                 ("12" (hide -4 -6)
                  (("12" (expand gfcount)
                    (("12" (rewrite scafcount_update)
                      (("12" (reveal -3)
                        (("12"
                          (lazy-grind :if-match all :exclude
                           (max scafcount))
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("13" (typepred "A(i)(n)")
                  (("13" (typepred "u")
                    (("13" (hide -5 -7)
                      (("13" (grind :exclude (max gfcount)) nil nil))
                      nil))
                    nil))
                  nil)
                 ("14" (hide -5)
                  (("14" (typepred "A(i)(n)")
                    (("14" (typepred "u")
                      (("14" (grind :exclude (max gfcount)) nil nil))
                      nil))
                    nil))
                  nil)
                 ("15" (hide -6)
                  (("15" (reveal -2)
                    (("15" (expand gfcount)
                      (("15" (rewrite scafcount_update)
                        (("15" (lift-if)
                          (("15" (ground)
                            (("1" (lift-if)
                              (("1"
                                (ground)
                                (("1"
                                  (hide -15)
                                  (("1"
                                    (grind :exclude (max scafcount))
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lift-if)
                              (("2"
                                (ground)
                                (("2"
                                  (hide -15)
                                  (("2"
                                    (grind :exclude (max scafcount))
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (lift-if)
                              (("3"
                                (ground)
                                (("3"
                                  (hide -16)
                                  (("3"
                                    (grind :exclude (max scafcount))
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (lift-if)
                              (("4"
                                (ground)
                                (("4"
                                  (expand fine_entry?)
                                  (("4"
                                    (ground)
                                    (("4"
                                      (expand "good_good?")
                                      (("4"
                                        (lift-if)
                                        (("4"
                                          (ground)
                                          (("1"
                                            (inst? :copy? t)
                                            (("1"
                                              (inst
                                               -
                                               "span(A(pos!1)(e1(G(nt!1)))) + pos!1"
                                               "e2(G(nt!1))")
                                              (("1"
                                                (grind
                                                 :exclude
                                                 scafcount)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst?)
                                            (("2"
                                              (grind
                                               :exclude
                                               scafcount)
                                              nil
                                              nil))
                                            nil)
                                           ("3"
                                            (inst? :copy? t)
                                            (("3"
                                              (inst
                                               -
                                               "pos!1"
                                               "e2(G(nt!1))")
                                              (("3"
                                                (grind
                                                 :exclude
                                                 scafcount)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (inst?)
                                            (("4"
                                              (grind
                                               :exclude
                                               scafcount)
                                              nil
                                              nil))
                                            nil)
                                           ("5"
                                            (inst?)
                                            (("5"
                                              (grind
                                               :exclude
                                               scafcount)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("16" (expand "gfcount" +)
                  (("16" (rewrite scafcount_update)
                    (("16" (hide -5)
                      (("16" (reveal -2)
                        (("16"
                          (lazy-grind :if-match all :exclude
                           (max scafcount))
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((good_tscaffold? const-decl "bool" sigmatd nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (scafcount_update formula-decl nil sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (e shared-adt-accessor-decl
     "[{x: peg | and?(x) OR not?(x)} -> non_terminal]" sigmatd nil)
    (not? adt-recognizer-decl "[peg -> boolean]" sigmatd nil)
    (and? adt-recognizer-decl "[peg -> boolean]" sigmatd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (span adt-accessor-decl "[(good?) -> uint32]" sigmatd nil)
    (e2 shared-adt-accessor-decl
     "[{x: peg | concat?(x) OR or?(x)} -> non_terminal]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (good_fail? const-decl "bool" sigmatd nil) nil
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (/= const-decl "boolean" notequal nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (e1 shared-adt-accessor-decl
     "[{x: peg | concat?(x) OR or?(x)} -> non_terminal]" sigmatd nil)
    (or? adt-recognizer-decl "[peg -> boolean]" sigmatd nil)
    (concat? adt-recognizer-decl "[peg -> boolean]" sigmatd nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (peg type-decl nil sigmatd nil)
    (good_good? const-decl "bool" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak)
  (good_good_tscaffold-1 nil 3804994419
   ("" (skeep*)
    (("" (expand "good_tscaffold?")
      (("" (skeep*)
        (("" (inst - i n)
          (("" (expand good_entry?)
            (("" (lift-if + :updates? nil)
              (("" (ground)
                (("1" (case "i = pos(entry)" "n = nt(entry)")
                  (("1" (assert) (("1" (grind) nil nil)) nil)
                   ("2" (assert)
                    (("2" (hide -7 -8) (("2" (grind) nil nil)) nil))
                    nil)
                   ("3" (hide -6 -7) (("3" (grind) nil nil)) nil))
                  nil)
                 ("2" (case "i = pos(entry)" "n = nt(entry)")
                  (("1" (assert) (("1" (grind) nil nil)) nil)
                   ("2" (assert)
                    (("2" (forward-chain -) (("2" (grind) nil nil))
                      nil))
                    nil)
                   ("3" (assert)
                    (("3" (forward-chain -) (("3" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("3" (grind) nil nil) ("4" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (state_TCC1 0
  (state_TCC1-1 nil 3804904050 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (state subtype "sigmatd.stack" "(sigmatd.push?)")))
 (state_TCC2 0
  (state_TCC1-1 nil 3804730988 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatd nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (state subtype "sigmatd.pos(sigmatd.stack)"
    "naturalnumbers.upto(sigmatd.len)")))
 (state_TCC3 0
  (state_TCC2-1 nil 3804730988 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatd nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (state subtype "sigmatd.nt(sigmatd.stack)" "non_terminal")))
 (incdepth_TCC1 0
  (incdepth_TCC1-1 nil 3888115312 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR loop?(x) OR good?(x)} -> uint64]" sigmatd
     nil))
   nil
   (incdepth subtype "sigmatd.u"
    "{x: sigmatd.ent | booleans.OR(sigmatd.fail?(x), booleans.OR(sigmatd.loop?(x), sigmatd.good?(x)))}")))
 (incdepth_TCC2 0
  (incdepth_TCC2-1 nil 3888115312 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR loop?(x) OR good?(x)} -> uint64]" sigmatd
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (incdepth subtype "(number_fields.+)(1, sigmatd.dep(sigmatd.u))"
    "uint64")))
 (step_TCC1 0
  (step_TCC66-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (step subtype "sigmatd.stack" "(sigmatd.push?)")))
 (step_TCC2 0
  (step_TCC1-1 nil 3804547853 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatd nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (step subtype "sigmatd.cur" "non_terminal")))
 (step_TCC3 0
  (step_TCC10-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatd nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.pos" "naturalnumbers.upto(sigmatd.len)")))
 (step_TCC4 0
  (step_TCC4-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatd nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.good(0, 0)"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC5 0
  (step_TCC5-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (skeep*)
                (("3" (typepred lflag)
                  (("3" (ground)
                    (("1" (inst?) nil nil)
                     ("2" (hide 2) (("2" (grind) nil nil)) nil)
                     ("3" (inst?) nil nil) ("4" (grind) nil nil)
                     ("5" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good? const-decl "bool" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (sigma def-decl "nat" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (len skolem-const-decl "index" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" sigmatd
     nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good(0, 0)]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC6 0
  (step_TCC1-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3"
                  (use sigma_dec
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" pos!1 "j" "len"))
                  (("1" (ground)
                    (("1" (lift-if)
                      (("1" (ground)
                        (("1" (typepred pos (stack))
                          (("1" (grind) nil nil)) nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                               count(num_non_terminals)(push?)
                                    (St`scaf WITH [(pos!1)(cur) := good(0, 0)](i))) = ((LAMBDA (i: upto(len)):
                               count(num_non_terminals)(push?)(St`scaf(i)))
                              WITH [(pos!1)
                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                          1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                          push?(St`scaf(x!1) WITH [(cur) := good(0, 0)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("3" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand count)
                                  (("2"
                                    (lemma
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("2"
                                      (inst?)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand nonempty?)
                                          (("1"
                                            (expand empty?)
                                            (("1"
                                              (inst - cur)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite count_TCC1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -1 3)
                            (("3" (expand count)
                              (("3"
                                (lemma
                                 "nonempty_card[below(num_non_terminals)]")
                                (("3"
                                  (inst?)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (rewrite count_TCC1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (lemma
                         "nonempty_card[below(num_non_terminals)]")
                        (("2" (inst?)
                          (("1" (grind) nil nil)
                           ("2" (rewrite count_TCC1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (sigma_dec formula-decl nil sigmatd nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" sigmatd
     nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (len skolem-const-decl "index" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (x!1 skolem-const-decl "upto(len)" sigmatd nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good(0, 0)]))")))
 (step_TCC7 0
  (step_TCC2-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2" (inst - G "depth - 1" len scaf stack rest "good(0, 0)")
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2"
                    (inst - G "depth - 1" len scaf stack rest
                     "good(0, 0)")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (len skolem-const-decl "index" sigmatd nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" sigmatd
     nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (mem_stack? def-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good(0, 0)]))")))
 (step_TCC8 0
  (step_TCC83-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good(0, 0)], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest), (number_fields.-)(sigmatd.depth, 1))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good(0, 0)](i)(sigmatd.n))) ENDIF}")))
 (step_TCC9 0
  (step_TCC8-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "sigmatd.fail(0)"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC10 0
  (step_TCC9-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil) ("4" (grind) nil nil)
                     ("5" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_good? const-decl "bool" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (sigma def-decl "nat" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (len skolem-const-decl "index" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail(0)]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC11 0
  (step_TCC6-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3"
                  (use sigma_dec
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" pos!1 "j" "len"))
                  (("1" (ground)
                    (("1" (lift-if)
                      (("1" (ground)
                        (("1" (typepred pos (stack))
                          (("1" (grind) nil nil)) nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                       count(num_non_terminals)(push?)
                                            (St`scaf WITH [(pos!1)(cur) := fail(0)](i))) = ((LAMBDA (i: upto(len)):
                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                      WITH [(pos!1)
                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                  1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                        push?(St`scaf(x!1) WITH [(cur) := fail(0)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("3" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand count)
                                  (("2"
                                    (lemma
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("2"
                                      (inst?)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand nonempty?)
                                          (("1"
                                            (expand empty?)
                                            (("1"
                                              (inst - cur)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite count_TCC1)
                                        (("2"
                                          (hide 2)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide -1 3)
                                (("3"
                                  (expand count)
                                  (("3"
                                    (lemma
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("3"
                                      (inst?)
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (rewrite count_TCC1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand count)
                            (("3"
                              (lemma
                               "nonempty_card[below(num_non_terminals)]")
                              (("3"
                                (inst?)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (rewrite count_TCC1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "count")
                      (("2"
                        (lemma
                         "nonempty_card[below(num_non_terminals)]")
                        (("2" (inst?)
                          (("1" (grind) nil nil)
                           ("2" (rewrite count_TCC1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (sigma_dec formula-decl nil sigmatd nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatd nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (len skolem-const-decl "index" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (x!1 skolem-const-decl "upto(len)" sigmatd nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail(0)]))")))
 (step_TCC12 0
  (step_TCC7-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2" (inst - G "depth - 1" len scaf stack rest "fail(0)")
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)
           ("3" (typepred stack)
            (("3" (expand fine_stack? -)
              (("3" (ground)
                (("1" (grind) nil nil)
                 ("2" (lemma fine_mem_stack)
                  (("2" (ground)
                    (("2" (expand good_stack? -)
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2"
                    (inst - G "depth - 1" len scaf stack rest
                     "fail(0)")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (len skolem-const-decl "index" sigmatd nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatd nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (mem_stack? def-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail(0)]))")))
 (step_TCC13 0
  (step_TCC84-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail(0)], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest), (number_fields.-)(sigmatd.depth, 1))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail(0)](i)(sigmatd.n))) ENDIF}")))
 (step_TCC14 0
  (step_TCC16-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.pos" "naturalnumbers.below(sigmatd.len)")))
 (step_TCC15 0
  (step_TCC14-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (good_good? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.v"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC16 0
  (step_TCC15-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil) ("4" (grind) nil nil)
                     ("5" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good? const-decl "bool" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (sigma def-decl "nat" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (mem_stack? def-decl "bool" sigmatd nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (len skolem-const-decl "index" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (v skolem-const-decl "ent" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.v]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC17 0
  (step_TCC12-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3"
                  (use sigma_dec
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" pos!1 "j" "len"))
                  (("1" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (grind) nil nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                                               count(num_non_terminals)(push?)
                                                                    (St`scaf WITH [(pos!1)(cur) := v](i))) = ((LAMBDA (i: upto(len)):
                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                              WITH [(pos!1)
                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                          1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                                                                  push?(St`scaf(x!1) WITH [(cur) := v](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if +)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("3" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand count)
                                  (("2"
                                    (lemma
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("2"
                                      (inst?)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand nonempty?)
                                          (("1"
                                            (expand empty?)
                                            (("1"
                                              (inst - cur)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite count_TCC1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -1 3)
                            (("3" (expand count)
                              (("3"
                                (lemma
                                 "nonempty_card[below(num_non_terminals)]")
                                (("3"
                                  (inst?)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (rewrite count_TCC1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (lemma
                         "nonempty_card[below(num_non_terminals)]")
                        (("2" (inst?)
                          (("1" (grind) nil nil)
                           ("2" (rewrite count_TCC1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (sigma_dec formula-decl nil sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (v skolem-const-decl "ent" sigmatd nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (len skolem-const-decl "index" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (x!1 skolem-const-decl "upto(len)" sigmatd nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.v]))")))
 (step_TCC18 0
  (step_TCC13-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2" (inst - G "depth - 1" len scaf stack rest v)
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (typepred "stack") (("2" (grind) nil nil)) nil)) nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2" (inst - G "depth - 1" len scaf stack rest "v")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (len skolem-const-decl "index" sigmatd nil)
    (v skolem-const-decl "ent" sigmatd nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (mem_stack? def-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.v]))")))
 (step_TCC19 0
  (step_TCC89-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sigmatd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.v], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest), (number_fields.-)(sigmatd.depth, 1))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.v](i)(sigmatd.n))) ENDIF}")))
 (step_TCC20 0
  (step_TCC44-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.pos" "naturalnumbers.below(sigmatd.len)")))
 (step_TCC21 0
  (step_TCC20-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (good_good? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (/= const-decl "boolean" notequal nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.v"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC22 0
  (step_TCC21-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil) ("4" (grind) nil nil)
                     ("5" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good? const-decl "bool" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (sigma def-decl "nat" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (mem_stack? def-decl "bool" sigmatd nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (len skolem-const-decl "index" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (v skolem-const-decl "ent" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.v]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC23 0
  (step_TCC18-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3"
                  (use sigma_dec
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" pos!1 "j" "len"))
                  (("1" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (grind) nil nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                                               count(num_non_terminals)(push?)
                                                                    (St`scaf WITH [(pos!1)(cur) := v](i))) = ((LAMBDA (i: upto(len)):
                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                              WITH [(pos!1)
                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                          1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                                                                  push?(St`scaf(x!1) WITH [(cur) := v](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if +)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (hide -3 -4 -6)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("3" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand count)
                                  (("2"
                                    (lemma
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("2"
                                      (inst?)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand nonempty?)
                                          (("1"
                                            (expand empty?)
                                            (("1"
                                              (inst - cur)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite count_TCC1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -1 3)
                            (("3" (expand count)
                              (("3"
                                (lemma
                                 "nonempty_card[below(num_non_terminals)]")
                                (("3"
                                  (inst?)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (rewrite count_TCC1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (lemma
                         "nonempty_card[below(num_non_terminals)]")
                        (("2" (inst?)
                          (("1" (grind) nil nil)
                           ("2" (rewrite count_TCC1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (/= const-decl "boolean" notequal nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (sigma_dec formula-decl nil sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (v skolem-const-decl "ent" sigmatd nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (len skolem-const-decl "index" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (member const-decl "bool" sets nil)
    (x!1 skolem-const-decl "upto(len)" sigmatd nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.v]))")))
 (step_TCC24 0
  (step_TCC19-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2" (inst - G "depth - 1" len scaf stack rest v)
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (typepred "stack") (("2" (grind) nil nil)) nil)) nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2" (inst - G "depth - 1" len scaf stack rest "v")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (/= const-decl "boolean" notequal nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (len skolem-const-decl "index" sigmatd nil)
    (v skolem-const-decl "ent" sigmatd nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (mem_stack? def-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.v]))")))
 (step_TCC25 0
  (step_TCC90-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (expand loop_ready?) (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sigmatd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.v], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest), (number_fields.-)(sigmatd.depth, 1))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.v](i)(sigmatd.n))) ENDIF}")))
 (step_TCC26 0
  (step_TCC42-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - pos!1 n1)
              (("" (ground)
                (("1" (expand gfcount)
                  (("1" (use "sigma_max")
                    (("1" (ground)
                      (("1"
                        (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                        (("1" (assert)
                          (("1"
                            (name-replace lnn
                             "len * num_non_terminals + num_non_terminals")
                            (("1" (assert)
                              (("1"
                                (case-replace
                                 "dep(scaf(pos!1)(n1)) = d1")
                                (("1" (assert) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (case "len * num_non_terminals <= exp2(46)")
                            (("1" (assert) (("1" (grind) nil nil)) nil)
                             ("2"
                              (use "lt_times_lt_pos1" :subst
                                   (px
                                    len
                                    nnz
                                    num_non_terminals
                                    y
                                    "exp2(32)"
                                    w
                                    "exp2(8)"))
                              (("1"
                                (hide-all-but (-1 1))
                                (("1"
                                  (grind)
                                  (("1"
                                    (typepred len)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR loop?(x) OR good?(x)} -> uint64]" sigmatd
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (sigma_max formula-decl nil sigmatd nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (step subtype "(number_fields.+)(sigmatd.d1, 1)" "uint64")))
 (step_TCC27 0
  (step_TCC43-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "sigmatd.fail((number_fields.+)(sigmatd.d1, 1))"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC28 0
  (step_TCC55-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil) ("4" (grind) nil nil)
                     ("5" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_good? const-decl "bool" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (sigma def-decl "nat" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (len skolem-const-decl "index" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (d1 skolem-const-decl "uint64" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(sigmatd.d1, 1))]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC29 0
  (step_TCC22-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3"
                  (use sigma_dec
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" pos!1 "j" "len"))
                  (("1" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (grind) nil nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                                                       count(num_non_terminals)(push?)
                                                                            (St`scaf WITH [(pos!1)(cur) := fail(1 + d1)](i))) = ((LAMBDA (i: upto(len)):
                                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                                      WITH [(pos!1)
                                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                  1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                                                                                push?(St`scaf(x!1) WITH [(cur) := fail(1 + d1)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if +)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (hide -3 -4 -6)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil)
                                             ("3"
                                              (skeep*)
                                              (("3"
                                                (use step_TCC26)
                                                (("3"
                                                  (ground)
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide -6 2)
                                          (("3" (grind) nil nil))
                                          nil)
                                         ("4"
                                          (hide 2)
                                          (("4"
                                            (skeep*)
                                            (("4"
                                              (use step_TCC26)
                                              (("4"
                                                (ground)
                                                (("4"
                                                  (inst?)
                                                  (("4"
                                                    (inst?)
                                                    (("4"
                                                      (inst?)
                                                      (("4"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand count +)
                                  (("2"
                                    (use
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (expand nonempty?)
                                        (("1"
                                          (expand empty?)
                                          (("1"
                                            (inst - "nt(stack)")
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (typepred "nt(stack)")
                                                (("2"
                                                  (expand
                                                   "good_push_entry?")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "count_TCC1")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (hide 2)
                                (("4"
                                  (use step_TCC26)
                                  (("4"
                                    (ground)
                                    (("4"
                                      (inst?)
                                      (("4"
                                        (inst?)
                                        (("4"
                                          (inst?)
                                          (("4" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -1)
                            (("3" (expand count)
                              (("3"
                                (use
                                 "nonempty_card[below(num_non_terminals)]")
                                (("1"
                                  (ground)
                                  (("1"
                                    (hide -5 5)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "count_TCC1")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide -1 3) (("4" (grind) nil nil))
                            nil)
                           ("5" (use step_TCC26)
                            (("5" (ground)
                              (("5"
                                (inst?)
                                (("5"
                                  (inst?)
                                  (("5"
                                    (inst?)
                                    (("5" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (use "nonempty_card[below(num_non_terminals)]")
                        (("1" (grind) nil nil)
                         ("2" (rewrite count_TCC1)
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (sigma_dec formula-decl nil sigmatd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatd nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (len skolem-const-decl "index" sigmatd nil)
    (d1 skolem-const-decl "uint64" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (step_TCC26 subtype-tcc nil sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (x!1 skolem-const-decl "upto(len)" sigmatd nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatd nil)
    (nonempty? const-decl "bool" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(sigmatd.d1, 1))]))")))
 (step_TCC30 0
  (step_TCC23-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2" (inst - G "depth - 1" len scaf stack rest "fail(1 + d1)")
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (expand nice_entry?) (("2" (propax) nil nil)) nil))
            nil)
           ("3" (typepred "stack") (("3" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2"
                    (inst - G "depth - 1" len scaf stack rest
                     "fail(1 + d1)")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (len skolem-const-decl "index" sigmatd nil)
    (d1 skolem-const-decl "uint64" sigmatd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatd nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (mem_stack? def-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(sigmatd.d1, 1))]))")))
 (step_TCC31 0
  (step_TCC95-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(1, sigmatd.d1))], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest), (number_fields.-)(sigmatd.depth, 1))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(1, sigmatd.d1))](i)(sigmatd.n))) ENDIF}")))
 (step_TCC32 0
  (step_TCC30-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "St`scaf(pos!1)(n1)") (("" (grind) nil nil)) nil))
    nil)
   ((state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (uint32 type-eq-decl nil integertypes nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.+)(sigmatd.pos, sigmatd.sp)"
         "naturalnumbers.upto(sigmatd.len)")))
 (step_TCC33 0
  (step_TCC75-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst-cp - pos!1 n1)
              (("" (inst - pos!1+sp n2)
                (("" (ground)
                  (("1" (expand gfcount)
                    (("1" (use "sigma_max")
                      (("1" (ground)
                        (("1"
                          (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                          (("1" (assert)
                            (("1"
                              (name-replace lnn
                               "len * num_non_terminals + num_non_terminals")
                              (("1"
                                (assert)
                                (("1"
                                  (case-replace
                                   "dep(scaf(pos!1 + sp)(n2)) = d2")
                                  (("1"
                                    (case-replace
                                     "dep(scaf(pos!1)(n1)) = d1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand max)
                                        (("1"
                                          (lift-if)
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (case "len * num_non_terminals <= exp2(46)")
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (use
                                 "lt_times_lt_pos1"
                                 :subst
                                 (px
                                  len
                                  nnz
                                  num_non_terminals
                                  y
                                  "exp2(32)"
                                  w
                                  "exp2(8)"))
                                (("1"
                                  (hide-all-but (-1 1))
                                  (("1"
                                    (grind)
                                    (("1"
                                      (typepred len)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil) ("3" (grind) nil nil)
                   ("4" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (uint32 type-eq-decl nil integertypes nil)
    (sigma_max formula-decl nil sigmatd nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR loop?(x) OR good?(x)} -> uint64]" sigmatd
     nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "(number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2))"
         "uint64")))
 (step_TCC34 0
  (step_TCC56-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (expand nice_entry?) (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.fail((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2)))"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC35 0
  (step_TCC63-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil) ("4" (grind) nil nil)
                     ("5" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_good? const-decl "bool" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (sigma def-decl "nat" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mem_stack? def-decl "bool" sigmatd nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (len skolem-const-decl "index" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (d1 skolem-const-decl "uint64" sigmatd nil)
    (d2 skolem-const-decl "uint64" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2)))]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC36 0
  (step_TCC31-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (rewrite scafcount_update)
                (("1" (grind :exclude scafcount) nil nil)
                 ("2" (hide 2) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatd nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (scafcount_update formula-decl nil sigmatd nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2)))]))")))
 (step_TCC37 0
  (step_TCC32-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2"
          (inst - G "depth - 1" len scaf stack rest
           "fail(1 + max(d1, d2))")
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (expand nice_entry?) (("2" (propax) nil nil)) nil))
            nil)
           ("3" (typepred "stack") (("3" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2"
                    (inst - G "depth - 1" len scaf stack rest
                     "fail(1 + max(d1, d2))")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (len skolem-const-decl "index" sigmatd nil)
    (d2 skolem-const-decl "uint64" sigmatd nil)
    (d1 skolem-const-decl "uint64" sigmatd nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatd nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (mem_stack? def-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2)))]))")))
 (step_TCC38 0
  (step_TCC117-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2)))], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest), (number_fields.-)(sigmatd.depth, 1))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2)))](i)(sigmatd.n))) ENDIF}")))
 (step_TCC39 0
  (step_TCC64-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst-cp - pos!1 n1)
              (("" (inst - pos!1+sp n2)
                (("" (ground)
                  (("1" (expand gfcount)
                    (("1" (use "sigma_max")
                      (("1" (ground)
                        (("1"
                          (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                          (("1" (assert)
                            (("1"
                              (name-replace lnn
                               "len * num_non_terminals + num_non_terminals")
                              (("1"
                                (assert)
                                (("1"
                                  (case-replace
                                   "dep(scaf(pos!1 + sp)(n2)) = d2")
                                  (("1"
                                    (case-replace
                                     "dep(scaf(pos!1)(n1)) = d1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand max)
                                        (("1"
                                          (lift-if)
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (case "len * num_non_terminals <= exp2(46)")
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (use
                                 "lt_times_lt_pos1"
                                 :subst
                                 (px
                                  len
                                  nnz
                                  num_non_terminals
                                  y
                                  "exp2(32)"
                                  w
                                  "exp2(8)"))
                                (("1"
                                  (hide-all-but (-1 1))
                                  (("1"
                                    (grind)
                                    (("1"
                                      (typepred len)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil) ("3" (grind) nil nil)
                   ("4" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (uint32 type-eq-decl nil integertypes nil)
    (sigma_max formula-decl nil sigmatd nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR loop?(x) OR good?(x)} -> uint64]" sigmatd
     nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (good_good? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "(number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2))"
         "uint64")))
 (step_TCC40 0
  (step_TCC41-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "St`scaf(pos!1)(n1)")
      (("" (typepred "St`scaf(pos!1 + sp)(n2)")
        (("" (typepred len) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (uint32 type-eq-decl nil integertypes nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.+)(sigmatd.sp, sigmatd.sp2)"
         "uint32")))
 (step_TCC41 0
  (step_TCC76-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "St`scaf(pos!1)(n1)")
      (("" (typepred "St`scaf(pos!1 + sp)(n2)") (("" (grind) nil nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (uint32 type-eq-decl nil integertypes nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.good((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2)), (number_fields.+)(sigmatd.sp, sigmatd.sp2))"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC42 0
  (step_TCC83-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?)
                    (("2" (ground)
                      (("1" (typepred "St`scaf(pos!1 + sp)(n2)")
                        (("1" (grind) nil nil)) nil)
                       ("2" (expand good_good?)
                        (("2" (grind :exclude (max gfcount)) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (typepred lflag)
                  (("3" (skeep*)
                    (("3" (ground)
                      (("1" (inst?) nil nil) ("2" (grind) nil nil)
                       ("3" (inst?) nil nil) ("4" (grind) nil nil)
                       ("5" (inst?) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "St`scaf(pos!1 + sp)(n2)")
                (("2" (typepred "St`scaf(pos!1)(n1)")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (good_good? const-decl "bool" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (sigma def-decl "nat" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (len skolem-const-decl "index" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" sigmatd
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (d1 skolem-const-decl "uint64" sigmatd nil)
    (d2 skolem-const-decl "uint64" sigmatd nil)
    (sp2 skolem-const-decl "uint32" sigmatd nil)
    (sp skolem-const-decl "uint32" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2)), (number_fields.+)(sigmatd.sp, sigmatd.sp2))]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC43 0
  (step_TCC39-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3"
                  (use sigma_dec
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" pos!1 "j" "len"))
                  (("1" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (grind) nil nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)
                                                                                    (St`scaf WITH [(pos!1)(cur) := good(1 + max(d1, d2), sp2 + sp)](i))) = ((LAMBDA (i: upto(len)):
                                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                                              WITH [(pos!1)
                                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                          1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                                                                                              push?(St`scaf(x!1) WITH [(cur) := good(1 + max(d1, d2), sp2 + sp)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if +)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (typepred
                                                 "St`scaf(pos!1)(n1)")
                                                (("2"
                                                  (typepred
                                                   "St`scaf(pos!1 + sp)(n2)")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skeep*)
                                              (("3"
                                                (use step_TCC40)
                                                (("3"
                                                  (ground)
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (hide -6 2)
                                              (("4"
                                                (typepred
                                                 "St`scaf(pos!1)(n1)")
                                                (("4"
                                                  (typepred
                                                   "St`scaf(pos!1 + sp)(n2)")
                                                  (("4"
                                                    (skeep*)
                                                    (("4"
                                                      (use step_TCC39)
                                                      (("4"
                                                        (ground)
                                                        (("4"
                                                          (inst?)
                                                          (("4"
                                                            (inst?)
                                                            (("4"
                                                              (inst?)
                                                              (("4"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skeep*)
                                          (("3"
                                            (typepred
                                             "St`scaf(pos!1)(n1)")
                                            (("3"
                                              (typepred
                                               "St`scaf(pos!1 + sp)(n2)")
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (skeep*)
                                          (("4"
                                            (use step_TCC40)
                                            (("4"
                                              (ground)
                                              (("4"
                                                (inst?)
                                                (("4"
                                                  (inst?)
                                                  (("4"
                                                    (inst?)
                                                    (("4"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("5"
                                          (skeep*)
                                          (("5"
                                            (use step_TCC39)
                                            (("5"
                                              (ground)
                                              (("5"
                                                (inst?)
                                                (("5"
                                                  (inst?)
                                                  (("5"
                                                    (inst?)
                                                    (("5"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand count)
                                (("2"
                                  (use
                                   "nonempty_card[below(num_non_terminals)]")
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (rewrite count_TCC1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3"
                                  (typepred "St`scaf(pos!1)(n1)")
                                  (("3"
                                    (typepred
                                     "St`scaf(pos!1 + sp)(n2)")
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (hide 2)
                                (("4"
                                  (use step_TCC40)
                                  (("4"
                                    (ground)
                                    (("4"
                                      (inst?)
                                      (("4"
                                        (inst?)
                                        (("4"
                                          (inst?)
                                          (("4" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("5"
                                (hide 2)
                                (("5"
                                  (use step_TCC39)
                                  (("5"
                                    (ground)
                                    (("5"
                                      (inst?)
                                      (("5"
                                        (inst?)
                                        (("5"
                                          (inst?)
                                          (("5" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -1 3)
                            (("3" (expand count)
                              (("3"
                                (use
                                 "nonempty_card[below(num_non_terminals)]")
                                (("1" (grind) nil nil)
                                 ("2"
                                  (rewrite count_TCC1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide -1 3)
                            (("4" (typepred "St`scaf(pos!1)(n1)")
                              (("4"
                                (typepred "St`scaf(pos!1 + sp)(n2)")
                                (("4" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("5" (hide -1 3)
                            (("5" (use step_TCC40)
                              (("5"
                                (ground)
                                (("5"
                                  (inst?)
                                  (("5"
                                    (inst?)
                                    (("5"
                                      (inst?)
                                      (("5" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("6" (hide -1 3)
                            (("6" (use step_TCC39)
                              (("6"
                                (ground)
                                (("6"
                                  (inst?)
                                  (("6"
                                    (inst?)
                                    (("6"
                                      (inst?)
                                      (("6" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (expand count)
                        (("2"
                          (use "nonempty_card[below(num_non_terminals)]")
                          (("1" (grind) nil nil)
                           ("2" (rewrite count_TCC1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (sigma_dec formula-decl nil sigmatd nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" sigmatd
     nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (len skolem-const-decl "index" sigmatd nil)
    (sp skolem-const-decl "uint32" sigmatd nil)
    (sp2 skolem-const-decl "uint32" sigmatd nil)
    (d2 skolem-const-decl "uint64" sigmatd nil)
    (d1 skolem-const-decl "uint64" sigmatd nil)
    (step_TCC39 subtype-tcc nil sigmatd nil)
    (step_TCC40 subtype-tcc nil sigmatd nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (x!1 skolem-const-decl "upto(len)" sigmatd nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2)), (number_fields.+)(sigmatd.sp, sigmatd.sp2))]))")))
 (step_TCC44 0
  (step_TCC40-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2"
          (inst - G "depth - 1" len scaf stack rest
           "good(1 + max(d1, d2), sp2 + sp)")
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (typepred "stack")
              (("2" (typepred "St`scaf(pos!1)(n1)")
                (("2" (typepred "St`scaf(pos!1 + sp)(n2)")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (use step_TCC43)
            (("3" (ground)
              (("3" (inst?)
                (("3" (inst?)
                  (("3" (inst?) (("3" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2"
                    (inst - G "depth - 1" len scaf stack rest
                     "good(1 + max(d1, d2), sp2 + sp)")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (typepred "St`scaf(pos!1)(n1)")
                      (("2" (typepred "St`scaf(pos!1 + sp)(n2)")
                        (("2" (grind) nil nil)) nil))
                      nil)
                     ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (len skolem-const-decl "index" sigmatd nil)
    (sp skolem-const-decl "uint32" sigmatd nil)
    (sp2 skolem-const-decl "uint32" sigmatd nil)
    (d2 skolem-const-decl "uint64" sigmatd nil)
    (d1 skolem-const-decl "uint64" sigmatd nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" sigmatd
     nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (step_TCC43 subtype-tcc nil sigmatd nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (mem_stack? def-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2)), (number_fields.+)(sigmatd.sp, sigmatd.sp2))]))")))
 (step_TCC45 0
  (step_TCC81-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2)), (number_fields.+)(sigmatd.sp2, sigmatd.sp))], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest), (number_fields.-)(sigmatd.depth, 1))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2)), (number_fields.+)(sigmatd.sp2, sigmatd.sp))](i)(sigmatd.n))) ENDIF}")))
 (step_TCC46 0
  (step_TCC45-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatd nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil))
   nil
   (step subtype "sigmatd.St`stack"
         "(sigmatd.nice_entry?(sigmatd.len, (number_fields.+)(sigmatd.pos, sigmatd.sp)))")))
 (step_TCC47 0
  (step_TCC46-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?)
                    (("2" (typepred "St`scaf(pos!1 + sp)(n2)")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3)
                          (("1" (ground)
                            (("1" (grind) nil nil)
                             ("2" (hide -5) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (hide -1) (("2" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (hide -2)
                (("2" (typepred stack) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (sp skolem-const-decl "uint32" sigmatd nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (len skolem-const-decl "index" sigmatd nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [((number_fields.+)(sigmatd.pos, sigmatd.sp))(sigmatd.n2) := sigmatd.St`stack]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC48 0
  (step_TCC49-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred depth)
        (("1" (expand good_depth?)
          (("1" (expand pushcount)
            (("1" (use scafcount_max)
              (("1" (assert)
                (("1" (use exp2_lt :subst (n 41 m 64))
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "good_depth?")
        (("2" (expand pushcount)
          (("2" (rewrite scafcount_update)
            (("1" (lift-if)
              (("1" (ground)
                (("1" (typepred "St`scaf(pos!1)(n1)")
                  (("1" (grind) nil nil)) nil)
                 ("2" (typepred depth)
                  (("2" (grind :exclude (max scafcount)) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((scafcount_max formula-decl nil sigmatd nil)
    (exp2_lt formula-decl nil exp2 nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint64 type-eq-decl nil integertypes nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (scafcount_update formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.+)(sigmatd.St`depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [((number_fields.+)(sigmatd.pos, sigmatd.sp))(sigmatd.n2) := sigmatd.St`stack]))")))
 (step_TCC49 0
  (step_TCC50-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "St`scaf(pos!1)(n1)")
      (("" (typepred "St`scaf(pos!1 + sp)(n2)")
        (("" (typepred len) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (uint32 type-eq-decl nil integertypes nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.+)(sigmatd.pos, sigmatd.sp)"
         "uint32")))
 (step_TCC50 0
  (step_TCC65-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred "St`scaf(pos!1)(n1)") (("1" (grind) nil nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2" (expand good_stack? +)
          (("2" (ground)
            (("1" (hide -1) (("1" (grind) nil nil)) nil)
             ("2"
              (inst - G "depth" len scaf "push(pos!1 + sp, n2)" "stack"
               stack)
              (("1" (ground)
                (("1" (hide 2)
                  (("1" (typepred "St`scaf(pos!1)(n1)")
                    (("1" (grind) nil nil)) nil))
                  nil)
                 ("2" (use mem_stack_push) (("2" (ground) nil nil))
                  nil)
                 ("3" (hide 2) (("3" (grind) nil nil)) nil))
                nil)
               ("2" (hide 2)
                (("2" (typepred stack) (("2" (grind) nil nil)) nil))
                nil)
               ("3" (hide 2)
                (("3" (typepred "St`scaf(pos!1)(n1)")
                  (("3" (grind) nil nil)) nil))
                nil)
               ("4" (typepred "St`scaf(pos!1)(n1)")
                (("4" (typepred len) (("4" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand fine_stack? +)
        (("3" (ground)
          (("1" (lemma mem_mem_stack)
            (("1" (inst - G depth len scaf _ _ _ _)
              (("1"
                (inst - "push(pos!1 + sp, n2)" "push(pos!1 + sp, n2)"
                 stack stack)
                (("1" (ground)
                  (("1" (use mem_stack_push) (("1" (ground) nil nil))
                    nil)
                   ("2" (typepred "St`scaf(pos!1)(n1)")
                    (("2" (grind) nil nil)) nil)
                   ("3" (typepred "St`scaf(pos!1)(n1)")
                    (("3" (grind) nil nil)) nil)
                   ("4" (use mem_stack_push) (("4" (ground) nil nil))
                    nil)
                   ("5" (typepred "St`scaf(pos!1)(n1)")
                    (("5" (grind) nil nil)) nil))
                  nil)
                 ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                 ("3" (typepred "St`scaf(pos!1)(n1)")
                  (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2"
            (use fine_mem_stack :subst
                 (len len entry "push(pos!1 + sp, n2)"))
            (("1" (ground)
              (("1" (hide 2)
                (("1" (typepred "St`scaf(pos!1)(n1)")
                  (("1" (grind) nil nil)) nil))
                nil)
               ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil)
               ("3" (grind) nil nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred "St`scaf(pos!1)(n1)")
              (("3" (grind) nil nil)) nil)
             ("4" (typepred "St`scaf(pos!1)(n1)")
              (("4" (typepred len) (("4" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (sp skolem-const-decl "uint32" sigmatd nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (n2 skolem-const-decl "non_terminal" sigmatd nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" sigmatd
          nil)
    (len skolem-const-decl "index" sigmatd nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (mem_stack_push formula-decl nil sigmatd nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (mem_mem_stack formula-decl nil sigmatd nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.push((number_fields.+)(sigmatd.pos, sigmatd.sp), sigmatd.n2)"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.+)(sigmatd.St`depth, 1), sigmatd.St`scaf WITH [((number_fields.+)(sigmatd.pos, sigmatd.sp))(sigmatd.n2) := sigmatd.St`stack]))")))
 (step_TCC51 0
  (step_TCC82-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1)
            (("2" (skeep*)
              (("2" (lift-if)
                (("2" (ground)
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (typepred stack) (("1" (grind) nil nil))
                        nil)
                       ("2" (inst?) nil nil))
                      nil))
                    nil)
                   ("2" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((plus_u32_u32 application-judgement "uint64" integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.n2 = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [((number_fields.+)(sigmatd.pos, sigmatd.sp))(sigmatd.n2) := sigmatd.St`stack], (number_fields.+)(sigmatd.pos, sigmatd.sp), sigmatd.n2, (number_fields.+)(1, sigmatd.St`depth))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [((number_fields.+)(sigmatd.pos, sigmatd.sp))(sigmatd.n2) := sigmatd.St`stack](i)(sigmatd.n))) ENDIF}")))
 (step_TCC52 0
  (step_TCC52-1 nil 3888115312
   ("" (skeep*)
    (("" (typepred "St`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst? :where +)
              (("" (ground)
                (("1" (expand "gfcount")
                  (("1" (use "scafcount_max") (("1" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (scafcount_max formula-decl nil sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.St`scaf((number_fields.+)(sigmatd.pos, sigmatd.sp))(sigmatd.n2)"
         "{u: sigmatd.ent | booleans.=>(sigmatd.loop?(u), reals.<((number_fields.+)(sigmatd.dep(u), 2), exp2.exp2(64)))}")))
 (step_TCC53 0
  (step_TCC28-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype
         "sigmatd.loop(sigmatd.incdepth(sigmatd.St`scaf((number_fields.+)(sigmatd.pos, sigmatd.sp))(sigmatd.n2)))"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC54 0
  (step_TCC29-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?)
                    (("2" (typepred "St`scaf(pos!1 + sp)(n2)")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3)
                          (("1" (ground) (("1" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (hide -5) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) (("2" (hide 2) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_good? const-decl "bool" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (sigma def-decl "nat" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil) nil
    (good_entry? const-decl "bool" sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (loop adt-constructor-decl "[uint64 -> (loop?)]" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.St`scaf((number_fields.+)(sigmatd.pos, sigmatd.sp))(sigmatd.n2)))]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC55 0
  (step_TCC26-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3"
                  (use sigma_dec
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" pos!1 "j" "len"))
                  (("1" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (typepred "St`scaf(pos!1)(n1)")
                          (("1" (grind :exclude sigma) nil nil)) nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)
                                                                                            (St`scaf WITH [(pos!1)(cur) := loop](i))) = ((LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                                                      WITH [(pos!1)
                                                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                                  1])")
                          (("1" (hide -1)
                            (("1" (replace -1 :hide? t)
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality :hide? t)
                              (("1"
                                (expand count)
                                (("1"
                                  (case "pos!1 = x!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case-replace
                                       "{i: below(num_non_terminals) |
                                                                                                                                            push?(St`scaf(x!1) WITH [(cur) := loop](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                      (("1"
                                        (rewrite card_remove)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (lift-if +)
                                            (("1"
                                              (ground)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1 2)
                                          (("2"
                                            (rewrite "count_TCC1")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (apply-extensionality)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (hide -3 -4 -6)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (expand count)
                                (("2"
                                  (use
                                   "nonempty_card[below(num_non_terminals)]")
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (rewrite count_TCC1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (grind) nil nil))
                              nil))
                            nil)
                           ("3" (expand count)
                            (("3"
                              (use "nonempty_card[below(num_non_terminals)]")
                              (("1" (grind) nil nil)
                               ("2"
                                (rewrite count_TCC1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (use "nonempty_card[below(num_non_terminals)]")
                        (("1" (grind) nil nil)
                         ("2" (rewrite count_TCC1)
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (sigma_dec formula-decl nil sigmatd nil)
    (loop adt-constructor-decl "[uint64 -> (loop?)]" sigmatd nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (card_remove formula-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.St`scaf((number_fields.+)(sigmatd.pos, sigmatd.sp))(sigmatd.n2)))]))")))
 (step_TCC56 0
  (step_TCC27-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred "St`scaf(pos!1)(n1)")
        (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
       ("2" (lemma good_mem_stack)
        (("2"
          (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
           loop)
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred "St`stack")
              (("3" (expand "fine_stack?")
                (("3" (ground)
                  (("1" (grind :exclude mem_stack) nil nil)
                   ("2" (hide -1)
                    (("2" (replace -8)
                      (("2" (replace -9)
                        (("2" (replace -5)
                          (("2"
                            (case-replace
                             "push(pos(St`stack), nt(St`stack)) = St`stack")
                            (("1"
                              (case-replace
                               "St`scaf(pos(St`stack))(nt(St`stack)) = rest")
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (apply-extensionality 1) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (grind) nil nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil)
           ("4" (typepred stack) (("4" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (lemma fine_mem_stack)
        (("3"
          (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
           loop)
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
             ("2" (hide 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil)) nil)
             ("3" (hide 2)
              (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
             ("4" (typepred stack)
              (("4" (hide 1)
                (("4" (expand "fine_stack?")
                  (("4" (ground)
                    (("1" (typepred stack) (("1" (grind) nil nil)) nil)
                     ("2"
                      (case-replace
                       "St`scaf(pos(stack))(nt(stack)) = rest")
                      (("1"
                        (case-replace "push(pos!1, cur) = St`stack")
                        (("1" (assert) nil nil)
                         ("2" (apply-extensionality 1)
                          (("2" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (typepred stack) (("5" (grind) nil nil)) nil))
            nil)
           ("2" (grind) nil nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil)
           ("4" (typepred stack) (("4" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" sigmatd
          nil)
    (loop adt-constructor-decl "[uint64 -> (loop?)]" sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (ent_push_extensionality formula-decl nil sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.St`scaf((number_fields.+)(sigmatd.pos, sigmatd.sp))(sigmatd.n2)))]))")))
 (step_TCC57 0
  (step_TCC103-1 nil 3804706560
   ("" (skeep*)
    (("" (typepred stack) (("" (grind :exclude mem_stack?) nil nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "booleans.TRUE"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.St`scaf((number_fields.+)(sigmatd.pos, sigmatd.sp))(sigmatd.n2)))], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest), (number_fields.-)(sigmatd.depth, 1))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.St`scaf((number_fields.+)(sigmatd.pos, sigmatd.sp))(sigmatd.n2)))](i)(sigmatd.n))) ENDIF}")))
 (step_TCC58 0
  (step_TCC95-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatd nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.stack"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC59 0
  (step_TCC77-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (len skolem-const-decl "index" sigmatd nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n1) := sigmatd.stack]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC60 0
  (step_TCC78-1 nil 3804455654
   ("" (skeep*)
    (("" (split)
      (("1" (typepred stack)
        (("1" (typepred depth)
          (("1" (expand good_depth?)
            (("1" (expand pushcount)
              (("1" (use scafcount_max)
                (("1" (assert)
                  (("1" (use exp2_lt :subst (n 41 m 64))
                    (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "good_depth?")
        (("2" (expand pushcount)
          (("2" (rewrite scafcount_update)
            (("1" (lift-if)
              (("1" (ground)
                (("1" (typepred stack) (("1" (grind) nil nil)) nil)
                 ("2" (typepred depth)
                  (("2" (grind :exclude scafcount) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pushcount const-decl "uint64" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (exp2_lt formula-decl nil exp2 nil)
    (scafcount_max formula-decl nil sigmatd nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scafcount_update formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.+)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n1) := sigmatd.stack]))")))
 (step_TCC61 0
  (step_TCC94-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (expand "good_stack?" +)
          (("2" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma good_mem_stack)
              (("2"
                (inst - G "depth" len scaf "push(pos!1, n1)" "stack"
                 stack)
                (("1" (ground)
                  (("1" (grind) nil nil)
                   ("2" (use mem_stack_push) (("2" (ground) nil nil))
                    nil)
                   ("3" (grind) nil nil))
                  nil)
                 ("2" (grind) nil nil) ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand fine_stack? +)
        (("3" (ground)
          (("1" (lemma mem_mem_stack)
            (("1" (inst - G depth len scaf _ _ _ _)
              (("1"
                (inst - "push(pos!1, n1)" "push(pos!1, n1)" stack
                 stack)
                (("1" (ground)
                  (("1" (hide -2)
                    (("1" (use mem_stack_push) (("1" (ground) nil nil))
                      nil))
                    nil)
                   ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                   ("3" (typepred stack) (("3" (grind) nil nil)) nil)
                   ("4" (use mem_stack_push) (("4" (ground) nil nil))
                    nil)
                   ("5" (typepred stack) (("5" (grind) nil nil)) nil))
                  nil)
                 ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2"
            (use fine_mem_stack :subst
                 (len len entry "push(pos!1, n1)" u stack stack stack))
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil)
               ("3" (grind) nil nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (grind)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (mem_stack_push formula-decl nil sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatd nil)
    (n1 skolem-const-decl "non_terminal" sigmatd nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" sigmatd
          nil)
    (len skolem-const-decl "index" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (mem_mem_stack formula-decl nil sigmatd nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.push(sigmatd.pos, sigmatd.n1)"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.+)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n1) := sigmatd.stack]))")))
 (step_TCC62 0
  (step_TCC104-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1)
            (("2" (skeep*)
              (("2" (lift-if)
                (("2" (ground)
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (typepred stack) (("1" (grind) nil nil))
                        nil)
                       ("2" (inst?) nil nil))
                      nil))
                    nil)
                   ("2" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.n1 = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n1) := sigmatd.stack], sigmatd.pos, sigmatd.n1, (number_fields.+)(1, sigmatd.depth))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n1) := sigmatd.stack](i)(sigmatd.n))) ENDIF}")))
 (step_TCC63 0
  (step_TCC63-1 nil 3888115312 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "sigmatd.St`scaf(sigmatd.pos)(sigmatd.n1)"
         "{u: sigmatd.ent | booleans.=>(sigmatd.loop?(u), reals.<((number_fields.+)(sigmatd.dep(u), 2), exp2.exp2(64)))}")))
 (step_TCC64 0
  (step_TCC37-1 nil 3804455654 ("" (grind) nil nil)
   ((num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (incdepth const-decl "uint64" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.loop(sigmatd.incdepth(sigmatd.St`scaf(sigmatd.pos)(sigmatd.n1)))"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC65 0
  (step_TCC38-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_good? const-decl "bool" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (sigma def-decl "nat" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil) nil
    (good_entry? const-decl "bool" sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (loop adt-constructor-decl "[uint64 -> (loop?)]" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.St`scaf(sigmatd.pos)(sigmatd.n1)))]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC66 0
  (step_TCC35-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred stack)
      (("" (typepred depth)
        (("" (expand good_depth?)
          (("" (expand pushcount)
            (("" (use scafcount_max)
              (("" (assert)
                (("" (use exp2_lt :subst (n 41 m 64))
                  (("" (ground)
                    (("1" (grind) nil nil)
                     ("2" (rewrite scafcount_update)
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (typepred stack)
                            (("1" (grind) nil nil)) nil)
                           ("2" (typepred depth)
                            (("2" (grind :exclude scafcount) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred stack) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (scafcount_max formula-decl nil sigmatd nil)
    (exp2_lt formula-decl nil exp2 nil)
    (incdepth const-decl "uint64" sigmatd nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR loop?(x) OR good?(x)} -> uint64]" sigmatd
     nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (loop adt-constructor-decl "[uint64 -> (loop?)]" sigmatd nil)
    (scafcount_update formula-decl nil sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.St`scaf(sigmatd.pos)(sigmatd.n1)))]))")))
 (step_TCC67 0
  (step_TCC36-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             loop)
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil)
             ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u loop stack rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (grind) nil nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (ent_push_extensionality formula-decl nil sigmatd nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (loop adt-constructor-decl "[uint64 -> (loop?)]" sigmatd nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" sigmatd
          nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.St`scaf(sigmatd.pos)(sigmatd.n1)))]))")))
 (step_TCC68 0
  (step_TCC98-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred stack)
      (("" (expand good_stack?)
        (("" (ground)
          (("1" (grind) nil nil)
           ("2" (grind :exclude (good_stack? fine_stack? mem_stack?))
            nil nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (successor const-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "booleans.TRUE"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.St`scaf(sigmatd.pos)(sigmatd.n1)))], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest), (number_fields.-)(sigmatd.depth, 1))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.St`scaf(sigmatd.pos)(sigmatd.n1)))](i)(sigmatd.n))) ENDIF}")))
 (step_TCC69 0
  (step_TCC84-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst-cp - pos!1 n1)
              (("" (inst - pos!1 n2)
                (("" (ground)
                  (("1" (expand gfcount)
                    (("1" (use "sigma_max")
                      (("1" (ground)
                        (("1"
                          (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                          (("1" (assert)
                            (("1"
                              (name-replace lnn
                               "len * num_non_terminals + num_non_terminals")
                              (("1"
                                (assert)
                                (("1"
                                  (case-replace
                                   "dep(scaf(pos!1)(n2)) = d2")
                                  (("1"
                                    (case-replace
                                     "dep(scaf(pos!1)(n1)) = d1")
                                    (("1"
                                      (assert)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (case "len * num_non_terminals <= exp2(46)")
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (use
                                 "lt_times_lt_pos1"
                                 :subst
                                 (px
                                  len
                                  nnz
                                  num_non_terminals
                                  y
                                  "exp2(32)"
                                  w
                                  "exp2(8)"))
                                (("1"
                                  (hide-all-but (-1 1))
                                  (("1"
                                    (grind)
                                    (("1"
                                      (typepred len)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil) ("3" (grind) nil nil)
                   ("4" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (uint32 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sigma_max formula-decl nil sigmatd nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR loop?(x) OR good?(x)} -> uint64]" sigmatd
     nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "(number_fields.+)(real_defs.max(sigmatd.d1, sigmatd.d2), 1)"
         "uint64")))
 (step_TCC70 0
  (step_TCC92-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype
         "sigmatd.fail((number_fields.+)(real_defs.max(sigmatd.d1, sigmatd.d2), 1))"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC71 0
  (step_TCC93-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_good? const-decl "bool" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (sigma def-decl "nat" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil) nil
    (good_entry? const-decl "bool" sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(real_defs.max(sigmatd.d1, sigmatd.d2), 1))]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC72 0
  (step_TCC53-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3"
                  (use sigma_dec
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" pos!1 "j" "len"))
                  (("1" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (grind) nil nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)
                                                                                            (St`scaf WITH [(pos!1)(cur) := fail(1 + max(d1, d2))](i))) = ((LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                                                      WITH [(pos!1)
                                                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                                  1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                                                                                                            push?(St`scaf(x!1) WITH [(cur) := fail(1 + max(d1, d2))](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if +)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (typepred
                                                 "St`scaf(pos!1)(n1)")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skeep*)
                                              (("3"
                                                (use step_TCC67)
                                                (("3"
                                                  (ground)
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide -6 2)
                                          (("3"
                                            (typepred
                                             "St`scaf(pos!1)(n1)")
                                            (("3"
                                              (typepred
                                               "St`scaf(pos!1)(n2)")
                                              (("3"
                                                (skeep*)
                                                (("3"
                                                  (use step_TCC68)
                                                  (("3"
                                                    (ground)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (inst?)
                                                          (("3"
                                                            (ground)
                                                            (("3"
                                                              (typepred
                                                               "St`scaf(pos!1)(n1)")
                                                              (("3"
                                                                (typepred
                                                                 "St`scaf(pos!1)(n2)")
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (use step_TCC67)
                                          (("4"
                                            (ground)
                                            (("4"
                                              (inst?)
                                              (("4"
                                                (inst?)
                                                (("4"
                                                  (inst?)
                                                  (("4"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand count)
                                (("2"
                                  (use
                                   "nonempty_card[below(num_non_terminals)]")
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (rewrite count_TCC1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3"
                                  (typepred "St`scaf(pos!1)(n1)")
                                  (("3"
                                    (typepred "St`scaf(pos!1)(n2)")
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (hide 2)
                                (("4"
                                  (use step_TCC67)
                                  (("4"
                                    (ground)
                                    (("4"
                                      (inst?)
                                      (("4"
                                        (inst?)
                                        (("4"
                                          (inst?)
                                          (("4" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand count)
                            (("3"
                              (use "nonempty_card[below(num_non_terminals)]")
                              (("1" (grind) nil nil)
                               ("2"
                                (rewrite count_TCC1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (use step_TCC68)
                            (("4" (ground)
                              (("4"
                                (inst?)
                                (("4"
                                  (inst?)
                                  (("4"
                                    (inst?)
                                    (("4" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("5" (hide -1 3)
                            (("5" (use step_TCC67)
                              (("5"
                                (ground)
                                (("5"
                                  (inst?)
                                  (("5"
                                    (inst?)
                                    (("5"
                                      (inst?)
                                      (("5" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (use "nonempty_card[below(num_non_terminals)]")
                        (("1" (grind) nil nil)
                         ("2" (rewrite count_TCC1)
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (sigma_dec formula-decl nil sigmatd nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatd nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil nil nil nil nil nil nil nil nil
    (step_TCC68 subtype-tcc nil sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (step_TCC67 subtype-tcc nil sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil) nil
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(real_defs.max(sigmatd.d1, sigmatd.d2), 1))]))")))
 (step_TCC73 0
  (step_TCC54-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2"
          (inst - G "depth - 1" len scaf stack rest
           "fail(1 + max(d1, d2))")
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (typepred "stack")
              (("2" (typepred "St`scaf(pos!1)(n1)")
                (("2" (typepred "St`scaf(pos!1)(n2)")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2"
                    (inst - G "depth - 1" len scaf stack rest
                     "fail(1 + max(d1, d2))")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (typepred "St`scaf(pos!1)(n1)")
                      (("2" (typepred "St`scaf(pos!1)(n2)")
                        (("2" (grind) nil nil)) nil))
                      nil)
                     ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (len skolem-const-decl "index" sigmatd nil)
    (d2 skolem-const-decl "uint64" sigmatd nil)
    (d1 skolem-const-decl "uint64" sigmatd nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatd nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (mem_stack? def-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(real_defs.max(sigmatd.d1, sigmatd.d2), 1))]))")))
 (step_TCC74 0
  (step_TCC96-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2)))], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest), (number_fields.-)(sigmatd.depth, 1))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2)))](i)(sigmatd.n))) ENDIF}")))
 (step_TCC75 0
  (step_TCC101-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst-cp - pos!1 n1)
              (("" (inst - pos!1 n2)
                (("" (ground)
                  (("1" (expand gfcount)
                    (("1" (use "sigma_max")
                      (("1" (ground)
                        (("1"
                          (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                          (("1" (assert)
                            (("1"
                              (name-replace lnn
                               "len * num_non_terminals + num_non_terminals")
                              (("1"
                                (assert)
                                (("1"
                                  (case-replace
                                   "dep(scaf(pos!1)(n2)) = d2")
                                  (("1"
                                    (case-replace
                                     "dep(scaf(pos!1)(n1)) = d1")
                                    (("1"
                                      (assert)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (case "len * num_non_terminals <= exp2(46)")
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (use
                                 "lt_times_lt_pos1"
                                 :subst
                                 (px
                                  len
                                  nnz
                                  num_non_terminals
                                  y
                                  "exp2(32)"
                                  w
                                  "exp2(8)"))
                                (("1"
                                  (hide-all-but (-1 1))
                                  (("1"
                                    (grind)
                                    (("1"
                                      (typepred len)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil) ("3" (grind) nil nil)
                   ("4" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (uint32 type-eq-decl nil integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sigma_max formula-decl nil sigmatd nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR loop?(x) OR good?(x)} -> uint64]" sigmatd
     nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_good? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "(number_fields.+)(real_defs.max(sigmatd.d1, sigmatd.d2), 1)"
         "uint64")))
 (step_TCC76 0
  (step_TCC102-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "St`scaf(pos!1)(n1)")
      (("" (typepred "St`scaf(pos!1)(n2)") (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (uint32 type-eq-decl nil integertypes nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.good((number_fields.+)(real_defs.max(sigmatd.d1, sigmatd.d2), 1), sigmatd.sp)"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC77 0
  (step_TCC84-1 nil 3808434333
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (typepred "scaf(pos!1)(n1)")
                  (("2" (typepred "scaf(pos!1)(n2)")
                    (("2" (hide 2) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack)
                (("2" (typepred "scaf(pos!1)(n1)")
                  (("2" (typepred "scaf(pos!1)(n2)")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (good_good? const-decl "bool" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (sigma def-decl "nat" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil) nil
    (good_entry? const-decl "bool" sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" sigmatd
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(real_defs.max(sigmatd.d1, sigmatd.d2), 1), sigmatd.sp)]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC78 0
  (step_TCC57-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3"
                  (use sigma_dec
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" pos!1 "j" "len"))
                  (("1" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (grind) nil nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                                                                               count(num_non_terminals)(push?)
                                                                                                    (St`scaf WITH [(pos!1)(cur) := good(1 + max(d1, d2), sp)](i))) = ((LAMBDA (i: upto(len)):
                                                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                                                              WITH [(pos!1)
                                                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                                          1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                                                                                                                          push?(St`scaf(x!1) WITH [(cur) := good(1 + max(d1, d2), sp)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if +)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (typepred
                                                 "St`scaf(pos!1)(n1)")
                                                (("2"
                                                  (typepred
                                                   "scaf(pos!1)(n2)")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skeep*)
                                              (("3"
                                                (use step_TCC73)
                                                (("3"
                                                  (ground)
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide -6 2)
                                          (("3"
                                            (typepred
                                             "St`scaf(pos!1)(n1)")
                                            (("3"
                                              (typepred
                                               "St`scaf(pos!1)(n2)")
                                              (("3"
                                                (skeep*)
                                                (("3"
                                                  (use step_TCC74)
                                                  (("3"
                                                    (ground)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (inst?)
                                                          (("3"
                                                            (ground)
                                                            (("3"
                                                              (typepred
                                                               "St`scaf(pos!1)(n1)")
                                                              (("3"
                                                                (typepred
                                                                 "St`scaf(pos!1)(n2)")
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (skeep*)
                                          (("4"
                                            (use step_TCC73)
                                            (("4"
                                              (ground)
                                              (("4"
                                                (inst?)
                                                (("4"
                                                  (inst?)
                                                  (("4"
                                                    (inst?)
                                                    (("4"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand count)
                                (("2"
                                  (use
                                   "nonempty_card[below(num_non_terminals)]")
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (rewrite count_TCC1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3"
                                  (typepred "St`scaf(pos!1)(n1)")
                                  (("3"
                                    (typepred "St`scaf(pos!1)(n2)")
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (hide 2)
                                (("4"
                                  (use step_TCC73)
                                  (("4"
                                    (ground)
                                    (("4"
                                      (inst?)
                                      (("4"
                                        (inst?)
                                        (("4"
                                          (inst?)
                                          (("4" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand count)
                            (("3"
                              (use "nonempty_card[below(num_non_terminals)]")
                              (("1" (grind) nil nil)
                               ("2"
                                (rewrite count_TCC1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("4" (use step_TCC74)
                            (("4" (ground)
                              (("4"
                                (inst?)
                                (("4"
                                  (inst?)
                                  (("4"
                                    (inst?)
                                    (("4" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("5" (hide -1 3)
                            (("5" (use step_TCC73)
                              (("5"
                                (ground)
                                (("5"
                                  (inst?)
                                  (("5"
                                    (inst?)
                                    (("5"
                                      (inst?)
                                      (("5" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (use "nonempty_card[below(num_non_terminals)]")
                        (("1" (grind) nil nil)
                         ("2" (rewrite count_TCC1)
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (sigma_dec formula-decl nil sigmatd nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" sigmatd
     nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil nil nil nil nil nil nil nil nil nil
    (step_TCC74 subtype-tcc nil sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (step_TCC73 subtype-tcc nil sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil) nil
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(real_defs.max(sigmatd.d1, sigmatd.d2), 1), sigmatd.sp)]))")))
 (step_TCC79 0
  (step_TCC58-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred rest)
        (("1" (typepred stack)
          (("1" (expand good_stack?) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (lemma good_mem_stack)
        (("2"
          (inst - G "depth - 1" len scaf stack rest
           "good(1 + max(d1, d2), sp)")
          (("1" (ground)
            (("1" (hide 2)
              (("1" (typepred stack)
                (("1" (expand good_stack? -)
                  (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (typepred stack)
              (("3" (expand fine_stack? -)
                (("3" (ground) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("4" (typepred stack) (("4" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (typepred "stack")
              (("2" (typepred "St`scaf(pos!1)(n1)")
                (("2" (typepred "St`scaf(pos!1)(n2)")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (use step_TCC76)
            (("3" (ground)
              (("3" (inst?)
                (("3" (inst?)
                  (("3" (inst?) (("3" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (typepred stack)
        (("3" (expand fine_stack? -)
          (("3" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma fine_mem_stack)
              (("2" (ground)
                (("2" (expand good_stack? -)
                  (("2"
                    (inst - G "depth - 1" len scaf stack rest
                     "good(1 + max(d1, d2), sp)")
                    (("1" (ground)
                      (("1" (expand good_stack? -)
                        (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (grind) nil nil) ("5" (grind) nil nil)
                       ("6" (grind) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil) ("9" (grind) nil nil)
                       ("10" (grind) nil nil))
                      nil)
                     ("2" (typepred "St`scaf(pos!1)(n1)")
                      (("2" (typepred "St`scaf(pos!1)(n2)")
                        (("2" (grind) nil nil)) nil))
                      nil)
                     ("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index type-eq-decl nil integertypes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil) nil nil nil nil nil nil
    nil nil nil nil
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" sigmatd
     nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil) nil
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (step_TCC76 subtype-tcc nil sigmatd nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (mem_stack? def-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(real_defs.max(sigmatd.d1, sigmatd.d2), 1), sigmatd.sp)]))")))
 (step_TCC80 0
  (step_TCC99-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2)), sigmatd.sp)], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest), (number_fields.-)(sigmatd.depth, 1))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(1, real_defs.max(sigmatd.d1, sigmatd.d2)), sigmatd.sp)](i)(sigmatd.n))) ENDIF}")))
 (step_TCC81 0
  (step_TCC91-1 nil 3804706560 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatd nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.stack"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC82 0
  (step_TCC111-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (len skolem-const-decl "index" sigmatd nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n2) := sigmatd.stack]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC83 0
  (step_TCC112-1 nil 3804455654
   ("" (skeep*)
    (("" (split)
      (("1" (typepred stack)
        (("1" (typepred depth)
          (("1" (expand good_depth?)
            (("1" (expand pushcount)
              (("1" (use scafcount_max)
                (("1" (assert)
                  (("1" (use exp2_lt :subst (n 41 m 64))
                    (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "good_depth?")
        (("2" (expand pushcount)
          (("2" (rewrite scafcount_update)
            (("1" (lift-if)
              (("1" (ground)
                (("1" (typepred stack) (("1" (grind) nil nil)) nil)
                 ("2" (typepred depth)
                  (("2" (grind :exclude scafcount) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pushcount const-decl "uint64" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (exp2_lt formula-decl nil exp2 nil)
    (scafcount_max formula-decl nil sigmatd nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scafcount_update formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.+)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n2) := sigmatd.stack]))")))
 (step_TCC84 0
  (step_TCC78-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (expand "good_stack?" +)
          (("2" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma good_mem_stack)
              (("2"
                (inst - G "depth" len scaf "push(pos!1, n2)" "stack"
                 stack)
                (("1" (ground)
                  (("1" (grind) nil nil)
                   ("2" (use mem_stack_push) (("2" (ground) nil nil))
                    nil)
                   ("3" (grind) nil nil))
                  nil)
                 ("2" (grind) nil nil) ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand fine_stack? +)
        (("3" (ground)
          (("1" (lemma mem_mem_stack)
            (("1" (inst - G depth len scaf _ _ _ _)
              (("1"
                (inst - "push(pos!1, n2)" "push(pos!1, n2)" stack
                 stack)
                (("1" (ground)
                  (("1" (hide -2)
                    (("1" (use mem_stack_push) (("1" (ground) nil nil))
                      nil))
                    nil)
                   ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                   ("3" (typepred stack) (("3" (grind) nil nil)) nil)
                   ("4" (use mem_stack_push) (("4" (ground) nil nil))
                    nil)
                   ("5" (typepred stack) (("5" (grind) nil nil)) nil))
                  nil)
                 ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2"
            (use fine_mem_stack :subst
                 (len len entry "push(pos!1, n2)" u stack stack stack))
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil)
               ("3" (grind) nil nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (grind)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (mem_stack_push formula-decl nil sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatd nil)
    (n2 skolem-const-decl "non_terminal" sigmatd nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" sigmatd
          nil)
    (len skolem-const-decl "index" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (mem_mem_stack formula-decl nil sigmatd nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.push(sigmatd.pos, sigmatd.n2)"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.+)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n2) := sigmatd.stack]))")))
 (step_TCC85 0
  (step_TCC119-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1)
            (("2" (skeep*)
              (("2" (lift-if)
                (("2" (ground)
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (typepred stack) (("1" (grind) nil nil))
                        nil)
                       ("2" (inst?) nil nil))
                      nil))
                    nil)
                   ("2" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.n2 = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n2) := sigmatd.stack], sigmatd.pos, sigmatd.n2, (number_fields.+)(1, sigmatd.depth))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n2) := sigmatd.stack](i)(sigmatd.n))) ENDIF}")))
 (step_TCC86 0
  (step_TCC86-1 nil 3888115312 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "sigmatd.scaf(sigmatd.pos)(sigmatd.n2)"
         "{u: sigmatd.ent | booleans.=>(sigmatd.loop?(u), reals.<((number_fields.+)(sigmatd.dep(u), 2), exp2.exp2(64)))}")))
 (step_TCC87 0
  (step_TCC59-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype
         "sigmatd.loop(sigmatd.incdepth(sigmatd.scaf(sigmatd.pos)(sigmatd.n2)))"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC88 0
  (step_TCC60-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good? const-decl "bool" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (sigma def-decl "nat" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil) nil
    (good_entry? const-decl "bool" sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (loop adt-constructor-decl "[uint64 -> (loop?)]" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.scaf(sigmatd.pos)(sigmatd.n2)))]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC89 0
  (step_TCC69-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred stack)
      (("" (typepred depth)
        (("" (expand good_depth?)
          (("" (expand pushcount)
            (("" (use scafcount_max)
              (("" (assert)
                (("" (use exp2_lt :subst (n 41 m 64))
                  (("" (ground)
                    (("1" (grind) nil nil)
                     ("2" (rewrite scafcount_update)
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (typepred stack)
                            (("1" (grind) nil nil)) nil)
                           ("2" (typepred depth)
                            (("2" (grind :exclude scafcount) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred stack) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (scafcount_max formula-decl nil sigmatd nil)
    (exp2_lt formula-decl nil exp2 nil)
    (incdepth const-decl "uint64" sigmatd nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR loop?(x) OR good?(x)} -> uint64]" sigmatd
     nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (loop adt-constructor-decl "[uint64 -> (loop?)]" sigmatd nil)
    (scafcount_update formula-decl nil sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.scaf(sigmatd.pos)(sigmatd.n2)))]))")))
 (step_TCC90 0
  (step_TCC70-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             loop)
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil)
             ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u loop stack rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (grind) nil nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (ent_push_extensionality formula-decl nil sigmatd nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (loop adt-constructor-decl "[uint64 -> (loop?)]" sigmatd nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" sigmatd
          nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.scaf(sigmatd.pos)(sigmatd.n2)))]))")))
 (step_TCC91 0
  (step_TCC118-1 nil 3804706560
   ("" (skeep*)
    (("" (typepred stack)
      (("" (expand good_stack?)
        (("" (ground)
          (("1" (grind) nil nil)
           ("2" (grind :exclude (good_stack? fine_stack? mem_stack?))
            nil nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (successor const-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "booleans.TRUE"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.scaf(sigmatd.pos)(sigmatd.n2)))], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest), (number_fields.-)(sigmatd.depth, 1))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.scaf(sigmatd.pos)(sigmatd.n2)))](i)(sigmatd.n))) ENDIF}")))
 (step_TCC92 0
  (step_TCC109-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - pos!1 n1)
              (("" (ground)
                (("1" (expand gfcount)
                  (("1" (use "sigma_max")
                    (("1" (ground)
                      (("1"
                        (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                        (("1" (assert)
                          (("1"
                            (name-replace lnn
                             "len * num_non_terminals + num_non_terminals")
                            (("1" (assert)
                              (("1"
                                (case-replace
                                 "dep(scaf(pos!1)(n1)) = d1")
                                (("1" (assert) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (case "len * num_non_terminals <= exp2(46)")
                            (("1" (assert) (("1" (grind) nil nil)) nil)
                             ("2"
                              (use "lt_times_lt_pos1" :subst
                                   (px
                                    len
                                    nnz
                                    num_non_terminals
                                    y
                                    "exp2(32)"
                                    w
                                    "exp2(8)"))
                              (("1"
                                (hide-all-but (-1 1))
                                (("1"
                                  (grind)
                                  (("1"
                                    (typepred len)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (good_good? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR loop?(x) OR good?(x)} -> uint64]" sigmatd
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (sigma_max formula-decl nil sigmatd nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (step subtype "(number_fields.+)(sigmatd.d1, 1)" "uint64")))
 (step_TCC93 0
  (step_TCC110-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "St`scaf(pos!1)(n1)") (("" (grind) nil nil)) nil))
    nil)
   ((state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (uint32 type-eq-decl nil integertypes nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.good((number_fields.+)(sigmatd.d1, 1), sigmatd.sp)"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC94 0
  (step_TCC99-1 nil 3804991042
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?)
                    (("2" (ground)
                      (("1" (typepred "St`scaf(pos!1)(n1)")
                        (("1" (grind) nil nil)) nil)
                       ("2" (expand good_good?)
                        (("2" (grind :exclude (max gfcount)) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (typepred lflag)
                  (("3" (skeep*)
                    (("3" (ground)
                      (("1" (inst?) nil nil) ("2" (grind) nil nil)
                       ("3" (inst?) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "St`scaf(pos!1)(n1)")
                (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_good? const-decl "bool" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (sigma def-decl "nat" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil) nil
    (good_entry? const-decl "bool" sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" sigmatd
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(sigmatd.d1, 1), sigmatd.sp)]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC95 0
  (step_TCC61-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred stack)
      (("" (typepred depth)
        (("" (expand good_depth?)
          (("" (expand pushcount)
            (("" (use scafcount_max)
              (("" (assert)
                (("" (use exp2_lt :subst (n 41 m 64))
                  (("" (ground)
                    (("1" (grind) nil nil)
                     ("2" (rewrite scafcount_update)
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (typepred stack)
                            (("1" (grind) nil nil)) nil)
                           ("2" (typepred depth)
                            (("2" (grind :exclude scafcount) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "scaf(pos!1)(n1)")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (scafcount_max formula-decl nil sigmatd nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (exp2_lt formula-decl nil exp2 nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" sigmatd
     nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (scafcount_update formula-decl nil sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(sigmatd.d1, 1), sigmatd.sp)]))")))
 (step_TCC96 0
  (step_TCC62-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             "good(1 + d1, sp)")
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (typepred "St`scaf(pos(St`stack))(n1)")
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil))
              nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u " good(1 + d1, sp)"
              stack rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (typepred "St`scaf(pos(St`stack))(n1)")
          (("1" (grind) nil nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (ent_push_extensionality formula-decl nil sigmatd nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (sp skolem-const-decl "uint32" sigmatd nil)
    (d1 skolem-const-decl "uint64" sigmatd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" sigmatd
     nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (cur skolem-const-decl "uint8" sigmatd nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" sigmatd
          nil)
    (len skolem-const-decl "index" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatd nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(sigmatd.d1, 1), sigmatd.sp)]))")))
 (step_TCC97 0
  (step_TCC116-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(1, sigmatd.d1), sigmatd.sp)], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest), (number_fields.-)(sigmatd.depth, 1))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(1, sigmatd.d1), sigmatd.sp)](i)(sigmatd.n))) ENDIF}")))
 (step_TCC98 0
  (step_TCC112-1 nil 3804706560 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatd nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.stack"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC99 0
  (step_TCC92-1 nil 3804706560
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (len skolem-const-decl "index" sigmatd nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n1) := sigmatd.stack]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC100 0
  (step_TCC93-1 nil 3804706560
   ("" (skeep*)
    (("" (split)
      (("1" (typepred stack)
        (("1" (typepred depth)
          (("1" (expand good_depth?)
            (("1" (expand pushcount)
              (("1" (use scafcount_max)
                (("1" (assert)
                  (("1" (use exp2_lt :subst (n 41 m 64))
                    (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "good_depth?")
        (("2" (expand pushcount)
          (("2" (rewrite scafcount_update)
            (("1" (lift-if)
              (("1" (ground)
                (("1" (typepred stack) (("1" (grind) nil nil)) nil)
                 ("2" (typepred depth)
                  (("2" (grind :exclude scafcount) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pushcount const-decl "uint64" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (exp2_lt formula-decl nil exp2 nil)
    (scafcount_max formula-decl nil sigmatd nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scafcount_update formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.+)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n1) := sigmatd.stack]))")))
 (step_TCC101 0
  (step_TCC94-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (expand "good_stack?" +)
          (("2" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma good_mem_stack)
              (("2"
                (inst - G "depth" len scaf "push(pos!1, n1)" "stack"
                 stack)
                (("1" (ground)
                  (("1" (grind) nil nil)
                   ("2" (use mem_stack_push) (("2" (ground) nil nil))
                    nil)
                   ("3" (grind) nil nil))
                  nil)
                 ("2" (grind) nil nil) ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand fine_stack? +)
        (("3" (ground)
          (("1" (lemma mem_mem_stack)
            (("1" (inst - G depth len scaf _ _ _ _)
              (("1"
                (inst - "push(pos!1, n1)" "push(pos!1, n1)" stack
                 stack)
                (("1" (ground)
                  (("1" (hide -2)
                    (("1" (use mem_stack_push) (("1" (ground) nil nil))
                      nil))
                    nil)
                   ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                   ("3" (typepred stack) (("3" (grind) nil nil)) nil)
                   ("4" (use mem_stack_push) (("4" (ground) nil nil))
                    nil)
                   ("5" (typepred stack) (("5" (grind) nil nil)) nil))
                  nil)
                 ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2"
            (use fine_mem_stack :subst
                 (len len entry "push(pos!1, n1)" u stack stack stack))
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil)
               ("3" (grind) nil nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (grind)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (mem_stack_push formula-decl nil sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatd nil)
    (n1 skolem-const-decl "non_terminal" sigmatd nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" sigmatd
          nil)
    (len skolem-const-decl "index" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (mem_mem_stack formula-decl nil sigmatd nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.push(sigmatd.pos, sigmatd.n1)"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.+)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n1) := sigmatd.stack]))")))
 (step_TCC102 0
  (step_TCC125-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1)
            (("2" (skeep*)
              (("2" (lift-if)
                (("2" (ground)
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (typepred stack) (("1" (grind) nil nil))
                        nil)
                       ("2" (inst?) nil nil))
                      nil))
                    nil)
                   ("2" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.n1 = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n1) := sigmatd.stack], sigmatd.pos, sigmatd.n1, (number_fields.+)(1, sigmatd.depth))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n1) := sigmatd.stack](i)(sigmatd.n))) ENDIF}")))
 (step_TCC103 0
  (step_TCC103-1 nil 3888115312 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "sigmatd.scaf(sigmatd.pos)(sigmatd.n1)"
         "{u: sigmatd.ent | booleans.=>(sigmatd.loop?(u), reals.<((number_fields.+)(sigmatd.dep(u), 2), exp2.exp2(64)))}")))
 (step_TCC104 0
  (step_TCC71-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype
         "sigmatd.loop(sigmatd.incdepth(sigmatd.scaf(sigmatd.pos)(sigmatd.n1)))"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC105 0
  (step_TCC72-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good? const-decl "bool" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (sigma def-decl "nat" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil) nil
    (good_entry? const-decl "bool" sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (loop adt-constructor-decl "[uint64 -> (loop?)]" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.scaf(sigmatd.pos)(sigmatd.n1)))]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC106 0
  (step_TCC85-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred stack)
      (("" (typepred depth)
        (("" (expand good_depth?)
          (("" (expand pushcount)
            (("" (use scafcount_max)
              (("" (assert)
                (("" (use exp2_lt :subst (n 41 m 64))
                  (("" (ground)
                    (("1" (grind) nil nil)
                     ("2" (rewrite scafcount_update)
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (typepred stack)
                            (("1" (grind) nil nil)) nil)
                           ("2" (typepred depth)
                            (("2" (grind :exclude scafcount) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred stack) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (scafcount_max formula-decl nil sigmatd nil)
    (exp2_lt formula-decl nil exp2 nil)
    (incdepth const-decl "uint64" sigmatd nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR loop?(x) OR good?(x)} -> uint64]" sigmatd
     nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (loop adt-constructor-decl "[uint64 -> (loop?)]" sigmatd nil)
    (scafcount_update formula-decl nil sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.scaf(sigmatd.pos)(sigmatd.n1)))]))")))
 (step_TCC107 0
  (step_TCC86-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             loop)
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil)
             ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u loop stack rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (grind) nil nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (ent_push_extensionality formula-decl nil sigmatd nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (loop adt-constructor-decl "[uint64 -> (loop?)]" sigmatd nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" sigmatd
          nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.scaf(sigmatd.pos)(sigmatd.n1)))]))")))
 (step_TCC108 0
  (step_TCC126-1 nil 3804706560
   ("" (skeep*)
    (("" (typepred stack)
      (("" (expand good_stack?)
        (("" (ground)
          (("1" (grind) nil nil)
           ("2" (grind :exclude (good_stack? fine_stack? mem_stack?))
            nil nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (successor const-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "booleans.TRUE"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.scaf(sigmatd.pos)(sigmatd.n1)))], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest), (number_fields.-)(sigmatd.depth, 1))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.scaf(sigmatd.pos)(sigmatd.n1)))](i)(sigmatd.n))) ENDIF}")))
 (step_TCC109 0
  (step_TCC113-1 nil 3804991042
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - pos!1 n1)
              (("" (ground)
                (("1" (expand gfcount)
                  (("1" (use "sigma_max")
                    (("1" (ground)
                      (("1"
                        (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                        (("1" (assert)
                          (("1"
                            (name-replace lnn
                             "len * num_non_terminals + num_non_terminals")
                            (("1" (assert)
                              (("1"
                                (case-replace
                                 "dep(scaf(pos!1)(n1)) = d1")
                                (("1" (assert) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (case "len * num_non_terminals <= exp2(46)")
                            (("1" (assert) (("1" (grind) nil nil)) nil)
                             ("2"
                              (use "lt_times_lt_pos1" :subst
                                   (px
                                    len
                                    nnz
                                    num_non_terminals
                                    y
                                    "exp2(32)"
                                    w
                                    "exp2(8)"))
                              (("1"
                                (hide-all-but (-1 1))
                                (("1"
                                  (grind)
                                  (("1"
                                    (typepred len)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR loop?(x) OR good?(x)} -> uint64]" sigmatd
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (sigma_max formula-decl nil sigmatd nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (step subtype "(number_fields.+)(sigmatd.d1, 1)" "uint64")))
 (step_TCC110 0
  (step_TCC114-1 nil 3804991042 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "sigmatd.fail((number_fields.+)(sigmatd.d1, 1))"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC111 0
  (step_TCC115-1 nil 3804991042
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_good? const-decl "bool" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (sigma def-decl "nat" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil) nil
    (good_entry? const-decl "bool" sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(sigmatd.d1, 1))]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC112 0
  (step_TCC73-1 nil 3804455654
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3"
                  (use sigma_dec
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" pos!1 "j" "len"))
                  (("1" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (grind) nil nil)
                         ("2"
                          (case-replace "(LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)
                                                                                            (St`scaf WITH [(pos!1)(cur) := fail(1 + d1)](i))) = ((LAMBDA (i: upto(len)):
                                                                                       count(num_non_terminals)(push?)(St`scaf(i)))
                                                                                      WITH [(pos!1)
                                                                                              := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                                  1])")
                          (("1" (hide -1) (("1" (assert) nil nil)) nil)
                           ("2" (hide -1 3)
                            (("2" (apply-extensionality)
                              (("1"
                                (hide 2)
                                (("1"
                                  (expand count)
                                  (("1"
                                    (case "pos!1 = x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "{i: below(num_non_terminals) |
                                                                                                                                            push?(St`scaf(x!1) WITH [(cur) := fail(1 + d1)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                        (("1"
                                          (rewrite card_remove)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lift-if +)
                                              (("1"
                                                (ground)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1 2)
                                            (("2"
                                              (rewrite "count_TCC1")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (apply-extensionality)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -3 -4 -6)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil)
                                             ("3"
                                              (skeep*)
                                              (("3"
                                                (use step_TCC105)
                                                (("3"
                                                  (ground)
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide -6 2)
                                          (("3" (grind) nil nil))
                                          nil)
                                         ("4"
                                          (hide 2)
                                          (("4"
                                            (skeep*)
                                            (("4"
                                              (use step_TCC105)
                                              (("4"
                                                (ground)
                                                (("4"
                                                  (inst?)
                                                  (("4"
                                                    (inst?)
                                                    (("4"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand count +)
                                  (("2"
                                    (use
                                     "nonempty_card[below(num_non_terminals)]")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (expand nonempty?)
                                        (("1"
                                          (expand empty?)
                                          (("1"
                                            (inst - "nt(stack)")
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (typepred "nt(stack)")
                                                (("2"
                                                  (expand
                                                   "good_push_entry?")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "count_TCC1")
                                      (("2"
                                        (hide 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3" (grind) nil nil))
                                nil)
                               ("4"
                                (hide 2)
                                (("4"
                                  (use step_TCC105)
                                  (("4"
                                    (ground)
                                    (("4"
                                      (inst?)
                                      (("4"
                                        (inst?)
                                        (("4" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -1)
                            (("3" (expand count)
                              (("3"
                                (use
                                 "nonempty_card[below(num_non_terminals)]")
                                (("1"
                                  (ground)
                                  (("1"
                                    (hide -5 5)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "count_TCC1")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide -1 3) (("4" (grind) nil nil))
                            nil)
                           ("5" (use step_TCC105)
                            (("5" (ground)
                              (("5"
                                (inst?)
                                (("5"
                                  (inst?)
                                  (("5" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (use "nonempty_card[below(num_non_terminals)]")
                        (("1" (grind) nil nil)
                         ("2" (rewrite count_TCC1)
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (sigma_dec formula-decl nil sigmatd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatd nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil nil nil nil nil nil nil nil
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (step_TCC105 subtype-tcc nil sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil) nil
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_remove formula-decl nil finite_sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil) nil
    (nonempty? const-decl "bool" sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(sigmatd.d1, 1))]))")))
 (step_TCC113 0
  (step_TCC74-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             "fail(1 + d1)")
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (typepred "St`scaf(pos(St`stack))(n1)")
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil))
              nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u "fail(1 + d1)" stack
              rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (typepred "St`scaf(pos(St`stack))(n1)")
          (("1" (grind) nil nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (ent_push_extensionality formula-decl nil sigmatd nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (d1 skolem-const-decl "uint64" sigmatd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatd nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (cur skolem-const-decl "uint8" sigmatd nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" sigmatd
          nil)
    (len skolem-const-decl "index" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatd nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(sigmatd.d1, 1))]))")))
 (step_TCC114 0
  (step_TCC127-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(1, sigmatd.d1))], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest), (number_fields.-)(sigmatd.depth, 1))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(1, sigmatd.d1))](i)(sigmatd.n))) ENDIF}")))
 (step_TCC115 0
  (step_TCC119-1 nil 3804991042
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - pos!1 n1)
              (("" (ground)
                (("1" (expand gfcount)
                  (("1" (use "sigma_max")
                    (("1" (ground)
                      (("1"
                        (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                        (("1" (assert)
                          (("1"
                            (name-replace lnn
                             "len * num_non_terminals + num_non_terminals")
                            (("1" (assert)
                              (("1"
                                (case-replace
                                 "dep(scaf(pos!1)(n1)) = d1")
                                (("1" (assert) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (case "len * num_non_terminals <= exp2(46)")
                            (("1" (assert) (("1" (grind) nil nil)) nil)
                             ("2"
                              (use "lt_times_lt_pos1" :subst
                                   (px
                                    len
                                    nnz
                                    num_non_terminals
                                    y
                                    "exp2(32)"
                                    w
                                    "exp2(8)"))
                              (("1"
                                (hide-all-but (-1 1))
                                (("1"
                                  (grind)
                                  (("1"
                                    (typepred len)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (good_good? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR loop?(x) OR good?(x)} -> uint64]" sigmatd
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (sigma_max formula-decl nil sigmatd nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (step subtype "(number_fields.+)(sigmatd.d1, 1)" "uint64")))
 (step_TCC116 0
  (step_TCC121-1 nil 3804991042 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatd nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.good((number_fields.+)(sigmatd.d1, 1), 0)"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC117 0
  (step_TCC122-1 nil 3804991042
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?)
                    (("2" (ground)
                      (("1" (typepred "St`scaf(pos!1)(n1)")
                        (("1" (grind) nil nil)) nil)
                       ("2" (expand good_good?)
                        (("2" (grind :exclude (max gfcount)) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (typepred lflag)
                  (("3" (skeep*)
                    (("3" (ground)
                      (("1" (inst?) nil nil) ("2" (grind) nil nil)
                       ("3" (inst?) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "St`scaf(pos!1)(n1)")
                (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_good? const-decl "bool" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (sigma def-decl "nat" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil) nil
    (good_entry? const-decl "bool" sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" sigmatd
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(sigmatd.d1, 1), 0)]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC118 0
  (step_TCC107-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred stack)
      (("" (typepred depth)
        (("" (expand good_depth?)
          (("" (expand pushcount)
            (("" (use scafcount_max)
              (("" (assert)
                (("" (use exp2_lt :subst (n 41 m 64))
                  (("" (ground)
                    (("1" (grind) nil nil)
                     ("2" (rewrite scafcount_update)
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (typepred stack)
                            (("1" (grind) nil nil)) nil)
                           ("2" (typepred depth)
                            (("2" (grind :exclude scafcount) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "scaf(pos!1)(n1)")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (scafcount_max formula-decl nil sigmatd nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (exp2_lt formula-decl nil exp2 nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" sigmatd
     nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (scafcount_update formula-decl nil sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(sigmatd.d1, 1), 0)]))")))
 (step_TCC119 0
  (step_TCC108-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             "good(1 + d1, 0)")
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (typepred "St`scaf(pos(St`stack))(n1)")
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil))
              nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u " good(1 + d1, 0)"
              stack rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (typepred "St`scaf(pos(St`stack))(n1)")
          (("1" (grind) nil nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (ent_push_extensionality formula-decl nil sigmatd nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (d1 skolem-const-decl "uint64" sigmatd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" sigmatd
     nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (cur skolem-const-decl "uint8" sigmatd nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" sigmatd
          nil)
    (len skolem-const-decl "index" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatd nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(sigmatd.d1, 1), 0)]))")))
 (step_TCC120 0
  (step_TCC128-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(1, sigmatd.d1), 0)], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest), (number_fields.-)(sigmatd.depth, 1))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(1, sigmatd.d1), 0)](i)(sigmatd.n))) ENDIF}")))
 (step_TCC121 0
  (step_TCC133-1 nil 3804706560 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatd nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.stack"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC122 0
  (step_TCC113-1 nil 3804706560
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (len skolem-const-decl "index" sigmatd nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n1) := sigmatd.stack]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC123 0
  (step_TCC114-1 nil 3804706560
   ("" (skeep*)
    (("" (split)
      (("1" (typepred stack)
        (("1" (typepred depth)
          (("1" (expand good_depth?)
            (("1" (expand pushcount)
              (("1" (use scafcount_max)
                (("1" (assert)
                  (("1" (use exp2_lt :subst (n 41 m 64))
                    (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "good_depth?")
        (("2" (expand pushcount)
          (("2" (rewrite scafcount_update)
            (("1" (lift-if)
              (("1" (ground)
                (("1" (typepred stack) (("1" (grind) nil nil)) nil)
                 ("2" (typepred depth)
                  (("2" (grind :exclude scafcount) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pushcount const-decl "uint64" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (exp2_lt formula-decl nil exp2 nil)
    (scafcount_max formula-decl nil sigmatd nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scafcount_update formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.+)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n1) := sigmatd.stack]))")))
 (step_TCC124 0
  (step_TCC115-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (expand "good_stack?" +)
          (("2" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma good_mem_stack)
              (("2"
                (inst - G "depth" len scaf "push(pos!1, n1)" "stack"
                 stack)
                (("1" (ground)
                  (("1" (grind) nil nil)
                   ("2" (use mem_stack_push) (("2" (ground) nil nil))
                    nil)
                   ("3" (grind) nil nil))
                  nil)
                 ("2" (grind) nil nil) ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand fine_stack? +)
        (("3" (ground)
          (("1" (lemma mem_mem_stack)
            (("1" (inst - G depth len scaf _ _ _ _)
              (("1"
                (inst - "push(pos!1, n1)" "push(pos!1, n1)" stack
                 stack)
                (("1" (ground)
                  (("1" (hide -2)
                    (("1" (use mem_stack_push) (("1" (ground) nil nil))
                      nil))
                    nil)
                   ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                   ("3" (typepred stack) (("3" (grind) nil nil)) nil)
                   ("4" (use mem_stack_push) (("4" (ground) nil nil))
                    nil)
                   ("5" (typepred stack) (("5" (grind) nil nil)) nil))
                  nil)
                 ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2"
            (use fine_mem_stack :subst
                 (len len entry "push(pos!1, n1)" u stack stack stack))
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil)
               ("3" (grind) nil nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (grind)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (mem_stack_push formula-decl nil sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatd nil)
    (n1 skolem-const-decl "non_terminal" sigmatd nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" sigmatd
          nil)
    (len skolem-const-decl "index" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (mem_mem_stack formula-decl nil sigmatd nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.push(sigmatd.pos, sigmatd.n1)"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.+)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n1) := sigmatd.stack]))")))
 (step_TCC125 0
  (step_TCC137-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1)
            (("2" (skeep*)
              (("2" (lift-if)
                (("2" (ground)
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (typepred stack) (("1" (grind) nil nil))
                        nil)
                       ("2" (inst?) nil nil))
                      nil))
                    nil)
                   ("2" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.n1 = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n1) := sigmatd.stack], sigmatd.pos, sigmatd.n1, (number_fields.+)(1, sigmatd.depth))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n1) := sigmatd.stack](i)(sigmatd.n))) ENDIF}")))
 (step_TCC126 0
  (step_TCC126-1 nil 3888115312 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "sigmatd.scaf(sigmatd.pos)(sigmatd.n1)"
         "{u: sigmatd.ent | booleans.=>(sigmatd.loop?(u), reals.<((number_fields.+)(sigmatd.dep(u), 2), exp2.exp2(64)))}")))
 (step_TCC127 0
  (step_TCC87-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype
         "sigmatd.loop(sigmatd.incdepth(sigmatd.scaf(sigmatd.pos)(sigmatd.n1)))"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC128 0
  (step_TCC88-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good? const-decl "bool" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (sigma def-decl "nat" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil) nil
    (good_entry? const-decl "bool" sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (loop adt-constructor-decl "[uint64 -> (loop?)]" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.scaf(sigmatd.pos)(sigmatd.n1)))]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC129 0
  (step_TCC103-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred stack)
      (("" (typepred depth)
        (("" (expand good_depth?)
          (("" (expand pushcount)
            (("" (use scafcount_max)
              (("" (assert)
                (("" (use exp2_lt :subst (n 41 m 64))
                  (("" (ground)
                    (("1" (grind) nil nil)
                     ("2" (rewrite scafcount_update)
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (typepred stack)
                            (("1" (grind) nil nil)) nil)
                           ("2" (typepred depth)
                            (("2" (grind :exclude scafcount) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred stack) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (scafcount_max formula-decl nil sigmatd nil)
    (exp2_lt formula-decl nil exp2 nil)
    (incdepth const-decl "uint64" sigmatd nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR loop?(x) OR good?(x)} -> uint64]" sigmatd
     nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (loop adt-constructor-decl "[uint64 -> (loop?)]" sigmatd nil)
    (scafcount_update formula-decl nil sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.scaf(sigmatd.pos)(sigmatd.n1)))]))")))
 (step_TCC130 0
  (step_TCC104-1 nil 3804455654
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             loop)
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil)
             ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u loop stack rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (grind) nil nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (ent_push_extensionality formula-decl nil sigmatd nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (loop adt-constructor-decl "[uint64 -> (loop?)]" sigmatd nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" sigmatd
          nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.scaf(sigmatd.pos)(sigmatd.n1)))]))")))
 (step_TCC131 0
  (step_TCC138-1 nil 3804706560
   ("" (skeep*)
    (("" (typepred stack)
      (("" (expand good_stack?)
        (("" (ground)
          (("1" (grind) nil nil)
           ("2" (grind :exclude (good_stack? fine_stack? mem_stack?))
            nil nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (successor const-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "booleans.TRUE"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.scaf(sigmatd.pos)(sigmatd.n1)))], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest), (number_fields.-)(sigmatd.depth, 1))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.scaf(sigmatd.pos)(sigmatd.n1)))](i)(sigmatd.n))) ENDIF}")))
 (step_TCC132 0
  (step_TCC136-1 nil 3804991042
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - pos!1 n1)
              (("" (ground)
                (("1" (expand gfcount)
                  (("1" (use "sigma_max")
                    (("1" (ground)
                      (("1"
                        (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                        (("1" (assert)
                          (("1"
                            (name-replace lnn
                             "len * num_non_terminals + num_non_terminals")
                            (("1" (assert)
                              (("1"
                                (case-replace
                                 "dep(scaf(pos!1)(n1)) = d1")
                                (("1" (assert) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (case "len * num_non_terminals <= exp2(46)")
                            (("1" (assert) (("1" (grind) nil nil)) nil)
                             ("2"
                              (use "lt_times_lt_pos1" :subst
                                   (px
                                    len
                                    nnz
                                    num_non_terminals
                                    y
                                    "exp2(32)"
                                    w
                                    "exp2(8)"))
                              (("1"
                                (hide-all-but (-1 1))
                                (("1"
                                  (grind)
                                  (("1"
                                    (typepred len)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR loop?(x) OR good?(x)} -> uint64]" sigmatd
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (sigma_max formula-decl nil sigmatd nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (step subtype "(number_fields.+)(sigmatd.d1, 1)" "uint64")))
 (step_TCC133 0
  (step_TCC138-1 nil 3804991042 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatd nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.good((number_fields.+)(sigmatd.d1, 1), 0)"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC134 0
  (step_TCC139-1 nil 3804991042
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?)
                    (("2" (ground)
                      (("1" (typepred "St`scaf(pos!1)(n1)")
                        (("1" (grind) nil nil)) nil)
                       ("2" (expand good_good?)
                        (("2" (grind :exclude (max gfcount)) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (typepred lflag)
                  (("3" (skeep*)
                    (("3" (ground)
                      (("1" (inst?) nil nil) ("2" (grind) nil nil)
                       ("3" (inst?) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (expand nice_entry?)
                (("2" (expand good_good_entry?)
                  (("2" (typepred stack) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_good? const-decl "bool" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (sigma def-decl "nat" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil) nil
    (good_entry? const-decl "bool" sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" sigmatd
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(sigmatd.d1, 1), 0)]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC135 0
  (step_TCC110-1 nil 3804706560
   ("" (skeep*)
    (("" (typepred stack)
      (("" (typepred depth)
        (("" (expand good_depth?)
          (("" (expand pushcount)
            (("" (use scafcount_max)
              (("" (assert)
                (("" (use exp2_lt :subst (n 41 m 64))
                  (("" (ground)
                    (("1" (grind) nil nil)
                     ("2" (rewrite scafcount_update)
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (typepred stack)
                            (("1" (grind) nil nil)) nil)
                           ("2" (typepred depth)
                            (("2" (grind :exclude scafcount) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "scaf(pos!1)(n1)")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (scafcount_max formula-decl nil sigmatd nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (exp2_lt formula-decl nil exp2 nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" sigmatd
     nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (scafcount_update formula-decl nil sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(sigmatd.d1, 1), 0)]))")))
 (step_TCC136 0
  (step_TCC111-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             "good(1 + d1, 0)")
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (typepred "St`scaf(pos(St`stack))(n1)")
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil))
              nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u " good(1 + d1, 0)"
              stack rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (typepred "St`scaf(pos(St`stack))(n1)")
          (("1" (grind)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (ent_push_extensionality formula-decl nil sigmatd nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (d1 skolem-const-decl "uint64" sigmatd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" sigmatd
     nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (cur skolem-const-decl "uint8" sigmatd nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" sigmatd
          nil)
    (len skolem-const-decl "index" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatd nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(sigmatd.d1, 1), 0)]))")))
 (step_TCC137 0
  (step_TCC139-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(1, sigmatd.d1), 0)], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest), (number_fields.-)(sigmatd.depth, 1))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.good((number_fields.+)(1, sigmatd.d1), 0)](i)(sigmatd.n))) ENDIF}")))
 (step_TCC138 0
  (step_TCC143-1 nil 3804991042
   ("" (skeep*)
    (("" (typepred scaf)
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - pos!1 n1)
              (("" (ground)
                (("1" (expand gfcount)
                  (("1" (use "sigma_max")
                    (("1" (ground)
                      (("1"
                        (case "len * num_non_terminals + num_non_terminals < exp2(64) - 2")
                        (("1" (assert)
                          (("1"
                            (name-replace lnn
                             "len * num_non_terminals + num_non_terminals")
                            (("1" (assert)
                              (("1"
                                (case-replace
                                 "dep(scaf(pos!1)(n1)) = d1")
                                (("1" (assert) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2"
                            (case "len * num_non_terminals <= exp2(46)")
                            (("1" (assert) (("1" (grind) nil nil)) nil)
                             ("2"
                              (use "lt_times_lt_pos1" :subst
                                   (px
                                    len
                                    nnz
                                    num_non_terminals
                                    y
                                    "exp2(32)"
                                    w
                                    "exp2(8)"))
                              (("1"
                                (hide-all-but (-1 1))
                                (("1"
                                  (grind)
                                  (("1"
                                    (typepred len)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (uint32 type-eq-decl nil integertypes nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (good_good? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR loop?(x) OR good?(x)} -> uint64]" sigmatd
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (sigma_max formula-decl nil sigmatd nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (step subtype "(number_fields.+)(sigmatd.d1, 1)" "uint64")))
 (step_TCC139 0
  (step_TCC144-1 nil 3804991042 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype "sigmatd.fail((number_fields.+)(sigmatd.d1, 1))"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC140 0
  (step_TCC145-1 nil 3804991042
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil)
               ("3" (typepred lflag)
                (("3" (skeep*)
                  (("3" (ground)
                    (("1" (inst?) nil nil) ("2" (grind) nil nil)
                     ("3" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -2 2)
              (("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_good? const-decl "bool" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (sigma def-decl "nat" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil) nil
    (good_entry? const-decl "bool" sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(sigmatd.d1, 1))]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC141 0
  (step_TCC123-1 nil 3804706560
   ("" (skeep*)
    (("" (split +)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred depth) (("2" (grind) nil nil)) nil)
       ("3" (typepred depth)
        (("3" (typepred stack)
          (("3" (expand good_depth?)
            (("3" (expand pushcount)
              (("3" (expand scafcount)
                (("3"
                  (use sigma_dec
                       ("len" "len" "F"
                        "LAMBDA (i: upto(len)): count(num_non_terminals)(push?)(St`scaf(i))"
                        "i" pos!1 "j" "len"))
                  (("1" (ground)
                    (("1" (ground)
                      (("1" (lift-if -1)
                        (("1" (ground)
                          (("1" (grind) nil nil)
                           ("2"
                            (case-replace "(LAMBDA (i: upto(len)):
                                                                                               count(num_non_terminals)(push?)
                                                                                                    (St`scaf WITH [(pos!1)(cur) := fail(1 + d1)](i))) = ((LAMBDA (i: upto(len)):
                                                                                               count(num_non_terminals)(push?)(St`scaf(i)))
                                                                                              WITH [(pos!1)
                                                                                                      := count(num_non_terminals)(push?)(St`scaf(pos!1)) -
                                                                                                          1])")
                            (("1" (hide -1) (("1" (assert) nil nil))
                              nil)
                             ("2" (hide -1 3)
                              (("2"
                                (apply-extensionality)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (expand count)
                                    (("1"
                                      (case "pos!1 = x!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case-replace
                                           "{i: below(num_non_terminals) |
                                                                                                                                                          push?(St`scaf(x!1) WITH [(cur) := fail(1 + d1)](i))} = remove(cur, {i_1: below(num_non_terminals) | push?(St`scaf(x!1)(i_1))})")
                                          (("1"
                                            (rewrite card_remove)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (lift-if +)
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -1 2)
                                              (("2"
                                                (rewrite "count_TCC1")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (apply-extensionality)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (hide -3 -4 -6)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil)
                                               ("3"
                                                (skeep*)
                                                (("3"
                                                  (use step_TCC133)
                                                  (("3"
                                                    (ground)
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide -6 2)
                                            (("3" (grind) nil nil))
                                            nil)
                                           ("4"
                                            (hide 2)
                                            (("4"
                                              (skeep*)
                                              (("4"
                                                (use step_TCC133)
                                                (("4"
                                                  (ground)
                                                  (("4"
                                                    (inst?)
                                                    (("4"
                                                      (inst?)
                                                      (("4"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (expand count +)
                                    (("2"
                                      (use
                                       "nonempty_card[below(num_non_terminals)]")
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand nonempty?)
                                          (("1"
                                            (expand empty?)
                                            (("1"
                                              (inst - "nt(stack)")
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (typepred
                                                   "nt(stack)")
                                                  (("2"
                                                    (expand
                                                     "good_push_entry?")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "count_TCC1")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide 2)
                                  (("3" (grind) nil nil))
                                  nil)
                                 ("4"
                                  (hide 2)
                                  (("4"
                                    (use step_TCC133)
                                    (("4"
                                      (ground)
                                      (("4"
                                        (inst?)
                                        (("4"
                                          (inst?)
                                          (("4" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide -1)
                              (("3"
                                (expand count)
                                (("3"
                                  (use
                                   "nonempty_card[below(num_non_terminals)]")
                                  (("1"
                                    (ground)
                                    (("1"
                                      (hide -5 5)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "count_TCC1")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (hide -1 3) (("4" (grind) nil nil))
                              nil)
                             ("5" (use step_TCC133)
                              (("5"
                                (ground)
                                (("5"
                                  (inst?)
                                  (("5"
                                    (inst?)
                                    (("5" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand count)
                      (("2"
                        (use "nonempty_card[below(num_non_terminals)]")
                        (("1" (grind) nil nil)
                         ("2" (rewrite count_TCC1)
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (arr type-eq-decl nil arrayCount nil)
    (sigma_dec formula-decl nil sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (nonempty? const-decl "bool" sets nil) nil
    (empty? const-decl "bool" sets nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (count_TCC1 subtype-tcc nil arrayCount nil)
    (card_remove formula-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil) nil
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (step_TCC133 subtype-tcc nil sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    nil nil nil nil nil nil nil nil
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(sigmatd.d1, 1))]))")))
 (step_TCC142 0
  (step_TCC124-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             "fail(1 + d1)")
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (typepred "St`scaf(pos(St`stack))(n1)")
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil))
              nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u "fail(1 + d1)" stack
              rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (typepred "St`scaf(pos(St`stack))(n1)")
          (("1" (grind) nil nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (typepred stack) (("3" (grind) nil nil)) nil))
          nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (ent_push_extensionality formula-decl nil sigmatd nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (d1 skolem-const-decl "uint64" sigmatd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatd nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (cur skolem-const-decl "uint8" sigmatd nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" sigmatd
          nil)
    (len skolem-const-decl "index" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (depth skolem-const-decl "(good_depth?(len, St`scaf))" sigmatd nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(sigmatd.d1, 1))]))")))
 (step_TCC143 0
  (step_TCC140-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1) (("2" (lazy-grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(1, sigmatd.d1))], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest), (number_fields.-)(sigmatd.depth, 1))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.fail((number_fields.+)(1, sigmatd.d1))](i)(sigmatd.n))) ENDIF}")))
 (step_TCC144 0
  (step_TCC134-1 nil 3804904050 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatd nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.stack"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC145 0
  (step_TCC134-1 nil 3804706560
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (len skolem-const-decl "index" sigmatd nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n1) := sigmatd.stack]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC146 0
  (step_TCC135-1 nil 3804706560
   ("" (skeep*)
    (("" (split)
      (("1" (typepred stack)
        (("1" (typepred depth)
          (("1" (expand good_depth?)
            (("1" (expand pushcount)
              (("1" (use scafcount_max)
                (("1" (assert)
                  (("1" (use exp2_lt :subst (n 41 m 64))
                    (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "good_depth?")
        (("2" (expand pushcount)
          (("2" (rewrite scafcount_update)
            (("1" (lift-if)
              (("1" (ground)
                (("1" (typepred stack) (("1" (grind) nil nil)) nil)
                 ("2" (typepred depth)
                  (("2" (grind :exclude scafcount) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pushcount const-decl "uint64" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (exp2_lt formula-decl nil exp2 nil)
    (scafcount_max formula-decl nil sigmatd nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scafcount_update formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.+)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n1) := sigmatd.stack]))")))
 (step_TCC147 0
  (step_TCC136-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (expand "good_stack?" +)
          (("2" (ground)
            (("1" (grind) nil nil)
             ("2" (lemma good_mem_stack)
              (("2"
                (inst - G "depth" len scaf "push(pos!1, n1)" "stack"
                 stack)
                (("1" (ground)
                  (("1" (grind) nil nil)
                   ("2" (use mem_stack_push) (("2" (ground) nil nil))
                    nil)
                   ("3" (grind) nil nil))
                  nil)
                 ("2" (grind) nil nil) ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand fine_stack? +)
        (("3" (ground)
          (("1" (lemma mem_mem_stack)
            (("1" (inst - G depth len scaf _ _ _ _)
              (("1"
                (inst - "push(pos!1, n1)" "push(pos!1, n1)" stack
                 stack)
                (("1" (ground)
                  (("1" (hide -2)
                    (("1" (use mem_stack_push) (("1" (ground) nil nil))
                      nil))
                    nil)
                   ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                   ("3" (typepred stack) (("3" (grind) nil nil)) nil)
                   ("4" (use mem_stack_push) (("4" (ground) nil nil))
                    nil)
                   ("5" (typepred stack) (("5" (grind) nil nil)) nil))
                  nil)
                 ("2" (typepred stack) (("2" (grind) nil nil)) nil)
                 ("3" (typepred stack) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2"
            (use fine_mem_stack :subst
                 (len len entry "push(pos!1, n1)" u stack stack stack))
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (use mem_stack_push) (("2" (ground) nil nil)) nil)
               ("3" (grind) nil nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil)
             ("3" (grind)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (mem_stack_push formula-decl nil sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (G skolem-const-decl "lang_spec" sigmatd nil)
    (s skolem-const-decl "strings(len)" sigmatd nil)
    (start skolem-const-decl "upto(len)" sigmatd nil)
    (rootnt skolem-const-decl "non_terminal" sigmatd nil)
    (St skolem-const-decl "state(len, G, s, start, rootnt)" sigmatd
     nil)
    (stack skolem-const-decl "(fine_stack?(len, G, St`depth, St`scaf))"
     sigmatd nil)
    (n1 skolem-const-decl "non_terminal" sigmatd nil)
    (pos!1 skolem-const-decl "uint32" sigmatd nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" sigmatd
          nil)
    (len skolem-const-decl "index" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (mem_mem_stack formula-decl nil sigmatd nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.push(sigmatd.pos, sigmatd.n1)"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.+)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n1) := sigmatd.stack]))")))
 (step_TCC148 0
  (step_TCC137-1 nil 3804730988
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred lflag)
        (("1" (assert)
          (("1" (hide -2)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred lflag)
        (("2" (assert)
          (("2" (hide -1)
            (("2" (skeep*)
              (("2" (lift-if)
                (("2" (ground)
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (typepred stack) (("1" (grind) nil nil))
                        nil)
                       ("2" (inst?) nil nil))
                      nil))
                    nil)
                   ("2" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ent type-decl nil sigmatd nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.St`lflag"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.n1 = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n1) := sigmatd.stack], sigmatd.pos, sigmatd.n1, (number_fields.+)(1, sigmatd.depth))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.n1) := sigmatd.stack](i)(sigmatd.n))) ENDIF}")))
 (step_TCC149 0
  (step_TCC149-1 nil 3888115312 ("" (subtype-tcc) nil nil) nil nil
   (step subtype "sigmatd.scaf(sigmatd.pos)(sigmatd.n1)"
         "{u: sigmatd.ent | booleans.=>(sigmatd.loop?(u), reals.<((number_fields.+)(sigmatd.dep(u), 2), exp2.exp2(64)))}")))
 (step_TCC150 0
  (step_TCC105-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (step subtype
         "sigmatd.loop(sigmatd.incdepth(sigmatd.scaf(sigmatd.pos)(sigmatd.n1)))"
         "(sigmatd.nice_entry?(sigmatd.len, sigmatd.pos))")))
 (step_TCC151 0
  (step_TCC106-1 nil 3804455654
   ("" (skeep*)
    (("" (typepred "scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("1" (hide -2) (("1" (grind) nil nil)) nil)
           ("2" (use good_good_tscaffold)
            (("1" (ground)
              (("1" (typepred stack) (("1" (grind) nil nil)) nil)
               ("2" (typepred stack)
                (("2" (hide 2)
                  (("2" (expand fine_entry?) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep*)
                  (("3" (typepred lflag)
                    (("3" (case lflag)
                      (("1" (assert)
                        (("1" (hide -3) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (assert) (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred stack) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good? const-decl "bool" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (good_fail? const-decl "bool" sigmatd nil)
    (sigma def-decl "nat" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil) nil
    (good_entry? const-decl "bool" sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fine_entry? const-decl "bool" sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (loop adt-constructor-decl "[uint64 -> (loop?)]" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_good_tscaffold formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype
         "sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.scaf(sigmatd.pos)(sigmatd.n1)))]"
         "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(sigmatd.start, sigmatd.rootnt))")))
 (step_TCC152 0
  (step_TCC131-1 nil 3804706560
   ("" (skeep*)
    (("" (typepred stack)
      (("" (typepred depth)
        (("" (expand good_depth?)
          (("" (expand pushcount)
            (("" (use scafcount_max)
              (("" (assert)
                (("" (use exp2_lt :subst (n 41 m 64))
                  (("" (ground)
                    (("1" (grind) nil nil)
                     ("2" (rewrite scafcount_update)
                      (("1" (lift-if)
                        (("1" (ground)
                          (("1" (typepred stack)
                            (("1" (grind) nil nil)) nil)
                           ("2" (typepred depth)
                            (("2" (grind :exclude scafcount) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred stack) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (scafcount_max formula-decl nil sigmatd nil)
    (exp2_lt formula-decl nil exp2 nil)
    (incdepth const-decl "uint64" sigmatd nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR loop?(x) OR good?(x)} -> uint64]" sigmatd
     nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (loop adt-constructor-decl "[uint64 -> (loop?)]" sigmatd nil)
    (scafcount_update formula-decl nil sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (successor const-decl "bool" sigmatd nil)
    (empty? const-decl "bool" sigmatd nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "(number_fields.-)(sigmatd.depth, 1)"
         "(sigmatd.good_depth?(sigmatd.len, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.scaf(sigmatd.pos)(sigmatd.n1)))]))")))
 (step_TCC153 0
  (step_TCC132-1 nil 3804706560
   ("" (skeep*)
    (("" (ground)
      (("1" (typepred stack) (("1" (grind) nil nil)) nil)
       ("2" (typepred stack)
        (("2" (lemma good_mem_stack)
          (("2"
            (inst - G "depth - 1" len scaf "push(pos!1, cur)" "rest"
             loop)
            (("1" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil)
               ("3" (hide 1)
                (("3" (expand "fine_stack?")
                  (("3" (ground)
                    (("1" (grind) nil nil)
                     ("2" (case-replace "push(pos!1, cur) = stack")
                      (("1" (assert) nil nil)
                       ("2" (apply-extensionality) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (grind) nil nil))
              nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil)
             ("4" (grind) nil nil))
            nil))
          nil))
        nil)
       ("3"
        (use fine_mem_stack :subst
             (len len entry "push(pos!1, cur)" u loop stack rest))
        (("1" (ground)
          (("1" (hide 2)
            (("1" (typepred stack) (("1" (grind) nil nil)) nil)) nil)
           ("2" (typepred stack) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (typepred stack) (("3" (grind) nil nil)) nil)) nil)
           ("4" (typepred stack)
            (("4" (hide 1)
              (("4" (expand fine_stack?)
                (("4" (ground)
                  (("1" (grind) nil nil)
                   ("2" (case-replace "push(pos!1, cur) = stack")
                    (("1" (assert) nil nil)
                     ("2" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (typepred stack) (("5" (grind) nil nil)) nil))
          nil)
         ("2" (typepred stack) (("2" (grind) nil nil)) nil)
         ("3" (grind) nil nil)
         ("4" (typepred stack) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (good_mem_stack formula-decl nil sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_push_entry? const-decl "bool" sigmatd nil)
    (ent_push_extensionality formula-decl nil sigmatd nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (loop adt-constructor-decl "[uint64 -> (loop?)]" sigmatd nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" sigmatd
          nil)
    (fine_mem_stack formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "sigmatd.rest"
         "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, (number_fields.-)(sigmatd.depth, 1), sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.scaf(sigmatd.pos)(sigmatd.n1)))]))")))
 (step_TCC154 0
  (step_TCC142-1 nil 3804730988
   ("" (skeep*)
    (("" (typepred stack)
      (("" (expand good_stack?)
        (("" (ground)
          (("1" (grind) nil nil)
           ("2" (grind :exclude (good_stack? fine_stack? mem_stack?))
            nil nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (uint64 type-eq-decl nil integertypes nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (loop_or_push? const-decl "bool" sigmatd nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (successor const-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (step subtype "booleans.TRUE"
         "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.nt(sigmatd.rest) = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.scaf(sigmatd.pos)(sigmatd.n1)))], sigmatd.pos(sigmatd.rest), sigmatd.nt(sigmatd.rest), (number_fields.-)(sigmatd.depth, 1))) ELSE FORALL (i: naturalnumbers.upto(sigmatd.len)), n: (booleans.NOT)(sigmatd.loop?(sigmatd.St`scaf WITH [(sigmatd.pos)(sigmatd.cur) := sigmatd.loop(sigmatd.incdepth(sigmatd.scaf(sigmatd.pos)(sigmatd.n1)))](i)(sigmatd.n))) ENDIF}")))
 (size_TCC1 0
  (size_TCC1-1 nil 3808434333 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (size subtype "sigmatd.len" "naturalnumbers.upto(sigmatd.len)")))
 (size_TCC2 0
  (size_TCC2-1 nil 3808434333
   ("" (skeep*)
    (("" (typepred "St`depth")
      (("" (expand good_depth?)
        (("" (expand pushcount)
          (("" (use sigma_max) (("" (grind :exclude exp2) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (index type-eq-decl nil integertypes nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (sigma_max formula-decl nil sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (size subtype
         "(number_fields.-)((number_fields.*(((number_fields.+)(sigmatd.len, 1)), sigmatd.num_non_terminals)), sigmatd.St`depth)"
         "nat")))
 (endstate_TCC1 0
  (endstate_TCC1-1 nil 3804455654
   ("" (skeep*) (("" (typepred "st`stack") (("" (grind) nil nil)) nil))
    nil)
   ((state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (endstate subtype "sigmatd.st`stack" "(sigmatd.push?)")))
 (parse_TCC1 0
  (parse_TCC2-1 nil 3804455654
   ("" (use well_founded_le) (("" (grind :exclude <) nil nil)) nil)
   ((well_founded? const-decl "bool" orders nil)
    (restrict const-decl "R" restrict nil)
    (well_founded_le formula-decl nil ordinals nil))
   nil
   (parse well-founded
          "restrict[[ordstruct_adt.ordstruct, ordstruct_adt.ordstruct], [ordinal, ordinal], booleans.bool].restrict(ordinals.<)"
          "nil")))
 (parse_TCC2 0
  (parse_TCC3-1 nil 3804455654
   ("" (skeep*) (("" (typepred "St`stack") (("" (grind) nil nil)) nil))
    nil)
   ((state type-eq-decl nil sigmatd nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (parse subtype "sigmatd.St"
          "sigmatd.endstate(sigmatd.len, sigmatd.G, sigmatd.s, sigmatd.start, sigmatd.root)")))
 (parse_TCC3 0
  (parse_TCC4-1 nil 3804455654
   ("" (skeep*)
    (("" (expand restrict)
      (("" (expand size)
        (("" (rewrite lex2_lt)
          (("1" (flatten)
            (("1" (hide 3)
              (("1" (typepred "St`stack")
                (("1" (apply (then (expand step) (lift-if) (ground)))
                  (("1" (hide 1) (("1" (grind) nil nil)) nil)
                   ("2" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil)
                   ("3" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil)
                   ("4" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("5" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil)
                   ("6" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil)
                   ("7" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("8" (grind :defs nil)
                    (("8" (rewrite scafcount_update)
                      (("1" (grind :defs nil)
                        (("1" (grind) nil nil) ("2" (grind) nil nil)
                         ("3" (grind) nil nil))
                        nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil))
                      nil))
                    nil)
                   ("9" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil)
                   ("10" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("11" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("12" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (expand nice_entry?)
                        (("2" (expand "good_good_entry?")
                          (("2"
                            (typepred
                             "step(len, G, s, start, root)(St)`scaf")
                            (("2" (expand step)
                              (("2"
                                (expand fine_scaffold?)
                                (("2"
                                  (ground)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (expand good_tscaffold?)
                                      (("2"
                                        (inst
                                         -
                                         "pos(St`stack)"
                                         "nt(St`stack)")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("13" (reveal 1)
                    (("13" (hide 2)
                      (("13" (ground)
                        (("1" (expand step)
                          (("1" (rewrite scafcount_update)
                            (("1" (grind :defs nil)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (expand step) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("14" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("15" (reveal 1)
                    (("15" (hide 2)
                      (("15" (ground)
                        (("1" (expand step)
                          (("1" (rewrite scafcount_update)
                            (("1" (grind :defs nil)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (expand step) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("16" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("17" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("18" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (hide 2)
                      (("2"
                        (typepred
                         "step(len, G, s, start, root)(St)`scaf")
                        (("2" (expand fine_scaffold?)
                          (("2" (ground)
                            (("2" (hide -1)
                              (("2"
                                (expand good_tscaffold?)
                                (("2"
                                  (inst
                                   -
                                   "pos(St`stack)"
                                   "nt(St`stack)")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("19" (reveal 1)
                    (("19" (hide 2)
                      (("19" (ground)
                        (("1" (expand step)
                          (("1" (rewrite scafcount_update)
                            (("1" (grind :defs nil)
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (expand step) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("20" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("21" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2"
                      (typepred
                       "step(len, G, s, start, root)(St)`scaf")
                      (("2" (expand fine_scaffold?)
                        (("2" (ground)
                          (("2" (hide -1)
                            (("2" (expand good_tscaffold?)
                              (("2"
                                (inst - "pos(St`stack)" "nt(St`stack)")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("22" (reveal 1)
                    (("22" (hide 2)
                      (("22" (expand step)
                        (("22" (rewrite scafcount_update)
                          (("1" (grind :defs nil)
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("23" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("24" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("25" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("26" (reveal 1)
                    (("26" (hide 2)
                      (("26" (expand step)
                        (("26" (rewrite scafcount_update)
                          (("1" (grind :defs nil)
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("27" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("28" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("29" (rewrite scafcount_update)
                    (("1" (grind :defs nil)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("30" (reveal 1)
                    (("30" (hide 2)
                      (("30" (expand step)
                        (("30" (rewrite scafcount_update)
                          (("1" (grind :defs nil)
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("31" (grind :defs nil)
                    (("31" (rewrite scafcount_update)
                      (("1" (grind :defs nil)
                        (("1" (grind) nil nil) ("2" (grind) nil nil)
                         ("3" (grind) nil nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "St`depth")
            (("2" (expand good_depth?)
              (("2" (expand pushcount)
                (("2" (use sigma_max) (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (typepred "step(len, G, s, start, root)(St)`depth")
            (("3" (expand good_depth?)
              (("3" (expand pushcount)
                (("3" (use sigma_max) (("3" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (lex2_lt formula-decl nil lex2 nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil) (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (uint64 type-eq-decl nil integertypes nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (peg type-decl nil sigmatd nil)
    (lang_spec type-eq-decl nil sigmatd nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatd nil)
    (loop_ready? const-decl "bool" sigmatd nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatd nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (state type-eq-decl nil sigmatd nil)
    (step const-decl "state(len, G, s, start, rootnt)" sigmatd nil)
    (push_or_pending? const-decl "bool" sigmatd nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (successor const-decl "bool" sigmatd nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scafcount_update formula-decl nil sigmatd nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]" sigmatd
     nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatd nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR loop?(x) OR good?(x)} -> uint64]" sigmatd
     nil)
    (concat? adt-recognizer-decl "[peg -> boolean]" sigmatd nil)
    (or? adt-recognizer-decl "[peg -> boolean]" sigmatd nil)
    (e1 shared-adt-accessor-decl
     "[{x: peg | concat?(x) OR or?(x)} -> non_terminal]" sigmatd nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (span adt-accessor-decl "[(good?) -> uint32]" sigmatd nil)
    (e2 shared-adt-accessor-decl
     "[{x: peg | concat?(x) OR or?(x)} -> non_terminal]" sigmatd nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (good_good? const-decl "bool" sigmatd nil)
    (loop adt-constructor-decl "[uint64 -> (loop?)]" sigmatd nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (incdepth const-decl "uint64" sigmatd nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (and? adt-recognizer-decl "[peg -> boolean]" sigmatd nil)
    (not? adt-recognizer-decl "[peg -> boolean]" sigmatd nil)
    (e shared-adt-accessor-decl
     "[{x: peg | and?(x) OR not?(x)} -> non_terminal]" sigmatd nil)
    (sigma_max formula-decl nil sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (size const-decl "ordinal" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (parse termination
          "sigmatd.parse(sigmatd.len, sigmatd.G, sigmatd.s, sigmatd.start, sigmatd.root)(sigmatd.step(sigmatd.len, sigmatd.G, sigmatd.s, sigmatd.start, sigmatd.root)(sigmatd.St))"
          "nil")))
 (doparse_TCC1 0
  (doparse_TCC3-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (doparse subtype "sigmatd.pend"
    "[non_terminal -> (sigmatd.nice_entry?(sigmatd.len, sigmatd.i))]")))
 (doparse_TCC2 0
  (doparse_TCC2-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (doparse subtype "0" "naturalnumbers.upto(sigmatd.len)")))
 (doparse_TCC3 0
  (doparse_TCC4-1 nil 3804547853 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (num_non_terminals const-decl "byte" sigmatd nil))
   nil (doparse subtype "sigmatd.num_non_terminals" "uint8")))
 (doparse_TCC4 0
  (doparse_TCC4-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((num_non_terminals const-decl "byte" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (doparse subtype "sigmatd.push(0, sigmatd.num_non_terminals)"
    "(sigmatd.nice_entry?(sigmatd.len, 0))")))
 (doparse_TCC5 0
  (doparse_TCC5-1 nil 3804455654 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (good_entry? const-decl "bool" sigmatd nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (good_root? const-decl "bool" sigmatd nil)
    (hasdepth? const-decl "bool" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (gfcount const-decl "uint64" sigmatd nil)
    (good_tscaffold? const-decl "bool" sigmatd nil)
    (fine_scaffold? const-decl "bool" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (doparse subtype
    "(LAMBDA (i: naturalnumbers.upto(sigmatd.len)): sigmatd.pend) WITH [(0)(sigmatd.n) := sigmatd.push(0, sigmatd.num_non_terminals)]"
    "(sigmatd.fine_scaffold?(sigmatd.len, sigmatd.G, sigmatd.s)(0, sigmatd.n))")))
 (doparse_TCC6 0
  (doparse_TCC1-1 nil 3804455654
   ("" (skeep*)
    (("" (grind :exclude good_depth?)
      (("" (expand good_depth?)
        (("" (expand pushcount)
          (("" (rewrite scafcount_update)
            (("" (use "empty_card[below(255)]")
              (("1" (ground)
                (("1" (replace -2 :hide? t)
                  (("1" (rewrite sigma_zero) nil nil)) nil))
                nil)
               ("2" (hide 2)
                (("2" (inst + 255 "id[below(255)]")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((num_non_terminals const-decl "byte" sigmatd nil)
    (pushcount const-decl "uint64" sigmatd nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (empty_card formula-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (FALSE const-decl "bool" booleans nil)
    (sigma_zero formula-decl nil sigmatd nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (restrict const-decl "R" restrict nil)
    (scafcount const-decl "uint64" sigmatd nil)
    (count const-decl "upto(len)" arrayCount nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (push adt-constructor-decl "[[uint32, uint8] -> (push?)]" sigmatd
          nil)
    (uint8 type-eq-decl nil integertypes nil)
    (uint32 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (pending adt-constructor-decl "(pending?)" sigmatd nil)
    (pending? adt-recognizer-decl "[ent -> boolean]" sigmatd nil)
    (scaffold type-eq-decl nil sigmatd nil)
    (ent type-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (byte type-eq-decl nil sigmatd nil) (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (scafcount_update formula-decl nil sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nice_entry? const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (good_good_entry? const-decl "bool" sigmatd nil)
    (good_depth? const-decl "bool" sigmatd nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (doparse subtype "1"
    "(sigmatd.good_depth?(sigmatd.len, (LAMBDA (i: naturalnumbers.upto(sigmatd.len)): sigmatd.pend) WITH [(0)(sigmatd.n) := sigmatd.push(0, sigmatd.num_non_terminals)]))")))
 (doparse_TCC7 0
  (doparse_TCC6-1 nil 3804534082 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fine_stack? def-decl "bool" sigmatd nil)
    (mem_stack? def-decl "bool" sigmatd nil)
    (good_stack? def-decl "bool" sigmatd nil)
    (successor const-decl "bool" sigmatd nil)
    (good_push_entry? const-decl "bool" sigmatd nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (doparse subtype "sigmatd.push(0, sigmatd.n)"
    "(sigmatd.fine_stack?(sigmatd.len, sigmatd.G, 1, (LAMBDA (i: naturalnumbers.upto(sigmatd.len)): sigmatd.pend) WITH [(0)(sigmatd.n) := sigmatd.push(0, sigmatd.num_non_terminals)]))")))
 (doparse_TCC8 0
  (doparse_TCC8-1 nil 3804730988 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil) (byte type-eq-decl nil sigmatd nil)
    (non_terminal type-eq-decl nil sigmatd nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (num_non_terminals const-decl "byte" sigmatd nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (doparse subtype "booleans.FALSE"
    "{b: booleans.bool | IF b THEN booleans.OR(sigmatd.n = sigmatd.num_non_terminals, sigmatd.loop_ready?(sigmatd.len, sigmatd.G, (LAMBDA (i: naturalnumbers.upto(sigmatd.len)): sigmatd.pend) WITH [(0)(sigmatd.n) := sigmatd.push(0, sigmatd.num_non_terminals)], 0, sigmatd.n, 1)) ELSE FORALL (i_1: naturalnumbers.upto(sigmatd.len)), (n_1: sigmatd.non_terminal): (booleans.NOT)(sigmatd.loop?((LAMBDA (i: naturalnumbers.upto(sigmatd.len)): sigmatd.pend) WITH [(0)(sigmatd.n) := sigmatd.push(0, sigmatd.num_non_terminals)](i_1)(n_1))) ENDIF}"))))

