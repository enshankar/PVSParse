(sigmatdproof
 (inqstack_TCC1 0
  (inqstack_TCC1-1 nil 3888202986 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (<< adt-def-decl "(strict_well_founded?[qstack])" sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (inqstack termination
    "sigmatdproof.inqstack(sigmatdproof.n, sigmatdproof.i, sigmatdproof.T)"
    "nil")))
 (stacksize_TCC1 0
  (stacksize_TCC1-1 nil 3888202986 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (uint32 type-eq-decl nil integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (<< adt-def-decl "(strict_well_founded?[qstack])" sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (stacksize termination "sigmatdproof.stacksize(sigmatdproof.T)"
    "nil")))
 (good_parsetree?_TCC1 0
  (good_parsetree?_TCC1-1 nil 3888202986 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< adt-def-decl "(strict_well_founded?[parsetree])" sigmatdproof
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? termination
    "sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i, sigmatdproof.Q)"
    "nil")))
 (good_parsetree?_TCC2 0
  (good_parsetree?_TCC2-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.E"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC3 0
  (good_parsetree?_TCC3-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.entry(sigmatdproof.Q)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC4 0
  (good_parsetree?_TCC4-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.E"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC5 0
  (good_parsetree?_TCC5-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.entry(sigmatdproof.Q)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC6 0
  (good_parsetree?_TCC6-1 nil 3888202986 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< adt-def-decl "(strict_well_founded?[parsetree])" sigmatdproof
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? termination
    "sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i, sigmatdproof.Q)"
    "nil")))
 (good_parsetree?_TCC7 0
  (good_parsetree?_TCC7-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.E"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC8 0
  (good_parsetree?_TCC8-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.entry(sigmatdproof.Q)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC9 0
  (good_parsetree?_TCC9-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.E"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC10 0
  (good_parsetree?_TCC10-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.entry(sigmatdproof.Q)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC11 0
  (good_parsetree?_TCC11-1 nil 3888202986
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< adt-def-decl "(strict_well_founded?[parsetree])" sigmatdproof
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? termination
    "sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i, sigmatdproof.Q)"
    "nil")))
 (good_parsetree?_TCC12 0
  (good_parsetree?_TCC12-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.E"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC13 0
  (good_parsetree?_TCC13-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.entry(sigmatdproof.Q)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC14 0
  (good_parsetree?_TCC14-1 nil 3888202986
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< adt-def-decl "(strict_well_founded?[parsetree])" sigmatdproof
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? termination
    "sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i, sigmatdproof.Q)"
    "nil")))
 (good_parsetree?_TCC15 0
  (good_parsetree?_TCC15-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.E"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC16 0
  (good_parsetree?_TCC16-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.entry(sigmatdproof.Q)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC17 0
  (good_parsetree?_TCC17-1 nil 3888202986
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< adt-def-decl "(strict_well_founded?[parsetree])" sigmatdproof
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? termination
    "sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i, sigmatdproof.Q)"
    "nil")))
 (good_parsetree?_TCC18 0
  (good_parsetree?_TCC18-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype
    "(number_fields.+)(sigmatdproof.i, sigmatopdown.span(sigmatdproof.entry(sigmatdproof.Q)))"
    "{i | reals.<=(sigmatdproof.i, sigmatdproof.len)}")))
 (good_parsetree?_TCC19 0
  (good_parsetree?_TCC19-1 nil 3888202986
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (<< adt-def-decl "(strict_well_founded?[parsetree])" sigmatdproof
     nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? termination
    "sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n2, (number_fields.+)(sigmatdproof.i, sigmatopdown.span(sigmatdproof.entry(sigmatdproof.Q))), sigmatdproof.R)"
    "nil")))
 (good_parsetree?_TCC20 0
  (good_parsetree?_TCC20-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.E"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC21 0
  (good_parsetree?_TCC21-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.entry(sigmatdproof.Q)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC22 0
  (good_parsetree?_TCC22-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.entry(sigmatdproof.R)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC23 0
  (good_parsetree?_TCC23-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype
    "(number_fields.+)(sigmatdproof.i, sigmatopdown.span(sigmatdproof.entry(sigmatdproof.Q)))"
    "{i | reals.<=(sigmatdproof.i, sigmatdproof.len)}")))
 (good_parsetree?_TCC24 0
  (good_parsetree?_TCC24-1 nil 3888202986
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (<< adt-def-decl "(strict_well_founded?[parsetree])" sigmatdproof
     nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? termination
    "sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n2, (number_fields.+)(sigmatdproof.i, sigmatopdown.span(sigmatdproof.entry(sigmatdproof.Q))), sigmatdproof.R)"
    "nil")))
 (good_parsetree?_TCC25 0
  (good_parsetree?_TCC25-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.E"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC26 0
  (good_parsetree?_TCC26-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.entry(sigmatdproof.Q)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC27 0
  (good_parsetree?_TCC27-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.entry(sigmatdproof.R)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC28 0
  (good_parsetree?_TCC28-1 nil 3888202986
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< adt-def-decl "(strict_well_founded?[parsetree])" sigmatdproof
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? termination
    "sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i, sigmatdproof.Q)"
    "nil")))
 (good_parsetree?_TCC29 0
  (good_parsetree?_TCC29-1 nil 3888202986
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< adt-def-decl "(strict_well_founded?[parsetree])" sigmatdproof
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? termination
    "sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n2, sigmatdproof.i, sigmatdproof.R)"
    "nil")))
 (good_parsetree?_TCC30 0
  (good_parsetree?_TCC30-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.E"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC31 0
  (good_parsetree?_TCC31-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.entry(sigmatdproof.Q)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC32 0
  (good_parsetree?_TCC32-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.entry(sigmatdproof.R)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC33 0
  (good_parsetree?_TCC33-1 nil 3888202986
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< adt-def-decl "(strict_well_founded?[parsetree])" sigmatdproof
     nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? termination
    "sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n2, sigmatdproof.i, sigmatdproof.R)"
    "nil")))
 (good_parsetree?_TCC34 0
  (good_parsetree?_TCC34-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.E"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC35 0
  (good_parsetree?_TCC35-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.entry(sigmatdproof.Q)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (good_parsetree?_TCC36 0
  (good_parsetree?_TCC36-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (ent type-decl nil sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (good_parsetree? subtype "sigmatdproof.entry(sigmatdproof.R)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (buildtree_TCC1 0
  (buildtree_TCC1-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype
    "sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (buildtree_TCC2 0
  (buildtree_TCC2-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "z`4") (("" (grind) nil nil)) nil)) nil)
   ((loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (qstack type-decl nil sigmatdproof nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (index type-eq-decl nil integertypes nil)
    (state type-eq-decl nil sigmatopdown nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (buildtree subtype
    "sigmatdproof.z`1`scaf(sigmatdproof.z`4)(sigmatdproof.z`3)"
    "{x: sigmatopdown.ent | booleans.OR(sigmatopdown.fail?(x), sigmatopdown.good?(x))}")))
 (buildtree_TCC3 0
  (buildtree_TCC3-1 nil 3897572107 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype
    "sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n)" "defent")))
 (buildtree_TCC4 0
  (buildtree_TCC5-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (flatten)
          (("" (expand good_tscaffold?)
            (("" (assert) (("" (inst?) (("" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.good_or_fail?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))}")))
 (buildtree_TCC5 0
  (buildtree_TCC21-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (flatten)
          (("" (expand good_tscaffold?)
            (("" (inst?) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree termination
    "sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i)"
    "nil")))
 (buildtree_TCC6 0
  (buildtree_TCC3-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst?)
              ((""
                (typepred
                 "v(len, G, s, rootpos, rootnt)(st, qpush(n, i, S), n1, i)")
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (qstack type-decl nil sigmatdproof nil)
    (parsetree type-decl nil sigmatdproof nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (qpush? adt-recognizer-decl "[qstack -> boolean]" sigmatdproof nil)
    (qpush adt-constructor-decl
     "[[non_terminal, uint32, qstack] -> (qpush?)]" sigmatdproof nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (entry shared-adt-accessor-decl "[parsetree -> defent]"
     sigmatdproof nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype
    "sigmatdproof.one(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n), sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i))"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.S, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatdproof.entry(sigmatdproof.P) = sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n))}")))
 (buildtree_TCC7 0
  (buildtree_TCC7-1 nil 3897572107 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype
    "sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n)" "defent")))
 (buildtree_TCC8 0
  (buildtree_TCC9-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.good_or_fail?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))}")))
 (buildtree_TCC9 0
  (buildtree_TCC23-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst?) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree termination
    "sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i)"
    "nil")))
 (buildtree_TCC10 0
  (buildtree_TCC4-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n)
              ((""
                (typepred
                 "v(len, G, s, rootpos, rootnt)(st, qpush(n, i, S), n1, i)")
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (qstack type-decl nil sigmatdproof nil)
    (parsetree type-decl nil sigmatdproof nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (qpush? adt-recognizer-decl "[qstack -> boolean]" sigmatdproof nil)
    (qpush adt-constructor-decl
     "[[non_terminal, uint32, qstack] -> (qpush?)]" sigmatdproof nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (entry shared-adt-accessor-decl "[parsetree -> defent]"
     sigmatdproof nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype
    "sigmatdproof.one(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n), sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i))"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.S, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatdproof.entry(sigmatdproof.P) = sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n))}")))
 (buildtree_TCC11 0
  (buildtree_TCC11-1 nil 3897572107 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype
    "sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n)" "defent")))
 (buildtree_TCC12 0
  (buildtree_TCC13-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.good_or_fail?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))}")))
 (buildtree_TCC13 0
  (buildtree_TCC27-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree termination
    "sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i)"
    "nil")))
 (buildtree_TCC14 0
  (buildtree_TCC10-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n)
              ((""
                (typepred
                 "v(len, G, s, rootpos, rootnt)(st, qpush(n, i, S), n1, i)")
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (qstack type-decl nil sigmatdproof nil)
    (parsetree type-decl nil sigmatdproof nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (qpush? adt-recognizer-decl "[qstack -> boolean]" sigmatdproof nil)
    (qpush adt-constructor-decl
     "[[non_terminal, uint32, qstack] -> (qpush?)]" sigmatdproof nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (entry shared-adt-accessor-decl "[parsetree -> defent]"
     sigmatdproof nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype
    "sigmatdproof.one(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n), sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i))"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.S, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatdproof.entry(sigmatdproof.P) = sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n))}")))
 (buildtree_TCC15 0
  (buildtree_TCC17-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.good_or_fail?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))}")))
 (buildtree_TCC16 0
  (buildtree_TCC29-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree termination
    "sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i)"
    "nil")))
 (buildtree_TCC17 0
  (buildtree_TCC17-1 nil 3897572107 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (entry shared-adt-accessor-decl "[parsetree -> defent]"
     sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (qpush adt-constructor-decl
     "[[non_terminal, uint32, qstack] -> (qpush?)]" sigmatdproof nil)
    (qpush? adt-recognizer-decl "[qstack -> boolean]" sigmatdproof nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (parsetree type-decl nil sigmatdproof nil)
    (qstack type-decl nil sigmatdproof nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype
    "sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n)" "defent")))
 (buildtree_TCC18 0
  (buildtree_TCC31-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (qstack type-decl nil sigmatdproof nil)
    (parsetree type-decl nil sigmatdproof nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (qpush? adt-recognizer-decl "[qstack -> boolean]" sigmatdproof nil)
    (qpush adt-constructor-decl
     "[[non_terminal, uint32, qstack] -> (qpush?)]" sigmatdproof nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (entry shared-adt-accessor-decl "[parsetree -> defent]"
     sigmatdproof nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype
    "sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)"
    "(sigmatopdown.good?)")))
 (buildtree_TCC19 0
  (buildtree_TCC32-1 nil 3888202986
   ("" (skeep* :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (expand "good_tscaffold?")
          (("" (flatten)
            (("" (inst-cp - i n)
              (("" (inst - i n1) (("" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype
    "(number_fields.+)(sigmatdproof.i, sigmatopdown.span(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.good_or_fail?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n2)))}")))
 (buildtree_TCC20 0
  (buildtree_TCC36-1 nil 3888202986
   ("" (skeep* :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree termination
    "sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n2, (number_fields.+)(sigmatdproof.i, sigmatopdown.span(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1))))"
    "nil")))
 (buildtree_TCC21 0
  (buildtree_TCC11-1 nil 3888202986
   ("" (skeep* :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst-cp - i n)
              (("" (inst - i n1) (("" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype
    "sigmatdproof.two(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n), sigmatdproof.E1, sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n2, (number_fields.+)(sigmatdproof.i, sigmatopdown.span(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))))"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.S, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatdproof.entry(sigmatdproof.P) = sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n))}")))
 (buildtree_TCC22 0
  (buildtree_TCC22-1 nil 3897572107 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype
    "sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n)" "defent")))
 (buildtree_TCC23 0
  (buildtree_TCC25-1 nil 3888202986 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.good_or_fail?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))}")))
 (buildtree_TCC24 0
  (buildtree_TCC39-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree termination
    "sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i)"
    "nil")))
 (buildtree_TCC25 0
  (buildtree_TCC33-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.good_or_fail?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n2)))}")))
 (buildtree_TCC26 0
  (buildtree_TCC41-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree termination
    "sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n2, sigmatdproof.i)"
    "nil")))
 (buildtree_TCC27 0
  (buildtree_TCC12-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n)
              ((""
                (typepred
                 "v(len, G, s, rootpos, rootnt)(st, qpush(n, i, S), n2, i)")
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (qstack type-decl nil sigmatdproof nil)
    (parsetree type-decl nil sigmatdproof nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (qpush? adt-recognizer-decl "[qstack -> boolean]" sigmatdproof nil)
    (qpush adt-constructor-decl
     "[[non_terminal, uint32, qstack] -> (qpush?)]" sigmatdproof nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (entry shared-adt-accessor-decl "[parsetree -> defent]"
     sigmatdproof nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype
    "sigmatdproof.two(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n), sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i), sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n2, sigmatdproof.i))"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.S, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatdproof.entry(sigmatdproof.P) = sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n))}")))
 (buildtree_TCC28 0
  (buildtree_TCC28-1 nil 3897572107 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype
    "sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n)" "defent")))
 (buildtree_TCC29 0
  (buildtree_TCC42-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.good_or_fail?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))}")))
 (buildtree_TCC30 0
  (buildtree_TCC44-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree termination
    "sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i)"
    "nil")))
 (buildtree_TCC31 0
  (buildtree_TCC14-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n)
              ((""
                (typepred
                 "v(len, G, s, rootpos, rootnt)(st, qpush(n, i, S), n1, i)")
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (qstack type-decl nil sigmatdproof nil)
    (parsetree type-decl nil sigmatdproof nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (qpush? adt-recognizer-decl "[qstack -> boolean]" sigmatdproof nil)
    (qpush adt-constructor-decl
     "[[non_terminal, uint32, qstack] -> (qpush?)]" sigmatdproof nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (dep shared-adt-accessor-decl
     "[{x: ent | fail?(x) OR good?(x)} -> uint64]" sigmatopdown nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (entry shared-adt-accessor-decl "[parsetree -> defent]"
     sigmatdproof nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype
    "sigmatdproof.one(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n), sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i))"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.S, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatdproof.entry(sigmatdproof.P) = sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n))}")))
 (buildtree_TCC32 0
  (buildtree_TCC32-1 nil 3897572107 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ent type-decl nil sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype
    "sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n)" "defent")))
 (buildtree_TCC33 0
  (buildtree_TCC15-1 nil 3888202986
   ("" (skeep :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n) (("" (grind-with-ext) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good adt-constructor-decl "[[uint64, uint32] -> (good?)]"
     sigmatopdown nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sigma def-decl "nat" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (ent_good_extensionality formula-decl nil sigmatopdown nil)
    (good_good? const-decl "bool" sigmatopdown nil)
    (fail adt-constructor-decl "[uint64 -> (fail?)]" sigmatopdown nil)
    (fail? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (ent_fail_extensionality formula-decl nil sigmatopdown nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (/= const-decl "boolean" notequal nil)
    (good_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildtree subtype
    "sigmatdproof.zero(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n))"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.S, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatdproof.entry(sigmatdproof.P) = sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n))}")))
 (no_push_endstate 0
  (no_push_endstate-1 nil 3888892615
   ("" (skeep :preds? t)
    (("" (typepred "st`depth")
      (("" (typepred "st")
        (("" (expand "good_depth?")
          (("" (typepred "st`stack")
            (("" (grind)
              (("" (use "sigma_pos")
                (("1" (ground)
                  (("1" (use "nonempty_card[below(255)]")
                    (("1" (grind) nil nil)
                     ("2"
                      (inst + 255
                       "id[{i_2: below(255) | push?(st`scaf(i)(i_2))}]")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (skeep*)
                  (("2"
                    (inst + 255
                     "id[{i_2: below(255) | push?(st`scaf(i!1)(i_2))}]")
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((endstate type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (index type-eq-decl nil integertypes nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (pushcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil) nil
    (nonempty_card formula-decl nil finite_sets nil) nil nil nil nil
    nil nil (below type-eq-decl nil nat_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (sigma_pos formula-decl nil sigmatopdown nil)
    (is_finite const-decl "bool" finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (buildloop_TCC1 0
  (buildloop_TCC1-1 nil 3888290026 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype "sigmatdproof.len"
    "naturalnumbers.upto(sigmatdproof.len)")))
 (buildloop_TCC2 0
  (buildloop_TCC2-1 nil 3888290026
   ("" (skeep) (("" (use "scafcount_max") (("" (assert) nil nil)) nil))
    nil)
   ((scafcount_max formula-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "(number_fields.-)(exp2.exp2(40), sigmatopdown.scafcount(sigmatdproof.len, sigmatdproof.A, sigmatopdown.loop?, sigmatdproof.len))"
    "naturalnumber")))
 (buildloop_TCC3 0
  (buildloop_TCC3-1 nil 3888290026 ("" (subtype-tcc) nil nil) nil nil
   (buildloop subtype "d1`1" "naturalnumbers.upto(d1`1)")))
 (buildloop_TCC4 0
  (buildloop_TCC4-1 nil 3888290026 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype "sigmatdproof.len"
    "naturalnumbers.upto(sigmatdproof.len)")))
 (buildloop_TCC5 0
  (buildloop_TCC7-1 nil 3888290026
   ("" (skeep*) (("" (typepred "st`stack") (("" (grind) nil nil)) nil))
    nil)
   ((endstate type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (index type-eq-decl nil integertypes nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (buildloop subtype "sigmatopdown.loop" "defent")))
 (buildloop_TCC6 0
  (buildloop_TCC5-1 nil 3888290026
   ("" (grind)
    (("1" (typepred "st!1`scaf")
      (("1" (expand "fine_scaffold?")
        (("1" (ground)
          (("1" (inst - i!1 n!1) (("1" (ground) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (typepred "st!1`scaf")
      (("2" (expand "fine_scaffold?")
        (("2" (ground)
          (("2" (inst - i!1 n!1) (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil)
     ("3" (typepred "st!1`scaf")
      (("3" (expand "fine_scaffold?")
        (("3" (ground)
          (("3" (inst - i!1 n!1) (("3" (grind) nil nil)) nil)) nil))
        nil))
      nil)
     ("4" (typepred "st!1`scaf")
      (("4" (expand "fine_scaffold?")
        (("4" (ground)
          (("4" (inst - i!1 n!1) (("4" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (qstack type-decl nil sigmatdproof nil)
    (good_qstack? def-decl "bool" sigmatdproof nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil))
   nil
   (buildloop subtype "sigmatdproof.zero(sigmatopdown.loop)"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.S, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatopdown.loop?(sigmatdproof.entry(sigmatdproof.P)))}")))
 (buildloop_TCC7 0
  (buildloop_TCC9-1 nil 3888290026 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (defent? const-decl "bool" sigmatdproof nil))
   nil (buildloop subtype "sigmatopdown.loop" "defent")))
 (buildloop_TCC8 0
  (buildloop_TCC11-1 nil 3888290026 ("" (subtype-tcc) nil nil)
   ((good_good_entry? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (buildloop subtype "sigmatopdown.loop"
    "(sigmatopdown.nice_entry?(sigmatdproof.len, sigmatdproof.i))")))
 (buildloop_TCC9 0
  (buildloop_TCC12-1 nil 3888290026
   ("" (skeep* :preds? t) (("" (lazy-grind) nil nil)) nil)
   ((good_qstack? def-decl "bool" sigmatdproof nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (exp2 def-decl "posnat" exp2 nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S)"
    "{S | booleans.AND(sigmatdproof.good_qstack?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.st`scaf)(sigmatdproof.S), FORALL (i_1: naturalnumbers.upto(sigmatdproof.len)), (n_1: sigmatopdown.non_terminal): booleans.IFF(sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop](i_1)(n_1) = sigmatopdown.loop, sigmatdproof.inqstack(n_1, i_1, sigmatdproof.S)))}")))
 (buildloop_TCC10 0
  (buildloop_TCC13-1 nil 3888290026
   ("" (grind :if-match nil)
    (("" (typepred "st!1`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (inst - i!1 n!1)
            (("" (grind) (("" (use no_push_endstate) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (no_push_endstate formula-decl nil sigmatdproof nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (qstack type-decl nil sigmatdproof nil)
    (good_qstack? def-decl "bool" sigmatdproof nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (buildloop subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.loop?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))}")))
 (buildloop_TCC11 0
  (buildloop_TCC14-1 nil 3888290026
   ("" (skeep* :preds? t)
    (("" (rewrite "scafcount_update")
      (("" (grind :exclude "exp2") nil nil)) nil))
    nil)
   ((scafcount_update formula-decl nil sigmatopdown nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (state type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop termination
    "sigmatdproof.buildloop(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop], sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i)"
    "nil")))
 (buildloop_TCC12 0
  (buildloop_TCC8-1 nil 3888290026
   ("" (skeep* :preds? t)
    ((""
      (typepred
       "v(len, G, s, rootpos, rootnt)(st, A WITH [(i)(n) := loop], qpush(n, i, S), n1, i)")
      (("1" (grind) nil nil)
       ("2" (typepred "st`scaf")
        (("2" (expand "fine_scaffold?")
          (("2" (ground)
            (("2" (inst - i n1) (("2" (grind) nil nil)) nil)) nil))
          nil))
        nil)
       ("3" (ground) (("3" (grind) nil nil)) nil)
       ("4" (lazy-grind) nil nil) ("5" (grind) nil nil))
      nil))
    nil)
   ((entry shared-adt-accessor-decl "[parsetree -> defent]"
     sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (good_qstack? def-decl "bool" sigmatdproof nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (qpush adt-constructor-decl
     "[[non_terminal, uint32, qstack] -> (qpush?)]" sigmatdproof nil)
    (qpush? adt-recognizer-decl "[qstack -> boolean]" sigmatdproof nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (parsetree type-decl nil sigmatdproof nil)
    (uint32 type-eq-decl nil integertypes nil)
    (qstack type-decl nil sigmatdproof nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "sigmatdproof.one(sigmatopdown.loop, sigmatdproof.buildloop(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop], sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i))"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.S, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatopdown.loop?(sigmatdproof.entry(sigmatdproof.P)))}")))
 (buildloop_TCC13 0
  (buildloop_TCC16-1 nil 3888290026 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (defent? const-decl "bool" sigmatdproof nil))
   nil (buildloop subtype "sigmatopdown.loop" "defent")))
 (buildloop_TCC14 0
  (buildloop_TCC19-1 nil 3888290026 ("" (subtype-tcc) nil nil)
   ((good_good_entry? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (buildloop subtype "sigmatopdown.loop"
    "(sigmatopdown.nice_entry?(sigmatdproof.len, sigmatdproof.i))")))
 (buildloop_TCC15 0
  (buildloop_TCC21-1 nil 3888290026
   ("" (skeep* :preds? t) (("" (lazy-grind) nil nil)) nil)
   ((good_qstack? def-decl "bool" sigmatdproof nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (exp2 def-decl "posnat" exp2 nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S)"
    "{S | booleans.AND(sigmatdproof.good_qstack?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.st`scaf)(sigmatdproof.S), FORALL (i_1: naturalnumbers.upto(sigmatdproof.len)), (n_1: sigmatopdown.non_terminal): booleans.IFF(sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop](i_1)(n_1) = sigmatopdown.loop, sigmatdproof.inqstack(n_1, i_1, sigmatdproof.S)))}")))
 (buildloop_TCC16 0
  (buildloop_TCC22-1 nil 3888290026
   ("" (grind)
    (("" (typepred "st!1`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (inst - i!1 n!1)
            (("" (grind) (("" (use no_push_endstate) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (no_push_endstate formula-decl nil sigmatdproof nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (qstack type-decl nil sigmatdproof nil)
    (good_qstack? def-decl "bool" sigmatdproof nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (buildloop subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.loop?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))}")))
 (buildloop_TCC17 0
  (buildloop_TCC23-1 nil 3888290026
   ("" (skeep* :preds? t)
    (("" (rewrite "scafcount_update")
      (("" (grind :exclude "exp2") nil nil)) nil))
    nil)
   ((scafcount_update formula-decl nil sigmatopdown nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (state type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop termination
    "sigmatdproof.buildloop(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop], sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i)"
    "nil")))
 (buildloop_TCC18 0
  (buildloop_TCC10-1 nil 3888290026
   ("" (skeep* :preds? t)
    ((""
      (typepred
       "v(len, G, s, rootpos, rootnt)(st, A WITH [(i)(n) := loop], qpush(n, i, S), n1, i)")
      (("1" (grind) nil nil)
       ("2" (rewrite "scafcount_update")
        (("2" (grind :exclude "exp2") nil nil)) nil)
       ("3" (typepred "st`scaf")
        (("3" (expand "fine_scaffold?")
          (("3" (ground)
            (("3" (inst - i n) (("3" (lazy-grind) nil nil)) nil)) nil))
          nil))
        nil)
       ("4" (lazy-grind) nil nil) ("5" (grind) nil nil))
      nil))
    nil)
   ((entry shared-adt-accessor-decl "[parsetree -> defent]"
     sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (good_qstack? def-decl "bool" sigmatdproof nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (qpush adt-constructor-decl
     "[[non_terminal, uint32, qstack] -> (qpush?)]" sigmatdproof nil)
    (qpush? adt-recognizer-decl "[qstack -> boolean]" sigmatdproof nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (parsetree type-decl nil sigmatdproof nil)
    (uint32 type-eq-decl nil integertypes nil)
    (qstack type-decl nil sigmatdproof nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (count const-decl "upto(len)" arrayCount nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scafcount_update formula-decl nil sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "sigmatdproof.one(sigmatopdown.loop, sigmatdproof.buildloop(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop], sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i))"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.S, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatopdown.loop?(sigmatdproof.entry(sigmatdproof.P)))}")))
 (buildloop_TCC19 0
  (buildloop_TCC24-1 nil 3888290026 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (defent? const-decl "bool" sigmatdproof nil))
   nil (buildloop subtype "sigmatopdown.loop" "defent")))
 (buildloop_TCC20 0
  (buildloop_TCC20-1 nil 3897572107 ("" (subtype-tcc) nil nil)
   ((good_good_entry? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (buildloop subtype "sigmatopdown.loop"
    "(sigmatopdown.nice_entry?(sigmatdproof.len, sigmatdproof.i))")))
 (buildloop_TCC21 0
  (buildloop_TCC30-1 nil 3888290026
   ("" (skeep* :preds? t) (("" (lazy-grind) nil nil)) nil)
   ((good_qstack? def-decl "bool" sigmatdproof nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (exp2 def-decl "posnat" exp2 nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S)"
    "{S | booleans.AND(sigmatdproof.good_qstack?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.st`scaf)(sigmatdproof.S), FORALL (i_1: naturalnumbers.upto(sigmatdproof.len)), (n_1: sigmatopdown.non_terminal): booleans.IFF(sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop](i_1)(n_1) = sigmatopdown.loop, sigmatdproof.inqstack(n_1, i_1, sigmatdproof.S)))}")))
 (buildloop_TCC22 0
  (buildloop_TCC31-1 nil 3888290026 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (qstack type-decl nil sigmatdproof nil)
    (good_qstack? def-decl "bool" sigmatdproof nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.loop?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))}")))
 (buildloop_TCC23 0
  (buildloop_TCC32-1 nil 3888290026
   ("" (skeep* :preds? t)
    (("" (rewrite "scafcount_update")
      (("" (grind :exclude "exp2") nil nil)) nil))
    nil)
   ((scafcount_update formula-decl nil sigmatopdown nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (state type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop termination
    "sigmatdproof.buildloop(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop], sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i)"
    "nil")))
 (buildloop_TCC24 0
  (buildloop_TCC15-1 nil 3888290026
   ("" (skeep* :preds? t) (("" (grind) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (exp2 def-decl "posnat" exp2 nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "sigmatdproof.one(sigmatopdown.loop, sigmatdproof.buildloop(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop], sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i))"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.S, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatopdown.loop?(sigmatdproof.entry(sigmatdproof.P)))}")))
 (buildloop_TCC25 0
  (buildloop_TCC25-1 nil 3897572107 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (defent? const-decl "bool" sigmatdproof nil))
   nil (buildloop subtype "sigmatopdown.loop" "defent")))
 (buildloop_TCC26 0
  (buildloop_TCC34-1 nil 3888290026
   ("" (skeep* :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n)
              (("" (grind)
                (("1" (use no_push_endstate) nil nil)
                 ("2" (use no_push_endstate) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((endstate type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (no_push_endstate formula-decl nil sigmatdproof nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.good_or_fail?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))}")))
 (buildloop_TCC27 0
  (buildloop_TCC27-1 nil 3897572107 ("" (subtype-tcc) nil nil)
   ((good_good_entry? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (buildloop subtype "sigmatopdown.loop"
    "(sigmatopdown.nice_entry?(sigmatdproof.len, sigmatdproof.i))")))
 (buildloop_TCC28 0
  (buildloop_TCC43-1 nil 3888290026
   ("" (skeep* :preds? t) (("" (lazy-grind) nil nil)) nil)
   ((good_qstack? def-decl "bool" sigmatdproof nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (exp2 def-decl "posnat" exp2 nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S)"
    "{S | booleans.AND(sigmatdproof.good_qstack?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.st`scaf)(sigmatdproof.S), FORALL (i_1: naturalnumbers.upto(sigmatdproof.len)), (n_1: sigmatopdown.non_terminal): booleans.IFF(sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop](i_1)(n_1) = sigmatopdown.loop, sigmatdproof.inqstack(n_1, i_1, sigmatdproof.S)))}")))
 (buildloop_TCC29 0
  (buildloop_TCC35-1 nil 3888290026
   ("" (skeep* :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (ground)
          (("" (expand "good_tscaffold?")
            (("" (inst - i n)
              (("" (grind)
                (("1" (use no_push_endstate) nil nil)
                 ("2" (use no_push_endstate) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((endstate type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (no_push_endstate formula-decl nil sigmatdproof nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)"
    "(sigmatopdown.good?)")))
 (buildloop_TCC30 0
  (buildloop_TCC17-1 nil 3888290026
   ("" (skeep* :preds? t)
    (("" (typepred "st`scaf")
      (("" (expand "fine_scaffold?")
        (("" (expand "good_tscaffold?")
          (("" (flatten)
            (("" (inst - i n)
              (("" (typepred "st`scaf(i)(n1)")
                (("" (grind)
                  (("1" (use "no_push_endstate") nil nil)
                   ("2" (use "no_push_endstate") nil nil)
                   ("3" (use "no_push_endstate") nil nil)
                   ("4" (use "no_push_endstate") nil nil)
                   ("5" (use "no_push_endstate") nil nil)
                   ("6" (use "no_push_endstate") nil nil)
                   ("7" (use "no_push_endstate") nil nil)
                   ("8" (use "no_push_endstate") nil nil)
                   ("9" (use "no_push_endstate") nil nil)
                   ("10" (use "no_push_endstate") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((endstate type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (no_push_endstate formula-decl nil sigmatdproof nil)
    (span adt-accessor-decl "[(good?) -> uint32]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "((number_fields.+)(sigmatdproof.i, sigmatopdown.span(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1))))"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.loop?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n2)))}")))
 (buildloop_TCC31 0
  (buildloop_TCC45-1 nil 3888290026
   ("" (skeep* :preds? t)
    (("" (rewrite "scafcount_update") (("" (grind) nil nil)) nil)) nil)
   ((scafcount_update formula-decl nil sigmatopdown nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (state type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop termination
    "sigmatdproof.buildloop(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop], sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n2, ((number_fields.+)(sigmatdproof.i, sigmatopdown.span(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))))"
    "nil")))
 (buildloop_TCC32 0
  (buildloop_TCC18-1 nil 3888290026
   ("" (skeep* :preds? t)
    ((""
      (typepred "v(len, G, s, rootpos, rootnt)
                               (st, A WITH [(i)(n) := loop], qpush(n, i, S), n2, (i + span(st`scaf(i)(n1))))")
      (("1" (grind :if-match nil)
        (("1" (typepred "st`scaf(i)(n1)")
          (("1" (grind)
            (("1" (use "no_push_endstate") nil nil)
             ("2" (typepred "st`scaf")
              (("2" (expand "fine_scaffold?")
                (("2" (ground)
                  (("2" (inst - i n) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "st`scaf")
          (("2" (expand "fine_scaffold?")
            (("2" (ground)
              (("2" (inst - i n)
                (("2" (grind) (("2" (use "no_push_endstate") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (rewrite "scafcount_update")
        (("2" (hide 4) (("2" (grind) nil nil)) nil)) nil)
       ("3" (hide 4)
        (("3" (typepred "st`scaf(i)(n1)")
          (("3" (typepred "st`scaf")
            (("3" (expand "fine_scaffold?")
              (("3" (flatten)
                (("3" (expand "good_tscaffold?")
                  (("3" (inst - i n)
                    (("3" (grind)
                      (("1" (use "no_push_endstate") nil nil)
                       ("2" (use "no_push_endstate") nil nil)
                       ("3" (use "no_push_endstate") nil nil)
                       ("4" (use "no_push_endstate") nil nil)
                       ("5" (use "no_push_endstate") nil nil)
                       ("6" (use "no_push_endstate") nil nil)
                       ("7" (use "no_push_endstate") nil nil)
                       ("8" (use "no_push_endstate") nil nil)
                       ("9" (use "no_push_endstate") nil nil)
                       ("10" (use "no_push_endstate") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (hide 4)
        (("4" (typepred "st`scaf")
          (("4" (expand "fine_scaffold?")
            (("4" (ground)
              (("4" (expand "good_tscaffold?")
                (("4" (inst - i n)
                  (("4" (grind)
                    (("1" (use "no_push_endstate") nil nil)
                     ("2" (use "no_push_endstate") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (hide 4) (("5" (lazy-grind) nil nil)) nil)
       ("6" (hide 4) (("6" (grind) nil nil)) nil))
      nil))
    nil)
   ((entry shared-adt-accessor-decl "[parsetree -> defent]"
     sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (span adt-accessor-decl "[(good?) -> uint32]" sigmatopdown nil)
    (good? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (good_qstack? def-decl "bool" sigmatdproof nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (qpush adt-constructor-decl
     "[[non_terminal, uint32, qstack] -> (qpush?)]" sigmatdproof nil)
    (qpush? adt-recognizer-decl "[qstack -> boolean]" sigmatdproof nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (parsetree type-decl nil sigmatdproof nil)
    (uint32 type-eq-decl nil integertypes nil)
    (qstack type-decl nil sigmatdproof nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (no_push_endstate formula-decl nil sigmatdproof nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scafcount_update formula-decl nil sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "sigmatdproof.two(sigmatopdown.loop, sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i), sigmatdproof.buildloop(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop], sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n2, ((number_fields.+)(sigmatdproof.i, sigmatopdown.span(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1))))))"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.S, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatopdown.loop?(sigmatdproof.entry(sigmatdproof.P)))}")))
 (buildloop_TCC33 0
  (buildloop_TCC33-1 nil 3897572107 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (defent? const-decl "bool" sigmatdproof nil))
   nil (buildloop subtype "sigmatopdown.loop" "defent")))
 (buildloop_TCC34 0
  (buildloop_TCC34-1 nil 3897572107 ("" (subtype-tcc) nil nil)
   ((good_good_entry? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (buildloop subtype "sigmatopdown.loop"
    "(sigmatopdown.nice_entry?(sigmatdproof.len, sigmatdproof.i))")))
 (buildloop_TCC35 0
  (buildloop_TCC61-1 nil 3888290026
   ("" (skeep* :preds? t) (("" (lazy-grind) nil nil)) nil)
   ((good_qstack? def-decl "bool" sigmatdproof nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (exp2 def-decl "posnat" exp2 nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S)"
    "{S | booleans.AND(sigmatdproof.good_qstack?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.st`scaf)(sigmatdproof.S), FORALL (i_1: naturalnumbers.upto(sigmatdproof.len)), (n_1: sigmatopdown.non_terminal): booleans.IFF(sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop](i_1)(n_1) = sigmatopdown.loop, sigmatdproof.inqstack(n_1, i_1, sigmatdproof.S)))}")))
 (buildloop_TCC36 0
  (buildloop_TCC44-1 nil 3888290026 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (qstack type-decl nil sigmatdproof nil)
    (good_qstack? def-decl "bool" sigmatdproof nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.loop?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))}")))
 (buildloop_TCC37 0
  (buildloop_TCC63-1 nil 3888290026
   ("" (skeep* :preds? t)
    (("" (rewrite "scafcount_update") (("" (grind) nil nil)) nil)) nil)
   ((scafcount_update formula-decl nil sigmatopdown nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (state type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop termination
    "sigmatdproof.buildloop(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop], sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i)"
    "nil")))
 (buildloop_TCC38 0
  (buildloop_TCC20-1 nil 3888290026
   ("" (skeep* :preds? t)
    ((""
      (typepred
       "v(len, G, s, rootpos, rootnt)(st, A WITH [(i)(n) := loop], qpush(n, i, S), n1, i)")
      (("1" (grind) nil nil)
       ("2" (rewrite "scafcount_update") (("2" (grind) nil nil)) nil)
       ("3" (propax) nil nil)
       ("4" (hide 3) (("4" (lazy-grind) nil nil)) nil)
       ("5" (hide 3) (("5" (grind) nil nil)) nil))
      nil))
    nil)
   ((entry shared-adt-accessor-decl "[parsetree -> defent]"
     sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (good_qstack? def-decl "bool" sigmatdproof nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (qpush adt-constructor-decl
     "[[non_terminal, uint32, qstack] -> (qpush?)]" sigmatdproof nil)
    (qpush? adt-recognizer-decl "[qstack -> boolean]" sigmatdproof nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (parsetree type-decl nil sigmatdproof nil)
    (uint32 type-eq-decl nil integertypes nil)
    (qstack type-decl nil sigmatdproof nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (count const-decl "upto(len)" arrayCount nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scafcount_update formula-decl nil sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "sigmatdproof.one(sigmatopdown.loop, sigmatdproof.buildloop(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop], sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i))"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.S, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatopdown.loop?(sigmatdproof.entry(sigmatdproof.P)))}")))
 (buildloop_TCC39 0
  (buildloop_TCC39-1 nil 3897572107 ("" (subtype-tcc) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (defent? const-decl "bool" sigmatdproof nil))
   nil (buildloop subtype "sigmatopdown.loop" "defent")))
 (buildloop_TCC40 0
  (buildloop_TCC55-1 nil 3888290026
   ("" (skeep* :preds? t)
    (("" (grind)
      (("" (typepred "st`scaf(i)(n1)")
        (("" (grind)
          (("1" (use "no_push_endstate") nil nil)
           ("2" (typepred "st`scaf(i)(n1)")
            (("2" (typepred "st`scaf")
              (("2" (grind :if-match nil)
                (("2" (inst - i n) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((good_or_fail? const-decl "bool" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (exp2 def-decl "posnat" exp2 nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (index type-eq-decl nil integertypes nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (no_push_endstate formula-decl nil sigmatdproof nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.good_or_fail?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n1)))}")))
 (buildloop_TCC41 0
  (buildloop_TCC41-1 nil 3897572107 ("" (subtype-tcc) nil nil)
   ((good_good_entry? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "above(n)" exp2 nil))
   nil
   (buildloop subtype "sigmatopdown.loop"
    "(sigmatopdown.nice_entry?(sigmatdproof.len, sigmatdproof.i))")))
 (buildloop_TCC42 0
  (buildloop_TCC25-1 nil 3888290026
   ("" (skeep* :preds? t) (("" (lazy-grind) nil nil)) nil)
   ((good_qstack? def-decl "bool" sigmatdproof nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (exp2 def-decl "posnat" exp2 nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (uint32 type-eq-decl nil integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S)"
    "{S | booleans.AND(sigmatdproof.good_qstack?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.st`scaf)(sigmatdproof.S), FORALL (i_1: naturalnumbers.upto(sigmatdproof.len)), (n_1: sigmatopdown.non_terminal): booleans.IFF(sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop](i_1)(n_1) = sigmatopdown.loop, sigmatdproof.inqstack(n_1, i_1, sigmatdproof.S)))}")))
 (buildloop_TCC43 0
  (buildloop_TCC53-1 nil 3888290026
   ("" (skeep* :preds? t)
    (("" (typepred "st`scaf")
      (("" (grind :if-match nil)
        (("" (inst - i n)
          (("" (grind)
            (("1" (use "no_push_endstate") nil nil)
             ("2" (use "no_push_endstate") nil nil)
             ("3" (use "no_push_endstate") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((endstate type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (no_push_endstate formula-decl nil sigmatdproof nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.loop?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n2)))}")))
 (buildloop_TCC44 0
  (buildloop_TCC27-1 nil 3888290026
   ("" (skeep* :preds? t)
    (("" (rewrite "scafcount_update") (("" (grind) nil nil)) nil)) nil)
   ((scafcount_update formula-decl nil sigmatopdown nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (state type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop termination
    "sigmatdproof.buildloop(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop], sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n2, sigmatdproof.i)"
    "nil")))
 (buildloop_TCC45 0
  (buildloop_TCC26-1 nil 3888290026
   ("" (skeep* :preds? t)
    ((""
      (typepred
       "v(len, G, s, rootpos, rootnt)(st, A WITH [(i)(n) := loop], qpush(n, i, S), n2, i)")
      (("1" (grind)
        (("1" (typepred "st`scaf")
          (("1" (grind :if-match nil)
            (("1" (inst - i n)
              (("1" (grind) (("1" (use "no_push_endstate") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (rewrite "scafcount_update") (("2" (grind) nil nil)) nil)
       ("3" (hide 4)
        (("3" (typepred "st`scaf")
          (("3" (grind :if-match nil)
            (("3" (inst - i n)
              (("3" (grind)
                (("1" (use "no_push_endstate") nil nil)
                 ("2" (use "no_push_endstate") nil nil)
                 ("3" (use "no_push_endstate") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (hide 4) (("4" (lazy-grind) nil nil)) nil)
       ("5" (hide 4) (("5" (grind) nil nil)) nil))
      nil))
    nil)
   ((entry shared-adt-accessor-decl "[parsetree -> defent]"
     sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (good_qstack? def-decl "bool" sigmatdproof nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (qpush adt-constructor-decl
     "[[non_terminal, uint32, qstack] -> (qpush?)]" sigmatdproof nil)
    (qpush? adt-recognizer-decl "[qstack -> boolean]" sigmatdproof nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (parsetree type-decl nil sigmatdproof nil)
    (uint32 type-eq-decl nil integertypes nil)
    (qstack type-decl nil sigmatdproof nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (no_push_endstate formula-decl nil sigmatdproof nil)
    (loop_or_push? const-decl "bool" sigmatopdown nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scafcount_update formula-decl nil sigmatopdown nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop subtype
    "sigmatdproof.two(sigmatopdown.loop, sigmatdproof.buildtree(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n1, sigmatdproof.i), sigmatdproof.buildloop(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.A WITH [(sigmatdproof.i)(sigmatdproof.n) := sigmatopdown.loop], sigmatdproof.qpush(sigmatdproof.n, sigmatdproof.i, sigmatdproof.S), sigmatdproof.n2, sigmatdproof.i))"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.S, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatopdown.loop?(sigmatdproof.entry(sigmatdproof.P)))}")))
 (buildloop_TCC46 0
  (buildloop_TCC65-1 nil 3888290026
   ("" (skeep* :preds? t)
    (("" (typepred "st`scaf")
      (("" (grind :if-match nil)
        (("1" (inst - i n) (("1" (grind) nil nil)) nil)
         ("2" (inst - i n) (("2" (grind) nil nil)) nil)
         ("3" (inst - i n) (("3" (grind) nil nil)) nil)
         ("4" (inst - i n) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((endstate type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_root? const-decl "bool" sigmatopdown nil)
    (good_entry? const-decl "bool" sigmatopdown nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (count const-decl "upto(len)" arrayCount nil)
    (scafcount const-decl "uint64" sigmatopdown nil)
    (gfcount const-decl "uint64" sigmatopdown nil)
    (good_tscaffold? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildloop cases "sigmatdproof.G(sigmatdproof.n)" "peg: DATATYPE
 BEGIN
  epsilon: epsilon?
  failure: failure?
  any(p: [byte -> bool]): any?
  terminal(a: byte): terminal?
  concat(e1, e2: non_terminal): concat?
  choice(e1, e2: non_terminal): or?
  check(e: non_terminal): and?
  neg(e: non_terminal): not?
 END peg")))
 (buildproof_TCC1 0
  (buildproof_TCC1-1 nil 3893983722 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (plus_u32_u32 application-judgement "uint64" integertypes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildproof subtype "sigmatdproof.A"
    "sigmatopdown.scaffold(sigmatdproof.len)")))
 (buildproof_TCC2 0
  (buildproof_TCC2-1 nil 3893983722 ("" (grind) nil nil)
   ((nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (good_qstack? def-decl "bool" sigmatdproof nil))
   nil
   (buildproof subtype "sigmatdproof.qempty"
    "{S | booleans.AND(sigmatdproof.good_qstack?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.st`scaf)(sigmatdproof.S), FORALL (i: naturalnumbers.upto(sigmatdproof.len)), n: (booleans.NOT)(sigmatdproof.inqstack(sigmatdproof.n, i, sigmatdproof.S)))}")))
 (buildproof_TCC3 0
  (buildproof_TCC3-1 nil 3893983722 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildproof subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.loop?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n)))}")))
 (buildproof_TCC4 0
  (buildproof_TCC4-1 nil 3893983722
   ("" (skeep*)
    ((""
      (typepred "buildloop(len, G, s, rootpos, rootnt)
                               (st, A, qempty, n, i)")
      (("1" (ground) nil nil) ("2" (propax) nil nil)
       ("3" (grind) nil nil) ("4" (grind) nil nil))
      nil))
    nil)
   ((pending? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (buildloop def-decl
     "{P | good_parsetree?(len, G, s)(S, n, i, P) AND loop?(entry(P))}"
     sigmatdproof nil)
    (entry shared-adt-accessor-decl "[parsetree -> defent]"
     sigmatdproof nil)
    (defent type-eq-decl nil sigmatdproof nil)
    (inqstack def-decl "bool" sigmatdproof nil)
    (loop adt-constructor-decl "(loop?)" sigmatopdown nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (good_qstack? def-decl "bool" sigmatdproof nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (uint8 type-eq-decl nil integertypes nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (ent type-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (qempty adt-constructor-decl "(qempty?)" sigmatdproof nil)
    (qempty? adt-recognizer-decl "[qstack -> boolean]" sigmatdproof
     nil)
    (good_parsetree? def-decl "bool" sigmatdproof nil)
    (parsetree type-decl nil sigmatdproof nil)
    (uint32 type-eq-decl nil integertypes nil)
    (qstack type-decl nil sigmatdproof nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index type-eq-decl nil integertypes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_good_entry? const-decl "bool" sigmatopdown nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildproof subtype
    "sigmatdproof.buildloop(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s, sigmatdproof.rootpos, sigmatdproof.rootnt)(sigmatdproof.st, sigmatdproof.A, sigmatdproof.qempty, sigmatdproof.n, sigmatdproof.i)"
    "{P | booleans.AND(sigmatdproof.good_parsetree?(sigmatdproof.len, sigmatdproof.G, sigmatdproof.s)(sigmatdproof.qempty, sigmatdproof.n, sigmatdproof.i, sigmatdproof.P), sigmatdproof.entry(sigmatdproof.P) = sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n))}")))
 (buildproof_TCC5 0
  (buildproof_TCC5-1 nil 3893983722 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (exp2 def-decl "posnat" exp2 nil)
    (index type-eq-decl nil integertypes nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (byte type-eq-decl nil sigmatopdown nil)
    (num_non_terminals const-decl "byte" sigmatopdown nil)
    (non_terminal type-eq-decl nil sigmatopdown nil)
    (ent type-decl nil sigmatopdown nil)
    (push? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (empty? const-decl "bool" sigmatopdown nil)
    (peg type-decl nil sigmatopdown nil)
    (lang_spec type-eq-decl nil sigmatopdown nil)
    (below type-eq-decl nil naturalnumbers nil)
    (strings type-eq-decl nil sigmatopdown nil)
    (nice_entry? const-decl "bool" sigmatopdown nil)
    (scaffold type-eq-decl nil sigmatopdown nil)
    (fine_scaffold? const-decl "bool" sigmatopdown nil)
    (uint64 type-eq-decl nil integertypes nil)
    (good_depth? const-decl "bool" sigmatopdown nil)
    (good_push_entry? const-decl "bool" sigmatopdown nil)
    (good_stack? def-decl "bool" sigmatopdown nil)
    (fine_stack? def-decl "bool" sigmatopdown nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (uint8 type-eq-decl nil integertypes nil)
    (nt adt-accessor-decl "[(push?) -> uint8]" sigmatopdown nil)
    (loop_ready? const-decl "bool" sigmatopdown nil)
    (uint32 type-eq-decl nil integertypes nil)
    (pos adt-accessor-decl "[(push?) -> uint32]" sigmatopdown nil)
    (loop? adt-recognizer-decl "[ent -> boolean]" sigmatopdown nil)
    (state type-eq-decl nil sigmatopdown nil)
    (endstate type-eq-decl nil sigmatopdown nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (defent? const-decl "bool" sigmatdproof nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (good_or_fail? const-decl "bool" sigmatopdown nil)
    (nil application-judgement "above(n)" exp2 nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (buildproof subtype "sigmatdproof.i"
    "{i | booleans.AND(reals.<=(sigmatdproof.i, sigmatdproof.len), sigmatopdown.good_or_fail?(sigmatdproof.st`scaf(sigmatdproof.i)(sigmatdproof.n)))}"))))

