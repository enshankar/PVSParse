#include "sigmatdtest_c.h"

static bytestrings__bytestring_t
make_bytestring(const char *arg)
{   size_t len = strlen(arg);
    uint32_t *array = malloc(len * sizeof(uint32_t));
    
    for (uint32_t i = 0; i < len; ++i) {
        array[i] = arg[i] & 0xff;
    }
    stringliteral_t sl = mk_string(len, array);
    strings__string_t st = strings__make_string(len, (strings_array_2_t)sl);
    bytestrings__bytestring_t bs = bytestrings__mk_bytestring(st);
    free(array); //sl and st are freed in strings__make_string and bytestrings_mk_bytestring
    return bs;
}


int main(){
  double start = get_cpu_time();
  sigmatopdown__ent_adt_t test0 = sigmatdtest__test0();
  sigmatopdown__ent_adt_t test1 = sigmatdtest__test1();
  sigmatopdown__ent_adt_t test11 = sigmatdtest__test11();
  sigmatopdown__ent_adt_t test2 = sigmatdtest__test2();
  sigmatdproof__parsetree_adt_t test3 = sigmatdtest__jsonparsefile(make_bytestring("irModel.json"));
  
  printf("\ntest0 = %d", r_sigmatopdown__goodp(test0));
  printf("\ntest1 = %d", r_sigmatopdown__goodp(test1));
  printf("\ntest11 = %d", r_sigmatopdown__goodp(test11));
  printf("\ntest2 = %d", r_sigmatopdown__goodp(test2));
  printf("\ntest3 = %s", json_sigmatdproof__parsetree_adt(test3));
  double end = get_cpu_time();
  printf("\n CPU Time = %f seconds\n", end - start);
  
  return 0;
}
