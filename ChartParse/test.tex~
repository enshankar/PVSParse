\documentclass[letterpaper,conference,compsoc]{IEEEtran}

\ifCLASSOPTIONcompsoc
  % IEEE Computer Society needs nocompress option
  % requires cite.sty v4.0 or later (November 2003)
  \usepackage[nocompress]{cite}
\else
  % normal IEEE
  \usepackage{cite}
\fi

\usepackage[utf8]{inputenc}
\usepackage{graphicx}
\usepackage{hyperref}
\usepackage{tikz}
\usetikzlibrary{calc,positioning,fit,shapes}

\newcommand{\mavlink}{MAVLink}

\input{preamble}

\lstset{
    breakatwhitespace=false,
    breaklines=true,
    captionpos=b,
    keepspaces=true,
    numbersep=5pt,
    showspaces=false,
    showstringspaces=false,
    showtabs=false,
    tabsize=2,
    basicstyle=\ttfamily\tiny,
    numbers=left,
    %xleftmargin=2em,
    framexleftmargin=1.5em,
    numberstyle=\ttfamily\tiny,
    frame = single,
    linewidth=\linewidth,
    xleftmargin=.1\linewidth,
    xrightmargin=.025\linewidth,
}

\newcommand{\sacomment}[1]{\texttt{(#1 - SA)}}

\begin{document}

\title{Work-in-Progress: The Parsley Data Format Definition Language}
\author{\IEEEauthorblockN{Prashanth Mundkur\\Linda Briesemeister\\Natarajan Shankar}
  \IEEEauthorblockA{SRI International\\
    Menlo Park, CA 94025}
  \and
  \IEEEauthorblockN{Prashant Anantharaman\\ Sameed Ali\\ Sean Smith}
  \IEEEauthorblockA{Dartmouth College\\
    Hanover, NH 03755}}

\maketitle

\begin{abstract}
  Any program that reads formatted input relies on parsing software to check
  the input for validity and transform it into a representation
  suitable for further processing. Many security vulnerabilities can
  be attributed to poorly defined grammars, incorrect parsing, and
  sloppy input validation.  In contrast to programming languages,
  grammars for even common data formats such as DNS and PDF are
  typically context-sensitive and heterogenous.
  However, as in programming languages, a standard notation or {\em
    language} to express these data format grammars can address poor
  or ambiguous definitions, and the automated generation of correct-by-construction
  parsers from such
  grammar specifications can yield correct and type- and memory-safe data parsing routines.
  We present our ongoing work on developing such a data format description language.
  Parsley is a declarative data format definition language that
  combines grammars and constraints in a modular way.  We show how it
  can be used to capture complex data formats such as PDF, DNS, MAVLink, and ELF.
  We briefly describe the processing pipeline we are designing to generate verified parsers
  from these specifications.
\end{abstract}

\lstset{language=parsley}

\end{document}