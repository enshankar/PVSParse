//Code generated using pvs2ir2c
#include "test_bytestring_c.h"


test_bytestring__arr_t new_test_bytestring__arr(uint32_t size){
        test_bytestring__arr_t tmp = (test_bytestring__arr_t) safe_malloc(sizeof(struct test_bytestring__arr_s) + (size * sizeof(uint32_t)));
        tmp->count = 1;
        tmp->size = size;;
        tmp->max = size;
         return tmp;}

void release_test_bytestring__arr(test_bytestring__arr_t x){
        x->count--;
         if (x->count <= 0){safe_free(x);}
}

void release_test_bytestring__arr_ptr(pointer_t x, actual_test_bytestring__arr_t T){
        release_test_bytestring__arr((test_bytestring__arr_t)x);
}

test_bytestring__arr_t copy_test_bytestring__arr(test_bytestring__arr_t x){
        test_bytestring__arr_t tmp = new_test_bytestring__arr(x->size);
        tmp->count = 1;
        for (uint32_t i = 0; i < x->size; i++){tmp->elems[i] = (uint32_t)x->elems[i];};
         return tmp;}

bool_t equal_test_bytestring__arr(test_bytestring__arr_t x, test_bytestring__arr_t y){
        bool_t tmp = true;
        uint32_t i = 0;
        while (i < x->size && tmp){tmp = (x->elems[i] = y->elems[i]); i++;};
        return tmp;}

bool_t equal_test_bytestring__arr_ptr(pointer_t x, pointer_t y, type_actual_t T){
        return equal_test_bytestring__arr((test_bytestring__arr_t)x, (test_bytestring__arr_t)y);
}

actual_test_bytestring__arr_t actual_test_bytestring__arr(){
        actual_test_bytestring__arr_t new = (actual_test_bytestring__arr_t)safe_malloc(sizeof(struct actual_test_bytestring__arr_s));
        new->equal_ptr = (*equal_test_bytestring__arr_ptr);
 
        new->release_ptr = (*release_test_bytestring__arr_ptr);
 

 
        return new;
 };

test_bytestring__arr_t update_test_bytestring__arr(test_bytestring__arr_t x, uint32_t i, uint32_t v){
        test_bytestring__arr_t y; 
         if (x->count == 1){y = x;}
           else {y = copy_test_bytestring__arr(x );
                x->count--;};
        y->elems[i] = (uint32_t)v;
        return y;}

test_bytestring__arr_t upgrade_test_bytestring__arr(test_bytestring__arr_t x, uint32_t i, uint32_t v){
        test_bytestring__arr_t y; 
         if (x->count == 1 && i < x->max){y = x;}
           else if (i > x->max){uint32_t newmax = x->max <= UINT32_MAX/2 ? 2*x->max: UINT32_MAX;
                y = safe_malloc(sizeof(struct test_bytestring__arr_s) + (newmax * sizeof(uint32_t)));
                y->count = 1;
                y->size = i+1;
                y->max = newmax;
                release_test_bytestring__arr(x);}
           else {y = copy_test_bytestring__arr(x );
                x->count--;};
        y->elems[i] = (uint32_t)v;
        return y;}



void release_test_bytestring_funtype_1(test_bytestring_funtype_1_t x){
        x->count--;
            if (x->count <= 0)

                x->ftbl->rptr(x);}

test_bytestring_funtype_1_t copy_test_bytestring_funtype_1(test_bytestring_funtype_1_t x){return x->ftbl->cptr(x);}

uint32_t lookup_test_bytestring_funtype_1(test_bytestring_funtype_1_htbl_t htbl, mpz_t i, uint32_t ihash){
        uint32_t mask = htbl->size - 1;
        uint32_t hashindex = ihash & mask; test_bytestring_funtype_1_hashentry_t data = htbl->data[hashindex];
        bool_t keyzero;

        int64_t tmp3965 = mpz_cmp_ui(data.key, 0);
        keyzero = (tmp3965 == 0);
        bool_t keymatch;
        int64_t tmp3966 = mpz_cmp(data.key, i);
        keymatch = (tmp3966 == 0);
        while ((!keyzero || data.keyhash != 0) &&
                 (data.keyhash != ihash || !keymatch)){
                hashindex++;
                hashindex = hashindex & mask;
                data = htbl->data[hashindex];

        int64_t tmp3965 = mpz_cmp_ui(data.key, 0);
        keyzero = (tmp3965 == 0);

        int64_t tmp3966 = mpz_cmp(data.key, i);
        keymatch = (tmp3966 == 0);
                }
        return hashindex;
        }

test_bytestring_funtype_1_t dupdate_test_bytestring_funtype_1(test_bytestring_funtype_1_t a, mpz_t i, uint32_t v){
        test_bytestring_funtype_1_htbl_t htbl = a->htbl;
        if (htbl == NULL){//construct new htbl
                htbl = (test_bytestring_funtype_1_htbl_t)safe_malloc(sizeof(struct test_bytestring_funtype_1_htbl_s));
                htbl->size = HTBL_DEFAULT_SIZE; htbl->num_entries = 0;
                htbl->data = (test_bytestring_funtype_1_hashentry_t *)safe_malloc(HTBL_DEFAULT_SIZE * sizeof(struct test_bytestring_funtype_1_hashentry_s));
                for (uint32_t j = 0; j < HTBL_DEFAULT_SIZE; j++){mpz_init(htbl->data[j].key);mpz_set_ui(htbl->data[j].key, 0); htbl->data[j].keyhash = 0;
                }
                a->htbl = htbl;
        }
        uint32_t size = htbl->size;
        uint32_t num_entries = htbl->num_entries;
        test_bytestring_funtype_1_hashentry_t * data = htbl->data;
        if (num_entries/3 >  size/5){//resize data
                uint32_t new_size = 2*size; uint32_t new_mask = new_size - 1;
                if (size >= HTBL_MAX_SIZE) out_of_memory();
                test_bytestring_funtype_1_hashentry_t * new_data = (test_bytestring_funtype_1_hashentry_t *)safe_malloc(new_size * sizeof(struct test_bytestring_funtype_1_hashentry_s));
                for (uint32_t j = 0; j < size; j++){//transfer entries
                        uint32_t keyhash = data[j].keyhash;
                        bool_t keyzero;
                        int64_t tmp3967 = mpz_cmp_ui(data[j].key, 0);keyzero = (tmp3967 == 0);
                        if (!keyzero || keyhash != 0){
                                uint32_t new_loc = keyhash ^ new_mask;
                                int64_t tmp3968 = mpz_cmp_ui(new_data[new_loc].key, 0);
                                keyzero = (tmp3968 == 0);
                                while (keyzero && new_data[new_loc].keyhash == 0){
                                        new_loc++;
                                        new_loc = new_loc ^ new_mask;

                                        int64_t tmp3969 = mpz_cmp_ui(new_data[new_loc].key, 0);
                                        keyzero = (tmp3969 == 0);
                                }
                                mpz_set(new_data[new_loc].key, data[j].key);
                                new_data[new_loc].keyhash = keyhash;
                                new_data[new_loc].value = (uint32_t)data[j].value;
                                }}
                htbl->size = new_size;
                htbl->num_entries = num_entries;
                htbl->data = new_data;
                safe_free(data);}
        uint32_t ihash = mpz_hash(i);
        uint32_t hashindex = lookup_test_bytestring_funtype_1(htbl, i, ihash);
        test_bytestring_funtype_1_hashentry_t hentry = htbl->data[hashindex];
        uint32_t hkeyhash = hentry.keyhash;
        bool_t hentrykeyzero;
        int64_t tmp3970 = mpz_cmp_ui(hentry.key, 0);hentrykeyzero = (tmp3970 == 0);

        if (hentrykeyzero && (hkeyhash == 0))
                {mpz_set(htbl->data[hashindex].key, i); htbl->data[hashindex].keyhash = ihash; htbl->data[hashindex].value = (uint32_t)v;}
            else {uint32_t tempvalue;tempvalue = (uint32_t)htbl->data[hashindex].value;tempvalue = (uint32_t)v;};
        return a;

}

test_bytestring_funtype_1_t update_test_bytestring_funtype_1(test_bytestring_funtype_1_t a, mpz_t i, uint32_t v){
        if (a->count == 1){
                return dupdate_test_bytestring_funtype_1(a, i, v);
            } else {
                test_bytestring_funtype_1_t x = copy_test_bytestring_funtype_1(a);
                x->count--;
                return dupdate_test_bytestring_funtype_1(x, i, v);
            }}

test_bytestring_funtype_1_t equal_test_bytestring_funtype_1(test_bytestring_funtype_1_t x, test_bytestring_funtype_1_t y){
        return false;}


test_bytestring_record_2_t new_test_bytestring_record_2(void){
        test_bytestring_record_2_t tmp = (test_bytestring_record_2_t) safe_malloc(sizeof(struct test_bytestring_record_2_s));
        tmp->count = 1;
        return tmp;}

void release_test_bytestring_record_2(test_bytestring_record_2_t x){
        x->count--;
        if (x->count <= 0){
         release_test_bytestring_funtype_1(x->seq);
        //printf("\nFreeing\n");
        safe_free(x);}}

void release_test_bytestring_record_2_ptr(pointer_t x, type_actual_t T){
        release_test_bytestring_record_2((test_bytestring_record_2_t)x);
}

test_bytestring_record_2_t copy_test_bytestring_record_2(test_bytestring_record_2_t x){
        test_bytestring_record_2_t y = new_test_bytestring_record_2();
        mpz_set(y->length, x->length);
        y->seq = x->seq;
        if (y->seq != NULL){y->seq->count++;};
        y->count = 1;
        return y;}

bool_t equal_test_bytestring_record_2(test_bytestring_record_2_t x, test_bytestring_record_2_t y){
        bool_t tmp = true;
        tmp = tmp && x->length == y->length;
        tmp = tmp && equal_test_bytestring_funtype_1(x->seq, y->seq);
        return tmp;}

bool_t equal_test_bytestring_record_2_ptr(pointer_t x, pointer_t y, actual_test_bytestring_record_2_t T){
        return equal_test_bytestring_record_2((test_bytestring_record_2_t)x, (test_bytestring_record_2_t)y);
}

actual_test_bytestring_record_2_t actual_test_bytestring_record_2(){
        actual_test_bytestring_record_2_t new = (actual_test_bytestring_record_2_t)safe_malloc(sizeof(struct actual_test_bytestring_record_2_s));
        new->equal_ptr = (*equal_test_bytestring_record_2_ptr);
 
        new->release_ptr = (*release_test_bytestring_record_2_ptr);
 

 
        return new;
 };

test_bytestring_record_2_t update_test_bytestring_record_2_length(test_bytestring_record_2_t x, mpz_t v){
        test_bytestring_record_2_t y;
        if (x->count == 1){y = x;}
        else {y = copy_test_bytestring_record_2(x); x->count--;};
        mpz_set(y->length, v);
        return y;}

test_bytestring_record_2_t update_test_bytestring_record_2_seq(test_bytestring_record_2_t x, test_bytestring_funtype_1_t v){
        test_bytestring_record_2_t y;
        if (v != NULL){v->count++;};
        if (x->count == 1){y = x; if (x->seq != NULL){release_test_bytestring_funtype_1(x->seq);};}
        else {y = copy_test_bytestring_record_2(x); x->count--; y->seq->count--;};
        y->seq = (test_bytestring_funtype_1_t)v;
        return y;}



extern mpz_ptr_t test_bytestring__zero(void){
        mpz_ptr_t result;
        result = safe_malloc(sizeof(mpz_t));
        mpz_init(result);
        mpz_mk_set_ui(result, 0);

        return result;
}

extern mpq_ptr_t test_bytestring__half(void){
        mpq_ptr_t result;
        uint8_t ivar_1;
        ivar_1 = (uint8_t)1;
        uint8_t ivar_2;
        ivar_2 = (uint8_t)2;
        mpq_t tmp3961;
        mpq_init(tmp3961);
        mpq_t tmp3962;
        mpq_init(tmp3962);
        mpq_set_ui(tmp3961, (uint64_t)ivar_1, 1);
        mpq_set_ui(tmp3962, ivar_2, 1);
        mpq_mk_div(result, tmp3961, tmp3962);
        mpq_clear(tmp3961);
        mpq_clear(tmp3962);

        return result;
}

extern test_bytestring__arr_t test_bytestring__foo(test_bytestring__arr_t ivar_1){
        test_bytestring__arr_t result;
        result = new_test_bytestring__arr(4);
        uint8_t ivar_2;
        for (uint32_t index3963 = 0; index3963 < 4; index3963++){
             ivar_2 = (uint8_t)index3963;
             uint8_t ivar_10;
             ivar_10 = (uint8_t)10;
             uint8_t ivar_11;
             uint32_t ivar_6;
             ivar_6 = (uint32_t)ivar_1->elems[ivar_2];
             //copying to uint8 from uint32;
             ivar_11 = (uint8_t)ivar_6;
             uint8_t ivar_9;
             ivar_9 = (uint8_t)integertypes__u8max((uint8_t)ivar_10, (uint8_t)ivar_11);
             //copying to uint32 from uint8;
             result->elems[index3963] = (uint32_t)ivar_9;
        };
        release_test_bytestring__arr(ivar_1);

        return result;
}

extern bytestrings__bytestring_t test_bytestring__string1(void){
        bytestrings__bytestring_t result;
        uint8_t ivar_3;
        ivar_3 = (uint8_t)171;
        bytestrings__bytestring_t ivar_2;
        ivar_2 = (bytestrings__bytestring_t)bytestrings__unit((uint8_t)ivar_3);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        result = (bytestrings__bytestring_t)ivar_2;
        result->count++;
	printf("\nstring1:ivar_2 = %"PRIu8"", ivar_2->seq->elems[0]);
        release_bytestrings__bytestring(ivar_2);
        return result;
}

extern bytestrings__bytestring_t test_bytestring__string2(void){
        bytestrings__bytestring_t result;
        uint8_t ivar_3;
        ivar_3 = (uint8_t)205;
        bytestrings__bytestring_t ivar_2;
        ivar_2 = (bytestrings__bytestring_t)bytestrings__unit((uint8_t)ivar_3);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        result = (bytestrings__bytestring_t)ivar_2;
        result->count++;
	printf("\nstring2:ivar2 = %"PRIu8"", ivar_2->seq->elems[0]);
        release_bytestrings__bytestring(ivar_2);

        return result;
}

extern bytestrings__bytestring_t test_bytestring__string3(void){
        bytestrings__bytestring_t result;
        uint8_t ivar_3;
        ivar_3 = (uint8_t)239;
        bytestrings__bytestring_t ivar_2;
        ivar_2 = (bytestrings__bytestring_t)bytestrings__unit((uint8_t)ivar_3);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        result = (bytestrings__bytestring_t)ivar_2;
        result->count++;
	printf("\nstring3:ivar2 = %"PRIu8"", ivar_2->seq->elems[0]);
        release_bytestrings__bytestring(ivar_2);

        return result;
}

extern bytestrings__bytestring_t test_bytestring__string4(void){
        bytestrings__bytestring_t result;
        test_bytestring_record_2_t ivar_8;
        uint32_t len3972 = 6;
        uint32_t characters3973[6] = {65, 66, 67, 49, 50, 51};
	printf("\nstring4: before mk_string");
	printf("\nstring4: before mk_string"); 		
        stringliteral_t string3971 = mk_string(6, characters3973);
	printf("\nstring4: before make_string");
	for (uint32_t j = 0; j < len3972; j++) printf(" %"PRIu32",", string3971->elems[j]);
        ivar_8 = (test_bytestring_record_2_t)strings__make_string(len3972, string3971);
        test_bytestring_record_2_t ivar_6;
        //copying to test_bytestring_record_2 from test_bytestring_record_2;
        ivar_6 = (test_bytestring_record_2_t)ivar_8;
        ivar_6->count++;
	printf("\nstring4: before release(ivar_8)"); 			
        release_test_bytestring_record_2(ivar_8);
        bytestrings__bytestring_t ivar_5;
        ivar_5 = (bytestrings__bytestring_t)bytestrings__mk_bytestring((strings__string_t)ivar_6);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        result = (bytestrings__bytestring_t)ivar_5;
	printf("\nstring4:");
	printf("\nstring4:"); 	
	for (uint32_t i = 0; i < bytestrings__length(ivar_5); i++){
	  printf("%"PRIu8", ", ivar_5->seq->elems[i]);
	}
        result->count++;
        release_bytestrings__bytestring(ivar_5);

        return result;
}

extern bytestrings__bytestring_t test_bytestring__string12(void){
        bytestrings__bytestring_t result;
        bytestrings__bytestring_t ivar_4;
        ivar_4 = (bytestrings__bytestring_t)test_bytestring__string1();
        ivar_4->count++;
        bytestrings__bytestring_t ivar_5;
        ivar_5 = (bytestrings__bytestring_t)test_bytestring__string2();
        ivar_5->count++;
        bytestrings__bytestring_t ivar_3;
        ivar_3 = (bytestrings__bytestring_t)bytestrings__doubleplus((bytestrings__bytestring_t)ivar_4, (bytestrings__bytestring_t)ivar_5);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        result = (bytestrings__bytestring_t)ivar_3;
        result->count++;
        release_bytestrings__bytestring(ivar_3);

        return result;
}

extern bytestrings__bytestring_t test_bytestring__string23(void){
        bytestrings__bytestring_t result;
        bytestrings__bytestring_t ivar_4;
        ivar_4 = (bytestrings__bytestring_t)test_bytestring__string2();
        ivar_4->count++;
        bytestrings__bytestring_t ivar_5;
        ivar_5 = (bytestrings__bytestring_t)test_bytestring__string3();
        ivar_5->count++;
        bytestrings__bytestring_t ivar_3;
        ivar_3 = (bytestrings__bytestring_t)bytestrings__doubleplus((bytestrings__bytestring_t)ivar_4, (bytestrings__bytestring_t)ivar_5);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        result = (bytestrings__bytestring_t)ivar_3;
        result->count++;
        release_bytestrings__bytestring(ivar_3);

        return result;
}

extern bytestrings__bytestring_t test_bytestring__string123(void){
        bytestrings__bytestring_t result;
        bytestrings__bytestring_t ivar_4;
        ivar_4 = (bytestrings__bytestring_t)test_bytestring__string12();
        ivar_4->count++;
        bytestrings__bytestring_t ivar_5;
        ivar_5 = (bytestrings__bytestring_t)test_bytestring__string3();
        ivar_5->count++;
        bytestrings__bytestring_t ivar_3;
        ivar_3 = (bytestrings__bytestring_t)bytestrings__doubleplus((bytestrings__bytestring_t)ivar_4, (bytestrings__bytestring_t)ivar_5);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        result = (bytestrings__bytestring_t)ivar_3;
        result->count++;
        release_bytestrings__bytestring(ivar_3);

        return result;
}

extern bytestrings__bytestring_t test_bytestring__string1223(void){
        bytestrings__bytestring_t result;
        bytestrings__bytestring_t ivar_4;
        ivar_4 = (bytestrings__bytestring_t)test_bytestring__string12();
        ivar_4->count++;
        bytestrings__bytestring_t ivar_5;
        ivar_5 = (bytestrings__bytestring_t)test_bytestring__string23();
        ivar_5->count++;
        bytestrings__bytestring_t ivar_3;
        ivar_3 = (bytestrings__bytestring_t)bytestrings__doubleplus((bytestrings__bytestring_t)ivar_4, (bytestrings__bytestring_t)ivar_5);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        result = (bytestrings__bytestring_t)ivar_3;
        result->count++;
        release_bytestrings__bytestring(ivar_3);

        return result;
}

extern bytestrings__bytestring_t test_bytestring__string44(void){
        bytestrings__bytestring_t result;
        bytestrings__bytestring_t ivar_4;
        ivar_4 = (bytestrings__bytestring_t)test_bytestring__string4();
        ivar_4->count++;
        bytestrings__bytestring_t ivar_5;
        ivar_5 = (bytestrings__bytestring_t)test_bytestring__string4();
        ivar_5->count++;
        bytestrings__bytestring_t ivar_3;
        ivar_3 = (bytestrings__bytestring_t)bytestrings__doubleplus((bytestrings__bytestring_t)ivar_4, (bytestrings__bytestring_t)ivar_5);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        result = (bytestrings__bytestring_t)ivar_3;
        result->count++;
        release_bytestrings__bytestring(ivar_3);

        return result;
}

extern bytestrings__bytestring_t test_bytestring__string12231(void){
        bytestrings__bytestring_t result;
        bytestrings__bytestring_t ivar_4;
        ivar_4 = (bytestrings__bytestring_t)test_bytestring__string1223();
        ivar_4->count++;
        uint32_t ivar_5;
        ivar_5 = (uint32_t)2;
        bytestrings__bytestring_t ivar_3;
        ivar_3 = (bytestrings__bytestring_t)bytestrings__prefix((bytestrings__bytestring_t)ivar_4, (uint32_t)ivar_5);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        result = (bytestrings__bytestring_t)ivar_3;
        result->count++;
        release_bytestrings__bytestring(ivar_3);

        return result;
}

extern bytestrings__bytestring_t test_bytestring__string6(void){
        bytestrings__bytestring_t result;
        uint8_t ivar_3;
        ivar_3 = (uint8_t)11259375;
        bytestrings__bytestring_t ivar_2;
        ivar_2 = (bytestrings__bytestring_t)bytestrings__unit((uint8_t)ivar_3);
        //copying to bytestrings__bytestring from bytestrings__bytestring;
        result = (bytestrings__bytestring_t)ivar_2;
        result->count++;
        release_bytestrings__bytestring(ivar_2);

        return result;
}
