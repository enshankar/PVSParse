(byte (and_TCC1 0
       (and_TCC1-1 nil 3820632280
        (""
         (inst +
          "LAMBDA b1, b2: bv2nat(LAMBDA i: nat2bv(b1)(i) & nat2bv(b2)(i))")
         (("" (skeep*)
           (("" (rewrite "nat2bv_inv")
             (("" (beta) (("" (assert) (("" (postpone) nil nil)) nil))
               nil))
             nil))
           nil))
         nil)
        nil nil
        (and existence ""
             "[d: [byte, byte] -> {b | FORALL i: bv_nat[8].nat2bv(byte.b)(byte.i) = (booleans.&(bv_nat[8].nat2bv(d`1)(byte.i), bv_nat[8].nat2bv(d`2)(byte.i)))}]")))
      (‌‌OR_TCC1 0
       (‌‌OR_TCC1-1 nil 3820632280
        (""
         (inst +
          "LAMBDA b1, b2: bv2nat(LAMBDA i: nat2bv(b1)(i) OR nat2bv(b2)(i))")
         (("" (skeep*)
           (("" (rewrite "nat2bv_inv") (("" (ground) nil nil)) nil))
           nil))
         nil)
        ((TRUE const-decl "bool" booleans nil)
         (nat2bv_inv formula-decl nil bv_nat nil)
         (OR const-decl "[bool, bool -> bool]" booleans nil)
         (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat
          nil)
         (bv2nat const-decl "below(exp2(N))" bv_nat nil)
         (bvec type-eq-decl nil bv nil)
         (below type-eq-decl nil naturalnumbers nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (bit type-eq-decl nil bit nil)
         (bindex type-eq-decl nil byte nil)
         (byte type-eq-decl nil byte nil)
         (exp2 def-decl "posnat" exp2 nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (< const-decl "bool" reals nil)
         (nat nonempty-type-eq-decl nil naturalnumbers nil)
         (>= const-decl "bool" reals nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]"
          number_fields nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number nonempty-type-decl nil numbers nil))
        nil
        (‌‌OR existence ""
         "[d: [byte, byte] -> {b | FORALL i: bv_nat[8].nat2bv(byte.b)(byte.i) = (booleans.OR(bv_nat[8].nat2bv(d`1)(byte.i), bv_nat[8].nat2bv(d`2)(byte.i)))}]")))
      (‌X‌OR_TCC1 0
       (‌X‌OR_TCC1-1 nil 3820632280
        (""
         (inst +
          "LAMBDA b1, b2: bv2nat(LAMBDA i: nat2bv(b1)(i) XOR nat2bv(b2)(i))")
         (("" (skeep*)
           (("" (rewrite "nat2bv_inv") (("" (ground) nil nil)) nil))
           nil))
         nil)
        ((TRUE const-decl "bool" booleans nil)
         (nat2bv_inv formula-decl nil bv_nat nil)
         (XOR const-decl "bool" xor_def nil)
         (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat
          nil)
         (bv2nat const-decl "below(exp2(N))" bv_nat nil)
         (bvec type-eq-decl nil bv nil)
         (below type-eq-decl nil naturalnumbers nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (bit type-eq-decl nil bit nil)
         (bindex type-eq-decl nil byte nil)
         (byte type-eq-decl nil byte nil)
         (exp2 def-decl "posnat" exp2 nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (< const-decl "bool" reals nil)
         (nat nonempty-type-eq-decl nil naturalnumbers nil)
         (>= const-decl "bool" reals nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]"
          number_fields nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number nonempty-type-decl nil numbers nil))
        nil
        (‌X‌OR existence ""
         "[d: [byte, byte] -> {b | FORALL i: bv_nat[8].nat2bv(byte.b)(byte.i) = (xor_def.XOR(bv_nat[8].nat2bv(d`1)(byte.i), bv_nat[8].nat2bv(d`2)(byte.i)))}]")))
      (NOT_TCC1 0
       (NOT_TCC1-1 nil 3820632280
        ("" (inst + "LAMBDA b1: bv2nat(LAMBDA i: NOT nat2bv(b1)(i))")
         (("" (skeep*)
           (("" (rewrite "nat2bv_inv") (("" (ground) nil nil)) nil))
           nil))
         nil)
        ((TRUE const-decl "bool" booleans nil)
         (nat2bv_inv formula-decl nil bv_nat nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (nat2bv const-decl "{bv: bvec[N] | bv2nat(bv) = val}" bv_nat
          nil)
         (bv2nat const-decl "below(exp2(N))" bv_nat nil)
         (bvec type-eq-decl nil bv nil)
         (below type-eq-decl nil naturalnumbers nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (bit type-eq-decl nil bit nil)
         (bindex type-eq-decl nil byte nil)
         (exp2 def-decl "posnat" exp2 nil)
         (posnat nonempty-type-eq-decl nil integers nil)
         (> const-decl "bool" reals nil)
         (nonneg_int nonempty-type-eq-decl nil integers nil)
         (< const-decl "bool" reals nil)
         (nat nonempty-type-eq-decl nil naturalnumbers nil)
         (>= const-decl "bool" reals nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]"
          number_fields nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (byte type-eq-decl nil byte nil))
        nil
        (NOT existence ""
         "[b1: byte.byte -> {b | FORALL i: bv_nat[8].nat2bv(byte.b)(byte.i) = ((booleans.NOT)(bv_nat[8].nat2bv(b1)(byte.i)))}]")))
      (rshift_TCC1 0
       (rshift_TCC1-1 nil 3820632280 ("" (existence-tcc) nil nil) nil
        nil
        (rshift existence ""
         "[d: [byte, bindex] -> {b | IF reals.<(d`2, 8) THEN byte.b = modulo_arithmetic.nrem(d`1, exp2.exp2(d`2)) ELSE byte.b = 0 ENDIF}]")))
      (lshift_TCC1 0
       (lshift_TCC2-1 nil 3820632280 ("" (existence-tcc) nil nil) nil
        nil
        (lshift existence ""
         "[d: [byte, bindex] -> {b | IF reals.<(d`2, 8) THEN byte.b = modulo_arithmetic.nrem(number_fields.*(d`1, exp2.exp2(d`2)), exp2.exp2(8)) ELSE byte.b = 0 ENDIF}]"))))

