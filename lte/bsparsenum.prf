(|bsparsenum|
 (|byte_to_digit_TCC1| 0
  (|byte_to_digit_TCC1-1| NIL 3966512557 ("" (SUBTYPE-TCC) NIL NIL)
   ((|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|is_digit| CONST-DECL "bool" |bsparsenum| NIL)
    (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|byte_to_digit| SUBTYPE "(number_fields.-)(bsparsenum.b, 48)" "uint8"
                    (15 40 15 46))))
 (|bs_to_nat_inner_TCC1| 0
  (|bs_to_nat_inner_TCC1-1| NIL 3966512557 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|bs_to_nat_inner| SUBTYPE
    "(number_fields.-)(length(bsparsenum.bs), bsparsenum.i)" "naturalnumber"
    (58 10 58 24))))
 (|bs_to_nat_inner_TCC2| 0
  (|bs_to_nat_inner_TCC2-1| NIL 3966512557 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL)
    (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|bs_to_nat_inner| SUBTYPE "bsparsenum.i" "below(length(bsparsenum.bs))"
    (49 31 49 32))))
 (|bs_to_nat_inner_TCC3| 0
  (|bs_to_nat_inner_TCC3-1| NIL 3966512557 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|get| CONST-DECL "byte" |bytestrings| NIL)
    (|is_digit| CONST-DECL "bool" |bsparsenum| NIL)
    (MAX_MANTISSA CONST-DECL "int64" |bsparsenum| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL)
    (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|bs_to_nat_inner| SUBTYPE "(number_fields.+)(bsparsenum.i, 1)"
    "upto(bsparsenum.bs`length)" (53 28 53 31))))
 (|bs_to_nat_inner_TCC4| 0
  (|bs_to_nat_inner_TCC4-1| NIL 3966512557 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|bs_to_nat_inner| SUBTYPE
    "(number_fields.+)(number_fields.*(bsparsenum.acc, 10), bsparsenum.byte_to_digit(bytestrings.get(bsparsenum.bs, bsparsenum.i)))"
    "int64" (53 33 53 69))))
 (|bs_to_nat_inner_TCC5| 0
  (|bs_to_nat_inner_TCC5-1| NIL 3966512557 ("" (TERMINATION-TCC) NIL NIL)
   ((|get| CONST-DECL "byte" |bytestrings| NIL)
    (|is_digit| CONST-DECL "bool" |bsparsenum| NIL)
    (MAX_MANTISSA CONST-DECL "int64" |bsparsenum| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|bs_to_nat_inner| TERMINATION
    "bsparsenum.bs_to_nat_inner(bsparsenum.bs, (number_fields.+)(bsparsenum.i, 1), (number_fields.+)(number_fields.*(bsparsenum.acc, 10), bsparsenum.byte_to_digit(bytestrings.get(bsparsenum.bs, bsparsenum.i))))"
    "NIL" (53 8 53 70))))
 (|bs_to_nat_TCC1| 0
  (|bs_to_nat_TCC1-1| NIL 3966512557 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL (|bs_to_nat| SUBTYPE "0" "upto(bsparsenum.bs`length)" (64 26 64 27))))
 (|test_bs_to_nat_0_TCC1| 0
  (|test_bs_to_nat_0_TCC1-1| NIL 3966512557 ("" (EVAL-FORMULA) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL (|test_bs_to_nat_0| SUBTYPE "\"0\"" "bstring" (67 37 67 38))))
 (|test_bs_to_nat_00_TCC1| 0
  (|test_bs_to_nat_00_TCC1-1| NIL 3966512557 ("" (EVAL-FORMULA) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL (|test_bs_to_nat_00| SUBTYPE "\"00\"" "bstring" (68 38 68 40))))
 (|test_bs_to_nat_1_TCC1| 0
  (|test_bs_to_nat_1_TCC1-1| NIL 3966512557 ("" (EVAL-FORMULA) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL (|test_bs_to_nat_1| SUBTYPE "\"1\"" "bstring" (69 37 69 38))))
 (|test_bs_to_nat_01_TCC1| 0
  (|test_bs_to_nat_01_TCC1-1| NIL 3966512557 ("" (EVAL-FORMULA) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL (|test_bs_to_nat_01| SUBTYPE "\"01\"" "bstring" (70 38 70 40))))
 (|test_bs_to_nat_001_TCC1| 0
  (|test_bs_to_nat_001_TCC1-1| NIL 3966512557 ("" (EVAL-FORMULA) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL (|test_bs_to_nat_001| SUBTYPE "\"001\"" "bstring" (71 39 71 42))))
 (|test_bs_to_nat_5_TCC1| 0
  (|test_bs_to_nat_5_TCC1-1| NIL 3966512557 ("" (EVAL-FORMULA) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL (|test_bs_to_nat_5| SUBTYPE "\"5\"" "bstring" (72 37 72 38))))
 (|test_bs_to_nat_10_TCC1| 0
  (|test_bs_to_nat_10_TCC1-1| NIL 3966512557 ("" (EVAL-FORMULA) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL (|test_bs_to_nat_10| SUBTYPE "\"10\"" "bstring" (73 38 73 40))))
 (|test_bs_to_nat_11_TCC1| 0
  (|test_bs_to_nat_11_TCC1-1| NIL 3966512557 ("" (EVAL-FORMULA) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL (|test_bs_to_nat_11| SUBTYPE "\"11\"" "bstring" (74 38 74 40))))
 (|test_bs_to_nat_501_TCC1| 0
  (|test_bs_to_nat_501_TCC1-1| NIL 3966512557 ("" (EVAL-FORMULA) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL (|test_bs_to_nat_501| SUBTYPE "\"501\"" "bstring" (75 39 75 42))))
 (|test_bs_to_nat_632_TCC1| 0
  (|test_bs_to_nat_632_TCC1-1| NIL 3966512557 ("" (EVAL-FORMULA) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL (|test_bs_to_nat_632| SUBTYPE "\"632\"" "bstring" (76 39 76 42))))
 (|test_bs_to_nat_3429_TCC1| 0
  (|test_bs_to_nat_3429_TCC1-1| NIL 3966512557 ("" (EVAL-FORMULA) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL (|test_bs_to_nat_3429| SUBTYPE "\"3429\"" "bstring" (77 40 77 44))))
 (|test_bs_to_nat_fail1_TCC1| 0
  (|test_bs_to_nat_fail1_TCC1-1| NIL 3966512557 ("" (EVAL-FORMULA) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL (|test_bs_to_nat_fail1| SUBTYPE "\"abcde\"" "bstring" (78 41 78 46))))
 (|test_bs_to_nat_fail2_TCC1| 0
  (|test_bs_to_nat_fail2_TCC1-1| NIL 3966512557 ("" (EVAL-FORMULA) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL (|test_bs_to_nat_fail2| SUBTYPE "\"3a\"" "bstring" (79 41 79 43))))
 (|test_bs_to_nat_fail3_TCC1| 0
  (|test_bs_to_nat_fail3_TCC1-1| NIL 3966512557 ("" (EVAL-FORMULA) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL (|test_bs_to_nat_fail3| SUBTYPE "\"a3\"" "bstring" (80 41 80 43))))
 (|test_bs_to_nat_fail4_TCC1| 0
  (|test_bs_to_nat_fail4_TCC1-1| NIL 3966512557 ("" (EVAL-FORMULA) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL (|test_bs_to_nat_fail4| SUBTYPE "\"\"" "bstring" (81 41 81 41))))
 (|test_bs_to_nat_fail5_TCC1| 0
  (|test_bs_to_nat_fail5_TCC1-1| NIL 3966512557 ("" (EVAL-FORMULA) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL (|test_bs_to_nat_fail5| SUBTYPE "\"-1\"" "bstring" (82 41 82 43))))
 (|test_recognizer_failed_TCC1| 0
  (|test_recognizer_failed_TCC1-1| NIL 3966512557 ("" (EVAL-FORMULA) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL (|test_recognizer_failed| SUBTYPE "\"abcd\"" "bstring" (84 55 84 59))))
 (|bytestring_to_uint_rec_TCC1| 0
  (|bytestring_to_uint_rec_TCC2-1| NIL 3965311333
   ("" (SKEEP)
    (("" (CASE "length(bs) < 19")
      (("1" (TYPEPRED "acc")
        (("1" (ASSERT)
          (("1" (GRIND)
            (("1" (CASE "i = 18")
              (("1" (GRIND) NIL NIL)
               ("2" (CASE "i = 17")
                (("1" (GRIND) NIL NIL)
                 ("2" (CASE "i = 16")
                  (("1" (GRIND) NIL NIL)
                   ("2" (CASE "i = 15")
                    (("1" (GRIND) NIL NIL)
                     ("2" (CASE "i = 14")
                      (("1" (GRIND) NIL NIL)
                       ("2" (CASE "i = 13")
                        (("1" (GRIND) NIL NIL)
                         ("2" (CASE "i = 12")
                          (("1" (GRIND) NIL NIL)
                           ("2" (CASE "i = 11")
                            (("1" (GRIND) NIL NIL)
                             ("2" (CASE "i = 10")
                              (("1" (GRIND) NIL NIL)
                               ("2" (CASE "i = 9")
                                (("1" (GRIND) NIL NIL)
                                 ("2" (CASE "i = 8")
                                  (("1" (GRIND) NIL NIL)
                                   ("2" (CASE "i = 7")
                                    (("1" (GRIND) NIL NIL)
                                     ("2" (CASE "i = 6")
                                      (("1" (GRIND) NIL NIL)
                                       ("2" (CASE "i = 5")
                                        (("1" (GRIND) NIL NIL)
                                         ("2" (CASE "i = 4")
                                          (("1" (GRIND) NIL NIL)
                                           ("2" (CASE "i = 3")
                                            (("1" (GRIND) NIL NIL)
                                             ("2" (CASE "i = 2")
                                              (("1" (GRIND) NIL NIL)
                                               ("2" (CASE "i = 1")
                                                (("1" (GRIND) NIL NIL)
                                                 ("2" (CASE "i = 0")
                                                  (("1" (GRIND) NIL NIL)
                                                   ("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (ASSERT) NIL NIL))
      NIL))
    NIL)
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL)
    (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL))
   NIL
   (|bytestring_to_uint_rec| SUBTYPE "bsparsenum.acc" "int64"
                             (118 40 118 43))))
 (|bytestring_to_uint_rec_TCC2| 0
  (|bytestring_to_uint_rec_TCC2-1| NIL 3965308950 ("" (SUBTYPE-TCC) NIL NIL)
   ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|byte_to_digit| CONST-DECL "uint8" |bsparsenum| NIL)
    (|is_digit| CONST-DECL "bool" |bsparsenum| NIL)
    (|get| CONST-DECL "byte" |bytestrings| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL)
    (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|bytestring_to_uint_rec| SUBTYPE "(number_fields.+)(bsparsenum.i, 1)"
                             "upto(bsparsenum.bs`length)" (122 39 122 42))))
 (|bytestring_to_uint_rec_TCC3| 0
  (|bytestring_to_uint_rec_TCC3-1| NIL 3965308950
   ("" (SKEEP*)
    (("" (TYPEPRED "acc")
      (("" (EXPAND "is_digit")
        (("" (EXPAND "byte_to_digit")
          (("" (GRIND)
            (("" (HIDE -6)
              (("" (CASE "i = 18")
                (("1" (GRIND) NIL NIL)
                 ("2" (CASE "i = 17")
                  (("1" (GRIND) NIL NIL)
                   ("2" (CASE "i = 16")
                    (("1" (GRIND) NIL NIL)
                     ("2" (CASE "i = 15")
                      (("1" (GRIND) NIL NIL)
                       ("2" (CASE "i = 14")
                        (("1" (GRIND) NIL NIL)
                         ("2" (CASE "i = 13")
                          (("1" (GRIND) NIL NIL)
                           ("2" (CASE "i = 12")
                            (("1" (GRIND) NIL NIL)
                             ("2" (CASE "i = 11")
                              (("1" (GRIND) NIL NIL)
                               ("2" (CASE "i = 10")
                                (("1" (GRIND) NIL NIL)
                                 ("2" (CASE "i = 9")
                                  (("1" (GRIND) NIL NIL)
                                   ("2" (CASE "i = 8")
                                    (("1" (GRIND) NIL NIL)
                                     ("2" (CASE "i = 7")
                                      (("1" (GRIND) NIL NIL)
                                       ("2" (CASE "i = 6")
                                        (("1" (GRIND) NIL NIL)
                                         ("2" (CASE "i = 5")
                                          (("1" (GRIND) NIL NIL)
                                           ("2" (CASE "i = 4")
                                            (("1" (GRIND) NIL NIL)
                                             ("2" (CASE "i = 3")
                                              (("1" (GRIND) NIL NIL)
                                               ("2" (CASE "i = 2")
                                                (("1" (GRIND) NIL NIL)
                                                 ("2" (CASE "i = 1")
                                                  (("1" (GRIND) NIL NIL)
                                                   ("2" (CASE "i = 0")
                                                    (("1" (GRIND) NIL NIL)
                                                     ("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|uint64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL)
    (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|byte_to_digit| CONST-DECL "uint8" |bsparsenum| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|get| CONST-DECL "byte" |bytestrings| NIL)
    (|is_digit| CONST-DECL "bool" |bsparsenum| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL))
   NIL
   (|bytestring_to_uint_rec| SUBTYPE "bsparsenum.new_acc"
                             "{u: integertypes.uint64 | reals.<=(u, ((number_fields.-)(exponentiation.^(10, (number_fields.+)(1, bsparsenum.i)), 1)))}"
                             (122 44 122 51))))
 (|bytestring_to_uint_rec_TCC4| 0
  (|bytestring_to_uint_rec_TCC4-1| NIL 3965308950
   ("" (SKEEP*) (("" (ASSERT) NIL NIL)) NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL))
   NIL
   (|bytestring_to_uint_rec| TERMINATION
                             "bsparsenum.bytestring_to_uint_rec(bsparsenum.bs, (number_fields.+)(bsparsenum.i, 1), bsparsenum.new_acc)"
                             "NIL" (122 12 122 52))))
 (|bytestring_to_uint_rec_TCC5| 0
  (|bytestring_to_uint_rec_TCC5-1| NIL 3965308950
   ("" (SKEEP) (("" (ASSERT) NIL NIL)) NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL))
   NIL
   (|bytestring_to_uint_rec| SUBTYPE "bsparsenum.i"
                             "below(length(bsparsenum.bs))" (119 27 119 28))))
 (|bs_to_int_TCC1| 0
  (|bs_to_int_TCC1-1| NIL 3966512557 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|bs_to_int| SUBTYPE "0" "below(length(bsparsenum.bs))" (129 48 129 49))))
 (|bs_to_int_TCC2| 0
  (|bs_to_int_TCC2-1| NIL 3966512557 ("" (SUBTYPE-TCC) NIL NIL)
   ((|get| CONST-DECL "byte" |bytestrings| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL
   (|bs_to_int| SUBTYPE "1" "upto(length(bsparsenum.bs))" (130 54 130 55))))
 (|bs_to_int_TCC3| 0
  (|bs_to_int_TCC3-1| NIL 3966512557 ("" (SUBTYPE-TCC) NIL NIL)
   ((|suffix| CONST-DECL "bytestring" |bytestrings| NIL)
    (|get| CONST-DECL "byte" |bytestrings| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   NIL (|bs_to_int| SUBTYPE "0" "upto(bsparsenum.bs`length)" (132 54 132 55))))
 (|bs_to_int_TCC4| 0
  (|bs_to_int_TCC4-1| NIL 3966512557 ("" (GRIND) NIL NIL)
   ((|get| CONST-DECL "byte" |bytestrings| NIL)
    (|suffix| CONST-DECL "bytestring" |bytestrings| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL))
   NIL
   (|bs_to_int| SUBTYPE "0"
                "{u: integertypes.uint64 | reals.<=(u, ((number_fields.-)(exponentiation.^(10, 0), 1)))}"
                (132 57 132 58))))
 (|bs_to_int_TCC5| 0
  (|bs_to_int_TCC5-1| NIL 3966512557 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|get| CONST-DECL "byte" |bytestrings| NIL)
    (|suffix| CONST-DECL "bytestring" |bytestrings| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|bs_to_int| SUBTYPE "number_fields.*(bsparsenum.x, -1)" "int64"
                (135 50 135 56))))
 (|test_bs_to_int_neg_only_TCC1| 0
  (|test_bs_to_int_neg_only_TCC1-1| NIL 3966512557 ("" (EVAL-FORMULA) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL (|test_bs_to_int_neg_only| SUBTYPE "\"-\"" "bstring" (157 44 157 45))))
 (|test_bs_to_int_neg01_TCC1| 0
  (|test_bs_to_int_neg01_TCC1-1| NIL 3966512557 ("" (EVAL-FORMULA) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL (|test_bs_to_int_neg01| SUBTYPE "\"-01\"" "bstring" (159 41 159 44))))
 (|test_bs_to_int_neg001_TCC1| 0
  (|test_bs_to_int_neg001_TCC1-1| NIL 3966512557 ("" (EVAL-FORMULA) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL (|test_bs_to_int_neg001| SUBTYPE "\"-001\"" "bstring" (160 42 160 46))))
 (|test_bs_to_int_neg5_TCC1| 0
  (|test_bs_to_int_neg5_TCC1-1| NIL 3966512557 ("" (EVAL-FORMULA) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL (|test_bs_to_int_neg5| SUBTYPE "\"-5\"" "bstring" (161 40 161 42))))
 (|test_bs_to_int_neg10_TCC1| 0
  (|test_bs_to_int_neg10_TCC1-1| NIL 3966512557 ("" (EVAL-FORMULA) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL (|test_bs_to_int_neg10| SUBTYPE "\"-10\"" "bstring" (162 41 162 44))))
 (|test_bs_to_int_neg11_TCC1| 0
  (|test_bs_to_int_neg11_TCC1-1| NIL 3966512557 ("" (EVAL-FORMULA) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL (|test_bs_to_int_neg11| SUBTYPE "\"-11\"" "bstring" (163 41 163 44))))
 (|test_bs_to_int_neg501_TCC1| 0
  (|test_bs_to_int_neg501_TCC1-1| NIL 3966512557 ("" (EVAL-FORMULA) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL (|test_bs_to_int_neg501| SUBTYPE "\"-501\"" "bstring" (164 42 164 46))))
 (|test_bs_to_int_neg632_TCC1| 0
  (|test_bs_to_int_neg632_TCC1-1| NIL 3966512557 ("" (EVAL-FORMULA) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL (|test_bs_to_int_neg632| SUBTYPE "\"-632\"" "bstring" (165 42 165 46))))
 (|test_bs_to_int_neg3429_TCC1| 0
  (|test_bs_to_int_neg3429_TCC1-1| NIL 3966512557 ("" (EVAL-FORMULA) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|test_bs_to_int_neg3429| SUBTYPE "\"-3429\"" "bstring" (166 43 166 48))))
 (|bs_to_num_inner_TCC1| 0
  (|bs_to_num_inner_TCC1-1| NIL 3966512557 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|bs_to_num_inner| SUBTYPE
                      "(number_fields.-)(bsparsenum.dot_pos, length(bsparsenum.bs))"
                      "int64" (180 25 180 45))))
 (|bs_to_num_inner_TCC2| 0
  (|bs_to_num_inner_TCC2-1| NIL 3966512557 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|get| CONST-DECL "byte" |bytestrings| NIL)
    (|is_digit| CONST-DECL "bool" |bsparsenum| NIL)
    (MAX_MANTISSA CONST-DECL "int64" |bsparsenum| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL)
    (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|bs_to_num_inner| SUBTYPE "(number_fields.+)(bsparsenum.i, 1)"
                      "upto(bsparsenum.bs`length)" (186 30 186 35))))
 (|bs_to_num_inner_TCC3| 0
  (|bs_to_num_inner_TCC3-1| NIL 3966512557 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|bs_to_num_inner| SUBTYPE
                      "(number_fields.+)(number_fields.*(bsparsenum.acc, 10), bsparsenum.byte_to_digit(bsparsenum.c))"
                      "int64" (186 37 186 64))))
 (|bs_to_num_inner_TCC4| 0
  (|bs_to_num_inner_TCC4-1| NIL 3966512557 ("" (TERMINATION-TCC) NIL NIL)
   ((|get| CONST-DECL "byte" |bytestrings| NIL)
    (|is_digit| CONST-DECL "bool" |bsparsenum| NIL)
    (MAX_MANTISSA CONST-DECL "int64" |bsparsenum| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|bs_to_num_inner| TERMINATION
                      "bsparsenum.bs_to_num_inner(bsparsenum.bs, (number_fields.+)(bsparsenum.i, 1), (number_fields.+)(number_fields.*(bsparsenum.acc, 10), bsparsenum.byte_to_digit(bsparsenum.c)), bsparsenum.dot_pos)"
                      "NIL" (186 10 186 74))))
 (|bs_to_num_inner_TCC5| 0
  (|bs_to_num_inner_TCC5-1| NIL 3966512557 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|get| CONST-DECL "byte" |bytestrings| NIL)
    (|is_digit| CONST-DECL "bool" |bsparsenum| NIL)
    (|is_dot| CONST-DECL "bool" |bsparsenum| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL)
    (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|bs_to_num_inner| SUBTYPE "(number_fields.+)(bsparsenum.i, 1)"
                      "upto(bsparsenum.bs`length)" (194 30 194 35))))
 (|bs_to_num_inner_TCC6| 0
  (|bs_to_num_inner_TCC6-1| NIL 3966512557 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|bs_to_num_inner| SUBTYPE "(number_fields.+)(bsparsenum.i, 1)" "uint32"
                      (194 42 194 47))))
 (|bs_to_num_inner_TCC7| 0
  (|bs_to_num_inner_TCC7-1| NIL 3966512557 ("" (TERMINATION-TCC) NIL NIL)
   ((|get| CONST-DECL "byte" |bytestrings| NIL)
    (|is_digit| CONST-DECL "bool" |bsparsenum| NIL)
    (|is_dot| CONST-DECL "bool" |bsparsenum| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL))
   NIL
   (|bs_to_num_inner| TERMINATION
                      "bsparsenum.bs_to_num_inner(bsparsenum.bs, (number_fields.+)(bsparsenum.i, 1), bsparsenum.acc, (number_fields.+)(bsparsenum.i, 1))"
                      "NIL" (194 10 194 48))))
 (|bs_to_num_inner_TCC8| 0
  (|bs_to_num_inner_TCC8-1| NIL 3966512557 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|bs_to_num_inner| SUBTYPE
                      "(number_fields.-)(bsparsenum.dot_pos, bsparsenum.i)"
                      "int64" (199 15 199 26))))
 (|bs_to_num_inner_TCC9| 0
  (|bs_to_num_inner_TCC9-1| NIL 3966512557 ("" (SUBTYPE-TCC) NIL NIL)
   ((NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|get| CONST-DECL "byte" |bytestrings| NIL)
    (|is_digit| CONST-DECL "bool" |bsparsenum| NIL)
    (|is_dot| CONST-DECL "bool" |bsparsenum| NIL)
    (|is_e| CONST-DECL "bool" |bsparsenum| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|minus_u32_i32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int64| TYPE-EQ-DECL NIL |integertypes| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|uint32| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|exp2| DEF-DECL "posnat" |exp2| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|bytestring| TYPE-EQ-DECL NIL |bytestrings| NIL)
    (|byte| NONEMPTY-TYPE-EQ-DECL NIL |bytestrings| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|index| TYPE-EQ-DECL NIL |integertypes| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|bs_to_num_inner| SUBTYPE "(number_fields.+)(bsparsenum.i, 1)"
                      "upto(length(bsparsenum.bs))" (202 37 202 42))))
 (|bs_to_num_inner_TCC10| 0
  (|bs_to_num_inner_TCC10-1| NIL 3966512557 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|bs_to_num_inner| SUBTYPE
                      "(number_fields.+)(bsparsenum.x, bsparsenum.dot_exp)"
                      "int64" (203 45 203 56))))
 (|bs_to_num_TCC1| 0
  (|bs_to_num_TCC1-1| NIL 3966512557 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|bs_to_num| SUBTYPE "0" "below(length(bsparsenum.bs))" (216 37 216 38))))
 (|bs_to_num_TCC2| 0
  (|bs_to_num_TCC2-1| NIL 3966512557 ("" (SUBTYPE-TCC) NIL NIL)
   ((|get| CONST-DECL "byte" |bytestrings| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|bs_to_num| SUBTYPE "1" "upto(length(bsparsenum.bs))" (217 39 217 40))))
 (|bs_to_num_TCC3| 0
  (|bs_to_num_TCC3-1| NIL 3966512557 ("" (SUBTYPE-TCC) NIL NIL)
   ((|suffix| CONST-DECL "bytestring" |bytestrings| NIL)
    (|get| CONST-DECL "byte" |bytestrings| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|bs_to_num| SUBTYPE "0" "upto(bytestrings.suffix(bsparsenum.bs, 1)`length)"
                (217 43 217 44))))
 (|bs_to_num_TCC4| 0
  (|bs_to_num_TCC4-1| NIL 3966512557 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|bs_to_num| SUBTYPE "number_fields.*(bsparsenum.x, -1)" "int64"
                (218 36 218 42))))
 (|bs_to_num_TCC5| 0
  (|bs_to_num_TCC5-1| NIL 3966512557 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|bs_to_num| SUBTYPE "number_fields.*(bsparsenum.mantissa, -1)" "int64"
                (219 48 219 61))))
 (|test_bs_to_num_1point1_TCC1| 0
  (|test_bs_to_num_1point1_TCC1-1| NIL 3966512557 ("" (EVAL-FORMULA) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL (|test_bs_to_num_1point1| SUBTYPE "\"1.1\"" "bstring" (251 43 251 46))))
 (|test_bs_to_num_1point1e2_TCC1| 0
  (|test_bs_to_num_1point1e2_TCC1-1| NIL 3966512557 ("" (EVAL-FORMULA) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|test_bs_to_num_1point1e2| SUBTYPE "\"1.1e2\"" "bstring" (252 45 252 50))))
 (|test_bs_to_num_1point1eminus1_TCC1| 0
  (|test_bs_to_num_1point1eminus1_TCC1-1| NIL 3966512557
   ("" (EVAL-FORMULA) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|test_bs_to_num_1point1eminus1| SUBTYPE "\"1.1e-1\"" "bstring"
    (253 50 253 56))))
 (|test_exp_TCC1| 0
  (|test_exp_TCC1-1| NIL 3966512557 ("" (GRIND) NIL NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|plus_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|bs_to_num| CONST-DECL "parseresult_num" |bsparsenum| NIL)
    (|bs_to_num_inner| DEF-DECL "parseresult_num" |bsparsenum| NIL)
    (|bs_to_int| CONST-DECL "parseresult_num" |bsparsenum| NIL)
    (|bytestring_to_uint_rec| DEF-DECL "parseresult_num" |bsparsenum| NIL)
    (|suffix| CONST-DECL "bytestring" |bytestrings| NIL)
    (|is_e| CONST-DECL "bool" |bsparsenum| NIL)
    (|is_dot| CONST-DECL "bool" |bsparsenum| NIL)
    (|byte_to_digit| CONST-DECL "uint8" |bsparsenum| NIL)
    (MAX_MANTISSA CONST-DECL "int64" |bsparsenum| NIL)
    (|is_digit| CONST-DECL "bool" |bsparsenum| NIL)
    (|get| CONST-DECL "byte" |bytestrings| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|mk_bytestring| CONST-DECL "bytestring" |bytestrings| NIL)
    (|get| CONST-DECL "char" |gen_strings| NIL)
    (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL))
   NIL
   (|test_exp| SUBTYPE
    "bsparsenum.bs_to_num(bytestrings.mk_bytestring(\"1.1e2\"))"
    "(bsparsenum.success_dec?)" (255 31 255 49)))))

